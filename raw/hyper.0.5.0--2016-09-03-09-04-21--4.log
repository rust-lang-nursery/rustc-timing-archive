commit 01b35d82e51458870f61cf850b73479f253fcb54
Merge: a029ea3 175d434
Author: bors <bors@rust-lang.org>
Date:   Sat Sep 3 04:40:38 2016 -0700

    Auto merge of #36072 - arthurprs:binary_heap_opt, r=Aatch
    
    Optimize BinaryHeap bounds checking
    
    I was experimenting with d-ary binary heaps during the weekend (dead end) and I found that we could get some good improvements by removing bounds checking. Specially due to the panic-safe additional code, llvm can't really optimize them out.
    
    ```
     name                         d_ary_heap:: ns/iter  std___heap:: ns/iter  diff ns/iter  diff %
     bench_build_insert           148,610               236,960                     88,350  59.45%
     bench_from_vec               243,846               299,719                     55,873  22.91%
     bench_insert_2000_empty      4,512                 7,517                        3,005  66.60%
     bench_insert_2000_prefilled  28,665                32,605                       3,940  13.74%
     bench_pop_2000               111,515               128,005                     16,490  14.79%
     bench_pop_all                2,759,945             3,317,626                  557,681  20.21%
     peek_mut                     23,186                23,635                         449   1.94%
     pop_modify_push              41,573                43,822                       2,249   5.41%
    
    test d_ary_heap::bench_build_insert          ... bench:     148,610 ns/iter (+/- 10,687)
    test d_ary_heap::bench_from_vec              ... bench:     243,846 ns/iter (+/- 16,500)
    test d_ary_heap::bench_insert_2000_empty     ... bench:       4,512 ns/iter (+/- 136)
    test d_ary_heap::bench_insert_2000_prefilled ... bench:      28,665 ns/iter (+/- 1,347)
    test d_ary_heap::bench_pop_2000              ... bench:     111,515 ns/iter (+/- 104,677)
    test d_ary_heap::bench_pop_all               ... bench:   2,759,945 ns/iter (+/- 173,838)
    test d_ary_heap::peek_mut                    ... bench:      23,186 ns/iter (+/- 106,254)
    test d_ary_heap::pop_modify_push             ... bench:      41,573 ns/iter (+/- 3,313)
    test std___heap::bench_build_insert          ... bench:     236,960 ns/iter (+/- 16,955)
    test std___heap::bench_from_vec              ... bench:     299,719 ns/iter (+/- 6,354)
    test std___heap::bench_insert_2000_empty     ... bench:       7,517 ns/iter (+/- 372)
    test std___heap::bench_insert_2000_prefilled ... bench:      32,605 ns/iter (+/- 2,433)
    test std___heap::bench_pop_2000              ... bench:     128,005 ns/iter (+/- 11,787)
    test std___heap::bench_pop_all               ... bench:   3,317,626 ns/iter (+/- 238,968)
    test std___heap::peek_mut                    ... bench:      23,635 ns/iter (+/- 1,420)
    test std___heap::pop_modify_push             ... bench:      43,822 ns/iter (+/- 3,788)
    ```
    
    Test code: https://github.com/arthurprs/heap-experiments
rustc: ./hyper.0.5.0
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling hyper v0.5.0 (file:///root/benchmarks/hyper.0.5.0)
time: 0.028; rss: 50MB	parsing
Lines of code:             9154
Pre-expansion node count:  44873
time: 0.003; rss: 50MB	configuration
time: 0.000; rss: 50MB	recursion limit
time: 0.000; rss: 50MB	crate injection
time: 0.000; rss: 50MB	plugin loading
time: 0.000; rss: 50MB	plugin registration
time: 0.091; rss: 79MB	expansion
time: 0.000; rss: 79MB	maybe building test harness
time: 0.001; rss: 79MB	maybe creating a macro crate
time: 0.004; rss: 79MB	assigning node ids
Post-expansion node count: 101537
time: 0.000; rss: 79MB	checking for inline asm in case the target doesn't support it
time: 0.002; rss: 79MB	complete gated feature checking
time: 0.003; rss: 81MB	collecting defs
time: 0.009; rss: 87MB	external crate/lib resolution
time: 0.003; rss: 87MB	early lint checks
time: 0.001; rss: 87MB	AST validation
time: 0.015; rss: 95MB	name resolution
time: 0.008; rss: 100MB	lowering ast -> hir
time: 0.002; rss: 102MB	indexing hir
time: 0.001; rss: 102MB	attribute checking
time: 0.001; rss: 95MB	language item collection
time: 0.002; rss: 95MB	lifetime resolution
time: 0.000; rss: 95MB	looking for entry point
time: 0.000; rss: 95MB	looking for plugin registrar
time: 0.006; rss: 100MB	region resolution
time: 0.001; rss: 100MB	loop checking
time: 0.001; rss: 100MB	static item recursion checking
time: 0.013; rss: 100MB	compute_incremental_hashes_map
time: 0.000; rss: 100MB	load_dep_graph
time: 0.023; rss: 102MB	type collecting
time: 0.000; rss: 102MB	variance inference
time: 0.035; rss: 105MB	coherence checking
time: 0.056; rss: 106MB	wf checking
time: 0.029; rss: 106MB	item-types checking
time: 0.365; rss: 118MB	item-bodies checking
time: 0.000; rss: 118MB	drop-impl checking
time: 0.038; rss: 120MB	const checking
time: 0.008; rss: 120MB	privacy checking
time: 0.001; rss: 120MB	stability index
time: 0.005; rss: 120MB	intrinsic checking
time: 0.002; rss: 120MB	effect checking
time: 0.013; rss: 121MB	match checking
time: 0.004; rss: 121MB	liveness checking
time: 0.027; rss: 121MB	rvalue checking
time: 0.054; rss: 137MB	MIR dump
time: 0.041; rss: 137MB	MIR passes
time: 0.062; rss: 137MB	borrow checking
time: 0.003; rss: 137MB	reachability checking
time: 0.005; rss: 137MB	death checking
time: 0.005; rss: 140MB	stability checking
time: 0.000; rss: 140MB	unused lib feature checking
time: 0.041; rss: 140MB	lint checking
time: 0.000; rss: 140MB	resolving dependency formats
time: 0.077; rss: 142MB	Prepare MIR codegen passes
  time: 0.055; rss: 146MB	write metadata
  time: 0.115; rss: 150MB	translation item collection
  time: 0.019; rss: 152MB	codegen unit partitioning
  time: 0.031; rss: 219MB	internalize symbols
time: 1.342; rss: 209MB	translation
time: 0.000; rss: 209MB	assert dep graph
time: 0.000; rss: 209MB	serialize dep graph
  time: 0.101; rss: 154MB	llvm function passes [0]
  time: 0.048; rss: 157MB	llvm module passes [0]
  time: 1.837; rss: 166MB	codegen passes [0]
  time: 0.001; rss: 166MB	codegen passes [0]
time: 2.151; rss: 166MB	LLVM passes
time: 0.000; rss: 166MB	serialize work products
time: 0.182; rss: 99MB	linking
done
