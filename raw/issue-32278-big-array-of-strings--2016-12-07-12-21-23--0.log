commit 209308439a1099b285520459f57e380f18793c07
Merge: 7846610 d6ec686
Author: bors <bors@rust-lang.org>
Date:   Wed Dec 7 16:32:48 2016 +0000

    Auto merge of #38105 - ollie27:rustdoc_deterministic_js, r=GuillaumeGomez
    
    rustdoc: Sort lines in search index and implementors js
    
    This means the files are generated deterministically even with rustdoc running in parallel.
    
    Fixes the first part of #30220.
rustc: ./issue-32278-big-array-of-strings
cargo rustc  -- -Ztime-passes -Zinput-stats
time: 0.102; rss: 60MB	parsing
Lines of code:             65577
Pre-expansion node count:  65552
time: 0.000; rss: 60MB	recursion limit
time: 0.000; rss: 60MB	crate injection
time: 0.000; rss: 60MB	plugin loading
time: 0.000; rss: 60MB	plugin registration
time: 0.023; rss: 84MB	expansion
time: 0.000; rss: 84MB	maybe building test harness
time: 0.001; rss: 84MB	maybe creating a macro crate
Post-expansion node count: 65565
time: 0.000; rss: 84MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 84MB	complete gated feature checking
time: 0.004; rss: 84MB	early lint checks
time: 0.000; rss: 84MB	AST validation
time: 0.002; rss: 84MB	name resolution
time: 0.004; rss: 93MB	lowering ast -> hir
time: 0.006; rss: 96MB	indexing hir
time: 0.000; rss: 96MB	attribute checking
time: 0.000; rss: 85MB	language item collection
time: 0.000; rss: 85MB	lifetime resolution
time: 0.000; rss: 85MB	looking for entry point
time: 0.000; rss: 85MB	looking for plugin registrar
time: 0.009; rss: 90MB	region resolution
time: 0.000; rss: 90MB	loop checking
time: 0.001; rss: 90MB	static item recursion checking
time: 0.037; rss: 90MB	compute_incremental_hashes_map
time: 0.000; rss: 90MB	load_dep_graph
time: 0.000; rss: 90MB	stability index
time: 0.000; rss: 90MB	stability checking
time: 0.000; rss: 90MB	type collecting
time: 0.000; rss: 90MB	variance inference
time: 0.000; rss: 90MB	impl wf inference
time: 0.003; rss: 92MB	coherence checking
time: 0.000; rss: 92MB	wf checking
time: 0.864; rss: 104MB	item-types checking
time: 0.000; rss: 104MB	item-bodies checking
time: 0.000; rss: 104MB	drop-impl checking
time: 0.023; rss: 103MB	const checking
time: 0.001; rss: 103MB	privacy checking
time: 0.000; rss: 103MB	intrinsic checking
time: 0.000; rss: 103MB	effect checking
time: 0.000; rss: 103MB	match checking
time: 0.000; rss: 103MB	liveness checking
time: 0.000; rss: 103MB	rvalue checking
time: 0.035; rss: 110MB	MIR dump
  time: 0.000; rss: 110MB	SimplifyCfg
  time: 0.001; rss: 110MB	QualifyAndPromoteConstants
  time: 0.001; rss: 110MB	TypeckMir
  time: 0.000; rss: 110MB	SimplifyBranches
  time: 0.000; rss: 110MB	SimplifyCfg
time: 0.002; rss: 110MB	MIR cleanup and validation
time: 0.001; rss: 110MB	borrow checking
time: 0.000; rss: 110MB	reachability checking
time: 0.000; rss: 110MB	death checking
time: 0.000; rss: 110MB	unused lib feature checking
time: 0.021; rss: 110MB	lint checking
time: 0.001; rss: 110MB	resolving dependency formats
  time: 0.000; rss: 110MB	NoLandingPads
  time: 0.000; rss: 110MB	SimplifyCfg
  time: 0.001; rss: 110MB	EraseRegions
  time: 0.000; rss: 110MB	AddCallGuards
  time: 0.000; rss: 110MB	ElaborateDrops
  time: 0.000; rss: 110MB	NoLandingPads
  time: 0.000; rss: 110MB	SimplifyCfg
  time: 0.000; rss: 110MB	InstCombine
  time: 0.000; rss: 110MB	Deaggregator
  time: 0.000; rss: 110MB	CopyPropagation
  time: 0.000; rss: 110MB	SimplifyLocals
  time: 0.000; rss: 110MB	AddCallGuards
  time: 0.000; rss: 110MB	PreTrans
time: 0.001; rss: 110MB	MIR optimisations
  time: 0.000; rss: 111MB	write metadata
  time: 0.000; rss: 111MB	translation item collection
  time: 0.000; rss: 111MB	codegen unit partitioning
  time: 0.001; rss: 122MB	internalize symbols
time: 0.097; rss: 122MB	translation
time: 0.000; rss: 122MB	assert dep graph
time: 0.000; rss: 122MB	serialize dep graph
  time: 0.008; rss: 92MB	llvm function passes [0]
  time: 0.000; rss: 92MB	llvm module passes [0]
  time: 0.202; rss: 91MB	codegen passes [0]
  time: 0.000; rss: 91MB	codegen passes [0]
time: 0.211; rss: 91MB	LLVM passes
time: 0.000; rss: 91MB	serialize work products
  time: 0.159; rss: 82MB	running linker
time: 0.160; rss: 82MB	linking
done
