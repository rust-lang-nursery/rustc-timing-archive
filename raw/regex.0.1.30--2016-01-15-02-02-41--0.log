commit a70a60a02bca4c1fb75a0eb0ecf80acb73972f66
Merge: d8869d3 acc9428
Author: bors <bors@rust-lang.org>
Date:   Fri Jan 15 06:38:26 2016 +0000

    Auto merge of #30763 - gchp:issue/30033, r=nagisa
    
    This is achieved by adding the scan_back method. This method looks back
    through the source_text of the StringReader until it finds the target
    char, returning it's offset in the source. We use this method to find
    the offset of the opening single quote, and use that offset as the start
    of the error.
    
    Given this code:
    
    ```rust
    fn main() {
        let _ = 'abcd';
    }
    ```
    
    The compiler would give a message like:
    
    ```
    error: character literal may only contain one codepoint: ';
    let _ = 'abcd';
                 ^~
    ```
    With this change, the message now displays:
    
    ```
    error: character literal may only contain one codepoint: 'abcd';
    let _ = 'abcd';
            ^~~~~~~
    ```
    
    Fixes #30033
rustc: ./regex.0.1.30
cargo rustc -- -Ztime-passes -Zinput-stats
    Updating registry `https://github.com/rust-lang/crates.io-index`
   Compiling regex v0.1.30 (file:///root/benchmarks/regex.0.1.30)
time: 0.059; rss: 47MB	parsing
Lines of code:             8558
Pre-expansion node count:  58217
time: 0.011; rss: 47MB	configuration 1
time: 0.000; rss: 47MB	recursion limit
time: 0.000; rss: 47MB	gated macro checking
time: 0.000; rss: 47MB	crate injection
time: 0.003; rss: 50MB	macro loading
time: 0.000; rss: 50MB	plugin loading
time: 0.000; rss: 50MB	plugin registration
time: 0.060; rss: 54MB	expansion
time: 0.001; rss: 54MB	complete gated feature checking 1
time: 0.013; rss: 54MB	configuration 2
time: 0.000; rss: 54MB	gated configuration checking
time: 0.006; rss: 54MB	maybe building test harness
time: 0.006; rss: 54MB	prelude injection
time: 0.000; rss: 54MB	checking that all macro invocations are gone
time: 0.000; rss: 54MB	checking for inline asm in case the target doesn't support it
time: 0.001; rss: 54MB	complete gated feature checking 2
Post-expansion node count: 68727
time: 0.007; rss: 54MB	assigning node ids
time: 0.009; rss: 61MB	lowering ast -> hir
time: 0.002; rss: 63MB	indexing hir
time: 0.000; rss: 63MB	attribute checking
time: 0.004; rss: 63MB	early lint checks
time: 0.001; rss: 56MB	external crate/lib resolution
time: 0.001; rss: 56MB	language item collection
time: 0.008; rss: 65MB	resolution
time: 0.001; rss: 65MB	lifetime resolution
time: 0.000; rss: 65MB	looking for entry point
time: 0.000; rss: 65MB	looking for plugin registrar
time: 0.006; rss: 68MB	region resolution
time: 0.001; rss: 68MB	loop checking
time: 0.001; rss: 68MB	static item recursion checking
time: 0.004; rss: 71MB	type collecting
time: 0.000; rss: 71MB	variance inference
time: 0.022; rss: 87MB	coherence checking
time: 0.008; rss: 87MB	wf checking
time: 0.092; rss: 93MB	item-types checking
time: 0.211; rss: 110MB	item-bodies checking
time: 0.000; rss: 110MB	drop-impl checking
time: 0.026; rss: 111MB	const checking
time: 0.004; rss: 111MB	privacy checking
time: 0.000; rss: 111MB	stability index
time: 0.001; rss: 111MB	intrinsic checking
time: 0.001; rss: 111MB	effect checking
time: 0.003; rss: 111MB	match checking
time: 0.016; rss: 113MB	MIR dump
time: 0.002; rss: 113MB	liveness checking
time: 0.021; rss: 114MB	borrow checking
time: 0.007; rss: 114MB	rvalue checking
time: 0.000; rss: 114MB	reachability checking
time: 0.002; rss: 114MB	death checking
time: 0.003; rss: 114MB	stability checking
time: 0.000; rss: 114MB	unused lib feature checking
time: 0.028; rss: 114MB	lint checking
time: 0.000; rss: 114MB	resolving dependency formats
time: 0.002; rss: 114MB	erasing regions from MIR
  time: 0.130; rss: 174MB	write metadata
time: 0.623; rss: 174MB	translation
  time: 0.039; rss: 115MB	llvm function passes [0]
  time: 0.020; rss: 115MB	llvm module passes [0]
  time: 0.629; rss: 142MB	codegen passes [0]
  time: 0.001; rss: 128MB	codegen passes [0]
time: 0.770; rss: 128MB	LLVM passes
time: 0.066; rss: 129MB	linking
done
