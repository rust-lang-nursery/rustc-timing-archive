commit 8b00355119ba0473eae420049f96f5be91be1bab
Merge: bba3fca afa72b5
Author: bors <bors@rust-lang.org>
Date:   Fri Sep 30 19:00:36 2016 -0700

    Auto merge of #36339 - brson:emscripten-new, r=alexcrichton
    
    Working asmjs and wasm targets
    
    This patch set results in a working standard library for the asmjs-unknown-emscripten and wasm32-unknown-emscripten targets. It is based on the work of @badboy and @rschulman.
    
    It does a few things:
    
    - Updates LLVM with the emscripten [fastcomp](https://github.com/rust-lang/llvm/pull/50) patches, which include the pnacl IR legalizer and the asm.js backend. This patch is thought not to have any significant effect on existing targets.
    - Teaches rustbuild to correctly link C code with emscripten
    - Updates gcc-rs to work correctly with emscripten
    - Teaches rustbuild to run crate tests for emscripten with node
    - Modifies Thread::new to return an error on emscripten, to facilitate debugging a common failure mode
    - Modifies libtest to run in single-threaded mode for emscripten
    - Ignores a host of tests that don't work yet, mostly dealing with threads and I/O
    - Updates libc with wasm32 definitions (presently the same as asmjs)
    - Adds a wasm32-unknown-emscripten target that feeds the output of LLVM's asmjs backend through emcc to generate wasm
    
    Notes and caveats:
    
    - This is only known to work with `--enable-rustbuild`.
    - The wasm32 target can't be tested correctly yet because of issues in compiletest and limitations in node https://github.com/kripken/emscripten/issues/4542, but hello.rs does seem to work when run on node via the binaryen interpreter
    - This requires an up to date installation of the emscripten sdk from its incoming branch
    - Unwinding is very broken
    - When enabling the emscripten targets jemalloc is disabled for all targets, which results in test failures for the host
    
    Next steps are to fix the jemalloc issue, start building the two emscripten targets on the auto builders, then start producing nightlies.
    
    https://github.com/rust-lang/rust/issues/36317 tracks work on this.
    
    Fixes https://github.com/rust-lang/rust/issues/36515
    Fixes https://github.com/rust-lang/rust/issues/36515
    Fixes https://github.com/rust-lang/rust/issues/36356
rustc: ./jld-day15-parser
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling day15 v0.1.0 (file:///root/benchmarks/jld-day15-parser)
time: 0.000; rss: 41MB	parsing
Lines of code:             72
Pre-expansion node count:  654
time: 0.000; rss: 41MB	recursion limit
time: 0.000; rss: 41MB	crate injection
time: 0.000; rss: 41MB	plugin loading
time: 0.000; rss: 41MB	plugin registration
time: 0.015; rss: 64MB	expansion
time: 0.000; rss: 64MB	maybe building test harness
time: 0.000; rss: 64MB	maybe creating a macro crate
Post-expansion node count: 1155
time: 0.000; rss: 64MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 64MB	complete gated feature checking
time: 0.000; rss: 64MB	early lint checks
time: 0.000; rss: 64MB	AST validation
time: 0.003; rss: 64MB	name resolution
time: 0.000; rss: 64MB	lowering ast -> hir
time: 0.000; rss: 64MB	indexing hir
time: 0.000; rss: 64MB	attribute checking
time: 0.000; rss: 64MB	language item collection
time: 0.000; rss: 64MB	lifetime resolution
time: 0.000; rss: 64MB	looking for entry point
time: 0.000; rss: 64MB	looking for plugin registrar
time: 0.000; rss: 64MB	region resolution
time: 0.000; rss: 64MB	loop checking
time: 0.000; rss: 64MB	static item recursion checking
time: 0.000; rss: 64MB	compute_incremental_hashes_map
time: 0.000; rss: 64MB	load_dep_graph
time: 0.001; rss: 68MB	type collecting
time: 0.000; rss: 68MB	variance inference
time: 0.005; rss: 68MB	coherence checking
time: 0.005; rss: 68MB	wf checking
time: 0.000; rss: 68MB	item-types checking
time: 0.031; rss: 72MB	item-bodies checking
time: 0.000; rss: 72MB	drop-impl checking
time: 0.001; rss: 72MB	const checking
time: 0.000; rss: 72MB	privacy checking
time: 0.000; rss: 72MB	stability index
time: 0.000; rss: 72MB	intrinsic checking
time: 0.000; rss: 72MB	effect checking
time: 0.000; rss: 72MB	match checking
time: 0.000; rss: 72MB	liveness checking
time: 0.000; rss: 72MB	rvalue checking
time: 0.001; rss: 72MB	MIR dump
  time: 0.000; rss: 72MB	SimplifyCfg
  time: 0.000; rss: 72MB	QualifyAndPromoteConstants
  time: 0.000; rss: 72MB	TypeckMir
  time: 0.000; rss: 72MB	SimplifyBranches
  time: 0.000; rss: 72MB	SimplifyCfg
time: 0.001; rss: 72MB	MIR passes
time: 0.001; rss: 72MB	borrow checking
time: 0.000; rss: 72MB	reachability checking
time: 0.000; rss: 72MB	death checking
time: 0.000; rss: 72MB	stability checking
time: 0.000; rss: 72MB	unused lib feature checking
time: 0.003; rss: 72MB	lint checking
time: 0.001; rss: 72MB	resolving dependency formats
  time: 0.000; rss: 72MB	NoLandingPads
  time: 0.000; rss: 72MB	SimplifyCfg
  time: 0.000; rss: 72MB	EraseRegions
  time: 0.000; rss: 72MB	AddCallGuards
  time: 0.001; rss: 72MB	ElaborateDrops
  time: 0.000; rss: 72MB	NoLandingPads
  time: 0.000; rss: 72MB	SimplifyCfg
  time: 0.000; rss: 72MB	InstCombine
  time: 0.002; rss: 72MB	Deaggregator
  time: 0.000; rss: 72MB	CopyPropagation
  time: 0.000; rss: 72MB	AddCallGuards
  time: 0.000; rss: 72MB	PreTrans
time: 0.004; rss: 72MB	Prepare MIR codegen passes
  time: 0.000; rss: 72MB	write metadata
  time: 0.199; rss: 81MB	translation item collection
  time: 0.003; rss: 81MB	codegen unit partitioning
  time: 0.003; rss: 95MB	internalize symbols
time: 0.866; rss: 95MB	translation
time: 0.000; rss: 95MB	assert dep graph
time: 0.000; rss: 95MB	serialize dep graph
  time: 0.017; rss: 86MB	llvm function passes [0]
  time: 0.001; rss: 86MB	llvm module passes [0]
  time: 0.355; rss: 92MB	codegen passes [0]
  time: 0.000; rss: 92MB	codegen passes [0]
time: 0.375; rss: 91MB	LLVM passes
time: 0.000; rss: 91MB	serialize work products
  time: 0.080; rss: 82MB	running linker
time: 0.082; rss: 82MB	linking
done
