commit 9c888980763e8ba16caa67f5f08e13109bbc6fa5
Merge: 06ca016 22f77a9
Author: bors <bors@rust-lang.org>
Date:   Mon Jul 18 11:29:25 2016 -0700

    Auto merge of #34899 - michaelwoerister:always_internalize_symbols, r=eddyb
    
    Run base::internalize_symbols() even for single-codegen-unit crates.
    
    The initial linkage-assignment (especially for closures) is a conservative one that makes some symbols more visible than they need to be. While this is not a correctness problem, it does force the LLVM inliner to be more conservative too, which results in poor performance. Once translation is based solely on MIR, it will be easier to also make the initial linkage assignment a better fitting one. Until then `internalize_symbols()` does a good job of preventing most performance regressions.
    
    This should solve the regressions reported in https://github.com/rust-lang/rust/issues/34891 and maybe also those in https://github.com/rust-lang/rust/issues/34831.
    
    As a side-effect, this will also solve most of the problematic cases described in https://github.com/rust-lang/rust/issues/34793. Not reliably so, however. For that, we still need a solution like the one implement in https://github.com/rust-lang/rust/pull/34830.
    
    cc @rust-lang/compiler
rustc: ./regex-macros.0.1.30
cd regex_macros && cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling regex_macros v0.1.17 (file:///root/benchmarks/regex-macros.0.1.30/regex_macros)
time: 0.002; rss: 82MB	parsing
Lines of code:             639
Pre-expansion node count:  2088
time: 0.000; rss: 86MB	configuration
time: 0.000; rss: 86MB	recursion limit
time: 0.000; rss: 86MB	crate injection
time: 0.000; rss: 86MB	plugin loading
time: 0.000; rss: 86MB	plugin registration
time: 0.042; rss: 125MB	expansion
time: 0.000; rss: 125MB	maybe building test harness
time: 0.005; rss: 125MB	assigning node ids
Post-expansion node count: 69587
time: 0.000; rss: 125MB	checking for inline asm in case the target doesn't support it
time: 0.001; rss: 125MB	complete gated feature checking
time: 0.000; rss: 125MB	collecting defs
time: 0.106; rss: 222MB	external crate/lib resolution
time: 0.003; rss: 222MB	early lint checks
time: 0.000; rss: 222MB	AST validation
time: 0.022; rss: 230MB	name resolution
time: 0.003; rss: 234MB	lowering ast -> hir
time: 0.001; rss: 234MB	indexing hir
time: 0.000; rss: 234MB	attribute checking
time: 0.000; rss: 227MB	language item collection
time: 0.001; rss: 227MB	lifetime resolution
time: 0.000; rss: 227MB	looking for entry point
time: 0.000; rss: 227MB	looking for plugin registrar
time: 0.002; rss: 228MB	region resolution
time: 0.000; rss: 228MB	loop checking
time: 0.000; rss: 228MB	static item recursion checking
time: 0.000; rss: 228MB	load_dep_graph
time: 0.013; rss: 230MB	type collecting
time: 0.000; rss: 230MB	variance inference
time: 0.011; rss: 232MB	coherence checking
time: 0.008; rss: 233MB	wf checking
time: 0.001; rss: 233MB	item-types checking
time: 0.899; rss: 253MB	item-bodies checking
makefile:2: recipe for target 'all' failed
done
