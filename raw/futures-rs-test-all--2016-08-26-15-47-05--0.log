commit d00c2454157713e77729989c715b96ee31c6b278
Merge: eaf71f8 a65b201
Author: bors <bors@rust-lang.org>
Date:   Fri Aug 26 03:29:45 2016 -0700

    Auto merge of #35975 - jonathandturner:error_buffering, r=alexcrichton
    
    Buffer unix and lock windows to prevent message interleaving
    
    When cargo does a build on multiple processes, multiple crates may error at the same time.  If this happens, currently you'll see interleaving of the error messages, which makes for an unreadable message.
    
    Example:
    
    ```
        --> --> src/bin/multithread-unix.rs:16:35src/bin/singlethread.rs:16:24
    
          ||
    
    1616  | |     Server::new(&addr).workers(8).    Server::new(&addr).serveserve(|r: Request| {(|r: Request| {
    
          | |                                                          ^^^^^^^^^^ expected struct `std::io::Error`, found () expected struct `std::io::Error`, found ()
    
          ||
    
          = = notenote: expected type `std::io::Error`: expected type `std::io::Error`
    
          = = notenote:    found type `()`:    found type `()`
    
          = = notenote: required because of the requirements on the impl of `futures_minihttp::Service<futures_minihttp::Request, futures_minihttp::Response>` for `[closure@src/bin/multithread-unix.rs:16:41: 22:6]`: required because of the requirements on the impl of `futures_minihttp::Service<futures_minihttp::Request, futures_minihttp::Response>` for `[closure@src/bin/singlethread.rs:16:30: 22:6]`
    
    error: aborting due to previous error
    
    error: aborting due to previous error
    ```
    
    This patch uses two techniques to prevent this interleaving.  On Unix systems, since they use the text-based ANSI protocol for coloring, we can safely buffer up whole messages before we emit.  This PR does this buffering, and emits the whole message at once.
    
    On Windows, term must use the Windows terminal API to color the output.  This disallows us from using the same buffering technique.  Instead, here we grab a Windows mutex (thanks to @alexcrichton for the lock code).  This lock only works in Windows and will hold a mutex for the duration of a message output.
    
    r? @nikomatsakis
rustc: ./futures-rs-test-all
cargo rustc --test all --verbose -- -Ztime-passes -Zinput-stats
    Updating registry `https://github.com/rust-lang/crates.io-index`
   Compiling log v0.3.6
     Running `/root/rust/x86_64-unknown-linux-gnu/stage2/bin/rustc /root/.cargo/registry/src/github.com-88ac128001ac3a9a/log-0.3.6/src/lib.rs --crate-name log --crate-type lib -g --cfg feature=\"default\" --cfg feature=\"use_std\" -C metadata=30a8a27ec161f1be -C extra-filename=-30a8a27ec161f1be --out-dir /root/benchmarks/futures-rs-test-all/target/debug/deps --emit=dep-info,link -L dependency=/root/benchmarks/futures-rs-test-all/target/debug/deps -L dependency=/root/benchmarks/futures-rs-test-all/target/debug/deps --cap-lints allow`
   Compiling futures v0.1.0 (file:///root/benchmarks/futures-rs-test-all)
     Running `/root/rust/x86_64-unknown-linux-gnu/stage2/bin/rustc src/lib.rs --crate-name futures --crate-type lib -g --out-dir /root/benchmarks/futures-rs-test-all/target/debug --emit=dep-info,link -L dependency=/root/benchmarks/futures-rs-test-all/target/debug -L dependency=/root/benchmarks/futures-rs-test-all/target/debug/deps --extern log=/root/benchmarks/futures-rs-test-all/target/debug/deps/liblog-30a8a27ec161f1be.rlib`
     Running `/root/rust/x86_64-unknown-linux-gnu/stage2/bin/rustc tests/all.rs --crate-name all --crate-type bin -g -Ztime-passes -Zinput-stats --test -C metadata=449e6fc7d003a0bc -C extra-filename=-449e6fc7d003a0bc --out-dir /root/benchmarks/futures-rs-test-all/target/debug --emit=dep-info,link -L dependency=/root/benchmarks/futures-rs-test-all/target/debug -L dependency=/root/benchmarks/futures-rs-test-all/target/debug/deps --extern log=/root/benchmarks/futures-rs-test-all/target/debug/deps/liblog-30a8a27ec161f1be.rlib --extern futures=/root/benchmarks/futures-rs-test-all/target/debug/libfutures.rlib`
time: 0.003; rss: 44MB	parsing
Lines of code:             412
Pre-expansion node count:  5522
time: 0.000; rss: 44MB	configuration
time: 0.000; rss: 44MB	recursion limit
time: 0.000; rss: 44MB	crate injection
time: 0.000; rss: 44MB	plugin loading
time: 0.000; rss: 44MB	plugin registration
time: 0.023; rss: 62MB	expansion
time: 0.000; rss: 62MB	maybe building test harness
time: 0.000; rss: 62MB	assigning node ids
Post-expansion node count: 10613
time: 0.000; rss: 62MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 62MB	complete gated feature checking
time: 0.000; rss: 62MB	collecting defs
time: 0.005; rss: 67MB	external crate/lib resolution
time: 0.000; rss: 67MB	early lint checks
time: 0.000; rss: 67MB	AST validation
time: 0.002; rss: 67MB	name resolution
time: 0.001; rss: 71MB	lowering ast -> hir
time: 0.000; rss: 71MB	indexing hir
time: 0.000; rss: 71MB	attribute checking
time: 0.000; rss: 71MB	language item collection
time: 0.000; rss: 71MB	lifetime resolution
time: 0.000; rss: 71MB	looking for entry point
time: 0.000; rss: 71MB	looking for plugin registrar
time: 0.001; rss: 71MB	region resolution
time: 0.000; rss: 71MB	loop checking
time: 0.000; rss: 71MB	static item recursion checking
time: 0.001; rss: 71MB	compute_incremental_hashes_map
time: 0.000; rss: 71MB	load_dep_graph
time: 0.005; rss: 71MB	type collecting
time: 0.000; rss: 71MB	variance inference
time: 0.004; rss: 71MB	coherence checking
time: 0.015; rss: 73MB	wf checking
time: 0.003; rss: 73MB	item-types checking
time: 0.173; rss: 81MB	item-bodies checking
time: 0.000; rss: 81MB	drop-impl checking
time: 0.005; rss: 81MB	const checking
time: 0.000; rss: 81MB	privacy checking
time: 0.000; rss: 81MB	stability index
time: 0.000; rss: 81MB	intrinsic checking
time: 0.000; rss: 81MB	effect checking
time: 0.001; rss: 81MB	match checking
time: 0.001; rss: 81MB	liveness checking
time: 0.004; rss: 81MB	rvalue checking
time: 0.008; rss: 83MB	MIR dump
time: 0.006; rss: 83MB	MIR passes
time: 0.009; rss: 85MB	borrow checking
time: 0.000; rss: 85MB	reachability checking
time: 0.000; rss: 85MB	death checking
time: 0.000; rss: 85MB	stability checking
time: 0.000; rss: 85MB	unused lib feature checking
time: 0.003; rss: 85MB	lint checking
time: 0.002; rss: 85MB	resolving dependency formats
time: 0.019; rss: 85MB	Prepare MIR codegen passes
  time: 0.000; rss: 85MB	write metadata
  time: 0.418; rss: 93MB	translation item collection
  time: 0.022; rss: 93MB	codegen unit partitioning
  time: 0.044; rss: 148MB	internalize symbols
time: 3.695; rss: 148MB	translation
time: 0.000; rss: 148MB	assert dep graph
time: 0.000; rss: 148MB	serialize dep graph
  time: 0.080; rss: 132MB	llvm function passes [0]
  time: 0.028; rss: 133MB	llvm module passes [0]
  time: 1.749; rss: 136MB	codegen passes [0]
  time: 0.000; rss: 136MB	codegen passes [0]
time: 1.858; rss: 136MB	LLVM passes
time: 0.000; rss: 136MB	serialize work products
  time: 0.192; rss: 84MB	running linker
time: 0.194; rss: 84MB	linking
done
