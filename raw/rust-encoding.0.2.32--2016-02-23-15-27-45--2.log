commit 281f9d868fee8e4f9750fc12289dc10522f587ea
Merge: 43ddfbd 71f29cd
Author: bors <bors@rust-lang.org>
Date:   Tue Feb 23 20:08:54 2016 +0000

    Auto merge of #30614 - arcnmx:cstr-bytes, r=alexcrichton
    
    I'm a bit iffy on the return type, but `Result` would also be a bit weird... The two error cases are `Unterminated` and `InteriorNul(usize)`.
    
    I considered `from_chars(&[c_char])` but this meshes better with `as_bytes_with_nul()` and Rust code in general.
    
    Should there also be a corresponding unsafe `from_bytes_unchecked` variant?
rustc: ./rust-encoding.0.2.32
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling encoding v0.2.32 (file:///root/benchmarks/rust-encoding.0.2.32)
time: 0.022; rss: 42MB	parsing
Lines of code:             6441
Pre-expansion node count:  30335
time: 0.006; rss: 42MB	configuration 1
time: 0.000; rss: 42MB	recursion limit
time: 0.000; rss: 42MB	gated macro checking
time: 0.000; rss: 42MB	crate injection
time: 0.003; rss: 45MB	macro loading
time: 0.000; rss: 45MB	plugin loading
time: 0.000; rss: 45MB	plugin registration
time: 0.045; rss: 48MB	expansion
time: 0.001; rss: 48MB	complete gated feature checking 1
time: 0.008; rss: 47MB	configuration 2
time: 0.000; rss: 47MB	gated configuration checking
time: 0.004; rss: 47MB	maybe building test harness
time: 0.004; rss: 47MB	prelude injection
time: 0.000; rss: 47MB	checking that all macro invocations are gone
time: 0.000; rss: 47MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 47MB	complete gated feature checking 2
time: 0.000; rss: 47MB	const fn bodies and arguments
Post-expansion node count: 41783
time: 0.003; rss: 47MB	assigning node ids
time: 0.004; rss: 51MB	lowering ast -> hir
time: 0.001; rss: 51MB	indexing hir
time: 0.000; rss: 51MB	attribute checking
time: 0.002; rss: 51MB	early lint checks
time: 0.001; rss: 50MB	external crate/lib resolution
time: 0.000; rss: 50MB	language item collection
time: 0.007; rss: 57MB	resolution
time: 0.000; rss: 57MB	lifetime resolution
time: 0.000; rss: 57MB	looking for entry point
time: 0.000; rss: 57MB	looking for plugin registrar
time: 0.002; rss: 58MB	region resolution
time: 0.000; rss: 58MB	loop checking
time: 0.000; rss: 58MB	static item recursion checking
time: 0.005; rss: 60MB	type collecting
time: 0.000; rss: 60MB	variance inference
time: 0.019; rss: 77MB	coherence checking
time: 0.017; rss: 78MB	wf checking
time: 0.012; rss: 79MB	item-types checking
time: 0.175; rss: 88MB	item-bodies checking
time: 0.000; rss: 88MB	drop-impl checking
time: 0.010; rss: 88MB	const checking
time: 0.003; rss: 88MB	privacy checking
time: 0.000; rss: 88MB	stability index
time: 0.001; rss: 88MB	intrinsic checking
time: 0.000; rss: 88MB	effect checking
time: 0.005; rss: 88MB	match checking
time: 0.002; rss: 88MB	liveness checking
time: 0.006; rss: 88MB	rvalue checking
time: 0.021; rss: 93MB	MIR dump
time: 0.000; rss: 93MB	MIR passes
time: 0.022; rss: 93MB	borrow checking
time: 0.000; rss: 93MB	reachability checking
time: 0.002; rss: 93MB	death checking
time: 0.002; rss: 93MB	stability checking
time: 0.000; rss: 93MB	unused lib feature checking
time: 0.018; rss: 93MB	lint checking
time: 0.000; rss: 93MB	resolving dependency formats
time: 0.002; rss: 93MB	erasing regions from MIR
  time: 0.023; rss: 107MB	translation item collection
  time: 0.055; rss: 139MB	write metadata
time: 0.309; rss: 139MB	translation
  time: 0.026; rss: 107MB	llvm function passes [0]
  time: 0.047; rss: 110MB	llvm module passes [0]
  time: 0.563; rss: 114MB	codegen passes [0]
  time: 0.001; rss: 99MB	codegen passes [0]
time: 0.700; rss: 98MB	LLVM passes
time: 0.052; rss: 97MB	linking
done
