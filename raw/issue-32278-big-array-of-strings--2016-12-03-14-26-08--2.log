commit 2cdbd5eb4255974db204819f9aa49c00b15a6d23
Merge: 8900854 80ef1db
Author: bors <bors@rust-lang.org>
Date:   Sat Dec 3 17:41:14 2016 +0000

    Auto merge of #38079 - BurntSushi:attrtarget, r=alexcrichton
    
    Add new #[target_feature = "..."] attribute.
    
    This commit adds a new attribute that instructs the compiler to emit
    target specific code for a single function. For example, the following
    function is permitted to use instructions that are part of SSE 4.2:
    
        #[target_feature = "+sse4.2"]
        fn foo() { ... }
    
    In particular, use of this attribute does not require setting the
    -C target-feature or -C target-cpu options on rustc.
    
    This attribute does not have any protections built into it. For example,
    nothing stops one from calling the above `foo` function on hosts without
    SSE 4.2 support. Doing so may result in a SIGILL.
    
    I've also expanded the x86 target feature whitelist.
rustc: ./issue-32278-big-array-of-strings
cargo rustc  -- -Ztime-passes -Zinput-stats
time: 0.101; rss: 60MB	parsing
Lines of code:             65577
Pre-expansion node count:  65552
time: 0.000; rss: 60MB	recursion limit
time: 0.000; rss: 60MB	crate injection
time: 0.000; rss: 60MB	plugin loading
time: 0.000; rss: 60MB	plugin registration
time: 0.024; rss: 84MB	expansion
time: 0.000; rss: 84MB	maybe building test harness
time: 0.001; rss: 84MB	maybe creating a macro crate
Post-expansion node count: 65565
time: 0.000; rss: 84MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 84MB	complete gated feature checking
time: 0.004; rss: 84MB	early lint checks
time: 0.000; rss: 84MB	AST validation
time: 0.002; rss: 84MB	name resolution
time: 0.004; rss: 93MB	lowering ast -> hir
time: 0.001; rss: 97MB	indexing hir
time: 0.001; rss: 97MB	attribute checking
time: 0.000; rss: 86MB	language item collection
time: 0.000; rss: 86MB	lifetime resolution
time: 0.000; rss: 86MB	looking for entry point
time: 0.000; rss: 86MB	looking for plugin registrar
time: 0.005; rss: 91MB	region resolution
time: 0.000; rss: 91MB	loop checking
time: 0.000; rss: 91MB	static item recursion checking
time: 0.036; rss: 91MB	compute_incremental_hashes_map
time: 0.000; rss: 91MB	load_dep_graph
time: 0.000; rss: 91MB	stability index
time: 0.000; rss: 91MB	stability checking
time: 0.000; rss: 91MB	type collecting
time: 0.000; rss: 91MB	variance inference
time: 0.000; rss: 91MB	impl wf inference
time: 0.003; rss: 94MB	coherence checking
time: 0.000; rss: 94MB	wf checking
time: 0.526; rss: 106MB	item-types checking
time: 0.000; rss: 106MB	item-bodies checking
time: 0.000; rss: 106MB	drop-impl checking
time: 0.020; rss: 105MB	const checking
time: 0.001; rss: 105MB	privacy checking
time: 0.000; rss: 105MB	intrinsic checking
time: 0.000; rss: 105MB	effect checking
time: 0.000; rss: 105MB	match checking
time: 0.000; rss: 105MB	liveness checking
time: 0.000; rss: 105MB	rvalue checking
time: 0.035; rss: 113MB	MIR dump
  time: 0.000; rss: 113MB	SimplifyCfg
  time: 0.001; rss: 113MB	QualifyAndPromoteConstants
  time: 0.001; rss: 113MB	TypeckMir
  time: 0.000; rss: 113MB	SimplifyBranches
  time: 0.000; rss: 113MB	SimplifyCfg
time: 0.002; rss: 113MB	MIR cleanup and validation
time: 0.001; rss: 113MB	borrow checking
time: 0.000; rss: 113MB	reachability checking
time: 0.000; rss: 113MB	death checking
time: 0.000; rss: 113MB	unused lib feature checking
time: 0.022; rss: 113MB	lint checking
time: 0.001; rss: 113MB	resolving dependency formats
  time: 0.000; rss: 113MB	NoLandingPads
  time: 0.000; rss: 113MB	SimplifyCfg
  time: 0.001; rss: 113MB	EraseRegions
  time: 0.000; rss: 113MB	AddCallGuards
  time: 0.000; rss: 113MB	ElaborateDrops
  time: 0.000; rss: 113MB	NoLandingPads
  time: 0.000; rss: 113MB	SimplifyCfg
  time: 0.000; rss: 113MB	InstCombine
  time: 0.000; rss: 113MB	Deaggregator
  time: 0.000; rss: 113MB	CopyPropagation
  time: 0.000; rss: 113MB	SimplifyLocals
  time: 0.000; rss: 113MB	AddCallGuards
  time: 0.000; rss: 113MB	PreTrans
time: 0.001; rss: 113MB	MIR optimisations
  time: 0.000; rss: 114MB	write metadata
  time: 0.000; rss: 114MB	translation item collection
  time: 0.000; rss: 114MB	codegen unit partitioning
  time: 0.001; rss: 125MB	internalize symbols
time: 0.055; rss: 125MB	translation
time: 0.000; rss: 125MB	assert dep graph
time: 0.000; rss: 125MB	serialize dep graph
  time: 0.008; rss: 90MB	llvm function passes [0]
  time: 0.000; rss: 90MB	llvm module passes [0]
  time: 0.190; rss: 90MB	codegen passes [0]
  time: 0.000; rss: 90MB	codegen passes [0]
time: 0.199; rss: 90MB	LLVM passes
time: 0.000; rss: 90MB	serialize work products
  time: 0.160; rss: 82MB	running linker
time: 0.162; rss: 82MB	linking
done
