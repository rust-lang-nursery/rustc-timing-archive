commit d337f345ca8b3bb4aac988ace1c0676abc5310a0
Merge: cfc9b51 83b1982
Author: bors <bors@rust-lang.org>
Date:   Wed Oct 19 09:52:48 2016 -0700

    Auto merge of #37220 - Mark-Simulacrum:arena-alloc-slice, r=eddyb
    
    alloc_slice in TypedArena
    
    Added `TypedArena::alloc_slice`, and moved from using `TypedArena<Vec<T>>` to `TypedArena<T>`.
    
    `TypedArena::alloc_slice` is implemented by copying the slices elements into the typed arena, requiring that `T: Copy` when using it. We allocate a new chunk when there's insufficient space remaining in the previous chunk, and we cannot resize the old chunk in place. This is non-optimal, since we may waste allocated space when allocating (especially longer) slices, but is considered good enough for the time being.
    
    This change also reduces heap fragmentation, since the arena now directly stores objects instead of storing the Vec's length and pointer to its contents.
    
    Performance:
    ```
    futures-rs-test  5.048s vs  5.061s --> 0.997x faster (variance: 1.028x, 1.020x)
    helloworld       0.284s vs  0.295s --> 0.963x faster (variance: 1.207x, 1.189x)
    html5ever-2016-  8.396s vs  8.208s --> 1.023x faster (variance: 1.019x, 1.036x)
    hyper.0.5.0      5.768s vs  5.797s --> 0.995x faster (variance: 1.027x, 1.028x)
    inflate-0.1.0    5.213s vs  5.069s --> 1.028x faster (variance: 1.008x, 1.022x)
    issue-32062-equ  0.428s vs  0.467s --> 0.916x faster (variance: 1.188x, 1.015x)
    issue-32278-big  1.949s vs  2.010s --> 0.970x faster (variance: 1.112x, 1.049x)
    jld-day15-parse  1.795s vs  1.877s --> 0.956x faster (variance: 1.037x, 1.015x)
    piston-image-0. 13.554s vs 13.522s --> 1.002x faster (variance: 1.019x, 1.020x)
    rust-encoding-0  2.489s vs  2.465s --> 1.010x faster (variance: 1.047x, 1.086x)
    syntex-0.42.2   34.646s vs 34.593s --> 1.002x faster (variance: 1.007x, 1.005x)
    syntex-0.42.2-i 17.181s vs 17.163s --> 1.001x faster (variance: 1.004x, 1.004x)
    ```
    
    r? @eddyb
rustc: ./hyper.0.5.0
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling traitobject v0.0.1
   Compiling libc v0.2.16
   Compiling rustc-serialize v0.3.19
   Compiling httparse v0.1.6
   Compiling gcc v0.3.35
   Compiling libc v0.1.12
   Compiling pkg-config v0.3.8
   Compiling lazy_static v0.1.16
   Compiling winapi-build v0.1.1
   Compiling unicase v0.1.0
   Compiling typeable v0.1.2
   Compiling log v0.3.6
   Compiling kernel32-sys v0.2.2
   Compiling bitflags v0.3.3
   Compiling matches v0.1.2
   Compiling winapi v0.2.8
   Compiling mime v0.0.11
   Compiling rand v0.3.14
   Compiling time v0.1.35
   Compiling num_cpus v0.2.13
   Compiling openssl-sys v0.6.7
   Compiling openssl v0.6.7
   Compiling uuid v0.1.18
   Compiling url v0.2.38
   Compiling cookie v0.1.21
   Compiling hyper v0.5.0 (file:///root/benchmarks/hyper.0.5.0)
time: 0.026; rss: 50MB	parsing
Lines of code:             9003
Pre-expansion node count:  44129
time: 0.000; rss: 50MB	recursion limit
time: 0.000; rss: 50MB	crate injection
time: 0.000; rss: 50MB	plugin loading
time: 0.000; rss: 50MB	plugin registration
time: 0.095; rss: 87MB	expansion
time: 0.000; rss: 87MB	maybe building test harness
time: 0.001; rss: 87MB	maybe creating a macro crate
Post-expansion node count: 101823
time: 0.000; rss: 87MB	checking for inline asm in case the target doesn't support it
time: 0.002; rss: 87MB	complete gated feature checking
time: 0.003; rss: 87MB	early lint checks
time: 0.001; rss: 87MB	AST validation
time: 0.016; rss: 91MB	name resolution
time: 0.008; rss: 97MB	lowering ast -> hir
time: 0.001; rss: 97MB	indexing hir
time: 0.001; rss: 97MB	attribute checking
time: 0.001; rss: 91MB	language item collection
time: 0.001; rss: 91MB	lifetime resolution
time: 0.000; rss: 91MB	looking for entry point
time: 0.000; rss: 91MB	looking for plugin registrar
time: 0.005; rss: 95MB	region resolution
time: 0.001; rss: 95MB	loop checking
time: 0.001; rss: 95MB	static item recursion checking
time: 0.056; rss: 96MB	compute_incremental_hashes_map
time: 0.000; rss: 96MB	load_dep_graph
time: 0.015; rss: 97MB	type collecting
time: 0.000; rss: 97MB	variance inference
time: 0.029; rss: 102MB	coherence checking
time: 0.045; rss: 104MB	wf checking
time: 0.020; rss: 104MB	item-types checking
time: 0.336; rss: 115MB	item-bodies checking
time: 0.000; rss: 115MB	drop-impl checking
time: 0.030; rss: 114MB	const checking
time: 0.006; rss: 114MB	privacy checking
time: 0.001; rss: 114MB	stability index
time: 0.003; rss: 114MB	intrinsic checking
time: 0.002; rss: 114MB	effect checking
time: 0.009; rss: 114MB	match checking
time: 0.005; rss: 114MB	liveness checking
time: 0.022; rss: 114MB	rvalue checking
time: 0.048; rss: 132MB	MIR dump
  time: 0.006; rss: 132MB	SimplifyCfg
  time: 0.011; rss: 132MB	QualifyAndPromoteConstants
  time: 0.013; rss: 132MB	TypeckMir
  time: 0.001; rss: 132MB	SimplifyBranches
  time: 0.003; rss: 132MB	SimplifyCfg
time: 0.035; rss: 132MB	MIR passes
time: 0.055; rss: 132MB	borrow checking
time: 0.003; rss: 132MB	reachability checking
time: 0.005; rss: 132MB	death checking
time: 0.006; rss: 135MB	stability checking
time: 0.000; rss: 135MB	unused lib feature checking
time: 0.039; rss: 137MB	lint checking
time: 0.000; rss: 137MB	resolving dependency formats
  time: 0.001; rss: 137MB	NoLandingPads
  time: 0.003; rss: 137MB	SimplifyCfg
  time: 0.008; rss: 137MB	EraseRegions
  time: 0.001; rss: 137MB	AddCallGuards
  time: 0.021; rss: 137MB	ElaborateDrops
  time: 0.001; rss: 137MB	NoLandingPads
  time: 0.005; rss: 137MB	SimplifyCfg
  time: 0.003; rss: 137MB	InstCombine
  time: 0.003; rss: 137MB	Deaggregator
  time: 0.000; rss: 137MB	CopyPropagation
  time: 0.001; rss: 137MB	AddCallGuards
  time: 0.000; rss: 137MB	PreTrans
time: 0.047; rss: 137MB	Prepare MIR codegen passes
  time: 0.011; rss: 141MB	write metadata
  time: 0.121; rss: 146MB	translation item collection
  time: 0.015; rss: 150MB	codegen unit partitioning
  time: 0.013; rss: 205MB	internalize symbols
time: 1.022; rss: 193MB	translation
time: 0.000; rss: 193MB	assert dep graph
time: 0.000; rss: 193MB	serialize dep graph
  time: 0.085; rss: 147MB	llvm function passes [0]
  time: 0.040; rss: 149MB	llvm module passes [0]
  time: 1.588; rss: 153MB	codegen passes [0]
  time: 0.000; rss: 153MB	codegen passes [0]
time: 1.868; rss: 151MB	LLVM passes
time: 0.000; rss: 151MB	serialize work products
time: 0.139; rss: 93MB	linking
done
