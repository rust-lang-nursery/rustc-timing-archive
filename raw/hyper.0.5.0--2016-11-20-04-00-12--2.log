commit e5ed0a5d78be74238af31631e7ecf311eb661586
Merge: 7c535c6 36f2af1
Author: bors <bors@rust-lang.org>
Date:   Sat Nov 19 23:39:25 2016 -0600

    Auto merge of #37842 - nikomatsakis:incremental-test, r=mw
    
    Add tests for incremental reuse scenarios
    
    These are microbenchmarks checking that we achieve the expected reuse in the scenarios covered by incremental beta.
    
    r? @michaelwoerister
rustc: ./hyper.0.5.0
cargo rustc  -- -Ztime-passes -Zinput-stats
   Compiling hyper v0.5.0 (file:///root/benchmarks/hyper.0.5.0)
time: 0.041; rss: 46MB	parsing
Lines of code:             9003
Pre-expansion node count:  44055
time: 0.000; rss: 46MB	recursion limit
time: 0.000; rss: 46MB	crate injection
time: 0.000; rss: 46MB	plugin loading
time: 0.000; rss: 46MB	plugin registration
time: 0.092; rss: 84MB	expansion
time: 0.000; rss: 84MB	maybe building test harness
time: 0.001; rss: 84MB	maybe creating a macro crate
Post-expansion node count: 101769
time: 0.000; rss: 85MB	checking for inline asm in case the target doesn't support it
time: 0.002; rss: 85MB	complete gated feature checking
time: 0.003; rss: 85MB	early lint checks
time: 0.001; rss: 85MB	AST validation
time: 0.020; rss: 89MB	name resolution
time: 0.014; rss: 92MB	lowering ast -> hir
time: 0.005; rss: 93MB	indexing hir
time: 0.001; rss: 93MB	attribute checking
time: 0.001; rss: 88MB	language item collection
time: 0.002; rss: 88MB	lifetime resolution
time: 0.000; rss: 88MB	looking for entry point
time: 0.000; rss: 88MB	looking for plugin registrar
time: 0.010; rss: 91MB	region resolution
time: 0.001; rss: 91MB	loop checking
time: 0.001; rss: 91MB	static item recursion checking
time: 0.040; rss: 92MB	compute_incremental_hashes_map
time: 0.000; rss: 92MB	load_dep_graph
time: 0.014; rss: 93MB	type collecting
time: 0.000; rss: 93MB	variance inference
time: 0.001; rss: 93MB	impl wf inference
time: 0.015; rss: 95MB	coherence checking
time: 0.039; rss: 97MB	wf checking
time: 0.024; rss: 97MB	item-types checking
time: 0.480; rss: 105MB	item-bodies checking
time: 0.000; rss: 105MB	drop-impl checking
time: 0.051; rss: 106MB	const checking
time: 0.008; rss: 106MB	privacy checking
time: 0.001; rss: 106MB	stability index
time: 0.003; rss: 106MB	intrinsic checking
time: 0.001; rss: 106MB	effect checking
time: 0.008; rss: 106MB	match checking
time: 0.004; rss: 107MB	liveness checking
time: 0.020; rss: 107MB	rvalue checking
time: 0.062; rss: 127MB	MIR dump
  time: 0.007; rss: 128MB	SimplifyCfg
  time: 0.013; rss: 130MB	QualifyAndPromoteConstants
  time: 0.013; rss: 130MB	TypeckMir
  time: 0.001; rss: 130MB	SimplifyBranches
  time: 0.003; rss: 130MB	SimplifyCfg
time: 0.038; rss: 130MB	MIR cleanup and validation
time: 0.055; rss: 130MB	borrow checking
time: 0.003; rss: 130MB	reachability checking
time: 0.005; rss: 130MB	death checking
time: 0.004; rss: 131MB	stability checking
time: 0.000; rss: 131MB	unused lib feature checking
time: 0.038; rss: 131MB	lint checking
time: 0.000; rss: 131MB	resolving dependency formats
  time: 0.000; rss: 131MB	NoLandingPads
  time: 0.003; rss: 131MB	SimplifyCfg
  time: 0.008; rss: 131MB	EraseRegions
  time: 0.001; rss: 131MB	AddCallGuards
  time: 0.024; rss: 133MB	ElaborateDrops
  time: 0.000; rss: 133MB	NoLandingPads
  time: 0.005; rss: 133MB	SimplifyCfg
  time: 0.003; rss: 133MB	InstCombine
  time: 0.003; rss: 133MB	Deaggregator
  time: 0.000; rss: 133MB	CopyPropagation
  time: 0.004; rss: 133MB	SimplifyLocals
  time: 0.001; rss: 133MB	AddCallGuards
  time: 0.000; rss: 133MB	PreTrans
time: 0.054; rss: 133MB	MIR optimisations
  time: 0.013; rss: 135MB	write metadata
  time: 0.135; rss: 141MB	translation item collection
  time: 0.016; rss: 144MB	codegen unit partitioning
  time: 0.014; rss: 198MB	internalize symbols
time: 1.088; rss: 198MB	translation
time: 0.000; rss: 198MB	assert dep graph
time: 0.000; rss: 198MB	serialize dep graph
  time: 0.088; rss: 146MB	llvm function passes [0]
  time: 0.043; rss: 148MB	llvm module passes [0]
  time: 1.650; rss: 149MB	codegen passes [0]
  time: 0.000; rss: 149MB	codegen passes [0]
time: 1.945; rss: 149MB	LLVM passes
time: 0.000; rss: 149MB	serialize work products
time: 0.071; rss: 92MB	linking
done
