commit f3930aab46c1ea470c8c2a2d7d6832174630596d
Merge: f8614c3 fcebf3b
Author: bors <bors@rust-lang.org>
Date:   Sat Nov 26 21:49:41 2016 -0600

    Auto merge of #38023 - arielb1:constant-evil-x2, r=eddyb
    
    don't double-apply variant padding to const enums
    
    `build_const_struct` already returns the struct with padding - don't double-apply it in the `General` case.
    
    This should hopefully be the last time we have this sort of bug.
    
    Fixes #38002.
    
    Beta-nominating because regression.
    
    r? @eddyb
rustc: ./syntex-0.42.2-incr-clean
RUSTFLAGS="-Z incremental=incr" \
    cargo rustc -p syntex_syntax  -- \
    -Ztime-passes -Zinput-stats -Z incremental-info
   Compiling syntex_syntax v0.42.0
time: 0.091; rss: 71MB	parsing
Lines of code:             33687
Pre-expansion node count:  223115
time: 0.000; rss: 71MB	recursion limit
time: 0.000; rss: 71MB	crate injection
time: 0.000; rss: 71MB	plugin loading
time: 0.000; rss: 71MB	plugin registration
time: 0.240; rss: 144MB	expansion
time: 0.000; rss: 144MB	maybe building test harness
time: 0.006; rss: 144MB	maybe creating a macro crate
Post-expansion node count: 638863
time: 0.000; rss: 144MB	checking for inline asm in case the target doesn't support it
time: 0.012; rss: 144MB	complete gated feature checking
time: 0.022; rss: 144MB	early lint checks
time: 0.007; rss: 144MB	AST validation
time: 0.076; rss: 159MB	name resolution
time: 0.044; rss: 184MB	lowering ast -> hir
time: 0.008; rss: 194MB	indexing hir
time: 0.006; rss: 194MB	attribute checking
time: 0.004; rss: 149MB	language item collection
time: 0.010; rss: 149MB	lifetime resolution
time: 0.000; rss: 149MB	looking for entry point
time: 0.000; rss: 149MB	looking for plugin registrar
time: 0.041; rss: 170MB	region resolution
time: 0.005; rss: 170MB	loop checking
time: 0.004; rss: 170MB	static item recursion checking
time: 0.328; rss: 170MB	compute_incremental_hashes_map
time: 0.000; rss: 170MB	load_dep_graph
time: 0.046; rss: 174MB	type collecting
time: 0.001; rss: 174MB	variance inference
time: 0.002; rss: 174MB	impl wf inference
time: 0.018; rss: 177MB	coherence checking
time: 0.086; rss: 178MB	wf checking
time: 0.176; rss: 182MB	item-types checking
time: 6.114; rss: 232MB	item-bodies checking
time: 0.000; rss: 232MB	drop-impl checking
time: 0.213; rss: 248MB	const checking
time: 0.047; rss: 248MB	privacy checking
time: 0.006; rss: 248MB	stability index
time: 0.017; rss: 248MB	intrinsic checking
time: 0.014; rss: 248MB	effect checking
time: 0.045; rss: 248MB	match checking
time: 0.049; rss: 248MB	liveness checking
time: 0.175; rss: 248MB	rvalue checking
time: 0.372; rss: 436MB	MIR dump
  time: 0.056; rss: 438MB	SimplifyCfg
  time: 0.072; rss: 438MB	QualifyAndPromoteConstants
  time: 0.106; rss: 438MB	TypeckMir
  time: 0.004; rss: 438MB	SimplifyBranches
  time: 0.030; rss: 438MB	SimplifyCfg
time: 0.268; rss: 438MB	MIR cleanup and validation
time: 0.540; rss: 438MB	borrow checking
time: 0.019; rss: 438MB	reachability checking
time: 0.038; rss: 438MB	death checking
time: 0.030; rss: 440MB	stability checking
time: 0.000; rss: 440MB	unused lib feature checking
time: 0.194; rss: 440MB	lint checking
time: 0.000; rss: 440MB	resolving dependency formats
  time: 0.003; rss: 440MB	NoLandingPads
  time: 0.026; rss: 440MB	SimplifyCfg
  time: 0.062; rss: 449MB	EraseRegions
  time: 0.011; rss: 449MB	AddCallGuards
  time: 0.270; rss: 465MB	ElaborateDrops
  time: 0.003; rss: 465MB	NoLandingPads
  time: 0.051; rss: 465MB	SimplifyCfg
  time: 0.028; rss: 465MB	InstCombine
  time: 0.012; rss: 465MB	Deaggregator
  time: 0.002; rss: 465MB	CopyPropagation
  time: 0.034; rss: 465MB	SimplifyLocals
  time: 0.009; rss: 465MB	AddCallGuards
  time: 0.002; rss: 465MB	PreTrans
time: 0.512; rss: 465MB	MIR optimisations
  time: 0.060; rss: 474MB	write metadata
  time: 0.377; rss: 486MB	translation item collection
  time: 0.063; rss: 496MB	codegen unit partitioning
  time: 0.041; rss: 741MB	internalize symbols
time: 4.445; rss: 741MB	translation
time: 0.000; rss: 741MB	assert dep graph
time: 0.000; rss: 741MB	serialize dep graph
incremental: re-using 0 out of 1 modules
  time: 0.531; rss: 429MB	llvm function passes [0]
  time: 0.277; rss: 436MB	llvm module passes [0]
  time: 10.454; rss: 434MB	codegen passes [0]
  time: 0.000; rss: 434MB	codegen passes [0]
time: 12.029; rss: 434MB	LLVM passes
time: 0.000; rss: 434MB	serialize work products
time: 0.341; rss: 116MB	linking
done
