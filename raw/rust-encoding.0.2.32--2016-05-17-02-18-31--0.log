commit 786b26d7b48accffc638f8c2767a6e4a6f1991a5
Merge: cd6a400 65ad935
Author: bors <bors@rust-lang.org>
Date:   Mon May 16 18:39:59 2016 -0700

    Auto merge of #33491 - arielb1:obligation-jungle, r=nikomatsakis
    
    Replace the obligation forest with a graph
    
    In the presence of caching, arbitrary nodes in the obligation forest can be merged, which makes it a general graph. Handle it as such, using cycle-detection algorithms in the processing.
    
    I should do performance measurements sometime.
    
    This was pretty much written as a proof-of-concept. Please help me write this in a less-ugly way. I should also add comments explaining what is going on.
    
    r? @nikomatsakis
rustc: ./rust-encoding.0.2.32
cargo rustc -- -Ztime-passes -Zinput-stats
    Updating registry `https://github.com/rust-lang/crates.io-index`
   Compiling encoding_index_tests v0.1.4 (file:///root/benchmarks/rust-encoding.0.2.32)
   Compiling encoding-index-singlebyte v1.20141219.5 (file:///root/benchmarks/rust-encoding.0.2.32)
   Compiling encoding-index-simpchinese v1.20141219.5 (file:///root/benchmarks/rust-encoding.0.2.32)
   Compiling encoding-index-japanese v1.20141219.5 (file:///root/benchmarks/rust-encoding.0.2.32)
   Compiling encoding-index-korean v1.20141219.5 (file:///root/benchmarks/rust-encoding.0.2.32)
   Compiling encoding-index-tradchinese v1.20141219.5 (file:///root/benchmarks/rust-encoding.0.2.32)
   Compiling encoding v0.2.32 (file:///root/benchmarks/rust-encoding.0.2.32)
time: 0.024; rss: 50MB	parsing
Lines of code:             6441
Pre-expansion node count:  30537
time: 0.005; rss: 55MB	configuration 1
time: 0.000; rss: 55MB	recursion limit
time: 0.000; rss: 55MB	crate injection
time: 0.004; rss: 61MB	macro loading
time: 0.000; rss: 61MB	plugin loading
time: 0.000; rss: 61MB	plugin registration
time: 0.044; rss: 61MB	expansion
time: 0.006; rss: 61MB	configuration 2
time: 0.000; rss: 61MB	gated configuration checking
time: 0.003; rss: 61MB	maybe building test harness
time: 0.003; rss: 61MB	prelude injection
time: 0.000; rss: 61MB	checking that all macro invocations are gone
time: 0.000; rss: 61MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 61MB	complete gated feature checking
Post-expansion node count: 41376
time: 0.003; rss: 61MB	assigning node ids
time: 0.001; rss: 61MB	collecting defs
time: 0.001; rss: 61MB	external crate/lib resolution
time: 0.002; rss: 61MB	early lint checks
time: 0.008; rss: 69MB	name resolution
time: 0.004; rss: 71MB	lowering ast -> hir
time: 0.000; rss: 71MB	indexing hir
time: 0.000; rss: 71MB	attribute checking
time: 0.000; rss: 73MB	language item collection
time: 0.000; rss: 73MB	lifetime resolution
time: 0.000; rss: 73MB	looking for entry point
time: 0.000; rss: 73MB	looking for plugin registrar
time: 0.002; rss: 75MB	region resolution
time: 0.000; rss: 75MB	loop checking
time: 0.000; rss: 75MB	static item recursion checking
time: 0.000; rss: 75MB	load_dep_graph
time: 0.005; rss: 78MB	type collecting
time: 0.000; rss: 78MB	variance inference
time: 0.023; rss: 96MB	coherence checking
time: 0.023; rss: 96MB	wf checking
time: 0.015; rss: 97MB	item-types checking
time: 0.233; rss: 103MB	item-bodies checking
time: 0.000; rss: 103MB	drop-impl checking
time: 0.013; rss: 103MB	const checking
time: 0.002; rss: 103MB	privacy checking
time: 0.000; rss: 103MB	stability index
time: 0.002; rss: 103MB	intrinsic checking
time: 0.000; rss: 103MB	effect checking
time: 0.007; rss: 103MB	match checking
time: 0.002; rss: 103MB	liveness checking
time: 0.008; rss: 103MB	rvalue checking
time: 0.024; rss: 111MB	MIR dump
time: 0.014; rss: 112MB	MIR passes
time: 0.024; rss: 112MB	borrow checking
time: 0.000; rss: 112MB	reachability checking
time: 0.002; rss: 112MB	death checking
time: 0.002; rss: 112MB	stability checking
time: 0.000; rss: 112MB	unused lib feature checking
time: 0.024; rss: 112MB	lint checking
time: 0.000; rss: 112MB	resolving dependency formats
time: 0.004; rss: 112MB	Prepare MIR codegen passes
  time: 0.028; rss: 117MB	translation item collection
  time: 0.001; rss: 117MB	codegen unit partitioning
  time: 0.058; rss: 153MB	write metadata
time: 0.349; rss: 153MB	translation
time: 0.000; rss: 153MB	assert dep graph
time: 0.000; rss: 153MB	serialize dep graph
  time: 0.026; rss: 115MB	llvm function passes [0]
  time: 0.049; rss: 119MB	llvm module passes [0]
  time: 0.580; rss: 125MB	codegen passes [0]
  time: 0.001; rss: 109MB	codegen passes [0]
time: 0.721; rss: 108MB	LLVM passes
time: 0.053; rss: 107MB	linking
done
