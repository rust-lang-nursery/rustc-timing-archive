commit d27bdafc3eaab2729d664f82b7d650782640f31a
Merge: cde0fa5 0d2c26c
Author: bors <bors@rust-lang.org>
Date:   Fri May 20 00:34:50 2016 -0700

    Auto merge of #33553 - alexcrichton:cdylibs, r=brson
    
    rustc: Add a new crate type, cdylib
    
    This commit is an implementation of [RFC 1510] which adds a new crate type,
    `cdylib`, to the compiler. This new crate type differs from the existing `dylib`
    crate type in a few key ways:
    
    * No metadata is present in the final artifact
    * Symbol visibility rules are the same as executables, that is only reachable
      `extern` functions are visible symbols
    * LTO is allowed
    * All libraries are always linked statically
    
    This commit is relatively simple by just plubming the compiler with another
    crate type which takes different branches here and there. The only major change
    is an implementation of the `Linker::export_symbols` function on Unix which now
    actually does something. This helps restrict the public symbols from a cdylib on
    Unix.
    
    With this PR a "hello world" `cdylib` is 7.2K while the same `dylib` is 2.4MB,
    which is some nice size savings!
    
    [RFC 1510]: https://github.com/rust-lang/rfcs/pull/1510
    
    Closes #33132
rustc: ./regex.0.1.30
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling regex v0.1.30 (file:///root/benchmarks/regex.0.1.30)
time: 0.065; rss: 62MB	parsing
Lines of code:             8558
Pre-expansion node count:  58331
time: 0.011; rss: 62MB	configuration 1
time: 0.000; rss: 62MB	recursion limit
time: 0.000; rss: 62MB	crate injection
time: 0.020; rss: 93MB	macro loading
time: 0.000; rss: 93MB	plugin loading
time: 0.000; rss: 93MB	plugin registration
time: 0.060; rss: 98MB	expansion
time: 0.013; rss: 98MB	configuration 2
time: 0.000; rss: 98MB	gated configuration checking
time: 0.006; rss: 98MB	maybe building test harness
time: 0.006; rss: 98MB	prelude injection
time: 0.001; rss: 98MB	checking that all macro invocations are gone
time: 0.000; rss: 98MB	checking for inline asm in case the target doesn't support it
time: 0.001; rss: 98MB	complete gated feature checking
Post-expansion node count: 68487
time: 0.006; rss: 98MB	assigning node ids
time: 0.001; rss: 98MB	collecting defs
time: 0.001; rss: 98MB	external crate/lib resolution
time: 0.006; rss: 98MB	early lint checks
time: 0.009; rss: 100MB	name resolution
time: 0.010; rss: 110MB	lowering ast -> hir
time: 0.002; rss: 110MB	indexing hir
time: 0.001; rss: 110MB	attribute checking
time: 0.001; rss: 102MB	language item collection
time: 0.001; rss: 102MB	lifetime resolution
time: 0.000; rss: 102MB	looking for entry point
time: 0.000; rss: 102MB	looking for plugin registrar
time: 0.006; rss: 107MB	region resolution
time: 0.001; rss: 107MB	loop checking
time: 0.001; rss: 107MB	static item recursion checking
time: 0.000; rss: 107MB	load_dep_graph
time: 0.007; rss: 109MB	type collecting
time: 0.000; rss: 109MB	variance inference
time: 0.025; rss: 115MB	coherence checking
time: 0.014; rss: 115MB	wf checking
time: 0.332; rss: 122MB	item-types checking
time: 0.214; rss: 126MB	item-bodies checking
time: 0.000; rss: 126MB	drop-impl checking
time: 0.026; rss: 126MB	const checking
time: 0.004; rss: 126MB	privacy checking
time: 0.001; rss: 126MB	stability index
time: 0.002; rss: 126MB	intrinsic checking
time: 0.001; rss: 126MB	effect checking
time: 0.004; rss: 126MB	match checking
time: 0.002; rss: 126MB	liveness checking
time: 0.008; rss: 126MB	rvalue checking
time: 0.053; rss: 137MB	MIR dump
time: 0.020; rss: 137MB	MIR passes
time: 0.021; rss: 137MB	borrow checking
time: 0.000; rss: 137MB	reachability checking
time: 0.002; rss: 137MB	death checking
time: 0.002; rss: 137MB	stability checking
time: 0.000; rss: 137MB	unused lib feature checking
time: 0.028; rss: 137MB	lint checking
time: 0.000; rss: 137MB	resolving dependency formats
time: 0.005; rss: 139MB	Prepare MIR codegen passes
  time: 0.089; rss: 146MB	translation item collection
  time: 0.001; rss: 146MB	codegen unit partitioning
  time: 0.178; rss: 201MB	write metadata
time: 0.753; rss: 199MB	translation
time: 0.000; rss: 199MB	assert dep graph
time: 0.000; rss: 199MB	serialize dep graph
  time: 0.036; rss: 130MB	llvm function passes [0]
  time: 0.018; rss: 132MB	llvm module passes [0]
  time: 0.607; rss: 136MB	codegen passes [0]
  time: 0.001; rss: 117MB	codegen passes [0]
time: 0.736; rss: 113MB	LLVM passes
time: 0.067; rss: 113MB	linking
done
