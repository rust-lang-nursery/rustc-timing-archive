commit 3fef221514ab31088f75d14516c851e68a70cf9e
Merge: 5f128ed bc3618e
Author: bors <bors@rust-lang.org>
Date:   Wed Dec 7 00:30:25 2016 +0000

    Auto merge of #38134 - bluss:iter-nth, r=aturon
    
    Remove Self: Sized from Iterator::nth
    
    It is an unnecessary restriction; nth neither needs self to be sized
    nor needs to be exempted from the trait object.
    
    It increases the utility of the nth method, because type specific
    implementations are available through `&mut I` or through an iterator
    trait object.
    
    It is a backwards compatible change due to the special cases of the
    `where Self: Sized` bound; it was already optional to include this bound
    in `Iterator` implementations.
rustc: ./futures-rs-test-all
cargo rustc --test all  -- -Ztime-passes -Zinput-stats
time: 0.002; rss: 44MB	parsing
Lines of code:             412
Pre-expansion node count:  5286
time: 0.000; rss: 44MB	recursion limit
time: 0.000; rss: 44MB	crate injection
time: 0.000; rss: 44MB	plugin loading
time: 0.000; rss: 44MB	plugin registration
time: 0.022; rss: 69MB	expansion
time: 0.001; rss: 69MB	maybe building test harness
time: 0.000; rss: 69MB	maybe creating a macro crate
Post-expansion node count: 10387
time: 0.000; rss: 69MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 69MB	complete gated feature checking
time: 0.000; rss: 69MB	early lint checks
time: 0.000; rss: 69MB	AST validation
time: 0.003; rss: 69MB	name resolution
time: 0.001; rss: 69MB	lowering ast -> hir
time: 0.000; rss: 69MB	indexing hir
time: 0.000; rss: 69MB	attribute checking
time: 0.000; rss: 69MB	language item collection
time: 0.000; rss: 69MB	lifetime resolution
time: 0.000; rss: 69MB	looking for entry point
time: 0.000; rss: 69MB	looking for plugin registrar
time: 0.000; rss: 69MB	region resolution
time: 0.000; rss: 69MB	loop checking
time: 0.000; rss: 69MB	static item recursion checking
time: 0.004; rss: 69MB	compute_incremental_hashes_map
time: 0.000; rss: 69MB	load_dep_graph
time: 0.000; rss: 69MB	stability index
time: 0.000; rss: 69MB	stability checking
time: 0.003; rss: 75MB	type collecting
time: 0.000; rss: 75MB	variance inference
time: 0.000; rss: 75MB	impl wf inference
time: 0.003; rss: 75MB	coherence checking
time: 0.006; rss: 75MB	wf checking
time: 0.002; rss: 75MB	item-types checking
time: 0.101; rss: 80MB	item-bodies checking
time: 0.000; rss: 80MB	drop-impl checking
time: 0.003; rss: 80MB	const checking
time: 0.000; rss: 80MB	privacy checking
time: 0.000; rss: 80MB	intrinsic checking
time: 0.000; rss: 80MB	effect checking
time: 0.001; rss: 80MB	match checking
time: 0.000; rss: 80MB	liveness checking
time: 0.002; rss: 80MB	rvalue checking
time: 0.006; rss: 82MB	MIR dump
  time: 0.001; rss: 82MB	SimplifyCfg
  time: 0.001; rss: 82MB	QualifyAndPromoteConstants
  time: 0.002; rss: 82MB	TypeckMir
  time: 0.000; rss: 82MB	SimplifyBranches
  time: 0.000; rss: 82MB	SimplifyCfg
time: 0.005; rss: 82MB	MIR cleanup and validation
time: 0.006; rss: 84MB	borrow checking
time: 0.000; rss: 84MB	reachability checking
time: 0.000; rss: 84MB	death checking
time: 0.000; rss: 84MB	unused lib feature checking
time: 0.002; rss: 84MB	lint checking
time: 0.001; rss: 84MB	resolving dependency formats
  time: 0.000; rss: 84MB	NoLandingPads
  time: 0.001; rss: 84MB	SimplifyCfg
  time: 0.001; rss: 84MB	EraseRegions
  time: 0.000; rss: 84MB	AddCallGuards
  time: 0.005; rss: 86MB	ElaborateDrops
  time: 0.000; rss: 86MB	NoLandingPads
  time: 0.001; rss: 86MB	SimplifyCfg
  time: 0.000; rss: 86MB	InstCombine
  time: 0.000; rss: 86MB	Deaggregator
  time: 0.000; rss: 86MB	CopyPropagation
  time: 0.000; rss: 86MB	SimplifyLocals
  time: 0.000; rss: 86MB	AddCallGuards
  time: 0.000; rss: 86MB	PreTrans
time: 0.009; rss: 86MB	MIR optimisations
  time: 0.000; rss: 86MB	write metadata
  time: 0.134; rss: 99MB	translation item collection
  time: 0.016; rss: 101MB	codegen unit partitioning
  time: 0.016; rss: 157MB	internalize symbols
time: 1.070; rss: 157MB	translation
time: 0.000; rss: 157MB	assert dep graph
time: 0.000; rss: 157MB	serialize dep graph
  time: 0.083; rss: 138MB	llvm function passes [0]
  time: 0.031; rss: 139MB	llvm module passes [0]
  time: 1.789; rss: 142MB	codegen passes [0]
  time: 0.000; rss: 142MB	codegen passes [0]
time: 1.903; rss: 142MB	LLVM passes
time: 0.000; rss: 142MB	serialize work products
  time: 0.156; rss: 88MB	running linker
time: 0.157; rss: 88MB	linking
done
