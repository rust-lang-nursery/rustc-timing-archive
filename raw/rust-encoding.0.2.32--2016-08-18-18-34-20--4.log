commit 499484f56d336f4628a6fa016626beb3ef21ba81
Merge: 43c090e 37d974f
Author: bors <bors@rust-lang.org>
Date:   Thu Aug 18 08:54:10 2016 -0700

    Auto merge of #35684 - nikomatsakis:incr-comp-metadata-audit-35111, r=mw
    
    Restructure metadata encoder to track deps precisely
    
    This issue restructures meta-data encoding to track dependencies very precisely. It uses a cute technique I hope to spread elsewhere, where we can guard the data flowing into a new dep-graph task and ensure that it is not "leaking" information from the outside, which would result in missing edges. There are no tests because we don't know of any bugs in the old system, but it's clear that there was leaked data.
    
    The commit series is standalone, but the refactorings are kind of "windy". It's a good idea to read the comment in `src/librustc_metadata/index_builder.rs` to get a feeling for the overall strategy I was aiming at.
    
    In several cases, I wound up adding some extra hashtable lookups, I think primarily for looking up `AdtDef` instances. We could remove these by implementing `DepGraphRead` for an `AdtDef` and then having it register a read to the adt-defs table, I guess, but I doubt it is really noticeable.
    
    Eventually I think I'd like to extend this pattern to the dep-graph more generally, since it effectively guarantees that data cannot leak.
    
    Fixes #35111.
    
    r? @michaelwoerister
rustc: ./rust-encoding.0.2.32
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling encoding v0.2.32 (file:///root/benchmarks/rust-encoding.0.2.32)
time: 0.020; rss: 49MB	parsing
Lines of code:             6441
Pre-expansion node count:  30069
time: 0.002; rss: 49MB	configuration
time: 0.000; rss: 49MB	recursion limit
time: 0.000; rss: 49MB	crate injection
time: 0.000; rss: 49MB	plugin loading
time: 0.000; rss: 49MB	plugin registration
time: 0.039; rss: 86MB	expansion
time: 0.000; rss: 86MB	maybe building test harness
time: 0.002; rss: 86MB	assigning node ids
Post-expansion node count: 40757
time: 0.000; rss: 86MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 86MB	complete gated feature checking
time: 0.001; rss: 87MB	collecting defs
time: 0.001; rss: 87MB	external crate/lib resolution
time: 0.001; rss: 87MB	early lint checks
time: 0.000; rss: 87MB	AST validation
time: 0.006; rss: 89MB	name resolution
time: 0.004; rss: 91MB	lowering ast -> hir
time: 0.001; rss: 91MB	indexing hir
time: 0.000; rss: 91MB	attribute checking
time: 0.000; rss: 90MB	language item collection
time: 0.001; rss: 90MB	lifetime resolution
time: 0.000; rss: 90MB	looking for entry point
time: 0.000; rss: 90MB	looking for plugin registrar
time: 0.002; rss: 92MB	region resolution
time: 0.000; rss: 92MB	loop checking
time: 0.000; rss: 92MB	static item recursion checking
time: 0.000; rss: 92MB	load_dep_graph
time: 0.008; rss: 93MB	type collecting
time: 0.000; rss: 93MB	variance inference
time: 0.017; rss: 95MB	coherence checking
time: 0.017; rss: 97MB	wf checking
time: 0.013; rss: 98MB	item-types checking
time: 0.180; rss: 103MB	item-bodies checking
time: 0.000; rss: 103MB	drop-impl checking
time: 0.012; rss: 103MB	const checking
time: 0.002; rss: 103MB	privacy checking
time: 0.000; rss: 103MB	stability index
time: 0.002; rss: 103MB	intrinsic checking
time: 0.000; rss: 103MB	effect checking
time: 0.007; rss: 103MB	match checking
time: 0.001; rss: 103MB	liveness checking
time: 0.007; rss: 103MB	rvalue checking
time: 0.022; rss: 113MB	MIR dump
time: 0.016; rss: 114MB	MIR passes
time: 0.023; rss: 114MB	borrow checking
time: 0.000; rss: 114MB	reachability checking
time: 0.002; rss: 114MB	death checking
time: 0.002; rss: 114MB	stability checking
time: 0.000; rss: 114MB	unused lib feature checking
time: 0.022; rss: 114MB	lint checking
makefile:2: recipe for target 'all' failed
done
