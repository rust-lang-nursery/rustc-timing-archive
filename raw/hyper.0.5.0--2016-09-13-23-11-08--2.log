commit b1363a73ede57ae595f3a1be2bb75d308ba4f7f6
Merge: 2fd0608 848cfe2
Author: bors <bors@rust-lang.org>
Date:   Tue Sep 13 15:08:12 2016 -0700

    Auto merge of #35021 - japaric:rustc-builtins, r=alexcrichton
    
    crate-ify compiler-rt into compiler-builtins
    
    libcompiler-rt.a is dead, long live libcompiler-builtins.rlib
    
    This commit moves the logic that used to build libcompiler-rt.a into a
    compiler-builtins crate on top of the core crate and below the std crate.
    This new crate still compiles the compiler-rt instrinsics using gcc-rs
    but produces an .rlib instead of a static library.
    
    Also, with this commit rustc no longer passes -lcompiler-rt to the
    linker. This effectively makes the "no-compiler-rt" field of target
    specifications a no-op. Users of `no_std` will have to explicitly add
    the compiler-builtins crate to their crate dependency graph *if* they
    need the compiler-rt intrinsics - this is a [breaking-change]. Users
    of the `std` have to do nothing extra as the std crate depends
    on compiler-builtins.
    
    Finally, this a step towards lazy compilation of std with Cargo as the
    compiler-rt intrinsics can now be built by Cargo instead of having to
    be supplied by the user by some other method.
    
    closes #34400
    
    ---
    
    r? @alexcrichton
rustc: ./hyper.0.5.0
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling hyper v0.5.0 (file:///root/benchmarks/hyper.0.5.0)
time: 0.027; rss: 51MB	parsing
Lines of code:             9154
Pre-expansion node count:  44873
time: 0.000; rss: 51MB	recursion limit
time: 0.000; rss: 51MB	crate injection
time: 0.000; rss: 51MB	plugin loading
time: 0.000; rss: 51MB	plugin registration
time: 0.094; rss: 79MB	expansion
time: 0.000; rss: 79MB	maybe building test harness
time: 0.001; rss: 79MB	maybe creating a macro crate
time: 0.005; rss: 79MB	assigning node ids
Post-expansion node count: 101537
time: 0.000; rss: 79MB	checking for inline asm in case the target doesn't support it
time: 0.002; rss: 79MB	complete gated feature checking
time: 0.003; rss: 82MB	collecting defs
time: 0.009; rss: 88MB	external crate/lib resolution
time: 0.003; rss: 88MB	early lint checks
time: 0.001; rss: 88MB	AST validation
time: 0.015; rss: 96MB	name resolution
time: 0.008; rss: 100MB	lowering ast -> hir
time: 0.002; rss: 102MB	indexing hir
time: 0.001; rss: 102MB	attribute checking
time: 0.001; rss: 96MB	language item collection
time: 0.002; rss: 96MB	lifetime resolution
time: 0.000; rss: 96MB	looking for entry point
time: 0.000; rss: 96MB	looking for plugin registrar
time: 0.006; rss: 101MB	region resolution
time: 0.001; rss: 101MB	loop checking
time: 0.001; rss: 101MB	static item recursion checking
time: 0.040; rss: 101MB	compute_incremental_hashes_map
time: 0.000; rss: 101MB	load_dep_graph
time: 0.023; rss: 102MB	type collecting
time: 0.000; rss: 102MB	variance inference
time: 0.035; rss: 105MB	coherence checking
time: 0.055; rss: 108MB	wf checking
time: 0.029; rss: 108MB	item-types checking
time: 0.359; rss: 119MB	item-bodies checking
time: 0.000; rss: 119MB	drop-impl checking
time: 0.037; rss: 121MB	const checking
time: 0.006; rss: 121MB	privacy checking
time: 0.001; rss: 121MB	stability index
time: 0.005; rss: 121MB	intrinsic checking
time: 0.002; rss: 121MB	effect checking
time: 0.013; rss: 121MB	match checking
time: 0.005; rss: 121MB	liveness checking
time: 0.027; rss: 121MB	rvalue checking
time: 0.054; rss: 140MB	MIR dump
  time: 0.007; rss: 140MB	SimplifyCfg
  time: 0.013; rss: 140MB	QualifyAndPromoteConstants
  time: 0.016; rss: 140MB	TypeckMir
  time: 0.001; rss: 140MB	SimplifyBranches
  time: 0.004; rss: 140MB	SimplifyCfg
time: 0.040; rss: 140MB	MIR passes
time: 0.060; rss: 140MB	borrow checking
time: 0.003; rss: 140MB	reachability checking
time: 0.005; rss: 140MB	death checking
time: 0.005; rss: 140MB	stability checking
time: 0.000; rss: 140MB	unused lib feature checking
time: 0.041; rss: 140MB	lint checking
time: 0.000; rss: 140MB	resolving dependency formats
  time: 0.001; rss: 140MB	NoLandingPads
  time: 0.003; rss: 140MB	SimplifyCfg
  time: 0.008; rss: 140MB	EraseRegions
  time: 0.001; rss: 140MB	AddCallGuards
  time: 0.054; rss: 142MB	ElaborateDrops
  time: 0.000; rss: 142MB	NoLandingPads
  time: 0.005; rss: 142MB	SimplifyCfg
  time: 0.003; rss: 142MB	Deaggregator
  time: 0.001; rss: 142MB	AddCallGuards
  time: 0.000; rss: 142MB	PreTrans
time: 0.089; rss: 142MB	Prepare MIR codegen passes
  time: 0.054; rss: 146MB	write metadata
  time: 0.113; rss: 150MB	translation item collection
  time: 0.018; rss: 152MB	codegen unit partitioning
  time: 0.032; rss: 219MB	internalize symbols
time: 1.395; rss: 209MB	translation
time: 0.000; rss: 209MB	assert dep graph
time: 0.000; rss: 209MB	serialize dep graph
  time: 0.103; rss: 163MB	llvm function passes [0]
  time: 0.049; rss: 162MB	llvm module passes [0]
  time: 1.856; rss: 164MB	codegen passes [0]
  time: 0.001; rss: 164MB	codegen passes [0]
time: 2.169; rss: 164MB	LLVM passes
time: 0.000; rss: 164MB	serialize work products
time: 0.157; rss: 99MB	linking
done
