commit 1ca1de6b26ec4740e3f0e8bead7002589024bd14
Merge: 70598e0 f5c7752
Author: bors <bors@rust-lang.org>
Date:   Sat Sep 3 17:41:08 2016 -0700

    Auto merge of #36124 - eddyb:fast-array-init, r=alexcrichton
    
    Fix optimization regressions for operations on [x; n]-initialized arrays.
    
    Fixes #35662 by using `!=` instead of `<` as the stop condition for `[x; n]` initialization loops.
    Also included is https://github.com/eddyb/llvm/commit/cc2009f02d3b9a3c05be939978212e832310b3d6, a hack to run the GVN pass twice, another time after InstCombine.
    This hack results in removal of redundant `memset` and `memcpy` calls (from loops over arrays).
    
    cc @nrc Can we get performance numbers on this? Not sure if it regresses anything else.
rustc: ./syntex-0.42.2-incr-clean
RUSTFLAGS="-Z incremental=incr -Z incremental-info" cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling bitflags v0.5.0
   Compiling log v0.3.6
   Compiling libc v0.2.15
   Compiling rustc-serialize v0.3.19
   Compiling winapi v0.2.8
   Compiling winapi-build v0.1.1
   Compiling unicode-xid v0.0.3
   Compiling kernel32-sys v0.2.2
   Compiling term v0.4.4
   Compiling syntex_pos v0.42.0
   Compiling syntex_errors v0.42.0
   Compiling syntex_syntax v0.42.0
   Compiling syntex v0.42.2
   Compiling incremental-syntex v0.1.0 (file:///root/benchmarks/syntex-0.42.2-incr-clean)
time: 0.000; rss: 42MB	parsing
Lines of code:             3
Pre-expansion node count:  8
time: 0.000; rss: 42MB	configuration
time: 0.000; rss: 42MB	recursion limit
time: 0.000; rss: 42MB	crate injection
time: 0.000; rss: 42MB	plugin loading
time: 0.000; rss: 42MB	plugin registration
time: 0.017; rss: 67MB	expansion
time: 0.000; rss: 67MB	maybe building test harness
time: 0.000; rss: 67MB	maybe creating a macro crate
time: 0.000; rss: 67MB	assigning node ids
Post-expansion node count: 68
time: 0.000; rss: 67MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 67MB	complete gated feature checking
time: 0.000; rss: 67MB	collecting defs
time: 0.002; rss: 67MB	external crate/lib resolution
time: 0.000; rss: 67MB	early lint checks
time: 0.000; rss: 67MB	AST validation
time: 0.000; rss: 67MB	name resolution
time: 0.000; rss: 67MB	lowering ast -> hir
time: 0.000; rss: 67MB	indexing hir
time: 0.000; rss: 67MB	attribute checking
time: 0.000; rss: 67MB	language item collection
time: 0.000; rss: 67MB	lifetime resolution
time: 0.000; rss: 67MB	looking for entry point
time: 0.000; rss: 67MB	looking for plugin registrar
time: 0.000; rss: 67MB	region resolution
time: 0.000; rss: 67MB	loop checking
time: 0.000; rss: 67MB	static item recursion checking
time: 0.000; rss: 67MB	compute_incremental_hashes_map
time: 0.000; rss: 67MB	load_dep_graph
time: 0.000; rss: 71MB	type collecting
time: 0.000; rss: 71MB	variance inference
time: 0.004; rss: 71MB	coherence checking
time: 0.000; rss: 71MB	wf checking
time: 0.000; rss: 71MB	item-types checking
time: 0.000; rss: 71MB	item-bodies checking
time: 0.000; rss: 71MB	drop-impl checking
time: 0.000; rss: 71MB	const checking
time: 0.000; rss: 71MB	privacy checking
time: 0.000; rss: 71MB	stability index
time: 0.000; rss: 71MB	intrinsic checking
time: 0.000; rss: 71MB	effect checking
time: 0.000; rss: 71MB	match checking
time: 0.000; rss: 71MB	liveness checking
time: 0.000; rss: 71MB	rvalue checking
time: 0.000; rss: 71MB	MIR dump
time: 0.000; rss: 71MB	MIR passes
time: 0.000; rss: 71MB	borrow checking
time: 0.000; rss: 71MB	reachability checking
time: 0.000; rss: 71MB	death checking
time: 0.000; rss: 71MB	stability checking
time: 0.000; rss: 71MB	unused lib feature checking
time: 0.000; rss: 71MB	lint checking
time: 0.001; rss: 71MB	resolving dependency formats
time: 0.000; rss: 71MB	Prepare MIR codegen passes
  time: 0.000; rss: 71MB	write metadata
  time: 0.001; rss: 71MB	translation item collection
  time: 0.000; rss: 71MB	codegen unit partitioning
  time: 0.000; rss: 75MB	internalize symbols
time: 0.008; rss: 75MB	translation
time: 0.000; rss: 75MB	assert dep graph
time: 0.000; rss: 75MB	serialize dep graph
  time: 0.000; rss: 75MB	llvm function passes [0]
  time: 0.000; rss: 75MB	llvm module passes [0]
  time: 0.002; rss: 75MB	codegen passes [0]
  time: 0.000; rss: 75MB	codegen passes [0]
time: 0.003; rss: 75MB	LLVM passes
time: 0.000; rss: 75MB	serialize work products
  time: 0.109; rss: 75MB	running linker
time: 0.109; rss: 75MB	linking
done
