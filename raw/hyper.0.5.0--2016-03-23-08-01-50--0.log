commit d6af19b89c477708ed0f5341ab7a26f1764f1ffa
Merge: 8ba2ea5 3a790ac
Author: bors <bors@rust-lang.org>
Date:   Wed Mar 23 01:03:04 2016 -0700

    Auto merge of #32348 - brson:cargotest, r=alexcrichton
    
    Introduce 'cargotest' and the check-cargotest buildstep
    
    This is a new suite of tests that verifies that the compiler builds specific revisions of select crates from crates.io.
    
    It does not run by default. It is intended that bors runs these tests against all PRs, and gates on them. In this way we will make it harder still to break important swaths of the ecosystem, even on nightly.
    
    This is a very basic implementation intended for feedback. The biggest thing it probably should do but doesn't is use a lockfile for every project it builds.
    
    r? @alexcrichton cc @rust-lang/lang @rust-lang/libs
rustc: ./hyper.0.5.0
cargo rustc -- -Ztime-passes -Zinput-stats
    Updating registry `https://github.com/rust-lang/crates.io-index`
   Compiling bitflags v0.3.3
   Compiling winapi-build v0.1.1
   Compiling traitobject v0.0.1
   Compiling unicase v0.1.0
   Compiling gcc v0.3.26
   Compiling matches v0.1.2
   Compiling libc v0.2.8
   Compiling typeable v0.1.2
   Compiling lazy_static v0.1.15
   Compiling pkg-config v0.3.8
   Compiling httparse v0.1.6
   Compiling rustc-serialize v0.3.18
   Compiling libc v0.1.12
   Compiling winapi v0.2.6
   Compiling kernel32-sys v0.2.1
   Compiling openssl-sys v0.6.7
   Compiling rand v0.3.14
   Compiling log v0.3.5
   Compiling num_cpus v0.2.11
   Compiling time v0.1.34
   Compiling mime v0.0.11
   Compiling openssl v0.6.7
   Compiling uuid v0.1.18
   Compiling url v0.2.38
   Compiling cookie v0.1.21
   Compiling hyper v0.5.0 (file:///root/benchmarks/hyper.0.5.0)
time: 0.041; rss: 41MB	parsing
Lines of code:             9154
Pre-expansion node count:  45594
time: 0.010; rss: 43MB	configuration 1
time: 0.000; rss: 43MB	recursion limit
time: 0.000; rss: 43MB	gated macro checking
time: 0.000; rss: 43MB	crate injection
time: 0.005; rss: 48MB	macro loading
time: 0.000; rss: 48MB	plugin loading
time: 0.000; rss: 48MB	plugin registration
time: 0.203; rss: 57MB	expansion
time: 0.005; rss: 57MB	complete gated feature checking 1
time: 0.033; rss: 57MB	configuration 2
time: 0.000; rss: 57MB	gated configuration checking
time: 0.013; rss: 57MB	maybe building test harness
time: 0.010; rss: 57MB	prelude injection
time: 0.001; rss: 57MB	checking that all macro invocations are gone
time: 0.000; rss: 57MB	checking for inline asm in case the target doesn't support it
time: 0.002; rss: 57MB	complete gated feature checking 2
time: 0.001; rss: 57MB	const fn bodies and arguments
Post-expansion node count: 106876
time: 0.010; rss: 57MB	assigning node ids
time: 0.022; rss: 63MB	lowering ast -> hir
time: 0.008; rss: 65MB	indexing hir
time: 0.002; rss: 65MB	attribute checking
time: 0.006; rss: 65MB	early lint checks
time: 0.004; rss: 60MB	external crate/lib resolution
time: 0.001; rss: 60MB	language item collection
time: 0.030; rss: 77MB	resolution
time: 0.002; rss: 77MB	lifetime resolution
time: 0.000; rss: 77MB	looking for entry point
time: 0.000; rss: 77MB	looking for plugin registrar
time: 0.010; rss: 81MB	region resolution
time: 0.001; rss: 81MB	loop checking
time: 0.001; rss: 81MB	static item recursion checking
time: 0.013; rss: 85MB	type collecting
time: 0.000; rss: 85MB	variance inference
time: 0.544; rss: 106MB	coherence checking
time: 0.078; rss: 106MB	wf checking
time: 0.030; rss: 108MB	item-types checking
time: 0.532; rss: 122MB	item-bodies checking
time: 0.000; rss: 122MB	drop-impl checking
time: 0.043; rss: 125MB	const checking
time: 0.010; rss: 125MB	privacy checking
time: 0.001; rss: 125MB	stability index
time: 0.004; rss: 125MB	intrinsic checking
time: 0.002; rss: 125MB	effect checking
time: 0.012; rss: 125MB	match checking
time: 0.005; rss: 125MB	liveness checking
time: 0.034; rss: 125MB	rvalue checking
time: 0.055; rss: 131MB	MIR dump
time: 0.032; rss: 133MB	MIR passes
time: 0.067; rss: 133MB	borrow checking
time: 0.003; rss: 133MB	reachability checking
time: 0.006; rss: 133MB	death checking
time: 0.006; rss: 133MB	stability checking
time: 0.000; rss: 133MB	unused lib feature checking
time: 0.049; rss: 133MB	lint checking
time: 0.000; rss: 133MB	resolving dependency formats
  time: 0.221; rss: 151MB	translation item collection
  time: 0.138; rss: 272MB	write metadata
time: 1.703; rss: 272MB	translation
  time: 0.098; rss: 161MB	llvm function passes [0]
  time: 0.048; rss: 163MB	llvm module passes [0]
  time: 1.641; rss: 165MB	codegen passes [0]
  time: 0.001; rss: 116MB	codegen passes [0]
time: 1.990; rss: 115MB	LLVM passes
time: 0.171; rss: 113MB	linking
done
