commit 045a727b8362103052ae3c5f51ad24f069bbd43f
Merge: 09fc1af 99aaccd
Author: bors <bors@rust-lang.org>
Date:   Sun Nov 6 23:05:58 2016 -0800

    Auto merge of #37605 - dsprenkels:arc-max-refcount, r=alexcrichton
    
    Fix Arc::clone()'s MAX_REFCOUNT check (off-by-one)
    
    Before, the strong count of an `Arc` could be set to
    `MAX_REFCOUNT + 1`, because when this happened, `old_size` would
    be exactly `MAX_REFCOUNT`. `Arc::clone()` would not abort.
    
    This commit changes the check in `Arc::clone()` to also abort if
    the old value is equal to `MAX_REFCOUNT`, because then the new
    value will be equal to `MAX_REFCOUNT + 1`.
    
    A test would require allocating memory for `isize::MAX` pointers.
    This would probably crash any machine, so no test is submitted
    with this commit.
rustc: ./syntex-0.42.2
cargo rustc -p syntex_syntax -- -Ztime-passes -Zinput-stats
   Compiling syntex_syntax v0.42.0
time: 0.090; rss: 71MB	parsing
Lines of code:             33687
Pre-expansion node count:  224033
time: 0.000; rss: 71MB	recursion limit
time: 0.000; rss: 71MB	crate injection
time: 0.000; rss: 71MB	plugin loading
time: 0.000; rss: 71MB	plugin registration
time: 0.235; rss: 143MB	expansion
time: 0.000; rss: 143MB	maybe building test harness
time: 0.006; rss: 143MB	maybe creating a macro crate
Post-expansion node count: 641571
time: 0.000; rss: 143MB	checking for inline asm in case the target doesn't support it
time: 0.013; rss: 143MB	complete gated feature checking
time: 0.022; rss: 143MB	early lint checks
time: 0.007; rss: 143MB	AST validation
time: 0.084; rss: 158MB	name resolution
time: 0.044; rss: 183MB	lowering ast -> hir
time: 0.008; rss: 194MB	indexing hir
time: 0.006; rss: 194MB	attribute checking
time: 0.004; rss: 149MB	language item collection
time: 0.010; rss: 149MB	lifetime resolution
time: 0.000; rss: 149MB	looking for entry point
time: 0.000; rss: 149MB	looking for plugin registrar
time: 0.042; rss: 160MB	region resolution
time: 0.004; rss: 160MB	loop checking
time: 0.004; rss: 160MB	static item recursion checking
time: 0.325; rss: 161MB	compute_incremental_hashes_map
time: 0.000; rss: 161MB	load_dep_graph
time: 0.040; rss: 167MB	type collecting
time: 0.001; rss: 167MB	variance inference
time: 0.034; rss: 172MB	coherence checking
time: 0.094; rss: 175MB	wf checking
time: 0.196; rss: 180MB	item-types checking
time: 3.621; rss: 231MB	item-bodies checking
time: 0.000; rss: 231MB	drop-impl checking
time: 0.243; rss: 235MB	const checking
time: 0.046; rss: 235MB	privacy checking
time: 0.005; rss: 235MB	stability index
time: 0.019; rss: 235MB	intrinsic checking
time: 0.015; rss: 235MB	effect checking
time: 0.048; rss: 235MB	match checking
time: 0.051; rss: 228MB	liveness checking
time: 0.205; rss: 228MB	rvalue checking
time: 0.407; rss: 419MB	MIR dump
  time: 0.057; rss: 423MB	SimplifyCfg
  time: 0.077; rss: 423MB	QualifyAndPromoteConstants
  time: 0.106; rss: 423MB	TypeckMir
  time: 0.004; rss: 423MB	SimplifyBranches
  time: 0.031; rss: 423MB	SimplifyCfg
time: 0.273; rss: 423MB	MIR cleanup and validation
time: 0.543; rss: 423MB	borrow checking
time: 0.021; rss: 423MB	reachability checking
time: 0.039; rss: 423MB	death checking
time: 0.038; rss: 423MB	stability checking
time: 0.000; rss: 423MB	unused lib feature checking
time: 0.213; rss: 423MB	lint checking
time: 0.000; rss: 423MB	resolving dependency formats
  time: 0.003; rss: 423MB	NoLandingPads
  time: 0.026; rss: 423MB	SimplifyCfg
  time: 0.067; rss: 432MB	EraseRegions
  time: 0.011; rss: 432MB	AddCallGuards
  time: 0.285; rss: 450MB	ElaborateDrops
  time: 0.003; rss: 450MB	NoLandingPads
  time: 0.052; rss: 450MB	SimplifyCfg
  time: 0.030; rss: 449MB	InstCombine
  time: 0.013; rss: 449MB	Deaggregator
  time: 0.002; rss: 449MB	CopyPropagation
  time: 0.035; rss: 449MB	SimplifyLocals
  time: 0.010; rss: 449MB	AddCallGuards
  time: 0.003; rss: 449MB	PreTrans
time: 0.541; rss: 449MB	MIR optimisations
  time: 0.060; rss: 458MB	write metadata
  time: 0.426; rss: 468MB	translation item collection
  time: 0.056; rss: 479MB	codegen unit partitioning
  time: 0.047; rss: 726MB	internalize symbols
time: 4.828; rss: 726MB	translation
time: 0.000; rss: 726MB	assert dep graph
time: 0.000; rss: 726MB	serialize dep graph
  time: 0.534; rss: 418MB	llvm function passes [0]
  time: 0.247; rss: 427MB	llvm module passes [0]
  time: 10.385; rss: 422MB	codegen passes [0]
  time: 0.000; rss: 422MB	codegen passes [0]
time: 11.918; rss: 422MB	LLVM passes
time: 0.000; rss: 422MB	serialize work products
time: 0.337; rss: 104MB	linking
done
