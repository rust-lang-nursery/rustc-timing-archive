commit 46957f05771a427545c792f69b37f8e05dcbb15d
Merge: 3210fd5 fb90e4c
Author: bors <bors@rust-lang.org>
Date:   Wed Oct 5 18:10:34 2016 -0700

    Auto merge of #36893 - apasel422:issue-32114, r=alexcrichton
    
    Restore `DISCONNECTED` state in `oneshot::Packet::send`
    
    Closes #32114
    
    I'm not sure if this is the best approach, but the current action of swapping `DISCONNECTED` with `DATA` seems wrong. Additionally, it is strange that the `send` method (and others in the `oneshot` module) takes `&mut self` despite performing atomic operations, as this requires extra discipline to avoid data races and lets us use methods like `AtomicUsize::get_mut` instead of methods that require a memory ordering.
rustc: ./html5ever-2016-08-25
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling html5ever v0.5.4 (file:///root/benchmarks/html5ever-2016-08-25)
time: 0.027; rss: 51MB	parsing
Lines of code:             8210
Pre-expansion node count:  52238
time: 0.000; rss: 51MB	recursion limit
time: 0.000; rss: 51MB	crate injection
time: 0.000; rss: 51MB	plugin loading
time: 0.000; rss: 51MB	plugin registration
time: 1.238; rss: 103MB	expansion
time: 0.000; rss: 103MB	maybe building test harness
time: 0.002; rss: 103MB	maybe creating a macro crate
Post-expansion node count: 163524
time: 0.000; rss: 103MB	checking for inline asm in case the target doesn't support it
time: 0.003; rss: 103MB	complete gated feature checking
time: 0.009; rss: 103MB	early lint checks
time: 0.002; rss: 103MB	AST validation
time: 0.018; rss: 107MB	name resolution
time: 0.016; rss: 123MB	lowering ast -> hir
time: 0.003; rss: 127MB	indexing hir
time: 0.002; rss: 127MB	attribute checking
time: 0.002; rss: 105MB	language item collection
time: 0.003; rss: 105MB	lifetime resolution
time: 0.000; rss: 105MB	looking for entry point
time: 0.000; rss: 105MB	looking for plugin registrar
time: 0.016; rss: 110MB	region resolution
time: 0.002; rss: 110MB	loop checking
time: 0.002; rss: 110MB	static item recursion checking
time: 0.023; rss: 111MB	compute_incremental_hashes_map
time: 0.000; rss: 111MB	load_dep_graph
time: 0.014; rss: 111MB	type collecting
time: 0.000; rss: 111MB	variance inference
time: 0.026; rss: 114MB	coherence checking
time: 0.024; rss: 114MB	wf checking
time: 0.344; rss: 122MB	item-types checking
time: 0.508; rss: 137MB	item-bodies checking
time: 0.000; rss: 137MB	drop-impl checking
time: 0.072; rss: 139MB	const checking
time: 0.009; rss: 139MB	privacy checking
time: 0.002; rss: 139MB	stability index
time: 0.004; rss: 139MB	intrinsic checking
time: 0.003; rss: 139MB	effect checking
time: 0.024; rss: 139MB	match checking
time: 0.014; rss: 133MB	liveness checking
time: 0.029; rss: 133MB	rvalue checking
time: 0.116; rss: 186MB	MIR dump
  time: 0.009; rss: 173MB	SimplifyCfg
  time: 0.015; rss: 175MB	QualifyAndPromoteConstants
  time: 0.025; rss: 175MB	TypeckMir
  time: 0.000; rss: 175MB	SimplifyBranches
  time: 0.005; rss: 175MB	SimplifyCfg
time: 0.054; rss: 175MB	MIR passes
time: 0.095; rss: 183MB	borrow checking
time: 0.003; rss: 183MB	reachability checking
time: 0.007; rss: 183MB	death checking
time: 0.008; rss: 183MB	stability checking
time: 0.000; rss: 183MB	unused lib feature checking
time: 0.065; rss: 183MB	lint checking
time: 0.000; rss: 183MB	resolving dependency formats
  time: 0.000; rss: 183MB	NoLandingPads
  time: 0.004; rss: 183MB	SimplifyCfg
  time: 0.010; rss: 183MB	EraseRegions
  time: 0.001; rss: 183MB	AddCallGuards
  time: 0.076; rss: 190MB	ElaborateDrops
  time: 0.000; rss: 190MB	NoLandingPads
  time: 0.007; rss: 186MB	SimplifyCfg
  time: 0.008; rss: 184MB	InstCombine
  time: 0.001; rss: 184MB	Deaggregator
  time: 0.000; rss: 184MB	CopyPropagation
  time: 0.001; rss: 184MB	AddCallGuards
  time: 0.000; rss: 184MB	PreTrans
time: 0.110; rss: 184MB	Prepare MIR codegen passes
  time: 0.052; rss: 184MB	write metadata
  time: 0.053; rss: 186MB	translation item collection
  time: 0.006; rss: 186MB	codegen unit partitioning
  time: 0.006; rss: 201MB	internalize symbols
time: 0.374; rss: 171MB	translation
time: 0.000; rss: 171MB	assert dep graph
time: 0.000; rss: 171MB	serialize dep graph
  time: 0.020; rss: 103MB	llvm function passes [0]
  time: 0.012; rss: 105MB	llvm module passes [0]
  time: 0.468; rss: 109MB	codegen passes [0]
  time: 0.001; rss: 109MB	codegen passes [0]
time: 0.540; rss: 109MB	LLVM passes
time: 0.000; rss: 109MB	serialize work products
time: 0.058; rss: 92MB	linking
done
