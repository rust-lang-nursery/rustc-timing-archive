commit 2fd060815f9e9c4ae787cb1cd44df51aeb91fe6e
Merge: c87ba3f b778f7fa
Author: bors <bors@rust-lang.org>
Date:   Tue Sep 13 10:54:55 2016 -0700

    Auto merge of #36181 - seanmonstar:likely, r=nikomatsakis
    
    core: add likely and unlikely intrinsics
    
    I'm no good at reading assembly, but I have tried a stage1 compiler with this patch, and it does cause different asm output. Additionally, testing this compiler on my httparse crate with some `likely` usage added in to the branches does affect benchmarks. However, I'm sure a codegen test should be included, if anyone knows what it should look like.
    
    There isn't an entry in `librustc_trans/context.rs` in this diff, because it already exists (`llvm.expect.i1` is used for array indices).
    
    ----
    
    Even though this does affect httparse benchmarks, it doesn't seem to affect it the same way GCC's `__builtin_expect` affects picohttpparser. I was confused that the deviation on the benchmarks grew hugely when testing this, especially since I'm absolutely certain that the branchs where I added `likely` were always `true`. I chalk that up to GCC and LLVM handle branch prediction differently.
    
    cc #26179
rustc: ./jld-day15-parser
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling day15 v0.1.0 (file:///root/benchmarks/jld-day15-parser)
time: 0.001; rss: 42MB	parsing
Lines of code:             72
Pre-expansion node count:  654
time: 0.000; rss: 42MB	recursion limit
time: 0.000; rss: 42MB	crate injection
time: 0.000; rss: 42MB	plugin loading
time: 0.000; rss: 42MB	plugin registration
time: 0.018; rss: 66MB	expansion
time: 0.000; rss: 66MB	maybe building test harness
time: 0.000; rss: 66MB	maybe creating a macro crate
time: 0.000; rss: 66MB	assigning node ids
Post-expansion node count: 1155
time: 0.000; rss: 66MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 66MB	complete gated feature checking
time: 0.000; rss: 66MB	collecting defs
time: 0.003; rss: 66MB	external crate/lib resolution
time: 0.000; rss: 66MB	early lint checks
time: 0.000; rss: 66MB	AST validation
time: 0.001; rss: 66MB	name resolution
time: 0.000; rss: 66MB	lowering ast -> hir
time: 0.000; rss: 66MB	indexing hir
time: 0.000; rss: 66MB	attribute checking
time: 0.000; rss: 66MB	language item collection
time: 0.000; rss: 66MB	lifetime resolution
time: 0.000; rss: 66MB	looking for entry point
time: 0.000; rss: 66MB	looking for plugin registrar
time: 0.000; rss: 66MB	region resolution
time: 0.000; rss: 66MB	loop checking
time: 0.000; rss: 66MB	static item recursion checking
time: 0.000; rss: 71MB	compute_incremental_hashes_map
time: 0.000; rss: 71MB	load_dep_graph
time: 0.001; rss: 71MB	type collecting
time: 0.000; rss: 71MB	variance inference
time: 0.004; rss: 71MB	coherence checking
time: 0.005; rss: 71MB	wf checking
time: 0.000; rss: 71MB	item-types checking
time: 0.032; rss: 77MB	item-bodies checking
time: 0.000; rss: 77MB	drop-impl checking
time: 0.001; rss: 77MB	const checking
time: 0.000; rss: 77MB	privacy checking
time: 0.000; rss: 77MB	stability index
time: 0.000; rss: 77MB	intrinsic checking
time: 0.000; rss: 77MB	effect checking
time: 0.000; rss: 77MB	match checking
time: 0.000; rss: 77MB	liveness checking
time: 0.000; rss: 77MB	rvalue checking
time: 0.001; rss: 77MB	MIR dump
  time: 0.000; rss: 77MB	SimplifyCfg
  time: 0.000; rss: 77MB	QualifyAndPromoteConstants
  time: 0.000; rss: 77MB	TypeckMir
  time: 0.000; rss: 77MB	SimplifyBranches
  time: 0.000; rss: 77MB	SimplifyCfg
time: 0.001; rss: 77MB	MIR passes
time: 0.001; rss: 77MB	borrow checking
time: 0.000; rss: 77MB	reachability checking
time: 0.000; rss: 77MB	death checking
time: 0.000; rss: 77MB	stability checking
time: 0.000; rss: 77MB	unused lib feature checking
time: 0.003; rss: 77MB	lint checking
time: 0.001; rss: 77MB	resolving dependency formats
  time: 0.000; rss: 77MB	NoLandingPads
  time: 0.000; rss: 77MB	SimplifyCfg
  time: 0.000; rss: 77MB	EraseRegions
  time: 0.000; rss: 77MB	AddCallGuards
  time: 0.001; rss: 81MB	ElaborateDrops
  time: 0.000; rss: 81MB	NoLandingPads
  time: 0.000; rss: 81MB	SimplifyCfg
  time: 0.003; rss: 81MB	Deaggregator
  time: 0.000; rss: 81MB	AddCallGuards
  time: 0.000; rss: 81MB	PreTrans
time: 0.005; rss: 81MB	Prepare MIR codegen passes
  time: 0.000; rss: 81MB	write metadata
  time: 0.196; rss: 87MB	translation item collection
  time: 0.003; rss: 87MB	codegen unit partitioning
  time: 0.006; rss: 97MB	internalize symbols
time: 0.757; rss: 97MB	translation
time: 0.000; rss: 97MB	assert dep graph
time: 0.000; rss: 97MB	serialize dep graph
  time: 0.018; rss: 89MB	llvm function passes [0]
  time: 0.001; rss: 89MB	llvm module passes [0]
  time: 0.350; rss: 96MB	codegen passes [0]
  time: 0.000; rss: 96MB	codegen passes [0]
time: 0.370; rss: 96MB	LLVM passes
time: 0.000; rss: 96MB	serialize work products
  time: 0.120; rss: 86MB	running linker
time: 0.121; rss: 86MB	linking
done
