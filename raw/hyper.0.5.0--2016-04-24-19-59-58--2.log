commit 645dd013ac6b334ab5bf7a7240c2243f4bb590c9
Merge: 1930483 e078667
Author: bors <bors@rust-lang.org>
Date:   Sun Apr 24 17:04:49 2016 -0700

    Auto merge of #33085 - fitzgen:make-enumerate-example-more-clear, r=steveklabnik
    
    Make the `Iterator::enumerate` doc example more clear
    
    The example uses integers for the value being iterated over, but the indices
    added by `enumerate` are also integers, so I always end up double taking and
    thinking harder than I should when parsing the documentation. I also always
    forget which order the index and value are in the tuple so I frequently hit this
    stumbling block. This commit changes the documentation to iterate over
    characters so that it is immediately obvious which part of the tuple is the
    index and which is the value.
rustc: ./hyper.0.5.0
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling hyper v0.5.0 (file:///root/benchmarks/hyper.0.5.0)
time: 0.043; rss: 50MB	parsing
Lines of code:             9154
Pre-expansion node count:  45594
time: 0.009; rss: 51MB	configuration 1
time: 0.000; rss: 51MB	recursion limit
time: 0.000; rss: 51MB	gated macro checking
time: 0.000; rss: 51MB	crate injection
time: 0.005; rss: 56MB	macro loading
time: 0.000; rss: 56MB	plugin loading
time: 0.000; rss: 56MB	plugin registration
time: 0.203; rss: 65MB	expansion
time: 0.004; rss: 65MB	complete gated feature checking 1
time: 0.029; rss: 65MB	configuration 2
time: 0.000; rss: 65MB	gated configuration checking
time: 0.011; rss: 65MB	maybe building test harness
time: 0.009; rss: 65MB	prelude injection
time: 0.001; rss: 65MB	checking that all macro invocations are gone
time: 0.000; rss: 65MB	checking for inline asm in case the target doesn't support it
time: 0.002; rss: 65MB	complete gated feature checking 2
time: 0.001; rss: 65MB	const fn bodies and arguments
Post-expansion node count: 107125
time: 0.008; rss: 65MB	assigning node ids
time: 0.006; rss: 67MB	collecting defs
time: 0.005; rss: 69MB	external crate/lib resolution
time: 0.019; rss: 75MB	lowering ast -> hir
time: 0.005; rss: 76MB	indexing hir
time: 0.001; rss: 76MB	attribute checking
time: 0.007; rss: 76MB	early lint checks
time: 0.001; rss: 69MB	language item collection
time: 0.026; rss: 86MB	name resolution
time: 0.002; rss: 86MB	lifetime resolution
time: 0.000; rss: 86MB	looking for entry point
time: 0.000; rss: 86MB	looking for plugin registrar
time: 0.007; rss: 88MB	region resolution
time: 0.001; rss: 88MB	loop checking
time: 0.001; rss: 88MB	static item recursion checking
time: 0.000; rss: 88MB	load_dep_graph
time: 0.018; rss: 99MB	type collecting
time: 0.000; rss: 99MB	variance inference
time: 0.046; rss: 113MB	coherence checking
time: 0.074; rss: 114MB	wf checking
time: 0.029; rss: 114MB	item-types checking
time: 0.503; rss: 132MB	item-bodies checking
time: 0.000; rss: 132MB	drop-impl checking
time: 0.041; rss: 134MB	const checking
time: 0.009; rss: 134MB	privacy checking
time: 0.001; rss: 134MB	stability index
time: 0.004; rss: 134MB	intrinsic checking
time: 0.002; rss: 134MB	effect checking
time: 0.012; rss: 134MB	match checking
time: 0.005; rss: 135MB	liveness checking
time: 0.033; rss: 135MB	rvalue checking
time: 0.061; rss: 143MB	MIR dump
time: 0.022; rss: 143MB	MIR passes
time: 0.066; rss: 144MB	borrow checking
time: 0.003; rss: 144MB	reachability checking
time: 0.006; rss: 144MB	death checking
time: 0.006; rss: 144MB	stability checking
time: 0.000; rss: 144MB	unused lib feature checking
time: 0.047; rss: 144MB	lint checking
time: 0.000; rss: 144MB	resolving dependency formats
time: 0.010; rss: 145MB	Prepare MIR codegen passes
  time: 0.214; rss: 164MB	translation item collection
  time: 0.009; rss: 165MB	codegen unit partitioning
  time: 0.141; rss: 280MB	write metadata
time: 1.786; rss: 280MB	translation
time: 0.001; rss: 280MB	assert dep graph
time: 0.000; rss: 280MB	serialize dep graph
  time: 0.098; rss: 164MB	llvm function passes [0]
  time: 0.048; rss: 167MB	llvm module passes [0]
  time: 1.642; rss: 171MB	codegen passes [0]
  time: 0.001; rss: 121MB	codegen passes [0]
time: 2.000; rss: 120MB	LLVM passes
time: 0.179; rss: 117MB	linking
done
