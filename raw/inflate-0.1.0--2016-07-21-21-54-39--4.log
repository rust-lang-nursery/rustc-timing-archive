commit 62690b3c3fa6e157daa7f7c5a3af005f37eb4199
Merge: 7588653 ede39ae
Author: bors <bors@rust-lang.org>
Date:   Thu Jul 21 16:19:54 2016 -0700

    Auto merge of #34544 - 3Hren:issue/xx/reinterpret-format-precision-for-strings, r=alexcrichton
    
    feat: reinterpret `precision` field for strings
    
    This commit changes the behavior of formatting string arguments with both width and precision fields set.
    
    Documentation says that the `width` field is the "minimum width" that the format should take up. If the value's string does not fill up this many characters, then the padding specified by fill/alignment will be used to take up the required space.
    
    This is true for all formatted types except string, which is truncated down to `precision` number of chars and then all of `fill`, `align` and `width` fields are completely ignored.
    
    For example: `format!("{:/^10.8}", "1234567890);` emits "12345678". In the contrast Python version works as the expected:
    ```python
    >>> '{:/^10.8}'.format('1234567890')
    '/12345678/'
    ```
    
    This commit gives back the `Python` behavior by changing the `precision` field meaning to the truncation and nothing more. The result string *will* be prepended/appended up to the `width` field with the proper `fill` char.
    
    __However, this is the breaking change, I admit.__ Feel free to close it, but otherwise it should be mentioned in the `std::fmt` documentation somewhere near of `fill/align/width` fields description.
rustc: ./inflate-0.1.0
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling inflate v0.1.0 (file:///root/benchmarks/inflate-0.1.0)
time: 0.005; rss: 82MB	parsing
Lines of code:             956
Pre-expansion node count:  4738
time: 0.001; rss: 86MB	configuration
time: 0.000; rss: 86MB	recursion limit
time: 0.000; rss: 86MB	crate injection
time: 0.000; rss: 86MB	plugin loading
time: 0.000; rss: 86MB	plugin registration
time: 0.095; rss: 125MB	expansion
time: 0.000; rss: 125MB	maybe building test harness
time: 0.004; rss: 125MB	assigning node ids
Post-expansion node count: 55769
time: 0.000; rss: 125MB	checking for inline asm in case the target doesn't support it
time: 0.001; rss: 125MB	complete gated feature checking
time: 0.005; rss: 125MB	collecting defs
time: 0.001; rss: 125MB	external crate/lib resolution
time: 0.003; rss: 125MB	early lint checks
time: 0.000; rss: 125MB	AST validation
time: 0.010; rss: 128MB	name resolution
time: 0.006; rss: 132MB	lowering ast -> hir
time: 0.001; rss: 134MB	indexing hir
time: 0.000; rss: 134MB	attribute checking
time: 0.001; rss: 131MB	language item collection
time: 0.001; rss: 131MB	lifetime resolution
time: 0.000; rss: 131MB	looking for entry point
time: 0.000; rss: 131MB	looking for plugin registrar
time: 0.004; rss: 132MB	region resolution
time: 0.001; rss: 132MB	loop checking
time: 0.000; rss: 132MB	static item recursion checking
time: 0.000; rss: 132MB	load_dep_graph
time: 0.002; rss: 134MB	type collecting
time: 0.000; rss: 134MB	variance inference
time: 0.010; rss: 135MB	coherence checking
time: 0.002; rss: 135MB	wf checking
time: 0.002; rss: 135MB	item-types checking
time: 3.710; rss: 152MB	item-bodies checking
time: 0.000; rss: 152MB	drop-impl checking
time: 0.015; rss: 153MB	const checking
time: 0.001; rss: 153MB	privacy checking
time: 0.000; rss: 153MB	stability index
time: 0.001; rss: 153MB	intrinsic checking
time: 0.001; rss: 153MB	effect checking
time: 0.005; rss: 153MB	match checking
time: 0.069; rss: 150MB	liveness checking
time: 0.011; rss: 150MB	rvalue checking
time: 0.039; rss: 164MB	MIR dump
time: 0.023; rss: 163MB	MIR passes
time: 0.218; rss: 164MB	borrow checking
time: 0.000; rss: 164MB	reachability checking
time: 0.003; rss: 164MB	death checking
time: 0.002; rss: 164MB	stability checking
time: 0.000; rss: 164MB	unused lib feature checking
time: 0.020; rss: 165MB	lint checking
time: 0.000; rss: 165MB	resolving dependency formats
time: 0.125; rss: 163MB	Prepare MIR codegen passes
  time: 0.003; rss: 163MB	write metadata
  time: 0.010; rss: 165MB	translation item collection
  time: 0.001; rss: 165MB	codegen unit partitioning
time: 0.823; rss: 181MB	translation
time: 0.000; rss: 181MB	assert dep graph
time: 0.000; rss: 181MB	serialize dep graph
  time: 0.295; rss: 149MB	llvm function passes [0]
  time: 0.076; rss: 149MB	llvm module passes [0]
  time: 4.598; rss: 152MB	codegen passes [0]
  time: 0.001; rss: 151MB	codegen passes [0]
time: 5.212; rss: 151MB	LLVM passes
time: 0.034; rss: 140MB	linking
done
