commit 8694b4ffe9b223c351e50c10bd8ea4e23af58baa
Merge: dde35e7 8128817
Author: bors <bors@rust-lang.org>
Date:   Fri Apr 8 03:20:11 2016 -0700

    Auto merge of #32695 - sfackler:default-buf-size, r=alexcrichton
    
    Drop the default buffer size to 8K
    
    The 64k capacity was picked by me a couple of years ago in the initial
    implementation of buffered IO adaptors:
    https://github.com/rust-lang/rust/pull/9091/files#diff-b131eeef531ad098b32f49695a031008R62.
    64K was picked for symmetry with libuv, which we no longer use.
    
    64K is *way* larger than the default size of any other language that I
    can find. C, C++, and Java default to 8K, and Go defaults to 4K. There
    have been a variety of issues filed relating to this such as #31885.
    
    Closes #31885
rustc: ./issue-32278-big-array-of-strings
/root/rust/x86_64-unknown-linux-gnu/stage2/bin/rustc big-array-of-strings.rs -Ztime-passes -Zinput-stats
time: 0.151; rss: 60MB	parsing
Lines of code:             65577
Pre-expansion node count:  65552
time: 0.011; rss: 60MB	configuration 1
time: 0.000; rss: 60MB	recursion limit
time: 0.001; rss: 60MB	gated macro checking
time: 0.000; rss: 60MB	crate injection
time: 0.004; rss: 62MB	macro loading
time: 0.000; rss: 62MB	plugin loading
time: 0.000; rss: 62MB	plugin registration
time: 0.042; rss: 68MB	expansion
time: 0.001; rss: 68MB	complete gated feature checking 1
time: 0.011; rss: 68MB	configuration 2
time: 0.000; rss: 68MB	gated configuration checking
time: 0.005; rss: 68MB	maybe building test harness
time: 0.005; rss: 68MB	prelude injection
time: 0.000; rss: 68MB	checking that all macro invocations are gone
time: 0.000; rss: 68MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 68MB	complete gated feature checking 2
time: 0.001; rss: 68MB	const fn bodies and arguments
Post-expansion node count: 65565
time: 0.006; rss: 68MB	assigning node ids
time: 0.009; rss: 82MB	lowering ast -> hir
time: 0.002; rss: 84MB	indexing hir
time: 0.001; rss: 84MB	attribute checking
time: 0.008; rss: 84MB	early lint checks
time: 0.001; rss: 71MB	external crate/lib resolution
time: 0.001; rss: 71MB	language item collection
time: 0.002; rss: 74MB	resolution
time: 0.001; rss: 74MB	lifetime resolution
time: 0.000; rss: 74MB	looking for entry point
time: 0.000; rss: 74MB	looking for plugin registrar
time: 0.007; rss: 80MB	region resolution
time: 0.001; rss: 80MB	loop checking
time: 0.001; rss: 80MB	static item recursion checking
time: 0.000; rss: 80MB	load_dep_graph
time: 0.000; rss: 80MB	type collecting
time: 0.000; rss: 80MB	variance inference
time: 0.006; rss: 88MB	coherence checking
time: 0.001; rss: 88MB	wf checking
time: 0.754; rss: 192MB	item-types checking
time: 0.000; rss: 192MB	item-bodies checking
time: 0.000; rss: 192MB	drop-impl checking
time: 0.020; rss: 194MB	const checking
time: 0.002; rss: 194MB	privacy checking
time: 0.000; rss: 194MB	stability index
time: 0.000; rss: 194MB	intrinsic checking
time: 0.000; rss: 194MB	effect checking
time: 0.000; rss: 194MB	match checking
time: 0.001; rss: 194MB	liveness checking
time: 0.000; rss: 194MB	rvalue checking
time: 0.001; rss: 194MB	MIR dump
time: 0.000; rss: 194MB	MIR passes
time: 0.001; rss: 194MB	borrow checking
time: 0.000; rss: 194MB	reachability checking
time: 0.001; rss: 194MB	death checking
time: 0.001; rss: 194MB	stability checking
time: 0.000; rss: 194MB	unused lib feature checking
time: 0.028; rss: 194MB	lint checking
time: 0.001; rss: 194MB	resolving dependency formats
time: 0.000; rss: 194MB	Prepare MIR codegen passes
  time: 0.001; rss: 203MB	translation item collection
  time: 0.000; rss: 207MB	write metadata
time: 0.087; rss: 207MB	translation
time: 0.000; rss: 207MB	assert dep graph
time: 0.000; rss: 207MB	serialize dep graph
  time: 0.003; rss: 85MB	llvm function passes [0]
  time: 0.000; rss: 85MB	llvm module passes [0]
  time: 0.163; rss: 86MB	codegen passes [0]
  time: 0.000; rss: 74MB	codegen passes [0]
time: 0.178; rss: 74MB	LLVM passes
  time: 0.187; rss: 74MB	running linker
time: 0.188; rss: 74MB	linking
done
