commit 045a727b8362103052ae3c5f51ad24f069bbd43f
Merge: 09fc1af 99aaccd
Author: bors <bors@rust-lang.org>
Date:   Sun Nov 6 23:05:58 2016 -0800

    Auto merge of #37605 - dsprenkels:arc-max-refcount, r=alexcrichton
    
    Fix Arc::clone()'s MAX_REFCOUNT check (off-by-one)
    
    Before, the strong count of an `Arc` could be set to
    `MAX_REFCOUNT + 1`, because when this happened, `old_size` would
    be exactly `MAX_REFCOUNT`. `Arc::clone()` would not abort.
    
    This commit changes the check in `Arc::clone()` to also abort if
    the old value is equal to `MAX_REFCOUNT`, because then the new
    value will be equal to `MAX_REFCOUNT + 1`.
    
    A test would require allocating memory for `isize::MAX` pointers.
    This would probably crash any machine, so no test is submitted
    with this commit.
rustc: ./piston-image-0.10.3
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling image v0.10.3 (file:///root/benchmarks/piston-image-0.10.3)
time: 0.038; rss: 54MB	parsing
Lines of code:             12000
Pre-expansion node count:  90272
time: 0.000; rss: 54MB	recursion limit
time: 0.000; rss: 54MB	crate injection
time: 0.000; rss: 54MB	plugin loading
time: 0.000; rss: 54MB	plugin registration
time: 0.065; rss: 94MB	expansion
time: 0.000; rss: 94MB	maybe building test harness
time: 0.001; rss: 94MB	maybe creating a macro crate
Post-expansion node count: 148999
time: 0.000; rss: 94MB	checking for inline asm in case the target doesn't support it
time: 0.003; rss: 94MB	complete gated feature checking
time: 0.005; rss: 94MB	early lint checks
time: 0.001; rss: 94MB	AST validation
time: 0.020; rss: 98MB	name resolution
time: 0.012; rss: 106MB	lowering ast -> hir
time: 0.002; rss: 110MB	indexing hir
time: 0.001; rss: 110MB	attribute checking
time: 0.001; rss: 100MB	language item collection
time: 0.002; rss: 100MB	lifetime resolution
time: 0.000; rss: 100MB	looking for entry point
time: 0.000; rss: 100MB	looking for plugin registrar
time: 0.010; rss: 106MB	region resolution
time: 0.001; rss: 106MB	loop checking
time: 0.001; rss: 106MB	static item recursion checking
time: 0.050; rss: 105MB	compute_incremental_hashes_map
time: 0.000; rss: 105MB	load_dep_graph
time: 0.015; rss: 108MB	type collecting
time: 0.000; rss: 108MB	variance inference
time: 0.025; rss: 111MB	coherence checking
time: 0.076; rss: 113MB	wf checking
time: 0.146; rss: 117MB	item-types checking
time: 0.783; rss: 134MB	item-bodies checking
time: 0.000; rss: 134MB	drop-impl checking
time: 0.052; rss: 136MB	const checking
time: 0.008; rss: 136MB	privacy checking
time: 0.001; rss: 136MB	stability index
time: 0.007; rss: 136MB	intrinsic checking
time: 0.003; rss: 136MB	effect checking
time: 0.015; rss: 136MB	match checking
time: 0.010; rss: 134MB	liveness checking
time: 0.042; rss: 134MB	rvalue checking
time: 0.095; rss: 176MB	MIR dump
  time: 0.011; rss: 176MB	SimplifyCfg
  time: 0.020; rss: 176MB	QualifyAndPromoteConstants
  time: 0.023; rss: 176MB	TypeckMir
  time: 0.001; rss: 176MB	SimplifyBranches
  time: 0.005; rss: 176MB	SimplifyCfg
time: 0.060; rss: 176MB	MIR cleanup and validation
time: 0.114; rss: 176MB	borrow checking
time: 0.004; rss: 176MB	reachability checking
time: 0.007; rss: 176MB	death checking
time: 0.009; rss: 176MB	stability checking
time: 0.000; rss: 176MB	unused lib feature checking
time: 0.070; rss: 176MB	lint checking
time: 0.000; rss: 176MB	resolving dependency formats
  time: 0.001; rss: 176MB	NoLandingPads
  time: 0.005; rss: 176MB	SimplifyCfg
  time: 0.012; rss: 178MB	EraseRegions
  time: 0.002; rss: 178MB	AddCallGuards
  time: 0.043; rss: 180MB	ElaborateDrops
  time: 0.001; rss: 180MB	NoLandingPads
  time: 0.009; rss: 181MB	SimplifyCfg
  time: 0.006; rss: 181MB	InstCombine
  time: 0.002; rss: 181MB	Deaggregator
  time: 0.000; rss: 181MB	CopyPropagation
  time: 0.008; rss: 181MB	SimplifyLocals
  time: 0.002; rss: 181MB	AddCallGuards
  time: 0.000; rss: 181MB	PreTrans
time: 0.090; rss: 181MB	MIR optimisations
  time: 0.016; rss: 183MB	write metadata
  time: 0.448; rss: 195MB	translation item collection
  time: 0.025; rss: 199MB	codegen unit partitioning
  time: 0.021; rss: 320MB	internalize symbols
time: 2.632; rss: 320MB	translation
time: 0.000; rss: 320MB	assert dep graph
time: 0.000; rss: 320MB	serialize dep graph
  time: 0.213; rss: 228MB	llvm function passes [0]
  time: 0.082; rss: 231MB	llvm module passes [0]
  time: 4.260; rss: 231MB	codegen passes [0]
  time: 0.000; rss: 231MB	codegen passes [0]
time: 4.885; rss: 231MB	LLVM passes
time: 0.000; rss: 231MB	serialize work products
time: 0.129; rss: 100MB	linking
done
