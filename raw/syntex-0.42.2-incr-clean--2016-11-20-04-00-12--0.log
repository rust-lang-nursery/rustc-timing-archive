commit e5ed0a5d78be74238af31631e7ecf311eb661586
Merge: 7c535c6 36f2af1
Author: bors <bors@rust-lang.org>
Date:   Sat Nov 19 23:39:25 2016 -0600

    Auto merge of #37842 - nikomatsakis:incremental-test, r=mw
    
    Add tests for incremental reuse scenarios
    
    These are microbenchmarks checking that we achieve the expected reuse in the scenarios covered by incremental beta.
    
    r? @michaelwoerister
rustc: ./syntex-0.42.2-incr-clean
RUSTFLAGS="-Z incremental=incr" \
    cargo rustc -p syntex_syntax  -- \
    -Ztime-passes -Zinput-stats -Z incremental-info
   Compiling winapi-build v0.1.1
   Compiling log v0.3.6
   Compiling libc v0.2.15
   Compiling winapi v0.2.8
   Compiling rustc-serialize v0.3.19
   Compiling bitflags v0.5.0
   Compiling unicode-xid v0.0.3
   Compiling kernel32-sys v0.2.2
   Compiling term v0.4.4
   Compiling syntex_pos v0.42.0
   Compiling syntex_errors v0.42.0
   Compiling syntex_syntax v0.42.0
time: 0.127; rss: 65MB	parsing
Lines of code:             33687
Pre-expansion node count:  223115
time: 0.000; rss: 65MB	recursion limit
time: 0.000; rss: 65MB	crate injection
time: 0.000; rss: 65MB	plugin loading
time: 0.000; rss: 65MB	plugin registration
time: 0.322; rss: 138MB	expansion
time: 0.000; rss: 138MB	maybe building test harness
time: 0.006; rss: 138MB	maybe creating a macro crate
Post-expansion node count: 638863
time: 0.000; rss: 138MB	checking for inline asm in case the target doesn't support it
time: 0.014; rss: 138MB	complete gated feature checking
time: 0.024; rss: 138MB	early lint checks
time: 0.007; rss: 138MB	AST validation
time: 0.105; rss: 154MB	name resolution
time: 0.088; rss: 178MB	lowering ast -> hir
time: 0.021; rss: 186MB	indexing hir
time: 0.007; rss: 186MB	attribute checking
time: 0.005; rss: 144MB	language item collection
time: 0.011; rss: 144MB	lifetime resolution
time: 0.000; rss: 144MB	looking for entry point
time: 0.000; rss: 144MB	looking for plugin registrar
time: 0.077; rss: 164MB	region resolution
time: 0.005; rss: 164MB	loop checking
time: 0.005; rss: 164MB	static item recursion checking
time: 0.331; rss: 165MB	compute_incremental_hashes_map
time: 0.000; rss: 165MB	load_dep_graph
time: 0.049; rss: 163MB	type collecting
time: 0.001; rss: 163MB	variance inference
time: 0.002; rss: 163MB	impl wf inference
time: 0.019; rss: 167MB	coherence checking
time: 0.090; rss: 169MB	wf checking
time: 0.182; rss: 174MB	item-types checking
time: 6.589; rss: 219MB	item-bodies checking
time: 0.000; rss: 219MB	drop-impl checking
time: 0.286; rss: 238MB	const checking
time: 0.050; rss: 238MB	privacy checking
time: 0.006; rss: 238MB	stability index
time: 0.018; rss: 238MB	intrinsic checking
time: 0.015; rss: 238MB	effect checking
time: 0.047; rss: 238MB	match checking
time: 0.069; rss: 241MB	liveness checking
time: 0.188; rss: 241MB	rvalue checking
time: 0.582; rss: 408MB	MIR dump
  time: 0.060; rss: 414MB	SimplifyCfg
  time: 0.076; rss: 414MB	QualifyAndPromoteConstants
  time: 0.108; rss: 414MB	TypeckMir
  time: 0.004; rss: 414MB	SimplifyBranches
  time: 0.031; rss: 414MB	SimplifyCfg
time: 0.280; rss: 414MB	MIR cleanup and validation
time: 0.573; rss: 418MB	borrow checking
time: 0.020; rss: 418MB	reachability checking
time: 0.041; rss: 418MB	death checking
time: 0.036; rss: 420MB	stability checking
time: 0.000; rss: 420MB	unused lib feature checking
time: 0.207; rss: 420MB	lint checking
time: 0.000; rss: 420MB	resolving dependency formats
  time: 0.003; rss: 420MB	NoLandingPads
  time: 0.027; rss: 420MB	SimplifyCfg
  time: 0.077; rss: 427MB	EraseRegions
  time: 0.012; rss: 427MB	AddCallGuards
  time: 0.305; rss: 446MB	ElaborateDrops
  time: 0.003; rss: 446MB	NoLandingPads
  time: 0.053; rss: 446MB	SimplifyCfg
  time: 0.030; rss: 446MB	InstCombine
  time: 0.013; rss: 446MB	Deaggregator
  time: 0.002; rss: 446MB	CopyPropagation
  time: 0.036; rss: 446MB	SimplifyLocals
  time: 0.010; rss: 446MB	AddCallGuards
  time: 0.003; rss: 446MB	PreTrans
time: 0.573; rss: 446MB	MIR optimisations
  time: 0.078; rss: 454MB	write metadata
  time: 0.429; rss: 467MB	translation item collection
  time: 0.069; rss: 474MB	codegen unit partitioning
  time: 0.048; rss: 719MB	internalize symbols
time: 5.101; rss: 719MB	translation
time: 0.000; rss: 719MB	assert dep graph
time: 0.000; rss: 719MB	serialize dep graph
incremental: re-using 0 out of 1 modules
  time: 0.531; rss: 413MB	llvm function passes [0]
  time: 0.262; rss: 421MB	llvm module passes [0]
  time: 10.391; rss: 412MB	codegen passes [0]
  time: 0.000; rss: 412MB	codegen passes [0]
time: 12.061; rss: 412MB	LLVM passes
time: 0.000; rss: 412MB	serialize work products
time: 0.347; rss: 100MB	linking
done
