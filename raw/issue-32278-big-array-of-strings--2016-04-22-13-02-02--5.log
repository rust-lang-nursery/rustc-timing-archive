commit af000a7bbffcaf5e75ff97b245fa5a413062acc1
Merge: a264f5b 46b75eb
Author: bors <bors@rust-lang.org>
Date:   Fri Apr 22 11:58:53 2016 -0700

    Auto merge of #31169 - gmbonnet:disable-option-checking, r=brson
    
    configure: Support --disable-option-checking
    
    I'm trying to package Rust for Fedora (this is nothing official (yet)).
    
    The standard RPM packaging process involves running `./configure` with a whole lot of options that are commonly recognized by autotools configure scripts, but not by Rust's one. Since it does not make much sense to support all of this options, I think it would be great to support at least `--disable-option-checking`, so Rust's configure script would not fail.
    
    [The old attempt](https://github.com/fabiand/rust-spec/blob/master/rustc.spec) to package Rust used a sed script (at line 72), but this is not the recommended way to do that.
rustc: ./issue-32278-big-array-of-strings
/root/rust/x86_64-unknown-linux-gnu/stage2/bin/rustc big-array-of-strings.rs -Ztime-passes -Zinput-stats
time: 0.153; rss: 69MB	parsing
Lines of code:             65577
Pre-expansion node count:  65552
time: 0.011; rss: 69MB	configuration 1
time: 0.000; rss: 69MB	recursion limit
time: 0.001; rss: 69MB	gated macro checking
time: 0.000; rss: 69MB	crate injection
time: 0.004; rss: 73MB	macro loading
time: 0.000; rss: 73MB	plugin loading
time: 0.000; rss: 73MB	plugin registration
time: 0.042; rss: 77MB	expansion
time: 0.001; rss: 77MB	complete gated feature checking 1
time: 0.011; rss: 77MB	configuration 2
time: 0.000; rss: 77MB	gated configuration checking
time: 0.006; rss: 77MB	maybe building test harness
time: 0.005; rss: 77MB	prelude injection
time: 0.001; rss: 77MB	checking that all macro invocations are gone
time: 0.000; rss: 77MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 77MB	complete gated feature checking 2
time: 0.001; rss: 77MB	const fn bodies and arguments
Post-expansion node count: 65565
time: 0.007; rss: 77MB	assigning node ids
time: 0.001; rss: 77MB	collecting defs
time: 0.002; rss: 77MB	external crate/lib resolution
time: 0.009; rss: 91MB	lowering ast -> hir
time: 0.002; rss: 93MB	indexing hir
time: 0.001; rss: 93MB	attribute checking
time: 0.008; rss: 93MB	early lint checks
time: 0.001; rss: 80MB	language item collection
time: 0.002; rss: 83MB	name resolution
time: 0.001; rss: 83MB	lifetime resolution
time: 0.000; rss: 83MB	looking for entry point
time: 0.000; rss: 83MB	looking for plugin registrar
time: 0.007; rss: 91MB	region resolution
time: 0.001; rss: 91MB	loop checking
time: 0.001; rss: 91MB	static item recursion checking
time: 0.000; rss: 91MB	load_dep_graph
time: 0.000; rss: 91MB	type collecting
time: 0.000; rss: 91MB	variance inference
time: 0.006; rss: 99MB	coherence checking
time: 0.001; rss: 99MB	wf checking
time: 0.780; rss: 202MB	item-types checking
time: 0.000; rss: 202MB	item-bodies checking
time: 0.000; rss: 202MB	drop-impl checking
time: 0.019; rss: 205MB	const checking
time: 0.002; rss: 205MB	privacy checking
time: 0.001; rss: 205MB	stability index
time: 0.001; rss: 205MB	intrinsic checking
time: 0.000; rss: 205MB	effect checking
time: 0.000; rss: 205MB	match checking
time: 0.001; rss: 205MB	liveness checking
time: 0.000; rss: 205MB	rvalue checking
time: 0.001; rss: 205MB	MIR dump
time: 0.000; rss: 205MB	MIR passes
time: 0.001; rss: 205MB	borrow checking
time: 0.000; rss: 205MB	reachability checking
time: 0.001; rss: 205MB	death checking
time: 0.001; rss: 205MB	stability checking
time: 0.000; rss: 205MB	unused lib feature checking
time: 0.030; rss: 205MB	lint checking
time: 0.001; rss: 205MB	resolving dependency formats
time: 0.000; rss: 205MB	Prepare MIR codegen passes
  time: 0.001; rss: 205MB	translation item collection
  time: 0.000; rss: 205MB	codegen unit partitioning
  time: 0.000; rss: 208MB	write metadata
time: 0.083; rss: 208MB	translation
time: 0.000; rss: 208MB	assert dep graph
time: 0.000; rss: 208MB	serialize dep graph
  time: 0.004; rss: 89MB	llvm function passes [0]
  time: 0.000; rss: 89MB	llvm module passes [0]
  time: 0.161; rss: 90MB	codegen passes [0]
  time: 0.000; rss: 77MB	codegen passes [0]
time: 0.176; rss: 77MB	LLVM passes
  time: 0.189; rss: 77MB	running linker
time: 0.190; rss: 77MB	linking
done
