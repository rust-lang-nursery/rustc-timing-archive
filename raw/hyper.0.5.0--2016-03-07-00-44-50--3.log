commit 6d262db4482e13ec05eb113e57e26d249698b4cf
Merge: 6eb81a1 a409076
Author: bors <bors@rust-lang.org>
Date:   Mon Mar 7 04:25:27 2016 +0000

    Auto merge of #32066 - ruud-v-a:fma, r=alexcrichton
    
    This adds support for fused multiply-add and multiply-subtract vector intrinsics for 128 and 256-bit vectors of `f32` and `f64`. These correspond to the intrinsics [listed here](https://software.intel.com/en-us/node/523929) except for the `_ss` and `_sd` variants. The intrinsics added are:
    
     * `fmadd`
     * `fmaddsub`
     * `fmsub`
     * `fmsubadd`
     * `fnmadd`
     * `fnmsub`
    
    The “fma” target feature must be enabled by passing `-C target-feature=+fma` to rustc when using these, otherwise LLVM will complain.
    
    I verified locally that the `x86_mm256_fmadd_ps` and `x86_mm256_fmsub_ps` work.
rustc: ./hyper.0.5.0
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling hyper v0.5.0 (file:///root/benchmarks/hyper.0.5.0)
time: 0.029; rss: 45MB	parsing
Lines of code:             9154
Pre-expansion node count:  45594
time: 0.009; rss: 45MB	configuration 1
time: 0.000; rss: 45MB	recursion limit
time: 0.000; rss: 45MB	gated macro checking
time: 0.000; rss: 45MB	crate injection
time: 0.004; rss: 50MB	macro loading
time: 0.000; rss: 50MB	plugin loading
time: 0.000; rss: 50MB	plugin registration
time: 0.191; rss: 59MB	expansion
time: 0.005; rss: 59MB	complete gated feature checking 1
time: 0.034; rss: 59MB	configuration 2
time: 0.000; rss: 59MB	gated configuration checking
time: 0.013; rss: 59MB	maybe building test harness
time: 0.010; rss: 59MB	prelude injection
time: 0.001; rss: 59MB	checking that all macro invocations are gone
time: 0.000; rss: 59MB	checking for inline asm in case the target doesn't support it
time: 0.002; rss: 59MB	complete gated feature checking 2
time: 0.001; rss: 59MB	const fn bodies and arguments
Post-expansion node count: 109138
time: 0.010; rss: 59MB	assigning node ids
time: 0.010; rss: 63MB	lowering ast -> hir
time: 0.004; rss: 68MB	indexing hir
time: 0.001; rss: 68MB	attribute checking
time: 0.007; rss: 68MB	early lint checks
time: 0.004; rss: 64MB	external crate/lib resolution
time: 0.001; rss: 64MB	language item collection
time: 0.024; rss: 82MB	resolution
time: 0.002; rss: 82MB	lifetime resolution
time: 0.000; rss: 82MB	looking for entry point
time: 0.000; rss: 82MB	looking for plugin registrar
time: 0.006; rss: 85MB	region resolution
time: 0.001; rss: 85MB	loop checking
time: 0.001; rss: 85MB	static item recursion checking
time: 0.013; rss: 86MB	type collecting
time: 0.000; rss: 86MB	variance inference
time: 0.038; rss: 105MB	coherence checking
time: 0.076; rss: 106MB	wf checking
time: 0.023; rss: 108MB	item-types checking
time: 0.466; rss: 132MB	item-bodies checking
time: 0.000; rss: 132MB	drop-impl checking
time: 0.037; rss: 134MB	const checking
time: 0.010; rss: 134MB	privacy checking
time: 0.001; rss: 134MB	stability index
time: 0.004; rss: 134MB	intrinsic checking
time: 0.002; rss: 134MB	effect checking
time: 0.011; rss: 134MB	match checking
time: 0.004; rss: 134MB	liveness checking
time: 0.032; rss: 134MB	rvalue checking
time: 0.061; rss: 137MB	MIR dump
time: 0.000; rss: 137MB	MIR passes
time: 0.064; rss: 137MB	borrow checking
time: 0.003; rss: 137MB	reachability checking
time: 0.006; rss: 137MB	death checking
time: 0.006; rss: 137MB	stability checking
time: 0.000; rss: 137MB	unused lib feature checking
time: 0.047; rss: 137MB	lint checking
time: 0.000; rss: 137MB	resolving dependency formats
time: 0.007; rss: 137MB	erasing regions from MIR
  time: 0.182; rss: 156MB	translation item collection
  time: 0.135; rss: 274MB	write metadata
time: 1.328; rss: 274MB	translation
  time: 0.096; rss: 162MB	llvm function passes [0]
  time: 0.048; rss: 165MB	llvm module passes [0]
  time: 1.616; rss: 166MB	codegen passes [0]
  time: 0.001; rss: 118MB	codegen passes [0]
time: 1.960; rss: 118MB	LLVM passes
time: 0.168; rss: 116MB	linking
done
