commit de78655bca47cac8e783dbb563e7e5c25c1fae40
Merge: 5c674a1 547a930
Author: bors <bors@rust-lang.org>
Date:   Wed Jul 6 20:04:11 2016 -0700

    Auto merge of #34652 - jseyfried:fix_expansion_perf, r=nrc
    
    Fix expansion performance regression
    
    **syntax-[breaking-change] cc #31645**
    
    This fixes #34630 by reverting commit 5bf7970 of PR #33943, which landed in #34424.
    
    By removing the `Rc<_>` wrapping around `Delimited` and `SequenceRepetition` in `TokenTree`, 5bf7970 made cloning `TokenTree`s more expensive. While this had no measurable performance impact on the compiler's crates, it caused an order of magnitude performance regression on some macro-heavy code in the wild. I believe this is due to clones of `TokenTree`s in `macro_parser.rs` and/or `macro_rules.rs`.
    
    r? @nrc
rustc: ./regex.0.1.30
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling regex v0.1.30 (file:///root/benchmarks/regex.0.1.30)
time: 0.067; rss: 95MB	parsing
Lines of code:             8558
Pre-expansion node count:  58076
time: 0.009; rss: 95MB	configuration
time: 0.000; rss: 95MB	recursion limit
time: 0.000; rss: 95MB	crate injection
time: 0.000; rss: 95MB	plugin loading
time: 0.000; rss: 95MB	plugin registration
time: 0.042; rss: 130MB	expansion
time: 0.000; rss: 130MB	maybe building test harness
time: 0.000; rss: 130MB	checking for inline asm in case the target doesn't support it
time: 0.001; rss: 130MB	complete gated feature checking
Post-expansion node count: 68148
time: 0.006; rss: 130MB	assigning node ids
time: 0.001; rss: 130MB	collecting defs
time: 0.001; rss: 130MB	external crate/lib resolution
time: 0.006; rss: 130MB	early lint checks
time: 0.001; rss: 130MB	AST validation
time: 0.006; rss: 132MB	name resolution
time: 0.008; rss: 141MB	lowering ast -> hir
time: 0.001; rss: 144MB	indexing hir
time: 0.001; rss: 144MB	attribute checking
time: 0.001; rss: 135MB	language item collection
time: 0.001; rss: 135MB	lifetime resolution
time: 0.000; rss: 135MB	looking for entry point
time: 0.000; rss: 135MB	looking for plugin registrar
time: 0.006; rss: 136MB	region resolution
time: 0.001; rss: 136MB	loop checking
time: 0.001; rss: 136MB	static item recursion checking
time: 0.000; rss: 137MB	load_dep_graph
time: 0.010; rss: 139MB	type collecting
time: 0.000; rss: 139MB	variance inference
time: 0.024; rss: 143MB	coherence checking
time: 0.014; rss: 144MB	wf checking
time: 0.324; rss: 152MB	item-types checking
time: 0.201; rss: 157MB	item-bodies checking
time: 0.000; rss: 157MB	drop-impl checking
time: 0.027; rss: 159MB	const checking
time: 0.004; rss: 159MB	privacy checking
time: 0.001; rss: 159MB	stability index
time: 0.002; rss: 159MB	intrinsic checking
time: 0.001; rss: 159MB	effect checking
time: 0.004; rss: 159MB	match checking
time: 0.002; rss: 159MB	liveness checking
time: 0.008; rss: 159MB	rvalue checking
time: 0.051; rss: 170MB	MIR dump
time: 0.021; rss: 170MB	MIR passes
time: 0.021; rss: 171MB	borrow checking
time: 0.000; rss: 171MB	reachability checking
time: 0.002; rss: 171MB	death checking
time: 0.002; rss: 171MB	stability checking
time: 0.000; rss: 171MB	unused lib feature checking
time: 0.027; rss: 171MB	lint checking
time: 0.000; rss: 171MB	resolving dependency formats
time: 0.019; rss: 174MB	Prepare MIR codegen passes
  time: 0.173; rss: 184MB	write metadata
  time: 0.056; rss: 186MB	translation item collection
  time: 0.001; rss: 186MB	codegen unit partitioning
time: 1.553; rss: 231MB	translation
time: 0.000; rss: 231MB	assert dep graph
time: 0.000; rss: 231MB	serialize dep graph
  time: 0.414; rss: 163MB	llvm function passes [0]
  time: 0.191; rss: 164MB	llvm module passes [0]
  time: 6.021; rss: 168MB	codegen passes [0]
  time: 0.002; rss: 168MB	codegen passes [0]
time: 7.289; rss: 168MB	LLVM passes
time: 0.066; rss: 150MB	linking
done
