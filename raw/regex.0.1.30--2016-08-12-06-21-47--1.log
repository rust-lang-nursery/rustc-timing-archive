commit f55ac6944a88d4da62b30a16cc95893ca050c328
Merge: 68d9284 23f0494
Author: bors <bors@rust-lang.org>
Date:   Fri Aug 12 01:26:12 2016 -0700

    Auto merge of #35091 - eddyb:impl-trait, r=nikomatsakis
    
    Implement `impl Trait` in return type position by anonymization.
    
    This is the first step towards implementing `impl Trait` (cc #34511).
    `impl Trait` types are only allowed in function and inherent method return types, and capture all named lifetime and type parameters, being invariant over them.
    No lifetimes that are not explicitly named lifetime parameters are allowed to escape from the function body.
    The exposed traits are only those listed explicitly, i.e. `Foo` and `Clone` in `impl Foo + Clone`, with the exception of "auto traits" (like `Send` or `Sync`) which "leak" the actual contents.
    
    The implementation strategy is anonymization, i.e.:
    ```rust
    fn foo<T>(xs: Vec<T>) -> impl Iterator<Item=impl FnOnce() -> T> {
        xs.into_iter().map(|x| || x)
    }
    
    // is represented as:
    type A</*invariant over*/ T> where A<T>: Iterator<Item=B<T>>;
    type B</*invariant over*/ T> where B<T>: FnOnce() -> T;
    fn foo<T>(xs: Vec<T>) -> A<T> {
        xs.into_iter().map(|x| || x): $0 where $0: Iterator<Item=$1>, $1: FnOnce() -> T
    }
    ```
    `$0` and `$1` are resolved (to `iter::Map<vec::Iter<T>, closure>` and the closure, respectively) and assigned to `A` and `B`, after checking the body of `foo`. `A` and `B` are *never* resolved for user-facing type equality (typeck), but always for the low-level representation and specialization (trans).
    
    The "auto traits" exception is implemented by collecting bounds like `impl Trait: Send` that have failed for the obscure `impl Trait` type (i.e. `A` or `B` above), pretending they succeeded within the function and trying them again after type-checking the whole crate, by replacing `impl Trait` with the real type.
    
    While passing around values which have explicit lifetime parameters (of the function with `-> impl Trait`) in their type *should* work, regionck appears to assign inference variables in *way* too many cases, and never properly resolving them to either explicit lifetime parameters, or `'static`.
    We might not be able to handle lifetime parameters in `impl Trait` without changes to lifetime inference, but type parameters can have arbitrary lifetimes in them from the caller, so most type-generic usecases (or not generic at all) should not run into this problem.
    
    cc @rust-lang/lang
rustc: ./regex.0.1.30
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling regex v0.1.30 (file:///root/benchmarks/regex.0.1.30)
time: 0.052; rss: 65MB	parsing
Lines of code:             8558
Pre-expansion node count:  58076
time: 0.005; rss: 65MB	configuration
time: 0.000; rss: 65MB	recursion limit
time: 0.000; rss: 65MB	crate injection
time: 0.000; rss: 65MB	plugin loading
time: 0.000; rss: 65MB	plugin registration
time: 0.029; rss: 101MB	expansion
time: 0.000; rss: 101MB	maybe building test harness
time: 0.004; rss: 101MB	assigning node ids
Post-expansion node count: 68148
time: 0.000; rss: 101MB	checking for inline asm in case the target doesn't support it
time: 0.001; rss: 101MB	complete gated feature checking
time: 0.001; rss: 102MB	collecting defs
time: 0.001; rss: 102MB	external crate/lib resolution
time: 0.003; rss: 102MB	early lint checks
time: 0.000; rss: 102MB	AST validation
time: 0.006; rss: 103MB	name resolution
time: 0.008; rss: 112MB	lowering ast -> hir
time: 0.002; rss: 114MB	indexing hir
time: 0.001; rss: 114MB	attribute checking
time: 0.001; rss: 104MB	language item collection
time: 0.001; rss: 104MB	lifetime resolution
time: 0.000; rss: 104MB	looking for entry point
time: 0.000; rss: 104MB	looking for plugin registrar
time: 0.005; rss: 109MB	region resolution
time: 0.001; rss: 109MB	loop checking
time: 0.001; rss: 109MB	static item recursion checking
time: 0.000; rss: 109MB	load_dep_graph
time: 0.008; rss: 110MB	type collecting
time: 0.000; rss: 110MB	variance inference
time: 0.025; rss: 114MB	coherence checking
time: 0.011; rss: 115MB	wf checking
time: 0.291; rss: 123MB	item-types checking
time: 0.186; rss: 128MB	item-bodies checking
time: 0.000; rss: 128MB	drop-impl checking
time: 0.026; rss: 130MB	const checking
time: 0.004; rss: 130MB	privacy checking
time: 0.001; rss: 130MB	stability index
time: 0.002; rss: 130MB	intrinsic checking
time: 0.001; rss: 130MB	effect checking
time: 0.004; rss: 130MB	match checking
time: 0.002; rss: 130MB	liveness checking
time: 0.008; rss: 130MB	rvalue checking
time: 0.051; rss: 141MB	MIR dump
time: 0.019; rss: 141MB	MIR passes
time: 0.022; rss: 141MB	borrow checking
time: 0.000; rss: 141MB	reachability checking
time: 0.003; rss: 141MB	death checking
time: 0.003; rss: 141MB	stability checking
time: 0.000; rss: 141MB	unused lib feature checking
time: 0.028; rss: 141MB	lint checking
time: 0.000; rss: 141MB	resolving dependency formats
time: 0.019; rss: 142MB	Prepare MIR codegen passes
  time: 0.186; rss: 149MB	write metadata
  time: 0.053; rss: 151MB	translation item collection
  time: 0.007; rss: 151MB	codegen unit partitioning
  time: 0.015; rss: 197MB	internalize symbols
time: 0.857; rss: 197MB	translation
time: 0.000; rss: 197MB	assert dep graph
time: 0.000; rss: 197MB	serialize dep graph
  time: 0.036; rss: 133MB	llvm function passes [0]
  time: 0.019; rss: 134MB	llvm module passes [0]
  time: 0.667; rss: 138MB	codegen passes [0]
  time: 0.001; rss: 138MB	codegen passes [0]
time: 0.781; rss: 138MB	LLVM passes
time: 0.000; rss: 138MB	serialize work products
time: 0.067; rss: 111MB	linking
done
