commit d5759a3417fa395d439f4283825504dd4f78dc87
Merge: 267cde2 cae91d7
Author: bors <bors@rust-lang.org>
Date:   Wed May 25 20:36:09 2016 -0700

    Auto merge of #33699 - alexcrichton:stabilize-1.10, r=aturon
    
    std: Stabilize APIs for the 1.10 release
    
    This commit applies the FCP decisions made by the libs team for the 1.10 cycle,
    including both new stabilizations and deprecations. Specifically, the list of
    APIs is:
    
    Stabilized:
    
    * `os::windows::fs::OpenOptionsExt::access_mode`
    * `os::windows::fs::OpenOptionsExt::share_mode`
    * `os::windows::fs::OpenOptionsExt::custom_flags`
    * `os::windows::fs::OpenOptionsExt::attributes`
    * `os::windows::fs::OpenOptionsExt::security_qos_flags`
    * `os::unix::fs::OpenOptionsExt::custom_flags`
    * `sync::Weak::new`
    * `Default for sync::Weak`
    * `panic::set_hook`
    * `panic::take_hook`
    * `panic::PanicInfo`
    * `panic::PanicInfo::payload`
    * `panic::PanicInfo::location`
    * `panic::Location`
    * `panic::Location::file`
    * `panic::Location::line`
    * `ffi::CStr::from_bytes_with_nul`
    * `ffi::CStr::from_bytes_with_nul_unchecked`
    * `ffi::FromBytesWithNulError`
    * `fs::Metadata::modified`
    * `fs::Metadata::accessed`
    * `fs::Metadata::created`
    * `sync::atomic::Atomic{Usize,Isize,Bool,Ptr}::compare_exchange`
    * `sync::atomic::Atomic{Usize,Isize,Bool,Ptr}::compare_exchange_weak`
    * `collections::{btree,hash}_map::{Occupied,Vacant,}Entry::key`
    * `os::unix::net::{UnixStream, UnixListener, UnixDatagram, SocketAddr}`
    * `SocketAddr::is_unnamed`
    * `SocketAddr::as_pathname`
    * `UnixStream::connect`
    * `UnixStream::pair`
    * `UnixStream::try_clone`
    * `UnixStream::local_addr`
    * `UnixStream::peer_addr`
    * `UnixStream::set_read_timeout`
    * `UnixStream::set_write_timeout`
    * `UnixStream::read_timeout`
    * `UnixStream::write_Timeout`
    * `UnixStream::set_nonblocking`
    * `UnixStream::take_error`
    * `UnixStream::shutdown`
    * Read/Write/RawFd impls for `UnixStream`
    * `UnixListener::bind`
    * `UnixListener::accept`
    * `UnixListener::try_clone`
    * `UnixListener::local_addr`
    * `UnixListener::set_nonblocking`
    * `UnixListener::take_error`
    * `UnixListener::incoming`
    * RawFd impls for `UnixListener`
    * `UnixDatagram::bind`
    * `UnixDatagram::unbound`
    * `UnixDatagram::pair`
    * `UnixDatagram::connect`
    * `UnixDatagram::try_clone`
    * `UnixDatagram::local_addr`
    * `UnixDatagram::peer_addr`
    * `UnixDatagram::recv_from`
    * `UnixDatagram::recv`
    * `UnixDatagram::send_to`
    * `UnixDatagram::send`
    * `UnixDatagram::set_read_timeout`
    * `UnixDatagram::set_write_timeout`
    * `UnixDatagram::read_timeout`
    * `UnixDatagram::write_timeout`
    * `UnixDatagram::set_nonblocking`
    * `UnixDatagram::take_error`
    * `UnixDatagram::shutdown`
    * RawFd impls for `UnixDatagram`
    * `{BTree,Hash}Map::values_mut`
    * `<[_]>::binary_search_by_key`
    
    Deprecated:
    
    * `StaticCondvar` - this, and all other static synchronization primitives
                        below, are usable today through the lazy-static crate on
                        stable Rust today. Additionally, we'd like the non-static
                        versions to be directly usable in a static context one day,
                        so they're unlikely to be the final forms of the APIs in any
                        case.
    * `CONDVAR_INIT`
    * `StaticMutex`
    * `MUTEX_INIT`
    * `StaticRwLock`
    * `RWLOCK_INIT`
    * `iter::Peekable::is_empty`
    
    Closes #27717
    Closes #27720
    Closes #30014
    Closes #30425
    Closes #30449
    Closes #31190
    Closes #31399
    Closes #31767
    Closes #32111
    Closes #32281
    Closes #32312
    Closes #32551
    Closes #33018
rustc: ./rust-encoding.0.2.32
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling encoding v0.2.32 (file:///root/benchmarks/rust-encoding.0.2.32)
time: 0.024; rss: 50MB	parsing
Lines of code:             6441
Pre-expansion node count:  30537
time: 0.006; rss: 56MB	configuration 1
time: 0.000; rss: 56MB	recursion limit
time: 0.000; rss: 56MB	crate injection
time: 0.018; rss: 88MB	macro loading
time: 0.000; rss: 88MB	plugin loading
time: 0.000; rss: 88MB	plugin registration
time: 0.044; rss: 92MB	expansion
time: 0.006; rss: 92MB	configuration 2
time: 0.000; rss: 92MB	gated configuration checking
time: 0.003; rss: 92MB	maybe building test harness
time: 0.003; rss: 92MB	prelude injection
time: 0.000; rss: 92MB	checking that all macro invocations are gone
time: 0.000; rss: 92MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 92MB	complete gated feature checking
Post-expansion node count: 41376
time: 0.003; rss: 92MB	assigning node ids
time: 0.001; rss: 92MB	collecting defs
time: 0.001; rss: 92MB	external crate/lib resolution
time: 0.002; rss: 92MB	early lint checks
time: 0.007; rss: 94MB	name resolution
time: 0.005; rss: 96MB	lowering ast -> hir
time: 0.000; rss: 96MB	indexing hir
time: 0.000; rss: 96MB	attribute checking
time: 0.000; rss: 95MB	language item collection
time: 0.000; rss: 95MB	lifetime resolution
time: 0.000; rss: 95MB	looking for entry point
time: 0.000; rss: 95MB	looking for plugin registrar
time: 0.002; rss: 97MB	region resolution
time: 0.000; rss: 97MB	loop checking
time: 0.000; rss: 97MB	static item recursion checking
time: 0.000; rss: 97MB	load_dep_graph
time: 0.005; rss: 100MB	type collecting
time: 0.000; rss: 100MB	variance inference
time: 0.021; rss: 103MB	coherence checking
time: 0.022; rss: 103MB	wf checking
time: 0.014; rss: 103MB	item-types checking
time: 0.213; rss: 110MB	item-bodies checking
time: 0.000; rss: 110MB	drop-impl checking
time: 0.013; rss: 110MB	const checking
time: 0.002; rss: 110MB	privacy checking
time: 0.000; rss: 110MB	stability index
time: 0.002; rss: 110MB	intrinsic checking
time: 0.000; rss: 110MB	effect checking
time: 0.007; rss: 110MB	match checking
time: 0.002; rss: 110MB	liveness checking
time: 0.007; rss: 110MB	rvalue checking
time: 0.023; rss: 116MB	MIR dump
time: 0.014; rss: 116MB	MIR passes
time: 0.024; rss: 116MB	borrow checking
time: 0.000; rss: 116MB	reachability checking
time: 0.002; rss: 116MB	death checking
time: 0.002; rss: 116MB	stability checking
time: 0.000; rss: 116MB	unused lib feature checking
time: 0.024; rss: 116MB	lint checking
time: 0.000; rss: 116MB	resolving dependency formats
time: 0.004; rss: 116MB	Prepare MIR codegen passes
  time: 0.058; rss: 118MB	write metadata
  time: 0.029; rss: 120MB	translation item collection
  time: 0.001; rss: 120MB	codegen unit partitioning
time: 0.364; rss: 149MB	translation
time: 0.000; rss: 149MB	assert dep graph
time: 0.000; rss: 149MB	serialize dep graph
  time: 0.026; rss: 119MB	llvm function passes [0]
  time: 0.050; rss: 123MB	llvm module passes [0]
  time: 0.582; rss: 126MB	codegen passes [0]
  time: 0.001; rss: 111MB	codegen passes [0]
time: 0.726; rss: 110MB	LLVM passes
time: 0.054; rss: 109MB	linking
done
