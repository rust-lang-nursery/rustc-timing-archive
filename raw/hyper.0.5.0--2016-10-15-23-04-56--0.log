commit 98a3502da1456b209ff031604cabbbcb9d0eddf1
Merge: 5bfe107 a61d85b
Author: bors <bors@rust-lang.org>
Date:   Sat Oct 15 15:38:52 2016 -0700

    Auto merge of #37152 - arielb1:drop-cache, r=pnkfelix
    
    add a per-param-env cache to `impls_bound`
    
    There used to be only a global cache, which led to uncached calls to
    trait selection when there were type parameters.
    
    This causes a 20% decrease in borrow-checking time and an overall 0.5% performance increase during bootstrapping (as borrow-checking tends to be a tiny part of compilation time).
    
    Fixes #37106 (drop elaboration times are now ~half of borrow checking,
    so might still be worthy of optimization, but not critical).
    
    r? @pnkfelix
rustc: ./hyper.0.5.0
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling httparse v0.1.6
   Compiling pkg-config v0.3.8
   Compiling unicase v0.1.0
   Compiling matches v0.1.2
   Compiling libc v0.1.12
   Compiling log v0.3.6
   Compiling winapi v0.2.8
   Compiling traitobject v0.0.1
   Compiling typeable v0.1.2
   Compiling lazy_static v0.1.16
   Compiling winapi-build v0.1.1
   Compiling libc v0.2.16
   Compiling bitflags v0.3.3
   Compiling rustc-serialize v0.3.19
   Compiling gcc v0.3.35
   Compiling mime v0.0.11
   Compiling kernel32-sys v0.2.2
   Compiling num_cpus v0.2.13
   Compiling rand v0.3.14
   Compiling time v0.1.35
   Compiling openssl-sys v0.6.7
   Compiling openssl v0.6.7
   Compiling uuid v0.1.18
   Compiling url v0.2.38
   Compiling cookie v0.1.21
   Compiling hyper v0.5.0 (file:///root/benchmarks/hyper.0.5.0)
time: 0.034; rss: 43MB	parsing
Lines of code:             9003
Pre-expansion node count:  44129
time: 0.000; rss: 44MB	recursion limit
time: 0.000; rss: 44MB	crate injection
time: 0.000; rss: 44MB	plugin loading
time: 0.000; rss: 44MB	plugin registration
time: 0.116; rss: 80MB	expansion
time: 0.000; rss: 80MB	maybe building test harness
time: 0.001; rss: 80MB	maybe creating a macro crate
Post-expansion node count: 101371
time: 0.000; rss: 80MB	checking for inline asm in case the target doesn't support it
time: 0.002; rss: 80MB	complete gated feature checking
time: 0.003; rss: 80MB	early lint checks
time: 0.001; rss: 80MB	AST validation
time: 0.022; rss: 84MB	name resolution
time: 0.019; rss: 90MB	lowering ast -> hir
time: 0.001; rss: 91MB	indexing hir
time: 0.001; rss: 91MB	attribute checking
time: 0.001; rss: 84MB	language item collection
time: 0.002; rss: 84MB	lifetime resolution
time: 0.000; rss: 84MB	looking for entry point
time: 0.000; rss: 84MB	looking for plugin registrar
time: 0.011; rss: 87MB	region resolution
time: 0.001; rss: 87MB	loop checking
time: 0.001; rss: 87MB	static item recursion checking
time: 0.039; rss: 88MB	compute_incremental_hashes_map
time: 0.000; rss: 88MB	load_dep_graph
time: 0.017; rss: 90MB	type collecting
time: 0.000; rss: 90MB	variance inference
time: 0.036; rss: 93MB	coherence checking
time: 0.053; rss: 94MB	wf checking
time: 0.021; rss: 95MB	item-types checking
time: 0.376; rss: 105MB	item-bodies checking
time: 0.000; rss: 105MB	drop-impl checking
time: 0.033; rss: 105MB	const checking
time: 0.008; rss: 105MB	privacy checking
time: 0.001; rss: 105MB	stability index
time: 0.004; rss: 105MB	intrinsic checking
time: 0.002; rss: 105MB	effect checking
time: 0.010; rss: 105MB	match checking
time: 0.005; rss: 106MB	liveness checking
time: 0.023; rss: 106MB	rvalue checking
time: 0.079; rss: 124MB	MIR dump
  time: 0.007; rss: 124MB	SimplifyCfg
  time: 0.012; rss: 124MB	QualifyAndPromoteConstants
  time: 0.014; rss: 124MB	TypeckMir
  time: 0.001; rss: 124MB	SimplifyBranches
  time: 0.003; rss: 124MB	SimplifyCfg
time: 0.037; rss: 124MB	MIR passes
time: 0.059; rss: 125MB	borrow checking
time: 0.003; rss: 125MB	reachability checking
time: 0.006; rss: 125MB	death checking
time: 0.009; rss: 125MB	stability checking
time: 0.000; rss: 125MB	unused lib feature checking
time: 0.046; rss: 127MB	lint checking
time: 0.000; rss: 127MB	resolving dependency formats
  time: 0.001; rss: 127MB	NoLandingPads
  time: 0.003; rss: 127MB	SimplifyCfg
  time: 0.009; rss: 127MB	EraseRegions
  time: 0.001; rss: 127MB	AddCallGuards
  time: 0.023; rss: 129MB	ElaborateDrops
  time: 0.001; rss: 129MB	NoLandingPads
  time: 0.005; rss: 129MB	SimplifyCfg
  time: 0.003; rss: 129MB	InstCombine
  time: 0.003; rss: 129MB	Deaggregator
  time: 0.001; rss: 129MB	CopyPropagation
  time: 0.001; rss: 129MB	AddCallGuards
  time: 0.000; rss: 129MB	PreTrans
time: 0.052; rss: 129MB	Prepare MIR codegen passes
  time: 0.048; rss: 132MB	write metadata
  time: 0.151; rss: 139MB	translation item collection
  time: 0.017; rss: 142MB	codegen unit partitioning
  time: 0.016; rss: 196MB	internalize symbols
time: 1.237; rss: 184MB	translation
time: 0.000; rss: 184MB	assert dep graph
time: 0.000; rss: 184MB	serialize dep graph
  time: 0.089; rss: 142MB	llvm function passes [0]
  time: 0.041; rss: 144MB	llvm module passes [0]
  time: 1.613; rss: 146MB	codegen passes [0]
  time: 0.001; rss: 146MB	codegen passes [0]
time: 1.916; rss: 146MB	LLVM passes
time: 0.000; rss: 146MB	serialize work products
time: 0.140; rss: 89MB	linking
done
