commit b3583193531c124e36aa1813cf5f8b8e667d016c
Merge: 1a26d23 04baf25
Author: bors <bors@rust-lang.org>
Date:   Sun May 15 05:26:50 2016 -0700

    Auto merge of #33612 - royalstream:royalstream-enc-enum-ptr, r=michaelwoerister
    
    gdb Pretty Print: generic encoded was failing on reference/pointer types
    
    If you debug this program using **gdb**
    ```rust
    fn main() {
        let x = 10;
        let y = Some(&x);
        // additional code
    }
    ```
    And you try to print **y**'s value from the debugger, you get the following:
    ```
    (gdb) print y
    Python Exception <class 'gdb.error'> Cannot convert value to int.:
    $1 = {RUST$ENCODED$ENUM$0$None = Some = {0x7fff5fbff97c}}
    ```
    What happens is that inside **debugger_pretty_printers_common.py** the method `is_null_variant` doesn't have any special handling for pointer values so it ends up calling `.as_integer()` on `discriminant_val` (which holds a pointer) and fails.
    
    Considering it needs to handle pointers and return _true_ when the pointer is _null_, I modified the `.as_integer()` method in **gdb_rust_pretty_printing.py** to take pointers into consideration.
    
    After this modification **gdb** prints **y** like this:
    ```
    (gdb) print y
    $1 = Some = {0x7fff5fbff97c}
    ```
    Now, it would be nice to print something useful (instead of a pointer address) but the pretty printer doesn't currently handle references/pointers so that's a completely different subject.
rustc: ./hyper.0.5.0
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling hyper v0.5.0 (file:///root/benchmarks/hyper.0.5.0)
time: 0.047; rss: 51MB	parsing
Lines of code:             9154
Pre-expansion node count:  45594
time: 0.009; rss: 52MB	configuration 1
time: 0.000; rss: 52MB	recursion limit
time: 0.000; rss: 52MB	crate injection
time: 0.005; rss: 57MB	macro loading
time: 0.000; rss: 57MB	plugin loading
time: 0.000; rss: 57MB	plugin registration
time: 0.206; rss: 66MB	expansion
time: 0.029; rss: 66MB	configuration 2
time: 0.000; rss: 66MB	gated configuration checking
time: 0.011; rss: 66MB	maybe building test harness
time: 0.008; rss: 66MB	prelude injection
time: 0.001; rss: 66MB	checking that all macro invocations are gone
time: 0.000; rss: 66MB	checking for inline asm in case the target doesn't support it
time: 0.002; rss: 66MB	complete gated feature checking
Post-expansion node count: 102890
time: 0.009; rss: 66MB	assigning node ids
time: 0.005; rss: 68MB	collecting defs
time: 0.005; rss: 70MB	external crate/lib resolution
time: 0.006; rss: 70MB	early lint checks
time: 0.027; rss: 86MB	name resolution
time: 0.016; rss: 94MB	lowering ast -> hir
time: 0.005; rss: 95MB	indexing hir
time: 0.001; rss: 95MB	attribute checking
time: 0.001; rss: 87MB	language item collection
time: 0.002; rss: 87MB	lifetime resolution
time: 0.000; rss: 87MB	looking for entry point
time: 0.000; rss: 87MB	looking for plugin registrar
time: 0.013; rss: 90MB	region resolution
time: 0.001; rss: 90MB	loop checking
time: 0.001; rss: 90MB	static item recursion checking
time: 0.000; rss: 90MB	load_dep_graph
time: 0.018; rss: 100MB	type collecting
time: 0.000; rss: 100MB	variance inference
time: 0.048; rss: 115MB	coherence checking
time: 0.095; rss: 116MB	wf checking
time: 0.038; rss: 116MB	item-types checking
time: 0.546; rss: 126MB	item-bodies checking
time: 0.000; rss: 126MB	drop-impl checking
time: 0.049; rss: 127MB	const checking
time: 0.009; rss: 127MB	privacy checking
time: 0.001; rss: 127MB	stability index
time: 0.006; rss: 127MB	intrinsic checking
time: 0.002; rss: 127MB	effect checking
time: 0.015; rss: 128MB	match checking
time: 0.005; rss: 128MB	liveness checking
time: 0.031; rss: 128MB	rvalue checking
time: 0.075; rss: 136MB	MIR dump
time: 0.041; rss: 137MB	MIR passes
time: 0.073; rss: 137MB	borrow checking
time: 0.003; rss: 137MB	reachability checking
time: 0.006; rss: 137MB	death checking
time: 0.006; rss: 137MB	stability checking
time: 0.000; rss: 137MB	unused lib feature checking
time: 0.052; rss: 137MB	lint checking
time: 0.000; rss: 137MB	resolving dependency formats
time: 0.012; rss: 138MB	Prepare MIR codegen passes
  time: 0.237; rss: 147MB	translation item collection
  time: 0.012; rss: 148MB	codegen unit partitioning
  time: 0.135; rss: 270MB	write metadata
time: 1.891; rss: 270MB	translation
time: 0.001; rss: 270MB	assert dep graph
time: 0.000; rss: 270MB	serialize dep graph
  time: 0.098; rss: 163MB	llvm function passes [0]
  time: 0.050; rss: 167MB	llvm module passes [0]
  time: 1.638; rss: 171MB	codegen passes [0]
  time: 0.001; rss: 122MB	codegen passes [0]
time: 1.994; rss: 122MB	LLVM passes
time: 0.177; rss: 120MB	linking
done
