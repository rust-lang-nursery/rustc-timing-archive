commit 3a5d975fdcef451375df20e5ac234bb01e453e33
Merge: 4c04e36 3863834
Author: bors <bors@rust-lang.org>
Date:   Thu Sep 22 16:33:41 2016 -0700

    Auto merge of #36154 - nrc:proc-macro-init, r=@jseyfried
    
    Adds a `ProcMacro` form of syntax extension
    
    This commit adds syntax extension forms matching the types for procedural macros 2.0 (RFC #1566), these still require the usual syntax extension boiler plate, but this is a first step towards proper implementation and should be useful for macros 1.1 stuff too.
    
    Supports both attribute-like and function-like macros.
    
    Note that RFC #1566 has not been accepted yet, but I think there is consensus that we want to head in vaguely that direction and so this PR will be useful in any case. It is also fairly easy to undo and does not break any existing programs.
    
    This is related to #35957 in that I hope it can be used in the implementation of macros 1.1, however, there is no direct overlap and is more of a complement than a competing proposal. There is still a fair bit of work to do before the two can be combined.
    
    r? @jseyfried
    
    cc @alexcrichton, @cgswords, @eddyb, @aturon
rustc: ./html5ever-2016-08-25
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling mac v0.0.2
   Compiling encoding_index_tests v0.1.4
   Compiling void v1.0.2
   Compiling serde v0.8.9
   Compiling rustc-serialize v0.3.19
   Compiling lazy_static v0.2.1
   Compiling matches v0.1.2
   Compiling libc v0.2.16
   Compiling encoding-index-tradchinese v1.20141219.5
   Compiling encoding-index-singlebyte v1.20141219.5
   Compiling encoding-index-korean v1.20141219.5
   Compiling unreachable v0.1.1
   Compiling encoding-index-simpchinese v1.20141219.5
   Compiling debug_unreachable v0.1.1
   Compiling futf v0.1.2
   Compiling encoding-index-japanese v1.20141219.5
   Compiling phf_shared v0.7.16
   Compiling utf-8 v0.6.0
   Compiling log v0.3.6
   Compiling phf v0.7.16
   Compiling rand v0.3.14
   Compiling encoding v0.2.33
   Compiling phf_generator v0.7.16
   Compiling phf_codegen v0.7.16
   Compiling string_cache v0.2.29
   Compiling tendril v0.2.3
   Compiling html5ever v0.5.4 (file:///root/benchmarks/html5ever-2016-08-25)
time: 0.029; rss: 53MB	parsing
Lines of code:             8210
Pre-expansion node count:  52238
time: 0.000; rss: 53MB	recursion limit
time: 0.000; rss: 53MB	crate injection
time: 0.000; rss: 53MB	plugin loading
time: 0.000; rss: 53MB	plugin registration
time: 1.209; rss: 100MB	expansion
time: 0.000; rss: 100MB	maybe building test harness
time: 0.002; rss: 100MB	maybe creating a macro crate
time: 0.008; rss: 100MB	assigning node ids
Post-expansion node count: 164262
time: 0.000; rss: 100MB	checking for inline asm in case the target doesn't support it
time: 0.003; rss: 100MB	complete gated feature checking
time: 0.005; rss: 101MB	collecting defs
time: 0.006; rss: 104MB	external crate/lib resolution
time: 0.009; rss: 104MB	early lint checks
time: 0.002; rss: 104MB	AST validation
time: 0.020; rss: 107MB	name resolution
time: 0.017; rss: 125MB	lowering ast -> hir
time: 0.004; rss: 129MB	indexing hir
time: 0.002; rss: 129MB	attribute checking
time: 0.002; rss: 110MB	language item collection
time: 0.003; rss: 110MB	lifetime resolution
time: 0.000; rss: 110MB	looking for entry point
time: 0.000; rss: 110MB	looking for plugin registrar
time: 0.016; rss: 117MB	region resolution
time: 0.002; rss: 117MB	loop checking
time: 0.003; rss: 117MB	static item recursion checking
time: 0.024; rss: 117MB	compute_incremental_hashes_map
time: 0.000; rss: 117MB	load_dep_graph
time: 0.015; rss: 117MB	type collecting
time: 0.000; rss: 117MB	variance inference
time: 0.027; rss: 120MB	coherence checking
time: 0.027; rss: 121MB	wf checking
time: 0.369; rss: 130MB	item-types checking
time: 0.588; rss: 144MB	item-bodies checking
time: 0.000; rss: 144MB	drop-impl checking
time: 0.078; rss: 146MB	const checking
time: 0.009; rss: 146MB	privacy checking
time: 0.002; rss: 146MB	stability index
time: 0.005; rss: 146MB	intrinsic checking
time: 0.003; rss: 146MB	effect checking
time: 0.028; rss: 146MB	match checking
time: 0.014; rss: 139MB	liveness checking
time: 0.032; rss: 139MB	rvalue checking
time: 0.123; rss: 182MB	MIR dump
  time: 0.009; rss: 182MB	SimplifyCfg
  time: 0.015; rss: 182MB	QualifyAndPromoteConstants
  time: 0.026; rss: 182MB	TypeckMir
  time: 0.000; rss: 182MB	SimplifyBranches
  time: 0.005; rss: 182MB	SimplifyCfg
time: 0.055; rss: 182MB	MIR passes
time: 0.096; rss: 189MB	borrow checking
time: 0.003; rss: 189MB	reachability checking
time: 0.008; rss: 189MB	death checking
time: 0.008; rss: 189MB	stability checking
time: 0.000; rss: 189MB	unused lib feature checking
time: 0.068; rss: 189MB	lint checking
time: 0.000; rss: 189MB	resolving dependency formats
  time: 0.000; rss: 189MB	NoLandingPads
  time: 0.004; rss: 189MB	SimplifyCfg
  time: 0.010; rss: 189MB	EraseRegions
  time: 0.001; rss: 189MB	AddCallGuards
  time: 0.082; rss: 193MB	ElaborateDrops
  time: 0.000; rss: 193MB	NoLandingPads
  time: 0.007; rss: 191MB	SimplifyCfg
  time: 0.001; rss: 191MB	Deaggregator
  time: 0.001; rss: 191MB	AddCallGuards
  time: 0.000; rss: 191MB	PreTrans
time: 0.107; rss: 191MB	Prepare MIR codegen passes
  time: 0.060; rss: 191MB	write metadata
  time: 0.043; rss: 193MB	translation item collection
  time: 0.005; rss: 193MB	codegen unit partitioning
  time: 0.011; rss: 211MB	internalize symbols
time: 0.430; rss: 184MB	translation
time: 0.000; rss: 184MB	assert dep graph
time: 0.000; rss: 184MB	serialize dep graph
  time: 0.023; rss: 115MB	llvm function passes [0]
  time: 0.013; rss: 115MB	llvm module passes [0]
  time: 0.529; rss: 117MB	codegen passes [0]
  time: 0.001; rss: 117MB	codegen passes [0]
time: 0.610; rss: 117MB	LLVM passes
time: 0.000; rss: 117MB	serialize work products
time: 0.060; rss: 97MB	linking
done
