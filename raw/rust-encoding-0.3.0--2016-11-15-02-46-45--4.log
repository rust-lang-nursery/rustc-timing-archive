commit 0ed951993fb5721a303ca5fa743543dd9f3f6b10
Merge: bd6a54d 7cd8a49
Author: bors <bors@rust-lang.org>
Date:   Mon Nov 14 18:12:26 2016 -0800

    Auto merge of #37775 - alexcrichton:try-fix-dox, r=brson
    
    rustbuild: Tweak default rule inclusion
    
    If a rule is flagged with `default(true)` then the pseudo-rule `default:foo`
    will include that. If a rule is also flagged with `.host(true)`, however, then
    the rule shouldn't be included for targets that aren't in the host array. This
    adds a filter to ensure we don't pull in host rules for targets by accident.
rustc: ./rust-encoding-0.3.0
cargo rustc  -- -Ztime-passes -Zinput-stats
   Compiling encoding v0.3.0-dev (file:///root/benchmarks/rust-encoding-0.3.0)
time: 0.022; rss: 40MB	parsing
Lines of code:             5757
Pre-expansion node count:  26523
time: 0.000; rss: 40MB	recursion limit
time: 0.000; rss: 40MB	crate injection
time: 0.000; rss: 40MB	plugin loading
time: 0.000; rss: 40MB	plugin registration
time: 0.041; rss: 67MB	expansion
time: 0.000; rss: 67MB	maybe building test harness
time: 0.000; rss: 67MB	maybe creating a macro crate
Post-expansion node count: 37888
time: 0.000; rss: 67MB	checking for inline asm in case the target doesn't support it
time: 0.001; rss: 67MB	complete gated feature checking
time: 0.001; rss: 67MB	early lint checks
time: 0.000; rss: 67MB	AST validation
time: 0.005; rss: 68MB	name resolution
time: 0.006; rss: 69MB	lowering ast -> hir
time: 0.001; rss: 70MB	indexing hir
time: 0.000; rss: 70MB	attribute checking
time: 0.000; rss: 69MB	language item collection
time: 0.001; rss: 69MB	lifetime resolution
time: 0.000; rss: 69MB	looking for entry point
time: 0.000; rss: 69MB	looking for plugin registrar
time: 0.005; rss: 70MB	region resolution
time: 0.000; rss: 70MB	loop checking
time: 0.000; rss: 70MB	static item recursion checking
time: 0.013; rss: 71MB	compute_incremental_hashes_map
time: 0.000; rss: 71MB	load_dep_graph
time: 0.008; rss: 72MB	type collecting
time: 0.000; rss: 72MB	variance inference
time: 0.008; rss: 73MB	coherence checking
time: 0.010; rss: 74MB	wf checking
time: 0.010; rss: 74MB	item-types checking
time: 0.116; rss: 78MB	item-bodies checking
time: 0.000; rss: 78MB	drop-impl checking
time: 0.008; rss: 78MB	const checking
time: 0.002; rss: 78MB	privacy checking
time: 0.000; rss: 78MB	stability index
time: 0.001; rss: 78MB	intrinsic checking
time: 0.000; rss: 78MB	effect checking
time: 0.004; rss: 78MB	match checking
time: 0.001; rss: 78MB	liveness checking
time: 0.005; rss: 78MB	rvalue checking
time: 0.028; rss: 86MB	MIR dump
  time: 0.003; rss: 86MB	SimplifyCfg
  time: 0.004; rss: 86MB	QualifyAndPromoteConstants
  time: 0.004; rss: 86MB	TypeckMir
  time: 0.000; rss: 86MB	SimplifyBranches
  time: 0.001; rss: 86MB	SimplifyCfg
time: 0.012; rss: 86MB	MIR cleanup and validation
time: 0.018; rss: 87MB	borrow checking
time: 0.000; rss: 87MB	reachability checking
time: 0.001; rss: 87MB	death checking
time: 0.004; rss: 87MB	stability checking
time: 0.000; rss: 87MB	unused lib feature checking
time: 0.013; rss: 87MB	lint checking
time: 0.000; rss: 87MB	resolving dependency formats
  time: 0.000; rss: 87MB	NoLandingPads
  time: 0.001; rss: 87MB	SimplifyCfg
  time: 0.003; rss: 87MB	EraseRegions
  time: 0.000; rss: 87MB	AddCallGuards
  time: 0.023; rss: 88MB	ElaborateDrops
  time: 0.000; rss: 88MB	NoLandingPads
  time: 0.002; rss: 88MB	SimplifyCfg
  time: 0.001; rss: 88MB	InstCombine
  time: 0.001; rss: 88MB	Deaggregator
  time: 0.000; rss: 88MB	CopyPropagation
  time: 0.001; rss: 88MB	SimplifyLocals
  time: 0.000; rss: 88MB	AddCallGuards
  time: 0.000; rss: 88MB	PreTrans
time: 0.033; rss: 88MB	MIR optimisations
  time: 0.004; rss: 89MB	write metadata
  time: 0.262; rss: 168MB	translation item collection
  time: 0.003; rss: 168MB	codegen unit partitioning
  time: 0.003; rss: 190MB	internalize symbols
time: 0.554; rss: 190MB	translation
time: 0.000; rss: 190MB	assert dep graph
time: 0.000; rss: 190MB	serialize dep graph
  time: 0.026; rss: 104MB	llvm function passes [0]
  time: 0.057; rss: 110MB	llvm module passes [0]
  time: 0.629; rss: 117MB	codegen passes [0]
  time: 0.000; rss: 117MB	codegen passes [0]
time: 0.767; rss: 117MB	LLVM passes
time: 0.000; rss: 117MB	serialize work products
time: 0.039; rss: 88MB	linking
done
