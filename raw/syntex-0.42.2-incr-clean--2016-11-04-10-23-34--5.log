commit d2bc30b03fa4bf5425d080710f681f36f58f1706
Merge: 49c36bf 99234bb
Author: bors <bors@rust-lang.org>
Date:   Fri Nov 4 03:38:18 2016 -0700

    Auto merge of #37037 - Mark-Simulacrum:stack-error, r=alexcrichton
    
    Add conversions from `io:ErrorKind` to `io::Error`
    
    Filing to help with discussion around the possibility of doing this.
    
    Current changes are clearly backwards incompatible, but I think adding a new function (with a bikeshed on naming) like `Error::new_str` should be possible (or some other way of specializing the string error message case) to fix #36658.
rustc: ./syntex-0.42.2-incr-clean
RUSTFLAGS="-Z incremental=incr" \
    cargo rustc -p syntex_syntax -- -Ztime-passes -Zinput-stats -Z incremental-info
   Compiling syntex_syntax v0.42.0
time: 0.110; rss: 75MB	parsing
Lines of code:             33687
Pre-expansion node count:  224033
time: 0.000; rss: 75MB	recursion limit
time: 0.000; rss: 75MB	crate injection
time: 0.000; rss: 75MB	plugin loading
time: 0.000; rss: 75MB	plugin registration
time: 0.260; rss: 146MB	expansion
time: 0.000; rss: 146MB	maybe building test harness
time: 0.006; rss: 146MB	maybe creating a macro crate
Post-expansion node count: 641571
time: 0.000; rss: 146MB	checking for inline asm in case the target doesn't support it
time: 0.013; rss: 146MB	complete gated feature checking
time: 0.024; rss: 146MB	early lint checks
time: 0.007; rss: 146MB	AST validation
time: 0.085; rss: 161MB	name resolution
time: 0.046; rss: 190MB	lowering ast -> hir
time: 0.008; rss: 200MB	indexing hir
time: 0.006; rss: 200MB	attribute checking
time: 0.005; rss: 150MB	language item collection
time: 0.010; rss: 150MB	lifetime resolution
time: 0.000; rss: 150MB	looking for entry point
time: 0.000; rss: 150MB	looking for plugin registrar
time: 0.044; rss: 161MB	region resolution
time: 0.005; rss: 161MB	loop checking
time: 0.005; rss: 161MB	static item recursion checking
time: 0.529; rss: 162MB	compute_incremental_hashes_map
time: 0.000; rss: 162MB	load_dep_graph
time: 0.041; rss: 167MB	type collecting
time: 0.001; rss: 167MB	variance inference
time: 0.034; rss: 171MB	coherence checking
time: 0.094; rss: 172MB	wf checking
time: 0.179; rss: 179MB	item-types checking
time: 3.632; rss: 230MB	item-bodies checking
time: 0.000; rss: 230MB	drop-impl checking
time: 0.243; rss: 233MB	const checking
time: 0.049; rss: 233MB	privacy checking
time: 0.006; rss: 233MB	stability index
time: 0.020; rss: 233MB	intrinsic checking
time: 0.017; rss: 233MB	effect checking
time: 0.050; rss: 234MB	match checking
time: 0.053; rss: 225MB	liveness checking
time: 0.208; rss: 225MB	rvalue checking
time: 0.407; rss: 415MB	MIR dump
  time: 0.056; rss: 418MB	SimplifyCfg
  time: 0.076; rss: 418MB	QualifyAndPromoteConstants
  time: 0.107; rss: 418MB	TypeckMir
  time: 0.004; rss: 418MB	SimplifyBranches
  time: 0.031; rss: 418MB	SimplifyCfg
time: 0.274; rss: 418MB	MIR cleanup and validation
time: 0.538; rss: 419MB	borrow checking
time: 0.017; rss: 419MB	reachability checking
time: 0.041; rss: 419MB	death checking
time: 0.039; rss: 419MB	stability checking
time: 0.000; rss: 419MB	unused lib feature checking
time: 0.207; rss: 419MB	lint checking
time: 0.000; rss: 419MB	resolving dependency formats
  time: 0.003; rss: 419MB	NoLandingPads
  time: 0.026; rss: 419MB	SimplifyCfg
  time: 0.069; rss: 429MB	EraseRegions
  time: 0.011; rss: 429MB	AddCallGuards
  time: 0.278; rss: 450MB	ElaborateDrops
  time: 0.003; rss: 450MB	NoLandingPads
  time: 0.054; rss: 449MB	SimplifyCfg
  time: 0.031; rss: 448MB	InstCombine
  time: 0.012; rss: 448MB	Deaggregator
  time: 0.002; rss: 448MB	CopyPropagation
  time: 0.036; rss: 448MB	SimplifyLocals
  time: 0.010; rss: 448MB	AddCallGuards
  time: 0.003; rss: 448MB	PreTrans
time: 0.538; rss: 448MB	MIR optimisations
  time: 0.061; rss: 455MB	write metadata
  time: 0.397; rss: 466MB	translation item collection
  time: 0.055; rss: 473MB	codegen unit partitioning
  time: 0.047; rss: 717MB	internalize symbols
time: 4.793; rss: 717MB	translation
time: 0.000; rss: 717MB	assert dep graph
time: 0.000; rss: 717MB	serialize dep graph
incremental: re-using 0 out of 1 modules
  time: 0.514; rss: 411MB	llvm function passes [0]
  time: 0.255; rss: 419MB	llvm module passes [0]
  time: 10.069; rss: 419MB	codegen passes [0]
  time: 0.000; rss: 419MB	codegen passes [0]
time: 11.589; rss: 419MB	LLVM passes
time: 0.000; rss: 419MB	serialize work products
time: 0.330; rss: 104MB	linking
done
