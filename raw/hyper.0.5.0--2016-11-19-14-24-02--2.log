commit b1da18fe9be180ecfcfb1691c4eb669c496996f5
Merge: fb025b4 f324037
Author: bors <bors@rust-lang.org>
Date:   Sat Nov 19 08:08:26 2016 -0800

    Auto merge of #37822 - cuviper:llvm-link-shared, r=alexcrichton
    
    rustbuild: allow dynamically linking LLVM
    
    The makefiles and `mklldeps.py` called `llvm-config --shared-mode` to
    find out if LLVM defaulted to shared or static libraries, and just went
    with that.  But under rustbuild, `librustc_llvm/build.rs` was assuming
    that LLVM should be static, and even forcing `--link-static` for 3.9+.
    
    Now that build script also uses `--shared-mode` to learn the default,
    which should work better for pre-3.9 configured for dynamic linking, as
    it wasn't possible back then to choose differently via `llvm-config`.
    
    Further, the configure script now has a new `--enable-llvm-link-shared`
    option, which allows one to manually override `--link-shared` on 3.9+
    instead of forcing static.
    
    Update: There are now four static/shared scenarios that can happen
    for the supported LLVM versions:
    
    - 3.9+: By default use `llvm-config --link-static`
    - 3.9+ and `--enable-llvm-link-shared`: Use `--link-shared` instead.
    - 3.8: Use `llvm-config --shared-mode` and go with its answer.
    - 3.7: Just assume static, maintaining the status quo.
rustc: ./hyper.0.5.0
cargo rustc  -- -Ztime-passes -Zinput-stats
   Compiling hyper v0.5.0 (file:///root/benchmarks/hyper.0.5.0)
time: 0.034; rss: 43MB	parsing
Lines of code:             9003
Pre-expansion node count:  44055
time: 0.000; rss: 43MB	recursion limit
time: 0.000; rss: 43MB	crate injection
time: 0.000; rss: 43MB	plugin loading
time: 0.000; rss: 43MB	plugin registration
time: 0.097; rss: 82MB	expansion
time: 0.000; rss: 82MB	maybe building test harness
time: 0.001; rss: 82MB	maybe creating a macro crate
Post-expansion node count: 101769
time: 0.000; rss: 82MB	checking for inline asm in case the target doesn't support it
time: 0.002; rss: 82MB	complete gated feature checking
time: 0.003; rss: 82MB	early lint checks
time: 0.001; rss: 82MB	AST validation
time: 0.018; rss: 86MB	name resolution
time: 0.015; rss: 90MB	lowering ast -> hir
time: 0.004; rss: 91MB	indexing hir
time: 0.001; rss: 91MB	attribute checking
time: 0.001; rss: 86MB	language item collection
time: 0.002; rss: 86MB	lifetime resolution
time: 0.000; rss: 86MB	looking for entry point
time: 0.000; rss: 86MB	looking for plugin registrar
time: 0.010; rss: 89MB	region resolution
time: 0.001; rss: 89MB	loop checking
time: 0.001; rss: 89MB	static item recursion checking
time: 0.040; rss: 89MB	compute_incremental_hashes_map
time: 0.000; rss: 89MB	load_dep_graph
time: 0.015; rss: 91MB	type collecting
time: 0.000; rss: 91MB	variance inference
time: 0.001; rss: 91MB	impl wf inference
time: 0.015; rss: 93MB	coherence checking
time: 0.039; rss: 95MB	wf checking
time: 0.024; rss: 95MB	item-types checking
time: 0.477; rss: 103MB	item-bodies checking
time: 0.000; rss: 103MB	drop-impl checking
time: 0.052; rss: 104MB	const checking
time: 0.010; rss: 104MB	privacy checking
time: 0.001; rss: 104MB	stability index
time: 0.003; rss: 104MB	intrinsic checking
time: 0.001; rss: 104MB	effect checking
time: 0.007; rss: 104MB	match checking
time: 0.004; rss: 105MB	liveness checking
time: 0.020; rss: 105MB	rvalue checking
time: 0.064; rss: 125MB	MIR dump
  time: 0.008; rss: 126MB	SimplifyCfg
  time: 0.015; rss: 127MB	QualifyAndPromoteConstants
  time: 0.014; rss: 127MB	TypeckMir
  time: 0.001; rss: 127MB	SimplifyBranches
  time: 0.004; rss: 128MB	SimplifyCfg
time: 0.041; rss: 128MB	MIR cleanup and validation
time: 0.056; rss: 128MB	borrow checking
time: 0.003; rss: 128MB	reachability checking
time: 0.006; rss: 128MB	death checking
time: 0.005; rss: 128MB	stability checking
time: 0.000; rss: 128MB	unused lib feature checking
time: 0.038; rss: 128MB	lint checking
time: 0.000; rss: 128MB	resolving dependency formats
  time: 0.000; rss: 128MB	NoLandingPads
  time: 0.004; rss: 128MB	SimplifyCfg
  time: 0.009; rss: 129MB	EraseRegions
  time: 0.001; rss: 129MB	AddCallGuards
  time: 0.025; rss: 131MB	ElaborateDrops
  time: 0.000; rss: 131MB	NoLandingPads
  time: 0.005; rss: 131MB	SimplifyCfg
  time: 0.004; rss: 131MB	InstCombine
  time: 0.003; rss: 131MB	Deaggregator
  time: 0.000; rss: 131MB	CopyPropagation
  time: 0.004; rss: 131MB	SimplifyLocals
  time: 0.001; rss: 131MB	AddCallGuards
  time: 0.000; rss: 131MB	PreTrans
time: 0.057; rss: 131MB	MIR optimisations
  time: 0.014; rss: 133MB	write metadata
  time: 0.136; rss: 139MB	translation item collection
  time: 0.016; rss: 142MB	codegen unit partitioning
  time: 0.014; rss: 196MB	internalize symbols
time: 1.095; rss: 196MB	translation
time: 0.000; rss: 196MB	assert dep graph
time: 0.000; rss: 196MB	serialize dep graph
  time: 0.088; rss: 143MB	llvm function passes [0]
  time: 0.042; rss: 146MB	llvm module passes [0]
  time: 1.650; rss: 147MB	codegen passes [0]
  time: 0.000; rss: 147MB	codegen passes [0]
time: 1.933; rss: 147MB	LLVM passes
time: 0.000; rss: 147MB	serialize work products
time: 0.070; rss: 90MB	linking
done
