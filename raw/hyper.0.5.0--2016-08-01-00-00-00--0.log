commit 19765f2ab18ebb79f8615951b7cb8b86d896ecda
Merge: 1ece9ca ac73335
Author: bors <bors@rust-lang.org>
Date:   Mon Aug 1 20:05:57 2016 -0700

    Auto merge of #35054 - pwoolcoc:stringfromchars, r=brson
    
    implement `From<Vec<char>>` and `From<&'a [char]>` for `String`
    
    Though there are ways to convert a slice or vec of chars into a string,
    it would be nice to be able to just do `String::from(&['a', 'b', 'c'])`,
    so this PR implements `From<Vec<char>>` and `From<&'a [char]>` for
    String.
rustc: ./hyper.0.5.0
cargo rustc -- -Ztime-passes -Zinput-stats
    Updating registry `https://github.com/rust-lang/crates.io-index`
 Downloading gcc v0.3.34
   Compiling libc v0.1.12
   Compiling gcc v0.3.34
   Compiling matches v0.1.2
   Compiling unicase v0.1.0
   Compiling typeable v0.1.2
   Compiling log v0.3.6
   Compiling winapi-build v0.1.1
   Compiling lazy_static v0.1.16
   Compiling pkg-config v0.3.8
   Compiling traitobject v0.0.1
   Compiling bitflags v0.3.3
   Compiling rustc-serialize v0.3.19
   Compiling libc v0.2.15
   Compiling winapi v0.2.8
   Compiling kernel32-sys v0.2.2
   Compiling mime v0.0.11
   Compiling httparse v0.1.6
   Compiling time v0.1.35
   Compiling rand v0.3.14
   Compiling num_cpus v0.2.13
   Compiling openssl-sys v0.6.7
   Compiling openssl v0.6.7
   Compiling uuid v0.1.18
   Compiling url v0.2.38
   Compiling cookie v0.1.21
   Compiling hyper v0.5.0 (file:///root/benchmarks/hyper.0.5.0)
time: 0.030; rss: 58MB	parsing
Lines of code:             9154
Pre-expansion node count:  44838
time: 0.004; rss: 58MB	configuration
time: 0.000; rss: 58MB	recursion limit
time: 0.000; rss: 58MB	crate injection
time: 0.000; rss: 58MB	plugin loading
time: 0.000; rss: 58MB	plugin registration
time: 0.110; rss: 100MB	expansion
time: 0.000; rss: 100MB	maybe building test harness
time: 0.007; rss: 100MB	assigning node ids
Post-expansion node count: 101581
time: 0.000; rss: 100MB	checking for inline asm in case the target doesn't support it
time: 0.002; rss: 100MB	complete gated feature checking
time: 0.003; rss: 100MB	collecting defs
time: 0.011; rss: 111MB	external crate/lib resolution
time: 0.005; rss: 111MB	early lint checks
time: 0.001; rss: 111MB	AST validation
time: 0.018; rss: 115MB	name resolution
time: 0.009; rss: 123MB	lowering ast -> hir
time: 0.001; rss: 125MB	indexing hir
time: 0.001; rss: 125MB	attribute checking
time: 0.001; rss: 119MB	language item collection
time: 0.002; rss: 119MB	lifetime resolution
time: 0.000; rss: 119MB	looking for entry point
time: 0.000; rss: 119MB	looking for plugin registrar
time: 0.005; rss: 122MB	region resolution
time: 0.001; rss: 122MB	loop checking
time: 0.001; rss: 122MB	static item recursion checking
time: 0.000; rss: 122MB	load_dep_graph
time: 0.031; rss: 124MB	type collecting
time: 0.000; rss: 124MB	variance inference
time: 0.046; rss: 133MB	coherence checking
time: 0.091; rss: 134MB	wf checking
time: 0.034; rss: 134MB	item-types checking
time: 0.506; rss: 145MB	item-bodies checking
time: 0.000; rss: 145MB	drop-impl checking
time: 0.045; rss: 147MB	const checking
time: 0.008; rss: 147MB	privacy checking
time: 0.001; rss: 147MB	stability index
time: 0.006; rss: 147MB	intrinsic checking
time: 0.002; rss: 147MB	effect checking
time: 0.014; rss: 147MB	match checking
time: 0.004; rss: 147MB	liveness checking
time: 0.032; rss: 147MB	rvalue checking
time: 0.060; rss: 159MB	MIR dump
time: 0.042; rss: 159MB	MIR passes
time: 0.071; rss: 159MB	borrow checking
time: 0.003; rss: 159MB	reachability checking
time: 0.006; rss: 159MB	death checking
time: 0.006; rss: 159MB	stability checking
time: 0.000; rss: 159MB	unused lib feature checking
time: 0.052; rss: 159MB	lint checking
time: 0.000; rss: 159MB	resolving dependency formats
time: 0.090; rss: 161MB	Prepare MIR codegen passes
  time: 0.129; rss: 168MB	write metadata
  time: 0.182; rss: 172MB	translation item collection
  time: 0.020; rss: 174MB	codegen unit partitioning
  time: 0.035; rss: 294MB	internalize symbols
time: 1.573; rss: 294MB	translation
time: 0.000; rss: 294MB	assert dep graph
time: 0.000; rss: 294MB	serialize dep graph
  time: 0.088; rss: 177MB	llvm function passes [0]
  time: 0.044; rss: 176MB	llvm module passes [0]
  time: 1.629; rss: 179MB	codegen passes [0]
  time: 0.001; rss: 180MB	codegen passes [0]
time: 1.904; rss: 180MB	LLVM passes
time: 0.000; rss: 180MB	serialize work products
time: 0.154; rss: 125MB	linking
done
