commit fc2373c5a24646745dcbc14dc58889a9d8843f4e
Merge: 4bc9290 5a3aa2f
Author: bors <bors@rust-lang.org>
Date:   Sun Nov 20 17:06:53 2016 -0600

    Auto merge of #37888 - bluss:chars-count, r=alexcrichton
    
    Improve .chars().count()
    
    Use a simpler loop to count the `char` of a string: count the
    number of non-continuation bytes. Use `count += <conditional>` which the
    compiler understands well and can apply loop optimizations to.
    
    benchmark descriptions and results for two configurations:
    
    - ascii: ascii text
    - cy: cyrillic text
    - jp: japanese text
    - words ascii: counting each split_whitespace item from the ascii text
    - words jp: counting each split_whitespace item from the jp text
    
    ```
    x86-64 rustc -Copt-level=3
     name               orig_ ns/iter      cmov_ ns/iter      diff ns/iter   diff %
     count_ascii        1,453 (1755 MB/s)  1,398 (1824 MB/s)           -55   -3.79%
     count_cy           5,990 (856 MB/s)   2,545 (2016 MB/s)        -3,445  -57.51%
     count_jp           3,075 (1169 MB/s)  1,772 (2029 MB/s)        -1,303  -42.37%
     count_words_ascii  4,157 (521 MB/s)   1,797 (1205 MB/s)        -2,360  -56.77%
     count_words_jp     3,337 (1071 MB/s)  1,772 (2018 MB/s)        -1,565  -46.90%
    
    x86-64 rustc -Ctarget-feature=+avx -Copt-level=3
     name               orig_ ns/iter      cmov_ ns/iter      diff ns/iter   diff %
     count_ascii        1,444 (1766 MB/s)  763 (3343 MB/s)            -681  -47.16%
     count_cy           5,871 (874 MB/s)   1,527 (3360 MB/s)        -4,344  -73.99%
     count_jp           2,874 (1251 MB/s)  1,073 (3351 MB/s)        -1,801  -62.67%
     count_words_ascii  4,131 (524 MB/s)   1,871 (1157 MB/s)        -2,260  -54.71%
     count_words_jp     3,253 (1099 MB/s)  1,331 (2686 MB/s)        -1,922  -59.08%
    ```
    
    I briefly explored a more involved blocked algorithm (looking at 8 or more bytes at a time),
    but the code in this PR was always winning `count_words_ascii` in particular (counting
    many small strings); this solution is an improvement without tradeoffs.
rustc: ./inflate-0.1.0
cargo rustc  -- -Ztime-passes -Zinput-stats
   Compiling inflate v0.1.0 (file:///root/benchmarks/inflate-0.1.0)
time: 0.003; rss: 43MB	parsing
Lines of code:             956
Pre-expansion node count:  4736
time: 0.000; rss: 43MB	recursion limit
time: 0.000; rss: 43MB	crate injection
time: 0.000; rss: 43MB	plugin loading
time: 0.000; rss: 43MB	plugin registration
time: 0.058; rss: 72MB	expansion
time: 0.000; rss: 72MB	maybe building test harness
time: 0.000; rss: 72MB	maybe creating a macro crate
Post-expansion node count: 55748
time: 0.000; rss: 72MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 72MB	complete gated feature checking
time: 0.002; rss: 72MB	early lint checks
time: 0.000; rss: 72MB	AST validation
time: 0.008; rss: 74MB	name resolution
time: 0.004; rss: 76MB	lowering ast -> hir
time: 0.001; rss: 78MB	indexing hir
time: 0.001; rss: 78MB	attribute checking
time: 0.000; rss: 74MB	language item collection
time: 0.000; rss: 74MB	lifetime resolution
time: 0.000; rss: 74MB	looking for entry point
time: 0.000; rss: 74MB	looking for plugin registrar
time: 0.003; rss: 75MB	region resolution
time: 0.000; rss: 75MB	loop checking
time: 0.000; rss: 75MB	static item recursion checking
time: 0.019; rss: 75MB	compute_incremental_hashes_map
time: 0.000; rss: 75MB	load_dep_graph
time: 0.002; rss: 76MB	type collecting
time: 0.000; rss: 76MB	variance inference
time: 0.000; rss: 76MB	impl wf inference
time: 0.006; rss: 79MB	coherence checking
time: 0.001; rss: 80MB	wf checking
time: 0.001; rss: 80MB	item-types checking
time: 1.756; rss: 86MB	item-bodies checking
time: 0.000; rss: 86MB	drop-impl checking
time: 0.015; rss: 87MB	const checking
time: 0.001; rss: 87MB	privacy checking
time: 0.000; rss: 87MB	stability index
time: 0.000; rss: 87MB	intrinsic checking
time: 0.000; rss: 87MB	effect checking
time: 0.002; rss: 87MB	match checking
time: 0.066; rss: 85MB	liveness checking
time: 0.011; rss: 85MB	rvalue checking
time: 0.034; rss: 104MB	MIR dump
  time: 0.007; rss: 107MB	SimplifyCfg
  time: 0.005; rss: 107MB	QualifyAndPromoteConstants
  time: 0.006; rss: 107MB	TypeckMir
  time: 0.000; rss: 107MB	SimplifyBranches
  time: 0.002; rss: 107MB	SimplifyCfg
time: 0.021; rss: 107MB	MIR cleanup and validation
time: 0.198; rss: 107MB	borrow checking
time: 0.000; rss: 107MB	reachability checking
time: 0.003; rss: 107MB	death checking
time: 0.001; rss: 107MB	stability checking
time: 0.000; rss: 107MB	unused lib feature checking
time: 0.015; rss: 108MB	lint checking
time: 0.000; rss: 108MB	resolving dependency formats
  time: 0.000; rss: 108MB	NoLandingPads
  time: 0.002; rss: 108MB	SimplifyCfg
  time: 0.002; rss: 108MB	EraseRegions
  time: 0.001; rss: 108MB	AddCallGuards
  time: 0.223; rss: 110MB	ElaborateDrops
  time: 0.000; rss: 110MB	NoLandingPads
  time: 0.006; rss: 110MB	SimplifyCfg
  time: 0.003; rss: 110MB	InstCombine
  time: 0.000; rss: 110MB	Deaggregator
  time: 0.000; rss: 110MB	CopyPropagation
  time: 0.003; rss: 109MB	SimplifyLocals
  time: 0.001; rss: 109MB	AddCallGuards
  time: 0.000; rss: 109MB	PreTrans
time: 0.240; rss: 109MB	MIR optimisations
  time: 0.001; rss: 109MB	write metadata
  time: 0.008; rss: 110MB	translation item collection
  time: 0.001; rss: 110MB	codegen unit partitioning
  time: 0.001; rss: 123MB	internalize symbols
time: 0.147; rss: 123MB	translation
time: 0.000; rss: 123MB	assert dep graph
time: 0.000; rss: 123MB	serialize dep graph
  time: 0.028; rss: 89MB	llvm function passes [0]
  time: 0.005; rss: 90MB	llvm module passes [0]
  time: 0.659; rss: 94MB	codegen passes [0]
  time: 0.000; rss: 94MB	codegen passes [0]
time: 0.726; rss: 94MB	LLVM passes
time: 0.000; rss: 94MB	serialize work products
time: 0.019; rss: 82MB	linking
done
