commit 3f50b6342db87f4a8fb76e70f6ada07331e062a2
Merge: 58dc448 b9a8c1a
Author: bors <bors@rust-lang.org>
Date:   Mon Sep 5 08:13:32 2016 -0700

    Auto merge of #36200 - mattico:fix-llvm-linkage, r=arielb1
    
    Fix incorrect LLVM Linkage enum
    
    Followup of #33994 to actually work.
    
    The `Linkage` enum in librustc_llvm got out of sync with the version in LLVM and it caused two variants of the `#[linkage=""]` attribute to break.
    
    This adds the functions `LLVMRustGetLinkage` and `LLVMRustSetLinkage` which convert between the Rust Linkage enum and the LLVM one, which should stop this from breaking every time LLVM changes it.
    
    Possible remaining concerns:
    
    1. There could be a codegen test to make sure that the attributes are applied correctly (I don't know how to do this).
    2. ~~The test does not exercise the `appending` linkage. I can't figure out how to make a global static raw pointer to an array. This might not even be possible? If not we should probably remove appending linkage as its unusable in rust.~~ Appending linkage is not 'emittable' anyway.
    3. The test only runs on Linux.
    
    Fixes #33992
    
    r? @alexcrichton
rustc: ./hyper.0.5.0
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling hyper v0.5.0 (file:///root/benchmarks/hyper.0.5.0)
time: 0.028; rss: 50MB	parsing
Lines of code:             9154
Pre-expansion node count:  44873
time: 0.003; rss: 50MB	configuration
time: 0.000; rss: 50MB	recursion limit
time: 0.000; rss: 50MB	crate injection
time: 0.000; rss: 50MB	plugin loading
time: 0.000; rss: 50MB	plugin registration
time: 0.091; rss: 78MB	expansion
time: 0.000; rss: 78MB	maybe building test harness
time: 0.001; rss: 78MB	maybe creating a macro crate
time: 0.005; rss: 78MB	assigning node ids
Post-expansion node count: 101537
time: 0.000; rss: 78MB	checking for inline asm in case the target doesn't support it
time: 0.002; rss: 78MB	complete gated feature checking
time: 0.003; rss: 81MB	collecting defs
time: 0.009; rss: 87MB	external crate/lib resolution
time: 0.003; rss: 87MB	early lint checks
time: 0.001; rss: 87MB	AST validation
time: 0.015; rss: 95MB	name resolution
time: 0.007; rss: 99MB	lowering ast -> hir
time: 0.002; rss: 101MB	indexing hir
time: 0.001; rss: 101MB	attribute checking
time: 0.001; rss: 94MB	language item collection
time: 0.002; rss: 94MB	lifetime resolution
time: 0.000; rss: 94MB	looking for entry point
time: 0.000; rss: 94MB	looking for plugin registrar
time: 0.006; rss: 99MB	region resolution
time: 0.001; rss: 99MB	loop checking
time: 0.001; rss: 99MB	static item recursion checking
time: 0.013; rss: 100MB	compute_incremental_hashes_map
time: 0.000; rss: 100MB	load_dep_graph
time: 0.023; rss: 101MB	type collecting
time: 0.000; rss: 101MB	variance inference
time: 0.035; rss: 104MB	coherence checking
time: 0.056; rss: 105MB	wf checking
time: 0.028; rss: 105MB	item-types checking
time: 0.364; rss: 117MB	item-bodies checking
time: 0.000; rss: 117MB	drop-impl checking
time: 0.038; rss: 119MB	const checking
time: 0.006; rss: 119MB	privacy checking
time: 0.001; rss: 119MB	stability index
time: 0.005; rss: 119MB	intrinsic checking
time: 0.002; rss: 119MB	effect checking
time: 0.013; rss: 120MB	match checking
time: 0.005; rss: 120MB	liveness checking
time: 0.027; rss: 120MB	rvalue checking
time: 0.054; rss: 136MB	MIR dump
time: 0.040; rss: 136MB	MIR passes
time: 0.061; rss: 136MB	borrow checking
time: 0.003; rss: 136MB	reachability checking
time: 0.005; rss: 136MB	death checking
time: 0.005; rss: 139MB	stability checking
time: 0.000; rss: 139MB	unused lib feature checking
time: 0.041; rss: 139MB	lint checking
time: 0.000; rss: 139MB	resolving dependency formats
time: 0.077; rss: 141MB	Prepare MIR codegen passes
  time: 0.055; rss: 145MB	write metadata
  time: 0.113; rss: 150MB	translation item collection
  time: 0.018; rss: 152MB	codegen unit partitioning
  time: 0.031; rss: 217MB	internalize symbols
time: 1.326; rss: 208MB	translation
time: 0.000; rss: 208MB	assert dep graph
time: 0.000; rss: 208MB	serialize dep graph
  time: 0.100; rss: 158MB	llvm function passes [0]
  time: 0.048; rss: 160MB	llvm module passes [0]
  time: 1.845; rss: 164MB	codegen passes [0]
  time: 0.001; rss: 162MB	codegen passes [0]
time: 2.160; rss: 162MB	LLVM passes
time: 0.000; rss: 162MB	serialize work products
time: 0.158; rss: 98MB	linking
done
