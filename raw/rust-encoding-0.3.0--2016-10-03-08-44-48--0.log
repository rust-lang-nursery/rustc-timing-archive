commit 75df685d28947ea7d2422a24f14aa1254da1aeb4
Merge: f374565 607d297
Author: bors <bors@rust-lang.org>
Date:   Mon Oct 3 04:25:58 2016 -0700

    Auto merge of #36766 - nnethercote:hash-span-capacity, r=bluss
    
    Clarify HashMap's capacity handling.
    
    HashMap has two notions of "capacity":
    
    - "Usable capacity": the number of elements a hash map can hold without
      resizing. This is the meaning of "capacity" used in HashMap's API,
      e.g. the `with_capacity()` function.
    
    - "Internal capacity": the number of allocated slots. Except for the
      zero case, it is always larger than the usable capacity (because some
      slots must be left empty) and is always a power of two.
    
    HashMap's code is confusing because it does a poor job of
    distinguishing these two meanings. I propose using two different terms
    for these two concepts. Because "capacity" is already used in HashMap's
    API to mean "usable capacity", I will use a different word for "internal
    capacity". I propose "span", though I'm happy to consider other names.
rustc: ./rust-encoding-0.3.0
cargo rustc -- -Ztime-passes -Zinput-stats
    Updating registry `https://github.com/rust-lang/crates.io-index`
   Compiling encoding-types v0.2.0 (file:///root/benchmarks/rust-encoding-0.3.0)
   Compiling encoding_index_tests v0.1.5 (file:///root/benchmarks/rust-encoding-0.3.0)
   Compiling encoding-index-singlebyte v1.20160120.0 (file:///root/benchmarks/rust-encoding-0.3.0)
   Compiling encoding-index-tradchinese v1.20141219.6 (file:///root/benchmarks/rust-encoding-0.3.0)
   Compiling encoding-index-simpchinese v1.20160120.0 (file:///root/benchmarks/rust-encoding-0.3.0)
   Compiling encoding-index-korean v1.20141219.6 (file:///root/benchmarks/rust-encoding-0.3.0)
   Compiling encoding-index-japanese v1.20141219.6 (file:///root/benchmarks/rust-encoding-0.3.0)
   Compiling encoding v0.3.0-dev (file:///root/benchmarks/rust-encoding-0.3.0)
time: 0.031; rss: 42MB	parsing
Lines of code:             5757
Pre-expansion node count:  26615
time: 0.000; rss: 42MB	recursion limit
time: 0.000; rss: 42MB	crate injection
time: 0.000; rss: 42MB	plugin loading
time: 0.000; rss: 42MB	plugin registration
time: 0.046; rss: 66MB	expansion
time: 0.000; rss: 66MB	maybe building test harness
time: 0.000; rss: 66MB	maybe creating a macro crate
Post-expansion node count: 37904
time: 0.000; rss: 66MB	checking for inline asm in case the target doesn't support it
time: 0.001; rss: 66MB	complete gated feature checking
time: 0.001; rss: 66MB	early lint checks
time: 0.000; rss: 66MB	AST validation
time: 0.005; rss: 68MB	name resolution
time: 0.007; rss: 69MB	lowering ast -> hir
time: 0.001; rss: 69MB	indexing hir
time: 0.000; rss: 69MB	attribute checking
time: 0.000; rss: 69MB	language item collection
time: 0.001; rss: 69MB	lifetime resolution
time: 0.000; rss: 69MB	looking for entry point
time: 0.000; rss: 69MB	looking for plugin registrar
time: 0.005; rss: 70MB	region resolution
time: 0.000; rss: 70MB	loop checking
time: 0.000; rss: 70MB	static item recursion checking
time: 0.015; rss: 70MB	compute_incremental_hashes_map
time: 0.000; rss: 70MB	load_dep_graph
time: 0.010; rss: 71MB	type collecting
time: 0.000; rss: 71MB	variance inference
time: 0.017; rss: 73MB	coherence checking
time: 0.013; rss: 73MB	wf checking
time: 0.009; rss: 75MB	item-types checking
time: 0.145; rss: 79MB	item-bodies checking
time: 0.000; rss: 79MB	drop-impl checking
time: 0.010; rss: 79MB	const checking
time: 0.002; rss: 79MB	privacy checking
time: 0.000; rss: 79MB	stability index
time: 0.001; rss: 79MB	intrinsic checking
time: 0.000; rss: 79MB	effect checking
time: 0.006; rss: 79MB	match checking
time: 0.001; rss: 79MB	liveness checking
time: 0.006; rss: 79MB	rvalue checking
time: 0.034; rss: 87MB	MIR dump
  time: 0.003; rss: 88MB	SimplifyCfg
  time: 0.004; rss: 88MB	QualifyAndPromoteConstants
  time: 0.004; rss: 88MB	TypeckMir
  time: 0.000; rss: 88MB	SimplifyBranches
  time: 0.001; rss: 88MB	SimplifyCfg
time: 0.012; rss: 88MB	MIR passes
time: 0.020; rss: 88MB	borrow checking
time: 0.000; rss: 88MB	reachability checking
time: 0.001; rss: 88MB	death checking
time: 0.002; rss: 88MB	stability checking
time: 0.000; rss: 88MB	unused lib feature checking
time: 0.016; rss: 89MB	lint checking
time: 0.000; rss: 89MB	resolving dependency formats
  time: 0.000; rss: 89MB	NoLandingPads
  time: 0.001; rss: 89MB	SimplifyCfg
  time: 0.003; rss: 89MB	EraseRegions
  time: 0.000; rss: 89MB	AddCallGuards
  time: 0.017; rss: 90MB	ElaborateDrops
  time: 0.000; rss: 90MB	NoLandingPads
  time: 0.002; rss: 90MB	SimplifyCfg
  time: 0.001; rss: 90MB	InstCombine
  time: 0.001; rss: 90MB	Deaggregator
  time: 0.000; rss: 90MB	CopyPropagation
  time: 0.000; rss: 90MB	AddCallGuards
  time: 0.000; rss: 90MB	PreTrans
time: 0.026; rss: 90MB	Prepare MIR codegen passes
  time: 0.017; rss: 91MB	write metadata
  time: 0.367; rss: 190MB	translation item collection
  time: 0.003; rss: 191MB	codegen unit partitioning
  time: 0.003; rss: 213MB	internalize symbols
time: 0.721; rss: 204MB	translation
time: 0.000; rss: 204MB	assert dep graph
time: 0.000; rss: 204MB	serialize dep graph
  time: 0.025; rss: 102MB	llvm function passes [0]
  time: 0.057; rss: 110MB	llvm module passes [0]
  time: 0.620; rss: 116MB	codegen passes [0]
  time: 0.001; rss: 116MB	codegen passes [0]
time: 0.758; rss: 116MB	LLVM passes
time: 0.000; rss: 116MB	serialize work products
time: 0.076; rss: 87MB	linking
done
