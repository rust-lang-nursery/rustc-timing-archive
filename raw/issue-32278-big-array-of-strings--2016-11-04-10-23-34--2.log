commit d2bc30b03fa4bf5425d080710f681f36f58f1706
Merge: 49c36bf 99234bb
Author: bors <bors@rust-lang.org>
Date:   Fri Nov 4 03:38:18 2016 -0700

    Auto merge of #37037 - Mark-Simulacrum:stack-error, r=alexcrichton
    
    Add conversions from `io:ErrorKind` to `io::Error`
    
    Filing to help with discussion around the possibility of doing this.
    
    Current changes are clearly backwards incompatible, but I think adding a new function (with a bikeshed on naming) like `Error::new_str` should be possible (or some other way of specializing the string error message case) to fix #36658.
rustc: ./issue-32278-big-array-of-strings
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling issue-32278-big-array-of-strings v0.1.0 (file:///root/benchmarks/issue-32278-big-array-of-strings)
time: 0.110; rss: 62MB	parsing
Lines of code:             65577
Pre-expansion node count:  65552
time: 0.000; rss: 62MB	recursion limit
time: 0.000; rss: 62MB	crate injection
time: 0.000; rss: 62MB	plugin loading
time: 0.000; rss: 62MB	plugin registration
time: 0.026; rss: 85MB	expansion
time: 0.000; rss: 85MB	maybe building test harness
time: 0.001; rss: 85MB	maybe creating a macro crate
Post-expansion node count: 65565
time: 0.000; rss: 85MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 85MB	complete gated feature checking
time: 0.005; rss: 85MB	early lint checks
time: 0.000; rss: 88MB	AST validation
time: 0.003; rss: 88MB	name resolution
time: 0.006; rss: 97MB	lowering ast -> hir
time: 0.001; rss: 101MB	indexing hir
time: 0.001; rss: 101MB	attribute checking
time: 0.000; rss: 87MB	language item collection
time: 0.000; rss: 87MB	lifetime resolution
time: 0.000; rss: 87MB	looking for entry point
time: 0.000; rss: 87MB	looking for plugin registrar
time: 0.007; rss: 94MB	region resolution
time: 0.001; rss: 94MB	loop checking
time: 0.001; rss: 94MB	static item recursion checking
time: 0.030; rss: 94MB	compute_incremental_hashes_map
time: 0.000; rss: 94MB	load_dep_graph
time: 0.000; rss: 94MB	type collecting
time: 0.000; rss: 94MB	variance inference
time: 0.004; rss: 96MB	coherence checking
time: 0.000; rss: 96MB	wf checking
time: 0.586; rss: 108MB	item-types checking
time: 0.000; rss: 108MB	item-bodies checking
time: 0.000; rss: 108MB	drop-impl checking
time: 0.020; rss: 107MB	const checking
time: 0.001; rss: 107MB	privacy checking
time: 0.000; rss: 107MB	stability index
time: 0.000; rss: 107MB	intrinsic checking
time: 0.000; rss: 107MB	effect checking
time: 0.000; rss: 107MB	match checking
time: 0.000; rss: 107MB	liveness checking
time: 0.000; rss: 107MB	rvalue checking
time: 0.041; rss: 113MB	MIR dump
  time: 0.000; rss: 113MB	SimplifyCfg
  time: 0.001; rss: 113MB	QualifyAndPromoteConstants
  time: 0.001; rss: 113MB	TypeckMir
  time: 0.000; rss: 113MB	SimplifyBranches
  time: 0.000; rss: 113MB	SimplifyCfg
time: 0.002; rss: 113MB	MIR cleanup and validation
time: 0.001; rss: 113MB	borrow checking
time: 0.000; rss: 113MB	reachability checking
time: 0.001; rss: 113MB	death checking
time: 0.000; rss: 113MB	stability checking
time: 0.000; rss: 113MB	unused lib feature checking
time: 0.022; rss: 113MB	lint checking
time: 0.001; rss: 113MB	resolving dependency formats
  time: 0.000; rss: 113MB	NoLandingPads
  time: 0.000; rss: 113MB	SimplifyCfg
  time: 0.001; rss: 113MB	EraseRegions
  time: 0.000; rss: 113MB	AddCallGuards
  time: 0.000; rss: 113MB	ElaborateDrops
  time: 0.000; rss: 113MB	NoLandingPads
  time: 0.000; rss: 113MB	SimplifyCfg
  time: 0.000; rss: 113MB	InstCombine
  time: 0.000; rss: 113MB	Deaggregator
  time: 0.000; rss: 113MB	CopyPropagation
  time: 0.000; rss: 113MB	SimplifyLocals
  time: 0.000; rss: 113MB	AddCallGuards
  time: 0.000; rss: 113MB	PreTrans
time: 0.001; rss: 113MB	MIR optimisations
  time: 0.000; rss: 114MB	write metadata
  time: 0.001; rss: 114MB	translation item collection
  time: 0.000; rss: 114MB	codegen unit partitioning
  time: 0.001; rss: 126MB	internalize symbols
time: 0.056; rss: 126MB	translation
time: 0.000; rss: 126MB	assert dep graph
time: 0.000; rss: 126MB	serialize dep graph
  time: 0.008; rss: 86MB	llvm function passes [0]
  time: 0.000; rss: 86MB	llvm module passes [0]
  time: 0.177; rss: 87MB	codegen passes [0]
  time: 0.000; rss: 87MB	codegen passes [0]
time: 0.186; rss: 84MB	LLVM passes
time: 0.000; rss: 84MB	serialize work products
  time: 0.154; rss: 75MB	running linker
time: 0.156; rss: 75MB	linking
done
