commit 98a3502da1456b209ff031604cabbbcb9d0eddf1
Merge: 5bfe107 a61d85b
Author: bors <bors@rust-lang.org>
Date:   Sat Oct 15 15:38:52 2016 -0700

    Auto merge of #37152 - arielb1:drop-cache, r=pnkfelix
    
    add a per-param-env cache to `impls_bound`
    
    There used to be only a global cache, which led to uncached calls to
    trait selection when there were type parameters.
    
    This causes a 20% decrease in borrow-checking time and an overall 0.5% performance increase during bootstrapping (as borrow-checking tends to be a tiny part of compilation time).
    
    Fixes #37106 (drop elaboration times are now ~half of borrow checking,
    so might still be worthy of optimization, but not critical).
    
    r? @pnkfelix
rustc: ./html5ever-2016-08-25
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling html5ever v0.5.4 (file:///root/benchmarks/html5ever-2016-08-25)
time: 0.047; rss: 47MB	parsing
Lines of code:             8210
Pre-expansion node count:  52238
time: 0.000; rss: 47MB	recursion limit
time: 0.000; rss: 47MB	crate injection
time: 0.000; rss: 47MB	plugin loading
time: 0.000; rss: 47MB	plugin registration
time: 1.385; rss: 100MB	expansion
time: 0.000; rss: 100MB	maybe building test harness
time: 0.002; rss: 100MB	maybe creating a macro crate
Post-expansion node count: 163524
time: 0.000; rss: 100MB	checking for inline asm in case the target doesn't support it
time: 0.003; rss: 100MB	complete gated feature checking
time: 0.008; rss: 100MB	early lint checks
time: 0.002; rss: 100MB	AST validation
time: 0.022; rss: 103MB	name resolution
time: 0.032; rss: 120MB	lowering ast -> hir
time: 0.011; rss: 124MB	indexing hir
time: 0.002; rss: 124MB	attribute checking
time: 0.002; rss: 101MB	language item collection
time: 0.003; rss: 101MB	lifetime resolution
time: 0.000; rss: 101MB	looking for entry point
time: 0.000; rss: 101MB	looking for plugin registrar
time: 0.024; rss: 106MB	region resolution
time: 0.002; rss: 106MB	loop checking
time: 0.003; rss: 106MB	static item recursion checking
time: 0.023; rss: 107MB	compute_incremental_hashes_map
time: 0.000; rss: 107MB	load_dep_graph
time: 0.010; rss: 109MB	type collecting
time: 0.000; rss: 109MB	variance inference
time: 0.026; rss: 113MB	coherence checking
time: 0.025; rss: 113MB	wf checking
time: 0.437; rss: 122MB	item-types checking
time: 0.520; rss: 132MB	item-bodies checking
time: 0.000; rss: 132MB	drop-impl checking
time: 0.073; rss: 136MB	const checking
time: 0.008; rss: 136MB	privacy checking
time: 0.002; rss: 136MB	stability index
time: 0.004; rss: 136MB	intrinsic checking
time: 0.003; rss: 136MB	effect checking
time: 0.025; rss: 136MB	match checking
time: 0.040; rss: 129MB	liveness checking
time: 0.029; rss: 129MB	rvalue checking
time: 0.140; rss: 179MB	MIR dump
  time: 0.010; rss: 169MB	SimplifyCfg
  time: 0.015; rss: 170MB	QualifyAndPromoteConstants
  time: 0.025; rss: 170MB	TypeckMir
  time: 0.000; rss: 170MB	SimplifyBranches
  time: 0.004; rss: 170MB	SimplifyCfg
time: 0.054; rss: 170MB	MIR passes
time: 0.097; rss: 178MB	borrow checking
time: 0.003; rss: 178MB	reachability checking
time: 0.008; rss: 178MB	death checking
time: 0.009; rss: 178MB	stability checking
time: 0.000; rss: 178MB	unused lib feature checking
time: 0.066; rss: 179MB	lint checking
time: 0.000; rss: 179MB	resolving dependency formats
  time: 0.000; rss: 179MB	NoLandingPads
  time: 0.004; rss: 179MB	SimplifyCfg
  time: 0.010; rss: 179MB	EraseRegions
  time: 0.001; rss: 179MB	AddCallGuards
  time: 0.077; rss: 183MB	ElaborateDrops
  time: 0.000; rss: 183MB	NoLandingPads
  time: 0.006; rss: 181MB	SimplifyCfg
  time: 0.008; rss: 179MB	InstCombine
  time: 0.001; rss: 179MB	Deaggregator
  time: 0.000; rss: 179MB	CopyPropagation
  time: 0.001; rss: 179MB	AddCallGuards
  time: 0.000; rss: 179MB	PreTrans
time: 0.110; rss: 179MB	Prepare MIR codegen passes
  time: 0.053; rss: 180MB	write metadata
  time: 0.050; rss: 182MB	translation item collection
  time: 0.006; rss: 182MB	codegen unit partitioning
  time: 0.006; rss: 196MB	internalize symbols
time: 0.369; rss: 167MB	translation
time: 0.000; rss: 167MB	assert dep graph
time: 0.000; rss: 167MB	serialize dep graph
  time: 0.021; rss: 102MB	llvm function passes [0]
  time: 0.013; rss: 103MB	llvm module passes [0]
  time: 0.459; rss: 105MB	codegen passes [0]
  time: 0.001; rss: 105MB	codegen passes [0]
time: 0.535; rss: 105MB	LLVM passes
time: 0.000; rss: 105MB	serialize work products
time: 0.058; rss: 89MB	linking
done
