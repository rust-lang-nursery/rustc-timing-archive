commit ac919fcd9d4a958baf99b2f2ed5c3d38a2ebf9d0
Merge: f9f45c6 b4f910d
Author: bors <bors@rust-lang.org>
Date:   Wed Nov 2 22:58:01 2016 -0700

    Auto merge of #37541 - nikomatsakis:issue-37291, r=brson
    
    Use impl obligations as initial environment for specialization
    
    This corrects a small regression in specialization that crept in, I think as part of the refactoring to introduce arenas. I also made an experiment (in the last commit) to cleanup the code to be more aggressive about normalization. As the commit log notes, I am not 100% sure that this is correct, but it feels safer, and I think that at worst it yields *more* ICEs (as opposed to admitting faulty code). I'll schedule a crater run to check beyond the testbase.
    
    Fixes #37291.
    
    r? @aturon
rustc: ./html5ever-2016-08-25
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling html5ever v0.5.4 (file:///root/benchmarks/html5ever-2016-08-25)
time: 0.027; rss: 51MB	parsing
Lines of code:             8210
Pre-expansion node count:  52238
time: 0.000; rss: 51MB	recursion limit
time: 0.000; rss: 51MB	crate injection
time: 0.000; rss: 51MB	plugin loading
time: 0.000; rss: 51MB	plugin registration
time: 0.481; rss: 106MB	expansion
time: 0.000; rss: 106MB	maybe building test harness
time: 0.002; rss: 106MB	maybe creating a macro crate
Post-expansion node count: 163524
time: 0.000; rss: 106MB	checking for inline asm in case the target doesn't support it
time: 0.003; rss: 106MB	complete gated feature checking
time: 0.008; rss: 106MB	early lint checks
time: 0.002; rss: 106MB	AST validation
time: 0.018; rss: 109MB	name resolution
time: 0.014; rss: 119MB	lowering ast -> hir
time: 0.003; rss: 124MB	indexing hir
time: 0.002; rss: 124MB	attribute checking
time: 0.001; rss: 100MB	language item collection
time: 0.002; rss: 100MB	lifetime resolution
time: 0.000; rss: 100MB	looking for entry point
time: 0.000; rss: 100MB	looking for plugin registrar
time: 0.014; rss: 104MB	region resolution
time: 0.001; rss: 104MB	loop checking
time: 0.001; rss: 104MB	static item recursion checking
time: 0.026; rss: 103MB	compute_incremental_hashes_map
time: 0.000; rss: 103MB	load_dep_graph
time: 0.008; rss: 105MB	type collecting
time: 0.000; rss: 105MB	variance inference
time: 0.022; rss: 108MB	coherence checking
time: 0.022; rss: 108MB	wf checking
time: 0.325; rss: 120MB	item-types checking
time: 0.484; rss: 131MB	item-bodies checking
time: 0.000; rss: 131MB	drop-impl checking
time: 0.067; rss: 133MB	const checking
time: 0.006; rss: 133MB	privacy checking
time: 0.001; rss: 133MB	stability index
time: 0.003; rss: 133MB	intrinsic checking
time: 0.003; rss: 133MB	effect checking
time: 0.015; rss: 133MB	match checking
time: 0.012; rss: 129MB	liveness checking
time: 0.024; rss: 129MB	rvalue checking
time: 0.114; rss: 181MB	MIR dump
  time: 0.009; rss: 168MB	SimplifyCfg
  time: 0.014; rss: 170MB	QualifyAndPromoteConstants
  time: 0.023; rss: 171MB	TypeckMir
  time: 0.000; rss: 171MB	SimplifyBranches
  time: 0.004; rss: 171MB	SimplifyCfg
time: 0.050; rss: 171MB	MIR passes
time: 0.086; rss: 177MB	borrow checking
time: 0.003; rss: 177MB	reachability checking
time: 0.006; rss: 177MB	death checking
time: 0.008; rss: 177MB	stability checking
time: 0.000; rss: 177MB	unused lib feature checking
time: 0.057; rss: 177MB	lint checking
time: 0.000; rss: 177MB	resolving dependency formats
  time: 0.000; rss: 177MB	NoLandingPads
  time: 0.004; rss: 177MB	SimplifyCfg
  time: 0.009; rss: 177MB	EraseRegions
  time: 0.001; rss: 177MB	AddCallGuards
  time: 0.075; rss: 182MB	ElaborateDrops
  time: 0.000; rss: 182MB	NoLandingPads
  time: 0.006; rss: 180MB	SimplifyCfg
  time: 0.007; rss: 180MB	InstCombine
  time: 0.001; rss: 180MB	Deaggregator
  time: 0.000; rss: 180MB	CopyPropagation
  time: 0.001; rss: 180MB	AddCallGuards
  time: 0.000; rss: 180MB	PreTrans
time: 0.106; rss: 180MB	Prepare MIR codegen passes
  time: 0.011; rss: 180MB	write metadata
  time: 0.043; rss: 182MB	translation item collection
  time: 0.005; rss: 182MB	codegen unit partitioning
  time: 0.005; rss: 196MB	internalize symbols
time: 0.290; rss: 196MB	translation
time: 0.000; rss: 196MB	assert dep graph
time: 0.000; rss: 196MB	serialize dep graph
  time: 0.020; rss: 103MB	llvm function passes [0]
  time: 0.012; rss: 103MB	llvm module passes [0]
  time: 0.457; rss: 109MB	codegen passes [0]
  time: 0.000; rss: 109MB	codegen passes [0]
time: 0.528; rss: 109MB	LLVM passes
time: 0.000; rss: 109MB	serialize work products
time: 0.024; rss: 91MB	linking
done
