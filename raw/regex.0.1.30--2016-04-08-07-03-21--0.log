commit 8694b4ffe9b223c351e50c10bd8ea4e23af58baa
Merge: dde35e7 8128817
Author: bors <bors@rust-lang.org>
Date:   Fri Apr 8 03:20:11 2016 -0700

    Auto merge of #32695 - sfackler:default-buf-size, r=alexcrichton
    
    Drop the default buffer size to 8K
    
    The 64k capacity was picked by me a couple of years ago in the initial
    implementation of buffered IO adaptors:
    https://github.com/rust-lang/rust/pull/9091/files#diff-b131eeef531ad098b32f49695a031008R62.
    64K was picked for symmetry with libuv, which we no longer use.
    
    64K is *way* larger than the default size of any other language that I
    can find. C, C++, and Java default to 8K, and Go defaults to 4K. There
    have been a variety of issues filed relating to this such as #31885.
    
    Closes #31885
rustc: ./regex.0.1.30
cargo rustc -- -Ztime-passes -Zinput-stats
    Updating registry `https://github.com/rust-lang/crates.io-index`
   Compiling regex v0.1.30 (file:///root/benchmarks/regex.0.1.30)
time: 0.081; rss: 52MB	parsing
Lines of code:             8558
Pre-expansion node count:  58217
time: 0.011; rss: 52MB	configuration 1
time: 0.000; rss: 52MB	recursion limit
time: 0.001; rss: 52MB	gated macro checking
time: 0.000; rss: 52MB	crate injection
time: 0.003; rss: 55MB	macro loading
time: 0.000; rss: 55MB	plugin loading
time: 0.000; rss: 55MB	plugin registration
time: 0.057; rss: 59MB	expansion
time: 0.001; rss: 59MB	complete gated feature checking 1
time: 0.013; rss: 59MB	configuration 2
time: 0.000; rss: 59MB	gated configuration checking
time: 0.006; rss: 59MB	maybe building test harness
time: 0.006; rss: 59MB	prelude injection
time: 0.001; rss: 59MB	checking that all macro invocations are gone
time: 0.000; rss: 59MB	checking for inline asm in case the target doesn't support it
time: 0.001; rss: 59MB	complete gated feature checking 2
time: 0.001; rss: 59MB	const fn bodies and arguments
Post-expansion node count: 68485
time: 0.006; rss: 59MB	assigning node ids
time: 0.012; rss: 68MB	lowering ast -> hir
time: 0.004; rss: 70MB	indexing hir
time: 0.001; rss: 70MB	attribute checking
time: 0.007; rss: 70MB	early lint checks
time: 0.001; rss: 63MB	external crate/lib resolution
time: 0.001; rss: 63MB	language item collection
time: 0.010; rss: 72MB	resolution
time: 0.001; rss: 72MB	lifetime resolution
time: 0.000; rss: 72MB	looking for entry point
time: 0.000; rss: 72MB	looking for plugin registrar
time: 0.009; rss: 75MB	region resolution
time: 0.001; rss: 75MB	loop checking
time: 0.001; rss: 75MB	static item recursion checking
time: 0.000; rss: 75MB	load_dep_graph
time: 0.007; rss: 86MB	type collecting
time: 0.000; rss: 86MB	variance inference
time: 0.024; rss: 96MB	coherence checking
time: 0.010; rss: 96MB	wf checking
time: 0.255; rss: 100MB	item-types checking
time: 0.203; rss: 111MB	item-bodies checking
time: 0.000; rss: 111MB	drop-impl checking
time: 0.030; rss: 113MB	const checking
time: 0.004; rss: 113MB	privacy checking
time: 0.001; rss: 113MB	stability index
time: 0.001; rss: 113MB	intrinsic checking
time: 0.001; rss: 113MB	effect checking
time: 0.003; rss: 113MB	match checking
time: 0.002; rss: 113MB	liveness checking
time: 0.007; rss: 113MB	rvalue checking
time: 0.019; rss: 115MB	MIR dump
time: 0.007; rss: 115MB	MIR passes
time: 0.020; rss: 115MB	borrow checking
time: 0.000; rss: 115MB	reachability checking
time: 0.003; rss: 115MB	death checking
time: 0.003; rss: 115MB	stability checking
time: 0.000; rss: 115MB	unused lib feature checking
time: 0.029; rss: 116MB	lint checking
time: 0.000; rss: 116MB	resolving dependency formats
time: 0.007; rss: 116MB	Prepare MIR codegen passes
  time: 0.063; rss: 130MB	translation item collection
  time: 0.140; rss: 180MB	write metadata
time: 0.716; rss: 180MB	translation
time: 0.000; rss: 180MB	assert dep graph
time: 0.000; rss: 180MB	serialize dep graph
  time: 0.036; rss: 120MB	llvm function passes [0]
  time: 0.017; rss: 122MB	llvm module passes [0]
  time: 0.614; rss: 126MB	codegen passes [0]
  time: 0.001; rss: 106MB	codegen passes [0]
time: 0.743; rss: 105MB	LLVM passes
time: 0.065; rss: 104MB	linking
done
