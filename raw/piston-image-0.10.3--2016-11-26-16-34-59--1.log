commit 9003e1ab6a2e26ec881b9ff297095a8343ebc7d1
Merge: 7e39c0e 17cb7bd
Author: bors <bors@rust-lang.org>
Date:   Sat Nov 26 12:32:19 2016 -0600

    Auto merge of #38008 - bluss:rustbuild-benches, r=alexcrichton
    
    Add rustbuild command `bench`
    
    Add command bench to rustbuild, so that `./x.py bench <path>` can compile and run benchmarks.
    
    `./x.py bench --stage 1 src/libcollections` and `./x.py bench --stage 1 src/libstd` should both compile well. Just `./x.py bench` runs all benchmarks for the libstd crates.
    
    Fixes #37897
rustc: ./piston-image-0.10.3
cargo rustc  -- -Ztime-passes -Zinput-stats
   Compiling image v0.10.3 (file:///root/benchmarks/piston-image-0.10.3)
time: 0.038; rss: 54MB	parsing
Lines of code:             12000
Pre-expansion node count:  90152
time: 0.000; rss: 54MB	recursion limit
time: 0.000; rss: 54MB	crate injection
time: 0.000; rss: 54MB	plugin loading
time: 0.000; rss: 54MB	plugin registration
time: 0.066; rss: 96MB	expansion
time: 0.000; rss: 96MB	maybe building test harness
time: 0.001; rss: 96MB	maybe creating a macro crate
Post-expansion node count: 148881
time: 0.000; rss: 96MB	checking for inline asm in case the target doesn't support it
time: 0.003; rss: 96MB	complete gated feature checking
time: 0.006; rss: 96MB	early lint checks
time: 0.001; rss: 96MB	AST validation
time: 0.018; rss: 98MB	name resolution
time: 0.012; rss: 106MB	lowering ast -> hir
time: 0.002; rss: 110MB	indexing hir
time: 0.002; rss: 110MB	attribute checking
time: 0.001; rss: 100MB	language item collection
time: 0.002; rss: 100MB	lifetime resolution
time: 0.000; rss: 100MB	looking for entry point
time: 0.000; rss: 100MB	looking for plugin registrar
time: 0.009; rss: 105MB	region resolution
time: 0.001; rss: 105MB	loop checking
time: 0.001; rss: 105MB	static item recursion checking
time: 0.050; rss: 104MB	compute_incremental_hashes_map
time: 0.000; rss: 104MB	load_dep_graph
time: 0.016; rss: 107MB	type collecting
time: 0.000; rss: 107MB	variance inference
time: 0.000; rss: 107MB	impl wf inference
time: 0.013; rss: 109MB	coherence checking
time: 0.065; rss: 110MB	wf checking
time: 0.134; rss: 112MB	item-types checking
time: 0.748; rss: 127MB	item-bodies checking
time: 0.000; rss: 127MB	drop-impl checking
time: 0.048; rss: 130MB	const checking
time: 0.008; rss: 130MB	privacy checking
time: 0.001; rss: 130MB	stability index
time: 0.006; rss: 130MB	intrinsic checking
time: 0.002; rss: 130MB	effect checking
time: 0.013; rss: 130MB	match checking
time: 0.009; rss: 131MB	liveness checking
time: 0.039; rss: 131MB	rvalue checking
time: 0.086; rss: 170MB	MIR dump
  time: 0.011; rss: 170MB	SimplifyCfg
  time: 0.019; rss: 170MB	QualifyAndPromoteConstants
  time: 0.023; rss: 170MB	TypeckMir
  time: 0.001; rss: 170MB	SimplifyBranches
  time: 0.004; rss: 170MB	SimplifyCfg
time: 0.058; rss: 170MB	MIR cleanup and validation
time: 0.106; rss: 170MB	borrow checking
time: 0.003; rss: 170MB	reachability checking
time: 0.007; rss: 170MB	death checking
time: 0.007; rss: 170MB	stability checking
time: 0.000; rss: 170MB	unused lib feature checking
time: 0.060; rss: 170MB	lint checking
time: 0.000; rss: 170MB	resolving dependency formats
  time: 0.001; rss: 170MB	NoLandingPads
  time: 0.005; rss: 170MB	SimplifyCfg
  time: 0.010; rss: 172MB	EraseRegions
  time: 0.002; rss: 172MB	AddCallGuards
  time: 0.041; rss: 174MB	ElaborateDrops
  time: 0.001; rss: 174MB	NoLandingPads
  time: 0.009; rss: 174MB	SimplifyCfg
  time: 0.006; rss: 174MB	InstCombine
  time: 0.002; rss: 174MB	Deaggregator
  time: 0.000; rss: 174MB	CopyPropagation
  time: 0.007; rss: 174MB	SimplifyLocals
  time: 0.002; rss: 174MB	AddCallGuards
  time: 0.000; rss: 174MB	PreTrans
time: 0.086; rss: 174MB	MIR optimisations
  time: 0.015; rss: 177MB	write metadata
  time: 0.378; rss: 189MB	translation item collection
  time: 0.020; rss: 193MB	codegen unit partitioning
  time: 0.019; rss: 314MB	internalize symbols
time: 2.203; rss: 314MB	translation
time: 0.000; rss: 314MB	assert dep graph
time: 0.000; rss: 314MB	serialize dep graph
  time: 0.207; rss: 229MB	llvm function passes [0]
  time: 0.089; rss: 232MB	llvm module passes [0]
  time: 4.169; rss: 232MB	codegen passes [0]
  time: 0.000; rss: 232MB	codegen passes [0]
time: 4.773; rss: 232MB	LLVM passes
time: 0.000; rss: 232MB	serialize work products
time: 0.127; rss: 104MB	linking
done
