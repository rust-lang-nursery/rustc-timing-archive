commit 4ec5ce5e44823c29d4f641f764e53d57e8b28a6a
Merge: e88defe bb9062a
Author: bors <bors@rust-lang.org>
Date:   Thu May 12 14:31:54 2016 -0700

    Auto merge of #33282 - alexcrichton:rustbuild-crate-tests, r=brson
    
    rustbuild: Add support for crate tests + doctests
    
    This commit adds support to rustbuild to run crate unit tests (those defined by
    `#[test]`) as well as documentation tests. All tests are powered by `cargo test`
    under the hood.
    
    Each step requires the `libtest` library is built for that corresponding stage.
    Ideally the `test` crate would be a dev-dependency, but for now it's just easier
    to ensure that we sequence everything in the right order.
    
    Currently no filtering is implemented, so there's not actually a method of
    testing *only* libstd or *only* libcore, but rather entire swaths of crates are
    tested all at once.
    
    A few points of note here are:
    
    * The `coretest` and `collectionstest` crates are just listed as `[[test]]`
      entires for `cargo test` to naturally pick up. This mean that `cargo test -p
      core` actually runs all the tests for libcore.
    * Libraries that aren't tested all mention `test = false` in their `Cargo.toml`
    * Crates aren't currently allowed to have dev-dependencies due to
      rust-lang/cargo#860, but we can likely alleviate this restriction once
      workspaces are implemented.
    
    cc #31590
rustc: ./regex.0.1.30
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling regex v0.1.30 (file:///root/benchmarks/regex.0.1.30)
time: 0.064; rss: 63MB	parsing
Lines of code:             8558
Pre-expansion node count:  58217
time: 0.011; rss: 63MB	configuration 1
time: 0.000; rss: 63MB	recursion limit
time: 0.000; rss: 63MB	crate injection
time: 0.004; rss: 67MB	macro loading
time: 0.000; rss: 67MB	plugin loading
time: 0.000; rss: 67MB	plugin registration
time: 0.057; rss: 69MB	expansion
time: 0.014; rss: 69MB	configuration 2
time: 0.000; rss: 69MB	gated configuration checking
time: 0.006; rss: 69MB	maybe building test harness
time: 0.006; rss: 69MB	prelude injection
time: 0.001; rss: 69MB	checking that all macro invocations are gone
time: 0.000; rss: 69MB	checking for inline asm in case the target doesn't support it
time: 0.001; rss: 69MB	complete gated feature checking
Post-expansion node count: 68497
time: 0.006; rss: 69MB	assigning node ids
time: 0.001; rss: 69MB	collecting defs
time: 0.001; rss: 69MB	external crate/lib resolution
time: 0.006; rss: 69MB	early lint checks
time: 0.009; rss: 78MB	name resolution
time: 0.009; rss: 89MB	lowering ast -> hir
time: 0.001; rss: 92MB	indexing hir
time: 0.001; rss: 92MB	attribute checking
time: 0.001; rss: 83MB	language item collection
time: 0.001; rss: 83MB	lifetime resolution
time: 0.000; rss: 83MB	looking for entry point
time: 0.000; rss: 83MB	looking for plugin registrar
time: 0.006; rss: 87MB	region resolution
time: 0.001; rss: 87MB	loop checking
time: 0.001; rss: 87MB	static item recursion checking
time: 0.000; rss: 87MB	load_dep_graph
time: 0.007; rss: 98MB	type collecting
time: 0.000; rss: 98MB	variance inference
time: 0.025; rss: 109MB	coherence checking
time: 0.012; rss: 110MB	wf checking
time: 0.384; rss: 113MB	item-types checking
time: 0.217; rss: 121MB	item-bodies checking
time: 0.000; rss: 121MB	drop-impl checking
time: 0.026; rss: 121MB	const checking
time: 0.004; rss: 121MB	privacy checking
time: 0.001; rss: 121MB	stability index
time: 0.002; rss: 121MB	intrinsic checking
time: 0.001; rss: 121MB	effect checking
time: 0.004; rss: 121MB	match checking
time: 0.002; rss: 121MB	liveness checking
time: 0.008; rss: 121MB	rvalue checking
time: 0.053; rss: 134MB	MIR dump
time: 0.020; rss: 134MB	MIR passes
time: 0.021; rss: 134MB	borrow checking
time: 0.000; rss: 134MB	reachability checking
time: 0.003; rss: 134MB	death checking
time: 0.002; rss: 134MB	stability checking
time: 0.000; rss: 134MB	unused lib feature checking
time: 0.028; rss: 134MB	lint checking
time: 0.000; rss: 134MB	resolving dependency formats
time: 0.005; rss: 134MB	Prepare MIR codegen passes
  time: 0.067; rss: 140MB	translation item collection
  time: 0.001; rss: 140MB	codegen unit partitioning
  time: 0.179; rss: 197MB	write metadata
time: 0.705; rss: 193MB	translation
time: 0.000; rss: 193MB	assert dep graph
time: 0.000; rss: 193MB	serialize dep graph
  time: 0.036; rss: 128MB	llvm function passes [0]
  time: 0.019; rss: 128MB	llvm module passes [0]
  time: 0.612; rss: 133MB	codegen passes [0]
  time: 0.001; rss: 115MB	codegen passes [0]
time: 0.744; rss: 112MB	LLVM passes
time: 0.066; rss: 112MB	linking
done
