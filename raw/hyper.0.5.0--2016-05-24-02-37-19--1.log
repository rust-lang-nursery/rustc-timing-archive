commit dd6e8d45e183861d44ed91a99f0a50403b2776a3
Merge: 57ef015 0ca7d3d
Author: bors <bors@rust-lang.org>
Date:   Mon May 23 20:02:23 2016 -0700

    Auto merge of #33787 - cuviper:local-rebuild, r=alexcrichton
    
    Add --enable-local-rebuild to bootstrap from the current release
    
    In Linux distributions, it is often necessary to rebuild packages for cases like applying new patches or linking against new system libraries.  In this scenario, the rustc in the distro build environment may already match the current release that we're trying to rebuild.  Thus we don't want to use the prior release's bootstrap key, nor `--cfg stage0` for the prior unstable features.
    
    The new `configure --enable-local-rebuild` option specifies that we are rebuilding from the current release.  The current bootstrap key is used for the local rustc, and current stage1 features are also assumed.  Both the makefiles and rustbuild support this configuration.
    
    Fixes #29556
    r? @alexcrichton
rustc: ./hyper.0.5.0
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling hyper v0.5.0 (file:///root/benchmarks/hyper.0.5.0)
time: 0.031; rss: 53MB	parsing
Lines of code:             9154
Pre-expansion node count:  45851
time: 0.008; rss: 57MB	configuration 1
time: 0.000; rss: 57MB	recursion limit
time: 0.000; rss: 57MB	crate injection
time: 0.020; rss: 94MB	macro loading
time: 0.000; rss: 94MB	plugin loading
time: 0.000; rss: 94MB	plugin registration
time: 0.186; rss: 100MB	expansion
time: 0.029; rss: 100MB	configuration 2
time: 0.000; rss: 100MB	gated configuration checking
time: 0.011; rss: 100MB	maybe building test harness
time: 0.008; rss: 100MB	prelude injection
time: 0.001; rss: 100MB	checking that all macro invocations are gone
time: 0.000; rss: 100MB	checking for inline asm in case the target doesn't support it
time: 0.002; rss: 100MB	complete gated feature checking
Post-expansion node count: 103616
time: 0.008; rss: 100MB	assigning node ids
time: 0.003; rss: 102MB	collecting defs
time: 0.010; rss: 113MB	external crate/lib resolution
time: 0.006; rss: 113MB	early lint checks
time: 0.022; rss: 120MB	name resolution
time: 0.011; rss: 126MB	lowering ast -> hir
time: 0.002; rss: 128MB	indexing hir
time: 0.001; rss: 128MB	attribute checking
time: 0.001; rss: 119MB	language item collection
time: 0.002; rss: 119MB	lifetime resolution
time: 0.000; rss: 119MB	looking for entry point
time: 0.000; rss: 119MB	looking for plugin registrar
time: 0.006; rss: 122MB	region resolution
time: 0.001; rss: 122MB	loop checking
time: 0.001; rss: 122MB	static item recursion checking
time: 0.000; rss: 122MB	load_dep_graph
time: 0.018; rss: 125MB	type collecting
time: 0.000; rss: 125MB	variance inference
time: 0.043; rss: 131MB	coherence checking
time: 0.088; rss: 132MB	wf checking
time: 0.034; rss: 132MB	item-types checking
time: 0.496; rss: 143MB	item-bodies checking
time: 0.000; rss: 143MB	drop-impl checking
time: 0.043; rss: 145MB	const checking
time: 0.007; rss: 145MB	privacy checking
time: 0.001; rss: 145MB	stability index
time: 0.006; rss: 145MB	intrinsic checking
time: 0.002; rss: 145MB	effect checking
time: 0.014; rss: 145MB	match checking
time: 0.005; rss: 145MB	liveness checking
time: 0.030; rss: 145MB	rvalue checking
time: 0.059; rss: 154MB	MIR dump
time: 0.039; rss: 154MB	MIR passes
time: 0.072; rss: 154MB	borrow checking
time: 0.003; rss: 154MB	reachability checking
time: 0.006; rss: 154MB	death checking
time: 0.006; rss: 154MB	stability checking
time: 0.000; rss: 154MB	unused lib feature checking
time: 0.050; rss: 154MB	lint checking
time: 0.000; rss: 154MB	resolving dependency formats
time: 0.012; rss: 156MB	Prepare MIR codegen passes
  time: 0.271; rss: 163MB	translation item collection
  time: 0.007; rss: 165MB	codegen unit partitioning
  time: 0.132; rss: 293MB	write metadata
time: 1.697; rss: 293MB	translation
time: 0.001; rss: 293MB	assert dep graph
time: 0.000; rss: 293MB	serialize dep graph
  time: 0.096; rss: 179MB	llvm function passes [0]
  time: 0.050; rss: 183MB	llvm module passes [0]
  time: 1.617; rss: 184MB	codegen passes [0]
  time: 0.001; rss: 136MB	codegen passes [0]
time: 1.962; rss: 136MB	LLVM passes
time: 0.173; rss: 134MB	linking
done
