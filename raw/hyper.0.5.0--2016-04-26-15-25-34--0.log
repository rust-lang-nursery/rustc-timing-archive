commit 897199a0fbe01ab6f7e7f8096656603e238e85a2
Merge: 01a0207 36d9ee3
Author: bors <bors@rust-lang.org>
Date:   Tue Apr 26 12:00:35 2016 -0700

    Auto merge of #33191 - alexcrichton:rustdoc-create-dir-all-racy, r=steveklabnik
    
    rustdoc: Handle concurrent mkdir requests
    
    It's likely that `rustdoc` as a tool is run concurrently in the same output
    (e.g. documenting multiple crates as Cargo does), in which case it needs to
    handle concurrent calls to `fs::create_dir`.
rustc: ./hyper.0.5.0
cargo rustc -- -Ztime-passes -Zinput-stats
    Updating registry `https://github.com/rust-lang/crates.io-index`
   Compiling log v0.3.6
   Compiling traitobject v0.0.1
   Compiling libc v0.2.10
   Compiling winapi v0.2.6
   Compiling libc v0.1.12
   Compiling rustc-serialize v0.3.19
   Compiling pkg-config v0.3.8
   Compiling typeable v0.1.2
   Compiling httparse v0.1.6
   Compiling lazy_static v0.1.16
   Compiling gcc v0.3.27
   Compiling mime v0.0.11
   Compiling bitflags v0.3.3
   Compiling unicase v0.1.0
   Compiling winapi-build v0.1.1
   Compiling matches v0.1.2
   Compiling kernel32-sys v0.2.2
   Compiling num_cpus v0.2.11
   Compiling rand v0.3.14
   Compiling time v0.1.35
   Compiling openssl-sys v0.6.7
   Compiling openssl v0.6.7
   Compiling uuid v0.1.18
   Compiling url v0.2.38
   Compiling cookie v0.1.21
   Compiling hyper v0.5.0 (file:///root/benchmarks/hyper.0.5.0)
time: 0.040; rss: 51MB	parsing
Lines of code:             9154
Pre-expansion node count:  45594
time: 0.009; rss: 52MB	configuration 1
time: 0.000; rss: 52MB	recursion limit
time: 0.000; rss: 52MB	gated macro checking
time: 0.000; rss: 52MB	crate injection
time: 0.004; rss: 57MB	macro loading
time: 0.000; rss: 57MB	plugin loading
time: 0.000; rss: 57MB	plugin registration
time: 0.198; rss: 67MB	expansion
time: 0.005; rss: 67MB	complete gated feature checking 1
time: 0.029; rss: 67MB	configuration 2
time: 0.000; rss: 67MB	gated configuration checking
time: 0.011; rss: 67MB	maybe building test harness
time: 0.009; rss: 67MB	prelude injection
time: 0.001; rss: 67MB	checking that all macro invocations are gone
time: 0.000; rss: 67MB	checking for inline asm in case the target doesn't support it
time: 0.002; rss: 67MB	complete gated feature checking 2
time: 0.001; rss: 67MB	const fn bodies and arguments
Post-expansion node count: 107125
time: 0.008; rss: 67MB	assigning node ids
time: 0.005; rss: 69MB	collecting defs
time: 0.005; rss: 71MB	external crate/lib resolution
time: 0.019; rss: 76MB	lowering ast -> hir
time: 0.004; rss: 78MB	indexing hir
time: 0.001; rss: 78MB	attribute checking
time: 0.007; rss: 78MB	early lint checks
time: 0.001; rss: 70MB	language item collection
time: 0.026; rss: 87MB	name resolution
time: 0.002; rss: 87MB	lifetime resolution
time: 0.000; rss: 87MB	looking for entry point
time: 0.000; rss: 87MB	looking for plugin registrar
time: 0.007; rss: 90MB	region resolution
time: 0.001; rss: 90MB	loop checking
time: 0.001; rss: 90MB	static item recursion checking
time: 0.000; rss: 90MB	load_dep_graph
time: 0.018; rss: 100MB	type collecting
time: 0.000; rss: 100MB	variance inference
time: 0.046; rss: 115MB	coherence checking
time: 0.075; rss: 116MB	wf checking
time: 0.030; rss: 116MB	item-types checking
time: 0.505; rss: 134MB	item-bodies checking
time: 0.000; rss: 134MB	drop-impl checking
time: 0.041; rss: 136MB	const checking
time: 0.009; rss: 136MB	privacy checking
time: 0.001; rss: 136MB	stability index
time: 0.004; rss: 136MB	intrinsic checking
time: 0.002; rss: 136MB	effect checking
time: 0.012; rss: 136MB	match checking
time: 0.005; rss: 136MB	liveness checking
time: 0.034; rss: 137MB	rvalue checking
time: 0.062; rss: 144MB	MIR dump
time: 0.022; rss: 145MB	MIR passes
time: 0.068; rss: 145MB	borrow checking
time: 0.003; rss: 145MB	reachability checking
time: 0.006; rss: 145MB	death checking
time: 0.006; rss: 145MB	stability checking
time: 0.000; rss: 145MB	unused lib feature checking
time: 0.049; rss: 145MB	lint checking
time: 0.000; rss: 145MB	resolving dependency formats
time: 0.010; rss: 147MB	Prepare MIR codegen passes
  time: 0.215; rss: 165MB	translation item collection
  time: 0.011; rss: 166MB	codegen unit partitioning
  time: 0.142; rss: 280MB	write metadata
time: 1.788; rss: 280MB	translation
time: 0.001; rss: 280MB	assert dep graph
time: 0.000; rss: 280MB	serialize dep graph
  time: 0.100; rss: 167MB	llvm function passes [0]
  time: 0.048; rss: 168MB	llvm module passes [0]
  time: 1.639; rss: 173MB	codegen passes [0]
  time: 0.001; rss: 124MB	codegen passes [0]
time: 1.996; rss: 122MB	LLVM passes
time: 0.177; rss: 120MB	linking
done
