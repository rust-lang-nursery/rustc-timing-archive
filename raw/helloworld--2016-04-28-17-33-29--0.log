commit 8da2bcac5db1e091b90cceb19d0496f0f7501c88
Merge: 115c6c8 0fc9f9a
Author: bors <bors@rust-lang.org>
Date:   Thu Apr 28 14:37:30 2016 -0700

    Auto merge of #33171 - michaelwoerister:collector-drop-glue, r=nikomatsakis
    
    Some preliminary work towards making trans "collector driven".
    
    The `trans::collector` already collects all translation items and `trans::partitioning` distributes these translation items into codegen units. The changes in this PR provide the following extensions to this functionality:
    
    1. Drop-glue is handled more accurately now, knowing about the difference between `DropGlueKind::Ty` and `DropGlueKind::TyContents`.
    2. The partitioning module now supports the `FixedUnitCount` strategy which more or less corresponds to the partitioning one gets via supplying `-Ccodegen-units` today.
    3. The partitioning scheme also takes care of assigned LLVM declarations to codegen units, not just definitions (declarations for external items not yet implemented).
    
    It's debatable whether declarations should be handled by the partitioning scheme or whether they should just be emitted on demand.
rustc: ./helloworld
/root/rust/x86_64-unknown-linux-gnu/stage2/bin/rustc hello.rs -Ztime-passes -Zinput-stats
time: 0.000; rss: 44MB	parsing
Lines of code:             3
Pre-expansion node count:  8
time: 0.000; rss: 44MB	configuration 1
time: 0.000; rss: 44MB	recursion limit
time: 0.000; rss: 48MB	crate injection
time: 0.003; rss: 50MB	macro loading
time: 0.000; rss: 50MB	plugin loading
time: 0.000; rss: 50MB	plugin registration
time: 0.001; rss: 50MB	expansion
time: 0.000; rss: 50MB	complete gated feature checking 1
time: 0.000; rss: 50MB	configuration 2
time: 0.000; rss: 50MB	gated configuration checking
time: 0.000; rss: 50MB	maybe building test harness
time: 0.000; rss: 50MB	prelude injection
time: 0.000; rss: 50MB	checking that all macro invocations are gone
time: 0.000; rss: 50MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 50MB	complete gated feature checking 2
time: 0.000; rss: 50MB	const fn bodies and arguments
Post-expansion node count: 68
time: 0.000; rss: 50MB	assigning node ids
time: 0.000; rss: 50MB	collecting defs
time: 0.001; rss: 50MB	external crate/lib resolution
time: 0.000; rss: 50MB	lowering ast -> hir
time: 0.000; rss: 50MB	indexing hir
time: 0.000; rss: 50MB	attribute checking
time: 0.000; rss: 50MB	early lint checks
time: 0.000; rss: 55MB	language item collection
time: 0.001; rss: 59MB	name resolution
time: 0.000; rss: 59MB	lifetime resolution
time: 0.000; rss: 59MB	looking for entry point
time: 0.000; rss: 59MB	looking for plugin registrar
time: 0.000; rss: 59MB	region resolution
time: 0.000; rss: 59MB	loop checking
time: 0.000; rss: 59MB	static item recursion checking
time: 0.000; rss: 59MB	load_dep_graph
time: 0.000; rss: 59MB	type collecting
time: 0.000; rss: 59MB	variance inference
time: 0.005; rss: 68MB	coherence checking
time: 0.000; rss: 68MB	wf checking
time: 0.000; rss: 68MB	item-types checking
time: 0.000; rss: 71MB	item-bodies checking
time: 0.000; rss: 71MB	drop-impl checking
time: 0.000; rss: 71MB	const checking
time: 0.000; rss: 71MB	privacy checking
time: 0.000; rss: 71MB	stability index
time: 0.000; rss: 71MB	intrinsic checking
time: 0.000; rss: 71MB	effect checking
time: 0.000; rss: 71MB	match checking
time: 0.000; rss: 71MB	liveness checking
time: 0.000; rss: 71MB	rvalue checking
time: 0.000; rss: 71MB	MIR dump
time: 0.000; rss: 71MB	MIR passes
time: 0.000; rss: 71MB	borrow checking
time: 0.000; rss: 71MB	reachability checking
time: 0.000; rss: 71MB	death checking
time: 0.000; rss: 71MB	stability checking
time: 0.000; rss: 71MB	unused lib feature checking
time: 0.000; rss: 71MB	lint checking
time: 0.001; rss: 71MB	resolving dependency formats
time: 0.000; rss: 71MB	Prepare MIR codegen passes
  time: 0.000; rss: 71MB	translation item collection
  time: 0.000; rss: 71MB	codegen unit partitioning
  time: 0.000; rss: 79MB	write metadata
time: 0.006; rss: 79MB	translation
time: 0.000; rss: 79MB	assert dep graph
time: 0.000; rss: 79MB	serialize dep graph
  time: 0.000; rss: 79MB	llvm function passes [0]
  time: 0.000; rss: 79MB	llvm module passes [0]
  time: 0.001; rss: 83MB	codegen passes [0]
  time: 0.000; rss: 83MB	codegen passes [0]
time: 0.002; rss: 83MB	LLVM passes
  time: 0.101; rss: 83MB	running linker
time: 0.101; rss: 83MB	linking
done
