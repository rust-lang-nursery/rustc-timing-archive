commit 9376da6f77e8b7ed204ee704b29e96213b69d0f1
Merge: 1bf5fa3 dc22186
Author: bors <bors@rust-lang.org>
Date:   Tue Aug 16 19:44:10 2016 -0700

    Auto merge of #35559 - frewsxcv:slice-iter-as-ref, r=alexcrichton
    
    Implement `AsRef<[T]>` for `std::slice::Iter`.
    
    `AsRef` is designed for conversions that are "cheap" (as per
    the API docs). It is the case that retrieving the underlying
    data of `std::slice::Iter` is cheap. In my opinion, there's no
    ambiguity about what slice data will be returned, otherwise,
    I would be more cautious about implementing `AsRef`.
rustc: ./issue-32278-big-array-of-strings
/root/rust/x86_64-unknown-linux-gnu/stage2/bin/rustc big-array-of-strings.rs -Ztime-passes -Zinput-stats
time: 0.141; rss: 63MB	parsing
Lines of code:             65577
Pre-expansion node count:  65552
time: 0.006; rss: 63MB	configuration
time: 0.000; rss: 63MB	recursion limit
time: 0.000; rss: 63MB	crate injection
time: 0.000; rss: 63MB	plugin loading
time: 0.000; rss: 63MB	plugin registration
time: 0.025; rss: 98MB	expansion
time: 0.000; rss: 98MB	maybe building test harness
time: 0.003; rss: 98MB	assigning node ids
Post-expansion node count: 65565
time: 0.000; rss: 98MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 98MB	complete gated feature checking
time: 0.001; rss: 98MB	collecting defs
time: 0.003; rss: 98MB	external crate/lib resolution
time: 0.004; rss: 98MB	early lint checks
time: 0.000; rss: 98MB	AST validation
time: 0.002; rss: 98MB	name resolution
time: 0.007; rss: 118MB	lowering ast -> hir
time: 0.002; rss: 122MB	indexing hir
time: 0.001; rss: 122MB	attribute checking
time: 0.001; rss: 113MB	language item collection
time: 0.001; rss: 113MB	lifetime resolution
time: 0.000; rss: 113MB	looking for entry point
time: 0.000; rss: 113MB	looking for plugin registrar
time: 0.008; rss: 119MB	region resolution
time: 0.001; rss: 119MB	loop checking
time: 0.002; rss: 119MB	static item recursion checking
time: 0.000; rss: 119MB	load_dep_graph
time: 0.000; rss: 119MB	type collecting
time: 0.000; rss: 119MB	variance inference
time: 0.005; rss: 121MB	coherence checking
time: 0.001; rss: 121MB	wf checking
time: 0.926; rss: 138MB	item-types checking
time: 0.000; rss: 138MB	item-bodies checking
time: 0.000; rss: 138MB	drop-impl checking
time: 0.023; rss: 141MB	const checking
time: 0.002; rss: 141MB	privacy checking
time: 0.001; rss: 141MB	stability index
time: 0.000; rss: 141MB	intrinsic checking
time: 0.000; rss: 141MB	effect checking
time: 0.000; rss: 141MB	match checking
time: 0.001; rss: 141MB	liveness checking
time: 0.000; rss: 141MB	rvalue checking
time: 0.045; rss: 141MB	MIR dump
time: 0.002; rss: 141MB	MIR passes
time: 0.001; rss: 141MB	borrow checking
time: 0.000; rss: 141MB	reachability checking
time: 0.001; rss: 141MB	death checking
time: 0.001; rss: 141MB	stability checking
time: 0.000; rss: 141MB	unused lib feature checking
time: 0.028; rss: 141MB	lint checking
time: 0.001; rss: 141MB	resolving dependency formats
time: 0.001; rss: 141MB	Prepare MIR codegen passes
  time: 0.000; rss: 142MB	write metadata
  time: 0.001; rss: 142MB	translation item collection
  time: 0.000; rss: 142MB	codegen unit partitioning
  time: 0.001; rss: 155MB	internalize symbols
time: 0.074; rss: 155MB	translation
time: 0.000; rss: 155MB	assert dep graph
time: 0.000; rss: 155MB	serialize dep graph
  time: 0.008; rss: 105MB	llvm function passes [0]
  time: 0.000; rss: 105MB	llvm module passes [0]
  time: 0.178; rss: 104MB	codegen passes [0]
  time: 0.000; rss: 104MB	codegen passes [0]
time: 0.188; rss: 104MB	LLVM passes
time: 0.000; rss: 104MB	serialize work products
  time: 0.190; rss: 94MB	running linker
time: 0.191; rss: 94MB	linking
done
