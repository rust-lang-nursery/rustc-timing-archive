commit eb38d426c41aa8487e8cb8a9dafbfcf3528201f9
Merge: dfd98eb cde42cd
Author: bors <bors@rust-lang.org>
Date:   Wed Oct 19 22:05:13 2016 -0700

    Auto merge of #36973 - nnethercote:dep_graph, r=nikomatsakis
    
    Don't enqueue onto a disabled dep_graph.
    
    This commit guards all calls to `DepGraphThreadData::enqueue` with a
    check to make sure it is enabled. This avoids some useless allocation
    and vector manipulations when it is disabled (i.e. when incremental
    compilation is off) which improves speed by 1--2% on most of the
    rustc-benchmarks.
    
    This commit has an observable functional change: when the dep_graph is
    disabled its `shadow_graph` will no longer receive messages. This should
    be ok because these message are only used when debug assertions are
    enabled.
    
    r? @nikomatsakis
rustc: ./syntex-0.42.2-incr-clean
RUSTFLAGS="-Z incremental=incr" \
    cargo rustc -p syntex_syntax -- -Ztime-passes -Zinput-stats -Z incremental-info
   Compiling syntex_syntax v0.42.0
time: 0.108; rss: 75MB	parsing
Lines of code:             33687
Pre-expansion node count:  224033
time: 0.000; rss: 75MB	recursion limit
time: 0.000; rss: 75MB	crate injection
time: 0.000; rss: 75MB	plugin loading
time: 0.000; rss: 75MB	plugin registration
time: 0.266; rss: 148MB	expansion
time: 0.000; rss: 148MB	maybe building test harness
time: 0.006; rss: 148MB	maybe creating a macro crate
Post-expansion node count: 641571
time: 0.000; rss: 148MB	checking for inline asm in case the target doesn't support it
time: 0.012; rss: 148MB	complete gated feature checking
time: 0.022; rss: 148MB	early lint checks
time: 0.007; rss: 148MB	AST validation
time: 0.086; rss: 163MB	name resolution
time: 0.048; rss: 202MB	lowering ast -> hir
time: 0.009; rss: 213MB	indexing hir
time: 0.006; rss: 213MB	attribute checking
time: 0.005; rss: 165MB	language item collection
time: 0.011; rss: 165MB	lifetime resolution
time: 0.000; rss: 165MB	looking for entry point
time: 0.000; rss: 165MB	looking for plugin registrar
time: 0.043; rss: 175MB	region resolution
time: 0.006; rss: 175MB	loop checking
time: 0.006; rss: 175MB	static item recursion checking
time: 0.528; rss: 176MB	compute_incremental_hashes_map
time: 0.000; rss: 176MB	load_dep_graph
time: 0.042; rss: 182MB	type collecting
time: 0.001; rss: 182MB	variance inference
time: 0.034; rss: 185MB	coherence checking
time: 0.100; rss: 188MB	wf checking
time: 0.185; rss: 194MB	item-types checking
time: 3.792; rss: 245MB	item-bodies checking
time: 0.000; rss: 245MB	drop-impl checking
time: 0.247; rss: 249MB	const checking
time: 0.051; rss: 249MB	privacy checking
time: 0.007; rss: 249MB	stability index
time: 0.021; rss: 249MB	intrinsic checking
time: 0.017; rss: 249MB	effect checking
time: 0.055; rss: 249MB	match checking
time: 0.052; rss: 240MB	liveness checking
time: 0.210; rss: 240MB	rvalue checking
time: 0.402; rss: 428MB	MIR dump
  time: 0.057; rss: 431MB	SimplifyCfg
  time: 0.076; rss: 431MB	QualifyAndPromoteConstants
  time: 0.109; rss: 431MB	TypeckMir
  time: 0.004; rss: 431MB	SimplifyBranches
  time: 0.031; rss: 432MB	SimplifyCfg
time: 0.278; rss: 432MB	MIR passes
time: 0.553; rss: 432MB	borrow checking
time: 0.018; rss: 432MB	reachability checking
time: 0.043; rss: 432MB	death checking
time: 0.040; rss: 432MB	stability checking
time: 0.000; rss: 432MB	unused lib feature checking
time: 0.212; rss: 432MB	lint checking
time: 0.000; rss: 432MB	resolving dependency formats
  time: 0.003; rss: 432MB	NoLandingPads
  time: 0.026; rss: 432MB	SimplifyCfg
  time: 0.068; rss: 440MB	EraseRegions
  time: 0.011; rss: 440MB	AddCallGuards
  time: 0.283; rss: 463MB	ElaborateDrops
  time: 0.003; rss: 463MB	NoLandingPads
  time: 0.054; rss: 461MB	SimplifyCfg
  time: 0.030; rss: 461MB	InstCombine
  time: 0.011; rss: 461MB	Deaggregator
  time: 0.002; rss: 461MB	CopyPropagation
  time: 0.009; rss: 461MB	AddCallGuards
  time: 0.002; rss: 461MB	PreTrans
time: 0.502; rss: 461MB	Prepare MIR codegen passes
  time: 0.060; rss: 468MB	write metadata
  time: 0.418; rss: 477MB	translation item collection
  time: 0.057; rss: 487MB	codegen unit partitioning
  time: 0.048; rss: 730MB	internalize symbols
time: 4.860; rss: 609MB	translation
time: 0.000; rss: 609MB	assert dep graph
time: 0.000; rss: 609MB	serialize dep graph
incremental: re-using 0 out of 1 modules
  time: 0.512; rss: 408MB	llvm function passes [0]
  time: 0.242; rss: 415MB	llvm module passes [0]
  time: 9.981; rss: 418MB	codegen passes [0]
  time: 0.000; rss: 418MB	codegen passes [0]
time: 11.470; rss: 418MB	LLVM passes
time: 0.000; rss: 418MB	serialize work products
time: 0.661; rss: 106MB	linking
done
