commit 435095f32af93d27baf1390fa34e7dfff5eb7d5d
Merge: cda7c1c fa23d10
Author: bors <bors@rust-lang.org>
Date:   Wed Apr 27 18:35:29 2016 -0700

    Auto merge of #32791 - LeoTestard:feature-gate-clean, r=nikomatsakis
    
    Feature gate clean
    
    This PR does a bit of cleaning in the feature-gate-handling code of libsyntax. It also fixes two bugs (#32782 and #32648). Changes include:
    
    * Change the way the existing features are declared in `feature_gate.rs`. The array of features and the `Features` struct are now defined together by a single macro. `featureck.py` has been updated accordingly. Note: there are now three different arrays for active, removed and accepted features instead of a single one with a `Status` item to tell wether a feature is active, removed, or accepted. This is mainly due to the way I implemented my macro in the first time and I can switch back to a single array if needed. But an advantage of the way it is now is that when an active feature is used, the parser only searches through the list of active features. It goes through the other arrays only if the feature is not found. I like to think that error checking (in this case, checking that an used feature is active) does not slow down compilation of valid code. :) But this is not very important...
    * Feature-gate checking pass now use the `Features` structure instead of looking through a string vector. This should speed them up a bit. The construction of the `Features` struct should be faster too since it is build directly when parsing features instead of calling `has_feature` dozens of times.
    * The MacroVisitor pass has been removed, it was mostly useless since the `#[cfg]-stripping` phase happens before (fixes #32648). The features that must actually be checked before expansion are now checked at the time they are used. This also allows us to check attributes that are generated by macro expansion and not visible to MacroVisitor, but are also removed by macro expansion and thus not visible to PostExpansionVisitor either. This fixes #32782. Note that in order for `#[derive_*]` to be feature-gated but still accepted when generated by `#[derive(Trait)]`, I had to do a little bit of trickery with spans that I'm not totally confident into. Please review that part carefully. (It's in `libsyntax_ext/deriving/mod.rs`.)::
    
    Note: this is a [breaking change], since programs with feature-gated attributes on macro-generated macro invocations were not rejected before. For example:
    
    ```rust
    macro_rules! bar (
        () => ()
    );
    
    macro_rules! foo (
        () => (
            #[allow_internal_unstable] //~ ERROR allow_internal_unstable side-steps
            bar!();
        );
    );
    ```
    foo!();
rustc: ./issue-32278-big-array-of-strings
/root/rust/x86_64-unknown-linux-gnu/stage2/bin/rustc big-array-of-strings.rs -Ztime-passes -Zinput-stats
time: 0.158; rss: 68MB	parsing
Lines of code:             65577
Pre-expansion node count:  65552
time: 0.012; rss: 68MB	configuration 1
time: 0.000; rss: 68MB	recursion limit
time: 0.000; rss: 68MB	crate injection
time: 0.004; rss: 73MB	macro loading
time: 0.000; rss: 73MB	plugin loading
time: 0.000; rss: 73MB	plugin registration
time: 0.041; rss: 77MB	expansion
time: 0.001; rss: 77MB	complete gated feature checking 1
time: 0.011; rss: 77MB	configuration 2
time: 0.000; rss: 77MB	gated configuration checking
time: 0.005; rss: 77MB	maybe building test harness
time: 0.005; rss: 77MB	prelude injection
time: 0.000; rss: 77MB	checking that all macro invocations are gone
time: 0.000; rss: 77MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 77MB	complete gated feature checking 2
time: 0.001; rss: 77MB	const fn bodies and arguments
Post-expansion node count: 65565
time: 0.007; rss: 77MB	assigning node ids
time: 0.001; rss: 77MB	collecting defs
time: 0.002; rss: 78MB	external crate/lib resolution
time: 0.009; rss: 91MB	lowering ast -> hir
time: 0.002; rss: 93MB	indexing hir
time: 0.001; rss: 93MB	attribute checking
time: 0.008; rss: 93MB	early lint checks
time: 0.001; rss: 81MB	language item collection
time: 0.002; rss: 84MB	name resolution
time: 0.001; rss: 84MB	lifetime resolution
time: 0.000; rss: 84MB	looking for entry point
time: 0.000; rss: 84MB	looking for plugin registrar
time: 0.008; rss: 90MB	region resolution
time: 0.001; rss: 90MB	loop checking
time: 0.002; rss: 90MB	static item recursion checking
time: 0.000; rss: 90MB	load_dep_graph
time: 0.000; rss: 90MB	type collecting
time: 0.000; rss: 90MB	variance inference
time: 0.006; rss: 100MB	coherence checking
time: 0.001; rss: 100MB	wf checking
time: 0.747; rss: 204MB	item-types checking
time: 0.000; rss: 204MB	item-bodies checking
time: 0.000; rss: 204MB	drop-impl checking
time: 0.020; rss: 206MB	const checking
time: 0.003; rss: 206MB	privacy checking
time: 0.001; rss: 206MB	stability index
time: 0.001; rss: 206MB	intrinsic checking
time: 0.001; rss: 206MB	effect checking
time: 0.001; rss: 206MB	match checking
time: 0.001; rss: 206MB	liveness checking
time: 0.000; rss: 206MB	rvalue checking
time: 0.001; rss: 206MB	MIR dump
time: 0.000; rss: 206MB	MIR passes
time: 0.001; rss: 206MB	borrow checking
time: 0.000; rss: 206MB	reachability checking
time: 0.001; rss: 206MB	death checking
time: 0.001; rss: 206MB	stability checking
time: 0.000; rss: 206MB	unused lib feature checking
time: 0.030; rss: 206MB	lint checking
time: 0.001; rss: 206MB	resolving dependency formats
time: 0.000; rss: 206MB	Prepare MIR codegen passes
  time: 0.001; rss: 207MB	translation item collection
  time: 0.000; rss: 207MB	codegen unit partitioning
  time: 0.000; rss: 213MB	write metadata
time: 0.084; rss: 213MB	translation
time: 0.000; rss: 213MB	assert dep graph
time: 0.000; rss: 213MB	serialize dep graph
  time: 0.003; rss: 89MB	llvm function passes [0]
  time: 0.000; rss: 89MB	llvm module passes [0]
  time: 0.163; rss: 91MB	codegen passes [0]
  time: 0.000; rss: 79MB	codegen passes [0]
time: 0.178; rss: 79MB	LLVM passes
  time: 0.180; rss: 79MB	running linker
time: 0.181; rss: 79MB	linking
done
