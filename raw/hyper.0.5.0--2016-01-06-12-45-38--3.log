commit e8c337b5ca883285e6215f1f669d5556842d1520
Merge: 21b025f 93996b1
Author: bors <bors@rust-lang.org>
Date:   Wed Jan 6 18:37:57 2016 +0000

    Auto merge of #30532 - nikomatsakis:cross-item-dependencies, r=mw
    
    This is roughly the same as my previous PR that created a dependency graph, but that:
    
    1. The dependency graph is only optionally constructed, though this doesn't seem to make much of a difference in terms of overhead (see measurements below).
    2. The dependency graph is simpler (I combined a lot of nodes).
    3. The dependency graph debugging facilities are much better: you can now use `RUST_DEP_GRAPH_FILTER` to filter the dep graph to just the nodes you are interested in, which is super help.
    4. The tests are somewhat more elaborate, including a few known bugs I need to fix in a second pass.
    
    This is potentially a `[breaking-change]` for plugin authors. If you are poking about in tcx state or something like that, you probably want to add `let _ignore = tcx.dep_graph.in_ignore();`, which will cause your reads/writes to be ignored and not affect the dep-graph.
    
    After this, or perhaps as an add-on to this PR in some cases, what I would like to do is the following:
    
    - [x] Write-up a little guide to how to use this system, the debugging options available, and what the possible failure modes are.
    - [ ] Introduce read-only and perhaps the `Meta` node
    - [x] Replace "memoization tasks" with node from the map itself
    - [ ] Fix the shortcomings, obviously! Notably, the HIR map needs to register reads, and there is some state that is not yet tracked. (Maybe as a separate PR.)
    - [x] Refactor the dep-graph code so that the actual maintenance of the dep-graph occurs in a parallel thread, and the main thread simply throws things into a shared channel (probably a fixed-size channel). There is no reason for dep-graph construction to be on the main thread. (Maybe as a separate PR.)
    
    Regarding performance: adding this tracking does add some overhead, approximately 2% in my measurements (I was comparing the build times for rustdoc). Interestingly, enabling or disabling tracking doesn't seem to do very much. I want to poke at this some more and gather a bit more data -- in some tests I've seen that 2% go away, but on others it comes back. It's not entirely clear to me if that 2% is truly due to constructing the dep-graph at all.
    
    The next big step after this is write some code to dump the dep-graph to disk and reload it.
    
    r? @michaelwoerister
rustc: ./hyper.0.5.0
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling hyper v0.5.0 (file:///root/benchmarks/hyper.0.5.0)
time: 0.033; rss: 38MB	parsing
Lines of code:             9154
Pre-expansion node count:  45594
time: 0.009; rss: 38MB	configuration 1
time: 0.000; rss: 38MB	recursion limit
time: 0.000; rss: 38MB	gated macro checking
time: 0.000; rss: 38MB	crate injection
time: 0.005; rss: 44MB	macro loading
time: 0.000; rss: 44MB	plugin loading
time: 0.000; rss: 44MB	plugin registration
time: 0.207; rss: 53MB	expansion
time: 0.005; rss: 53MB	complete gated feature checking 1
time: 0.035; rss: 53MB	configuration 2
time: 0.000; rss: 53MB	gated configuration checking
time: 0.013; rss: 53MB	maybe building test harness
time: 0.011; rss: 53MB	prelude injection
time: 0.001; rss: 53MB	checking that all macro invocations are gone
time: 0.000; rss: 53MB	checking for inline asm in case the target doesn't support it
time: 0.002; rss: 53MB	complete gated feature checking 2
Post-expansion node count: 109258
time: 0.010; rss: 53MB	assigning node ids
time: 0.011; rss: 57MB	lowering ast -> hir
time: 0.005; rss: 61MB	indexing hir
time: 0.000; rss: 61MB	attribute checking
time: 0.005; rss: 61MB	early lint checks
time: 0.004; rss: 58MB	external crate/lib resolution
time: 0.001; rss: 58MB	language item collection
time: 0.031; rss: 80MB	resolution
time: 0.002; rss: 80MB	lifetime resolution
time: 0.000; rss: 80MB	looking for entry point
time: 0.000; rss: 80MB	looking for plugin registrar
time: 0.006; rss: 82MB	region resolution
time: 0.001; rss: 82MB	loop checking
time: 0.001; rss: 82MB	static item recursion checking
time: 0.013; rss: 86MB	type collecting
time: 0.000; rss: 86MB	variance inference
time: 0.039; rss: 106MB	coherence checking
time: 0.068; rss: 106MB	wf checking
time: 0.026; rss: 107MB	item-types checking
time: 0.509; rss: 127MB	item-bodies checking
time: 0.000; rss: 127MB	drop-impl checking
time: 0.043; rss: 129MB	const checking
time: 0.008; rss: 129MB	privacy checking
time: 0.001; rss: 129MB	stability index
time: 0.004; rss: 129MB	intrinsic checking
time: 0.002; rss: 129MB	effect checking
time: 0.013; rss: 129MB	match checking
time: 0.050; rss: 129MB	MIR dump
time: 0.006; rss: 129MB	liveness checking
time: 0.074; rss: 129MB	borrow checking
time: 0.036; rss: 129MB	rvalue checking
time: 0.003; rss: 129MB	reachability checking
time: 0.006; rss: 129MB	death checking
time: 0.007; rss: 129MB	stability checking
time: 0.000; rss: 129MB	unused lib feature checking
time: 0.048; rss: 129MB	lint checking
time: 0.000; rss: 129MB	resolving dependency formats
time: 0.008; rss: 133MB	erasing regions from MIR
  time: 0.136; rss: 273MB	write metadata
time: 1.430; rss: 273MB	translation
  time: 0.100; rss: 167MB	llvm function passes [0]
  time: 0.053; rss: 168MB	llvm module passes [0]
  time: 1.639; rss: 213MB	codegen passes [0]
  time: 0.001; rss: 170MB	codegen passes [0]
time: 2.021; rss: 170MB	LLVM passes
time: 0.179; rss: 169MB	linking
done
