commit 9d4b6fa51d86ad6141679a5a157fcd9bca48064c
Merge: 478c0d1 06242ff
Author: bors <bors@rust-lang.org>
Date:   Wed Nov 16 08:25:38 2016 -0800

    Auto merge of #37545 - alexcrichton:crt-static, r=brson
    
    rustc: Implement #[link(cfg(..))] and crt-static
    
    This commit is an implementation of [RFC 1721] which adds a new target feature
    to the compiler, `crt-static`, which can be used to select how the C runtime for
    a target is linked. Most targets dynamically linke the C runtime by default with
    the notable exception of some of the musl targets.
    
    [RFC 1721]: https://github.com/rust-lang/rfcs/blob/master/text/1721-crt-static.md
    
    This commit first adds the new target-feature, `crt-static`. If enabled, then
    the `cfg(target_feature = "crt-static")` will be available. Targets like musl
    will have this enabled by default. This feature can be controlled through the
    standard target-feature interface, `-C target-feature=+crt-static` or
    `-C target-feature=-crt-static`.
    
    Next this adds an gated and unstable `#[link(cfg(..))]` feature to enable the
    `crt-static` semantics we want with libc. The exact behavior of this attribute
    is a little squishy, but it's intended to be a forever-unstable
    implementation detail of the liblibc crate.
    
    Specifically the `#[link(cfg(..))]` annotation means that the `#[link]`
    directive is only active in a compilation unit if that `cfg` value is satisfied.
    For example when compiling an rlib, these directives are just encoded and
    ignored for dylibs, and all staticlibs are continued to be put into the rlib as
    usual. When placing that rlib into a staticlib, executable, or dylib, however,
    the `cfg` is evaluated *as if it were defined in the final artifact* and the
    library is decided to be linked or not.
    
    Essentially, what'll happen is:
    
    * On MSVC with `-C target-feature=-crt-static`, the `msvcrt.lib` library will be
      linked to.
    * On MSVC with `-C target-feature=+crt-static`, the `libcmt.lib` library will be
      linked to.
    * On musl with `-C target-feature=-crt-static`, the object files in liblibc.rlib
      are removed and `-lc` is passed instead.
    * On musl with `-C target-feature=+crt-static`, the object files in liblibc.rlib
      are used and `-lc` is not passed.
    
    This commit does **not** include an update to the liblibc module to implement
    these changes. I plan to do that just after the 1.14.0 beta release is cut to
    ensure we get ample time to test this feature.
    
    cc #37406
rustc: ./hyper.0.5.0
cargo rustc  -- -Ztime-passes -Zinput-stats
   Compiling hyper v0.5.0 (file:///root/benchmarks/hyper.0.5.0)
time: 0.023; rss: 48MB	parsing
Lines of code:             9003
Pre-expansion node count:  44055
time: 0.000; rss: 48MB	recursion limit
time: 0.000; rss: 48MB	crate injection
time: 0.000; rss: 48MB	plugin loading
time: 0.000; rss: 48MB	plugin registration
time: 0.076; rss: 87MB	expansion
time: 0.000; rss: 87MB	maybe building test harness
time: 0.001; rss: 87MB	maybe creating a macro crate
Post-expansion node count: 101769
time: 0.000; rss: 87MB	checking for inline asm in case the target doesn't support it
time: 0.002; rss: 87MB	complete gated feature checking
time: 0.003; rss: 87MB	early lint checks
time: 0.001; rss: 87MB	AST validation
time: 0.015; rss: 91MB	name resolution
time: 0.008; rss: 96MB	lowering ast -> hir
time: 0.001; rss: 96MB	indexing hir
time: 0.001; rss: 96MB	attribute checking
time: 0.001; rss: 91MB	language item collection
time: 0.002; rss: 91MB	lifetime resolution
time: 0.000; rss: 91MB	looking for entry point
time: 0.000; rss: 91MB	looking for plugin registrar
time: 0.005; rss: 95MB	region resolution
time: 0.001; rss: 95MB	loop checking
time: 0.000; rss: 95MB	static item recursion checking
time: 0.036; rss: 95MB	compute_incremental_hashes_map
time: 0.000; rss: 95MB	load_dep_graph
time: 0.015; rss: 97MB	type collecting
time: 0.000; rss: 97MB	variance inference
time: 0.014; rss: 98MB	coherence checking
time: 0.041; rss: 101MB	wf checking
time: 0.025; rss: 101MB	item-types checking
time: 0.293; rss: 109MB	item-bodies checking
time: 0.000; rss: 109MB	drop-impl checking
time: 0.031; rss: 110MB	const checking
time: 0.005; rss: 110MB	privacy checking
time: 0.001; rss: 110MB	stability index
time: 0.003; rss: 110MB	intrinsic checking
time: 0.001; rss: 110MB	effect checking
time: 0.007; rss: 110MB	match checking
time: 0.004; rss: 111MB	liveness checking
time: 0.020; rss: 111MB	rvalue checking
time: 0.047; rss: 132MB	MIR dump
  time: 0.006; rss: 132MB	SimplifyCfg
  time: 0.011; rss: 135MB	QualifyAndPromoteConstants
  time: 0.013; rss: 135MB	TypeckMir
  time: 0.001; rss: 135MB	SimplifyBranches
  time: 0.003; rss: 135MB	SimplifyCfg
time: 0.034; rss: 135MB	MIR cleanup and validation
time: 0.051; rss: 135MB	borrow checking
time: 0.003; rss: 135MB	reachability checking
time: 0.004; rss: 135MB	death checking
time: 0.004; rss: 135MB	stability checking
time: 0.000; rss: 135MB	unused lib feature checking
time: 0.037; rss: 135MB	lint checking
time: 0.000; rss: 135MB	resolving dependency formats
  time: 0.000; rss: 135MB	NoLandingPads
  time: 0.003; rss: 135MB	SimplifyCfg
  time: 0.007; rss: 135MB	EraseRegions
  time: 0.001; rss: 135MB	AddCallGuards
  time: 0.021; rss: 137MB	ElaborateDrops
  time: 0.000; rss: 137MB	NoLandingPads
  time: 0.005; rss: 137MB	SimplifyCfg
  time: 0.003; rss: 137MB	InstCombine
  time: 0.003; rss: 137MB	Deaggregator
  time: 0.000; rss: 137MB	CopyPropagation
  time: 0.004; rss: 137MB	SimplifyLocals
  time: 0.001; rss: 137MB	AddCallGuards
  time: 0.000; rss: 137MB	PreTrans
time: 0.050; rss: 137MB	MIR optimisations
  time: 0.011; rss: 141MB	write metadata
  time: 0.121; rss: 147MB	translation item collection
  time: 0.015; rss: 151MB	codegen unit partitioning
  time: 0.013; rss: 204MB	internalize symbols
time: 0.928; rss: 204MB	translation
time: 0.000; rss: 204MB	assert dep graph
time: 0.000; rss: 204MB	serialize dep graph
  time: 0.088; rss: 149MB	llvm function passes [0]
  time: 0.041; rss: 151MB	llvm module passes [0]
  time: 1.632; rss: 152MB	codegen passes [0]
  time: 0.000; rss: 152MB	codegen passes [0]
time: 1.899; rss: 152MB	LLVM passes
time: 0.000; rss: 152MB	serialize work products
time: 0.068; rss: 95MB	linking
done
