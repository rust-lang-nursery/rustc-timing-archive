commit 46957f05771a427545c792f69b37f8e05dcbb15d
Merge: 3210fd5 fb90e4c
Author: bors <bors@rust-lang.org>
Date:   Wed Oct 5 18:10:34 2016 -0700

    Auto merge of #36893 - apasel422:issue-32114, r=alexcrichton
    
    Restore `DISCONNECTED` state in `oneshot::Packet::send`
    
    Closes #32114
    
    I'm not sure if this is the best approach, but the current action of swapping `DISCONNECTED` with `DATA` seems wrong. Additionally, it is strange that the `send` method (and others in the `oneshot` module) takes `&mut self` despite performing atomic operations, as this requires extra discipline to avoid data races and lets us use methods like `AtomicUsize::get_mut` instead of methods that require a memory ordering.
rustc: ./syntex-0.42.2
cargo rustc -p syntex_syntax -- -Ztime-passes -Zinput-stats
   Compiling log v0.3.6
   Compiling libc v0.2.15
   Compiling rustc-serialize v0.3.19
   Compiling winapi v0.2.8
   Compiling bitflags v0.5.0
   Compiling winapi-build v0.1.1
   Compiling unicode-xid v0.0.3
   Compiling kernel32-sys v0.2.2
   Compiling term v0.4.4
   Compiling syntex_pos v0.42.0
   Compiling syntex_errors v0.42.0
   Compiling syntex_syntax v0.42.0
time: 0.108; rss: 76MB	parsing
Lines of code:             33687
Pre-expansion node count:  224033
time: 0.000; rss: 76MB	recursion limit
time: 0.000; rss: 76MB	crate injection
time: 0.000; rss: 76MB	plugin loading
time: 0.000; rss: 76MB	plugin registration
time: 0.272; rss: 146MB	expansion
time: 0.000; rss: 146MB	maybe building test harness
time: 0.006; rss: 146MB	maybe creating a macro crate
Post-expansion node count: 641571
time: 0.000; rss: 146MB	checking for inline asm in case the target doesn't support it
time: 0.014; rss: 146MB	complete gated feature checking
time: 0.023; rss: 146MB	early lint checks
time: 0.008; rss: 146MB	AST validation
time: 0.084; rss: 161MB	name resolution
time: 0.051; rss: 203MB	lowering ast -> hir
time: 0.009; rss: 211MB	indexing hir
time: 0.007; rss: 211MB	attribute checking
time: 0.006; rss: 162MB	language item collection
time: 0.012; rss: 162MB	lifetime resolution
time: 0.000; rss: 162MB	looking for entry point
time: 0.000; rss: 162MB	looking for plugin registrar
time: 0.047; rss: 174MB	region resolution
time: 0.006; rss: 174MB	loop checking
time: 0.006; rss: 174MB	static item recursion checking
time: 0.262; rss: 175MB	compute_incremental_hashes_map
time: 0.000; rss: 175MB	load_dep_graph
time: 0.080; rss: 178MB	type collecting
time: 0.001; rss: 178MB	variance inference
time: 0.039; rss: 181MB	coherence checking
time: 0.100; rss: 184MB	wf checking
time: 0.195; rss: 189MB	item-types checking
time: 3.952; rss: 242MB	item-bodies checking
time: 0.000; rss: 242MB	drop-impl checking
time: 0.314; rss: 242MB	const checking
time: 0.057; rss: 242MB	privacy checking
time: 0.008; rss: 242MB	stability index
time: 0.023; rss: 242MB	intrinsic checking
time: 0.019; rss: 242MB	effect checking
time: 0.058; rss: 242MB	match checking
time: 0.056; rss: 237MB	liveness checking
time: 0.284; rss: 237MB	rvalue checking
time: 0.417; rss: 426MB	MIR dump
  time: 0.063; rss: 430MB	SimplifyCfg
  time: 0.083; rss: 430MB	QualifyAndPromoteConstants
  time: 0.110; rss: 430MB	TypeckMir
  time: 0.005; rss: 430MB	SimplifyBranches
  time: 0.041; rss: 430MB	SimplifyCfg
time: 0.301; rss: 430MB	MIR passes
time: 0.693; rss: 430MB	borrow checking
time: 0.018; rss: 430MB	reachability checking
time: 0.046; rss: 430MB	death checking
time: 0.043; rss: 430MB	stability checking
time: 0.000; rss: 430MB	unused lib feature checking
time: 0.217; rss: 430MB	lint checking
time: 0.000; rss: 430MB	resolving dependency formats
  time: 0.003; rss: 430MB	NoLandingPads
  time: 0.029; rss: 430MB	SimplifyCfg
  time: 0.073; rss: 443MB	EraseRegions
  time: 0.012; rss: 443MB	AddCallGuards
  time: 1.057; rss: 457MB	ElaborateDrops
  time: 0.003; rss: 457MB	NoLandingPads
  time: 0.059; rss: 458MB	SimplifyCfg
  time: 0.030; rss: 458MB	InstCombine
  time: 0.012; rss: 458MB	Deaggregator
  time: 0.003; rss: 458MB	CopyPropagation
  time: 0.009; rss: 458MB	AddCallGuards
  time: 0.003; rss: 458MB	PreTrans
time: 1.293; rss: 458MB	Prepare MIR codegen passes
  time: 0.266; rss: 466MB	write metadata
  time: 0.469; rss: 476MB	translation item collection
  time: 0.068; rss: 480MB	codegen unit partitioning
  time: 0.058; rss: 726MB	internalize symbols
time: 5.173; rss: 604MB	translation
time: 0.000; rss: 604MB	assert dep graph
time: 0.000; rss: 604MB	serialize dep graph
  time: 0.514; rss: 415MB	llvm function passes [0]
  time: 0.251; rss: 420MB	llvm module passes [0]
  time: 10.107; rss: 422MB	codegen passes [0]
  time: 0.001; rss: 424MB	codegen passes [0]
time: 11.617; rss: 424MB	LLVM passes
time: 0.000; rss: 424MB	serialize work products
time: 0.656; rss: 108MB	linking
done
