commit 933f4717104aba3af71ced7e5a513f8c0bd6077a
Merge: 147371f 3d766a0
Author: bors <bors@rust-lang.org>
Date:   Thu Sep 1 11:56:51 2016 -0700

    Auto merge of #34494 - CensoredUsername:allow_sysV64_abi, r=nagisa
    
    Allow specification of the system V AMD64 ABI constraint.
    
    This can be specified using `extern "sysV64" fn` on all platforms.
    
    This ABI is used as the C ABI on unix platforms, but can only be specified there using extern "C". It was impossible to specify on other platforms. Meanwhile the win64 ABI, which was the extern "C" ABI on the windows platform could be specified on other platforms using extern "win64".
    
    This pull request adds the the "sysV64" ABI constraint which exposes this calling convention on platforms where it is not the C ABI.
rustc: ./issue-32278-big-array-of-strings
/root/rust/x86_64-unknown-linux-gnu/stage2/bin/rustc big-array-of-strings.rs -Ztime-passes -Zinput-stats
time: 0.141; rss: 64MB	parsing
Lines of code:             65577
Pre-expansion node count:  65552
time: 0.005; rss: 64MB	configuration
time: 0.000; rss: 64MB	recursion limit
time: 0.000; rss: 64MB	crate injection
time: 0.000; rss: 64MB	plugin loading
time: 0.000; rss: 64MB	plugin registration
time: 0.023; rss: 86MB	expansion
time: 0.000; rss: 86MB	maybe building test harness
time: 0.004; rss: 86MB	assigning node ids
Post-expansion node count: 65565
time: 0.000; rss: 86MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 86MB	complete gated feature checking
time: 0.000; rss: 86MB	collecting defs
time: 0.003; rss: 86MB	external crate/lib resolution
time: 0.004; rss: 86MB	early lint checks
time: 0.000; rss: 86MB	AST validation
time: 0.002; rss: 86MB	name resolution
time: 0.007; rss: 104MB	lowering ast -> hir
time: 0.002; rss: 108MB	indexing hir
time: 0.001; rss: 108MB	attribute checking
time: 0.001; rss: 99MB	language item collection
time: 0.001; rss: 99MB	lifetime resolution
time: 0.000; rss: 99MB	looking for entry point
time: 0.000; rss: 99MB	looking for plugin registrar
time: 0.009; rss: 105MB	region resolution
time: 0.001; rss: 105MB	loop checking
time: 0.002; rss: 105MB	static item recursion checking
time: 0.006; rss: 105MB	compute_incremental_hashes_map
time: 0.000; rss: 105MB	load_dep_graph
time: 0.000; rss: 105MB	type collecting
time: 0.000; rss: 105MB	variance inference
time: 0.005; rss: 107MB	coherence checking
time: 0.001; rss: 107MB	wf checking
time: 0.687; rss: 118MB	item-types checking
time: 0.000; rss: 118MB	item-bodies checking
time: 0.000; rss: 118MB	drop-impl checking
time: 0.023; rss: 115MB	const checking
time: 0.002; rss: 115MB	privacy checking
time: 0.001; rss: 115MB	stability index
time: 0.000; rss: 115MB	intrinsic checking
time: 0.000; rss: 115MB	effect checking
time: 0.000; rss: 115MB	match checking
time: 0.001; rss: 115MB	liveness checking
time: 0.000; rss: 115MB	rvalue checking
time: 0.045; rss: 126MB	MIR dump
time: 0.002; rss: 126MB	MIR passes
time: 0.001; rss: 126MB	borrow checking
time: 0.000; rss: 126MB	reachability checking
time: 0.001; rss: 126MB	death checking
time: 0.001; rss: 126MB	stability checking
time: 0.000; rss: 126MB	unused lib feature checking
time: 0.026; rss: 127MB	lint checking
time: 0.001; rss: 127MB	resolving dependency formats
time: 0.001; rss: 127MB	Prepare MIR codegen passes
  time: 0.000; rss: 127MB	write metadata
  time: 0.001; rss: 127MB	translation item collection
  time: 0.000; rss: 127MB	codegen unit partitioning
  time: 0.001; rss: 135MB	internalize symbols
time: 0.064; rss: 134MB	translation
time: 0.000; rss: 134MB	assert dep graph
time: 0.000; rss: 134MB	serialize dep graph
  time: 0.008; rss: 90MB	llvm function passes [0]
  time: 0.000; rss: 90MB	llvm module passes [0]
  time: 0.173; rss: 89MB	codegen passes [0]
  time: 0.000; rss: 89MB	codegen passes [0]
time: 0.182; rss: 89MB	LLVM passes
time: 0.000; rss: 89MB	serialize work products
  time: 0.193; rss: 79MB	running linker
time: 0.194; rss: 79MB	linking
done
