commit 1f131fbe7799b9c3d4a775798b90760f7c11ef33
Merge: 53a03b5 6908e4e
Author: bors <bors@rust-lang.org>
Date:   Mon Mar 28 10:37:30 2016 -0700

    Auto merge of #32560 - alexcrichton:metadata-for-our-crates, r=nikomatsakis
    
    mk: Add `-C metadata` for compiling crates we ship
    
    This should re-enable all external builds of crates with the same name. Right
    now Cargo doesn't pass `-C metadata` for the top-level library being compiled,
    so if that library is called `libc`, for example, then it won't be able to link
    to the standard library which *also* has a `libc` library compiled without `-C
    metadata`. This can result in naming conflicts which need to be resolved.
    
    By passing `-C metadata` to the in-tree crates we ship it should add some extra
    salt to all symbol names to ensure that they don't collide.
    
    Closes #32532
rustc: ./issue-32278-big-array-of-strings
/root/rust/x86_64-unknown-linux-gnu/stage2/bin/rustc big-array-of-strings.rs -Ztime-passes -Zinput-stats
time: 0.150; rss: 58MB	parsing
Lines of code:             65577
Pre-expansion node count:  65552
time: 0.011; rss: 58MB	configuration 1
time: 0.000; rss: 58MB	recursion limit
time: 0.001; rss: 58MB	gated macro checking
time: 0.000; rss: 58MB	crate injection
time: 0.004; rss: 60MB	macro loading
time: 0.000; rss: 60MB	plugin loading
time: 0.000; rss: 60MB	plugin registration
time: 0.041; rss: 66MB	expansion
time: 0.001; rss: 66MB	complete gated feature checking 1
time: 0.011; rss: 66MB	configuration 2
time: 0.000; rss: 66MB	gated configuration checking
time: 0.006; rss: 66MB	maybe building test harness
time: 0.005; rss: 66MB	prelude injection
time: 0.000; rss: 66MB	checking that all macro invocations are gone
time: 0.000; rss: 66MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 66MB	complete gated feature checking 2
time: 0.001; rss: 66MB	const fn bodies and arguments
Post-expansion node count: 65565
time: 0.006; rss: 66MB	assigning node ids
time: 0.010; rss: 80MB	lowering ast -> hir
time: 0.002; rss: 82MB	indexing hir
time: 0.001; rss: 82MB	attribute checking
time: 0.009; rss: 82MB	early lint checks
time: 0.001; rss: 69MB	external crate/lib resolution
time: 0.001; rss: 69MB	language item collection
time: 0.002; rss: 72MB	resolution
time: 0.001; rss: 72MB	lifetime resolution
time: 0.000; rss: 72MB	looking for entry point
time: 0.000; rss: 72MB	looking for plugin registrar
time: 0.007; rss: 78MB	region resolution
time: 0.001; rss: 78MB	loop checking
time: 0.001; rss: 78MB	static item recursion checking
time: 0.000; rss: 79MB	type collecting
time: 0.000; rss: 79MB	variance inference
time: 0.006; rss: 85MB	coherence checking
time: 0.001; rss: 88MB	wf checking
time: 0.783; rss: 192MB	item-types checking
time: 0.000; rss: 192MB	item-bodies checking
time: 0.000; rss: 192MB	drop-impl checking
time: 0.018; rss: 194MB	const checking
time: 0.003; rss: 194MB	privacy checking
time: 0.001; rss: 194MB	stability index
time: 0.001; rss: 194MB	intrinsic checking
time: 0.001; rss: 194MB	effect checking
time: 0.001; rss: 194MB	match checking
time: 0.001; rss: 194MB	liveness checking
time: 0.001; rss: 194MB	rvalue checking
time: 0.001; rss: 194MB	MIR dump
time: 0.000; rss: 194MB	MIR passes
time: 0.001; rss: 194MB	borrow checking
time: 0.000; rss: 194MB	reachability checking
time: 0.001; rss: 194MB	death checking
time: 0.001; rss: 194MB	stability checking
time: 0.000; rss: 194MB	unused lib feature checking
time: 0.029; rss: 194MB	lint checking
time: 0.001; rss: 194MB	resolving dependency formats
  time: 0.001; rss: 203MB	translation item collection
  time: 0.000; rss: 208MB	write metadata
time: 0.083; rss: 208MB	translation
  time: 0.004; rss: 83MB	llvm function passes [0]
  time: 0.000; rss: 83MB	llvm module passes [0]
  time: 0.161; rss: 86MB	codegen passes [0]
  time: 0.000; rss: 75MB	codegen passes [0]
time: 0.177; rss: 75MB	LLVM passes
  time: 0.181; rss: 75MB	running linker
time: 0.182; rss: 75MB	linking
done
