commit 9debf51f4b8a5d437df1abca57c5a58c45297b60
Merge: ccc7e95 5613372
Author: bors <bors@rust-lang.org>
Date:   Fri Apr 15 12:41:25 2016 -0700

    Auto merge of #32338 - lukaspustina:doc-std-process, r=alexcrichton
    
    Extends rustdoc on how to caputure output
    
    - The documentation is quite about how to caputure a process' output when using
      ` std::process::Child::wait_with_output()`.
    - This PR adds an example for this particular use case.
rustc: ./rust-encoding.0.2.32
cargo rustc -- -Ztime-passes -Zinput-stats
    Updating registry `https://github.com/rust-lang/crates.io-index`
   Compiling encoding_index_tests v0.1.4 (file:///root/benchmarks/rust-encoding.0.2.32)
   Compiling encoding-index-korean v1.20141219.5 (file:///root/benchmarks/rust-encoding.0.2.32)
   Compiling encoding-index-japanese v1.20141219.5 (file:///root/benchmarks/rust-encoding.0.2.32)
   Compiling encoding-index-simpchinese v1.20141219.5 (file:///root/benchmarks/rust-encoding.0.2.32)
   Compiling encoding-index-singlebyte v1.20141219.5 (file:///root/benchmarks/rust-encoding.0.2.32)
   Compiling encoding-index-tradchinese v1.20141219.5 (file:///root/benchmarks/rust-encoding.0.2.32)
   Compiling encoding v0.2.32 (file:///root/benchmarks/rust-encoding.0.2.32)
time: 0.034; rss: 40MB	parsing
Lines of code:             6441
Pre-expansion node count:  30335
time: 0.006; rss: 40MB	configuration 1
time: 0.000; rss: 40MB	recursion limit
time: 0.000; rss: 40MB	gated macro checking
time: 0.000; rss: 40MB	crate injection
time: 0.003; rss: 43MB	macro loading
time: 0.000; rss: 43MB	plugin loading
time: 0.000; rss: 43MB	plugin registration
time: 0.044; rss: 46MB	expansion
time: 0.001; rss: 46MB	complete gated feature checking 1
time: 0.007; rss: 46MB	configuration 2
time: 0.000; rss: 46MB	gated configuration checking
time: 0.003; rss: 46MB	maybe building test harness
time: 0.003; rss: 46MB	prelude injection
time: 0.000; rss: 46MB	checking that all macro invocations are gone
time: 0.000; rss: 46MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 46MB	complete gated feature checking 2
time: 0.000; rss: 46MB	const fn bodies and arguments
Post-expansion node count: 41611
time: 0.003; rss: 46MB	assigning node ids
time: 0.007; rss: 48MB	lowering ast -> hir
time: 0.004; rss: 49MB	indexing hir
time: 0.000; rss: 49MB	attribute checking
time: 0.002; rss: 49MB	early lint checks
time: 0.001; rss: 49MB	external crate/lib resolution
time: 0.000; rss: 49MB	language item collection
time: 0.009; rss: 58MB	resolution
time: 0.001; rss: 58MB	lifetime resolution
time: 0.000; rss: 58MB	looking for entry point
time: 0.000; rss: 58MB	looking for plugin registrar
time: 0.004; rss: 59MB	region resolution
time: 0.000; rss: 59MB	loop checking
time: 0.000; rss: 59MB	static item recursion checking
time: 0.000; rss: 59MB	load_dep_graph
time: 0.005; rss: 61MB	type collecting
time: 0.000; rss: 61MB	variance inference
time: 0.022; rss: 78MB	coherence checking
time: 0.017; rss: 79MB	wf checking
time: 0.014; rss: 79MB	item-types checking
time: 0.211; rss: 89MB	item-bodies checking
time: 0.000; rss: 89MB	drop-impl checking
time: 0.011; rss: 89MB	const checking
time: 0.003; rss: 89MB	privacy checking
time: 0.000; rss: 89MB	stability index
time: 0.001; rss: 89MB	intrinsic checking
time: 0.000; rss: 89MB	effect checking
time: 0.006; rss: 89MB	match checking
time: 0.002; rss: 89MB	liveness checking
time: 0.006; rss: 89MB	rvalue checking
time: 0.030; rss: 96MB	MIR dump
time: 0.008; rss: 97MB	MIR passes
time: 0.022; rss: 97MB	borrow checking
time: 0.000; rss: 97MB	reachability checking
time: 0.002; rss: 97MB	death checking
time: 0.002; rss: 97MB	stability checking
time: 0.000; rss: 97MB	unused lib feature checking
time: 0.023; rss: 97MB	lint checking
time: 0.000; rss: 97MB	resolving dependency formats
time: 0.004; rss: 98MB	Prepare MIR codegen passes
  time: 0.026; rss: 110MB	translation item collection
  time: 0.059; rss: 143MB	write metadata
time: 0.402; rss: 143MB	translation
time: 0.000; rss: 143MB	assert dep graph
time: 0.000; rss: 143MB	serialize dep graph
  time: 0.027; rss: 108MB	llvm function passes [0]
  time: 0.052; rss: 112MB	llvm module passes [0]
  time: 0.598; rss: 115MB	codegen passes [0]
  time: 0.000; rss: 100MB	codegen passes [0]
time: 0.742; rss: 100MB	LLVM passes
time: 0.054; rss: 98MB	linking
done
