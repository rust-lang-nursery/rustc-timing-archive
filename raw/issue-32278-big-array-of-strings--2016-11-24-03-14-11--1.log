commit 29abe6f9e86829d55ba180a5957f203a64a96b65
Merge: 696fab8 4be7786
Author: bors <bors@rust-lang.org>
Date:   Thu Nov 24 00:26:44 2016 -0600

    Auto merge of #37890 - eddyb:rustdoc-1, r=nrc
    
    rustdoc: separate test collection from the main "clean"-ing pipeline.
    
    While reusing the documentation "clean"-ing infrastructure for collecting code examples to test may have seemed appealing at some point, doing the same through a HIR visitor is barely any harder.
    At the same time, supporting both "regular documentation" and "test collection" modes in `rustdoc::clean` has its cost, requiring any use of a `TyCtxt` to be speculative, and provide some sort of fallback.
    
    This simplification is the first step towards bringing rustdoc closer to the compiler, and perhaps even unifying the "local crate" (based on the HIR AST) and "inlinined across crates" (based on crate metadata and typesystem information) implementations of rustdoc.
    
    Sadly, not all possible changes to rustdoc will be uncontroversial, so I'm starting small with this patch.
rustc: ./issue-32278-big-array-of-strings
cargo rustc  -- -Ztime-passes -Zinput-stats
   Compiling issue-32278-big-array-of-strings v0.1.0 (file:///root/benchmarks/issue-32278-big-array-of-strings)
time: 0.098; rss: 60MB	parsing
Lines of code:             65577
Pre-expansion node count:  65552
time: 0.000; rss: 60MB	recursion limit
time: 0.000; rss: 60MB	crate injection
time: 0.000; rss: 60MB	plugin loading
time: 0.000; rss: 60MB	plugin registration
time: 0.023; rss: 84MB	expansion
time: 0.000; rss: 84MB	maybe building test harness
time: 0.001; rss: 84MB	maybe creating a macro crate
Post-expansion node count: 65565
time: 0.000; rss: 84MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 84MB	complete gated feature checking
time: 0.004; rss: 84MB	early lint checks
time: 0.000; rss: 84MB	AST validation
time: 0.002; rss: 84MB	name resolution
time: 0.004; rss: 93MB	lowering ast -> hir
time: 0.001; rss: 97MB	indexing hir
time: 0.001; rss: 97MB	attribute checking
time: 0.000; rss: 86MB	language item collection
time: 0.000; rss: 86MB	lifetime resolution
time: 0.000; rss: 86MB	looking for entry point
time: 0.000; rss: 86MB	looking for plugin registrar
time: 0.006; rss: 91MB	region resolution
time: 0.000; rss: 91MB	loop checking
time: 0.000; rss: 91MB	static item recursion checking
time: 0.019; rss: 91MB	compute_incremental_hashes_map
time: 0.000; rss: 91MB	load_dep_graph
time: 0.000; rss: 91MB	type collecting
time: 0.000; rss: 91MB	variance inference
time: 0.000; rss: 91MB	impl wf inference
time: 0.004; rss: 94MB	coherence checking
time: 0.000; rss: 94MB	wf checking
time: 0.521; rss: 107MB	item-types checking
time: 0.000; rss: 107MB	item-bodies checking
time: 0.000; rss: 107MB	drop-impl checking
time: 0.021; rss: 106MB	const checking
time: 0.001; rss: 106MB	privacy checking
time: 0.000; rss: 106MB	stability index
time: 0.000; rss: 106MB	intrinsic checking
time: 0.000; rss: 106MB	effect checking
time: 0.000; rss: 106MB	match checking
time: 0.000; rss: 106MB	liveness checking
time: 0.000; rss: 106MB	rvalue checking
time: 0.037; rss: 114MB	MIR dump
  time: 0.000; rss: 114MB	SimplifyCfg
  time: 0.001; rss: 114MB	QualifyAndPromoteConstants
  time: 0.000; rss: 114MB	TypeckMir
  time: 0.000; rss: 114MB	SimplifyBranches
  time: 0.000; rss: 114MB	SimplifyCfg
time: 0.001; rss: 114MB	MIR cleanup and validation
time: 0.001; rss: 114MB	borrow checking
time: 0.000; rss: 114MB	reachability checking
time: 0.000; rss: 114MB	death checking
time: 0.000; rss: 114MB	stability checking
time: 0.000; rss: 114MB	unused lib feature checking
time: 0.022; rss: 114MB	lint checking
time: 0.001; rss: 114MB	resolving dependency formats
  time: 0.000; rss: 114MB	NoLandingPads
  time: 0.000; rss: 114MB	SimplifyCfg
  time: 0.001; rss: 114MB	EraseRegions
  time: 0.000; rss: 114MB	AddCallGuards
  time: 0.000; rss: 114MB	ElaborateDrops
  time: 0.000; rss: 114MB	NoLandingPads
  time: 0.000; rss: 114MB	SimplifyCfg
  time: 0.000; rss: 114MB	InstCombine
  time: 0.000; rss: 114MB	Deaggregator
  time: 0.000; rss: 114MB	CopyPropagation
  time: 0.000; rss: 114MB	SimplifyLocals
  time: 0.000; rss: 114MB	AddCallGuards
  time: 0.000; rss: 114MB	PreTrans
time: 0.001; rss: 114MB	MIR optimisations
  time: 0.000; rss: 115MB	write metadata
  time: 0.000; rss: 115MB	translation item collection
  time: 0.000; rss: 115MB	codegen unit partitioning
  time: 0.001; rss: 126MB	internalize symbols
time: 0.056; rss: 126MB	translation
time: 0.000; rss: 126MB	assert dep graph
time: 0.000; rss: 126MB	serialize dep graph
  time: 0.008; rss: 90MB	llvm function passes [0]
  time: 0.000; rss: 90MB	llvm module passes [0]
  time: 0.205; rss: 90MB	codegen passes [0]
  time: 0.000; rss: 90MB	codegen passes [0]
time: 0.214; rss: 90MB	LLVM passes
time: 0.000; rss: 90MB	serialize work products
  time: 0.160; rss: 81MB	running linker
time: 0.161; rss: 81MB	linking
done
