commit 3f50b6342db87f4a8fb76e70f6ada07331e062a2
Merge: 58dc448 b9a8c1a
Author: bors <bors@rust-lang.org>
Date:   Mon Sep 5 08:13:32 2016 -0700

    Auto merge of #36200 - mattico:fix-llvm-linkage, r=arielb1
    
    Fix incorrect LLVM Linkage enum
    
    Followup of #33994 to actually work.
    
    The `Linkage` enum in librustc_llvm got out of sync with the version in LLVM and it caused two variants of the `#[linkage=""]` attribute to break.
    
    This adds the functions `LLVMRustGetLinkage` and `LLVMRustSetLinkage` which convert between the Rust Linkage enum and the LLVM one, which should stop this from breaking every time LLVM changes it.
    
    Possible remaining concerns:
    
    1. There could be a codegen test to make sure that the attributes are applied correctly (I don't know how to do this).
    2. ~~The test does not exercise the `appending` linkage. I can't figure out how to make a global static raw pointer to an array. This might not even be possible? If not we should probably remove appending linkage as its unusable in rust.~~ Appending linkage is not 'emittable' anyway.
    3. The test only runs on Linux.
    
    Fixes #33992
    
    r? @alexcrichton
rustc: ./html5ever-2016-08-25
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling html5ever v0.5.4 (file:///root/benchmarks/html5ever-2016-08-25)
time: 0.029; rss: 53MB	parsing
Lines of code:             8210
Pre-expansion node count:  52238
time: 0.003; rss: 54MB	configuration
time: 0.000; rss: 54MB	recursion limit
time: 0.000; rss: 54MB	crate injection
time: 0.000; rss: 54MB	plugin loading
time: 0.000; rss: 54MB	plugin registration
time: 1.442; rss: 100MB	expansion
time: 0.000; rss: 100MB	maybe building test harness
time: 0.002; rss: 100MB	maybe creating a macro crate
time: 0.008; rss: 100MB	assigning node ids
Post-expansion node count: 164262
time: 0.000; rss: 100MB	checking for inline asm in case the target doesn't support it
time: 0.003; rss: 100MB	complete gated feature checking
time: 0.005; rss: 102MB	collecting defs
time: 0.006; rss: 103MB	external crate/lib resolution
time: 0.009; rss: 103MB	early lint checks
time: 0.002; rss: 103MB	AST validation
time: 0.019; rss: 109MB	name resolution
time: 0.016; rss: 123MB	lowering ast -> hir
time: 0.005; rss: 127MB	indexing hir
time: 0.002; rss: 127MB	attribute checking
time: 0.002; rss: 109MB	language item collection
time: 0.003; rss: 109MB	lifetime resolution
time: 0.000; rss: 109MB	looking for entry point
time: 0.000; rss: 109MB	looking for plugin registrar
time: 0.017; rss: 114MB	region resolution
time: 0.002; rss: 114MB	loop checking
time: 0.003; rss: 114MB	static item recursion checking
time: 0.022; rss: 115MB	compute_incremental_hashes_map
time: 0.000; rss: 115MB	load_dep_graph
time: 0.014; rss: 114MB	type collecting
time: 0.000; rss: 114MB	variance inference
time: 0.027; rss: 118MB	coherence checking
time: 0.027; rss: 119MB	wf checking
time: 0.367; rss: 131MB	item-types checking
time: 0.589; rss: 144MB	item-bodies checking
time: 0.000; rss: 144MB	drop-impl checking
time: 0.078; rss: 146MB	const checking
time: 0.008; rss: 146MB	privacy checking
time: 0.002; rss: 146MB	stability index
time: 0.004; rss: 146MB	intrinsic checking
time: 0.003; rss: 146MB	effect checking
time: 0.028; rss: 146MB	match checking
time: 0.013; rss: 140MB	liveness checking
time: 0.032; rss: 140MB	rvalue checking
time: 0.122; rss: 184MB	MIR dump
time: 0.056; rss: 186MB	MIR passes
time: 0.095; rss: 189MB	borrow checking
time: 0.003; rss: 189MB	reachability checking
time: 0.007; rss: 189MB	death checking
time: 0.009; rss: 189MB	stability checking
time: 0.000; rss: 189MB	unused lib feature checking
time: 0.065; rss: 189MB	lint checking
time: 0.000; rss: 189MB	resolving dependency formats
time: 0.106; rss: 190MB	Prepare MIR codegen passes
  time: 0.060; rss: 190MB	write metadata
  time: 0.043; rss: 193MB	translation item collection
  time: 0.005; rss: 193MB	codegen unit partitioning
  time: 0.010; rss: 211MB	internalize symbols
time: 0.405; rss: 185MB	translation
time: 0.000; rss: 185MB	assert dep graph
time: 0.000; rss: 185MB	serialize dep graph
  time: 0.023; rss: 115MB	llvm function passes [0]
  time: 0.014; rss: 116MB	llvm module passes [0]
  time: 0.526; rss: 117MB	codegen passes [0]
  time: 0.001; rss: 117MB	codegen passes [0]
time: 0.606; rss: 117MB	LLVM passes
time: 0.000; rss: 117MB	serialize work products
time: 0.060; rss: 97MB	linking
done
