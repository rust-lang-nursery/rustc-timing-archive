commit 816a34aca23f3ebd0fddf79ebdf96c9fae976f58
Merge: d9aae63 a1882ca
Author: bors <bors@rust-lang.org>
Date:   Thu Dec 8 07:05:19 2016 +0000

    Auto merge of #38146 - kali:master, r=alexcrichton
    
    fix objc ABI in std::env::args
    
    iOS use different calling convention for `objc_msgSend` depending on the platform. armv7 expect good old variadic arguments, but aarch64 wants "normal" convention: `objc_msgSend` has to be called mimicking the actual callee prototype.
    
    https://developer.apple.com/library/content/documentation/General/Conceptual/CocoaTouch64BitGuide/ConvertingYourAppto64-Bit/ConvertingYourAppto64-Bit.html#//apple_ref/doc/uid/TP40013501-CH3-SW26
    
    This currently breaks std::env:args() on aarch64 iOS devices. As far as I can tell, in the standard library, this is the only occurrence of ObjectiveC dispatching.
rustc: ./hyper.0.5.0
cargo rustc  -- -Ztime-passes -Zinput-stats
time: 0.023; rss: 48MB	parsing
Lines of code:             9003
Pre-expansion node count:  44055
time: 0.000; rss: 48MB	recursion limit
time: 0.000; rss: 48MB	crate injection
time: 0.000; rss: 48MB	plugin loading
time: 0.000; rss: 48MB	plugin registration
time: 0.077; rss: 90MB	expansion
time: 0.000; rss: 90MB	maybe building test harness
time: 0.001; rss: 90MB	maybe creating a macro crate
Post-expansion node count: 101769
time: 0.000; rss: 90MB	checking for inline asm in case the target doesn't support it
time: 0.001; rss: 90MB	complete gated feature checking
time: 0.003; rss: 90MB	early lint checks
time: 0.001; rss: 90MB	AST validation
time: 0.013; rss: 94MB	name resolution
time: 0.009; rss: 99MB	lowering ast -> hir
time: 0.002; rss: 97MB	indexing hir
time: 0.001; rss: 97MB	attribute checking
time: 0.001; rss: 91MB	language item collection
time: 0.002; rss: 91MB	lifetime resolution
time: 0.000; rss: 91MB	looking for entry point
time: 0.000; rss: 91MB	looking for plugin registrar
time: 0.006; rss: 96MB	region resolution
time: 0.001; rss: 96MB	loop checking
time: 0.000; rss: 96MB	static item recursion checking
time: 0.054; rss: 96MB	compute_incremental_hashes_map
time: 0.000; rss: 96MB	load_dep_graph
time: 0.001; rss: 96MB	stability index
time: 0.003; rss: 97MB	stability checking
time: 0.013; rss: 99MB	type collecting
time: 0.000; rss: 99MB	variance inference
time: 0.001; rss: 99MB	impl wf inference
time: 0.014; rss: 100MB	coherence checking
time: 0.038; rss: 101MB	wf checking
time: 0.023; rss: 101MB	item-types checking
time: 0.296; rss: 113MB	item-bodies checking
time: 0.000; rss: 113MB	drop-impl checking
time: 0.029; rss: 115MB	const checking
time: 0.008; rss: 115MB	privacy checking
time: 0.003; rss: 115MB	intrinsic checking
time: 0.001; rss: 115MB	effect checking
time: 0.008; rss: 115MB	match checking
time: 0.004; rss: 116MB	liveness checking
time: 0.019; rss: 116MB	rvalue checking
time: 0.046; rss: 135MB	MIR dump
  time: 0.006; rss: 135MB	SimplifyCfg
  time: 0.011; rss: 138MB	QualifyAndPromoteConstants
  time: 0.013; rss: 138MB	TypeckMir
  time: 0.000; rss: 138MB	SimplifyBranches
  time: 0.003; rss: 138MB	SimplifyCfg
time: 0.034; rss: 138MB	MIR cleanup and validation
time: 0.049; rss: 138MB	borrow checking
time: 0.003; rss: 138MB	reachability checking
time: 0.004; rss: 138MB	death checking
time: 0.000; rss: 138MB	unused lib feature checking
time: 0.035; rss: 138MB	lint checking
time: 0.000; rss: 138MB	resolving dependency formats
  time: 0.000; rss: 138MB	NoLandingPads
  time: 0.003; rss: 138MB	SimplifyCfg
  time: 0.007; rss: 138MB	EraseRegions
  time: 0.001; rss: 138MB	AddCallGuards
  time: 0.021; rss: 140MB	ElaborateDrops
  time: 0.001; rss: 140MB	NoLandingPads
  time: 0.005; rss: 141MB	SimplifyCfg
  time: 0.003; rss: 141MB	InstCombine
  time: 0.003; rss: 141MB	Deaggregator
  time: 0.000; rss: 141MB	CopyPropagation
  time: 0.004; rss: 141MB	SimplifyLocals
  time: 0.001; rss: 141MB	AddCallGuards
  time: 0.000; rss: 141MB	PreTrans
time: 0.049; rss: 141MB	MIR optimisations
  time: 0.011; rss: 143MB	write metadata
  time: 0.119; rss: 156MB	translation item collection
  time: 0.013; rss: 159MB	codegen unit partitioning
  time: 0.013; rss: 215MB	internalize symbols
time: 0.995; rss: 215MB	translation
time: 0.000; rss: 215MB	assert dep graph
time: 0.000; rss: 215MB	serialize dep graph
  time: 0.087; rss: 155MB	llvm function passes [0]
  time: 0.047; rss: 154MB	llvm module passes [0]
  time: 1.648; rss: 159MB	codegen passes [0]
  time: 0.000; rss: 159MB	codegen passes [0]
time: 1.918; rss: 159MB	LLVM passes
time: 0.000; rss: 159MB	serialize work products
time: 0.069; rss: 101MB	linking
done
