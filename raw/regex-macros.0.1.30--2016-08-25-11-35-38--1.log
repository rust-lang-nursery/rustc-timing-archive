commit 528c6f3ed6a23a374dc5a40582d1bea2f2cfda65
Merge: 17a2be8 0a70944
Author: bors <bors@rust-lang.org>
Date:   Thu Aug 25 08:32:19 2016 -0700

    Auto merge of #35884 - habnabit:freebsd-arc4rand, r=alexcrichton
    
    Use arc4rand(9) on FreeBSD
    
    From rust-lang-nursery/rand#112:
    
    >After reading through #30691 it seems that there's general agreement that using OS-provided facilities for seeding rust userland processes is fine as long as it doesn't use too much from libc. FreeBSD's `arc4random_buf(3)` is not only a whole lot of libc code, but also not even currently exposed in the libc crate. Fortunately, the mechanism `arc4random_buf(3)` et al. use for getting entropy from the kernel ([`arc4rand(9)`](https://www.freebsd.org/cgi/man.cgi?query=arc4random&apropos=0&sektion=9&manpath=FreeBSD+10.3-RELEASE&arch=default&format=html)) is exposed via `sysctl(3)` with constants that are already in the libc crate.
    
    >I haven't found too much documentation on `KERN_ARND`â€”it's missing or only briefly described in most of the places that cover sysctl mibs. But, from digging through the kernel source, it appears that the sysctl used in this PR is very close to just calling `arc4rand(9)` directly (with `reseed` set to 0 and no way to change it).
    
    I expected [rand](/rust-lang-nursery/rand) to reply quicker, so I tried submitting it there first. It's been a few weeks with no comment, so I don't know the state of it, but maybe someone will see it here and have an opinion. This is basically the same patch. It pains me to duplicate the code but I guess it hasn't been factored out into just one place yet.
rustc: ./regex-macros.0.1.30
cd regex_macros && cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling regex_macros v0.1.17 (file:///root/benchmarks/regex-macros.0.1.30/regex_macros)
time: 0.002; rss: 44MB	parsing
Lines of code:             639
Pre-expansion node count:  2088
time: 0.000; rss: 44MB	configuration
time: 0.000; rss: 44MB	recursion limit
time: 0.000; rss: 44MB	crate injection
time: 0.000; rss: 44MB	plugin loading
time: 0.000; rss: 44MB	plugin registration
time: 0.030; rss: 69MB	expansion
time: 0.000; rss: 69MB	maybe building test harness
time: 0.003; rss: 69MB	assigning node ids
Post-expansion node count: 69587
time: 0.000; rss: 69MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 69MB	complete gated feature checking
time: 0.000; rss: 69MB	collecting defs
time: 0.062; rss: 136MB	external crate/lib resolution
time: 0.002; rss: 136MB	early lint checks
time: 0.000; rss: 136MB	AST validation
time: 0.022; rss: 141MB	name resolution
time: 0.003; rss: 146MB	lowering ast -> hir
time: 0.001; rss: 145MB	indexing hir
time: 0.000; rss: 145MB	attribute checking
time: 0.000; rss: 138MB	language item collection
time: 0.001; rss: 138MB	lifetime resolution
time: 0.000; rss: 138MB	looking for entry point
time: 0.000; rss: 138MB	looking for plugin registrar
time: 0.002; rss: 140MB	region resolution
time: 0.000; rss: 140MB	loop checking
time: 0.000; rss: 140MB	static item recursion checking
time: 0.005; rss: 140MB	compute_incremental_hashes_map
time: 0.000; rss: 140MB	load_dep_graph
time: 0.012; rss: 142MB	type collecting
time: 0.000; rss: 142MB	variance inference
time: 0.009; rss: 143MB	coherence checking
time: 0.007; rss: 143MB	wf checking
time: 0.001; rss: 143MB	item-types checking
time: 0.633; rss: 158MB	item-bodies checking
makefile:2: recipe for target 'all' failed
done
