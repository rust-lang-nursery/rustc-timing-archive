commit 045a727b8362103052ae3c5f51ad24f069bbd43f
Merge: 09fc1af 99aaccd
Author: bors <bors@rust-lang.org>
Date:   Sun Nov 6 23:05:58 2016 -0800

    Auto merge of #37605 - dsprenkels:arc-max-refcount, r=alexcrichton
    
    Fix Arc::clone()'s MAX_REFCOUNT check (off-by-one)
    
    Before, the strong count of an `Arc` could be set to
    `MAX_REFCOUNT + 1`, because when this happened, `old_size` would
    be exactly `MAX_REFCOUNT`. `Arc::clone()` would not abort.
    
    This commit changes the check in `Arc::clone()` to also abort if
    the old value is equal to `MAX_REFCOUNT`, because then the new
    value will be equal to `MAX_REFCOUNT + 1`.
    
    A test would require allocating memory for `isize::MAX` pointers.
    This would probably crash any machine, so no test is submitted
    with this commit.
rustc: ./inflate-0.1.0
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling inflate v0.1.0 (file:///root/benchmarks/inflate-0.1.0)
time: 0.003; rss: 44MB	parsing
Lines of code:             956
Pre-expansion node count:  4740
time: 0.000; rss: 44MB	recursion limit
time: 0.000; rss: 44MB	crate injection
time: 0.000; rss: 44MB	plugin loading
time: 0.000; rss: 44MB	plugin registration
time: 0.059; rss: 73MB	expansion
time: 0.000; rss: 73MB	maybe building test harness
time: 0.000; rss: 73MB	maybe creating a macro crate
Post-expansion node count: 55750
time: 0.000; rss: 73MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 73MB	complete gated feature checking
time: 0.002; rss: 73MB	early lint checks
time: 0.000; rss: 73MB	AST validation
time: 0.008; rss: 75MB	name resolution
time: 0.004; rss: 77MB	lowering ast -> hir
time: 0.001; rss: 79MB	indexing hir
time: 0.001; rss: 79MB	attribute checking
time: 0.000; rss: 75MB	language item collection
time: 0.001; rss: 75MB	lifetime resolution
time: 0.000; rss: 75MB	looking for entry point
time: 0.000; rss: 75MB	looking for plugin registrar
time: 0.003; rss: 75MB	region resolution
time: 0.000; rss: 75MB	loop checking
time: 0.000; rss: 75MB	static item recursion checking
time: 0.019; rss: 75MB	compute_incremental_hashes_map
time: 0.000; rss: 75MB	load_dep_graph
time: 0.001; rss: 77MB	type collecting
time: 0.000; rss: 77MB	variance inference
time: 0.008; rss: 78MB	coherence checking
time: 0.001; rss: 78MB	wf checking
time: 0.001; rss: 78MB	item-types checking
time: 1.644; rss: 90MB	item-bodies checking
time: 0.000; rss: 90MB	drop-impl checking
time: 0.017; rss: 89MB	const checking
time: 0.001; rss: 89MB	privacy checking
time: 0.000; rss: 89MB	stability index
time: 0.000; rss: 89MB	intrinsic checking
time: 0.000; rss: 89MB	effect checking
time: 0.002; rss: 89MB	match checking
time: 0.065; rss: 89MB	liveness checking
time: 0.012; rss: 89MB	rvalue checking
time: 0.039; rss: 114MB	MIR dump
  time: 0.006; rss: 112MB	SimplifyCfg
  time: 0.005; rss: 112MB	QualifyAndPromoteConstants
  time: 0.006; rss: 112MB	TypeckMir
  time: 0.000; rss: 112MB	SimplifyBranches
  time: 0.002; rss: 112MB	SimplifyCfg
time: 0.020; rss: 112MB	MIR cleanup and validation
time: 0.199; rss: 110MB	borrow checking
time: 0.000; rss: 110MB	reachability checking
time: 0.003; rss: 110MB	death checking
time: 0.002; rss: 110MB	stability checking
time: 0.000; rss: 110MB	unused lib feature checking
time: 0.016; rss: 113MB	lint checking
time: 0.000; rss: 113MB	resolving dependency formats
  time: 0.000; rss: 113MB	NoLandingPads
  time: 0.002; rss: 113MB	SimplifyCfg
  time: 0.003; rss: 113MB	EraseRegions
  time: 0.001; rss: 113MB	AddCallGuards
  time: 0.197; rss: 115MB	ElaborateDrops
  time: 0.000; rss: 115MB	NoLandingPads
  time: 0.006; rss: 114MB	SimplifyCfg
  time: 0.003; rss: 114MB	InstCombine
  time: 0.000; rss: 114MB	Deaggregator
  time: 0.000; rss: 114MB	CopyPropagation
  time: 0.003; rss: 114MB	SimplifyLocals
  time: 0.001; rss: 114MB	AddCallGuards
  time: 0.000; rss: 114MB	PreTrans
time: 0.216; rss: 114MB	MIR optimisations
  time: 0.001; rss: 114MB	write metadata
  time: 0.009; rss: 115MB	translation item collection
  time: 0.001; rss: 115MB	codegen unit partitioning
  time: 0.001; rss: 129MB	internalize symbols
time: 0.152; rss: 129MB	translation
time: 0.000; rss: 129MB	assert dep graph
time: 0.000; rss: 129MB	serialize dep graph
  time: 0.027; rss: 91MB	llvm function passes [0]
  time: 0.005; rss: 91MB	llvm module passes [0]
  time: 0.661; rss: 95MB	codegen passes [0]
  time: 0.000; rss: 95MB	codegen passes [0]
time: 0.728; rss: 95MB	LLVM passes
time: 0.000; rss: 95MB	serialize work products
time: 0.018; rss: 83MB	linking
done
