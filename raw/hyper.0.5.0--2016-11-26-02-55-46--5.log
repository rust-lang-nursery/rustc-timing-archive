commit d64b7030658c839c60d7c7165e8be19283c3f28c
Merge: 2217bd7 49c6b3c
Author: bors <bors@rust-lang.org>
Date:   Fri Nov 25 20:19:47 2016 -0600

    Auto merge of #37960 - samestep:five, r=frewsxcv
    
    Use literal 5 instead of five in book section 4.1
    
    The other two code snippets in this sentence are valid code, so it makes more sense to use the literal `5` rather than the invalid symbol `five`.
rustc: ./hyper.0.5.0
cargo rustc  -- -Ztime-passes -Zinput-stats
   Compiling hyper v0.5.0 (file:///root/benchmarks/hyper.0.5.0)
time: 0.035; rss: 42MB	parsing
Lines of code:             9003
Pre-expansion node count:  44055
time: 0.000; rss: 42MB	recursion limit
time: 0.000; rss: 42MB	crate injection
time: 0.000; rss: 42MB	plugin loading
time: 0.000; rss: 42MB	plugin registration
time: 0.098; rss: 80MB	expansion
time: 0.000; rss: 80MB	maybe building test harness
time: 0.001; rss: 80MB	maybe creating a macro crate
Post-expansion node count: 101769
time: 0.000; rss: 80MB	checking for inline asm in case the target doesn't support it
time: 0.002; rss: 80MB	complete gated feature checking
time: 0.003; rss: 80MB	early lint checks
time: 0.001; rss: 80MB	AST validation
time: 0.021; rss: 84MB	name resolution
time: 0.015; rss: 88MB	lowering ast -> hir
time: 0.001; rss: 89MB	indexing hir
time: 0.001; rss: 89MB	attribute checking
time: 0.001; rss: 84MB	language item collection
time: 0.002; rss: 84MB	lifetime resolution
time: 0.000; rss: 84MB	looking for entry point
time: 0.000; rss: 84MB	looking for plugin registrar
time: 0.013; rss: 87MB	region resolution
time: 0.001; rss: 87MB	loop checking
time: 0.001; rss: 87MB	static item recursion checking
time: 0.040; rss: 86MB	compute_incremental_hashes_map
time: 0.000; rss: 86MB	load_dep_graph
time: 0.014; rss: 89MB	type collecting
time: 0.000; rss: 89MB	variance inference
time: 0.001; rss: 89MB	impl wf inference
time: 0.014; rss: 91MB	coherence checking
time: 0.041; rss: 92MB	wf checking
time: 0.024; rss: 92MB	item-types checking
time: 0.471; rss: 100MB	item-bodies checking
time: 0.000; rss: 100MB	drop-impl checking
time: 0.053; rss: 102MB	const checking
time: 0.008; rss: 102MB	privacy checking
time: 0.001; rss: 102MB	stability index
time: 0.003; rss: 102MB	intrinsic checking
time: 0.001; rss: 102MB	effect checking
time: 0.008; rss: 102MB	match checking
time: 0.004; rss: 103MB	liveness checking
time: 0.020; rss: 103MB	rvalue checking
time: 0.062; rss: 123MB	MIR dump
  time: 0.007; rss: 124MB	SimplifyCfg
  time: 0.014; rss: 125MB	QualifyAndPromoteConstants
  time: 0.013; rss: 125MB	TypeckMir
  time: 0.001; rss: 125MB	SimplifyBranches
  time: 0.003; rss: 126MB	SimplifyCfg
time: 0.038; rss: 126MB	MIR cleanup and validation
time: 0.055; rss: 126MB	borrow checking
time: 0.003; rss: 126MB	reachability checking
time: 0.005; rss: 126MB	death checking
time: 0.004; rss: 127MB	stability checking
time: 0.000; rss: 127MB	unused lib feature checking
time: 0.037; rss: 127MB	lint checking
time: 0.000; rss: 127MB	resolving dependency formats
  time: 0.000; rss: 127MB	NoLandingPads
  time: 0.003; rss: 127MB	SimplifyCfg
  time: 0.008; rss: 127MB	EraseRegions
  time: 0.001; rss: 127MB	AddCallGuards
  time: 0.025; rss: 128MB	ElaborateDrops
  time: 0.000; rss: 128MB	NoLandingPads
  time: 0.005; rss: 128MB	SimplifyCfg
  time: 0.003; rss: 128MB	InstCombine
  time: 0.003; rss: 128MB	Deaggregator
  time: 0.000; rss: 128MB	CopyPropagation
  time: 0.004; rss: 128MB	SimplifyLocals
  time: 0.001; rss: 128MB	AddCallGuards
  time: 0.000; rss: 128MB	PreTrans
time: 0.054; rss: 128MB	MIR optimisations
  time: 0.013; rss: 130MB	write metadata
  time: 0.131; rss: 137MB	translation item collection
  time: 0.017; rss: 140MB	codegen unit partitioning
  time: 0.012; rss: 194MB	internalize symbols
time: 1.078; rss: 194MB	translation
time: 0.000; rss: 194MB	assert dep graph
time: 0.000; rss: 194MB	serialize dep graph
  time: 0.087; rss: 145MB	llvm function passes [0]
  time: 0.048; rss: 147MB	llvm module passes [0]
  time: 1.656; rss: 148MB	codegen passes [0]
  time: 0.000; rss: 148MB	codegen passes [0]
time: 1.956; rss: 148MB	LLVM passes
time: 0.000; rss: 148MB	serialize work products
time: 0.071; rss: 93MB	linking
done
