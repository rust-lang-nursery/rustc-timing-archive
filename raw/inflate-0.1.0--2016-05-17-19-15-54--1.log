commit 0667ae93fb72eb25594258e55de9b4ae8f9f02a8
Merge: 30422de 20b9129
Author: bors <bors@rust-lang.org>
Date:   Tue May 17 13:11:57 2016 -0700

    Auto merge of #33665 - golddranks:thread-park-add-big-picture-explanation, r=aturon
    
    Added a big-picture explanation for thread::park() & co.
    
    As I said in https://www.reddit.com/r/rust/comments/4ihvv1/hey_rust_programmers_got_a_question_ask_here/d372s4i, the current explanation of the `park()` and `unpark()` is a bit unclear. It says that they're used for blocking, but then it goes on explaining the semantics in detail, leaving the bigger picture a bit unclear.
    
    I added a short high-level explanation that explains how the functions are used. I also exposed the full paths (`thread::park()` and `thread::Thread::unpark()`), because `unpark()`, being a method, is not directly visible at the module level.
rustc: ./inflate-0.1.0
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling inflate v0.1.0 (file:///root/benchmarks/inflate-0.1.0)
time: 0.004; rss: 47MB	parsing
Lines of code:             956
Pre-expansion node count:  4772
time: 0.001; rss: 47MB	configuration 1
time: 0.000; rss: 47MB	recursion limit
time: 0.000; rss: 47MB	crate injection
time: 0.003; rss: 53MB	macro loading
time: 0.000; rss: 53MB	plugin loading
time: 0.000; rss: 53MB	plugin registration
time: 0.085; rss: 61MB	expansion
time: 0.009; rss: 61MB	configuration 2
time: 0.000; rss: 61MB	gated configuration checking
time: 0.004; rss: 61MB	maybe building test harness
time: 0.004; rss: 61MB	prelude injection
time: 0.000; rss: 61MB	checking that all macro invocations are gone
time: 0.000; rss: 61MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 61MB	complete gated feature checking
Post-expansion node count: 54811
time: 0.004; rss: 61MB	assigning node ids
time: 0.005; rss: 63MB	collecting defs
time: 0.001; rss: 63MB	external crate/lib resolution
time: 0.003; rss: 63MB	early lint checks
time: 0.013; rss: 69MB	name resolution
time: 0.007; rss: 77MB	lowering ast -> hir
time: 0.001; rss: 77MB	indexing hir
time: 0.000; rss: 77MB	attribute checking
time: 0.001; rss: 74MB	language item collection
time: 0.001; rss: 74MB	lifetime resolution
time: 0.000; rss: 74MB	looking for entry point
time: 0.000; rss: 74MB	looking for plugin registrar
time: 0.004; rss: 76MB	region resolution
time: 0.000; rss: 76MB	loop checking
time: 0.000; rss: 76MB	static item recursion checking
time: 0.000; rss: 76MB	load_dep_graph
time: 0.001; rss: 79MB	type collecting
time: 0.000; rss: 79MB	variance inference
time: 0.010; rss: 93MB	coherence checking
time: 0.002; rss: 93MB	wf checking
time: 0.002; rss: 93MB	item-types checking
time: 3.390; rss: 107MB	item-bodies checking
time: 0.000; rss: 107MB	drop-impl checking
time: 0.015; rss: 108MB	const checking
time: 0.001; rss: 108MB	privacy checking
time: 0.001; rss: 108MB	stability index
time: 0.001; rss: 108MB	intrinsic checking
time: 0.001; rss: 108MB	effect checking
time: 0.005; rss: 108MB	match checking
time: 0.061; rss: 106MB	liveness checking
time: 0.011; rss: 106MB	rvalue checking
time: 0.038; rss: 119MB	MIR dump
time: 0.017; rss: 114MB	MIR passes
time: 0.208; rss: 117MB	borrow checking
time: 0.000; rss: 117MB	reachability checking
time: 0.003; rss: 117MB	death checking
time: 0.002; rss: 117MB	stability checking
time: 0.000; rss: 117MB	unused lib feature checking
time: 0.021; rss: 118MB	lint checking
time: 0.000; rss: 118MB	resolving dependency formats
time: 0.005; rss: 117MB	Prepare MIR codegen passes
  time: 0.012; rss: 121MB	translation item collection
  time: 0.000; rss: 121MB	codegen unit partitioning
  time: 0.003; rss: 141MB	write metadata
time: 0.371; rss: 130MB	translation
time: 0.000; rss: 130MB	assert dep graph
time: 0.000; rss: 130MB	serialize dep graph
  time: 0.024; rss: 106MB	llvm function passes [0]
  time: 0.005; rss: 106MB	llvm module passes [0]
  time: 0.493; rss: 112MB	codegen passes [0]
  time: 0.000; rss: 101MB	codegen passes [0]
time: 0.566; rss: 101MB	LLVM passes
time: 0.034; rss: 100MB	linking
done
