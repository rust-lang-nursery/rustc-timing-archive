commit f65d96fe3fa3cfae2cfc88be40f7416a22c88bf2
Merge: b72fa8c 67f19e5
Author: bors <bors@rust-lang.org>
Date:   Mon Aug 15 08:35:18 2016 -0700

    Auto merge of #35340 - michaelwoerister:incr-comp-cli-args, r=nikomatsakis
    
    Take commandline arguments into account for incr. comp.
    
    Implements the conservative strategy described in https://github.com/rust-lang/rust/issues/33727.
    
    From now one, every time a new commandline option is added, one has to specify if it influences the incremental compilation cache. I've tried to implement this as automatic as possible: One just has to added either the `[TRACKED]` or the `[UNTRACKED]` marker next to the field. The `Options`, `CodegenOptions`, and `DebuggingOptions` definitions in `session::config` show plenty of examples.
    
    The PR removes some cruft from `session::config::Options`, mostly unnecessary copies of flags also present in `DebuggingOptions` or `CodeGenOptions` in the same struct.
    
    One notable removal is the `cfg` field that contained the values passed via `--cfg` commandline arguments. I chose to remove it because (1) its content is only a subset of what later is stored in `hir::Crate::config` and it's pretty likely that reading the cfgs from `Options` would not be what you wanted, and (2) we could not incorporate it into the dep-tracking hash of the `Options` struct because of how the test framework works, leaving us with a piece of untracked but vital data.
    
    It is now recommended (just as before) to access the crate config via the `krate()` method in the HIR map.
    
    Because the `cfg` field is not present in the `Options` struct any more, some methods in the `CompilerCalls` trait now take the crate config as an explicit parameter -- which might constitute a breaking change for plugin authors.
rustc: ./hyper.0.5.0
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling hyper v0.5.0 (file:///root/benchmarks/hyper.0.5.0)
time: 0.026; rss: 50MB	parsing
Lines of code:             9154
Pre-expansion node count:  44838
time: 0.003; rss: 50MB	configuration
time: 0.000; rss: 50MB	recursion limit
time: 0.000; rss: 50MB	crate injection
time: 0.000; rss: 50MB	plugin loading
time: 0.000; rss: 50MB	plugin registration
time: 0.093; rss: 93MB	expansion
time: 0.000; rss: 93MB	maybe building test harness
time: 0.005; rss: 93MB	assigning node ids
Post-expansion node count: 101581
time: 0.000; rss: 93MB	checking for inline asm in case the target doesn't support it
time: 0.002; rss: 93MB	complete gated feature checking
time: 0.003; rss: 93MB	collecting defs
time: 0.010; rss: 104MB	external crate/lib resolution
time: 0.003; rss: 104MB	early lint checks
time: 0.001; rss: 104MB	AST validation
time: 0.020; rss: 111MB	name resolution
time: 0.008; rss: 117MB	lowering ast -> hir
time: 0.002; rss: 119MB	indexing hir
time: 0.001; rss: 119MB	attribute checking
time: 0.001; rss: 112MB	language item collection
time: 0.001; rss: 112MB	lifetime resolution
time: 0.000; rss: 112MB	looking for entry point
time: 0.000; rss: 112MB	looking for plugin registrar
time: 0.006; rss: 116MB	region resolution
time: 0.001; rss: 116MB	loop checking
time: 0.001; rss: 116MB	static item recursion checking
time: 0.000; rss: 116MB	load_dep_graph
time: 0.023; rss: 119MB	type collecting
time: 0.000; rss: 119MB	variance inference
time: 0.046; rss: 127MB	coherence checking
time: 0.083; rss: 127MB	wf checking
time: 0.034; rss: 127MB	item-types checking
time: 0.493; rss: 139MB	item-bodies checking
time: 0.000; rss: 139MB	drop-impl checking
time: 0.043; rss: 141MB	const checking
time: 0.006; rss: 141MB	privacy checking
time: 0.001; rss: 141MB	stability index
time: 0.005; rss: 141MB	intrinsic checking
time: 0.002; rss: 141MB	effect checking
time: 0.013; rss: 141MB	match checking
time: 0.005; rss: 141MB	liveness checking
time: 0.031; rss: 141MB	rvalue checking
time: 0.057; rss: 159MB	MIR dump
time: 0.045; rss: 161MB	MIR passes
time: 0.069; rss: 161MB	borrow checking
time: 0.003; rss: 161MB	reachability checking
time: 0.005; rss: 161MB	death checking
time: 0.006; rss: 161MB	stability checking
time: 0.000; rss: 161MB	unused lib feature checking
time: 0.050; rss: 161MB	lint checking
time: 0.000; rss: 161MB	resolving dependency formats
time: 0.098; rss: 163MB	Prepare MIR codegen passes
  time: 0.131; rss: 173MB	write metadata
  time: 0.182; rss: 177MB	translation item collection
  time: 0.020; rss: 180MB	codegen unit partitioning
  time: 0.037; rss: 308MB	internalize symbols
time: 1.859; rss: 308MB	translation
time: 0.000; rss: 308MB	assert dep graph
time: 0.000; rss: 308MB	serialize dep graph
  time: 0.101; rss: 186MB	llvm function passes [0]
  time: 0.049; rss: 183MB	llvm module passes [0]
  time: 1.830; rss: 191MB	codegen passes [0]
  time: 0.001; rss: 190MB	codegen passes [0]
time: 2.143; rss: 190MB	LLVM passes
time: 0.000; rss: 190MB	serialize work products
time: 0.155; rss: 121MB	linking
done
