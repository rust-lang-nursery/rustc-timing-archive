commit d6af19b89c477708ed0f5341ab7a26f1764f1ffa
Merge: 8ba2ea5 3a790ac
Author: bors <bors@rust-lang.org>
Date:   Wed Mar 23 01:03:04 2016 -0700

    Auto merge of #32348 - brson:cargotest, r=alexcrichton
    
    Introduce 'cargotest' and the check-cargotest buildstep
    
    This is a new suite of tests that verifies that the compiler builds specific revisions of select crates from crates.io.
    
    It does not run by default. It is intended that bors runs these tests against all PRs, and gates on them. In this way we will make it harder still to break important swaths of the ecosystem, even on nightly.
    
    This is a very basic implementation intended for feedback. The biggest thing it probably should do but doesn't is use a lockfile for every project it builds.
    
    r? @alexcrichton cc @rust-lang/lang @rust-lang/libs
rustc: ./jld-day15-parser
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling day15 v0.1.0 (file:///root/benchmarks/jld-day15-parser)
time: 0.001; rss: 36MB	parsing
Lines of code:             72
Pre-expansion node count:  673
time: 0.000; rss: 36MB	configuration 1
time: 0.000; rss: 36MB	recursion limit
time: 0.000; rss: 36MB	gated macro checking
time: 0.000; rss: 36MB	crate injection
time: 0.003; rss: 40MB	macro loading
time: 0.000; rss: 40MB	plugin loading
time: 0.000; rss: 40MB	plugin registration
time: 0.002; rss: 40MB	expansion
time: 0.000; rss: 40MB	complete gated feature checking 1
time: 0.000; rss: 40MB	configuration 2
time: 0.000; rss: 40MB	gated configuration checking
time: 0.000; rss: 40MB	maybe building test harness
time: 0.000; rss: 40MB	prelude injection
time: 0.000; rss: 40MB	checking that all macro invocations are gone
time: 0.000; rss: 40MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 40MB	complete gated feature checking 2
time: 0.000; rss: 40MB	const fn bodies and arguments
Post-expansion node count: 1176
time: 0.000; rss: 40MB	assigning node ids
time: 0.000; rss: 40MB	lowering ast -> hir
time: 0.000; rss: 40MB	indexing hir
time: 0.000; rss: 40MB	attribute checking
time: 0.000; rss: 40MB	early lint checks
time: 0.001; rss: 40MB	external crate/lib resolution
time: 0.000; rss: 40MB	language item collection
time: 0.001; rss: 48MB	resolution
time: 0.000; rss: 48MB	lifetime resolution
time: 0.000; rss: 48MB	looking for entry point
time: 0.000; rss: 48MB	looking for plugin registrar
time: 0.000; rss: 48MB	region resolution
time: 0.000; rss: 48MB	loop checking
time: 0.000; rss: 48MB	static item recursion checking
time: 0.001; rss: 52MB	type collecting
time: 0.000; rss: 52MB	variance inference
time: 0.005; rss: 57MB	coherence checking
time: 0.007; rss: 63MB	wf checking
time: 0.000; rss: 63MB	item-types checking
time: 1.640; rss: 141MB	item-bodies checking
time: 0.000; rss: 141MB	drop-impl checking
time: 0.001; rss: 141MB	const checking
time: 0.000; rss: 141MB	privacy checking
time: 0.000; rss: 141MB	stability index
time: 0.000; rss: 141MB	intrinsic checking
time: 0.000; rss: 141MB	effect checking
time: 0.000; rss: 141MB	match checking
time: 0.000; rss: 141MB	liveness checking
time: 0.002; rss: 141MB	rvalue checking
time: 0.001; rss: 141MB	MIR dump
time: 0.000; rss: 141MB	MIR passes
time: 0.001; rss: 141MB	borrow checking
time: 0.000; rss: 141MB	reachability checking
time: 0.000; rss: 141MB	death checking
time: 0.000; rss: 141MB	stability checking
time: 0.000; rss: 141MB	unused lib feature checking
time: 0.004; rss: 143MB	lint checking
time: 0.001; rss: 143MB	resolving dependency formats
  time: 13.861; rss: 188MB	translation item collection
  time: 0.000; rss: 237MB	write metadata
time: 43.405; rss: 237MB	translation
  time: 0.014; rss: 97MB	llvm function passes [0]
  time: 0.001; rss: 97MB	llvm module passes [0]
  time: 0.274; rss: 102MB	codegen passes [0]
  time: 0.000; rss: 96MB	codegen passes [0]
time: 0.297; rss: 96MB	LLVM passes
  time: 0.109; rss: 96MB	running linker
time: 0.110; rss: 96MB	linking
done
