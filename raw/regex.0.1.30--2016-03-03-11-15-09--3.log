commit 493d999ffa44be6610441dabab80e18dda90015a
Merge: f6e125f fc4d0ec
Author: bors <bors@rust-lang.org>
Date:   Thu Mar 3 17:41:13 2016 +0000

    Auto merge of #32007 - nikomatsakis:compiletest-incremental, r=alexcrichton
    
    This PR extends compiletest to support **test revisions** and with a preliminary **incremental testing harness**. run-pass, compile-fail, and run-fail tests may be tagged with
    
    ```
    // revisions: a b c d
    ```
    
    This will cause the test to be re-run four times with `--cfg {a,b,c,d}` in turn. This means you can write very closely related things using `cfg`. You can also configure the headers/expected-errors by writing `//[foo] header: value` or `//[foo]~ ERROR bar`, where `foo` is the name of your revision. See the changes to `coherence-cow.rs` as a proof of concept.
    
    The main point of this work is to support the incremental testing harness. This PR contains an initial, unused version. The code that uses it will land later. The incremental testing harness compiles each revision in turn, and requires that the revisions have particular names (e.g., `rpass2`, `cfail3`), which tell it whether a particular revision is expected to compile or not.
    
    Two questions:
    
    - Is there compiletest documentation anywhere I can update?
    - Should I hold off on landing the incremental testing harness until I have the code to exercise it? (That will come in a separate PR, still fixing a few details)
    
    r? @alexcrichton
    cc @rust-lang/compiler <-- new testing capabilities
rustc: ./regex.0.1.30
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling regex v0.1.30 (file:///root/benchmarks/regex.0.1.30)
time: 0.097; rss: 46MB	parsing
Lines of code:             8558
Pre-expansion node count:  58217
time: 0.011; rss: 46MB	configuration 1
time: 0.000; rss: 46MB	recursion limit
time: 0.001; rss: 46MB	gated macro checking
time: 0.000; rss: 46MB	crate injection
time: 0.003; rss: 50MB	macro loading
time: 0.000; rss: 50MB	plugin loading
time: 0.000; rss: 50MB	plugin registration
time: 0.059; rss: 52MB	expansion
time: 0.001; rss: 52MB	complete gated feature checking 1
time: 0.013; rss: 52MB	configuration 2
time: 0.000; rss: 52MB	gated configuration checking
time: 0.006; rss: 52MB	maybe building test harness
time: 0.006; rss: 53MB	prelude injection
time: 0.001; rss: 53MB	checking that all macro invocations are gone
time: 0.000; rss: 53MB	checking for inline asm in case the target doesn't support it
time: 0.001; rss: 53MB	complete gated feature checking 2
time: 0.001; rss: 53MB	const fn bodies and arguments
Post-expansion node count: 68727
time: 0.006; rss: 53MB	assigning node ids
time: 0.008; rss: 60MB	lowering ast -> hir
time: 0.005; rss: 62MB	indexing hir
time: 0.001; rss: 62MB	attribute checking
time: 0.007; rss: 62MB	early lint checks
time: 0.001; rss: 54MB	external crate/lib resolution
time: 0.001; rss: 54MB	language item collection
time: 0.008; rss: 61MB	resolution
time: 0.001; rss: 61MB	lifetime resolution
time: 0.000; rss: 61MB	looking for entry point
time: 0.000; rss: 61MB	looking for plugin registrar
time: 0.007; rss: 64MB	region resolution
time: 0.001; rss: 64MB	loop checking
time: 0.001; rss: 64MB	static item recursion checking
time: 0.003; rss: 65MB	type collecting
time: 0.000; rss: 65MB	variance inference
time: 0.022; rss: 83MB	coherence checking
time: 0.010; rss: 83MB	wf checking
time: 0.087; rss: 89MB	item-types checking
time: 0.195; rss: 99MB	item-bodies checking
time: 0.000; rss: 99MB	drop-impl checking
time: 0.030; rss: 100MB	const checking
time: 0.004; rss: 100MB	privacy checking
time: 0.000; rss: 100MB	stability index
time: 0.001; rss: 100MB	intrinsic checking
time: 0.001; rss: 100MB	effect checking
time: 0.003; rss: 100MB	match checking
time: 0.002; rss: 101MB	liveness checking
time: 0.007; rss: 101MB	rvalue checking
time: 0.019; rss: 102MB	MIR dump
time: 0.000; rss: 102MB	MIR passes
time: 0.019; rss: 103MB	borrow checking
time: 0.000; rss: 103MB	reachability checking
time: 0.002; rss: 103MB	death checking
time: 0.002; rss: 103MB	stability checking
time: 0.000; rss: 103MB	unused lib feature checking
time: 0.027; rss: 103MB	lint checking
time: 0.000; rss: 103MB	resolving dependency formats
time: 0.004; rss: 103MB	erasing regions from MIR
  time: 0.064; rss: 117MB	translation item collection
  time: 0.145; rss: 158MB	write metadata
time: 0.665; rss: 158MB	translation
  time: 0.035; rss: 112MB	llvm function passes [0]
  time: 0.018; rss: 113MB	llvm module passes [0]
  time: 0.606; rss: 117MB	codegen passes [0]
  time: 0.001; rss: 98MB	codegen passes [0]
time: 0.732; rss: 97MB	LLVM passes
time: 0.064; rss: 96MB	linking
done
