commit 0667ae93fb72eb25594258e55de9b4ae8f9f02a8
Merge: 30422de 20b9129
Author: bors <bors@rust-lang.org>
Date:   Tue May 17 13:11:57 2016 -0700

    Auto merge of #33665 - golddranks:thread-park-add-big-picture-explanation, r=aturon
    
    Added a big-picture explanation for thread::park() & co.
    
    As I said in https://www.reddit.com/r/rust/comments/4ihvv1/hey_rust_programmers_got_a_question_ask_here/d372s4i, the current explanation of the `park()` and `unpark()` is a bit unclear. It says that they're used for blocking, but then it goes on explaining the semantics in detail, leaving the bigger picture a bit unclear.
    
    I added a short high-level explanation that explains how the functions are used. I also exposed the full paths (`thread::park()` and `thread::Thread::unpark()`), because `unpark()`, being a method, is not directly visible at the module level.
rustc: ./regex.0.1.30
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling regex v0.1.30 (file:///root/benchmarks/regex.0.1.30)
time: 0.065; rss: 63MB	parsing
Lines of code:             8558
Pre-expansion node count:  58331
time: 0.011; rss: 63MB	configuration 1
time: 0.000; rss: 63MB	recursion limit
time: 0.000; rss: 63MB	crate injection
time: 0.004; rss: 66MB	macro loading
time: 0.000; rss: 66MB	plugin loading
time: 0.000; rss: 66MB	plugin registration
time: 0.060; rss: 69MB	expansion
time: 0.013; rss: 69MB	configuration 2
time: 0.000; rss: 69MB	gated configuration checking
time: 0.006; rss: 69MB	maybe building test harness
time: 0.006; rss: 69MB	prelude injection
time: 0.001; rss: 69MB	checking that all macro invocations are gone
time: 0.000; rss: 69MB	checking for inline asm in case the target doesn't support it
time: 0.001; rss: 69MB	complete gated feature checking
Post-expansion node count: 68487
time: 0.006; rss: 69MB	assigning node ids
time: 0.001; rss: 69MB	collecting defs
time: 0.001; rss: 69MB	external crate/lib resolution
time: 0.006; rss: 69MB	early lint checks
time: 0.009; rss: 78MB	name resolution
time: 0.010; rss: 89MB	lowering ast -> hir
time: 0.002; rss: 91MB	indexing hir
time: 0.001; rss: 91MB	attribute checking
time: 0.001; rss: 83MB	language item collection
time: 0.001; rss: 83MB	lifetime resolution
time: 0.000; rss: 83MB	looking for entry point
time: 0.000; rss: 83MB	looking for plugin registrar
time: 0.005; rss: 88MB	region resolution
time: 0.001; rss: 88MB	loop checking
time: 0.001; rss: 88MB	static item recursion checking
time: 0.000; rss: 88MB	load_dep_graph
time: 0.008; rss: 99MB	type collecting
time: 0.000; rss: 99MB	variance inference
time: 0.025; rss: 110MB	coherence checking
time: 0.014; rss: 110MB	wf checking
time: 0.379; rss: 113MB	item-types checking
time: 0.212; rss: 119MB	item-bodies checking
time: 0.000; rss: 119MB	drop-impl checking
time: 0.027; rss: 121MB	const checking
time: 0.004; rss: 121MB	privacy checking
time: 0.001; rss: 121MB	stability index
time: 0.002; rss: 121MB	intrinsic checking
time: 0.001; rss: 121MB	effect checking
time: 0.004; rss: 121MB	match checking
time: 0.002; rss: 121MB	liveness checking
time: 0.007; rss: 121MB	rvalue checking
time: 0.054; rss: 132MB	MIR dump
time: 0.020; rss: 132MB	MIR passes
time: 0.021; rss: 132MB	borrow checking
time: 0.000; rss: 132MB	reachability checking
time: 0.003; rss: 132MB	death checking
time: 0.002; rss: 132MB	stability checking
time: 0.000; rss: 132MB	unused lib feature checking
time: 0.028; rss: 132MB	lint checking
time: 0.000; rss: 132MB	resolving dependency formats
time: 0.005; rss: 132MB	Prepare MIR codegen passes
  time: 0.066; rss: 138MB	translation item collection
  time: 0.001; rss: 138MB	codegen unit partitioning
  time: 0.178; rss: 196MB	write metadata
time: 0.699; rss: 193MB	translation
time: 0.000; rss: 193MB	assert dep graph
time: 0.000; rss: 193MB	serialize dep graph
  time: 0.035; rss: 127MB	llvm function passes [0]
  time: 0.018; rss: 129MB	llvm module passes [0]
  time: 0.609; rss: 132MB	codegen passes [0]
  time: 0.001; rss: 114MB	codegen passes [0]
time: 0.738; rss: 111MB	LLVM passes
time: 0.067; rss: 111MB	linking
done
