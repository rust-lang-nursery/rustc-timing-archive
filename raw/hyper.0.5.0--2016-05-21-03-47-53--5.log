commit 91e907345c4258ff9787d70a4b8c56cb691a64b6
Merge: 500e5c1 5f295f2
Author: bors <bors@rust-lang.org>
Date:   Fri May 20 20:33:38 2016 -0700

    Auto merge of #33625 - alexcrichton:rustbuild-moar-tests, r=aturon
    
    rustbuild: Touch up some test suites
    
    This adds in some missing test suites, primarily a few pretty suites. It also starts optimizing tests by default as the current test suite does, but also recognizes `--disable-optimize-tests`.
    
    Currently the optimization of tests isn't recognized by crate tests because Cargo doesn't support the ability to compile an unoptimized test suite against an optimized library. Perhaps a feature to add, though!
rustc: ./hyper.0.5.0
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling hyper v0.5.0 (file:///root/benchmarks/hyper.0.5.0)
time: 0.031; rss: 52MB	parsing
Lines of code:             9154
Pre-expansion node count:  45851
time: 0.008; rss: 56MB	configuration 1
time: 0.000; rss: 56MB	recursion limit
time: 0.000; rss: 56MB	crate injection
time: 0.021; rss: 93MB	macro loading
time: 0.000; rss: 93MB	plugin loading
time: 0.000; rss: 93MB	plugin registration
time: 0.185; rss: 101MB	expansion
time: 0.029; rss: 101MB	configuration 2
time: 0.000; rss: 101MB	gated configuration checking
time: 0.011; rss: 101MB	maybe building test harness
time: 0.008; rss: 101MB	prelude injection
time: 0.001; rss: 101MB	checking that all macro invocations are gone
time: 0.000; rss: 101MB	checking for inline asm in case the target doesn't support it
time: 0.002; rss: 101MB	complete gated feature checking
Post-expansion node count: 103616
time: 0.008; rss: 101MB	assigning node ids
time: 0.003; rss: 103MB	collecting defs
time: 0.011; rss: 112MB	external crate/lib resolution
time: 0.006; rss: 112MB	early lint checks
time: 0.022; rss: 119MB	name resolution
time: 0.010; rss: 126MB	lowering ast -> hir
time: 0.001; rss: 126MB	indexing hir
time: 0.001; rss: 126MB	attribute checking
time: 0.001; rss: 117MB	language item collection
time: 0.002; rss: 117MB	lifetime resolution
time: 0.000; rss: 117MB	looking for entry point
time: 0.000; rss: 117MB	looking for plugin registrar
time: 0.006; rss: 121MB	region resolution
time: 0.001; rss: 121MB	loop checking
time: 0.001; rss: 121MB	static item recursion checking
time: 0.000; rss: 121MB	load_dep_graph
time: 0.018; rss: 125MB	type collecting
time: 0.000; rss: 125MB	variance inference
time: 0.044; rss: 131MB	coherence checking
time: 0.089; rss: 134MB	wf checking
time: 0.035; rss: 134MB	item-types checking
time: 0.498; rss: 144MB	item-bodies checking
time: 0.000; rss: 144MB	drop-impl checking
time: 0.043; rss: 147MB	const checking
time: 0.009; rss: 147MB	privacy checking
time: 0.001; rss: 147MB	stability index
time: 0.006; rss: 147MB	intrinsic checking
time: 0.002; rss: 147MB	effect checking
time: 0.014; rss: 147MB	match checking
time: 0.005; rss: 147MB	liveness checking
time: 0.030; rss: 147MB	rvalue checking
time: 0.059; rss: 153MB	MIR dump
time: 0.039; rss: 153MB	MIR passes
time: 0.069; rss: 153MB	borrow checking
time: 0.003; rss: 153MB	reachability checking
time: 0.006; rss: 155MB	death checking
time: 0.006; rss: 155MB	stability checking
time: 0.000; rss: 155MB	unused lib feature checking
time: 0.049; rss: 155MB	lint checking
time: 0.000; rss: 155MB	resolving dependency formats
time: 0.012; rss: 155MB	Prepare MIR codegen passes
  time: 0.276; rss: 162MB	translation item collection
  time: 0.008; rss: 164MB	codegen unit partitioning
  time: 0.132; rss: 291MB	write metadata
time: 1.714; rss: 291MB	translation
time: 0.001; rss: 291MB	assert dep graph
time: 0.000; rss: 291MB	serialize dep graph
  time: 0.095; rss: 178MB	llvm function passes [0]
  time: 0.049; rss: 183MB	llvm module passes [0]
  time: 1.619; rss: 185MB	codegen passes [0]
  time: 0.001; rss: 137MB	codegen passes [0]
time: 1.966; rss: 137MB	LLVM passes
time: 0.174; rss: 134MB	linking
done
