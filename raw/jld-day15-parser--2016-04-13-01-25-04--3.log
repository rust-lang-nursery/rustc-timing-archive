commit 4b71f8d1417423d933dfd4f74d5d4d167b85f77e
Merge: 7c27cce bc6daea
Author: bors <bors@rust-lang.org>
Date:   Tue Apr 12 22:21:23 2016 -0700

    Auto merge of #32814 - jseyfried:improve_duplicate_glob_detection, r=nikomatsakis
    
    resolve: Improve duplicate glob detection
    
    This fixes a bug introduced in #31726 in which we erroneously allow multiple imports of the same item under some circumstances.
    
    More specifically, we erroneously allow a module that is in a cycle of glob re-exports to have other re-exports (besides the glob from the cycle).
    For example,
    ```rust
    pub fn f() {}
    mod foo {
        pub use f; // (1) This defines `foo::f`.
        pub use bar::*; // (3) This also defines `foo::f`, which should be a duplicate error but is currently allowed.
    }
    mod bar {
        pub use foo::*; // (2) This defines `bar::f`.
    }
    ```
    
    A module in a glob re-export cycle can still have `pub` items after this PR. For example,
    ```rust
    mod foo {
        pub fn f() {}; // (1) This defines `foo::f`.
        pub use bar::*; // (3) This is not a duplicate error since items shadow glob-imported re-exports (cf #31337).
    }
    mod bar {
        pub use foo::*; // (2) This defines `bar::f`.
    }
    ```
    r? @nikomatsakis
rustc: ./jld-day15-parser
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling day15 v0.1.0 (file:///root/benchmarks/jld-day15-parser)
time: 0.001; rss: 32MB	parsing
Lines of code:             72
Pre-expansion node count:  673
time: 0.000; rss: 32MB	configuration 1
time: 0.000; rss: 32MB	recursion limit
time: 0.000; rss: 32MB	gated macro checking
time: 0.000; rss: 32MB	crate injection
time: 0.003; rss: 37MB	macro loading
time: 0.000; rss: 37MB	plugin loading
time: 0.000; rss: 37MB	plugin registration
time: 0.002; rss: 38MB	expansion
time: 0.000; rss: 38MB	complete gated feature checking 1
time: 0.000; rss: 38MB	configuration 2
time: 0.000; rss: 38MB	gated configuration checking
time: 0.000; rss: 38MB	maybe building test harness
time: 0.000; rss: 38MB	prelude injection
time: 0.000; rss: 38MB	checking that all macro invocations are gone
time: 0.000; rss: 38MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 38MB	complete gated feature checking 2
time: 0.000; rss: 38MB	const fn bodies and arguments
Post-expansion node count: 1176
time: 0.000; rss: 38MB	assigning node ids
time: 0.000; rss: 38MB	lowering ast -> hir
time: 0.000; rss: 38MB	indexing hir
time: 0.000; rss: 38MB	attribute checking
time: 0.000; rss: 38MB	early lint checks
time: 0.002; rss: 38MB	external crate/lib resolution
time: 0.000; rss: 38MB	language item collection
time: 0.001; rss: 48MB	resolution
time: 0.000; rss: 48MB	lifetime resolution
time: 0.000; rss: 48MB	looking for entry point
time: 0.000; rss: 48MB	looking for plugin registrar
time: 0.000; rss: 48MB	region resolution
time: 0.000; rss: 48MB	loop checking
time: 0.000; rss: 48MB	static item recursion checking
time: 0.000; rss: 48MB	load_dep_graph
time: 0.001; rss: 50MB	type collecting
time: 0.000; rss: 50MB	variance inference
time: 0.005; rss: 57MB	coherence checking
time: 0.010; rss: 62MB	wf checking
time: 0.000; rss: 63MB	item-types checking
time: 1.859; rss: 133MB	item-bodies checking
time: 0.000; rss: 133MB	drop-impl checking
time: 0.001; rss: 133MB	const checking
time: 0.000; rss: 133MB	privacy checking
time: 0.000; rss: 133MB	stability index
time: 0.000; rss: 133MB	intrinsic checking
time: 0.000; rss: 133MB	effect checking
time: 0.000; rss: 133MB	match checking
time: 0.000; rss: 133MB	liveness checking
time: 0.002; rss: 133MB	rvalue checking
time: 0.001; rss: 134MB	MIR dump
time: 0.000; rss: 134MB	MIR passes
time: 0.001; rss: 134MB	borrow checking
time: 0.000; rss: 134MB	reachability checking
time: 0.000; rss: 134MB	death checking
time: 0.000; rss: 134MB	stability checking
time: 0.000; rss: 134MB	unused lib feature checking
time: 0.004; rss: 136MB	lint checking
time: 0.001; rss: 136MB	resolving dependency formats
time: 0.000; rss: 136MB	Prepare MIR codegen passes
  time: 12.915; rss: 180MB	translation item collection
  time: 0.000; rss: 217MB	write metadata
time: 39.434; rss: 217MB	translation
time: 0.000; rss: 217MB	assert dep graph
time: 0.000; rss: 217MB	serialize dep graph
  time: 0.014; rss: 99MB	llvm function passes [0]
  time: 0.002; rss: 99MB	llvm module passes [0]
  time: 0.275; rss: 105MB	codegen passes [0]
  time: 0.000; rss: 99MB	codegen passes [0]
time: 0.299; rss: 98MB	LLVM passes
  time: 0.130; rss: 98MB	running linker
time: 0.130; rss: 98MB	linking
done
