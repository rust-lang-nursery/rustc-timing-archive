commit dc8212ff200dc54113a87b3a7033879133fdfff0
Merge: c4788c2 bbff336
Author: bors <bors@rust-lang.org>
Date:   Sat Jul 16 01:19:16 2016 -0700

    Auto merge of #34779 - infinity0:master, r=alexcrichton
    
    If local-rust is the same as the current version, then force a local-rebuild
    
    In Debian, we would like the option to build/rebuild the current release from
    *either* the current or previous stable release. So we use enable-local-rust
    instead of enable-local-rebuild, and read the bootstrap key dynamically from
    whatever is installed locally.
    
    In general, it does not make much sense to allow enable-local-rust without also
    setting the bootstrap key, since the build would fail otherwise.
    
    (The way I detect "the bootstrap key of [the local] rustc installation" is a bit hacky, suggestions welcome.)
rustc: ./regex.0.1.30
cargo rustc -- -Ztime-passes -Zinput-stats
    Updating registry `https://github.com/rust-lang/crates.io-index`
   Compiling regex v0.1.30 (file:///root/benchmarks/regex.0.1.30)
time: 0.065; rss: 99MB	parsing
Lines of code:             8558
Pre-expansion node count:  58076
time: 0.010; rss: 99MB	configuration
time: 0.000; rss: 99MB	recursion limit
time: 0.000; rss: 99MB	crate injection
time: 0.000; rss: 99MB	plugin loading
time: 0.000; rss: 99MB	plugin registration
time: 0.037; rss: 133MB	expansion
time: 0.000; rss: 133MB	maybe building test harness
time: 0.006; rss: 133MB	assigning node ids
Post-expansion node count: 68148
time: 0.000; rss: 133MB	checking for inline asm in case the target doesn't support it
time: 0.001; rss: 133MB	complete gated feature checking
time: 0.001; rss: 133MB	collecting defs
time: 0.001; rss: 133MB	external crate/lib resolution
time: 0.006; rss: 134MB	early lint checks
time: 0.000; rss: 134MB	AST validation
time: 0.006; rss: 136MB	name resolution
time: 0.008; rss: 145MB	lowering ast -> hir
time: 0.001; rss: 148MB	indexing hir
time: 0.001; rss: 148MB	attribute checking
time: 0.001; rss: 139MB	language item collection
time: 0.001; rss: 139MB	lifetime resolution
time: 0.000; rss: 139MB	looking for entry point
time: 0.000; rss: 139MB	looking for plugin registrar
time: 0.006; rss: 141MB	region resolution
time: 0.001; rss: 141MB	loop checking
time: 0.001; rss: 141MB	static item recursion checking
time: 0.000; rss: 141MB	load_dep_graph
time: 0.010; rss: 143MB	type collecting
time: 0.000; rss: 143MB	variance inference
time: 0.025; rss: 147MB	coherence checking
time: 0.014; rss: 147MB	wf checking
time: 0.332; rss: 157MB	item-types checking
time: 0.204; rss: 161MB	item-bodies checking
time: 0.000; rss: 161MB	drop-impl checking
time: 0.027; rss: 164MB	const checking
time: 0.004; rss: 164MB	privacy checking
time: 0.001; rss: 164MB	stability index
time: 0.002; rss: 164MB	intrinsic checking
time: 0.001; rss: 164MB	effect checking
time: 0.004; rss: 164MB	match checking
time: 0.002; rss: 164MB	liveness checking
time: 0.008; rss: 164MB	rvalue checking
time: 0.053; rss: 174MB	MIR dump
time: 0.021; rss: 174MB	MIR passes
time: 0.022; rss: 174MB	borrow checking
time: 0.000; rss: 174MB	reachability checking
time: 0.002; rss: 174MB	death checking
time: 0.002; rss: 174MB	stability checking
time: 0.000; rss: 174MB	unused lib feature checking
time: 0.029; rss: 174MB	lint checking
time: 0.000; rss: 174MB	resolving dependency formats
time: 0.018; rss: 176MB	Prepare MIR codegen passes
  time: 0.174; rss: 188MB	write metadata
  time: 0.059; rss: 190MB	translation item collection
  time: 0.008; rss: 190MB	codegen unit partitioning
time: 1.542; rss: 236MB	translation
time: 0.000; rss: 236MB	assert dep graph
time: 0.000; rss: 236MB	serialize dep graph
  time: 0.408; rss: 167MB	llvm function passes [0]
  time: 0.187; rss: 168MB	llvm module passes [0]
  time: 6.005; rss: 169MB	codegen passes [0]
  time: 0.002; rss: 170MB	codegen passes [0]
time: 7.024; rss: 169MB	LLVM passes
time: 0.063; rss: 150MB	linking
done
