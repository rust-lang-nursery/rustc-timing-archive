commit 35635aebab321ff2a4708aeb172351356ad63cf7
Merge: 5147c1f ee79bfa
Author: bors <bors@rust-lang.org>
Date:   Sat Feb 6 09:24:04 2016 +0000

    Auto merge of #31333 - lambda:31273-abort-on-stack-overflow, r=brson
    
    Abort on stack overflow instead of re-raising SIGSEGV
    
    We use guard pages that cause the process to abort to protect against
    undefined behavior in the event of stack overflow.  We have a handler
    that catches segfaults, prints out an error message if the segfault was
    due to a stack overflow, then unregisters itself and returns to allow
    the signal to be re-raised and kill the process.
    
    This caused some confusion, as it was unexpected that safe code would be
    able to cause a segfault, while it's easy to overflow the stack in safe
    code.  To avoid this confusion, when we detect a segfault in the guard
    page, abort instead of the previous behavior of re-raising SIGSEGV.
    
    To test this, we need to adapt the tests for segfault to actually check
    the exit status.  Doing so revealed that the existing test for segfault
    behavior was actually invalid; LLVM optimizes the explicit null pointer
    reference down to an illegal instruction, so the program aborts with
    SIGILL instead of SIGSEGV and the test didn't actually trigger the
    signal handler at all.  Use a C helper function to get a null pointer
    that LLVM can't optimize away, so we get our segfault instead.
    
    This is a [breaking-change] if anyone is relying on the exact signal
    raised to kill a process on stack overflow.
    
    Closes #31273
rustc: ./piston-image-0.3.11
cargo rustc -- -Ztime-passes -Zinput-stats
    Updating registry `https://github.com/rust-lang/crates.io-index`
   Compiling bitflags v0.4.0
   Compiling color_quant v1.0.0
   Compiling gcc v0.3.21
   Compiling byteorder v0.3.13
   Compiling lzw v0.8.0
   Compiling rustc-serialize v0.3.16
   Compiling winapi-build v0.1.1
   Compiling libc v0.2.6
   Compiling winapi v0.2.5
   Compiling glob v0.2.10
   Compiling advapi32-sys v0.1.2
   Compiling gif v0.5.1
   Compiling rand v0.3.13
   Compiling miniz-sys v0.1.7
   Compiling flate2 v0.2.13
   Compiling num v0.1.30
   Compiling enum_primitive v0.0.1
   Compiling png v0.3.1
   Compiling image v0.3.11 (file:///root/benchmarks/piston-image-0.3.11)
time: 0.044; rss: 47MB	parsing
Lines of code:             10676
Pre-expansion node count:  84646
time: 0.016; rss: 47MB	configuration 1
time: 0.000; rss: 47MB	recursion limit
time: 0.001; rss: 47MB	gated macro checking
time: 0.000; rss: 47MB	crate injection
time: 0.004; rss: 53MB	macro loading
time: 0.000; rss: 53MB	plugin loading
time: 0.000; rss: 53MB	plugin registration
time: 0.122; rss: 57MB	expansion
time: 0.004; rss: 57MB	complete gated feature checking 1
time: 0.026; rss: 57MB	configuration 2
time: 0.000; rss: 57MB	gated configuration checking
time: 0.013; rss: 57MB	maybe building test harness
time: 0.012; rss: 57MB	prelude injection
time: 0.001; rss: 57MB	checking that all macro invocations are gone
time: 0.000; rss: 57MB	checking for inline asm in case the target doesn't support it
time: 0.003; rss: 57MB	complete gated feature checking 2
Post-expansion node count: 144338
time: 0.012; rss: 57MB	assigning node ids
time: 0.020; rss: 70MB	lowering ast -> hir
time: 0.006; rss: 71MB	indexing hir
time: 0.000; rss: 71MB	attribute checking
time: 0.009; rss: 71MB	early lint checks
time: 0.003; rss: 62MB	external crate/lib resolution
time: 0.001; rss: 62MB	language item collection
time: 0.029; rss: 79MB	resolution
time: 0.003; rss: 79MB	lifetime resolution
time: 0.000; rss: 79MB	looking for entry point
time: 0.000; rss: 79MB	looking for plugin registrar
time: 0.010; rss: 87MB	region resolution
time: 0.001; rss: 87MB	loop checking
time: 0.001; rss: 87MB	static item recursion checking
time: 0.011; rss: 90MB	type collecting
time: 0.000; rss: 90MB	variance inference
time: 0.031; rss: 108MB	coherence checking
time: 0.142; rss: 111MB	wf checking
time: 0.050; rss: 114MB	item-types checking
time: 1.650; rss: 146MB	item-bodies checking
time: 0.000; rss: 146MB	drop-impl checking
time: 0.074; rss: 147MB	const checking
time: 0.012; rss: 147MB	privacy checking
time: 0.001; rss: 147MB	stability index
time: 0.010; rss: 147MB	intrinsic checking
time: 0.003; rss: 147MB	effect checking
time: 0.025; rss: 147MB	match checking
time: 0.095; rss: 154MB	MIR dump
time: 0.011; rss: 157MB	liveness checking
time: 0.153; rss: 157MB	borrow checking
time: 0.078; rss: 157MB	rvalue checking
time: 0.003; rss: 157MB	reachability checking
time: 0.009; rss: 157MB	death checking
time: 0.011; rss: 157MB	stability checking
time: 0.000; rss: 157MB	unused lib feature checking
time: 0.085; rss: 157MB	lint checking
time: 0.000; rss: 157MB	resolving dependency formats
time: 0.008; rss: 157MB	erasing regions from MIR
  time: 0.213; rss: 281MB	write metadata
time: 2.863; rss: 274MB	translation
  time: 0.098; rss: 165MB	llvm function passes [0]
  time: 0.045; rss: 166MB	llvm module passes [0]
  time: 1.736; rss: 214MB	codegen passes [0]
  time: 0.001; rss: 182MB	codegen passes [0]
time: 2.083; rss: 182MB	LLVM passes
time: 0.150; rss: 180MB	linking
done
