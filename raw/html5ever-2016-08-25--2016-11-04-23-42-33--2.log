commit e96b9d2bb48b7a886a4d2b9df716265af5d15646
Merge: 713a360 67626e0
Author: bors <bors@rust-lang.org>
Date:   Fri Nov 4 17:48:07 2016 -0700

    Auto merge of #37422 - bluss:wrapping-offset, r=alexcrichton
    
    Add .wrapping_offset() methods
    
    .wrapping_offset() exposes the arith_offset intrinsic in the core
    module (as methods on raw pointers, next to offset). This is the
    first step in making it possible to stabilize the interface later.
    
    `arith_offset` is a useful tool for developing iterators for two
    reasons:
    1. `arith_offset` is used by the slice's iterator, the most important
       iterator in libcore, and it is natural that Rust users need the same
       power available to implement similar iterators.
    2. It is a good way to implement raw pointer iterations with step
       greater than one.
    
    The name seems to fit the style of methods like "wrapping_add".
rustc: ./html5ever-2016-08-25
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling html5ever v0.5.4 (file:///root/benchmarks/html5ever-2016-08-25)
time: 0.027; rss: 52MB	parsing
Lines of code:             8210
Pre-expansion node count:  52238
time: 0.000; rss: 52MB	recursion limit
time: 0.000; rss: 52MB	crate injection
time: 0.000; rss: 52MB	plugin loading
time: 0.000; rss: 52MB	plugin registration
time: 0.491; rss: 107MB	expansion
time: 0.000; rss: 107MB	maybe building test harness
time: 0.002; rss: 107MB	maybe creating a macro crate
Post-expansion node count: 163524
time: 0.000; rss: 107MB	checking for inline asm in case the target doesn't support it
time: 0.003; rss: 107MB	complete gated feature checking
time: 0.009; rss: 107MB	early lint checks
time: 0.002; rss: 107MB	AST validation
time: 0.018; rss: 112MB	name resolution
time: 0.014; rss: 119MB	lowering ast -> hir
time: 0.003; rss: 123MB	indexing hir
time: 0.002; rss: 123MB	attribute checking
time: 0.001; rss: 99MB	language item collection
time: 0.002; rss: 99MB	lifetime resolution
time: 0.000; rss: 99MB	looking for entry point
time: 0.000; rss: 99MB	looking for plugin registrar
time: 0.015; rss: 106MB	region resolution
time: 0.001; rss: 106MB	loop checking
time: 0.001; rss: 106MB	static item recursion checking
time: 0.025; rss: 107MB	compute_incremental_hashes_map
time: 0.000; rss: 107MB	load_dep_graph
time: 0.009; rss: 110MB	type collecting
time: 0.000; rss: 110MB	variance inference
time: 0.022; rss: 113MB	coherence checking
time: 0.022; rss: 113MB	wf checking
time: 0.324; rss: 120MB	item-types checking
time: 0.470; rss: 135MB	item-bodies checking
time: 0.000; rss: 135MB	drop-impl checking
time: 0.068; rss: 138MB	const checking
time: 0.007; rss: 138MB	privacy checking
time: 0.001; rss: 138MB	stability index
time: 0.003; rss: 138MB	intrinsic checking
time: 0.003; rss: 138MB	effect checking
time: 0.015; rss: 138MB	match checking
time: 0.012; rss: 132MB	liveness checking
time: 0.025; rss: 132MB	rvalue checking
time: 0.117; rss: 182MB	MIR dump
  time: 0.009; rss: 170MB	SimplifyCfg
  time: 0.014; rss: 172MB	QualifyAndPromoteConstants
  time: 0.023; rss: 172MB	TypeckMir
  time: 0.000; rss: 172MB	SimplifyBranches
  time: 0.004; rss: 172MB	SimplifyCfg
time: 0.050; rss: 172MB	MIR cleanup and validation
time: 0.088; rss: 180MB	borrow checking
time: 0.003; rss: 180MB	reachability checking
time: 0.006; rss: 180MB	death checking
time: 0.008; rss: 180MB	stability checking
time: 0.000; rss: 180MB	unused lib feature checking
time: 0.059; rss: 180MB	lint checking
time: 0.000; rss: 180MB	resolving dependency formats
  time: 0.000; rss: 180MB	NoLandingPads
  time: 0.004; rss: 180MB	SimplifyCfg
  time: 0.009; rss: 180MB	EraseRegions
  time: 0.001; rss: 180MB	AddCallGuards
  time: 0.075; rss: 185MB	ElaborateDrops
  time: 0.000; rss: 185MB	NoLandingPads
  time: 0.006; rss: 183MB	SimplifyCfg
  time: 0.008; rss: 181MB	InstCombine
  time: 0.001; rss: 181MB	Deaggregator
  time: 0.000; rss: 181MB	CopyPropagation
  time: 0.007; rss: 179MB	SimplifyLocals
  time: 0.001; rss: 179MB	AddCallGuards
  time: 0.000; rss: 179MB	PreTrans
time: 0.114; rss: 179MB	MIR optimisations
  time: 0.012; rss: 181MB	write metadata
  time: 0.045; rss: 182MB	translation item collection
  time: 0.005; rss: 183MB	codegen unit partitioning
  time: 0.005; rss: 196MB	internalize symbols
time: 0.287; rss: 196MB	translation
time: 0.000; rss: 196MB	assert dep graph
time: 0.000; rss: 196MB	serialize dep graph
  time: 0.020; rss: 105MB	llvm function passes [0]
  time: 0.012; rss: 106MB	llvm module passes [0]
  time: 0.469; rss: 110MB	codegen passes [0]
  time: 0.000; rss: 110MB	codegen passes [0]
time: 0.542; rss: 110MB	LLVM passes
time: 0.000; rss: 110MB	serialize work products
time: 0.024; rss: 93MB	linking
done
