commit 75df685d28947ea7d2422a24f14aa1254da1aeb4
Merge: f374565 607d297
Author: bors <bors@rust-lang.org>
Date:   Mon Oct 3 04:25:58 2016 -0700

    Auto merge of #36766 - nnethercote:hash-span-capacity, r=bluss
    
    Clarify HashMap's capacity handling.
    
    HashMap has two notions of "capacity":
    
    - "Usable capacity": the number of elements a hash map can hold without
      resizing. This is the meaning of "capacity" used in HashMap's API,
      e.g. the `with_capacity()` function.
    
    - "Internal capacity": the number of allocated slots. Except for the
      zero case, it is always larger than the usable capacity (because some
      slots must be left empty) and is always a power of two.
    
    HashMap's code is confusing because it does a poor job of
    distinguishing these two meanings. I propose using two different terms
    for these two concepts. Because "capacity" is already used in HashMap's
    API to mean "usable capacity", I will use a different word for "internal
    capacity". I propose "span", though I'm happy to consider other names.
rustc: ./inflate-0.1.0
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling inflate v0.1.0 (file:///root/benchmarks/inflate-0.1.0)
time: 0.004; rss: 43MB	parsing
Lines of code:             956
Pre-expansion node count:  4740
time: 0.000; rss: 43MB	recursion limit
time: 0.000; rss: 43MB	crate injection
time: 0.000; rss: 43MB	plugin loading
time: 0.000; rss: 43MB	plugin registration
time: 0.088; rss: 70MB	expansion
time: 0.000; rss: 70MB	maybe building test harness
time: 0.000; rss: 70MB	maybe creating a macro crate
Post-expansion node count: 55750
time: 0.000; rss: 70MB	checking for inline asm in case the target doesn't support it
time: 0.001; rss: 70MB	complete gated feature checking
time: 0.002; rss: 70MB	early lint checks
time: 0.000; rss: 70MB	AST validation
time: 0.012; rss: 72MB	name resolution
time: 0.012; rss: 76MB	lowering ast -> hir
time: 0.001; rss: 77MB	indexing hir
time: 0.000; rss: 77MB	attribute checking
time: 0.001; rss: 72MB	language item collection
time: 0.001; rss: 72MB	lifetime resolution
time: 0.000; rss: 72MB	looking for entry point
time: 0.000; rss: 72MB	looking for plugin registrar
time: 0.006; rss: 74MB	region resolution
time: 0.000; rss: 74MB	loop checking
time: 0.000; rss: 74MB	static item recursion checking
time: 0.023; rss: 74MB	compute_incremental_hashes_map
time: 0.000; rss: 74MB	load_dep_graph
time: 0.002; rss: 75MB	type collecting
time: 0.000; rss: 75MB	variance inference
time: 0.009; rss: 76MB	coherence checking
time: 0.001; rss: 76MB	wf checking
time: 0.002; rss: 76MB	item-types checking
time: 2.403; rss: 88MB	item-bodies checking
time: 0.000; rss: 88MB	drop-impl checking
time: 0.018; rss: 89MB	const checking
time: 0.002; rss: 89MB	privacy checking
time: 0.000; rss: 89MB	stability index
time: 0.001; rss: 89MB	intrinsic checking
time: 0.001; rss: 89MB	effect checking
time: 0.003; rss: 89MB	match checking
time: 0.320; rss: 87MB	liveness checking
time: 0.014; rss: 87MB	rvalue checking
time: 0.038; rss: 107MB	MIR dump
  time: 0.007; rss: 107MB	SimplifyCfg
  time: 0.005; rss: 107MB	QualifyAndPromoteConstants
  time: 0.007; rss: 107MB	TypeckMir
  time: 0.000; rss: 107MB	SimplifyBranches
  time: 0.003; rss: 107MB	SimplifyCfg
time: 0.023; rss: 107MB	MIR passes
time: 0.209; rss: 109MB	borrow checking
time: 0.000; rss: 109MB	reachability checking
time: 0.004; rss: 109MB	death checking
time: 0.002; rss: 109MB	stability checking
time: 0.000; rss: 109MB	unused lib feature checking
time: 0.019; rss: 110MB	lint checking
time: 0.000; rss: 110MB	resolving dependency formats
  time: 0.000; rss: 110MB	NoLandingPads
  time: 0.002; rss: 110MB	SimplifyCfg
  time: 0.003; rss: 110MB	EraseRegions
  time: 0.001; rss: 110MB	AddCallGuards
  time: 0.140; rss: 112MB	ElaborateDrops
  time: 0.000; rss: 112MB	NoLandingPads
  time: 0.006; rss: 111MB	SimplifyCfg
  time: 0.003; rss: 111MB	InstCombine
  time: 0.000; rss: 111MB	Deaggregator
  time: 0.000; rss: 111MB	CopyPropagation
  time: 0.001; rss: 111MB	AddCallGuards
  time: 0.000; rss: 111MB	PreTrans
time: 0.156; rss: 111MB	Prepare MIR codegen passes
  time: 0.002; rss: 112MB	write metadata
  time: 0.011; rss: 112MB	translation item collection
  time: 0.001; rss: 112MB	codegen unit partitioning
  time: 0.001; rss: 125MB	internalize symbols
time: 0.164; rss: 106MB	translation
time: 0.000; rss: 106MB	assert dep graph
time: 0.000; rss: 106MB	serialize dep graph
  time: 0.028; rss: 87MB	llvm function passes [0]
  time: 0.006; rss: 88MB	llvm module passes [0]
  time: 0.671; rss: 95MB	codegen passes [0]
  time: 0.000; rss: 94MB	codegen passes [0]
time: 0.738; rss: 95MB	LLVM passes
time: 0.000; rss: 95MB	serialize work products
time: 0.046; rss: 79MB	linking
done
