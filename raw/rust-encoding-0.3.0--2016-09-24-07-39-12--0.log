commit bdad70213b32454837c0ed16dbbac3954325feea
Merge: 41e3aee 2e02803
Author: bors <bors@rust-lang.org>
Date:   Sat Sep 24 02:03:18 2016 -0700

    Auto merge of #36685 - brson:rev-string-from, r=sfackler
    
    Revert "implement `From<Vec<char>>` and `From<&'a [char]>` for `String`"
    
    This reverts commit ac73335f2f5421c914fa3900567696cc6dc73d8d.
    
    This is a revert of https://github.com/rust-lang/rust/pull/35054, which resulted in at least 7 known regressions, reported [here](https://internals.rust-lang.org/t/regression-report-stable-2016-08-16-vs-beta-2016-09-21/4119) and [here](https://github.com/rust-lang/rust/issues/36352), which will hit stable next week.
    
    I think this breakage was somewhat unanticipated, and we did not realize so many crates were broken until this week, so reverting is the conservative thing to do until we figure out how not to cause so much breakage. I've run crater on the revert and did not find any new breakage from the revert.
    
    Fixes https://github.com/rust-lang/rust/issues/36352
    
    cc @pwoolcoc @rust-lang/libs
rustc: ./rust-encoding-0.3.0
cargo rustc -- -Ztime-passes -Zinput-stats
    Updating registry `https://github.com/rust-lang/crates.io-index`
   Compiling encoding_index_tests v0.1.5 (file:///root/benchmarks/rust-encoding-0.3.0)
   Compiling encoding-types v0.2.0 (file:///root/benchmarks/rust-encoding-0.3.0)
   Compiling encoding-index-tradchinese v1.20141219.6 (file:///root/benchmarks/rust-encoding-0.3.0)
   Compiling encoding-index-japanese v1.20141219.6 (file:///root/benchmarks/rust-encoding-0.3.0)
   Compiling encoding-index-korean v1.20141219.6 (file:///root/benchmarks/rust-encoding-0.3.0)
   Compiling encoding-index-simpchinese v1.20160120.0 (file:///root/benchmarks/rust-encoding-0.3.0)
   Compiling encoding-index-singlebyte v1.20160120.0 (file:///root/benchmarks/rust-encoding-0.3.0)
   Compiling encoding v0.3.0-dev (file:///root/benchmarks/rust-encoding-0.3.0)
time: 0.021; rss: 48MB	parsing
Lines of code:             6066
Pre-expansion node count:  28489
time: 0.000; rss: 48MB	recursion limit
time: 0.000; rss: 48MB	crate injection
time: 0.000; rss: 48MB	plugin loading
time: 0.000; rss: 48MB	plugin registration
time: 0.040; rss: 73MB	expansion
time: 0.000; rss: 73MB	maybe building test harness
time: 0.000; rss: 73MB	maybe creating a macro crate
time: 0.002; rss: 73MB	assigning node ids
Post-expansion node count: 39145
time: 0.000; rss: 73MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 73MB	complete gated feature checking
time: 0.001; rss: 73MB	collecting defs
time: 0.001; rss: 75MB	external crate/lib resolution
time: 0.001; rss: 75MB	early lint checks
time: 0.000; rss: 75MB	AST validation
time: 0.004; rss: 78MB	name resolution
time: 0.004; rss: 81MB	lowering ast -> hir
time: 0.001; rss: 81MB	indexing hir
time: 0.000; rss: 81MB	attribute checking
time: 0.000; rss: 80MB	language item collection
time: 0.001; rss: 80MB	lifetime resolution
time: 0.000; rss: 80MB	looking for entry point
time: 0.000; rss: 80MB	looking for plugin registrar
time: 0.002; rss: 82MB	region resolution
time: 0.000; rss: 82MB	loop checking
time: 0.000; rss: 82MB	static item recursion checking
time: 0.015; rss: 82MB	compute_incremental_hashes_map
time: 0.000; rss: 82MB	load_dep_graph
time: 0.010; rss: 84MB	type collecting
time: 0.000; rss: 84MB	variance inference
time: 0.016; rss: 87MB	coherence checking
time: 0.014; rss: 87MB	wf checking
time: 0.011; rss: 87MB	item-types checking
time: 0.148; rss: 93MB	item-bodies checking
time: 0.000; rss: 93MB	drop-impl checking
time: 0.011; rss: 93MB	const checking
time: 0.001; rss: 93MB	privacy checking
time: 0.000; rss: 93MB	stability index
time: 0.002; rss: 93MB	intrinsic checking
time: 0.000; rss: 93MB	effect checking
time: 0.007; rss: 93MB	match checking
time: 0.001; rss: 93MB	liveness checking
time: 0.007; rss: 93MB	rvalue checking
time: 0.020; rss: 103MB	MIR dump
  time: 0.003; rss: 103MB	SimplifyCfg
  time: 0.004; rss: 104MB	QualifyAndPromoteConstants
  time: 0.005; rss: 104MB	TypeckMir
  time: 0.000; rss: 104MB	SimplifyBranches
  time: 0.001; rss: 104MB	SimplifyCfg
time: 0.013; rss: 104MB	MIR passes
time: 0.021; rss: 104MB	borrow checking
time: 0.000; rss: 104MB	reachability checking
time: 0.001; rss: 104MB	death checking
time: 0.002; rss: 104MB	stability checking
time: 0.000; rss: 104MB	unused lib feature checking
time: 0.017; rss: 104MB	lint checking
time: 0.000; rss: 104MB	resolving dependency formats
  time: 0.000; rss: 104MB	NoLandingPads
  time: 0.001; rss: 104MB	SimplifyCfg
  time: 0.002; rss: 104MB	EraseRegions
  time: 0.000; rss: 104MB	AddCallGuards
  time: 0.018; rss: 104MB	ElaborateDrops
  time: 0.000; rss: 104MB	NoLandingPads
  time: 0.002; rss: 104MB	SimplifyCfg
  time: 0.001; rss: 104MB	Deaggregator
  time: 0.000; rss: 104MB	AddCallGuards
  time: 0.000; rss: 104MB	PreTrans
time: 0.025; rss: 104MB	Prepare MIR codegen passes
  time: 0.021; rss: 106MB	write metadata
  time: 0.244; rss: 234MB	translation item collection
  time: 0.003; rss: 234MB	codegen unit partitioning
  time: 0.006; rss: 255MB	internalize symbols
time: 0.602; rss: 247MB	translation
time: 0.000; rss: 247MB	assert dep graph
time: 0.000; rss: 247MB	serialize dep graph
  time: 0.027; rss: 123MB	llvm function passes [0]
  time: 0.056; rss: 127MB	llvm module passes [0]
  time: 0.664; rss: 132MB	codegen passes [0]
  time: 0.001; rss: 132MB	codegen passes [0]
time: 0.805; rss: 132MB	LLVM passes
time: 0.000; rss: 132MB	serialize work products
time: 0.083; rss: 101MB	linking
done
