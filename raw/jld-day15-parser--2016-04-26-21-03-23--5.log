commit 8f552181895921a377ab8c235340ea3d80ec7fc0
Merge: 897199a 9249e6a
Author: bors <bors@rust-lang.org>
Date:   Tue Apr 26 14:54:37 2016 -0700

    Auto merge of #31414 - durka:clone-copy, r=alexcrichton
    
    special-case #[derive(Copy, Clone)] with a shallow clone
    
    If a type is Copy then its Clone implementation can be a no-op. Currently `#[derive(Clone)]` generates a deep clone anyway. This can lead to lots of code bloat.
    
    This PR detects the case where Copy and Clone are both being derived (the general case of "is this type Copy" can't be determined by a syntax extension) and generates the shallow Clone impl. Right now this can only be done if there are no type parameters (see https://github.com/rust-lang/rust/issues/31085#issuecomment-178988663), but this restriction can be removed after specialization.
    
    Fixes #31085.
rustc: ./jld-day15-parser
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling day15 v0.1.0 (file:///root/benchmarks/jld-day15-parser)
time: 0.001; rss: 40MB	parsing
Lines of code:             72
Pre-expansion node count:  673
time: 0.000; rss: 40MB	configuration 1
time: 0.000; rss: 40MB	recursion limit
time: 0.000; rss: 40MB	gated macro checking
time: 0.000; rss: 40MB	crate injection
time: 0.003; rss: 45MB	macro loading
time: 0.000; rss: 45MB	plugin loading
time: 0.000; rss: 45MB	plugin registration
time: 0.002; rss: 47MB	expansion
time: 0.000; rss: 47MB	complete gated feature checking 1
time: 0.000; rss: 47MB	configuration 2
time: 0.000; rss: 47MB	gated configuration checking
time: 0.000; rss: 47MB	maybe building test harness
time: 0.000; rss: 47MB	prelude injection
time: 0.000; rss: 47MB	checking that all macro invocations are gone
time: 0.000; rss: 47MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 47MB	complete gated feature checking 2
time: 0.000; rss: 47MB	const fn bodies and arguments
Post-expansion node count: 1176
time: 0.000; rss: 47MB	assigning node ids
time: 0.000; rss: 47MB	collecting defs
time: 0.002; rss: 47MB	external crate/lib resolution
time: 0.000; rss: 48MB	lowering ast -> hir
time: 0.000; rss: 48MB	indexing hir
time: 0.000; rss: 48MB	attribute checking
time: 0.000; rss: 48MB	early lint checks
time: 0.000; rss: 48MB	language item collection
time: 0.001; rss: 55MB	name resolution
time: 0.000; rss: 55MB	lifetime resolution
time: 0.000; rss: 55MB	looking for entry point
time: 0.000; rss: 55MB	looking for plugin registrar
time: 0.000; rss: 55MB	region resolution
time: 0.000; rss: 55MB	loop checking
time: 0.000; rss: 55MB	static item recursion checking
time: 0.000; rss: 55MB	load_dep_graph
time: 0.001; rss: 58MB	type collecting
time: 0.000; rss: 58MB	variance inference
time: 0.008; rss: 65MB	coherence checking
time: 0.007; rss: 71MB	wf checking
time: 0.000; rss: 71MB	item-types checking
time: 1.819; rss: 142MB	item-bodies checking
time: 0.000; rss: 142MB	drop-impl checking
time: 0.001; rss: 142MB	const checking
time: 0.000; rss: 142MB	privacy checking
time: 0.000; rss: 142MB	stability index
time: 0.000; rss: 142MB	intrinsic checking
time: 0.000; rss: 142MB	effect checking
time: 0.000; rss: 142MB	match checking
time: 0.000; rss: 142MB	liveness checking
time: 0.002; rss: 142MB	rvalue checking
time: 0.001; rss: 143MB	MIR dump
time: 0.000; rss: 143MB	MIR passes
time: 0.001; rss: 143MB	borrow checking
time: 0.000; rss: 143MB	reachability checking
time: 0.000; rss: 143MB	death checking
time: 0.000; rss: 143MB	stability checking
time: 0.000; rss: 143MB	unused lib feature checking
time: 0.004; rss: 144MB	lint checking
time: 0.001; rss: 144MB	resolving dependency formats
time: 0.000; rss: 144MB	Prepare MIR codegen passes
  time: 12.326; rss: 180MB	translation item collection
  time: 0.001; rss: 180MB	codegen unit partitioning
  time: 0.000; rss: 217MB	write metadata
time: 38.593; rss: 217MB	translation
time: 0.000; rss: 217MB	assert dep graph
time: 0.000; rss: 217MB	serialize dep graph
  time: 0.015; rss: 100MB	llvm function passes [0]
  time: 0.002; rss: 100MB	llvm module passes [0]
  time: 0.271; rss: 106MB	codegen passes [0]
  time: 0.000; rss: 100MB	codegen passes [0]
time: 0.296; rss: 100MB	LLVM passes
  time: 0.121; rss: 100MB	running linker
time: 0.122; rss: 100MB	linking
done
