commit fc2373c5a24646745dcbc14dc58889a9d8843f4e
Merge: 4bc9290 5a3aa2f
Author: bors <bors@rust-lang.org>
Date:   Sun Nov 20 17:06:53 2016 -0600

    Auto merge of #37888 - bluss:chars-count, r=alexcrichton
    
    Improve .chars().count()
    
    Use a simpler loop to count the `char` of a string: count the
    number of non-continuation bytes. Use `count += <conditional>` which the
    compiler understands well and can apply loop optimizations to.
    
    benchmark descriptions and results for two configurations:
    
    - ascii: ascii text
    - cy: cyrillic text
    - jp: japanese text
    - words ascii: counting each split_whitespace item from the ascii text
    - words jp: counting each split_whitespace item from the jp text
    
    ```
    x86-64 rustc -Copt-level=3
     name               orig_ ns/iter      cmov_ ns/iter      diff ns/iter   diff %
     count_ascii        1,453 (1755 MB/s)  1,398 (1824 MB/s)           -55   -3.79%
     count_cy           5,990 (856 MB/s)   2,545 (2016 MB/s)        -3,445  -57.51%
     count_jp           3,075 (1169 MB/s)  1,772 (2029 MB/s)        -1,303  -42.37%
     count_words_ascii  4,157 (521 MB/s)   1,797 (1205 MB/s)        -2,360  -56.77%
     count_words_jp     3,337 (1071 MB/s)  1,772 (2018 MB/s)        -1,565  -46.90%
    
    x86-64 rustc -Ctarget-feature=+avx -Copt-level=3
     name               orig_ ns/iter      cmov_ ns/iter      diff ns/iter   diff %
     count_ascii        1,444 (1766 MB/s)  763 (3343 MB/s)            -681  -47.16%
     count_cy           5,871 (874 MB/s)   1,527 (3360 MB/s)        -4,344  -73.99%
     count_jp           2,874 (1251 MB/s)  1,073 (3351 MB/s)        -1,801  -62.67%
     count_words_ascii  4,131 (524 MB/s)   1,871 (1157 MB/s)        -2,260  -54.71%
     count_words_jp     3,253 (1099 MB/s)  1,331 (2686 MB/s)        -1,922  -59.08%
    ```
    
    I briefly explored a more involved blocked algorithm (looking at 8 or more bytes at a time),
    but the code in this PR was always winning `count_words_ascii` in particular (counting
    many small strings); this solution is an improvement without tradeoffs.
rustc: ./piston-image-0.10.3
cargo rustc  -- -Ztime-passes -Zinput-stats
   Compiling libc v0.2.16
   Compiling num-traits v0.1.35
   Compiling rustc-serialize v0.3.19
   Compiling color_quant v1.0.0
   Compiling gcc v0.3.35
   Compiling glob v0.2.11
   Compiling lzw v0.10.0
   Compiling inflate v0.1.1
   Compiling bitflags v0.7.0
   Compiling scoped_threadpool v0.1.7
   Compiling gif v0.9.0
   Compiling rand v0.3.14
   Compiling num-integer v0.1.32
   Compiling num_cpus v0.2.13
   Compiling byteorder v0.5.3
   Compiling num-iter v0.1.32
   Compiling miniz-sys v0.1.7
   Compiling num v0.1.35
   Compiling enum_primitive v0.1.0
   Compiling flate2 v0.2.14
   Compiling deque v0.3.1
   Compiling rayon v0.4.2
   Compiling jpeg-decoder v0.1.6
   Compiling png v0.5.2
   Compiling num-bigint v0.1.35
   Compiling num-rational v0.1.35
   Compiling image v0.10.3 (file:///root/benchmarks/piston-image-0.10.3)
time: 0.038; rss: 54MB	parsing
Lines of code:             12000
Pre-expansion node count:  90152
time: 0.000; rss: 54MB	recursion limit
time: 0.000; rss: 54MB	crate injection
time: 0.000; rss: 54MB	plugin loading
time: 0.000; rss: 54MB	plugin registration
time: 0.066; rss: 95MB	expansion
time: 0.000; rss: 95MB	maybe building test harness
time: 0.001; rss: 95MB	maybe creating a macro crate
Post-expansion node count: 148881
time: 0.000; rss: 95MB	checking for inline asm in case the target doesn't support it
time: 0.003; rss: 95MB	complete gated feature checking
time: 0.005; rss: 95MB	early lint checks
time: 0.001; rss: 95MB	AST validation
time: 0.018; rss: 99MB	name resolution
time: 0.012; rss: 105MB	lowering ast -> hir
time: 0.002; rss: 109MB	indexing hir
time: 0.001; rss: 109MB	attribute checking
time: 0.001; rss: 99MB	language item collection
time: 0.003; rss: 99MB	lifetime resolution
time: 0.000; rss: 99MB	looking for entry point
time: 0.000; rss: 99MB	looking for plugin registrar
time: 0.009; rss: 105MB	region resolution
time: 0.001; rss: 105MB	loop checking
time: 0.001; rss: 105MB	static item recursion checking
time: 0.051; rss: 105MB	compute_incremental_hashes_map
time: 0.000; rss: 105MB	load_dep_graph
time: 0.016; rss: 107MB	type collecting
time: 0.000; rss: 107MB	variance inference
time: 0.000; rss: 107MB	impl wf inference
time: 0.014; rss: 109MB	coherence checking
time: 0.066; rss: 109MB	wf checking
time: 0.133; rss: 112MB	item-types checking
time: 0.758; rss: 121MB	item-bodies checking
time: 0.000; rss: 121MB	drop-impl checking
time: 0.048; rss: 126MB	const checking
time: 0.009; rss: 126MB	privacy checking
time: 0.001; rss: 126MB	stability index
time: 0.006; rss: 126MB	intrinsic checking
time: 0.002; rss: 126MB	effect checking
time: 0.013; rss: 126MB	match checking
time: 0.009; rss: 126MB	liveness checking
time: 0.039; rss: 126MB	rvalue checking
time: 0.086; rss: 167MB	MIR dump
  time: 0.011; rss: 168MB	SimplifyCfg
  time: 0.019; rss: 168MB	QualifyAndPromoteConstants
  time: 0.022; rss: 168MB	TypeckMir
  time: 0.001; rss: 168MB	SimplifyBranches
  time: 0.004; rss: 168MB	SimplifyCfg
time: 0.058; rss: 168MB	MIR cleanup and validation
time: 0.106; rss: 168MB	borrow checking
time: 0.003; rss: 168MB	reachability checking
time: 0.007; rss: 168MB	death checking
time: 0.007; rss: 170MB	stability checking
time: 0.000; rss: 170MB	unused lib feature checking
time: 0.064; rss: 170MB	lint checking
time: 0.000; rss: 170MB	resolving dependency formats
  time: 0.001; rss: 170MB	NoLandingPads
  time: 0.005; rss: 170MB	SimplifyCfg
  time: 0.010; rss: 170MB	EraseRegions
  time: 0.002; rss: 170MB	AddCallGuards
  time: 0.042; rss: 172MB	ElaborateDrops
  time: 0.001; rss: 172MB	NoLandingPads
  time: 0.009; rss: 172MB	SimplifyCfg
  time: 0.006; rss: 172MB	InstCombine
  time: 0.002; rss: 172MB	Deaggregator
  time: 0.000; rss: 172MB	CopyPropagation
  time: 0.007; rss: 172MB	SimplifyLocals
  time: 0.002; rss: 172MB	AddCallGuards
  time: 0.000; rss: 172MB	PreTrans
time: 0.086; rss: 172MB	MIR optimisations
  time: 0.016; rss: 175MB	write metadata
  time: 0.418; rss: 187MB	translation item collection
  time: 0.023; rss: 191MB	codegen unit partitioning
  time: 0.021; rss: 312MB	internalize symbols
time: 2.332; rss: 312MB	translation
time: 0.000; rss: 312MB	assert dep graph
time: 0.000; rss: 312MB	serialize dep graph
  time: 0.202; rss: 224MB	llvm function passes [0]
  time: 0.084; rss: 227MB	llvm module passes [0]
  time: 4.179; rss: 227MB	codegen passes [0]
  time: 0.000; rss: 227MB	codegen passes [0]
time: 4.780; rss: 227MB	LLVM passes
time: 0.000; rss: 227MB	serialize work products
time: 0.130; rss: 97MB	linking
done
