commit 954873055a998a06841ac19b39b1fe18a6641731
Merge: 1d64acd a84b550
Author: bors <bors@rust-lang.org>
Date:   Fri Sep 30 07:35:04 2016 -0700

    Auto merge of #36823 - durka:discriminant_value, r=nagisa
    
    add wrapper for discriminant_value, take 2
    
    [This is #34785 reopened, since @bors apparently gave up on that thread.]
    
    add wrapper for discriminant_value intrinsic
    
    Implementation of [RFC 1696](https://github.com/rust-lang/rfcs/blob/master/text/1696-discriminant.md).
    
    Wraps the `discriminant_value` intrinsic under the name `std::mem::discriminant`. In order to avoid prematurely leaking information about the implementation of enums, the return value is an opaque type, generic over the enum type, which implements Copy, Clone, PartialEq, Eq, Hash, and Debug (notably not PartialOrd). There is currently no way to get the value out excepting printing the debug representation.
    
    The wrapper is safe and can be stabilized soon as per discussion in #24263.
    
    cc @aturon
    r? @nagisa
rustc: ./rust-encoding-0.3.0
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling encoding-types v0.2.0 (file:///root/benchmarks/rust-encoding-0.3.0)
   Compiling encoding_index_tests v0.1.5 (file:///root/benchmarks/rust-encoding-0.3.0)
   Compiling encoding-index-japanese v1.20141219.6 (file:///root/benchmarks/rust-encoding-0.3.0)
   Compiling encoding-index-simpchinese v1.20160120.0 (file:///root/benchmarks/rust-encoding-0.3.0)
   Compiling encoding-index-korean v1.20141219.6 (file:///root/benchmarks/rust-encoding-0.3.0)
   Compiling encoding-index-tradchinese v1.20141219.6 (file:///root/benchmarks/rust-encoding-0.3.0)
   Compiling encoding-index-singlebyte v1.20160120.0 (file:///root/benchmarks/rust-encoding-0.3.0)
   Compiling encoding v0.3.0-dev (file:///root/benchmarks/rust-encoding-0.3.0)
time: 0.019; rss: 47MB	parsing
Lines of code:             5757
Pre-expansion node count:  26615
time: 0.000; rss: 47MB	recursion limit
time: 0.000; rss: 47MB	crate injection
time: 0.000; rss: 47MB	plugin loading
time: 0.000; rss: 47MB	plugin registration
time: 0.038; rss: 74MB	expansion
time: 0.000; rss: 74MB	maybe building test harness
time: 0.000; rss: 74MB	maybe creating a macro crate
Post-expansion node count: 37904
time: 0.000; rss: 74MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 74MB	complete gated feature checking
time: 0.001; rss: 74MB	early lint checks
time: 0.000; rss: 74MB	AST validation
time: 0.005; rss: 74MB	name resolution
time: 0.003; rss: 77MB	lowering ast -> hir
time: 0.000; rss: 77MB	indexing hir
time: 0.000; rss: 77MB	attribute checking
time: 0.000; rss: 76MB	language item collection
time: 0.000; rss: 76MB	lifetime resolution
time: 0.000; rss: 76MB	looking for entry point
time: 0.000; rss: 76MB	looking for plugin registrar
time: 0.002; rss: 77MB	region resolution
time: 0.000; rss: 77MB	loop checking
time: 0.000; rss: 77MB	static item recursion checking
time: 0.014; rss: 78MB	compute_incremental_hashes_map
time: 0.000; rss: 78MB	load_dep_graph
time: 0.010; rss: 79MB	type collecting
time: 0.000; rss: 79MB	variance inference
time: 0.016; rss: 80MB	coherence checking
time: 0.011; rss: 82MB	wf checking
time: 0.009; rss: 82MB	item-types checking
time: 0.135; rss: 88MB	item-bodies checking
time: 0.000; rss: 88MB	drop-impl checking
time: 0.009; rss: 88MB	const checking
time: 0.001; rss: 88MB	privacy checking
time: 0.000; rss: 88MB	stability index
time: 0.001; rss: 88MB	intrinsic checking
time: 0.000; rss: 88MB	effect checking
time: 0.005; rss: 88MB	match checking
time: 0.001; rss: 88MB	liveness checking
time: 0.006; rss: 88MB	rvalue checking
time: 0.018; rss: 97MB	MIR dump
  time: 0.002; rss: 97MB	SimplifyCfg
  time: 0.003; rss: 97MB	QualifyAndPromoteConstants
  time: 0.004; rss: 97MB	TypeckMir
  time: 0.000; rss: 97MB	SimplifyBranches
  time: 0.001; rss: 97MB	SimplifyCfg
time: 0.011; rss: 97MB	MIR passes
time: 0.020; rss: 97MB	borrow checking
time: 0.000; rss: 97MB	reachability checking
time: 0.001; rss: 97MB	death checking
time: 0.002; rss: 97MB	stability checking
time: 0.000; rss: 97MB	unused lib feature checking
time: 0.016; rss: 97MB	lint checking
time: 0.000; rss: 97MB	resolving dependency formats
  time: 0.000; rss: 97MB	NoLandingPads
  time: 0.001; rss: 97MB	SimplifyCfg
  time: 0.003; rss: 97MB	EraseRegions
  time: 0.000; rss: 97MB	AddCallGuards
  time: 0.016; rss: 97MB	ElaborateDrops
  time: 0.000; rss: 97MB	NoLandingPads
  time: 0.001; rss: 97MB	SimplifyCfg
  time: 0.001; rss: 97MB	InstCombine
  time: 0.001; rss: 97MB	Deaggregator
  time: 0.000; rss: 97MB	CopyPropagation
  time: 0.000; rss: 97MB	AddCallGuards
  time: 0.000; rss: 97MB	PreTrans
time: 0.025; rss: 97MB	Prepare MIR codegen passes
  time: 0.015; rss: 99MB	write metadata
  time: 0.186; rss: 205MB	translation item collection
  time: 0.003; rss: 205MB	codegen unit partitioning
  time: 0.003; rss: 226MB	internalize symbols
time: 0.488; rss: 216MB	translation
time: 0.000; rss: 216MB	assert dep graph
time: 0.000; rss: 216MB	serialize dep graph
  time: 0.025; rss: 108MB	llvm function passes [0]
  time: 0.056; rss: 116MB	llvm module passes [0]
  time: 0.618; rss: 122MB	codegen passes [0]
  time: 0.001; rss: 123MB	codegen passes [0]
time: 0.752; rss: 122MB	LLVM passes
time: 0.000; rss: 122MB	serialize work products
time: 0.076; rss: 93MB	linking
done
