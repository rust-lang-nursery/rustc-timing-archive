commit de78655bca47cac8e783dbb563e7e5c25c1fae40
Merge: 5c674a1 547a930
Author: bors <bors@rust-lang.org>
Date:   Wed Jul 6 20:04:11 2016 -0700

    Auto merge of #34652 - jseyfried:fix_expansion_perf, r=nrc
    
    Fix expansion performance regression
    
    **syntax-[breaking-change] cc #31645**
    
    This fixes #34630 by reverting commit 5bf7970 of PR #33943, which landed in #34424.
    
    By removing the `Rc<_>` wrapping around `Delimited` and `SequenceRepetition` in `TokenTree`, 5bf7970 made cloning `TokenTree`s more expensive. While this had no measurable performance impact on the compiler's crates, it caused an order of magnitude performance regression on some macro-heavy code in the wild. I believe this is due to clones of `TokenTree`s in `macro_parser.rs` and/or `macro_rules.rs`.
    
    r? @nrc
rustc: ./hyper.0.5.0
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling hyper v0.5.0 (file:///root/benchmarks/hyper.0.5.0)
time: 0.034; rss: 86MB	parsing
Lines of code:             9154
Pre-expansion node count:  44838
time: 0.005; rss: 90MB	configuration
time: 0.000; rss: 90MB	recursion limit
time: 0.000; rss: 90MB	crate injection
time: 0.000; rss: 90MB	plugin loading
time: 0.000; rss: 90MB	plugin registration
time: 0.135; rss: 129MB	expansion
time: 0.000; rss: 129MB	maybe building test harness
time: 0.000; rss: 129MB	checking for inline asm in case the target doesn't support it
time: 0.002; rss: 129MB	complete gated feature checking
Post-expansion node count: 101579
time: 0.007; rss: 129MB	assigning node ids
time: 0.003; rss: 129MB	collecting defs
time: 0.011; rss: 140MB	external crate/lib resolution
time: 0.006; rss: 140MB	early lint checks
time: 0.001; rss: 140MB	AST validation
time: 0.017; rss: 145MB	name resolution
time: 0.009; rss: 153MB	lowering ast -> hir
time: 0.001; rss: 155MB	indexing hir
time: 0.001; rss: 155MB	attribute checking
time: 0.001; rss: 149MB	language item collection
time: 0.002; rss: 149MB	lifetime resolution
time: 0.000; rss: 149MB	looking for entry point
time: 0.000; rss: 149MB	looking for plugin registrar
time: 0.005; rss: 153MB	region resolution
time: 0.001; rss: 153MB	loop checking
time: 0.001; rss: 153MB	static item recursion checking
time: 0.000; rss: 153MB	load_dep_graph
time: 0.031; rss: 156MB	type collecting
time: 0.000; rss: 156MB	variance inference
time: 0.044; rss: 164MB	coherence checking
time: 0.096; rss: 164MB	wf checking
time: 0.034; rss: 164MB	item-types checking
time: 0.520; rss: 175MB	item-bodies checking
time: 0.000; rss: 175MB	drop-impl checking
time: 0.044; rss: 178MB	const checking
time: 0.008; rss: 178MB	privacy checking
time: 0.001; rss: 178MB	stability index
time: 0.006; rss: 178MB	intrinsic checking
time: 0.002; rss: 178MB	effect checking
time: 0.014; rss: 178MB	match checking
time: 0.005; rss: 178MB	liveness checking
time: 0.031; rss: 178MB	rvalue checking
time: 0.060; rss: 188MB	MIR dump
time: 0.042; rss: 188MB	MIR passes
time: 0.071; rss: 188MB	borrow checking
time: 0.003; rss: 188MB	reachability checking
time: 0.005; rss: 188MB	death checking
time: 0.005; rss: 188MB	stability checking
time: 0.000; rss: 188MB	unused lib feature checking
time: 0.048; rss: 188MB	lint checking
time: 0.000; rss: 188MB	resolving dependency formats
time: 0.092; rss: 190MB	Prepare MIR codegen passes
  time: 0.128; rss: 196MB	write metadata
  time: 0.184; rss: 200MB	translation item collection
  time: 0.007; rss: 202MB	codegen unit partitioning
time: 3.706; rss: 321MB	translation
time: 0.000; rss: 321MB	assert dep graph
time: 0.000; rss: 321MB	serialize dep graph
  time: 1.123; rss: 212MB	llvm function passes [0]
  time: 0.428; rss: 213MB	llvm module passes [0]
  time: 16.030; rss: 213MB	codegen passes [0]
  time: 0.002; rss: 213MB	codegen passes [0]
time: 18.676; rss: 212MB	LLVM passes
time: 0.178; rss: 164MB	linking
done
