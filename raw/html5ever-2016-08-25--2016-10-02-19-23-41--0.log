commit 1cdc0fb11af12c04fb4b1984615f03b11a60decc
Merge: 8991ffc 9482bce
Author: bors <bors@rust-lang.org>
Date:   Sun Oct 2 14:13:27 2016 -0700

    Auto merge of #36904 - camlorn:field_offsets_refactor, r=eddyb
    
    Refactor layout to store offsets of fields, not offsets after fields
    
    This is the next PR moving us towards being able to reorder struct fields.
    
    The old code implicitly stored the offset of the first field.  This is inadequate because the first field may no longer be offset 0 in future.  This PR refactors `layout` to use a `offsets` vector instead of a `offset_after_field` vector.
rustc: ./html5ever-2016-08-25
cargo rustc -- -Ztime-passes -Zinput-stats
    Updating registry `https://github.com/rust-lang/crates.io-index`
   Compiling lazy_static v0.2.1
   Compiling serde v0.8.10
   Compiling rustc-serialize v0.3.19
   Compiling phf_shared v0.7.16
   Compiling libc v0.2.16
   Compiling mac v0.0.2
   Compiling encoding_index_tests v0.1.4
   Compiling void v1.0.2
   Compiling log v0.3.6
   Compiling matches v0.1.2
   Compiling encoding-index-simpchinese v1.20141219.5
   Compiling encoding-index-japanese v1.20141219.5
   Compiling unreachable v0.1.1
   Compiling encoding-index-singlebyte v1.20141219.5
   Compiling debug_unreachable v0.1.1
   Compiling encoding-index-korean v1.20141219.5
   Compiling futf v0.1.2
   Compiling phf v0.7.16
   Compiling utf-8 v0.6.0
   Compiling encoding-index-tradchinese v1.20141219.5
   Compiling rand v0.3.14
   Compiling encoding v0.2.33
   Compiling tendril v0.2.3
   Compiling phf_generator v0.7.16
   Compiling string_cache v0.2.29
   Compiling phf_codegen v0.7.16
   Compiling html5ever v0.5.4 (file:///root/benchmarks/html5ever-2016-08-25)
time: 0.027; rss: 51MB	parsing
Lines of code:             8210
Pre-expansion node count:  52238
time: 0.000; rss: 51MB	recursion limit
time: 0.000; rss: 51MB	crate injection
time: 0.000; rss: 51MB	plugin loading
time: 0.000; rss: 51MB	plugin registration
time: 1.292; rss: 105MB	expansion
time: 0.000; rss: 105MB	maybe building test harness
time: 0.002; rss: 105MB	maybe creating a macro crate
Post-expansion node count: 163524
time: 0.000; rss: 105MB	checking for inline asm in case the target doesn't support it
time: 0.003; rss: 105MB	complete gated feature checking
time: 0.009; rss: 105MB	early lint checks
time: 0.002; rss: 105MB	AST validation
time: 0.018; rss: 107MB	name resolution
time: 0.016; rss: 123MB	lowering ast -> hir
time: 0.003; rss: 127MB	indexing hir
time: 0.002; rss: 127MB	attribute checking
time: 0.002; rss: 104MB	language item collection
time: 0.003; rss: 104MB	lifetime resolution
time: 0.000; rss: 104MB	looking for entry point
time: 0.000; rss: 104MB	looking for plugin registrar
time: 0.016; rss: 110MB	region resolution
time: 0.002; rss: 110MB	loop checking
time: 0.002; rss: 110MB	static item recursion checking
time: 0.024; rss: 111MB	compute_incremental_hashes_map
time: 0.000; rss: 111MB	load_dep_graph
time: 0.014; rss: 112MB	type collecting
time: 0.000; rss: 112MB	variance inference
time: 0.025; rss: 114MB	coherence checking
time: 0.024; rss: 115MB	wf checking
time: 0.354; rss: 122MB	item-types checking
time: 0.504; rss: 138MB	item-bodies checking
time: 0.000; rss: 138MB	drop-impl checking
time: 0.072; rss: 140MB	const checking
time: 0.009; rss: 140MB	privacy checking
time: 0.002; rss: 140MB	stability index
time: 0.004; rss: 140MB	intrinsic checking
time: 0.003; rss: 140MB	effect checking
time: 0.024; rss: 140MB	match checking
time: 0.013; rss: 134MB	liveness checking
time: 0.029; rss: 134MB	rvalue checking
time: 0.116; rss: 184MB	MIR dump
  time: 0.009; rss: 182MB	SimplifyCfg
  time: 0.015; rss: 182MB	QualifyAndPromoteConstants
  time: 0.024; rss: 182MB	TypeckMir
  time: 0.000; rss: 182MB	SimplifyBranches
  time: 0.005; rss: 182MB	SimplifyCfg
time: 0.054; rss: 182MB	MIR passes
time: 0.094; rss: 184MB	borrow checking
time: 0.003; rss: 184MB	reachability checking
time: 0.007; rss: 184MB	death checking
time: 0.009; rss: 184MB	stability checking
time: 0.000; rss: 184MB	unused lib feature checking
time: 0.064; rss: 184MB	lint checking
time: 0.000; rss: 184MB	resolving dependency formats
  time: 0.000; rss: 184MB	NoLandingPads
  time: 0.004; rss: 184MB	SimplifyCfg
  time: 0.010; rss: 184MB	EraseRegions
  time: 0.001; rss: 184MB	AddCallGuards
  time: 0.076; rss: 189MB	ElaborateDrops
  time: 0.000; rss: 189MB	NoLandingPads
  time: 0.007; rss: 187MB	SimplifyCfg
  time: 0.008; rss: 187MB	InstCombine
  time: 0.001; rss: 186MB	Deaggregator
  time: 0.000; rss: 186MB	CopyPropagation
  time: 0.001; rss: 186MB	AddCallGuards
  time: 0.000; rss: 186MB	PreTrans
time: 0.109; rss: 186MB	Prepare MIR codegen passes
  time: 0.052; rss: 187MB	write metadata
  time: 0.053; rss: 189MB	translation item collection
  time: 0.006; rss: 189MB	codegen unit partitioning
  time: 0.006; rss: 202MB	internalize symbols
time: 0.366; rss: 172MB	translation
time: 0.000; rss: 172MB	assert dep graph
time: 0.000; rss: 172MB	serialize dep graph
  time: 0.020; rss: 103MB	llvm function passes [0]
  time: 0.012; rss: 105MB	llvm module passes [0]
  time: 0.470; rss: 109MB	codegen passes [0]
  time: 0.001; rss: 109MB	codegen passes [0]
time: 0.541; rss: 109MB	LLVM passes
time: 0.000; rss: 109MB	serialize work products
time: 0.058; rss: 91MB	linking
done
