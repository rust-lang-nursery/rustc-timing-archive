commit 493d999ffa44be6610441dabab80e18dda90015a
Merge: f6e125f fc4d0ec
Author: bors <bors@rust-lang.org>
Date:   Thu Mar 3 17:41:13 2016 +0000

    Auto merge of #32007 - nikomatsakis:compiletest-incremental, r=alexcrichton
    
    This PR extends compiletest to support **test revisions** and with a preliminary **incremental testing harness**. run-pass, compile-fail, and run-fail tests may be tagged with
    
    ```
    // revisions: a b c d
    ```
    
    This will cause the test to be re-run four times with `--cfg {a,b,c,d}` in turn. This means you can write very closely related things using `cfg`. You can also configure the headers/expected-errors by writing `//[foo] header: value` or `//[foo]~ ERROR bar`, where `foo` is the name of your revision. See the changes to `coherence-cow.rs` as a proof of concept.
    
    The main point of this work is to support the incremental testing harness. This PR contains an initial, unused version. The code that uses it will land later. The incremental testing harness compiles each revision in turn, and requires that the revisions have particular names (e.g., `rpass2`, `cfail3`), which tell it whether a particular revision is expected to compile or not.
    
    Two questions:
    
    - Is there compiletest documentation anywhere I can update?
    - Should I hold off on landing the incremental testing harness until I have the code to exercise it? (That will come in a separate PR, still fixing a few details)
    
    r? @alexcrichton
    cc @rust-lang/compiler <-- new testing capabilities
rustc: ./inflate-0.1.0
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling inflate v0.1.0 (file:///root/benchmarks/inflate-0.1.0)
time: 0.008; rss: 31MB	parsing
Lines of code:             956
Pre-expansion node count:  4761
time: 0.001; rss: 31MB	configuration 1
time: 0.000; rss: 31MB	recursion limit
time: 0.000; rss: 31MB	gated macro checking
time: 0.000; rss: 31MB	crate injection
time: 0.003; rss: 35MB	macro loading
time: 0.000; rss: 35MB	plugin loading
time: 0.000; rss: 35MB	plugin registration
time: 0.087; rss: 42MB	expansion
time: 0.001; rss: 42MB	complete gated feature checking 1
time: 0.009; rss: 42MB	configuration 2
time: 0.000; rss: 42MB	gated configuration checking
time: 0.004; rss: 42MB	maybe building test harness
time: 0.004; rss: 42MB	prelude injection
time: 0.000; rss: 42MB	checking that all macro invocations are gone
time: 0.000; rss: 42MB	checking for inline asm in case the target doesn't support it
time: 0.001; rss: 42MB	complete gated feature checking 2
time: 0.000; rss: 42MB	const fn bodies and arguments
Post-expansion node count: 54798
time: 0.004; rss: 42MB	assigning node ids
time: 0.014; rss: 47MB	lowering ast -> hir
time: 0.002; rss: 47MB	indexing hir
time: 0.000; rss: 47MB	attribute checking
time: 0.004; rss: 47MB	early lint checks
time: 0.001; rss: 43MB	external crate/lib resolution
time: 0.001; rss: 43MB	language item collection
time: 0.010; rss: 50MB	resolution
time: 0.001; rss: 50MB	lifetime resolution
time: 0.000; rss: 50MB	looking for entry point
time: 0.000; rss: 50MB	looking for plugin registrar
time: 0.003; rss: 51MB	region resolution
time: 0.000; rss: 51MB	loop checking
time: 0.000; rss: 51MB	static item recursion checking
time: 0.001; rss: 53MB	type collecting
time: 0.000; rss: 53MB	variance inference
time: 0.009; rss: 64MB	coherence checking
time: 0.002; rss: 67MB	wf checking
time: 0.002; rss: 67MB	item-types checking
time: 2.559; rss: 90MB	item-bodies checking
time: 0.000; rss: 90MB	drop-impl checking
time: 0.013; rss: 90MB	const checking
time: 0.002; rss: 90MB	privacy checking
time: 0.000; rss: 90MB	stability index
time: 0.000; rss: 90MB	intrinsic checking
time: 0.001; rss: 90MB	effect checking
time: 0.003; rss: 90MB	match checking
time: 0.314; rss: 91MB	liveness checking
time: 0.009; rss: 91MB	rvalue checking
time: 0.036; rss: 99MB	MIR dump
time: 0.000; rss: 99MB	MIR passes
time: 0.208; rss: 98MB	borrow checking
time: 0.000; rss: 98MB	reachability checking
time: 0.003; rss: 98MB	death checking
time: 0.002; rss: 98MB	stability checking
time: 0.000; rss: 98MB	unused lib feature checking
time: 0.017; rss: 98MB	lint checking
time: 0.000; rss: 98MB	resolving dependency formats
time: 0.002; rss: 98MB	erasing regions from MIR
  time: 0.012; rss: 109MB	translation item collection
  time: 0.003; rss: 125MB	write metadata
time: 0.363; rss: 123MB	translation
  time: 0.029; rss: 93MB	llvm function passes [0]
  time: 0.005; rss: 93MB	llvm module passes [0]
  time: 0.499; rss: 99MB	codegen passes [0]
  time: 0.000; rss: 87MB	codegen passes [0]
time: 0.574; rss: 87MB	LLVM passes
time: 0.034; rss: 86MB	linking
done
