commit e5ed0a5d78be74238af31631e7ecf311eb661586
Merge: 7c535c6 36f2af1
Author: bors <bors@rust-lang.org>
Date:   Sat Nov 19 23:39:25 2016 -0600

    Auto merge of #37842 - nikomatsakis:incremental-test, r=mw
    
    Add tests for incremental reuse scenarios
    
    These are microbenchmarks checking that we achieve the expected reuse in the scenarios covered by incremental beta.
    
    r? @michaelwoerister
rustc: ./piston-image-0.10.3
cargo rustc  -- -Ztime-passes -Zinput-stats
   Compiling image v0.10.3 (file:///root/benchmarks/piston-image-0.10.3)
time: 0.057; rss: 53MB	parsing
Lines of code:             12000
Pre-expansion node count:  90152
time: 0.000; rss: 53MB	recursion limit
time: 0.000; rss: 53MB	crate injection
time: 0.000; rss: 53MB	plugin loading
time: 0.000; rss: 53MB	plugin registration
time: 0.083; rss: 93MB	expansion
time: 0.000; rss: 93MB	maybe building test harness
time: 0.001; rss: 93MB	maybe creating a macro crate
Post-expansion node count: 148881
time: 0.000; rss: 93MB	checking for inline asm in case the target doesn't support it
time: 0.003; rss: 93MB	complete gated feature checking
time: 0.006; rss: 93MB	early lint checks
time: 0.001; rss: 93MB	AST validation
time: 0.024; rss: 97MB	name resolution
time: 0.023; rss: 105MB	lowering ast -> hir
time: 0.007; rss: 107MB	indexing hir
time: 0.002; rss: 107MB	attribute checking
time: 0.001; rss: 96MB	language item collection
time: 0.003; rss: 96MB	lifetime resolution
time: 0.000; rss: 96MB	looking for entry point
time: 0.000; rss: 96MB	looking for plugin registrar
time: 0.019; rss: 102MB	region resolution
time: 0.001; rss: 102MB	loop checking
time: 0.001; rss: 102MB	static item recursion checking
time: 0.051; rss: 102MB	compute_incremental_hashes_map
time: 0.000; rss: 102MB	load_dep_graph
time: 0.017; rss: 104MB	type collecting
time: 0.000; rss: 104MB	variance inference
time: 0.000; rss: 104MB	impl wf inference
time: 0.014; rss: 106MB	coherence checking
time: 0.067; rss: 107MB	wf checking
time: 0.137; rss: 110MB	item-types checking
time: 0.796; rss: 119MB	item-bodies checking
time: 0.000; rss: 119MB	drop-impl checking
time: 0.061; rss: 124MB	const checking
time: 0.010; rss: 124MB	privacy checking
time: 0.001; rss: 124MB	stability index
time: 0.006; rss: 124MB	intrinsic checking
time: 0.003; rss: 124MB	effect checking
time: 0.014; rss: 124MB	match checking
time: 0.009; rss: 124MB	liveness checking
time: 0.041; rss: 124MB	rvalue checking
time: 0.148; rss: 162MB	MIR dump
  time: 0.012; rss: 164MB	SimplifyCfg
  time: 0.021; rss: 164MB	QualifyAndPromoteConstants
  time: 0.024; rss: 164MB	TypeckMir
  time: 0.001; rss: 164MB	SimplifyBranches
  time: 0.005; rss: 164MB	SimplifyCfg
time: 0.063; rss: 164MB	MIR cleanup and validation
time: 0.114; rss: 165MB	borrow checking
time: 0.003; rss: 165MB	reachability checking
time: 0.008; rss: 165MB	death checking
time: 0.009; rss: 166MB	stability checking
time: 0.000; rss: 166MB	unused lib feature checking
time: 0.066; rss: 166MB	lint checking
time: 0.000; rss: 166MB	resolving dependency formats
  time: 0.001; rss: 166MB	NoLandingPads
  time: 0.005; rss: 166MB	SimplifyCfg
  time: 0.011; rss: 166MB	EraseRegions
  time: 0.002; rss: 166MB	AddCallGuards
  time: 0.051; rss: 169MB	ElaborateDrops
  time: 0.001; rss: 169MB	NoLandingPads
  time: 0.009; rss: 170MB	SimplifyCfg
  time: 0.006; rss: 170MB	InstCombine
  time: 0.002; rss: 170MB	Deaggregator
  time: 0.001; rss: 170MB	CopyPropagation
  time: 0.008; rss: 170MB	SimplifyLocals
  time: 0.002; rss: 170MB	AddCallGuards
  time: 0.000; rss: 170MB	PreTrans
time: 0.098; rss: 170MB	MIR optimisations
  time: 0.016; rss: 171MB	write metadata
  time: 0.449; rss: 184MB	translation item collection
  time: 0.024; rss: 187MB	codegen unit partitioning
  time: 0.022; rss: 307MB	internalize symbols
time: 2.616; rss: 307MB	translation
time: 0.000; rss: 307MB	assert dep graph
time: 0.000; rss: 307MB	serialize dep graph
  time: 0.212; rss: 224MB	llvm function passes [0]
  time: 0.084; rss: 227MB	llvm module passes [0]
  time: 4.237; rss: 226MB	codegen passes [0]
  time: 0.000; rss: 226MB	codegen passes [0]
time: 4.933; rss: 226MB	LLVM passes
time: 0.000; rss: 226MB	serialize work products
time: 0.133; rss: 98MB	linking
done
