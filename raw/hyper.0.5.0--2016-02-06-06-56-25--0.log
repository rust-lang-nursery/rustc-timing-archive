commit 35635aebab321ff2a4708aeb172351356ad63cf7
Merge: 5147c1f ee79bfa
Author: bors <bors@rust-lang.org>
Date:   Sat Feb 6 09:24:04 2016 +0000

    Auto merge of #31333 - lambda:31273-abort-on-stack-overflow, r=brson
    
    Abort on stack overflow instead of re-raising SIGSEGV
    
    We use guard pages that cause the process to abort to protect against
    undefined behavior in the event of stack overflow.  We have a handler
    that catches segfaults, prints out an error message if the segfault was
    due to a stack overflow, then unregisters itself and returns to allow
    the signal to be re-raised and kill the process.
    
    This caused some confusion, as it was unexpected that safe code would be
    able to cause a segfault, while it's easy to overflow the stack in safe
    code.  To avoid this confusion, when we detect a segfault in the guard
    page, abort instead of the previous behavior of re-raising SIGSEGV.
    
    To test this, we need to adapt the tests for segfault to actually check
    the exit status.  Doing so revealed that the existing test for segfault
    behavior was actually invalid; LLVM optimizes the explicit null pointer
    reference down to an illegal instruction, so the program aborts with
    SIGILL instead of SIGSEGV and the test didn't actually trigger the
    signal handler at all.  Use a C helper function to get a null pointer
    that LLVM can't optimize away, so we get our segfault instead.
    
    This is a [breaking-change] if anyone is relying on the exact signal
    raised to kill a process on stack overflow.
    
    Closes #31273
rustc: ./hyper.0.5.0
cargo rustc -- -Ztime-passes -Zinput-stats
    Updating registry `https://github.com/rust-lang/crates.io-index`
   Compiling matches v0.1.2
   Compiling libc v0.2.6
   Compiling libc v0.1.12
   Compiling bitflags v0.3.3
   Compiling unicase v0.1.0
   Compiling lazy_static v0.1.15
   Compiling typeable v0.1.2
   Compiling httparse v0.1.6
   Compiling winapi-build v0.1.1
   Compiling traitobject v0.0.1
   Compiling winapi v0.2.5
   Compiling pkg-config v0.3.6
   Compiling gcc v0.3.21
   Compiling rustc-serialize v0.3.16
   Compiling advapi32-sys v0.1.2
   Compiling kernel32-sys v0.2.1
   Compiling log v0.3.5
   Compiling rand v0.3.13
   Compiling num_cpus v0.2.10
   Compiling time v0.1.34
   Compiling mime v0.0.11
   Compiling openssl-sys v0.6.7
   Compiling openssl v0.6.7
   Compiling uuid v0.1.18
   Compiling url v0.2.38
   Compiling cookie v0.1.21
   Compiling hyper v0.5.0 (file:///root/benchmarks/hyper.0.5.0)
time: 0.030; rss: 43MB	parsing
Lines of code:             9154
Pre-expansion node count:  45594
time: 0.010; rss: 43MB	configuration 1
time: 0.000; rss: 43MB	recursion limit
time: 0.000; rss: 43MB	gated macro checking
time: 0.000; rss: 43MB	crate injection
time: 0.004; rss: 49MB	macro loading
time: 0.000; rss: 49MB	plugin loading
time: 0.000; rss: 49MB	plugin registration
time: 0.201; rss: 57MB	expansion
time: 0.005; rss: 57MB	complete gated feature checking 1
time: 0.036; rss: 57MB	configuration 2
time: 0.000; rss: 57MB	gated configuration checking
time: 0.014; rss: 57MB	maybe building test harness
time: 0.011; rss: 57MB	prelude injection
time: 0.001; rss: 57MB	checking that all macro invocations are gone
time: 0.000; rss: 57MB	checking for inline asm in case the target doesn't support it
time: 0.002; rss: 57MB	complete gated feature checking 2
Post-expansion node count: 109258
time: 0.010; rss: 57MB	assigning node ids
time: 0.011; rss: 62MB	lowering ast -> hir
time: 0.005; rss: 66MB	indexing hir
time: 0.000; rss: 66MB	attribute checking
time: 0.005; rss: 66MB	early lint checks
time: 0.003; rss: 61MB	external crate/lib resolution
time: 0.001; rss: 61MB	language item collection
time: 0.029; rss: 81MB	resolution
time: 0.002; rss: 81MB	lifetime resolution
time: 0.000; rss: 81MB	looking for entry point
time: 0.000; rss: 81MB	looking for plugin registrar
time: 0.006; rss: 84MB	region resolution
time: 0.001; rss: 84MB	loop checking
time: 0.001; rss: 84MB	static item recursion checking
time: 0.014; rss: 88MB	type collecting
time: 0.000; rss: 88MB	variance inference
time: 0.038; rss: 105MB	coherence checking
time: 0.070; rss: 108MB	wf checking
time: 0.026; rss: 108MB	item-types checking
time: 0.521; rss: 131MB	item-bodies checking
time: 0.000; rss: 131MB	drop-impl checking
time: 0.042; rss: 133MB	const checking
time: 0.008; rss: 133MB	privacy checking
time: 0.001; rss: 133MB	stability index
time: 0.004; rss: 133MB	intrinsic checking
time: 0.002; rss: 133MB	effect checking
time: 0.013; rss: 133MB	match checking
time: 0.049; rss: 136MB	MIR dump
time: 0.006; rss: 136MB	liveness checking
time: 0.069; rss: 136MB	borrow checking
time: 0.035; rss: 136MB	rvalue checking
time: 0.003; rss: 136MB	reachability checking
time: 0.006; rss: 136MB	death checking
time: 0.006; rss: 136MB	stability checking
time: 0.000; rss: 136MB	unused lib feature checking
time: 0.046; rss: 136MB	lint checking
time: 0.000; rss: 136MB	resolving dependency formats
time: 0.007; rss: 136MB	erasing regions from MIR
  time: 0.136; rss: 270MB	write metadata
time: 1.445; rss: 270MB	translation
  time: 0.098; rss: 167MB	llvm function passes [0]
  time: 0.051; rss: 167MB	llvm module passes [0]
  time: 1.683; rss: 213MB	codegen passes [0]
  time: 0.001; rss: 176MB	codegen passes [0]
time: 2.058; rss: 176MB	LLVM passes
time: 0.173; rss: 175MB	linking
done
