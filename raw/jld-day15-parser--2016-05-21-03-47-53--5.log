commit 91e907345c4258ff9787d70a4b8c56cb691a64b6
Merge: 500e5c1 5f295f2
Author: bors <bors@rust-lang.org>
Date:   Fri May 20 20:33:38 2016 -0700

    Auto merge of #33625 - alexcrichton:rustbuild-moar-tests, r=aturon
    
    rustbuild: Touch up some test suites
    
    This adds in some missing test suites, primarily a few pretty suites. It also starts optimizing tests by default as the current test suite does, but also recognizes `--disable-optimize-tests`.
    
    Currently the optimization of tests isn't recognized by crate tests because Cargo doesn't support the ability to compile an unoptimized test suite against an optimized library. Perhaps a feature to add, though!
rustc: ./jld-day15-parser
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling day15 v0.1.0 (file:///root/benchmarks/jld-day15-parser)
time: 0.001; rss: 44MB	parsing
Lines of code:             72
Pre-expansion node count:  673
time: 0.000; rss: 44MB	configuration 1
time: 0.000; rss: 48MB	recursion limit
time: 0.000; rss: 48MB	crate injection
time: 0.018; rss: 83MB	macro loading
time: 0.000; rss: 83MB	plugin loading
time: 0.000; rss: 83MB	plugin registration
time: 0.002; rss: 83MB	expansion
time: 0.000; rss: 83MB	configuration 2
time: 0.000; rss: 83MB	gated configuration checking
time: 0.000; rss: 83MB	maybe building test harness
time: 0.000; rss: 83MB	prelude injection
time: 0.000; rss: 83MB	checking that all macro invocations are gone
time: 0.000; rss: 83MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 83MB	complete gated feature checking
Post-expansion node count: 1176
time: 0.000; rss: 83MB	assigning node ids
time: 0.000; rss: 83MB	collecting defs
time: 0.005; rss: 87MB	external crate/lib resolution
time: 0.000; rss: 87MB	early lint checks
time: 0.001; rss: 87MB	name resolution
time: 0.000; rss: 87MB	lowering ast -> hir
time: 0.000; rss: 87MB	indexing hir
time: 0.000; rss: 87MB	attribute checking
time: 0.000; rss: 87MB	language item collection
time: 0.000; rss: 87MB	lifetime resolution
time: 0.000; rss: 87MB	looking for entry point
time: 0.000; rss: 87MB	looking for plugin registrar
time: 0.000; rss: 87MB	region resolution
time: 0.000; rss: 87MB	loop checking
time: 0.000; rss: 87MB	static item recursion checking
time: 0.000; rss: 87MB	load_dep_graph
time: 0.001; rss: 91MB	type collecting
time: 0.000; rss: 91MB	variance inference
time: 0.005; rss: 91MB	coherence checking
time: 0.006; rss: 91MB	wf checking
time: 0.000; rss: 91MB	item-types checking
time: 1.148; rss: 109MB	item-bodies checking
time: 0.000; rss: 109MB	drop-impl checking
time: 0.001; rss: 109MB	const checking
time: 0.000; rss: 109MB	privacy checking
time: 0.000; rss: 109MB	stability index
time: 0.000; rss: 109MB	intrinsic checking
time: 0.000; rss: 109MB	effect checking
time: 0.000; rss: 109MB	match checking
time: 0.000; rss: 109MB	liveness checking
time: 0.000; rss: 109MB	rvalue checking
time: 0.001; rss: 110MB	MIR dump
time: 0.001; rss: 110MB	MIR passes
time: 0.001; rss: 110MB	borrow checking
time: 0.000; rss: 110MB	reachability checking
time: 0.000; rss: 110MB	death checking
time: 0.000; rss: 110MB	stability checking
time: 0.000; rss: 110MB	unused lib feature checking
time: 0.004; rss: 111MB	lint checking
time: 0.002; rss: 111MB	resolving dependency formats
time: 0.000; rss: 112MB	Prepare MIR codegen passes
  time: 23.950; rss: 119MB	translation item collection
  time: 0.000; rss: 119MB	codegen unit partitioning
  time: 0.000; rss: 143MB	write metadata
time: 73.500; rss: 143MB	translation
time: 0.000; rss: 143MB	assert dep graph
time: 0.000; rss: 143MB	serialize dep graph
  time: 0.013; rss: 109MB	llvm function passes [0]
  time: 0.001; rss: 109MB	llvm module passes [0]
  time: 0.272; rss: 115MB	codegen passes [0]
  time: 0.000; rss: 107MB	codegen passes [0]
time: 0.294; rss: 107MB	LLVM passes
  time: 0.118; rss: 107MB	running linker
time: 0.119; rss: 107MB	linking
done
