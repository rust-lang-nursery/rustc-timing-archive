commit 088d4178522d4e9464c6beac70b14724670ee735
Merge: dd0ef17 0eeb14e
Author: bors <bors@rust-lang.org>
Date:   Sat May 14 22:04:58 2016 -0700

    Auto merge of #33593 - dotdash:smart_derive, r=brson
    
    Improve derived implementations for enums with lots of fieldless variants
    
    A number of trait methods like PartialEq::eq or Hash::hash don't
    actually need a distinct arm for each variant, because the code within
    the arm only depends on the number and types of the fields in the
    variants. We can easily exploit this fact to create less and better
    code for enums with multiple variants that have no fields at all, the
    extreme case being C-like enums.
    
    For nickel.rs and its by now infamous 800 variant enum, this reduces
    optimized compile times by 25% and non-optimized compile times by 40%.
    Also peak memory usage is down by almost 40% (310MB down to 190MB).
    
    To be fair, most other crates don't benefit nearly as much, because
    they don't have as huge enums. The crates in the Rust distribution that
    I measured saw basically no change in compile times (I only tried
    optimized builds) and only 1-2% reduction in peak memory usage.
rustc: ./issue-32062-equality-relations-complexity
/root/rust/x86_64-unknown-linux-gnu/stage2/bin/rustc issue-32062.rs -Ztime-passes -Zinput-stats
time: 0.000; rss: 44MB	parsing
Lines of code:             60
Pre-expansion node count:  586
time: 0.000; rss: 44MB	configuration 1
time: 0.000; rss: 44MB	recursion limit
time: 0.000; rss: 44MB	crate injection
time: 0.003; rss: 50MB	macro loading
time: 0.000; rss: 50MB	plugin loading
time: 0.000; rss: 50MB	plugin registration
time: 0.001; rss: 50MB	expansion
time: 0.000; rss: 50MB	configuration 2
time: 0.000; rss: 50MB	gated configuration checking
time: 0.000; rss: 50MB	maybe building test harness
time: 0.000; rss: 50MB	prelude injection
time: 0.000; rss: 50MB	checking that all macro invocations are gone
time: 0.000; rss: 50MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 50MB	complete gated feature checking
Post-expansion node count: 599
time: 0.000; rss: 50MB	assigning node ids
time: 0.000; rss: 50MB	collecting defs
time: 0.003; rss: 50MB	external crate/lib resolution
time: 0.000; rss: 50MB	early lint checks
time: 0.000; rss: 54MB	name resolution
time: 0.000; rss: 54MB	lowering ast -> hir
time: 0.000; rss: 54MB	indexing hir
time: 0.000; rss: 54MB	attribute checking
time: 0.000; rss: 54MB	language item collection
time: 0.000; rss: 54MB	lifetime resolution
time: 0.000; rss: 54MB	looking for entry point
time: 0.000; rss: 54MB	looking for plugin registrar
time: 0.000; rss: 54MB	region resolution
time: 0.000; rss: 54MB	loop checking
time: 0.000; rss: 54MB	static item recursion checking
time: 0.000; rss: 54MB	load_dep_graph
time: 0.001; rss: 58MB	type collecting
time: 0.000; rss: 58MB	variance inference
time: 0.005; rss: 67MB	coherence checking
time: 0.008; rss: 71MB	wf checking
time: 0.000; rss: 71MB	item-types checking
time: 1.897; rss: 83MB	item-bodies checking
time: 0.000; rss: 83MB	drop-impl checking
time: 0.001; rss: 83MB	const checking
time: 0.000; rss: 83MB	privacy checking
time: 0.000; rss: 83MB	stability index
time: 0.000; rss: 83MB	intrinsic checking
time: 0.000; rss: 83MB	effect checking
time: 0.000; rss: 83MB	match checking
time: 0.000; rss: 83MB	liveness checking
time: 0.001; rss: 83MB	rvalue checking
time: 0.001; rss: 83MB	MIR dump
time: 0.000; rss: 83MB	MIR passes
time: 0.002; rss: 83MB	borrow checking
time: 0.000; rss: 83MB	reachability checking
time: 0.000; rss: 83MB	death checking
time: 0.000; rss: 83MB	stability checking
time: 0.000; rss: 83MB	unused lib feature checking
time: 0.000; rss: 83MB	lint checking
time: 0.001; rss: 83MB	resolving dependency formats
time: 0.000; rss: 83MB	Prepare MIR codegen passes
  time: 0.136; rss: 88MB	translation item collection
  time: 0.000; rss: 88MB	codegen unit partitioning
  time: 0.000; rss: 95MB	write metadata
time: 0.668; rss: 95MB	translation
time: 0.000; rss: 95MB	assert dep graph
time: 0.000; rss: 95MB	serialize dep graph
  time: 0.000; rss: 86MB	llvm function passes [0]
  time: 0.000; rss: 86MB	llvm module passes [0]
  time: 0.005; rss: 92MB	codegen passes [0]
  time: 0.000; rss: 92MB	codegen passes [0]
time: 0.006; rss: 92MB	LLVM passes
  time: 0.105; rss: 92MB	running linker
time: 0.106; rss: 92MB	linking
done
