commit 499484f56d336f4628a6fa016626beb3ef21ba81
Merge: 43c090e 37d974f
Author: bors <bors@rust-lang.org>
Date:   Thu Aug 18 08:54:10 2016 -0700

    Auto merge of #35684 - nikomatsakis:incr-comp-metadata-audit-35111, r=mw
    
    Restructure metadata encoder to track deps precisely
    
    This issue restructures meta-data encoding to track dependencies very precisely. It uses a cute technique I hope to spread elsewhere, where we can guard the data flowing into a new dep-graph task and ensure that it is not "leaking" information from the outside, which would result in missing edges. There are no tests because we don't know of any bugs in the old system, but it's clear that there was leaked data.
    
    The commit series is standalone, but the refactorings are kind of "windy". It's a good idea to read the comment in `src/librustc_metadata/index_builder.rs` to get a feeling for the overall strategy I was aiming at.
    
    In several cases, I wound up adding some extra hashtable lookups, I think primarily for looking up `AdtDef` instances. We could remove these by implementing `DepGraphRead` for an `AdtDef` and then having it register a read to the adt-defs table, I guess, but I doubt it is really noticeable.
    
    Eventually I think I'd like to extend this pattern to the dep-graph more generally, since it effectively guarantees that data cannot leak.
    
    Fixes #35111.
    
    r? @michaelwoerister
rustc: ./hyper.0.5.0
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling hyper v0.5.0 (file:///root/benchmarks/hyper.0.5.0)
time: 0.026; rss: 50MB	parsing
Lines of code:             9154
Pre-expansion node count:  44838
time: 0.003; rss: 50MB	configuration
time: 0.000; rss: 50MB	recursion limit
time: 0.000; rss: 50MB	crate injection
time: 0.000; rss: 50MB	plugin loading
time: 0.000; rss: 50MB	plugin registration
time: 0.092; rss: 91MB	expansion
time: 0.000; rss: 91MB	maybe building test harness
time: 0.005; rss: 91MB	assigning node ids
Post-expansion node count: 101581
time: 0.000; rss: 91MB	checking for inline asm in case the target doesn't support it
time: 0.002; rss: 91MB	complete gated feature checking
time: 0.003; rss: 91MB	collecting defs
time: 0.010; rss: 104MB	external crate/lib resolution
time: 0.003; rss: 104MB	early lint checks
time: 0.001; rss: 104MB	AST validation
time: 0.020; rss: 110MB	name resolution
time: 0.008; rss: 116MB	lowering ast -> hir
time: 0.002; rss: 118MB	indexing hir
time: 0.001; rss: 118MB	attribute checking
time: 0.001; rss: 112MB	language item collection
time: 0.002; rss: 112MB	lifetime resolution
time: 0.000; rss: 112MB	looking for entry point
time: 0.000; rss: 112MB	looking for plugin registrar
time: 0.006; rss: 115MB	region resolution
time: 0.001; rss: 115MB	loop checking
time: 0.000; rss: 115MB	static item recursion checking
time: 0.000; rss: 115MB	load_dep_graph
time: 0.024; rss: 117MB	type collecting
time: 0.000; rss: 117MB	variance inference
time: 0.037; rss: 123MB	coherence checking
time: 0.070; rss: 124MB	wf checking
time: 0.030; rss: 124MB	item-types checking
time: 0.422; rss: 137MB	item-bodies checking
time: 0.000; rss: 137MB	drop-impl checking
time: 0.040; rss: 139MB	const checking
time: 0.006; rss: 139MB	privacy checking
time: 0.001; rss: 139MB	stability index
time: 0.006; rss: 139MB	intrinsic checking
time: 0.002; rss: 139MB	effect checking
time: 0.014; rss: 139MB	match checking
time: 0.005; rss: 139MB	liveness checking
time: 0.029; rss: 139MB	rvalue checking
time: 0.057; rss: 156MB	MIR dump
time: 0.044; rss: 156MB	MIR passes
time: 0.065; rss: 156MB	borrow checking
time: 0.003; rss: 156MB	reachability checking
time: 0.005; rss: 156MB	death checking
time: 0.005; rss: 156MB	stability checking
time: 0.000; rss: 156MB	unused lib feature checking
time: 0.046; rss: 156MB	lint checking
time: 0.000; rss: 156MB	resolving dependency formats
time: 0.089; rss: 158MB	Prepare MIR codegen passes
  time: 0.128; rss: 163MB	write metadata
  time: 0.152; rss: 171MB	translation item collection
  time: 0.020; rss: 173MB	codegen unit partitioning
  time: 0.035; rss: 302MB	internalize symbols
time: 1.760; rss: 302MB	translation
time: 0.000; rss: 302MB	assert dep graph
time: 0.000; rss: 302MB	serialize dep graph
  time: 0.097; rss: 181MB	llvm function passes [0]
  time: 0.048; rss: 183MB	llvm module passes [0]
  time: 1.826; rss: 186MB	codegen passes [0]
  time: 0.001; rss: 186MB	codegen passes [0]
time: 2.129; rss: 186MB	LLVM passes
time: 0.000; rss: 186MB	serialize work products
time: 0.155; rss: 119MB	linking
done
