commit 8f552181895921a377ab8c235340ea3d80ec7fc0
Merge: 897199a 9249e6a
Author: bors <bors@rust-lang.org>
Date:   Tue Apr 26 14:54:37 2016 -0700

    Auto merge of #31414 - durka:clone-copy, r=alexcrichton
    
    special-case #[derive(Copy, Clone)] with a shallow clone
    
    If a type is Copy then its Clone implementation can be a no-op. Currently `#[derive(Clone)]` generates a deep clone anyway. This can lead to lots of code bloat.
    
    This PR detects the case where Copy and Clone are both being derived (the general case of "is this type Copy" can't be determined by a syntax extension) and generates the shallow Clone impl. Right now this can only be done if there are no type parameters (see https://github.com/rust-lang/rust/issues/31085#issuecomment-178988663), but this restriction can be removed after specialization.
    
    Fixes #31085.
rustc: ./rust-encoding.0.2.32
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling encoding v0.2.32 (file:///root/benchmarks/rust-encoding.0.2.32)
time: 0.033; rss: 49MB	parsing
Lines of code:             6441
Pre-expansion node count:  30335
time: 0.006; rss: 49MB	configuration 1
time: 0.000; rss: 49MB	recursion limit
time: 0.000; rss: 49MB	gated macro checking
time: 0.000; rss: 49MB	crate injection
time: 0.003; rss: 51MB	macro loading
time: 0.000; rss: 51MB	plugin loading
time: 0.000; rss: 51MB	plugin registration
time: 0.044; rss: 54MB	expansion
time: 0.001; rss: 54MB	complete gated feature checking 1
time: 0.007; rss: 54MB	configuration 2
time: 0.000; rss: 54MB	gated configuration checking
time: 0.003; rss: 54MB	maybe building test harness
time: 0.003; rss: 54MB	prelude injection
time: 0.000; rss: 54MB	checking that all macro invocations are gone
time: 0.000; rss: 54MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 54MB	complete gated feature checking 2
time: 0.000; rss: 54MB	const fn bodies and arguments
Post-expansion node count: 41656
time: 0.003; rss: 54MB	assigning node ids
time: 0.001; rss: 56MB	collecting defs
time: 0.001; rss: 56MB	external crate/lib resolution
time: 0.005; rss: 58MB	lowering ast -> hir
time: 0.002; rss: 59MB	indexing hir
time: 0.000; rss: 59MB	attribute checking
time: 0.002; rss: 59MB	early lint checks
time: 0.000; rss: 58MB	language item collection
time: 0.008; rss: 67MB	name resolution
time: 0.000; rss: 67MB	lifetime resolution
time: 0.000; rss: 67MB	looking for entry point
time: 0.000; rss: 67MB	looking for plugin registrar
time: 0.003; rss: 68MB	region resolution
time: 0.000; rss: 68MB	loop checking
time: 0.000; rss: 68MB	static item recursion checking
time: 0.000; rss: 68MB	load_dep_graph
time: 0.004; rss: 71MB	type collecting
time: 0.000; rss: 71MB	variance inference
time: 0.022; rss: 87MB	coherence checking
time: 0.017; rss: 88MB	wf checking
time: 0.014; rss: 88MB	item-types checking
time: 0.212; rss: 98MB	item-bodies checking
time: 0.000; rss: 98MB	drop-impl checking
time: 0.011; rss: 99MB	const checking
time: 0.003; rss: 99MB	privacy checking
time: 0.000; rss: 99MB	stability index
time: 0.001; rss: 99MB	intrinsic checking
time: 0.000; rss: 99MB	effect checking
time: 0.006; rss: 99MB	match checking
time: 0.002; rss: 99MB	liveness checking
time: 0.006; rss: 99MB	rvalue checking
time: 0.032; rss: 106MB	MIR dump
time: 0.008; rss: 106MB	MIR passes
time: 0.022; rss: 106MB	borrow checking
time: 0.000; rss: 106MB	reachability checking
time: 0.002; rss: 106MB	death checking
time: 0.002; rss: 106MB	stability checking
time: 0.000; rss: 106MB	unused lib feature checking
time: 0.023; rss: 107MB	lint checking
time: 0.000; rss: 107MB	resolving dependency formats
time: 0.004; rss: 107MB	Prepare MIR codegen passes
  time: 0.029; rss: 112MB	translation item collection
  time: 0.002; rss: 112MB	codegen unit partitioning
  time: 0.060; rss: 144MB	write metadata
time: 0.400; rss: 144MB	translation
time: 0.000; rss: 144MB	assert dep graph
time: 0.000; rss: 144MB	serialize dep graph
  time: 0.027; rss: 109MB	llvm function passes [0]
  time: 0.050; rss: 113MB	llvm module passes [0]
  time: 0.576; rss: 117MB	codegen passes [0]
  time: 0.001; rss: 102MB	codegen passes [0]
time: 0.718; rss: 101MB	LLVM passes
time: 0.054; rss: 99MB	linking
done
