commit ac919fcd9d4a958baf99b2f2ed5c3d38a2ebf9d0
Merge: f9f45c6 b4f910d
Author: bors <bors@rust-lang.org>
Date:   Wed Nov 2 22:58:01 2016 -0700

    Auto merge of #37541 - nikomatsakis:issue-37291, r=brson
    
    Use impl obligations as initial environment for specialization
    
    This corrects a small regression in specialization that crept in, I think as part of the refactoring to introduce arenas. I also made an experiment (in the last commit) to cleanup the code to be more aggressive about normalization. As the commit log notes, I am not 100% sure that this is correct, but it feels safer, and I think that at worst it yields *more* ICEs (as opposed to admitting faulty code). I'll schedule a crater run to check beyond the testbase.
    
    Fixes #37291.
    
    r? @aturon
rustc: ./hyper.0.5.0
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling httparse v0.1.6
   Compiling bitflags v0.3.3
   Compiling lazy_static v0.1.16
   Compiling libc v0.2.16
   Compiling unicase v0.1.0
   Compiling winapi v0.2.8
   Compiling matches v0.1.2
   Compiling traitobject v0.0.1
   Compiling libc v0.1.12
   Compiling log v0.3.6
   Compiling gcc v0.3.35
   Compiling pkg-config v0.3.8
   Compiling winapi-build v0.1.1
   Compiling typeable v0.1.2
   Compiling kernel32-sys v0.2.2
   Compiling rustc-serialize v0.3.19
   Compiling mime v0.0.11
   Compiling rand v0.3.14
   Compiling time v0.1.35
   Compiling num_cpus v0.2.13
   Compiling openssl-sys v0.6.7
   Compiling openssl v0.6.7
   Compiling uuid v0.1.18
   Compiling url v0.2.38
   Compiling cookie v0.1.21
   Compiling hyper v0.5.0 (file:///root/benchmarks/hyper.0.5.0)
time: 0.062; rss: 50MB	parsing
Lines of code:             9003
Pre-expansion node count:  44129
time: 0.000; rss: 50MB	recursion limit
time: 0.000; rss: 50MB	crate injection
time: 0.000; rss: 50MB	plugin loading
time: 0.000; rss: 50MB	plugin registration
time: 0.093; rss: 87MB	expansion
time: 0.000; rss: 87MB	maybe building test harness
time: 0.001; rss: 87MB	maybe creating a macro crate
Post-expansion node count: 101823
time: 0.000; rss: 87MB	checking for inline asm in case the target doesn't support it
time: 0.002; rss: 87MB	complete gated feature checking
time: 0.003; rss: 87MB	early lint checks
time: 0.001; rss: 87MB	AST validation
time: 0.017; rss: 91MB	name resolution
time: 0.008; rss: 95MB	lowering ast -> hir
time: 0.002; rss: 97MB	indexing hir
time: 0.001; rss: 97MB	attribute checking
time: 0.001; rss: 90MB	language item collection
time: 0.001; rss: 90MB	lifetime resolution
time: 0.000; rss: 90MB	looking for entry point
time: 0.000; rss: 90MB	looking for plugin registrar
time: 0.005; rss: 95MB	region resolution
time: 0.001; rss: 95MB	loop checking
time: 0.000; rss: 95MB	static item recursion checking
time: 0.056; rss: 94MB	compute_incremental_hashes_map
time: 0.000; rss: 94MB	load_dep_graph
time: 0.016; rss: 97MB	type collecting
time: 0.000; rss: 97MB	variance inference
time: 0.029; rss: 100MB	coherence checking
time: 0.045; rss: 101MB	wf checking
time: 0.020; rss: 103MB	item-types checking
time: 0.329; rss: 112MB	item-bodies checking
time: 0.000; rss: 112MB	drop-impl checking
time: 0.029; rss: 112MB	const checking
time: 0.006; rss: 112MB	privacy checking
time: 0.001; rss: 112MB	stability index
time: 0.003; rss: 112MB	intrinsic checking
time: 0.002; rss: 112MB	effect checking
time: 0.008; rss: 112MB	match checking
time: 0.004; rss: 112MB	liveness checking
time: 0.021; rss: 112MB	rvalue checking
time: 0.048; rss: 130MB	MIR dump
  time: 0.007; rss: 130MB	SimplifyCfg
  time: 0.011; rss: 130MB	QualifyAndPromoteConstants
  time: 0.013; rss: 130MB	TypeckMir
  time: 0.001; rss: 130MB	SimplifyBranches
  time: 0.003; rss: 130MB	SimplifyCfg
time: 0.034; rss: 130MB	MIR passes
time: 0.053; rss: 130MB	borrow checking
time: 0.003; rss: 130MB	reachability checking
time: 0.005; rss: 130MB	death checking
time: 0.005; rss: 132MB	stability checking
time: 0.000; rss: 132MB	unused lib feature checking
time: 0.039; rss: 134MB	lint checking
time: 0.000; rss: 134MB	resolving dependency formats
  time: 0.001; rss: 134MB	NoLandingPads
  time: 0.003; rss: 134MB	SimplifyCfg
  time: 0.008; rss: 134MB	EraseRegions
  time: 0.001; rss: 134MB	AddCallGuards
  time: 0.021; rss: 136MB	ElaborateDrops
  time: 0.001; rss: 136MB	NoLandingPads
  time: 0.005; rss: 137MB	SimplifyCfg
  time: 0.003; rss: 137MB	InstCombine
  time: 0.003; rss: 137MB	Deaggregator
  time: 0.000; rss: 137MB	CopyPropagation
  time: 0.001; rss: 137MB	AddCallGuards
  time: 0.000; rss: 137MB	PreTrans
time: 0.047; rss: 137MB	Prepare MIR codegen passes
  time: 0.011; rss: 139MB	write metadata
  time: 0.116; rss: 146MB	translation item collection
  time: 0.015; rss: 148MB	codegen unit partitioning
  time: 0.013; rss: 204MB	internalize symbols
time: 1.010; rss: 204MB	translation
time: 0.000; rss: 204MB	assert dep graph
time: 0.000; rss: 204MB	serialize dep graph
  time: 0.088; rss: 148MB	llvm function passes [0]
  time: 0.042; rss: 148MB	llvm module passes [0]
  time: 1.608; rss: 153MB	codegen passes [0]
  time: 0.000; rss: 151MB	codegen passes [0]
time: 1.874; rss: 151MB	LLVM passes
time: 0.000; rss: 151MB	serialize work products
time: 0.067; rss: 94MB	linking
done
