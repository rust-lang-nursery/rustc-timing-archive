commit f1578d37dc844ffeefcabc30960784082c3c54fa
Merge: 40deb27 091a007
Author: bors <bors@rust-lang.org>
Date:   Thu Mar 24 23:12:57 2016 -0700

    Auto merge of #32428 - nikomatsakis:scopes-in-mir, r=nagisa
    
    Scopes in mir
    
    This PR adds scopes to MIR. There is a tree of scopes (each represented by a `ScopeId`). Every statement, variable, and terminator now has an associated scope and span.  It also adds a `-Z dump-mir` switch one can use to conveniently examine the MIR as optimizations proceed.
    
    The intention is two-fold. First, to support MIR debug-info. This PR does not attempt to modify trans to make use of the scope information, however.
    
    Second, in a more temporary capacity, to support the goal of moving regionck and borowck into the MIR. To that end, the PR also constructs a "scope auxiliary" table storing the extent of each span (this is kept separate from the main MIR, since it contains node-ids) and the dom/post-dom of the region in the graph where the scope occurs. When we move to non-lexical lifetimes, I expect this auxiliary information to be discarded, but that is still some ways in the future (requires, at minimum, an RFC, and there are some thorny details to work out -- though I've got an in-progress draft).
    
    Right now, I'm just dropping this auxiliary information after it is constructed. I was debating for some time whether to add some sort of sanity tests, but decided to just open this PR instead, because I couldn't figure out what such a test would look like (and we don't have independent tests for this today beyond the regionck and borrowck tests).
    
    I'd prefer not to store the auxiliary data into any kind of "per-fn" map. Rather, I'd prefer that we do regionck/borrowck/whatever-else immediately after construction -- that is, we build the MIR for fn X and immediately thereafter do extended correctness checking on it. This will reduce peak memory usage and also ensure that the auxiliary data doesn't exist once optimizations begin. It also clarifies the transition point where static checks are complete and MIR can be more freely optimized.
    
    cc @rust-lang/compiler @nagisa
rustc: ./rust-encoding.0.2.32
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling encoding v0.2.32 (file:///root/benchmarks/rust-encoding.0.2.32)
time: 0.022; rss: 43MB	parsing
Lines of code:             6441
Pre-expansion node count:  30335
time: 0.006; rss: 43MB	configuration 1
time: 0.000; rss: 43MB	recursion limit
time: 0.000; rss: 43MB	gated macro checking
time: 0.000; rss: 43MB	crate injection
time: 0.003; rss: 46MB	macro loading
time: 0.000; rss: 46MB	plugin loading
time: 0.000; rss: 46MB	plugin registration
time: 0.044; rss: 49MB	expansion
time: 0.001; rss: 49MB	complete gated feature checking 1
time: 0.007; rss: 49MB	configuration 2
time: 0.000; rss: 49MB	gated configuration checking
time: 0.004; rss: 49MB	maybe building test harness
time: 0.003; rss: 49MB	prelude injection
time: 0.000; rss: 49MB	checking that all macro invocations are gone
time: 0.000; rss: 49MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 49MB	complete gated feature checking 2
time: 0.000; rss: 49MB	const fn bodies and arguments
Post-expansion node count: 41611
time: 0.003; rss: 49MB	assigning node ids
time: 0.004; rss: 52MB	lowering ast -> hir
time: 0.001; rss: 54MB	indexing hir
time: 0.001; rss: 54MB	attribute checking
time: 0.002; rss: 54MB	early lint checks
time: 0.001; rss: 54MB	external crate/lib resolution
time: 0.000; rss: 54MB	language item collection
time: 0.008; rss: 63MB	resolution
time: 0.000; rss: 63MB	lifetime resolution
time: 0.000; rss: 63MB	looking for entry point
time: 0.000; rss: 63MB	looking for plugin registrar
time: 0.002; rss: 65MB	region resolution
time: 0.000; rss: 65MB	loop checking
time: 0.000; rss: 65MB	static item recursion checking
time: 0.005; rss: 67MB	type collecting
time: 0.000; rss: 67MB	variance inference
time: 0.143; rss: 85MB	coherence checking
time: 0.018; rss: 85MB	wf checking
time: 0.012; rss: 85MB	item-types checking
time: 0.206; rss: 97MB	item-bodies checking
time: 0.000; rss: 97MB	drop-impl checking
time: 0.010; rss: 97MB	const checking
time: 0.002; rss: 97MB	privacy checking
time: 0.000; rss: 97MB	stability index
time: 0.001; rss: 97MB	intrinsic checking
time: 0.000; rss: 97MB	effect checking
time: 0.006; rss: 97MB	match checking
time: 0.002; rss: 97MB	liveness checking
time: 0.006; rss: 97MB	rvalue checking
time: 0.018; rss: 103MB	MIR dump
time: 0.009; rss: 103MB	MIR passes
time: 0.021; rss: 103MB	borrow checking
time: 0.000; rss: 103MB	reachability checking
time: 0.002; rss: 103MB	death checking
time: 0.002; rss: 103MB	stability checking
time: 0.000; rss: 103MB	unused lib feature checking
time: 0.019; rss: 103MB	lint checking
time: 0.000; rss: 103MB	resolving dependency formats
  time: 0.024; rss: 111MB	translation item collection
  time: 0.058; rss: 149MB	write metadata
time: 0.316; rss: 149MB	translation
  time: 0.027; rss: 110MB	llvm function passes [0]
  time: 0.049; rss: 114MB	llvm module passes [0]
  time: 0.580; rss: 119MB	codegen passes [0]
  time: 0.001; rss: 102MB	codegen passes [0]
time: 0.722; rss: 101MB	LLVM passes
time: 0.054; rss: 99MB	linking
done
