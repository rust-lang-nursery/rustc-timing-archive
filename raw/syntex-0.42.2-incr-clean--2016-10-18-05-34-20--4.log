commit 753ea76336be2def223335c63d7b20188651a8c6
Merge: 3543a0f 6a4bb35
Author: bors <bors@rust-lang.org>
Date:   Tue Oct 18 01:49:13 2016 -0700

    Auto merge of #37083 - nnethercote:uleb128, r=eddyb
    
    Inline read_{un,}signed_leb128 and opaque::Decoder functions.
    
    `read_unsigned_leb128` is hot within rustc because it's heavily used
    during the reading of crate metadata. This commit tweaks its signature
    (and that of `read_signed_leb128`, for consistency) so it can increment
    the buffer index directly instead of maintaining its own copy, the
    change in which is then used by the caller to advance the index.
    
    This reduces the instruction count (as measured by Cachegrind) for some
    benchmarks a bit, e.g. hyper-0.5.0 by 0.7%.
rustc: ./syntex-0.42.2-incr-clean
RUSTFLAGS="-Z incremental=incr" \
    cargo rustc -p syntex_syntax -- -Ztime-passes -Zinput-stats -Z incremental-info
   Compiling syntex_syntax v0.42.0
time: 0.109; rss: 76MB	parsing
Lines of code:             33687
Pre-expansion node count:  224033
time: 0.000; rss: 76MB	recursion limit
time: 0.000; rss: 76MB	crate injection
time: 0.000; rss: 76MB	plugin loading
time: 0.000; rss: 76MB	plugin registration
time: 0.271; rss: 148MB	expansion
time: 0.000; rss: 148MB	maybe building test harness
time: 0.006; rss: 148MB	maybe creating a macro crate
Post-expansion node count: 641571
time: 0.000; rss: 148MB	checking for inline asm in case the target doesn't support it
time: 0.013; rss: 148MB	complete gated feature checking
time: 0.022; rss: 148MB	early lint checks
time: 0.007; rss: 148MB	AST validation
time: 0.084; rss: 163MB	name resolution
time: 0.049; rss: 203MB	lowering ast -> hir
time: 0.009; rss: 213MB	indexing hir
time: 0.007; rss: 213MB	attribute checking
time: 0.006; rss: 164MB	language item collection
time: 0.012; rss: 164MB	lifetime resolution
time: 0.000; rss: 164MB	looking for entry point
time: 0.000; rss: 164MB	looking for plugin registrar
time: 0.043; rss: 174MB	region resolution
time: 0.006; rss: 174MB	loop checking
time: 0.006; rss: 174MB	static item recursion checking
time: 0.261; rss: 175MB	compute_incremental_hashes_map
time: 0.000; rss: 175MB	load_dep_graph
time: 0.041; rss: 179MB	type collecting
time: 0.001; rss: 179MB	variance inference
time: 0.035; rss: 185MB	coherence checking
time: 0.103; rss: 190MB	wf checking
time: 0.191; rss: 195MB	item-types checking
time: 3.878; rss: 245MB	item-bodies checking
time: 0.000; rss: 245MB	drop-impl checking
time: 0.254; rss: 249MB	const checking
time: 0.054; rss: 249MB	privacy checking
time: 0.007; rss: 249MB	stability index
time: 0.022; rss: 249MB	intrinsic checking
time: 0.018; rss: 249MB	effect checking
time: 0.057; rss: 249MB	match checking
time: 0.054; rss: 241MB	liveness checking
time: 0.218; rss: 241MB	rvalue checking
time: 0.406; rss: 430MB	MIR dump
  time: 0.057; rss: 432MB	SimplifyCfg
  time: 0.080; rss: 432MB	QualifyAndPromoteConstants
  time: 0.108; rss: 432MB	TypeckMir
  time: 0.004; rss: 432MB	SimplifyBranches
  time: 0.031; rss: 432MB	SimplifyCfg
time: 0.282; rss: 432MB	MIR passes
time: 0.560; rss: 432MB	borrow checking
time: 0.022; rss: 432MB	reachability checking
time: 0.044; rss: 432MB	death checking
time: 0.042; rss: 434MB	stability checking
time: 0.000; rss: 434MB	unused lib feature checking
time: 0.214; rss: 434MB	lint checking
time: 0.000; rss: 434MB	resolving dependency formats
  time: 0.003; rss: 434MB	NoLandingPads
  time: 0.027; rss: 434MB	SimplifyCfg
  time: 0.070; rss: 443MB	EraseRegions
  time: 0.011; rss: 443MB	AddCallGuards
  time: 0.294; rss: 461MB	ElaborateDrops
  time: 0.003; rss: 461MB	NoLandingPads
  time: 0.053; rss: 461MB	SimplifyCfg
  time: 0.030; rss: 461MB	InstCombine
  time: 0.011; rss: 461MB	Deaggregator
  time: 0.003; rss: 461MB	CopyPropagation
  time: 0.009; rss: 461MB	AddCallGuards
  time: 0.003; rss: 461MB	PreTrans
time: 0.515; rss: 461MB	Prepare MIR codegen passes
  time: 0.263; rss: 469MB	write metadata
  time: 0.426; rss: 480MB	translation item collection
  time: 0.056; rss: 487MB	codegen unit partitioning
  time: 0.047; rss: 730MB	internalize symbols
time: 5.052; rss: 610MB	translation
time: 0.000; rss: 610MB	assert dep graph
time: 0.000; rss: 610MB	serialize dep graph
incremental: re-using 0 out of 1 modules
  time: 0.512; rss: 411MB	llvm function passes [0]
  time: 0.250; rss: 419MB	llvm module passes [0]
  time: 10.035; rss: 418MB	codegen passes [0]
  time: 0.002; rss: 414MB	codegen passes [0]
time: 11.550; rss: 414MB	LLVM passes
time: 0.000; rss: 414MB	serialize work products
time: 0.673; rss: 107MB	linking
done
