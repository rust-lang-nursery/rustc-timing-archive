commit 0b399e5e99a44cf44d3860d353a8b7619d466410
Merge: c7ddb89 372c6df
Author: bors <bors@rust-lang.org>
Date:   Sun Nov 27 23:32:57 2016 -0600

    Auto merge of #37676 - eddyb:lazy-7, r=nikomatsakis
    
    [7/n] rustc: desugar UFCS in HIR and don't use DefMap for associated resolutions.
    
    _This is part of a series ([prev](https://github.com/rust-lang/rust/pull/37412) | [next](https://github.com/rust-lang/rust/pull/37688)) of patches designed to rework rustc into an out-of-order on-demand pipeline model for both better feature support (e.g. [MIR-based](https://github.com/solson/miri) early constant evaluation) and incremental execution of compiler passes (e.g. type-checking), with beneficial consequences to IDE support as well.
    If any motivation is unclear, please ask for additional PR description clarifications or code comments._
    
    <hr>
    
    Previously, a path like `T::Assoc::method`, while equivalent to `<<T>::Assoc>::method`, wasn't desugared in any way at the HIR level and everything inspecting it had to either deal with knowing only `T` (before typeck) or knowing only the definition of `method` (after typeck).
    Such a path also had only one `NodeId` and associated resolution during typeck modified `DefMap`, in a way that would be hard for incremental recompilation to track, and inconvenient for partial type conversions from HIR to `Ty`, which are required to break faux-cycles in on-demand type collection.
    
    The desugarings performed by this PR are as follows:
    * `use a::{b,c};` is flattened to `use a as _; use a::b; use a::c;`
      * as resolution is complete, `use a as _;` doesn't do anything, except get checked for stability
    * `Vec::new` (an expression) becomes `Vec<..>::new<..>`, to distinguish it from `<Vec>::new<..>`
      * the "infer all parameters" `<..>` form is internal and not even pretty-printed
      * used when there are no type parameters at all, in an expression or pattern path segment
    * `T::A::B` becomes `<<T>::A>::B` in a type, and `<<T<..>>::A<..>>::B<..>` in an expression/pattern
      * one additional `hir::Ty` node is created for each prefix, starting with the fully-resolved type (`T`) and extending it with each segment (e.g. `<T>::A`)
    * fully-resolved paths contain their `Def` in HIR, getting rid of the `DefMap` and absolving incremental recompilation of needing to manually look up nodes to handle that side information
    
    Not keeping the `DefMap` around meant that associated resolutions had to be stored somewhere else:
    * expressions and patterns use a new `NodeId -> Def` map in `ty::Tables`
      * compatible with the future per-body (constant / `fn` / closure) `Tables`
    * types are accessible via `Ty` and the usual per-item generics / predicates / type
      * `rustdoc` and `save-analysis` are the only situations which insist on mapping syntactical types to semantical ones, or at least understand the resolution of associated types, therefore the type conversion cache, i.e. a `NodeId -> Ty` map, is exposed by typeck for this purpose
      * stability had to be split into a pass that runs on HIR and checks the results of name resolution, and impromptu checks triggered by `typeck` for associated paths, methods, fields, etc.
      * privacy using semantic types results in accurate reachability for `impl Trait`, which fixes #35870, and thorough introspection of associated types, which may allow relaxing private-in-public checking on bounds, while keeping the intended ban on projections with private type parameters
    
    cc @petrochenkov
rustc: ./inflate-0.1.0
cargo rustc  -- -Ztime-passes -Zinput-stats
   Compiling inflate v0.1.0 (file:///root/benchmarks/inflate-0.1.0)
time: 0.003; rss: 43MB	parsing
Lines of code:             956
Pre-expansion node count:  4736
time: 0.000; rss: 43MB	recursion limit
time: 0.000; rss: 43MB	crate injection
time: 0.000; rss: 43MB	plugin loading
time: 0.000; rss: 43MB	plugin registration
time: 0.057; rss: 73MB	expansion
time: 0.000; rss: 73MB	maybe building test harness
time: 0.000; rss: 73MB	maybe creating a macro crate
Post-expansion node count: 55748
time: 0.000; rss: 73MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 73MB	complete gated feature checking
time: 0.002; rss: 73MB	early lint checks
time: 0.000; rss: 73MB	AST validation
time: 0.007; rss: 75MB	name resolution
time: 0.005; rss: 77MB	lowering ast -> hir
time: 0.001; rss: 79MB	indexing hir
time: 0.001; rss: 79MB	attribute checking
time: 0.001; rss: 76MB	language item collection
time: 0.000; rss: 76MB	lifetime resolution
time: 0.000; rss: 76MB	looking for entry point
time: 0.000; rss: 76MB	looking for plugin registrar
time: 0.003; rss: 78MB	region resolution
time: 0.000; rss: 78MB	loop checking
time: 0.000; rss: 78MB	static item recursion checking
time: 0.018; rss: 79MB	compute_incremental_hashes_map
time: 0.000; rss: 79MB	load_dep_graph
time: 0.000; rss: 79MB	stability index
time: 0.001; rss: 79MB	stability checking
time: 0.002; rss: 80MB	type collecting
time: 0.000; rss: 80MB	variance inference
time: 0.000; rss: 80MB	impl wf inference
time: 0.006; rss: 80MB	coherence checking
time: 0.001; rss: 80MB	wf checking
time: 0.001; rss: 80MB	item-types checking
time: 1.584; rss: 89MB	item-bodies checking
time: 0.000; rss: 89MB	drop-impl checking
time: 0.014; rss: 89MB	const checking
time: 0.001; rss: 89MB	privacy checking
time: 0.000; rss: 89MB	intrinsic checking
time: 0.000; rss: 89MB	effect checking
time: 0.002; rss: 89MB	match checking
time: 0.064; rss: 87MB	liveness checking
time: 0.011; rss: 87MB	rvalue checking
time: 0.034; rss: 106MB	MIR dump
  time: 0.007; rss: 106MB	SimplifyCfg
  time: 0.005; rss: 107MB	QualifyAndPromoteConstants
  time: 0.007; rss: 107MB	TypeckMir
  time: 0.000; rss: 107MB	SimplifyBranches
  time: 0.002; rss: 107MB	SimplifyCfg
time: 0.021; rss: 107MB	MIR cleanup and validation
time: 0.196; rss: 107MB	borrow checking
time: 0.000; rss: 107MB	reachability checking
time: 0.002; rss: 107MB	death checking
time: 0.000; rss: 107MB	unused lib feature checking
time: 0.015; rss: 108MB	lint checking
time: 0.000; rss: 108MB	resolving dependency formats
  time: 0.000; rss: 108MB	NoLandingPads
  time: 0.002; rss: 108MB	SimplifyCfg
  time: 0.002; rss: 108MB	EraseRegions
  time: 0.001; rss: 109MB	AddCallGuards
  time: 0.223; rss: 112MB	ElaborateDrops
  time: 0.000; rss: 112MB	NoLandingPads
  time: 0.006; rss: 111MB	SimplifyCfg
  time: 0.003; rss: 111MB	InstCombine
  time: 0.000; rss: 111MB	Deaggregator
  time: 0.000; rss: 111MB	CopyPropagation
  time: 0.003; rss: 111MB	SimplifyLocals
  time: 0.001; rss: 111MB	AddCallGuards
  time: 0.000; rss: 111MB	PreTrans
time: 0.241; rss: 111MB	MIR optimisations
  time: 0.001; rss: 111MB	write metadata
  time: 0.009; rss: 115MB	translation item collection
  time: 0.001; rss: 115MB	codegen unit partitioning
  time: 0.001; rss: 127MB	internalize symbols
time: 0.147; rss: 127MB	translation
time: 0.000; rss: 127MB	assert dep graph
time: 0.000; rss: 127MB	serialize dep graph
  time: 0.027; rss: 92MB	llvm function passes [0]
  time: 0.006; rss: 93MB	llvm module passes [0]
  time: 0.657; rss: 99MB	codegen passes [0]
  time: 0.000; rss: 96MB	codegen passes [0]
time: 0.726; rss: 96MB	LLVM passes
time: 0.000; rss: 96MB	serialize work products
time: 0.019; rss: 84MB	linking
done
