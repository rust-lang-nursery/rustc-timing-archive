commit 35635aebab321ff2a4708aeb172351356ad63cf7
Merge: 5147c1f ee79bfa
Author: bors <bors@rust-lang.org>
Date:   Sat Feb 6 09:24:04 2016 +0000

    Auto merge of #31333 - lambda:31273-abort-on-stack-overflow, r=brson
    
    Abort on stack overflow instead of re-raising SIGSEGV
    
    We use guard pages that cause the process to abort to protect against
    undefined behavior in the event of stack overflow.  We have a handler
    that catches segfaults, prints out an error message if the segfault was
    due to a stack overflow, then unregisters itself and returns to allow
    the signal to be re-raised and kill the process.
    
    This caused some confusion, as it was unexpected that safe code would be
    able to cause a segfault, while it's easy to overflow the stack in safe
    code.  To avoid this confusion, when we detect a segfault in the guard
    page, abort instead of the previous behavior of re-raising SIGSEGV.
    
    To test this, we need to adapt the tests for segfault to actually check
    the exit status.  Doing so revealed that the existing test for segfault
    behavior was actually invalid; LLVM optimizes the explicit null pointer
    reference down to an illegal instruction, so the program aborts with
    SIGILL instead of SIGSEGV and the test didn't actually trigger the
    signal handler at all.  Use a C helper function to get a null pointer
    that LLVM can't optimize away, so we get our segfault instead.
    
    This is a [breaking-change] if anyone is relying on the exact signal
    raised to kill a process on stack overflow.
    
    Closes #31273
rustc: ./jld-day15-parser
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling day15 v0.1.0 (file:///root/benchmarks/jld-day15-parser)
time: 0.001; rss: 35MB	parsing
Lines of code:             72
Pre-expansion node count:  673
time: 0.000; rss: 35MB	configuration 1
time: 0.000; rss: 35MB	recursion limit
time: 0.000; rss: 35MB	gated macro checking
time: 0.000; rss: 35MB	crate injection
time: 0.003; rss: 38MB	macro loading
time: 0.000; rss: 38MB	plugin loading
time: 0.000; rss: 38MB	plugin registration
time: 0.002; rss: 38MB	expansion
time: 0.000; rss: 38MB	complete gated feature checking 1
time: 0.000; rss: 38MB	configuration 2
time: 0.000; rss: 38MB	gated configuration checking
time: 0.000; rss: 38MB	maybe building test harness
time: 0.000; rss: 38MB	prelude injection
time: 0.000; rss: 38MB	checking that all macro invocations are gone
time: 0.000; rss: 38MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 38MB	complete gated feature checking 2
Post-expansion node count: 1176
time: 0.000; rss: 38MB	assigning node ids
time: 0.000; rss: 38MB	lowering ast -> hir
time: 0.000; rss: 38MB	indexing hir
time: 0.000; rss: 38MB	attribute checking
time: 0.000; rss: 38MB	early lint checks
time: 0.001; rss: 42MB	external crate/lib resolution
time: 0.000; rss: 42MB	language item collection
time: 0.001; rss: 46MB	resolution
time: 0.000; rss: 46MB	lifetime resolution
time: 0.000; rss: 46MB	looking for entry point
time: 0.000; rss: 46MB	looking for plugin registrar
time: 0.000; rss: 46MB	region resolution
time: 0.000; rss: 46MB	loop checking
time: 0.000; rss: 46MB	static item recursion checking
time: 0.001; rss: 50MB	type collecting
time: 0.000; rss: 50MB	variance inference
time: 0.005; rss: 55MB	coherence checking
time: 0.006; rss: 62MB	wf checking
time: 0.000; rss: 62MB	item-types checking
time: 1.134; rss: 103MB	item-bodies checking
time: 0.000; rss: 103MB	drop-impl checking
time: 0.001; rss: 103MB	const checking
time: 0.000; rss: 103MB	privacy checking
time: 0.000; rss: 103MB	stability index
time: 0.000; rss: 103MB	intrinsic checking
time: 0.000; rss: 103MB	effect checking
time: 0.000; rss: 103MB	match checking
time: 0.001; rss: 103MB	MIR dump
time: 0.000; rss: 103MB	liveness checking
time: 0.001; rss: 104MB	borrow checking
time: 0.002; rss: 104MB	rvalue checking
time: 0.000; rss: 104MB	reachability checking
time: 0.000; rss: 104MB	death checking
time: 0.000; rss: 104MB	stability checking
time: 0.000; rss: 104MB	unused lib feature checking
time: 0.003; rss: 105MB	lint checking
time: 0.001; rss: 105MB	resolving dependency formats
time: 0.000; rss: 105MB	erasing regions from MIR
  time: 0.000; rss: 156MB	write metadata
time: 16.149; rss: 156MB	translation
  time: 0.015; rss: 93MB	llvm function passes [0]
  time: 0.002; rss: 93MB	llvm module passes [0]
  time: 0.272; rss: 103MB	codegen passes [0]
  time: 0.000; rss: 101MB	codegen passes [0]
time: 0.299; rss: 101MB	LLVM passes
  time: 0.106; rss: 105MB	running linker
time: 0.107; rss: 105MB	linking
done
