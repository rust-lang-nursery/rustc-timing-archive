commit e5ed0a5d78be74238af31631e7ecf311eb661586
Merge: 7c535c6 36f2af1
Author: bors <bors@rust-lang.org>
Date:   Sat Nov 19 23:39:25 2016 -0600

    Auto merge of #37842 - nikomatsakis:incremental-test, r=mw
    
    Add tests for incremental reuse scenarios
    
    These are microbenchmarks checking that we achieve the expected reuse in the scenarios covered by incremental beta.
    
    r? @michaelwoerister
rustc: ./issue-32278-big-array-of-strings
cargo rustc  -- -Ztime-passes -Zinput-stats
   Compiling issue-32278-big-array-of-strings v0.1.0 (file:///root/benchmarks/issue-32278-big-array-of-strings)
time: 0.102; rss: 59MB	parsing
Lines of code:             65577
Pre-expansion node count:  65552
time: 0.000; rss: 59MB	recursion limit
time: 0.000; rss: 59MB	crate injection
time: 0.000; rss: 59MB	plugin loading
time: 0.000; rss: 59MB	plugin registration
time: 0.022; rss: 83MB	expansion
time: 0.000; rss: 83MB	maybe building test harness
time: 0.000; rss: 83MB	maybe creating a macro crate
Post-expansion node count: 65565
time: 0.000; rss: 83MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 83MB	complete gated feature checking
time: 0.005; rss: 83MB	early lint checks
time: 0.000; rss: 83MB	AST validation
time: 0.003; rss: 83MB	name resolution
time: 0.015; rss: 94MB	lowering ast -> hir
time: 0.006; rss: 96MB	indexing hir
time: 0.000; rss: 96MB	attribute checking
time: 0.000; rss: 85MB	language item collection
time: 0.000; rss: 85MB	lifetime resolution
time: 0.000; rss: 85MB	looking for entry point
time: 0.000; rss: 85MB	looking for plugin registrar
time: 0.015; rss: 89MB	region resolution
time: 0.000; rss: 89MB	loop checking
time: 0.001; rss: 89MB	static item recursion checking
time: 0.019; rss: 89MB	compute_incremental_hashes_map
time: 0.000; rss: 89MB	load_dep_graph
time: 0.000; rss: 89MB	type collecting
time: 0.000; rss: 89MB	variance inference
time: 0.000; rss: 89MB	impl wf inference
time: 0.004; rss: 92MB	coherence checking
time: 0.000; rss: 92MB	wf checking
time: 0.878; rss: 104MB	item-types checking
time: 0.000; rss: 104MB	item-bodies checking
time: 0.000; rss: 104MB	drop-impl checking
time: 0.024; rss: 103MB	const checking
time: 0.001; rss: 103MB	privacy checking
time: 0.000; rss: 103MB	stability index
time: 0.000; rss: 103MB	intrinsic checking
time: 0.000; rss: 103MB	effect checking
time: 0.000; rss: 103MB	match checking
time: 0.000; rss: 103MB	liveness checking
time: 0.000; rss: 103MB	rvalue checking
time: 0.035; rss: 109MB	MIR dump
  time: 0.000; rss: 109MB	SimplifyCfg
  time: 0.001; rss: 109MB	QualifyAndPromoteConstants
  time: 0.001; rss: 109MB	TypeckMir
  time: 0.000; rss: 109MB	SimplifyBranches
  time: 0.000; rss: 109MB	SimplifyCfg
time: 0.001; rss: 109MB	MIR cleanup and validation
time: 0.001; rss: 109MB	borrow checking
time: 0.000; rss: 109MB	reachability checking
time: 0.001; rss: 109MB	death checking
time: 0.000; rss: 109MB	stability checking
time: 0.000; rss: 109MB	unused lib feature checking
time: 0.023; rss: 109MB	lint checking
time: 0.001; rss: 109MB	resolving dependency formats
  time: 0.000; rss: 109MB	NoLandingPads
  time: 0.000; rss: 109MB	SimplifyCfg
  time: 0.001; rss: 109MB	EraseRegions
  time: 0.000; rss: 109MB	AddCallGuards
  time: 0.000; rss: 109MB	ElaborateDrops
  time: 0.000; rss: 109MB	NoLandingPads
  time: 0.000; rss: 109MB	SimplifyCfg
  time: 0.000; rss: 109MB	InstCombine
  time: 0.000; rss: 109MB	Deaggregator
  time: 0.000; rss: 109MB	CopyPropagation
  time: 0.000; rss: 109MB	SimplifyLocals
  time: 0.000; rss: 109MB	AddCallGuards
  time: 0.000; rss: 109MB	PreTrans
time: 0.001; rss: 109MB	MIR optimisations
  time: 0.000; rss: 110MB	write metadata
  time: 0.000; rss: 110MB	translation item collection
  time: 0.000; rss: 110MB	codegen unit partitioning
  time: 0.001; rss: 121MB	internalize symbols
time: 0.057; rss: 121MB	translation
time: 0.000; rss: 121MB	assert dep graph
time: 0.000; rss: 121MB	serialize dep graph
  time: 0.008; rss: 86MB	llvm function passes [0]
  time: 0.000; rss: 86MB	llvm module passes [0]
  time: 0.213; rss: 85MB	codegen passes [0]
  time: 0.000; rss: 85MB	codegen passes [0]
time: 0.222; rss: 85MB	LLVM passes
time: 0.000; rss: 85MB	serialize work products
  time: 0.162; rss: 75MB	running linker
time: 0.163; rss: 75MB	linking
done
