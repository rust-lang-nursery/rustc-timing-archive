commit 6d620843f62b6cf3182528ffcaa877eba461bfbb
Merge: a7bfb1a 032bffa
Author: bors <bors@rust-lang.org>
Date:   Mon Oct 10 04:04:51 2016 -0700

    Auto merge of #36341 - sagebind:thread_id, r=alexcrichton
    
    Add ThreadId for comparing threads
    
    This adds the capability to store and compare threads with the current calling thread via a new struct, `std::thread::ThreadId`. Addresses the need outlined in issue #21507.
    
    This avoids the need to add any special checks to the existing thread structs and does not rely on the system to provide an identifier for a thread, since it seems that this approach is unreliable and undesirable. Instead, this simply uses a lazily-created, thread-local `usize` whose value is copied from a global atomic counter. The code should be simple enough that it should be as much reliable as the `#[thread_local]` attribute it uses (however much that is).
    
    `ThreadId`s can be compared directly for equality and have copy semantics.
    
    Also see these other attempts:
    - rust-lang/rust#29457
    - rust-lang/rust#29448
    - rust-lang/rust#29447
    
    And this in the RFC repo: rust-lang/rfcs#1435
rustc: ./syntex-0.42.2-incr-clean
RUSTFLAGS="-Z incremental=incr" \
    cargo rustc -p syntex_syntax -- -Ztime-passes -Zinput-stats -Z incremental-info
   Compiling syntex_syntax v0.42.0
time: 0.108; rss: 76MB	parsing
Lines of code:             33687
Pre-expansion node count:  224033
time: 0.000; rss: 76MB	recursion limit
time: 0.000; rss: 76MB	crate injection
time: 0.000; rss: 76MB	plugin loading
time: 0.000; rss: 76MB	plugin registration
time: 0.271; rss: 145MB	expansion
time: 0.000; rss: 145MB	maybe building test harness
time: 0.006; rss: 145MB	maybe creating a macro crate
Post-expansion node count: 641571
time: 0.000; rss: 145MB	checking for inline asm in case the target doesn't support it
time: 0.013; rss: 145MB	complete gated feature checking
time: 0.024; rss: 145MB	early lint checks
time: 0.007; rss: 145MB	AST validation
time: 0.083; rss: 160MB	name resolution
time: 0.050; rss: 202MB	lowering ast -> hir
time: 0.009; rss: 211MB	indexing hir
time: 0.006; rss: 211MB	attribute checking
time: 0.005; rss: 161MB	language item collection
time: 0.012; rss: 161MB	lifetime resolution
time: 0.000; rss: 161MB	looking for entry point
time: 0.000; rss: 161MB	looking for plugin registrar
time: 0.044; rss: 173MB	region resolution
time: 0.006; rss: 173MB	loop checking
time: 0.006; rss: 173MB	static item recursion checking
time: 0.264; rss: 175MB	compute_incremental_hashes_map
time: 0.000; rss: 175MB	load_dep_graph
time: 0.044; rss: 175MB	type collecting
time: 0.001; rss: 175MB	variance inference
time: 0.039; rss: 179MB	coherence checking
time: 0.097; rss: 181MB	wf checking
time: 0.191; rss: 187MB	item-types checking
time: 3.936; rss: 240MB	item-bodies checking
time: 0.000; rss: 240MB	drop-impl checking
time: 0.319; rss: 242MB	const checking
time: 0.054; rss: 242MB	privacy checking
time: 0.007; rss: 242MB	stability index
time: 0.021; rss: 242MB	intrinsic checking
time: 0.018; rss: 242MB	effect checking
time: 0.056; rss: 242MB	match checking
time: 0.055; rss: 236MB	liveness checking
time: 0.284; rss: 236MB	rvalue checking
time: 0.412; rss: 426MB	MIR dump
  time: 0.057; rss: 429MB	SimplifyCfg
  time: 0.081; rss: 429MB	QualifyAndPromoteConstants
  time: 0.109; rss: 429MB	TypeckMir
  time: 0.004; rss: 429MB	SimplifyBranches
  time: 0.031; rss: 429MB	SimplifyCfg
time: 0.283; rss: 429MB	MIR passes
time: 0.681; rss: 430MB	borrow checking
time: 0.022; rss: 430MB	reachability checking
time: 0.045; rss: 430MB	death checking
time: 0.041; rss: 430MB	stability checking
time: 0.000; rss: 430MB	unused lib feature checking
time: 0.219; rss: 430MB	lint checking
time: 0.000; rss: 430MB	resolving dependency formats
  time: 0.003; rss: 430MB	NoLandingPads
  time: 0.027; rss: 430MB	SimplifyCfg
  time: 0.071; rss: 443MB	EraseRegions
  time: 0.011; rss: 443MB	AddCallGuards
  time: 1.042; rss: 459MB	ElaborateDrops
  time: 0.003; rss: 459MB	NoLandingPads
  time: 0.053; rss: 458MB	SimplifyCfg
  time: 0.031; rss: 457MB	InstCombine
  time: 0.012; rss: 457MB	Deaggregator
  time: 0.003; rss: 457MB	CopyPropagation
  time: 0.009; rss: 457MB	AddCallGuards
  time: 0.003; rss: 457MB	PreTrans
time: 1.269; rss: 457MB	Prepare MIR codegen passes
  time: 0.263; rss: 464MB	write metadata
  time: 0.465; rss: 475MB	translation item collection
  time: 0.068; rss: 480MB	codegen unit partitioning
  time: 0.058; rss: 724MB	internalize symbols
time: 5.182; rss: 602MB	translation
time: 0.000; rss: 602MB	assert dep graph
time: 0.000; rss: 602MB	serialize dep graph
incremental: re-using 0 out of 1 modules
  time: 0.519; rss: 409MB	llvm function passes [0]
  time: 0.244; rss: 417MB	llvm module passes [0]
  time: 10.081; rss: 418MB	codegen passes [0]
  time: 0.001; rss: 417MB	codegen passes [0]
time: 11.591; rss: 417MB	LLVM passes
time: 0.000; rss: 417MB	serialize work products
time: 0.661; rss: 107MB	linking
done
