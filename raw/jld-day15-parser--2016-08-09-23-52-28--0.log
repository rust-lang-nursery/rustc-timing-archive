commit 576f7665942414cb95239f8cbec4b654f231f4aa
Merge: e1d2bc2 9b510ba
Author: bors <bors@rust-lang.org>
Date:   Tue Aug 9 14:04:54 2016 -0700

    Auto merge of #35401 - jonathandturner:enable_json_and_new_errors, r=jonathandturner
    
    Turn on new errors and json mode
    
    This PR is a big-switch, but on a well-worn path:
    
    * Turns on new errors by default (and removes old skool)
    * Moves json output from behind a flag
    
    The RFC for new errors [landed](https://github.com/rust-lang/rfcs/pull/1644) and as part of that we wanted some bake time.  It's now had a few weeks + all the time leading up to the RFC of people banging on it.  We've also had [editors updating to the new format](https://github.com/saviorisdead/RustyCode/pull/159) and expect more to follow.
    
    We also have an [issue on old skool](https://github.com/rust-lang/rust/issues/35330) that needs to be fixed as more errors are switched to the new style, but it seems silly to fix old skool errors when we fully intend to throw the switch in the near future.
    
    This makes it lean towards "why not just throw the switch now, rather than waiting a couple more weeks?"  I only know of vim that wanted to try to parse the new format but were not sure how, and I think we can reach out to them and work out something in the 8 weeks before this would appear in a stable release.
    
    We've [hashed out](https://github.com/rust-lang/rust/issues/35330) stabilizing JSON output, and it seems like people are relatively happy making what we have v1 and then likely adding to it in the future.  The idea is that we'd maintain backward compatibility and just add new fields as needed.  We'll also work on a separate output format that'd be better suited for interactive tools like IDES (since JSON message can get a little long depending on the error).
    
    This PR stabilizes JSON mode, allowing its use without `-Z unstable-options`
    
    Combined, this gives editors two ways to support errors going forward: parsing the new error format or using the JSON mode.  By moving JSON to stable, we can also add support to Cargo, which plugin authors tell us does help simplify their support story.
    
    r? @nikomatsakis
    cc @rust-lang/tools
    
    Closes https://github.com/rust-lang/rust/issues/34826
rustc: ./jld-day15-parser
cargo rustc -- -Ztime-passes -Zinput-stats
    Updating registry `https://github.com/rust-lang/crates.io-index`
   Compiling combine v1.3.0
   Compiling day15 v0.1.0 (file:///root/benchmarks/jld-day15-parser)
time: 0.001; rss: 50MB	parsing
Lines of code:             72
Pre-expansion node count:  654
time: 0.000; rss: 50MB	configuration
time: 0.000; rss: 50MB	recursion limit
time: 0.000; rss: 50MB	crate injection
time: 0.000; rss: 50MB	plugin loading
time: 0.000; rss: 50MB	plugin registration
time: 0.018; rss: 86MB	expansion
time: 0.000; rss: 86MB	maybe building test harness
time: 0.000; rss: 86MB	assigning node ids
Post-expansion node count: 1155
time: 0.000; rss: 86MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 86MB	complete gated feature checking
time: 0.000; rss: 86MB	collecting defs
time: 0.003; rss: 90MB	external crate/lib resolution
time: 0.000; rss: 90MB	early lint checks
time: 0.000; rss: 90MB	AST validation
time: 0.001; rss: 90MB	name resolution
time: 0.000; rss: 90MB	lowering ast -> hir
time: 0.000; rss: 90MB	indexing hir
time: 0.000; rss: 90MB	attribute checking
time: 0.000; rss: 90MB	language item collection
time: 0.000; rss: 90MB	lifetime resolution
time: 0.000; rss: 90MB	looking for entry point
time: 0.000; rss: 90MB	looking for plugin registrar
time: 0.000; rss: 90MB	region resolution
time: 0.000; rss: 90MB	loop checking
time: 0.000; rss: 90MB	static item recursion checking
time: 0.000; rss: 90MB	load_dep_graph
time: 0.001; rss: 90MB	type collecting
time: 0.000; rss: 90MB	variance inference
time: 0.005; rss: 90MB	coherence checking
time: 0.006; rss: 90MB	wf checking
time: 0.000; rss: 90MB	item-types checking
time: 0.046; rss: 98MB	item-bodies checking
time: 0.000; rss: 98MB	drop-impl checking
time: 0.001; rss: 102MB	const checking
time: 0.000; rss: 102MB	privacy checking
time: 0.000; rss: 102MB	stability index
time: 0.000; rss: 102MB	intrinsic checking
time: 0.000; rss: 102MB	effect checking
time: 0.000; rss: 102MB	match checking
time: 0.000; rss: 102MB	liveness checking
time: 0.000; rss: 102MB	rvalue checking
time: 0.001; rss: 102MB	MIR dump
time: 0.001; rss: 102MB	MIR passes
time: 0.001; rss: 102MB	borrow checking
time: 0.000; rss: 102MB	reachability checking
time: 0.000; rss: 102MB	death checking
time: 0.000; rss: 102MB	stability checking
time: 0.000; rss: 102MB	unused lib feature checking
time: 0.004; rss: 102MB	lint checking
time: 0.001; rss: 102MB	resolving dependency formats
time: 0.005; rss: 102MB	Prepare MIR codegen passes
  time: 0.000; rss: 102MB	write metadata
  time: 0.562; rss: 109MB	translation item collection
  time: 0.003; rss: 109MB	codegen unit partitioning
  time: 0.006; rss: 135MB	internalize symbols
time: 4.095; rss: 135MB	translation
time: 0.000; rss: 135MB	assert dep graph
time: 0.000; rss: 135MB	serialize dep graph
  time: 0.018; rss: 113MB	llvm function passes [0]
  time: 0.001; rss: 113MB	llvm module passes [0]
  time: 0.341; rss: 118MB	codegen passes [0]
  time: 0.000; rss: 117MB	codegen passes [0]
time: 0.361; rss: 117MB	LLVM passes
time: 0.000; rss: 117MB	serialize work products
  time: 0.117; rss: 107MB	running linker
time: 0.118; rss: 107MB	linking
done
