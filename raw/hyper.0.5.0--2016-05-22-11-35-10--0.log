commit 6e455640950c4e8cb8bff919edb4854fcf7773ca
Merge: e24d621 cfc3865
Author: bors <bors@rust-lang.org>
Date:   Sun May 22 23:14:11 2016 -0700

    Auto merge of #31457 - lambda:rtabort-use-libc-abort, r=alexcrichton
    
    Use libc::abort, not intrinsics::abort, in rtabort!
    
    intrinsics::abort compiles down to an illegal instruction, which on
    Unix-like platforms causes the process to be killed with SIGILL.  A more
    appropriate way to kill the process would be SIGABRT; this indicates
    better that the runtime has explicitly aborted, rather than some kind of
    compiler bug or architecture mismatch that SIGILL might indicate.
    
    For rtassert!, replace this with libc::abort.  libc::abort raises
    SIGABRT, but is defined to do so in such a way that it will terminate
    the process even if SIGABRT is currently masked or caught by a signal
    handler that returns.
    
    On non-Unix platforms, retain the existing behavior.  On Windows we
    prefer to avoid depending on the C runtime, and we need a fallback for
    any other platforms that may be defined.  An alternative on Windows
    would be to call TerminateProcess, but this seems less essential than
    switching to using SIGABRT on Unix-like platforms, where it is common
    for the process-killing signal to be printed out or logged.
    
    This is a [breaking-change] for any code that depends on the exact
    signal raised to abort a process via rtabort!
    
    cc #31273
    cc #31333
rustc: ./hyper.0.5.0
cargo rustc -- -Ztime-passes -Zinput-stats
    Updating registry `https://github.com/rust-lang/crates.io-index`
   Compiling traitobject v0.0.1
   Compiling gcc v0.3.28
   Compiling pkg-config v0.3.8
   Compiling matches v0.1.2
   Compiling rustc-serialize v0.3.19
   Compiling httparse v0.1.6
   Compiling winapi v0.2.7
   Compiling unicase v0.1.0
   Compiling bitflags v0.3.3
   Compiling libc v0.2.11
   Compiling lazy_static v0.1.16
   Compiling log v0.3.6
   Compiling winapi-build v0.1.1
   Compiling typeable v0.1.2
   Compiling kernel32-sys v0.2.2
   Compiling libc v0.1.12
   Compiling mime v0.0.11
   Compiling openssl-sys v0.6.7
   Compiling rand v0.3.14
   Compiling time v0.1.35
   Compiling num_cpus v0.2.12
   Compiling openssl v0.6.7
   Compiling uuid v0.1.18
   Compiling url v0.2.38
   Compiling cookie v0.1.21
   Compiling hyper v0.5.0 (file:///root/benchmarks/hyper.0.5.0)
time: 0.041; rss: 53MB	parsing
Lines of code:             9154
Pre-expansion node count:  45851
time: 0.009; rss: 54MB	configuration 1
time: 0.000; rss: 54MB	recursion limit
time: 0.000; rss: 54MB	crate injection
time: 0.027; rss: 89MB	macro loading
time: 0.000; rss: 89MB	plugin loading
time: 0.000; rss: 89MB	plugin registration
time: 0.200; rss: 98MB	expansion
time: 0.030; rss: 98MB	configuration 2
time: 0.000; rss: 98MB	gated configuration checking
time: 0.011; rss: 98MB	maybe building test harness
time: 0.008; rss: 98MB	prelude injection
time: 0.001; rss: 98MB	checking that all macro invocations are gone
time: 0.000; rss: 98MB	checking for inline asm in case the target doesn't support it
time: 0.002; rss: 98MB	complete gated feature checking
Post-expansion node count: 103616
time: 0.008; rss: 98MB	assigning node ids
time: 0.005; rss: 100MB	collecting defs
time: 0.011; rss: 111MB	external crate/lib resolution
time: 0.006; rss: 111MB	early lint checks
time: 0.030; rss: 115MB	name resolution
time: 0.023; rss: 121MB	lowering ast -> hir
time: 0.002; rss: 121MB	indexing hir
time: 0.002; rss: 121MB	attribute checking
time: 0.001; rss: 114MB	language item collection
time: 0.002; rss: 114MB	lifetime resolution
time: 0.000; rss: 114MB	looking for entry point
time: 0.000; rss: 114MB	looking for plugin registrar
time: 0.013; rss: 117MB	region resolution
time: 0.001; rss: 117MB	loop checking
time: 0.001; rss: 117MB	static item recursion checking
time: 0.000; rss: 117MB	load_dep_graph
time: 0.019; rss: 120MB	type collecting
time: 0.000; rss: 120MB	variance inference
time: 0.049; rss: 126MB	coherence checking
time: 0.089; rss: 127MB	wf checking
time: 0.034; rss: 127MB	item-types checking
time: 0.518; rss: 136MB	item-bodies checking
time: 0.000; rss: 136MB	drop-impl checking
time: 0.048; rss: 137MB	const checking
time: 0.010; rss: 137MB	privacy checking
time: 0.001; rss: 137MB	stability index
time: 0.006; rss: 137MB	intrinsic checking
time: 0.002; rss: 137MB	effect checking
time: 0.014; rss: 137MB	match checking
time: 0.005; rss: 137MB	liveness checking
time: 0.031; rss: 137MB	rvalue checking
time: 0.074; rss: 146MB	MIR dump
time: 0.040; rss: 147MB	MIR passes
time: 0.073; rss: 147MB	borrow checking
time: 0.003; rss: 147MB	reachability checking
time: 0.006; rss: 147MB	death checking
time: 0.006; rss: 148MB	stability checking
time: 0.000; rss: 148MB	unused lib feature checking
time: 0.051; rss: 148MB	lint checking
time: 0.000; rss: 148MB	resolving dependency formats
time: 0.016; rss: 149MB	Prepare MIR codegen passes
  time: 0.294; rss: 157MB	translation item collection
  time: 0.010; rss: 158MB	codegen unit partitioning
  time: 0.139; rss: 281MB	write metadata
time: 2.036; rss: 282MB	translation
time: 0.001; rss: 282MB	assert dep graph
time: 0.000; rss: 282MB	serialize dep graph
  time: 0.099; rss: 174MB	llvm function passes [0]
  time: 0.052; rss: 177MB	llvm module passes [0]
  time: 1.623; rss: 180MB	codegen passes [0]
  time: 0.001; rss: 132MB	codegen passes [0]
time: 1.987; rss: 132MB	LLVM passes
time: 0.179; rss: 130MB	linking
done
