commit 0667ae93fb72eb25594258e55de9b4ae8f9f02a8
Merge: 30422de 20b9129
Author: bors <bors@rust-lang.org>
Date:   Tue May 17 13:11:57 2016 -0700

    Auto merge of #33665 - golddranks:thread-park-add-big-picture-explanation, r=aturon
    
    Added a big-picture explanation for thread::park() & co.
    
    As I said in https://www.reddit.com/r/rust/comments/4ihvv1/hey_rust_programmers_got_a_question_ask_here/d372s4i, the current explanation of the `park()` and `unpark()` is a bit unclear. It says that they're used for blocking, but then it goes on explaining the semantics in detail, leaving the bigger picture a bit unclear.
    
    I added a short high-level explanation that explains how the functions are used. I also exposed the full paths (`thread::park()` and `thread::Thread::unpark()`), because `unpark()`, being a method, is not directly visible at the module level.
rustc: ./hyper.0.5.0
cargo rustc -- -Ztime-passes -Zinput-stats
    Updating registry `https://github.com/rust-lang/crates.io-index`
   Compiling rustc-serialize v0.3.19
   Compiling typeable v0.1.2
   Compiling bitflags v0.3.3
   Compiling pkg-config v0.3.8
   Compiling log v0.3.6
   Compiling unicase v0.1.0
   Compiling lazy_static v0.1.16
   Compiling winapi v0.2.7
   Compiling matches v0.1.2
   Compiling httparse v0.1.6
   Compiling winapi-build v0.1.1
   Compiling libc v0.1.12
   Compiling libc v0.2.11
   Compiling kernel32-sys v0.2.2
   Compiling mime v0.0.11
   Compiling traitobject v0.0.1
   Compiling gcc v0.3.28
   Compiling num_cpus v0.2.12
   Compiling rand v0.3.14
   Compiling time v0.1.35
   Compiling openssl-sys v0.6.7
   Compiling openssl v0.6.7
   Compiling uuid v0.1.18
   Compiling url v0.2.38
   Compiling cookie v0.1.21
   Compiling hyper v0.5.0 (file:///root/benchmarks/hyper.0.5.0)
time: 0.031; rss: 52MB	parsing
Lines of code:             9154
Pre-expansion node count:  45851
time: 0.008; rss: 57MB	configuration 1
time: 0.000; rss: 57MB	recursion limit
time: 0.000; rss: 57MB	crate injection
time: 0.005; rss: 61MB	macro loading
time: 0.000; rss: 61MB	plugin loading
time: 0.000; rss: 61MB	plugin registration
time: 0.187; rss: 70MB	expansion
time: 0.029; rss: 70MB	configuration 2
time: 0.000; rss: 70MB	gated configuration checking
time: 0.010; rss: 70MB	maybe building test harness
time: 0.008; rss: 70MB	prelude injection
time: 0.001; rss: 70MB	checking that all macro invocations are gone
time: 0.000; rss: 70MB	checking for inline asm in case the target doesn't support it
time: 0.002; rss: 70MB	complete gated feature checking
Post-expansion node count: 103616
time: 0.008; rss: 70MB	assigning node ids
time: 0.003; rss: 72MB	collecting defs
time: 0.005; rss: 76MB	external crate/lib resolution
time: 0.006; rss: 76MB	early lint checks
time: 0.024; rss: 92MB	name resolution
time: 0.010; rss: 98MB	lowering ast -> hir
time: 0.001; rss: 100MB	indexing hir
time: 0.001; rss: 100MB	attribute checking
time: 0.001; rss: 93MB	language item collection
time: 0.002; rss: 93MB	lifetime resolution
time: 0.000; rss: 93MB	looking for entry point
time: 0.000; rss: 93MB	looking for plugin registrar
time: 0.005; rss: 97MB	region resolution
time: 0.001; rss: 97MB	loop checking
time: 0.001; rss: 97MB	static item recursion checking
time: 0.000; rss: 97MB	load_dep_graph
time: 0.018; rss: 107MB	type collecting
time: 0.000; rss: 107MB	variance inference
time: 0.044; rss: 122MB	coherence checking
time: 0.093; rss: 123MB	wf checking
time: 0.035; rss: 123MB	item-types checking
time: 0.516; rss: 134MB	item-bodies checking
time: 0.000; rss: 134MB	drop-impl checking
time: 0.043; rss: 137MB	const checking
time: 0.007; rss: 137MB	privacy checking
time: 0.001; rss: 137MB	stability index
time: 0.006; rss: 137MB	intrinsic checking
time: 0.002; rss: 137MB	effect checking
time: 0.014; rss: 137MB	match checking
time: 0.005; rss: 137MB	liveness checking
time: 0.030; rss: 137MB	rvalue checking
time: 0.062; rss: 145MB	MIR dump
time: 0.040; rss: 145MB	MIR passes
time: 0.070; rss: 145MB	borrow checking
time: 0.003; rss: 145MB	reachability checking
time: 0.006; rss: 145MB	death checking
time: 0.006; rss: 145MB	stability checking
time: 0.000; rss: 145MB	unused lib feature checking
time: 0.050; rss: 145MB	lint checking
time: 0.000; rss: 145MB	resolving dependency formats
time: 0.012; rss: 145MB	Prepare MIR codegen passes
  time: 0.221; rss: 156MB	translation item collection
  time: 0.007; rss: 158MB	codegen unit partitioning
  time: 0.131; rss: 283MB	write metadata
time: 1.576; rss: 283MB	translation
time: 0.001; rss: 283MB	assert dep graph
time: 0.000; rss: 283MB	serialize dep graph
  time: 0.096; rss: 171MB	llvm function passes [0]
  time: 0.050; rss: 174MB	llvm module passes [0]
  time: 1.605; rss: 177MB	codegen passes [0]
  time: 0.013; rss: 128MB	codegen passes [0]
time: 1.964; rss: 127MB	LLVM passes
time: 0.174; rss: 125MB	linking
done
