commit 6572a463116a31efba8bfddb2e64ed659311b8a1
Merge: 6dc035e ee338c3
Author: bors <bors@rust-lang.org>
Date:   Sun Oct 16 04:22:21 2016 -0700

    Auto merge of #37129 - arielb1:erased-normal, r=eddyb
    
    normalize types every time HR regions are erased
    
    Associated type normalization is inhibited by higher-ranked regions.
    Therefore, every time we erase them, we must re-normalize.
    
    I was meaning to introduce this change some time ago, but we used
    to erase regions in generic context, which broke this terribly (because
    you can't always normalize in a generic context). That seems to be gone
    now.
    
    Ensure this by having a `erase_late_bound_regions_and_normalize`
    function.
    
    Fixes #37109 (the missing call was in mir::block).
    
    r? @eddyb
rustc: ./issue-32278-big-array-of-strings
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling issue-32278-big-array-of-strings v0.1.0 (file:///root/benchmarks/issue-32278-big-array-of-strings)
time: 0.183; rss: 60MB	parsing
Lines of code:             65577
Pre-expansion node count:  65552
time: 0.000; rss: 60MB	recursion limit
time: 0.000; rss: 60MB	crate injection
time: 0.000; rss: 60MB	plugin loading
time: 0.000; rss: 60MB	plugin registration
time: 0.029; rss: 84MB	expansion
time: 0.000; rss: 84MB	maybe building test harness
time: 0.001; rss: 84MB	maybe creating a macro crate
Post-expansion node count: 65565
time: 0.000; rss: 84MB	checking for inline asm in case the target doesn't support it
time: 0.001; rss: 84MB	complete gated feature checking
time: 0.004; rss: 84MB	early lint checks
time: 0.001; rss: 84MB	AST validation
time: 0.003; rss: 86MB	name resolution
time: 0.016; rss: 101MB	lowering ast -> hir
time: 0.005; rss: 104MB	indexing hir
time: 0.001; rss: 104MB	attribute checking
time: 0.001; rss: 91MB	language item collection
time: 0.001; rss: 91MB	lifetime resolution
time: 0.000; rss: 91MB	looking for entry point
time: 0.000; rss: 91MB	looking for plugin registrar
time: 0.017; rss: 96MB	region resolution
time: 0.001; rss: 96MB	loop checking
time: 0.001; rss: 96MB	static item recursion checking
time: 0.021; rss: 97MB	compute_incremental_hashes_map
time: 0.000; rss: 97MB	load_dep_graph
time: 0.000; rss: 97MB	type collecting
time: 0.000; rss: 97MB	variance inference
time: 0.005; rss: 98MB	coherence checking
time: 0.001; rss: 99MB	wf checking
time: 0.995; rss: 109MB	item-types checking
time: 0.000; rss: 109MB	item-bodies checking
time: 0.000; rss: 109MB	drop-impl checking
time: 0.024; rss: 111MB	const checking
time: 0.002; rss: 111MB	privacy checking
time: 0.001; rss: 111MB	stability index
time: 0.001; rss: 111MB	intrinsic checking
time: 0.001; rss: 111MB	effect checking
time: 0.001; rss: 111MB	match checking
time: 0.001; rss: 111MB	liveness checking
time: 0.001; rss: 111MB	rvalue checking
time: 0.044; rss: 116MB	MIR dump
  time: 0.000; rss: 116MB	SimplifyCfg
  time: 0.001; rss: 116MB	QualifyAndPromoteConstants
  time: 0.001; rss: 116MB	TypeckMir
  time: 0.000; rss: 116MB	SimplifyBranches
  time: 0.000; rss: 116MB	SimplifyCfg
time: 0.002; rss: 116MB	MIR passes
time: 0.001; rss: 116MB	borrow checking
time: 0.000; rss: 116MB	reachability checking
time: 0.001; rss: 116MB	death checking
time: 0.001; rss: 116MB	stability checking
time: 0.000; rss: 116MB	unused lib feature checking
time: 0.025; rss: 116MB	lint checking
time: 0.001; rss: 116MB	resolving dependency formats
  time: 0.000; rss: 116MB	NoLandingPads
  time: 0.000; rss: 116MB	SimplifyCfg
  time: 0.001; rss: 116MB	EraseRegions
  time: 0.000; rss: 116MB	AddCallGuards
  time: 0.000; rss: 116MB	ElaborateDrops
  time: 0.000; rss: 116MB	NoLandingPads
  time: 0.000; rss: 116MB	SimplifyCfg
  time: 0.000; rss: 116MB	InstCombine
  time: 0.000; rss: 116MB	Deaggregator
  time: 0.000; rss: 116MB	CopyPropagation
  time: 0.000; rss: 116MB	AddCallGuards
  time: 0.000; rss: 116MB	PreTrans
time: 0.001; rss: 116MB	Prepare MIR codegen passes
  time: 0.000; rss: 117MB	write metadata
  time: 0.001; rss: 117MB	translation item collection
  time: 0.000; rss: 117MB	codegen unit partitioning
  time: 0.001; rss: 126MB	internalize symbols
time: 0.058; rss: 125MB	translation
time: 0.000; rss: 125MB	assert dep graph
time: 0.000; rss: 125MB	serialize dep graph
  time: 0.009; rss: 85MB	llvm function passes [0]
  time: 0.000; rss: 85MB	llvm module passes [0]
  time: 0.184; rss: 85MB	codegen passes [0]
  time: 0.000; rss: 85MB	codegen passes [0]
time: 0.194; rss: 85MB	LLVM passes
time: 0.000; rss: 85MB	serialize work products
  time: 0.165; rss: 75MB	running linker
time: 0.166; rss: 75MB	linking
done
