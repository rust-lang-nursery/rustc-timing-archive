commit 8b00355119ba0473eae420049f96f5be91be1bab
Merge: bba3fca afa72b5
Author: bors <bors@rust-lang.org>
Date:   Fri Sep 30 19:00:36 2016 -0700

    Auto merge of #36339 - brson:emscripten-new, r=alexcrichton
    
    Working asmjs and wasm targets
    
    This patch set results in a working standard library for the asmjs-unknown-emscripten and wasm32-unknown-emscripten targets. It is based on the work of @badboy and @rschulman.
    
    It does a few things:
    
    - Updates LLVM with the emscripten [fastcomp](https://github.com/rust-lang/llvm/pull/50) patches, which include the pnacl IR legalizer and the asm.js backend. This patch is thought not to have any significant effect on existing targets.
    - Teaches rustbuild to correctly link C code with emscripten
    - Updates gcc-rs to work correctly with emscripten
    - Teaches rustbuild to run crate tests for emscripten with node
    - Modifies Thread::new to return an error on emscripten, to facilitate debugging a common failure mode
    - Modifies libtest to run in single-threaded mode for emscripten
    - Ignores a host of tests that don't work yet, mostly dealing with threads and I/O
    - Updates libc with wasm32 definitions (presently the same as asmjs)
    - Adds a wasm32-unknown-emscripten target that feeds the output of LLVM's asmjs backend through emcc to generate wasm
    
    Notes and caveats:
    
    - This is only known to work with `--enable-rustbuild`.
    - The wasm32 target can't be tested correctly yet because of issues in compiletest and limitations in node https://github.com/kripken/emscripten/issues/4542, but hello.rs does seem to work when run on node via the binaryen interpreter
    - This requires an up to date installation of the emscripten sdk from its incoming branch
    - Unwinding is very broken
    - When enabling the emscripten targets jemalloc is disabled for all targets, which results in test failures for the host
    
    Next steps are to fix the jemalloc issue, start building the two emscripten targets on the auto builders, then start producing nightlies.
    
    https://github.com/rust-lang/rust/issues/36317 tracks work on this.
    
    Fixes https://github.com/rust-lang/rust/issues/36515
    Fixes https://github.com/rust-lang/rust/issues/36515
    Fixes https://github.com/rust-lang/rust/issues/36356
rustc: ./piston-image-0.10.3
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling image v0.10.3 (file:///root/benchmarks/piston-image-0.10.3)
time: 0.043; rss: 57MB	parsing
Lines of code:             12000
Pre-expansion node count:  90272
time: 0.000; rss: 57MB	recursion limit
time: 0.000; rss: 57MB	crate injection
time: 0.000; rss: 57MB	plugin loading
time: 0.000; rss: 57MB	plugin registration
time: 0.077; rss: 95MB	expansion
time: 0.000; rss: 95MB	maybe building test harness
time: 0.002; rss: 95MB	maybe creating a macro crate
Post-expansion node count: 148999
time: 0.000; rss: 95MB	checking for inline asm in case the target doesn't support it
time: 0.002; rss: 95MB	complete gated feature checking
time: 0.005; rss: 95MB	early lint checks
time: 0.001; rss: 95MB	AST validation
time: 0.021; rss: 97MB	name resolution
time: 0.013; rss: 110MB	lowering ast -> hir
time: 0.003; rss: 114MB	indexing hir
time: 0.002; rss: 114MB	attribute checking
time: 0.002; rss: 103MB	language item collection
time: 0.003; rss: 103MB	lifetime resolution
time: 0.000; rss: 103MB	looking for entry point
time: 0.000; rss: 103MB	looking for plugin registrar
time: 0.011; rss: 108MB	region resolution
time: 0.002; rss: 108MB	loop checking
time: 0.001; rss: 108MB	static item recursion checking
time: 0.057; rss: 108MB	compute_incremental_hashes_map
time: 0.000; rss: 108MB	load_dep_graph
time: 0.025; rss: 109MB	type collecting
time: 0.000; rss: 109MB	variance inference
time: 0.030; rss: 113MB	coherence checking
time: 0.092; rss: 114MB	wf checking
time: 0.147; rss: 118MB	item-types checking
time: 0.900; rss: 133MB	item-bodies checking
time: 0.000; rss: 133MB	drop-impl checking
time: 0.066; rss: 135MB	const checking
time: 0.012; rss: 135MB	privacy checking
time: 0.001; rss: 135MB	stability index
time: 0.008; rss: 135MB	intrinsic checking
time: 0.003; rss: 135MB	effect checking
time: 0.017; rss: 135MB	match checking
time: 0.011; rss: 135MB	liveness checking
time: 0.059; rss: 135MB	rvalue checking
time: 0.102; rss: 176MB	MIR dump
  time: 0.011; rss: 176MB	SimplifyCfg
  time: 0.024; rss: 176MB	QualifyAndPromoteConstants
  time: 0.024; rss: 176MB	TypeckMir
  time: 0.001; rss: 176MB	SimplifyBranches
  time: 0.007; rss: 176MB	SimplifyCfg
time: 0.067; rss: 176MB	MIR passes
time: 0.142; rss: 176MB	borrow checking
time: 0.004; rss: 176MB	reachability checking
time: 0.009; rss: 176MB	death checking
time: 0.010; rss: 178MB	stability checking
time: 0.000; rss: 178MB	unused lib feature checking
time: 0.072; rss: 178MB	lint checking
time: 0.000; rss: 178MB	resolving dependency formats
  time: 0.001; rss: 178MB	NoLandingPads
  time: 0.005; rss: 178MB	SimplifyCfg
  time: 0.012; rss: 178MB	EraseRegions
  time: 0.002; rss: 178MB	AddCallGuards
  time: 0.092; rss: 182MB	ElaborateDrops
  time: 0.001; rss: 182MB	NoLandingPads
  time: 0.009; rss: 182MB	SimplifyCfg
  time: 0.006; rss: 182MB	InstCombine
  time: 0.002; rss: 182MB	Deaggregator
  time: 0.000; rss: 182MB	CopyPropagation
  time: 0.002; rss: 182MB	AddCallGuards
  time: 0.000; rss: 182MB	PreTrans
time: 0.131; rss: 182MB	Prepare MIR codegen passes
  time: 0.073; rss: 184MB	write metadata
  time: 0.579; rss: 197MB	translation item collection
  time: 0.031; rss: 199MB	codegen unit partitioning
  time: 0.028; rss: 319MB	internalize symbols
time: 3.216; rss: 291MB	translation
time: 0.000; rss: 291MB	assert dep graph
time: 0.000; rss: 291MB	serialize dep graph
  time: 0.207; rss: 220MB	llvm function passes [0]
  time: 0.083; rss: 224MB	llvm module passes [0]
  time: 4.147; rss: 228MB	codegen passes [0]
  time: 0.001; rss: 229MB	codegen passes [0]
time: 4.733; rss: 229MB	LLVM passes
time: 0.000; rss: 229MB	serialize work products
time: 0.264; rss: 100MB	linking
done
