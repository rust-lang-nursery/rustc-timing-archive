commit 8289a8916f9cf7d290a98121a75cee840faa9d0f
Merge: 7bef60a cf9ff2b
Author: bors <bors@rust-lang.org>
Date:   Mon Nov 14 02:46:12 2016 -0800

    Auto merge of #37278 - matklad:lone-lifetime, r=jseyfried
    
    Fix syntax error in the compiler
    
    Currently `rustc` accepts the following code: `fn f<'a>() where 'a {}`. This should be a syntax error, shouldn't it?
    
    Not sure if my changes actually compile, waiting for the LLVM to build.
rustc: ./syntex-0.42.2-incr-clean
RUSTFLAGS="-Z incremental=incr" \
    cargo rustc -p syntex_syntax  -- \
    -Ztime-passes -Zinput-stats -Z incremental-info
   Compiling syntex_syntax v0.42.0
time: 0.093; rss: 70MB	parsing
Lines of code:             33687
Pre-expansion node count:  223115
time: 0.000; rss: 70MB	recursion limit
time: 0.000; rss: 70MB	crate injection
time: 0.000; rss: 70MB	plugin loading
time: 0.000; rss: 70MB	plugin registration
time: 0.233; rss: 143MB	expansion
time: 0.000; rss: 143MB	maybe building test harness
time: 0.006; rss: 143MB	maybe creating a macro crate
Post-expansion node count: 638863
time: 0.000; rss: 143MB	checking for inline asm in case the target doesn't support it
time: 0.013; rss: 143MB	complete gated feature checking
time: 0.023; rss: 143MB	early lint checks
time: 0.007; rss: 143MB	AST validation
time: 0.076; rss: 158MB	name resolution
time: 0.044; rss: 183MB	lowering ast -> hir
time: 0.008; rss: 194MB	indexing hir
time: 0.006; rss: 194MB	attribute checking
time: 0.005; rss: 151MB	language item collection
time: 0.010; rss: 151MB	lifetime resolution
time: 0.000; rss: 151MB	looking for entry point
time: 0.000; rss: 151MB	looking for plugin registrar
time: 0.041; rss: 171MB	region resolution
time: 0.005; rss: 171MB	loop checking
time: 0.005; rss: 171MB	static item recursion checking
time: 0.326; rss: 172MB	compute_incremental_hashes_map
time: 0.000; rss: 172MB	load_dep_graph
time: 0.049; rss: 171MB	type collecting
time: 0.001; rss: 171MB	variance inference
time: 0.018; rss: 174MB	coherence checking
time: 0.092; rss: 178MB	wf checking
time: 0.180; rss: 184MB	item-types checking
time: 3.308; rss: 233MB	item-bodies checking
time: 0.000; rss: 233MB	drop-impl checking
time: 0.214; rss: 253MB	const checking
time: 0.046; rss: 253MB	privacy checking
time: 0.006; rss: 253MB	stability index
time: 0.018; rss: 253MB	intrinsic checking
time: 0.014; rss: 253MB	effect checking
time: 0.047; rss: 253MB	match checking
time: 0.051; rss: 250MB	liveness checking
time: 0.179; rss: 250MB	rvalue checking
time: 0.374; rss: 437MB	MIR dump
  time: 0.056; rss: 439MB	SimplifyCfg
  time: 0.072; rss: 439MB	QualifyAndPromoteConstants
  time: 0.097; rss: 439MB	TypeckMir
  time: 0.004; rss: 439MB	SimplifyBranches
  time: 0.030; rss: 439MB	SimplifyCfg
time: 0.261; rss: 439MB	MIR cleanup and validation
time: 0.476; rss: 439MB	borrow checking
time: 0.020; rss: 439MB	reachability checking
time: 0.040; rss: 439MB	death checking
time: 0.032; rss: 441MB	stability checking
time: 0.000; rss: 441MB	unused lib feature checking
time: 0.194; rss: 441MB	lint checking
time: 0.000; rss: 441MB	resolving dependency formats
  time: 0.003; rss: 441MB	NoLandingPads
  time: 0.026; rss: 441MB	SimplifyCfg
  time: 0.060; rss: 448MB	EraseRegions
  time: 0.011; rss: 448MB	AddCallGuards
  time: 0.266; rss: 464MB	ElaborateDrops
  time: 0.003; rss: 464MB	NoLandingPads
  time: 0.052; rss: 464MB	SimplifyCfg
  time: 0.028; rss: 464MB	InstCombine
  time: 0.012; rss: 464MB	Deaggregator
  time: 0.002; rss: 464MB	CopyPropagation
  time: 0.034; rss: 465MB	SimplifyLocals
  time: 0.010; rss: 465MB	AddCallGuards
  time: 0.003; rss: 465MB	PreTrans
time: 0.512; rss: 465MB	MIR optimisations
  time: 0.061; rss: 475MB	write metadata
  time: 0.385; rss: 491MB	translation item collection
  time: 0.065; rss: 497MB	codegen unit partitioning
  time: 0.047; rss: 739MB	internalize symbols
time: 4.379; rss: 739MB	translation
time: 0.000; rss: 739MB	assert dep graph
time: 0.000; rss: 739MB	serialize dep graph
incremental: re-using 0 out of 1 modules
  time: 0.520; rss: 421MB	llvm function passes [0]
  time: 0.259; rss: 427MB	llvm module passes [0]
  time: 10.322; rss: 420MB	codegen passes [0]
  time: 0.000; rss: 420MB	codegen passes [0]
time: 11.858; rss: 420MB	LLVM passes
time: 0.000; rss: 420MB	serialize work products
time: 0.344; rss: 105MB	linking
done
