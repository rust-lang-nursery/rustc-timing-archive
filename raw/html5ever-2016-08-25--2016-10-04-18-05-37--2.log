commit 1a4192804518199623fb88bf43bde69d6b0203cb
Merge: a5dac7a 4625642
Author: bors <bors@rust-lang.org>
Date:   Tue Oct 4 13:23:09 2016 -0700

    Auto merge of #36933 - alexcrichton:less-neon-again, r=eddyb
    
    rustc: Try again to disable NEON on armv7 linux
    
    This is a follow-up to #35814 which apparently didn't disable it hard enough. It
    looks like LLVM's default armv7 target enables NEON so we'd otherwise have to
    pass `-neon`, but we're already enabling armv7 with `+v7` supposedly, so let's
    try just telling LLVM that the armv7 target is arm and then enable features
    selectively.
    
    Closes #36913
rustc: ./html5ever-2016-08-25
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling html5ever v0.5.4 (file:///root/benchmarks/html5ever-2016-08-25)
time: 0.027; rss: 51MB	parsing
Lines of code:             8210
Pre-expansion node count:  52238
time: 0.000; rss: 51MB	recursion limit
time: 0.000; rss: 51MB	crate injection
time: 0.000; rss: 51MB	plugin loading
time: 0.000; rss: 51MB	plugin registration
time: 1.258; rss: 103MB	expansion
time: 0.000; rss: 103MB	maybe building test harness
time: 0.002; rss: 103MB	maybe creating a macro crate
Post-expansion node count: 163524
time: 0.000; rss: 103MB	checking for inline asm in case the target doesn't support it
time: 0.003; rss: 103MB	complete gated feature checking
time: 0.009; rss: 103MB	early lint checks
time: 0.002; rss: 103MB	AST validation
time: 0.018; rss: 108MB	name resolution
time: 0.016; rss: 123MB	lowering ast -> hir
time: 0.003; rss: 127MB	indexing hir
time: 0.002; rss: 127MB	attribute checking
time: 0.002; rss: 105MB	language item collection
time: 0.003; rss: 105MB	lifetime resolution
time: 0.000; rss: 105MB	looking for entry point
time: 0.000; rss: 105MB	looking for plugin registrar
time: 0.017; rss: 111MB	region resolution
time: 0.002; rss: 111MB	loop checking
time: 0.003; rss: 111MB	static item recursion checking
time: 0.023; rss: 111MB	compute_incremental_hashes_map
time: 0.000; rss: 111MB	load_dep_graph
time: 0.014; rss: 112MB	type collecting
time: 0.000; rss: 112MB	variance inference
time: 0.026; rss: 115MB	coherence checking
time: 0.025; rss: 115MB	wf checking
time: 0.345; rss: 123MB	item-types checking
time: 0.507; rss: 138MB	item-bodies checking
time: 0.000; rss: 138MB	drop-impl checking
time: 0.072; rss: 140MB	const checking
time: 0.009; rss: 140MB	privacy checking
time: 0.002; rss: 140MB	stability index
time: 0.004; rss: 140MB	intrinsic checking
time: 0.004; rss: 140MB	effect checking
time: 0.024; rss: 140MB	match checking
time: 0.014; rss: 134MB	liveness checking
time: 0.029; rss: 134MB	rvalue checking
time: 0.117; rss: 182MB	MIR dump
  time: 0.009; rss: 182MB	SimplifyCfg
  time: 0.015; rss: 182MB	QualifyAndPromoteConstants
  time: 0.024; rss: 182MB	TypeckMir
  time: 0.000; rss: 182MB	SimplifyBranches
  time: 0.005; rss: 182MB	SimplifyCfg
time: 0.054; rss: 182MB	MIR passes
time: 0.096; rss: 183MB	borrow checking
time: 0.003; rss: 183MB	reachability checking
time: 0.007; rss: 183MB	death checking
time: 0.009; rss: 183MB	stability checking
time: 0.000; rss: 183MB	unused lib feature checking
time: 0.064; rss: 183MB	lint checking
time: 0.000; rss: 183MB	resolving dependency formats
  time: 0.000; rss: 183MB	NoLandingPads
  time: 0.004; rss: 183MB	SimplifyCfg
  time: 0.010; rss: 183MB	EraseRegions
  time: 0.001; rss: 183MB	AddCallGuards
  time: 0.076; rss: 189MB	ElaborateDrops
  time: 0.000; rss: 189MB	NoLandingPads
  time: 0.007; rss: 189MB	SimplifyCfg
  time: 0.008; rss: 187MB	InstCombine
  time: 0.001; rss: 187MB	Deaggregator
  time: 0.000; rss: 187MB	CopyPropagation
  time: 0.001; rss: 187MB	AddCallGuards
  time: 0.000; rss: 187MB	PreTrans
time: 0.109; rss: 187MB	Prepare MIR codegen passes
  time: 0.052; rss: 187MB	write metadata
  time: 0.052; rss: 189MB	translation item collection
  time: 0.006; rss: 189MB	codegen unit partitioning
  time: 0.006; rss: 203MB	internalize symbols
time: 0.366; rss: 172MB	translation
time: 0.000; rss: 172MB	assert dep graph
time: 0.000; rss: 172MB	serialize dep graph
  time: 0.021; rss: 102MB	llvm function passes [0]
  time: 0.012; rss: 104MB	llvm module passes [0]
  time: 0.470; rss: 110MB	codegen passes [0]
  time: 0.001; rss: 110MB	codegen passes [0]
time: 0.543; rss: 110MB	LLVM passes
time: 0.000; rss: 110MB	serialize work products
time: 0.058; rss: 92MB	linking
done
