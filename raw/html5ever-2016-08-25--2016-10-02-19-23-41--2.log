commit 1cdc0fb11af12c04fb4b1984615f03b11a60decc
Merge: 8991ffc 9482bce
Author: bors <bors@rust-lang.org>
Date:   Sun Oct 2 14:13:27 2016 -0700

    Auto merge of #36904 - camlorn:field_offsets_refactor, r=eddyb
    
    Refactor layout to store offsets of fields, not offsets after fields
    
    This is the next PR moving us towards being able to reorder struct fields.
    
    The old code implicitly stored the offset of the first field.  This is inadequate because the first field may no longer be offset 0 in future.  This PR refactors `layout` to use a `offsets` vector instead of a `offset_after_field` vector.
rustc: ./html5ever-2016-08-25
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling html5ever v0.5.4 (file:///root/benchmarks/html5ever-2016-08-25)
time: 0.027; rss: 52MB	parsing
Lines of code:             8210
Pre-expansion node count:  52238
time: 0.000; rss: 52MB	recursion limit
time: 0.000; rss: 52MB	crate injection
time: 0.000; rss: 52MB	plugin loading
time: 0.000; rss: 52MB	plugin registration
time: 1.293; rss: 106MB	expansion
time: 0.000; rss: 106MB	maybe building test harness
time: 0.002; rss: 106MB	maybe creating a macro crate
Post-expansion node count: 163524
time: 0.000; rss: 106MB	checking for inline asm in case the target doesn't support it
time: 0.003; rss: 106MB	complete gated feature checking
time: 0.009; rss: 106MB	early lint checks
time: 0.002; rss: 106MB	AST validation
time: 0.018; rss: 108MB	name resolution
time: 0.016; rss: 123MB	lowering ast -> hir
time: 0.003; rss: 128MB	indexing hir
time: 0.002; rss: 128MB	attribute checking
time: 0.002; rss: 105MB	language item collection
time: 0.003; rss: 105MB	lifetime resolution
time: 0.000; rss: 105MB	looking for entry point
time: 0.000; rss: 105MB	looking for plugin registrar
time: 0.016; rss: 111MB	region resolution
time: 0.002; rss: 111MB	loop checking
time: 0.003; rss: 111MB	static item recursion checking
time: 0.023; rss: 112MB	compute_incremental_hashes_map
time: 0.000; rss: 112MB	load_dep_graph
time: 0.014; rss: 112MB	type collecting
time: 0.000; rss: 112MB	variance inference
time: 0.026; rss: 115MB	coherence checking
time: 0.024; rss: 116MB	wf checking
time: 0.353; rss: 123MB	item-types checking
time: 0.502; rss: 137MB	item-bodies checking
time: 0.000; rss: 137MB	drop-impl checking
time: 0.072; rss: 141MB	const checking
time: 0.008; rss: 141MB	privacy checking
time: 0.002; rss: 141MB	stability index
time: 0.004; rss: 141MB	intrinsic checking
time: 0.003; rss: 141MB	effect checking
time: 0.024; rss: 141MB	match checking
time: 0.013; rss: 135MB	liveness checking
time: 0.029; rss: 135MB	rvalue checking
time: 0.116; rss: 187MB	MIR dump
  time: 0.009; rss: 175MB	SimplifyCfg
  time: 0.015; rss: 177MB	QualifyAndPromoteConstants
  time: 0.024; rss: 177MB	TypeckMir
  time: 0.000; rss: 177MB	SimplifyBranches
  time: 0.005; rss: 177MB	SimplifyCfg
time: 0.053; rss: 177MB	MIR passes
time: 0.094; rss: 185MB	borrow checking
time: 0.003; rss: 185MB	reachability checking
time: 0.007; rss: 185MB	death checking
time: 0.008; rss: 185MB	stability checking
time: 0.000; rss: 185MB	unused lib feature checking
time: 0.066; rss: 185MB	lint checking
time: 0.000; rss: 185MB	resolving dependency formats
  time: 0.000; rss: 185MB	NoLandingPads
  time: 0.004; rss: 185MB	SimplifyCfg
  time: 0.010; rss: 185MB	EraseRegions
  time: 0.001; rss: 185MB	AddCallGuards
  time: 0.076; rss: 190MB	ElaborateDrops
  time: 0.000; rss: 190MB	NoLandingPads
  time: 0.006; rss: 189MB	SimplifyCfg
  time: 0.008; rss: 187MB	InstCombine
  time: 0.001; rss: 187MB	Deaggregator
  time: 0.000; rss: 187MB	CopyPropagation
  time: 0.001; rss: 187MB	AddCallGuards
  time: 0.000; rss: 187MB	PreTrans
time: 0.109; rss: 187MB	Prepare MIR codegen passes
  time: 0.052; rss: 187MB	write metadata
  time: 0.052; rss: 189MB	translation item collection
  time: 0.006; rss: 189MB	codegen unit partitioning
  time: 0.006; rss: 203MB	internalize symbols
time: 0.361; rss: 173MB	translation
time: 0.000; rss: 173MB	assert dep graph
time: 0.000; rss: 173MB	serialize dep graph
  time: 0.021; rss: 104MB	llvm function passes [0]
  time: 0.012; rss: 105MB	llvm module passes [0]
  time: 0.471; rss: 110MB	codegen passes [0]
  time: 0.001; rss: 110MB	codegen passes [0]
time: 0.544; rss: 110MB	LLVM passes
time: 0.000; rss: 110MB	serialize work products
time: 0.058; rss: 92MB	linking
done
