commit 75df685d28947ea7d2422a24f14aa1254da1aeb4
Merge: f374565 607d297
Author: bors <bors@rust-lang.org>
Date:   Mon Oct 3 04:25:58 2016 -0700

    Auto merge of #36766 - nnethercote:hash-span-capacity, r=bluss
    
    Clarify HashMap's capacity handling.
    
    HashMap has two notions of "capacity":
    
    - "Usable capacity": the number of elements a hash map can hold without
      resizing. This is the meaning of "capacity" used in HashMap's API,
      e.g. the `with_capacity()` function.
    
    - "Internal capacity": the number of allocated slots. Except for the
      zero case, it is always larger than the usable capacity (because some
      slots must be left empty) and is always a power of two.
    
    HashMap's code is confusing because it does a poor job of
    distinguishing these two meanings. I propose using two different terms
    for these two concepts. Because "capacity" is already used in HashMap's
    API to mean "usable capacity", I will use a different word for "internal
    capacity". I propose "span", though I'm happy to consider other names.
rustc: ./hyper.0.5.0
cargo rustc -- -Ztime-passes -Zinput-stats
    Updating registry `https://github.com/rust-lang/crates.io-index`
   Compiling traitobject v0.0.1
   Compiling pkg-config v0.3.8
   Compiling gcc v0.3.35
   Compiling rustc-serialize v0.3.19
   Compiling libc v0.1.12
   Compiling winapi v0.2.8
   Compiling bitflags v0.3.3
   Compiling matches v0.1.2
   Compiling httparse v0.1.6
   Compiling lazy_static v0.1.16
   Compiling unicase v0.1.0
   Compiling libc v0.2.16
   Compiling log v0.3.6
   Compiling winapi-build v0.1.1
   Compiling typeable v0.1.2
   Compiling mime v0.0.11
   Compiling kernel32-sys v0.2.2
   Compiling rand v0.3.14
   Compiling num_cpus v0.2.13
   Compiling time v0.1.35
   Compiling openssl-sys v0.6.7
   Compiling openssl v0.6.7
   Compiling uuid v0.1.18
   Compiling url v0.2.38
   Compiling cookie v0.1.21
   Compiling hyper v0.5.0 (file:///root/benchmarks/hyper.0.5.0)
time: 0.036; rss: 45MB	parsing
Lines of code:             9003
Pre-expansion node count:  44129
time: 0.000; rss: 46MB	recursion limit
time: 0.000; rss: 46MB	crate injection
time: 0.000; rss: 46MB	plugin loading
time: 0.000; rss: 46MB	plugin registration
time: 0.117; rss: 81MB	expansion
time: 0.000; rss: 81MB	maybe building test harness
time: 0.001; rss: 81MB	maybe creating a macro crate
Post-expansion node count: 101371
time: 0.000; rss: 81MB	checking for inline asm in case the target doesn't support it
time: 0.002; rss: 81MB	complete gated feature checking
time: 0.003; rss: 81MB	early lint checks
time: 0.001; rss: 81MB	AST validation
time: 0.023; rss: 85MB	name resolution
time: 0.016; rss: 91MB	lowering ast -> hir
time: 0.004; rss: 92MB	indexing hir
time: 0.001; rss: 92MB	attribute checking
time: 0.001; rss: 85MB	language item collection
time: 0.002; rss: 85MB	lifetime resolution
time: 0.000; rss: 85MB	looking for entry point
time: 0.000; rss: 85MB	looking for plugin registrar
time: 0.012; rss: 88MB	region resolution
time: 0.001; rss: 88MB	loop checking
time: 0.001; rss: 88MB	static item recursion checking
time: 0.041; rss: 88MB	compute_incremental_hashes_map
time: 0.000; rss: 88MB	load_dep_graph
time: 0.023; rss: 89MB	type collecting
time: 0.000; rss: 89MB	variance inference
time: 0.037; rss: 93MB	coherence checking
time: 0.050; rss: 94MB	wf checking
time: 0.021; rss: 95MB	item-types checking
time: 0.379; rss: 105MB	item-bodies checking
time: 0.000; rss: 105MB	drop-impl checking
time: 0.039; rss: 106MB	const checking
time: 0.008; rss: 106MB	privacy checking
time: 0.001; rss: 106MB	stability index
time: 0.004; rss: 106MB	intrinsic checking
time: 0.002; rss: 106MB	effect checking
time: 0.009; rss: 106MB	match checking
time: 0.005; rss: 106MB	liveness checking
time: 0.025; rss: 106MB	rvalue checking
time: 0.074; rss: 124MB	MIR dump
  time: 0.007; rss: 125MB	SimplifyCfg
  time: 0.013; rss: 125MB	QualifyAndPromoteConstants
  time: 0.013; rss: 125MB	TypeckMir
  time: 0.001; rss: 125MB	SimplifyBranches
  time: 0.004; rss: 125MB	SimplifyCfg
time: 0.038; rss: 125MB	MIR passes
time: 0.063; rss: 125MB	borrow checking
time: 0.003; rss: 125MB	reachability checking
time: 0.006; rss: 126MB	death checking
time: 0.006; rss: 126MB	stability checking
time: 0.000; rss: 126MB	unused lib feature checking
time: 0.041; rss: 126MB	lint checking
time: 0.000; rss: 126MB	resolving dependency formats
  time: 0.001; rss: 126MB	NoLandingPads
  time: 0.003; rss: 126MB	SimplifyCfg
  time: 0.011; rss: 126MB	EraseRegions
  time: 0.001; rss: 126MB	AddCallGuards
  time: 0.054; rss: 128MB	ElaborateDrops
  time: 0.001; rss: 128MB	NoLandingPads
  time: 0.005; rss: 128MB	SimplifyCfg
  time: 0.004; rss: 128MB	InstCombine
  time: 0.003; rss: 128MB	Deaggregator
  time: 0.001; rss: 128MB	CopyPropagation
  time: 0.001; rss: 128MB	AddCallGuards
  time: 0.000; rss: 128MB	PreTrans
time: 0.085; rss: 128MB	Prepare MIR codegen passes
  time: 0.050; rss: 132MB	write metadata
  time: 0.155; rss: 138MB	translation item collection
  time: 0.019; rss: 141MB	codegen unit partitioning
  time: 0.017; rss: 195MB	internalize symbols
time: 1.272; rss: 182MB	translation
time: 0.000; rss: 182MB	assert dep graph
time: 0.000; rss: 182MB	serialize dep graph
  time: 0.086; rss: 140MB	llvm function passes [0]
  time: 0.043; rss: 145MB	llvm module passes [0]
  time: 1.639; rss: 148MB	codegen passes [0]
  time: 0.001; rss: 148MB	codegen passes [0]
time: 1.944; rss: 148MB	LLVM passes
time: 0.000; rss: 148MB	serialize work products
time: 0.139; rss: 90MB	linking
done
