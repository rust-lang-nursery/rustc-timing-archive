commit 1586005a1d15e7d26b6c46a33e7a9643de9a77ac
Merge: 0672ed4 52883ab
Author: bors <bors@rust-lang.org>
Date:   Mon Jan 11 19:03:18 2016 +0000

    Auto merge of #30534 - bluss:binary-heap-fast-pop, r=Gankro
    
    BinaryHeap: Use full sift down in .pop()
    
    .sift_down can either choose to compare the element on the way down (and
    place it during descent), or to sift down an element fully, then sift
    back up to place it.
    
    A previous PR changed .sift_down() to the former behavior, which is much
    faster for relatively small heaps and for elements that are cheap to
    compare.
    
    A benchmarking run suggested that BinaryHeap::pop() suffers
    improportionally from this, and that it should use the second strategy
    instead. It's logical since .pop() brings last element from the
    heapified vector into index 0, it's very likely that this element will
    end up at the bottom again.
    
    Closes #29969
    Previous PR #29811
rustc: ./inflate-0.1.0
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling inflate v0.1.0 (file:///root/benchmarks/inflate-0.1.0)
time: 0.004; rss: 32MB	parsing
Lines of code:             956
Pre-expansion node count:  4761
time: 0.001; rss: 32MB	configuration 1
time: 0.000; rss: 32MB	recursion limit
time: 0.000; rss: 32MB	gated macro checking
time: 0.000; rss: 32MB	crate injection
time: 0.003; rss: 35MB	macro loading
time: 0.000; rss: 35MB	plugin loading
time: 0.000; rss: 35MB	plugin registration
time: 0.084; rss: 42MB	expansion
time: 0.001; rss: 42MB	complete gated feature checking 1
time: 0.009; rss: 42MB	configuration 2
time: 0.000; rss: 42MB	gated configuration checking
time: 0.005; rss: 42MB	maybe building test harness
time: 0.004; rss: 42MB	prelude injection
time: 0.000; rss: 42MB	checking that all macro invocations are gone
time: 0.000; rss: 42MB	checking for inline asm in case the target doesn't support it
time: 0.001; rss: 42MB	complete gated feature checking 2
Post-expansion node count: 54798
time: 0.004; rss: 42MB	assigning node ids
time: 0.008; rss: 46MB	lowering ast -> hir
time: 0.002; rss: 48MB	indexing hir
time: 0.000; rss: 48MB	attribute checking
time: 0.003; rss: 48MB	early lint checks
time: 0.001; rss: 46MB	external crate/lib resolution
time: 0.001; rss: 46MB	language item collection
time: 0.009; rss: 54MB	resolution
time: 0.001; rss: 54MB	lifetime resolution
time: 0.000; rss: 54MB	looking for entry point
time: 0.000; rss: 54MB	looking for plugin registrar
time: 0.003; rss: 54MB	region resolution
time: 0.000; rss: 54MB	loop checking
time: 0.000; rss: 54MB	static item recursion checking
time: 0.001; rss: 54MB	type collecting
time: 0.000; rss: 54MB	variance inference
time: 0.010; rss: 69MB	coherence checking
time: 0.002; rss: 69MB	wf checking
time: 0.002; rss: 69MB	item-types checking
time: 27.889; rss: 95MB	item-bodies checking
time: 0.000; rss: 95MB	drop-impl checking
time: 0.014; rss: 95MB	const checking
time: 0.002; rss: 95MB	privacy checking
time: 0.000; rss: 95MB	stability index
time: 0.000; rss: 95MB	intrinsic checking
time: 0.001; rss: 95MB	effect checking
time: 0.004; rss: 95MB	match checking
time: 0.025; rss: 100MB	MIR dump
time: 0.064; rss: 100MB	liveness checking
time: 0.208; rss: 102MB	borrow checking
time: 0.010; rss: 102MB	rvalue checking
time: 0.000; rss: 102MB	reachability checking
time: 0.002; rss: 102MB	death checking
time: 0.002; rss: 102MB	stability checking
time: 0.000; rss: 102MB	unused lib feature checking
time: 0.018; rss: 103MB	lint checking
time: 0.000; rss: 103MB	resolving dependency formats
time: 0.002; rss: 103MB	erasing regions from MIR
  time: 0.002; rss: 131MB	write metadata
time: 0.370; rss: 126MB	translation
  time: 0.025; rss: 92MB	llvm function passes [0]
  time: 0.005; rss: 93MB	llvm module passes [0]
  time: 0.459; rss: 140MB	codegen passes [0]
  time: 0.000; rss: 126MB	codegen passes [0]
time: 0.532; rss: 126MB	LLVM passes
time: 0.035; rss: 126MB	linking
done
