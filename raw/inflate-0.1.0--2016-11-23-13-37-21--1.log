commit d515586465522c615f8ae6c5d61deedea61126e1
Merge: 127a83d 2121118
Author: bors <bors@rust-lang.org>
Date:   Wed Nov 23 11:16:22 2016 -0600

    Auto merge of #36449 - canndrew:expand_is_uninhabited, r=eddyb
    
    Expand is_uninhabited
    
    This allows code such as this to compile:
    
    ``` rust
    let x: ! = ...;
    match x {};
    
    let y: (u32, !) = ...;
    match y {};
    ```
    
    @eddyb You were worried about making this change. Do you have any idea about what could break? Are there any special tests that need to be written for it?
rustc: ./inflate-0.1.0
cargo rustc  -- -Ztime-passes -Zinput-stats
   Compiling inflate v0.1.0 (file:///root/benchmarks/inflate-0.1.0)
time: 0.003; rss: 43MB	parsing
Lines of code:             956
Pre-expansion node count:  4736
time: 0.000; rss: 43MB	recursion limit
time: 0.000; rss: 43MB	crate injection
time: 0.000; rss: 43MB	plugin loading
time: 0.000; rss: 43MB	plugin registration
time: 0.057; rss: 73MB	expansion
time: 0.000; rss: 73MB	maybe building test harness
time: 0.000; rss: 73MB	maybe creating a macro crate
Post-expansion node count: 55748
time: 0.000; rss: 73MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 73MB	complete gated feature checking
time: 0.002; rss: 73MB	early lint checks
time: 0.000; rss: 73MB	AST validation
time: 0.007; rss: 75MB	name resolution
time: 0.004; rss: 77MB	lowering ast -> hir
time: 0.001; rss: 77MB	indexing hir
time: 0.000; rss: 77MB	attribute checking
time: 0.000; rss: 74MB	language item collection
time: 0.000; rss: 74MB	lifetime resolution
time: 0.000; rss: 74MB	looking for entry point
time: 0.000; rss: 74MB	looking for plugin registrar
time: 0.003; rss: 75MB	region resolution
time: 0.000; rss: 75MB	loop checking
time: 0.000; rss: 75MB	static item recursion checking
time: 0.018; rss: 75MB	compute_incremental_hashes_map
time: 0.000; rss: 75MB	load_dep_graph
time: 0.001; rss: 77MB	type collecting
time: 0.000; rss: 77MB	variance inference
time: 0.000; rss: 77MB	impl wf inference
time: 0.006; rss: 80MB	coherence checking
time: 0.001; rss: 80MB	wf checking
time: 0.001; rss: 80MB	item-types checking
time: 1.607; rss: 87MB	item-bodies checking
time: 0.000; rss: 87MB	drop-impl checking
time: 0.014; rss: 87MB	const checking
time: 0.001; rss: 87MB	privacy checking
time: 0.000; rss: 87MB	stability index
time: 0.000; rss: 87MB	intrinsic checking
time: 0.000; rss: 87MB	effect checking
time: 0.002; rss: 87MB	match checking
time: 0.065; rss: 86MB	liveness checking
time: 0.011; rss: 85MB	rvalue checking
time: 0.034; rss: 105MB	MIR dump
  time: 0.007; rss: 105MB	SimplifyCfg
  time: 0.005; rss: 106MB	QualifyAndPromoteConstants
  time: 0.007; rss: 106MB	TypeckMir
  time: 0.000; rss: 106MB	SimplifyBranches
  time: 0.002; rss: 106MB	SimplifyCfg
time: 0.021; rss: 106MB	MIR cleanup and validation
time: 0.238; rss: 109MB	borrow checking
time: 0.000; rss: 109MB	reachability checking
time: 0.003; rss: 109MB	death checking
time: 0.002; rss: 109MB	stability checking
time: 0.000; rss: 109MB	unused lib feature checking
time: 0.016; rss: 110MB	lint checking
time: 0.000; rss: 110MB	resolving dependency formats
  time: 0.000; rss: 110MB	NoLandingPads
  time: 0.002; rss: 109MB	SimplifyCfg
  time: 0.002; rss: 109MB	EraseRegions
  time: 0.001; rss: 109MB	AddCallGuards
  time: 0.221; rss: 111MB	ElaborateDrops
  time: 0.000; rss: 111MB	NoLandingPads
  time: 0.006; rss: 110MB	SimplifyCfg
  time: 0.003; rss: 110MB	InstCombine
  time: 0.000; rss: 110MB	Deaggregator
  time: 0.000; rss: 110MB	CopyPropagation
  time: 0.003; rss: 110MB	SimplifyLocals
  time: 0.001; rss: 110MB	AddCallGuards
  time: 0.000; rss: 110MB	PreTrans
time: 0.239; rss: 110MB	MIR optimisations
  time: 0.001; rss: 110MB	write metadata
  time: 0.008; rss: 110MB	translation item collection
  time: 0.001; rss: 110MB	codegen unit partitioning
  time: 0.001; rss: 123MB	internalize symbols
time: 0.142; rss: 123MB	translation
time: 0.000; rss: 123MB	assert dep graph
time: 0.000; rss: 123MB	serialize dep graph
  time: 0.028; rss: 91MB	llvm function passes [0]
  time: 0.005; rss: 92MB	llvm module passes [0]
  time: 0.659; rss: 97MB	codegen passes [0]
  time: 0.000; rss: 96MB	codegen passes [0]
time: 0.725; rss: 96MB	LLVM passes
time: 0.000; rss: 96MB	serialize work products
time: 0.019; rss: 85MB	linking
done
