commit c09d546ee512c166c2e28306ed67dcf0e3fec751
Merge: 2798772 8841f26
Author: bors <bors@rust-lang.org>
Date:   Thu Jun 9 21:29:26 2016 -0700

    Auto merge of #34046 - Vtec234:fix-atomic-doc, r=steveklabnik
    
    Fix wrong statement in compare_exchange doc
    
    The documentation for `core::sync::atomic::AtomicSomething::compare_exchange` contains a wrong, or imprecise, statement about the return value. It goes:
    
    The return value is a result indicating whether the new value was written and containing
    the previous value. On success this value is guaranteed to be equal to `new`.
    
    In the second sentence, `this value` is gramatically understood as referring to `return value` from the first sentence. Due to how CAS works, the returned value is always what was in the atomic variable _before_ the operation occurred, not what was written into it during the operation. Hence, the fixed doc should say:
    
    The return value is a result indicating whether the new value was written and containing
    the previous value. On success this value is guaranteed to be equal to `current`.
    
    This version is confirmed by the runnable examples in variants of `AtomicSomething`, e.g.
    
        assert_eq!(some_bool.compare_exchange(true, false, Ordering::Acquire, Ordering::Relaxed),
        Ok(true));
    
    where the returned value is `Ok(current)`. This PR fixes all occurrences of this bug I could find.
    
    An alternative solution would be to modify the second sentence so that it refers to the value _written_ into the Atomic rather than what was there before, in which case it would be correct. Example alternative formulation:
    
    On success the value written into the `bool`/`usize`/`whatever` is guaranteed to be equal to `new`.
    
    r? @steveklabnik
rustc: ./hyper.0.5.0
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling hyper v0.5.0 (file:///root/benchmarks/hyper.0.5.0)
time: 0.030; rss: 52MB	parsing
Lines of code:             9154
Pre-expansion node count:  44646
time: 0.005; rss: 52MB	configuration 1
time: 0.000; rss: 52MB	recursion limit
time: 0.000; rss: 52MB	crate injection
time: 0.000; rss: 56MB	plugin loading
time: 0.000; rss: 56MB	plugin registration
time: 0.270; rss: 103MB	expansion
time: 0.000; rss: 103MB	gated configuration checking
time: 0.012; rss: 101MB	maybe building test harness
time: 0.000; rss: 101MB	checking for inline asm in case the target doesn't support it
time: 0.003; rss: 101MB	complete gated feature checking
Post-expansion node count: 100536
time: 0.008; rss: 101MB	assigning node ids
time: 0.004; rss: 103MB	collecting defs
time: 0.011; rss: 113MB	external crate/lib resolution
time: 0.006; rss: 113MB	early lint checks
time: 0.001; rss: 113MB	AST validation
time: 0.024; rss: 119MB	name resolution
time: 0.011; rss: 124MB	lowering ast -> hir
time: 0.001; rss: 125MB	indexing hir
time: 0.001; rss: 125MB	attribute checking
time: 0.001; rss: 115MB	language item collection
time: 0.002; rss: 116MB	lifetime resolution
time: 0.000; rss: 116MB	looking for entry point
time: 0.000; rss: 116MB	looking for plugin registrar
time: 0.006; rss: 120MB	region resolution
time: 0.001; rss: 120MB	loop checking
time: 0.001; rss: 120MB	static item recursion checking
time: 0.000; rss: 120MB	load_dep_graph
time: 0.032; rss: 122MB	type collecting
time: 0.000; rss: 122MB	variance inference
time: 0.044; rss: 128MB	coherence checking
time: 0.096; rss: 132MB	wf checking
time: 0.036; rss: 132MB	item-types checking
time: 0.519; rss: 143MB	item-bodies checking
time: 0.000; rss: 143MB	drop-impl checking
time: 0.044; rss: 145MB	const checking
time: 0.007; rss: 145MB	privacy checking
time: 0.001; rss: 145MB	stability index
time: 0.006; rss: 145MB	intrinsic checking
time: 0.002; rss: 145MB	effect checking
time: 0.014; rss: 145MB	match checking
time: 0.005; rss: 145MB	liveness checking
time: 0.031; rss: 145MB	rvalue checking
time: 0.060; rss: 156MB	MIR dump
time: 0.042; rss: 156MB	MIR passes
time: 0.070; rss: 156MB	borrow checking
time: 0.003; rss: 156MB	reachability checking
time: 0.005; rss: 156MB	death checking
time: 0.005; rss: 156MB	stability checking
time: 0.000; rss: 156MB	unused lib feature checking
time: 0.051; rss: 156MB	lint checking
time: 0.000; rss: 156MB	resolving dependency formats
time: 0.092; rss: 158MB	Prepare MIR codegen passes
  time: 0.126; rss: 164MB	write metadata
  time: 0.177; rss: 166MB	translation item collection
  time: 0.007; rss: 168MB	codegen unit partitioning
time: 1.602; rss: 287MB	translation
time: 0.001; rss: 287MB	assert dep graph
time: 0.000; rss: 287MB	serialize dep graph
  time: 0.096; rss: 177MB	llvm function passes [0]
  time: 0.048; rss: 179MB	llvm module passes [0]
  time: 1.624; rss: 181MB	codegen passes [0]
  time: 0.001; rss: 134MB	codegen passes [0]
time: 1.966; rss: 134MB	LLVM passes
time: 0.170; rss: 131MB	linking
done
