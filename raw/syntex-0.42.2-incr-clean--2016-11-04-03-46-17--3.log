commit 49c36bf16f80a9d9d4e96172b1bc8cb7279de468
Merge: ac919fc 4752367
Author: bors <bors@rust-lang.org>
Date:   Thu Nov 3 22:58:55 2016 -0700

    Auto merge of #36306 - nagisa:mir-local-cleanup, r=eddyb
    
    A way to remove otherwise unused locals from MIR
    
    There is a certain amount of desire for a pass which cleans up the provably unused variables (no assignments or reads). There has been an implementation of such pass by @scottcarr, and another (two!) implementations by me in my own dataflow efforts.
    
    PR like https://github.com/rust-lang/rust/pull/35916 proves that this pass is useful even on its own, which is why I cherry-picked it out from my dataflow effort.
    
    @nikomatsakis previously expressed concerns over this pass not seeming to be very cheap to run and therefore unsuitable for regular cleanup duties. Turns out, regular cleanup of local declarations is not at all necessary, at least now, because majority of passes simply do not (or should not) care about them. Thatâ€™s why it is viable to only run this pass once (perhaps a few more times in the future?) per function, right before translation.
    
    r? @eddyb or @nikomatsakis
rustc: ./syntex-0.42.2-incr-clean
RUSTFLAGS="-Z incremental=incr" \
    cargo rustc -p syntex_syntax -- -Ztime-passes -Zinput-stats -Z incremental-info
   Compiling syntex_syntax v0.42.0
time: 0.109; rss: 76MB	parsing
Lines of code:             33687
Pre-expansion node count:  224033
time: 0.000; rss: 76MB	recursion limit
time: 0.000; rss: 76MB	crate injection
time: 0.000; rss: 76MB	plugin loading
time: 0.000; rss: 76MB	plugin registration
time: 0.258; rss: 148MB	expansion
time: 0.000; rss: 148MB	maybe building test harness
time: 0.006; rss: 148MB	maybe creating a macro crate
Post-expansion node count: 641571
time: 0.000; rss: 148MB	checking for inline asm in case the target doesn't support it
time: 0.013; rss: 148MB	complete gated feature checking
time: 0.024; rss: 148MB	early lint checks
time: 0.007; rss: 148MB	AST validation
time: 0.084; rss: 162MB	name resolution
time: 0.045; rss: 190MB	lowering ast -> hir
time: 0.008; rss: 200MB	indexing hir
time: 0.006; rss: 200MB	attribute checking
time: 0.004; rss: 150MB	language item collection
time: 0.010; rss: 150MB	lifetime resolution
time: 0.000; rss: 150MB	looking for entry point
time: 0.000; rss: 150MB	looking for plugin registrar
time: 0.043; rss: 161MB	region resolution
time: 0.005; rss: 161MB	loop checking
time: 0.005; rss: 161MB	static item recursion checking
time: 0.531; rss: 162MB	compute_incremental_hashes_map
time: 0.000; rss: 162MB	load_dep_graph
time: 0.042; rss: 167MB	type collecting
time: 0.001; rss: 167MB	variance inference
time: 0.033; rss: 171MB	coherence checking
time: 0.095; rss: 174MB	wf checking
time: 0.183; rss: 179MB	item-types checking
time: 3.632; rss: 230MB	item-bodies checking
time: 0.000; rss: 230MB	drop-impl checking
time: 0.242; rss: 233MB	const checking
time: 0.046; rss: 233MB	privacy checking
time: 0.006; rss: 233MB	stability index
time: 0.019; rss: 233MB	intrinsic checking
time: 0.016; rss: 233MB	effect checking
time: 0.048; rss: 233MB	match checking
time: 0.051; rss: 227MB	liveness checking
time: 0.207; rss: 227MB	rvalue checking
time: 0.406; rss: 415MB	MIR dump
  time: 0.057; rss: 418MB	SimplifyCfg
  time: 0.075; rss: 419MB	QualifyAndPromoteConstants
  time: 0.105; rss: 419MB	TypeckMir
  time: 0.004; rss: 419MB	SimplifyBranches
  time: 0.031; rss: 419MB	SimplifyCfg
time: 0.272; rss: 419MB	MIR cleanup and validation
time: 0.541; rss: 419MB	borrow checking
time: 0.017; rss: 419MB	reachability checking
time: 0.040; rss: 419MB	death checking
time: 0.039; rss: 419MB	stability checking
time: 0.000; rss: 419MB	unused lib feature checking
time: 0.210; rss: 419MB	lint checking
time: 0.000; rss: 419MB	resolving dependency formats
  time: 0.003; rss: 419MB	NoLandingPads
  time: 0.026; rss: 419MB	SimplifyCfg
  time: 0.067; rss: 427MB	EraseRegions
  time: 0.011; rss: 427MB	AddCallGuards
  time: 0.280; rss: 448MB	ElaborateDrops
  time: 0.003; rss: 448MB	NoLandingPads
  time: 0.053; rss: 447MB	SimplifyCfg
  time: 0.030; rss: 446MB	InstCombine
  time: 0.012; rss: 446MB	Deaggregator
  time: 0.002; rss: 446MB	CopyPropagation
  time: 0.035; rss: 446MB	SimplifyLocals
  time: 0.010; rss: 446MB	AddCallGuards
  time: 0.002; rss: 446MB	PreTrans
time: 0.537; rss: 446MB	MIR optimisations
  time: 0.059; rss: 455MB	write metadata
  time: 0.397; rss: 464MB	translation item collection
  time: 0.056; rss: 473MB	codegen unit partitioning
  time: 0.047; rss: 718MB	internalize symbols
time: 4.748; rss: 718MB	translation
time: 0.000; rss: 718MB	assert dep graph
time: 0.000; rss: 718MB	serialize dep graph
incremental: re-using 0 out of 1 modules
  time: 0.523; rss: 410MB	llvm function passes [0]
  time: 0.242; rss: 418MB	llvm module passes [0]
  time: 10.089; rss: 411MB	codegen passes [0]
  time: 0.000; rss: 411MB	codegen passes [0]
time: 11.594; rss: 411MB	LLVM passes
time: 0.000; rss: 411MB	serialize work products
time: 0.331; rss: 104MB	linking
done
