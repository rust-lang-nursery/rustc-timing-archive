commit 86995dc8c56b3c2923dff8a4bb79fed7c60a4396
Merge: 91f057d ca5dfd0
Author: bors <bors@rust-lang.org>
Date:   Sun Sep 4 18:36:42 2016 -0700

    Auto merge of #36240 - leeopop:master, r=jseyfried
    
    Allow CompilerControllers to access rustc_plugin::registry::Registry
    
    fixes #36064
    
    I chose to put ructc_plugin::registry::Registry structure
    into CompilerState structure, instead of Session structure.
    This will preserve dependencies among librustc, libructc_driver, and libructc_plugin.
    
    @jseyfried @sanxiyn
rustc: ./rust-encoding-0.3.0
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling encoding v0.3.0-dev (file:///root/benchmarks/rust-encoding-0.3.0)
time: 0.021; rss: 48MB	parsing
Lines of code:             6066
Pre-expansion node count:  28489
time: 0.002; rss: 49MB	configuration
time: 0.000; rss: 49MB	recursion limit
time: 0.000; rss: 49MB	crate injection
time: 0.000; rss: 49MB	plugin loading
time: 0.000; rss: 49MB	plugin registration
time: 0.038; rss: 73MB	expansion
time: 0.000; rss: 73MB	maybe building test harness
time: 0.000; rss: 73MB	maybe creating a macro crate
time: 0.002; rss: 73MB	assigning node ids
Post-expansion node count: 39145
time: 0.000; rss: 73MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 73MB	complete gated feature checking
time: 0.001; rss: 73MB	collecting defs
time: 0.001; rss: 75MB	external crate/lib resolution
time: 0.001; rss: 75MB	early lint checks
time: 0.000; rss: 75MB	AST validation
time: 0.004; rss: 78MB	name resolution
time: 0.004; rss: 81MB	lowering ast -> hir
time: 0.001; rss: 81MB	indexing hir
time: 0.000; rss: 81MB	attribute checking
time: 0.000; rss: 80MB	language item collection
time: 0.001; rss: 80MB	lifetime resolution
time: 0.000; rss: 80MB	looking for entry point
time: 0.000; rss: 80MB	looking for plugin registrar
time: 0.002; rss: 82MB	region resolution
time: 0.000; rss: 82MB	loop checking
time: 0.000; rss: 82MB	static item recursion checking
time: 0.005; rss: 82MB	compute_incremental_hashes_map
time: 0.000; rss: 82MB	load_dep_graph
time: 0.010; rss: 84MB	type collecting
time: 0.000; rss: 84MB	variance inference
time: 0.016; rss: 84MB	coherence checking
time: 0.013; rss: 87MB	wf checking
time: 0.011; rss: 87MB	item-types checking
time: 0.150; rss: 92MB	item-bodies checking
time: 0.000; rss: 92MB	drop-impl checking
time: 0.011; rss: 92MB	const checking
time: 0.001; rss: 92MB	privacy checking
time: 0.000; rss: 92MB	stability index
time: 0.002; rss: 92MB	intrinsic checking
time: 0.000; rss: 92MB	effect checking
time: 0.007; rss: 92MB	match checking
time: 0.001; rss: 92MB	liveness checking
time: 0.007; rss: 92MB	rvalue checking
time: 0.020; rss: 104MB	MIR dump
time: 0.013; rss: 103MB	MIR passes
time: 0.021; rss: 103MB	borrow checking
time: 0.000; rss: 103MB	reachability checking
time: 0.001; rss: 103MB	death checking
time: 0.002; rss: 103MB	stability checking
time: 0.000; rss: 103MB	unused lib feature checking
time: 0.017; rss: 103MB	lint checking
time: 0.000; rss: 103MB	resolving dependency formats
time: 0.026; rss: 104MB	Prepare MIR codegen passes
  time: 0.021; rss: 107MB	write metadata
  time: 0.249; rss: 232MB	translation item collection
  time: 0.002; rss: 232MB	codegen unit partitioning
  time: 0.005; rss: 255MB	internalize symbols
time: 0.589; rss: 247MB	translation
time: 0.000; rss: 247MB	assert dep graph
time: 0.000; rss: 247MB	serialize dep graph
  time: 0.027; rss: 122MB	llvm function passes [0]
  time: 0.057; rss: 127MB	llvm module passes [0]
  time: 0.648; rss: 132MB	codegen passes [0]
  time: 0.001; rss: 132MB	codegen passes [0]
time: 0.790; rss: 131MB	LLVM passes
time: 0.000; rss: 131MB	serialize work products
time: 0.081; rss: 100MB	linking
done
