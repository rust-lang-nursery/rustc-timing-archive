commit 9a7913786c2e1923e30faf7c6eb680546259653c
Merge: 5ba9402 5b224ec
Author: bors <bors@rust-lang.org>
Date:   Mon Feb 15 11:07:02 2016 +0000

    Auto merge of #31653 - tomaka:emscripten-abi, r=eddyb
    
    Needs a correct review because I'm not too confident with how this works.
    All tests related to the C ABI are now passing.
    
    References:
    - https://github.com/kripken/emscripten-fastcomp-clang/blob/dbe68fecd03d6f646bd075963c3cc0e7130e5767/lib/CodeGen/TargetInfo.cpp#L479-L489
    - https://github.com/kripken/emscripten-fastcomp-clang/blob/dbe68fecd03d6f646bd075963c3cc0e7130e5767/lib/CodeGen/TargetInfo.cpp#L466-L477
    
    The `classifyArgumentType` function has two different paths depending on `RAA == CGCXXABI::RAA_DirectInMemory`, but I don't really know what's the corresponding option in Rust.
    
    cc @brson @eddyb
rustc: ./rust-encoding.0.2.32
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling encoding v0.2.32 (file:///root/benchmarks/rust-encoding.0.2.32)
time: 0.023; rss: 42MB	parsing
Lines of code:             6441
Pre-expansion node count:  30335
time: 0.006; rss: 42MB	configuration 1
time: 0.000; rss: 42MB	recursion limit
time: 0.000; rss: 42MB	gated macro checking
time: 0.000; rss: 42MB	crate injection
time: 0.003; rss: 45MB	macro loading
time: 0.000; rss: 45MB	plugin loading
time: 0.000; rss: 45MB	plugin registration
time: 0.045; rss: 47MB	expansion
time: 0.001; rss: 47MB	complete gated feature checking 1
time: 0.007; rss: 47MB	configuration 2
time: 0.000; rss: 47MB	gated configuration checking
time: 0.004; rss: 47MB	maybe building test harness
time: 0.004; rss: 47MB	prelude injection
time: 0.000; rss: 47MB	checking that all macro invocations are gone
time: 0.000; rss: 47MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 47MB	complete gated feature checking 2
time: 0.000; rss: 47MB	const fn bodies and arguments
Post-expansion node count: 41783
time: 0.003; rss: 47MB	assigning node ids
time: 0.004; rss: 51MB	lowering ast -> hir
time: 0.001; rss: 51MB	indexing hir
time: 0.000; rss: 51MB	attribute checking
time: 0.003; rss: 51MB	early lint checks
time: 0.001; rss: 49MB	external crate/lib resolution
time: 0.000; rss: 49MB	language item collection
time: 0.007; rss: 57MB	resolution
time: 0.000; rss: 57MB	lifetime resolution
time: 0.000; rss: 57MB	looking for entry point
time: 0.000; rss: 57MB	looking for plugin registrar
time: 0.002; rss: 57MB	region resolution
time: 0.000; rss: 57MB	loop checking
time: 0.000; rss: 57MB	static item recursion checking
time: 0.005; rss: 60MB	type collecting
time: 0.000; rss: 60MB	variance inference
time: 0.019; rss: 77MB	coherence checking
time: 0.018; rss: 77MB	wf checking
time: 0.012; rss: 78MB	item-types checking
time: 0.186; rss: 88MB	item-bodies checking
time: 0.000; rss: 88MB	drop-impl checking
time: 0.010; rss: 88MB	const checking
time: 0.002; rss: 88MB	privacy checking
time: 0.000; rss: 88MB	stability index
time: 0.001; rss: 88MB	intrinsic checking
time: 0.000; rss: 88MB	effect checking
time: 0.006; rss: 88MB	match checking
time: 0.017; rss: 92MB	MIR dump
time: 0.000; rss: 92MB	MIR passes
time: 0.002; rss: 92MB	liveness checking
time: 0.021; rss: 92MB	borrow checking
time: 0.006; rss: 92MB	rvalue checking
time: 0.000; rss: 92MB	reachability checking
time: 0.002; rss: 92MB	death checking
time: 0.002; rss: 92MB	stability checking
time: 0.000; rss: 92MB	unused lib feature checking
time: 0.018; rss: 95MB	lint checking
time: 0.000; rss: 95MB	resolving dependency formats
time: 0.002; rss: 95MB	erasing regions from MIR
  time: 0.023; rss: 106MB	translation item collection
  time: 0.055; rss: 135MB	write metadata
time: 0.305; rss: 135MB	translation
  time: 0.026; rss: 105MB	llvm function passes [0]
  time: 0.047; rss: 108MB	llvm module passes [0]
  time: 0.556; rss: 115MB	codegen passes [0]
  time: 0.001; rss: 98MB	codegen passes [0]
time: 0.694; rss: 98MB	LLVM passes
time: 0.051; rss: 96MB	linking
done
