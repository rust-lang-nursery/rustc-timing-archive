commit 4812cf392f1fa2258033356dd872fbee58a5406e
Merge: 1fca1ab 19b8408
Author: bors <bors@rust-lang.org>
Date:   Sun Sep 11 10:53:24 2016 -0700

    Auto merge of #36369 - uweigand:s390x, r=alexcrichton
    
    Add s390x support
    
    This adds support for building the Rust compiler and standard
    library for s390x-linux, allowing a full cross-bootstrap sequence
    to complete.  This includes:
    
    - Makefile/configure changes to allow native s390x builds
    - Full Rust compiler support for the s390x C ABI
      (only the non-vector ABI is supported at this point)
    - Port of the standard library to s390x
    - Update the liblibc submodule to a version including s390x support
    - Testsuite fixes to allow clean "make check" on s390x
    
    Caveats:
    
    - Resets base cpu to "z10" to bring support in sync with the default
      behaviour of other compilers on the platforms.  (Usually, upstream
      supports all older processors; a distribution build may then chose
      to require a more recent base version.)  (Also, using zEC12 causes
      failures in the valgrind tests since valgrind doesn't fully support
      this CPU yet.)
    
    - z13 vector ABI is not yet supported.  To ensure compatible code
      generation, the -vector feature is passed to LLVM.  Note that this
      means that even when compiling for z13, no vector instructions
      will be used.  In the future, support for the vector ABI should be
      added (this will require common code support for different ABIs
      that need different data_layout strings on the same platform).
    
    - Two test cases are (temporarily) ignored on s390x to allow passing
      the test suite.  The underlying issues still need to be fixed:
      * debuginfo/simd.rs fails because of incorrect debug information.
        This seems to be a LLVM bug (also seen with C code).
      * run-pass/union/union-basic.rs simply seems to be incorrect for
        all big-endian platforms.
    
    Signed-off-by: Ulrich Weigand <ulrich.weigand@de.ibm.com>
rustc: ./hyper.0.5.0
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling hyper v0.5.0 (file:///root/benchmarks/hyper.0.5.0)
time: 0.028; rss: 50MB	parsing
Lines of code:             9154
Pre-expansion node count:  44873
time: 0.000; rss: 50MB	recursion limit
time: 0.000; rss: 50MB	crate injection
time: 0.000; rss: 50MB	plugin loading
time: 0.000; rss: 50MB	plugin registration
time: 0.096; rss: 78MB	expansion
time: 0.000; rss: 78MB	maybe building test harness
time: 0.001; rss: 78MB	maybe creating a macro crate
time: 0.005; rss: 78MB	assigning node ids
Post-expansion node count: 101537
time: 0.000; rss: 78MB	checking for inline asm in case the target doesn't support it
time: 0.002; rss: 78MB	complete gated feature checking
time: 0.003; rss: 81MB	collecting defs
time: 0.010; rss: 87MB	external crate/lib resolution
time: 0.003; rss: 87MB	early lint checks
time: 0.001; rss: 87MB	AST validation
time: 0.016; rss: 95MB	name resolution
time: 0.008; rss: 99MB	lowering ast -> hir
time: 0.002; rss: 101MB	indexing hir
time: 0.001; rss: 101MB	attribute checking
time: 0.001; rss: 95MB	language item collection
time: 0.002; rss: 95MB	lifetime resolution
time: 0.000; rss: 95MB	looking for entry point
time: 0.000; rss: 95MB	looking for plugin registrar
time: 0.006; rss: 100MB	region resolution
time: 0.001; rss: 100MB	loop checking
time: 0.001; rss: 100MB	static item recursion checking
time: 0.041; rss: 100MB	compute_incremental_hashes_map
time: 0.000; rss: 100MB	load_dep_graph
time: 0.023; rss: 102MB	type collecting
time: 0.000; rss: 102MB	variance inference
time: 0.036; rss: 104MB	coherence checking
time: 0.057; rss: 107MB	wf checking
time: 0.029; rss: 108MB	item-types checking
time: 0.363; rss: 120MB	item-bodies checking
time: 0.000; rss: 120MB	drop-impl checking
time: 0.038; rss: 122MB	const checking
time: 0.008; rss: 122MB	privacy checking
time: 0.001; rss: 122MB	stability index
time: 0.005; rss: 122MB	intrinsic checking
time: 0.002; rss: 122MB	effect checking
time: 0.013; rss: 123MB	match checking
time: 0.004; rss: 123MB	liveness checking
time: 0.027; rss: 123MB	rvalue checking
time: 0.054; rss: 139MB	MIR dump
  time: 0.007; rss: 139MB	SimplifyCfg
  time: 0.013; rss: 139MB	QualifyAndPromoteConstants
  time: 0.016; rss: 139MB	TypeckMir
  time: 0.001; rss: 139MB	SimplifyBranches
  time: 0.004; rss: 139MB	SimplifyCfg
time: 0.041; rss: 139MB	MIR passes
time: 0.062; rss: 139MB	borrow checking
time: 0.003; rss: 139MB	reachability checking
time: 0.005; rss: 139MB	death checking
time: 0.005; rss: 139MB	stability checking
time: 0.000; rss: 139MB	unused lib feature checking
time: 0.042; rss: 139MB	lint checking
time: 0.000; rss: 139MB	resolving dependency formats
  time: 0.000; rss: 139MB	NoLandingPads
  time: 0.003; rss: 139MB	SimplifyCfg
  time: 0.009; rss: 141MB	EraseRegions
  time: 0.001; rss: 141MB	AddCallGuards
  time: 0.054; rss: 144MB	ElaborateDrops
  time: 0.001; rss: 144MB	NoLandingPads
  time: 0.005; rss: 144MB	SimplifyCfg
  time: 0.003; rss: 144MB	Deaggregator
  time: 0.001; rss: 144MB	AddCallGuards
  time: 0.000; rss: 144MB	PreTrans
time: 0.079; rss: 144MB	Prepare MIR codegen passes
  time: 0.055; rss: 148MB	write metadata
  time: 0.112; rss: 150MB	translation item collection
  time: 0.020; rss: 154MB	codegen unit partitioning
  time: 0.034; rss: 219MB	internalize symbols
time: 1.394; rss: 209MB	translation
time: 0.000; rss: 209MB	assert dep graph
time: 0.000; rss: 209MB	serialize dep graph
  time: 0.100; rss: 161MB	llvm function passes [0]
  time: 0.049; rss: 163MB	llvm module passes [0]
  time: 1.818; rss: 163MB	codegen passes [0]
  time: 0.001; rss: 164MB	codegen passes [0]
time: 2.155; rss: 164MB	LLVM passes
time: 0.000; rss: 164MB	serialize work products
time: 0.160; rss: 99MB	linking
done
