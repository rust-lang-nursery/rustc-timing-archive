commit 645dd013ac6b334ab5bf7a7240c2243f4bb590c9
Merge: 1930483 e078667
Author: bors <bors@rust-lang.org>
Date:   Sun Apr 24 17:04:49 2016 -0700

    Auto merge of #33085 - fitzgen:make-enumerate-example-more-clear, r=steveklabnik
    
    Make the `Iterator::enumerate` doc example more clear
    
    The example uses integers for the value being iterated over, but the indices
    added by `enumerate` are also integers, so I always end up double taking and
    thinking harder than I should when parsing the documentation. I also always
    forget which order the index and value are in the tuple so I frequently hit this
    stumbling block. This commit changes the documentation to iterate over
    characters so that it is immediately obvious which part of the tuple is the
    index and which is the value.
rustc: ./rust-encoding.0.2.32
cargo rustc -- -Ztime-passes -Zinput-stats
    Updating registry `https://github.com/rust-lang/crates.io-index`
   Compiling encoding_index_tests v0.1.4 (file:///root/benchmarks/rust-encoding.0.2.32)
   Compiling encoding-index-singlebyte v1.20141219.5 (file:///root/benchmarks/rust-encoding.0.2.32)
   Compiling encoding-index-simpchinese v1.20141219.5 (file:///root/benchmarks/rust-encoding.0.2.32)
   Compiling encoding-index-korean v1.20141219.5 (file:///root/benchmarks/rust-encoding.0.2.32)
   Compiling encoding-index-tradchinese v1.20141219.5 (file:///root/benchmarks/rust-encoding.0.2.32)
   Compiling encoding-index-japanese v1.20141219.5 (file:///root/benchmarks/rust-encoding.0.2.32)
   Compiling encoding v0.2.32 (file:///root/benchmarks/rust-encoding.0.2.32)
time: 0.022; rss: 50MB	parsing
Lines of code:             6441
Pre-expansion node count:  30335
time: 0.006; rss: 50MB	configuration 1
time: 0.000; rss: 50MB	recursion limit
time: 0.000; rss: 50MB	gated macro checking
time: 0.000; rss: 50MB	crate injection
time: 0.003; rss: 56MB	macro loading
time: 0.000; rss: 56MB	plugin loading
time: 0.000; rss: 56MB	plugin registration
time: 0.043; rss: 56MB	expansion
time: 0.001; rss: 56MB	complete gated feature checking 1
time: 0.006; rss: 56MB	configuration 2
time: 0.000; rss: 56MB	gated configuration checking
time: 0.003; rss: 56MB	maybe building test harness
time: 0.003; rss: 56MB	prelude injection
time: 0.000; rss: 56MB	checking that all macro invocations are gone
time: 0.000; rss: 56MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 56MB	complete gated feature checking 2
time: 0.000; rss: 56MB	const fn bodies and arguments
Post-expansion node count: 41611
time: 0.003; rss: 56MB	assigning node ids
time: 0.001; rss: 63MB	collecting defs
time: 0.001; rss: 63MB	external crate/lib resolution
time: 0.004; rss: 63MB	lowering ast -> hir
time: 0.001; rss: 66MB	indexing hir
time: 0.000; rss: 66MB	attribute checking
time: 0.002; rss: 66MB	early lint checks
time: 0.000; rss: 65MB	language item collection
time: 0.008; rss: 74MB	name resolution
time: 0.000; rss: 74MB	lifetime resolution
time: 0.000; rss: 74MB	looking for entry point
time: 0.000; rss: 74MB	looking for plugin registrar
time: 0.002; rss: 76MB	region resolution
time: 0.000; rss: 76MB	loop checking
time: 0.000; rss: 76MB	static item recursion checking
time: 0.000; rss: 76MB	load_dep_graph
time: 0.005; rss: 78MB	type collecting
time: 0.000; rss: 78MB	variance inference
time: 0.022; rss: 93MB	coherence checking
time: 0.017; rss: 94MB	wf checking
time: 0.012; rss: 96MB	item-types checking
time: 0.194; rss: 106MB	item-bodies checking
time: 0.000; rss: 106MB	drop-impl checking
time: 0.011; rss: 106MB	const checking
time: 0.002; rss: 106MB	privacy checking
time: 0.000; rss: 106MB	stability index
time: 0.001; rss: 106MB	intrinsic checking
time: 0.000; rss: 106MB	effect checking
time: 0.006; rss: 106MB	match checking
time: 0.002; rss: 106MB	liveness checking
time: 0.006; rss: 106MB	rvalue checking
time: 0.019; rss: 114MB	MIR dump
time: 0.008; rss: 116MB	MIR passes
time: 0.022; rss: 116MB	borrow checking
time: 0.000; rss: 116MB	reachability checking
time: 0.002; rss: 116MB	death checking
time: 0.002; rss: 116MB	stability checking
time: 0.000; rss: 116MB	unused lib feature checking
time: 0.024; rss: 116MB	lint checking
time: 0.000; rss: 116MB	resolving dependency formats
time: 0.003; rss: 117MB	Prepare MIR codegen passes
  time: 0.025; rss: 119MB	translation item collection
  time: 0.001; rss: 119MB	codegen unit partitioning
  time: 0.058; rss: 156MB	write metadata
time: 0.333; rss: 156MB	translation
time: 0.000; rss: 156MB	assert dep graph
time: 0.000; rss: 156MB	serialize dep graph
  time: 0.026; rss: 114MB	llvm function passes [0]
  time: 0.049; rss: 118MB	llvm module passes [0]
  time: 0.578; rss: 122MB	codegen passes [0]
  time: 0.000; rss: 107MB	codegen passes [0]
time: 0.718; rss: 107MB	LLVM passes
time: 0.054; rss: 105MB	linking
done
