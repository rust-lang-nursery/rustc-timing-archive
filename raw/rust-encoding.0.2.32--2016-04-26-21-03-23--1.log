commit 8f552181895921a377ab8c235340ea3d80ec7fc0
Merge: 897199a 9249e6a
Author: bors <bors@rust-lang.org>
Date:   Tue Apr 26 14:54:37 2016 -0700

    Auto merge of #31414 - durka:clone-copy, r=alexcrichton
    
    special-case #[derive(Copy, Clone)] with a shallow clone
    
    If a type is Copy then its Clone implementation can be a no-op. Currently `#[derive(Clone)]` generates a deep clone anyway. This can lead to lots of code bloat.
    
    This PR detects the case where Copy and Clone are both being derived (the general case of "is this type Copy" can't be determined by a syntax extension) and generates the shallow Clone impl. Right now this can only be done if there are no type parameters (see https://github.com/rust-lang/rust/issues/31085#issuecomment-178988663), but this restriction can be removed after specialization.
    
    Fixes #31085.
rustc: ./rust-encoding.0.2.32
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling encoding v0.2.32 (file:///root/benchmarks/rust-encoding.0.2.32)
time: 0.030; rss: 52MB	parsing
Lines of code:             6441
Pre-expansion node count:  30335
time: 0.006; rss: 53MB	configuration 1
time: 0.000; rss: 53MB	recursion limit
time: 0.000; rss: 53MB	gated macro checking
time: 0.000; rss: 53MB	crate injection
time: 0.003; rss: 55MB	macro loading
time: 0.000; rss: 55MB	plugin loading
time: 0.000; rss: 55MB	plugin registration
time: 0.044; rss: 57MB	expansion
time: 0.001; rss: 57MB	complete gated feature checking 1
time: 0.007; rss: 57MB	configuration 2
time: 0.000; rss: 57MB	gated configuration checking
time: 0.003; rss: 57MB	maybe building test harness
time: 0.003; rss: 57MB	prelude injection
time: 0.000; rss: 57MB	checking that all macro invocations are gone
time: 0.000; rss: 57MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 57MB	complete gated feature checking 2
time: 0.000; rss: 57MB	const fn bodies and arguments
Post-expansion node count: 41656
time: 0.003; rss: 57MB	assigning node ids
time: 0.004; rss: 59MB	collecting defs
time: 0.001; rss: 59MB	external crate/lib resolution
time: 0.005; rss: 62MB	lowering ast -> hir
time: 0.003; rss: 62MB	indexing hir
time: 0.000; rss: 62MB	attribute checking
time: 0.002; rss: 62MB	early lint checks
time: 0.000; rss: 62MB	language item collection
time: 0.008; rss: 71MB	name resolution
time: 0.000; rss: 71MB	lifetime resolution
time: 0.000; rss: 71MB	looking for entry point
time: 0.000; rss: 71MB	looking for plugin registrar
time: 0.005; rss: 72MB	region resolution
time: 0.000; rss: 72MB	loop checking
time: 0.000; rss: 72MB	static item recursion checking
time: 0.000; rss: 72MB	load_dep_graph
time: 0.004; rss: 74MB	type collecting
time: 0.000; rss: 74MB	variance inference
time: 0.022; rss: 91MB	coherence checking
time: 0.017; rss: 92MB	wf checking
time: 0.013; rss: 92MB	item-types checking
time: 0.209; rss: 102MB	item-bodies checking
time: 0.000; rss: 102MB	drop-impl checking
time: 0.011; rss: 102MB	const checking
time: 0.003; rss: 102MB	privacy checking
time: 0.000; rss: 102MB	stability index
time: 0.001; rss: 102MB	intrinsic checking
time: 0.000; rss: 102MB	effect checking
time: 0.006; rss: 102MB	match checking
time: 0.002; rss: 102MB	liveness checking
time: 0.006; rss: 102MB	rvalue checking
time: 0.031; rss: 109MB	MIR dump
time: 0.008; rss: 109MB	MIR passes
time: 0.022; rss: 109MB	borrow checking
time: 0.000; rss: 109MB	reachability checking
time: 0.002; rss: 109MB	death checking
time: 0.002; rss: 110MB	stability checking
time: 0.000; rss: 110MB	unused lib feature checking
time: 0.025; rss: 110MB	lint checking
time: 0.000; rss: 110MB	resolving dependency formats
time: 0.003; rss: 111MB	Prepare MIR codegen passes
  time: 0.028; rss: 116MB	translation item collection
  time: 0.002; rss: 116MB	codegen unit partitioning
  time: 0.060; rss: 148MB	write metadata
time: 0.395; rss: 148MB	translation
time: 0.000; rss: 148MB	assert dep graph
time: 0.000; rss: 148MB	serialize dep graph
  time: 0.027; rss: 113MB	llvm function passes [0]
  time: 0.051; rss: 117MB	llvm module passes [0]
  time: 0.574; rss: 121MB	codegen passes [0]
  time: 0.001; rss: 106MB	codegen passes [0]
time: 0.717; rss: 104MB	LLVM passes
time: 0.054; rss: 103MB	linking
done
