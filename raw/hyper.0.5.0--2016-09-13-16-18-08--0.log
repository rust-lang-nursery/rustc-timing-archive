commit 2fd060815f9e9c4ae787cb1cd44df51aeb91fe6e
Merge: c87ba3f b778f7fa
Author: bors <bors@rust-lang.org>
Date:   Tue Sep 13 10:54:55 2016 -0700

    Auto merge of #36181 - seanmonstar:likely, r=nikomatsakis
    
    core: add likely and unlikely intrinsics
    
    I'm no good at reading assembly, but I have tried a stage1 compiler with this patch, and it does cause different asm output. Additionally, testing this compiler on my httparse crate with some `likely` usage added in to the branches does affect benchmarks. However, I'm sure a codegen test should be included, if anyone knows what it should look like.
    
    There isn't an entry in `librustc_trans/context.rs` in this diff, because it already exists (`llvm.expect.i1` is used for array indices).
    
    ----
    
    Even though this does affect httparse benchmarks, it doesn't seem to affect it the same way GCC's `__builtin_expect` affects picohttpparser. I was confused that the deviation on the benchmarks grew hugely when testing this, especially since I'm absolutely certain that the branchs where I added `likely` were always `true`. I chalk that up to GCC and LLVM handle branch prediction differently.
    
    cc #26179
rustc: ./hyper.0.5.0
cargo rustc -- -Ztime-passes -Zinput-stats
    Updating registry `https://github.com/rust-lang/crates.io-index`
 Downloading env_logger v0.3.5
   Compiling winapi-build v0.1.1
   Compiling libc v0.2.16
   Compiling lazy_static v0.1.16
   Compiling rustc-serialize v0.3.19
   Compiling matches v0.1.2
   Compiling gcc v0.3.35
   Compiling log v0.3.6
   Compiling typeable v0.1.2
   Compiling winapi v0.2.8
   Compiling libc v0.1.12
   Compiling unicase v0.1.0
   Compiling traitobject v0.0.1
   Compiling bitflags v0.3.3
   Compiling pkg-config v0.3.8
   Compiling httparse v0.1.6
   Compiling mime v0.0.11
   Compiling kernel32-sys v0.2.2
   Compiling rand v0.3.14
   Compiling time v0.1.35
   Compiling num_cpus v0.2.13
   Compiling openssl-sys v0.6.7
   Compiling openssl v0.6.7
   Compiling uuid v0.1.18
   Compiling url v0.2.38
   Compiling cookie v0.1.21
   Compiling hyper v0.5.0 (file:///root/benchmarks/hyper.0.5.0)
time: 0.028; rss: 50MB	parsing
Lines of code:             9154
Pre-expansion node count:  44873
time: 0.000; rss: 50MB	recursion limit
time: 0.000; rss: 50MB	crate injection
time: 0.000; rss: 50MB	plugin loading
time: 0.000; rss: 50MB	plugin registration
time: 0.094; rss: 79MB	expansion
time: 0.000; rss: 79MB	maybe building test harness
time: 0.001; rss: 79MB	maybe creating a macro crate
time: 0.005; rss: 79MB	assigning node ids
Post-expansion node count: 101537
time: 0.000; rss: 79MB	checking for inline asm in case the target doesn't support it
time: 0.002; rss: 79MB	complete gated feature checking
time: 0.003; rss: 81MB	collecting defs
time: 0.009; rss: 87MB	external crate/lib resolution
time: 0.003; rss: 87MB	early lint checks
time: 0.001; rss: 87MB	AST validation
time: 0.015; rss: 95MB	name resolution
time: 0.008; rss: 99MB	lowering ast -> hir
time: 0.002; rss: 101MB	indexing hir
time: 0.001; rss: 101MB	attribute checking
time: 0.001; rss: 95MB	language item collection
time: 0.002; rss: 95MB	lifetime resolution
time: 0.000; rss: 95MB	looking for entry point
time: 0.000; rss: 95MB	looking for plugin registrar
time: 0.006; rss: 100MB	region resolution
time: 0.001; rss: 100MB	loop checking
time: 0.001; rss: 100MB	static item recursion checking
time: 0.040; rss: 100MB	compute_incremental_hashes_map
time: 0.000; rss: 100MB	load_dep_graph
time: 0.022; rss: 102MB	type collecting
time: 0.000; rss: 102MB	variance inference
time: 0.035; rss: 105MB	coherence checking
time: 0.057; rss: 108MB	wf checking
time: 0.029; rss: 108MB	item-types checking
time: 0.366; rss: 120MB	item-bodies checking
time: 0.000; rss: 120MB	drop-impl checking
time: 0.038; rss: 122MB	const checking
time: 0.006; rss: 122MB	privacy checking
time: 0.001; rss: 122MB	stability index
time: 0.005; rss: 122MB	intrinsic checking
time: 0.002; rss: 122MB	effect checking
time: 0.013; rss: 122MB	match checking
time: 0.005; rss: 122MB	liveness checking
time: 0.027; rss: 122MB	rvalue checking
time: 0.056; rss: 139MB	MIR dump
  time: 0.007; rss: 139MB	SimplifyCfg
  time: 0.013; rss: 139MB	QualifyAndPromoteConstants
  time: 0.016; rss: 139MB	TypeckMir
  time: 0.001; rss: 139MB	SimplifyBranches
  time: 0.004; rss: 139MB	SimplifyCfg
time: 0.039; rss: 139MB	MIR passes
time: 0.061; rss: 139MB	borrow checking
time: 0.003; rss: 139MB	reachability checking
time: 0.005; rss: 139MB	death checking
time: 0.005; rss: 139MB	stability checking
time: 0.000; rss: 139MB	unused lib feature checking
time: 0.041; rss: 139MB	lint checking
time: 0.000; rss: 139MB	resolving dependency formats
  time: 0.001; rss: 139MB	NoLandingPads
  time: 0.003; rss: 139MB	SimplifyCfg
  time: 0.008; rss: 139MB	EraseRegions
  time: 0.001; rss: 139MB	AddCallGuards
  time: 0.054; rss: 141MB	ElaborateDrops
  time: 0.001; rss: 141MB	NoLandingPads
  time: 0.005; rss: 141MB	SimplifyCfg
  time: 0.003; rss: 141MB	Deaggregator
  time: 0.001; rss: 141MB	AddCallGuards
  time: 0.000; rss: 141MB	PreTrans
time: 0.077; rss: 141MB	Prepare MIR codegen passes
  time: 0.055; rss: 148MB	write metadata
  time: 0.113; rss: 151MB	translation item collection
  time: 0.019; rss: 153MB	codegen unit partitioning
  time: 0.032; rss: 216MB	internalize symbols
time: 1.376; rss: 207MB	translation
time: 0.000; rss: 207MB	assert dep graph
time: 0.000; rss: 207MB	serialize dep graph
  time: 0.100; rss: 157MB	llvm function passes [0]
  time: 0.050; rss: 160MB	llvm module passes [0]
  time: 1.853; rss: 165MB	codegen passes [0]
  time: 0.001; rss: 166MB	codegen passes [0]
time: 2.176; rss: 166MB	LLVM passes
time: 0.000; rss: 166MB	serialize work products
time: 0.157; rss: 99MB	linking
done
