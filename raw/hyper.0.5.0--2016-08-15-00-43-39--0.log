commit 47e6da2a01c284f383ad9658e33735f78e262ade
Merge: 13ff307 5f606f0
Author: bors <bors@rust-lang.org>
Date:   Sun Aug 14 18:36:33 2016 -0700

    Auto merge of #35427 - cardoe:arm-musl-targets, r=alexcrichton
    
    add GNU make files for arm-unknown-linux-musleabi
    
    For Yocto (Embedded Linux meta distro) Rust is provided via the [meta-rust layer](https://github.com/meta-rust/meta-rust). In this project there have been patches to add `arm-unknown-linux-musleabi`. Rust recently acquired that support via #35060 but only for rustbuild. meta-rust is currently only able to build Rust support with the existing GNU Makefiles. This adds `arm-unknown-linux-musleabi` support to Rust for the GNU Makefiles until meta-rust is able to sort out why using rustbuild does not work for it.
    
    /cc @srwalter @derekstraka @jmesmon @japaric
rustc: ./hyper.0.5.0
cargo rustc -- -Ztime-passes -Zinput-stats
    Updating registry `https://github.com/rust-lang/crates.io-index`
   Compiling matches v0.1.2
   Compiling log v0.3.6
   Compiling libc v0.1.12
   Compiling pkg-config v0.3.8
   Compiling winapi v0.2.8
   Compiling bitflags v0.3.3
   Compiling unicase v0.1.0
   Compiling gcc v0.3.32
   Compiling libc v0.2.15
   Compiling typeable v0.1.2
   Compiling rustc-serialize v0.3.19
   Compiling lazy_static v0.1.16
   Compiling httparse v0.1.6
   Compiling traitobject v0.0.1
   Compiling mime v0.0.11
   Compiling winapi-build v0.1.1
   Compiling kernel32-sys v0.2.2
   Compiling rand v0.3.14
   Compiling num_cpus v0.2.13
   Compiling time v0.1.35
   Compiling openssl-sys v0.6.7
   Compiling openssl v0.6.7
   Compiling uuid v0.1.18
   Compiling url v0.2.38
   Compiling cookie v0.1.21
   Compiling hyper v0.5.0 (file:///root/benchmarks/hyper.0.5.0)
time: 0.026; rss: 50MB	parsing
Lines of code:             9154
Pre-expansion node count:  44838
time: 0.003; rss: 50MB	configuration
time: 0.000; rss: 50MB	recursion limit
time: 0.000; rss: 50MB	crate injection
time: 0.000; rss: 50MB	plugin loading
time: 0.000; rss: 50MB	plugin registration
time: 0.095; rss: 93MB	expansion
time: 0.000; rss: 93MB	maybe building test harness
time: 0.005; rss: 93MB	assigning node ids
Post-expansion node count: 101581
time: 0.000; rss: 93MB	checking for inline asm in case the target doesn't support it
time: 0.002; rss: 93MB	complete gated feature checking
time: 0.003; rss: 93MB	collecting defs
time: 0.010; rss: 105MB	external crate/lib resolution
time: 0.003; rss: 105MB	early lint checks
time: 0.001; rss: 105MB	AST validation
time: 0.019; rss: 111MB	name resolution
time: 0.008; rss: 117MB	lowering ast -> hir
time: 0.002; rss: 119MB	indexing hir
time: 0.001; rss: 119MB	attribute checking
time: 0.001; rss: 113MB	language item collection
time: 0.002; rss: 113MB	lifetime resolution
time: 0.000; rss: 113MB	looking for entry point
time: 0.000; rss: 113MB	looking for plugin registrar
time: 0.007; rss: 117MB	region resolution
time: 0.001; rss: 117MB	loop checking
time: 0.001; rss: 117MB	static item recursion checking
time: 0.000; rss: 117MB	load_dep_graph
time: 0.024; rss: 118MB	type collecting
time: 0.000; rss: 118MB	variance inference
time: 0.048; rss: 125MB	coherence checking
time: 0.081; rss: 128MB	wf checking
time: 0.034; rss: 128MB	item-types checking
time: 0.490; rss: 139MB	item-bodies checking
time: 0.000; rss: 139MB	drop-impl checking
time: 0.044; rss: 141MB	const checking
time: 0.008; rss: 142MB	privacy checking
time: 0.001; rss: 142MB	stability index
time: 0.005; rss: 142MB	intrinsic checking
time: 0.002; rss: 142MB	effect checking
time: 0.013; rss: 142MB	match checking
time: 0.005; rss: 142MB	liveness checking
time: 0.031; rss: 142MB	rvalue checking
time: 0.056; rss: 159MB	MIR dump
time: 0.043; rss: 159MB	MIR passes
time: 0.069; rss: 159MB	borrow checking
time: 0.003; rss: 159MB	reachability checking
time: 0.005; rss: 159MB	death checking
time: 0.006; rss: 159MB	stability checking
time: 0.000; rss: 159MB	unused lib feature checking
time: 0.049; rss: 159MB	lint checking
time: 0.000; rss: 159MB	resolving dependency formats
time: 0.097; rss: 163MB	Prepare MIR codegen passes
  time: 0.131; rss: 172MB	write metadata
  time: 0.180; rss: 178MB	translation item collection
  time: 0.020; rss: 180MB	codegen unit partitioning
  time: 0.034; rss: 311MB	internalize symbols
time: 1.848; rss: 311MB	translation
time: 0.000; rss: 311MB	assert dep graph
time: 0.000; rss: 311MB	serialize dep graph
  time: 0.100; rss: 186MB	llvm function passes [0]
  time: 0.049; rss: 181MB	llvm module passes [0]
  time: 1.827; rss: 191MB	codegen passes [0]
  time: 0.001; rss: 191MB	codegen passes [0]
time: 2.139; rss: 191MB	LLVM passes
time: 0.000; rss: 191MB	serialize work products
time: 0.154; rss: 122MB	linking
done
