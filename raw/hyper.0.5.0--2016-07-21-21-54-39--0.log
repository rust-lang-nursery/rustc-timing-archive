commit 62690b3c3fa6e157daa7f7c5a3af005f37eb4199
Merge: 7588653 ede39ae
Author: bors <bors@rust-lang.org>
Date:   Thu Jul 21 16:19:54 2016 -0700

    Auto merge of #34544 - 3Hren:issue/xx/reinterpret-format-precision-for-strings, r=alexcrichton
    
    feat: reinterpret `precision` field for strings
    
    This commit changes the behavior of formatting string arguments with both width and precision fields set.
    
    Documentation says that the `width` field is the "minimum width" that the format should take up. If the value's string does not fill up this many characters, then the padding specified by fill/alignment will be used to take up the required space.
    
    This is true for all formatted types except string, which is truncated down to `precision` number of chars and then all of `fill`, `align` and `width` fields are completely ignored.
    
    For example: `format!("{:/^10.8}", "1234567890);` emits "12345678". In the contrast Python version works as the expected:
    ```python
    >>> '{:/^10.8}'.format('1234567890')
    '/12345678/'
    ```
    
    This commit gives back the `Python` behavior by changing the `precision` field meaning to the truncation and nothing more. The result string *will* be prepended/appended up to the `width` field with the proper `fill` char.
    
    __However, this is the breaking change, I admit.__ Feel free to close it, but otherwise it should be mentioned in the `std::fmt` documentation somewhere near of `fill/align/width` fields description.
rustc: ./hyper.0.5.0
cargo rustc -- -Ztime-passes -Zinput-stats
    Updating registry `https://github.com/rust-lang/crates.io-index`
   Compiling bitflags v0.3.3
   Compiling lazy_static v0.1.16
   Compiling libc v0.2.14
   Compiling pkg-config v0.3.8
   Compiling typeable v0.1.2
   Compiling rustc-serialize v0.3.19
   Compiling winapi-build v0.1.1
   Compiling libc v0.1.12
   Compiling gcc v0.3.32
   Compiling winapi v0.2.8
   Compiling traitobject v0.0.1
   Compiling log v0.3.6
   Compiling httparse v0.1.6
   Compiling unicase v0.1.0
   Compiling matches v0.1.2
   Compiling kernel32-sys v0.2.2
   Compiling mime v0.0.11
   Compiling num_cpus v0.2.13
   Compiling rand v0.3.14
   Compiling time v0.1.35
   Compiling openssl-sys v0.6.7
   Compiling openssl v0.6.7
   Compiling uuid v0.1.18
   Compiling url v0.2.38
   Compiling cookie v0.1.21
   Compiling hyper v0.5.0 (file:///root/benchmarks/hyper.0.5.0)
time: 0.032; rss: 92MB	parsing
Lines of code:             9154
Pre-expansion node count:  44838
time: 0.005; rss: 92MB	configuration
time: 0.000; rss: 92MB	recursion limit
time: 0.000; rss: 92MB	crate injection
time: 0.000; rss: 92MB	plugin loading
time: 0.000; rss: 92MB	plugin registration
time: 0.118; rss: 133MB	expansion
time: 0.000; rss: 133MB	maybe building test harness
time: 0.008; rss: 133MB	assigning node ids
Post-expansion node count: 101581
time: 0.000; rss: 133MB	checking for inline asm in case the target doesn't support it
time: 0.002; rss: 133MB	complete gated feature checking
time: 0.003; rss: 133MB	collecting defs
time: 0.011; rss: 143MB	external crate/lib resolution
time: 0.006; rss: 143MB	early lint checks
time: 0.001; rss: 143MB	AST validation
time: 0.020; rss: 148MB	name resolution
time: 0.011; rss: 157MB	lowering ast -> hir
time: 0.002; rss: 159MB	indexing hir
time: 0.001; rss: 159MB	attribute checking
time: 0.001; rss: 152MB	language item collection
time: 0.002; rss: 152MB	lifetime resolution
time: 0.000; rss: 152MB	looking for entry point
time: 0.000; rss: 152MB	looking for plugin registrar
time: 0.005; rss: 156MB	region resolution
time: 0.001; rss: 156MB	loop checking
time: 0.000; rss: 156MB	static item recursion checking
time: 0.000; rss: 156MB	load_dep_graph
time: 0.031; rss: 159MB	type collecting
time: 0.000; rss: 159MB	variance inference
time: 0.048; rss: 167MB	coherence checking
time: 0.098; rss: 168MB	wf checking
time: 0.037; rss: 168MB	item-types checking
time: 0.535; rss: 179MB	item-bodies checking
time: 0.000; rss: 179MB	drop-impl checking
time: 0.045; rss: 181MB	const checking
time: 0.008; rss: 181MB	privacy checking
time: 0.001; rss: 181MB	stability index
time: 0.006; rss: 181MB	intrinsic checking
time: 0.002; rss: 181MB	effect checking
time: 0.014; rss: 181MB	match checking
time: 0.004; rss: 181MB	liveness checking
time: 0.031; rss: 181MB	rvalue checking
time: 0.063; rss: 192MB	MIR dump
time: 0.045; rss: 192MB	MIR passes
time: 0.073; rss: 192MB	borrow checking
time: 0.003; rss: 192MB	reachability checking
time: 0.006; rss: 192MB	death checking
time: 0.006; rss: 192MB	stability checking
time: 0.000; rss: 192MB	unused lib feature checking
time: 0.053; rss: 192MB	lint checking
time: 0.000; rss: 192MB	resolving dependency formats
time: 0.094; rss: 194MB	Prepare MIR codegen passes
  time: 0.133; rss: 201MB	write metadata
  time: 0.190; rss: 205MB	translation item collection
  time: 0.020; rss: 207MB	codegen unit partitioning
time: 3.661; rss: 326MB	translation
time: 0.001; rss: 326MB	assert dep graph
time: 0.000; rss: 326MB	serialize dep graph
  time: 1.116; rss: 213MB	llvm function passes [0]
  time: 0.434; rss: 212MB	llvm module passes [0]
  time: 16.072; rss: 215MB	codegen passes [0]
  time: 0.002; rss: 215MB	codegen passes [0]
time: 18.743; rss: 214MB	LLVM passes
time: 0.151; rss: 166MB	linking
done
