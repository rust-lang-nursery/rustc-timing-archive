commit 18f28719efd4268bcd8747b65810646e86901155
Merge: 12b6345 24e7491
Author: bors <bors@rust-lang.org>
Date:   Thu Jun 16 12:13:25 2016 -0700

    Auto merge of #34187 - luser:extern-crate-abspaths, r=michaelwoerister
    
    Add an abs_path member to FileMap, use it when writing debug info.
    
    Fixes #34179.
    
    When items are inlined from extern crates, the filename in the debug info
    is taken from the FileMap that's serialized in the rlib metadata.
    Currently this is just FileMap.name, which is whatever path is passed to rustc.
    Since libcore and libstd are built by invoking rustc with relative paths,
    they wind up with relative paths in the rlib, and when linked into a binary
    the debug info uses relative paths for the names, but since the compilation
    directory for the final binary, tools trying to read source filenames
    will wind up with bad paths. We noticed this in Firefox with source
    filenames from libcore/libstd having bad paths.
    
    This change stores an absolute path in FileMap.abs_path, and uses that
    if available for writing debug info. This is not going to magically make
    debuggers able to find the source, but it will at least provide sensible
    paths.
rustc: ./jld-day15-parser
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling day15 v0.1.0 (file:///root/benchmarks/jld-day15-parser)
time: 0.001; rss: 44MB	parsing
Lines of code:             72
Pre-expansion node count:  653
time: 0.000; rss: 44MB	configuration 1
time: 0.000; rss: 48MB	recursion limit
time: 0.000; rss: 48MB	crate injection
time: 0.000; rss: 48MB	plugin loading
time: 0.000; rss: 48MB	plugin registration
time: 0.020; rss: 82MB	expansion
time: 0.000; rss: 82MB	gated configuration checking
time: 0.000; rss: 82MB	maybe building test harness
time: 0.000; rss: 82MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 82MB	complete gated feature checking
Post-expansion node count: 1146
time: 0.000; rss: 82MB	assigning node ids
time: 0.000; rss: 82MB	collecting defs
time: 0.005; rss: 86MB	external crate/lib resolution
time: 0.000; rss: 86MB	early lint checks
time: 0.000; rss: 86MB	AST validation
time: 0.001; rss: 86MB	name resolution
time: 0.000; rss: 86MB	lowering ast -> hir
time: 0.000; rss: 86MB	indexing hir
time: 0.000; rss: 86MB	attribute checking
time: 0.000; rss: 86MB	language item collection
time: 0.000; rss: 86MB	lifetime resolution
time: 0.000; rss: 86MB	looking for entry point
time: 0.000; rss: 86MB	looking for plugin registrar
time: 0.000; rss: 86MB	region resolution
time: 0.000; rss: 86MB	loop checking
time: 0.000; rss: 86MB	static item recursion checking
time: 0.000; rss: 86MB	load_dep_graph
time: 0.001; rss: 86MB	type collecting
time: 0.000; rss: 86MB	variance inference
time: 0.005; rss: 86MB	coherence checking
time: 0.007; rss: 90MB	wf checking
time: 0.000; rss: 90MB	item-types checking
time: 0.047; rss: 99MB	item-bodies checking
time: 0.000; rss: 99MB	drop-impl checking
time: 0.001; rss: 99MB	const checking
time: 0.000; rss: 99MB	privacy checking
time: 0.000; rss: 99MB	stability index
time: 0.000; rss: 99MB	intrinsic checking
time: 0.000; rss: 99MB	effect checking
time: 0.000; rss: 99MB	match checking
time: 0.000; rss: 99MB	liveness checking
time: 0.000; rss: 99MB	rvalue checking
time: 0.001; rss: 99MB	MIR dump
time: 0.001; rss: 99MB	MIR passes
time: 0.001; rss: 99MB	borrow checking
time: 0.000; rss: 99MB	reachability checking
time: 0.000; rss: 99MB	death checking
time: 0.000; rss: 99MB	stability checking
time: 0.000; rss: 99MB	unused lib feature checking
time: 0.004; rss: 99MB	lint checking
time: 0.002; rss: 99MB	resolving dependency formats
time: 0.002; rss: 99MB	Prepare MIR codegen passes
  time: 0.000; rss: 99MB	write metadata
  time: 0.613; rss: 105MB	translation item collection
  time: 0.000; rss: 105MB	codegen unit partitioning
time: 2.911; rss: 131MB	translation
time: 0.000; rss: 131MB	assert dep graph
time: 0.000; rss: 131MB	serialize dep graph
  time: 0.014; rss: 108MB	llvm function passes [0]
  time: 0.001; rss: 108MB	llvm module passes [0]
  time: 0.274; rss: 114MB	codegen passes [0]
  time: 0.000; rss: 108MB	codegen passes [0]
time: 0.296; rss: 107MB	LLVM passes
  time: 0.121; rss: 107MB	running linker
time: 0.122; rss: 107MB	linking
done
