commit e1d2bc2916b5b5840789d7e7fc89e4647063bfa0
Merge: f013914 e0b82d5
Author: bors <bors@rust-lang.org>
Date:   Tue Aug 9 10:00:54 2016 -0700

    Auto merge of #35166 - nikomatsakis:incr-comp-ice-34991-2, r=mw
    
    Address ICEs running w/ incremental compilation and building glium
    
    Fixes for various ICEs I encountered trying to build glium with incremental compilation enabled. Building glium now works. Of the 4 ICEs, I have test cases for 3 of them -- I didn't isolate a test for the last commit and kind of want to go do other things -- most notably, figuring out why incremental isn't saving much *effort*.
    
    But if it seems worthwhile and I can come back and try to narrow down the problem.
    
    r? @michaelwoerister
    
    Fixes #34991
    Fixes #32015
rustc: ./rust-encoding.0.2.32
cargo rustc -- -Ztime-passes -Zinput-stats
    Updating registry `https://github.com/rust-lang/crates.io-index`
   Compiling encoding_index_tests v0.1.4 (file:///root/benchmarks/rust-encoding.0.2.32)
   Compiling encoding-index-simpchinese v1.20141219.5 (file:///root/benchmarks/rust-encoding.0.2.32)
   Compiling encoding-index-tradchinese v1.20141219.5 (file:///root/benchmarks/rust-encoding.0.2.32)
   Compiling encoding-index-japanese v1.20141219.5 (file:///root/benchmarks/rust-encoding.0.2.32)
   Compiling encoding-index-korean v1.20141219.5 (file:///root/benchmarks/rust-encoding.0.2.32)
   Compiling encoding-index-singlebyte v1.20141219.5 (file:///root/benchmarks/rust-encoding.0.2.32)
   Compiling encoding v0.2.32 (file:///root/benchmarks/rust-encoding.0.2.32)
time: 0.020; rss: 56MB	parsing
Lines of code:             6441
Pre-expansion node count:  30069
time: 0.002; rss: 56MB	configuration
time: 0.000; rss: 56MB	recursion limit
time: 0.000; rss: 56MB	crate injection
time: 0.000; rss: 56MB	plugin loading
time: 0.000; rss: 56MB	plugin registration
time: 0.038; rss: 94MB	expansion
time: 0.000; rss: 94MB	maybe building test harness
time: 0.002; rss: 94MB	assigning node ids
Post-expansion node count: 40757
time: 0.000; rss: 94MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 94MB	complete gated feature checking
time: 0.001; rss: 94MB	collecting defs
time: 0.001; rss: 95MB	external crate/lib resolution
time: 0.001; rss: 95MB	early lint checks
time: 0.000; rss: 95MB	AST validation
time: 0.005; rss: 95MB	name resolution
time: 0.004; rss: 98MB	lowering ast -> hir
time: 0.001; rss: 98MB	indexing hir
time: 0.000; rss: 98MB	attribute checking
time: 0.000; rss: 98MB	language item collection
time: 0.001; rss: 98MB	lifetime resolution
time: 0.000; rss: 98MB	looking for entry point
time: 0.000; rss: 98MB	looking for plugin registrar
time: 0.002; rss: 99MB	region resolution
time: 0.000; rss: 99MB	loop checking
time: 0.000; rss: 99MB	static item recursion checking
time: 0.000; rss: 99MB	load_dep_graph
time: 0.008; rss: 101MB	type collecting
time: 0.000; rss: 101MB	variance inference
time: 0.021; rss: 105MB	coherence checking
time: 0.018; rss: 106MB	wf checking
time: 0.014; rss: 106MB	item-types checking
time: 0.200; rss: 114MB	item-bodies checking
time: 0.000; rss: 114MB	drop-impl checking
time: 0.012; rss: 114MB	const checking
time: 0.002; rss: 114MB	privacy checking
time: 0.000; rss: 114MB	stability index
time: 0.002; rss: 114MB	intrinsic checking
time: 0.000; rss: 114MB	effect checking
time: 0.007; rss: 114MB	match checking
time: 0.001; rss: 114MB	liveness checking
time: 0.007; rss: 114MB	rvalue checking
time: 0.019; rss: 120MB	MIR dump
time: 0.013; rss: 121MB	MIR passes
time: 0.023; rss: 121MB	borrow checking
time: 0.000; rss: 121MB	reachability checking
time: 0.002; rss: 121MB	death checking
time: 0.002; rss: 121MB	stability checking
time: 0.000; rss: 121MB	unused lib feature checking
time: 0.024; rss: 123MB	lint checking
time: 0.000; rss: 123MB	resolving dependency formats
time: 0.027; rss: 122MB	Prepare MIR codegen passes
  time: 0.055; rss: 127MB	write metadata
  time: 0.030; rss: 129MB	translation item collection
  time: 0.003; rss: 129MB	codegen unit partitioning
  time: 0.005; rss: 158MB	internalize symbols
time: 0.374; rss: 158MB	translation
time: 0.000; rss: 158MB	assert dep graph
time: 0.000; rss: 158MB	serialize dep graph
  time: 0.027; rss: 122MB	llvm function passes [0]
  time: 0.057; rss: 126MB	llvm module passes [0]
  time: 0.639; rss: 133MB	codegen passes [0]
  time: 0.001; rss: 133MB	codegen passes [0]
time: 0.778; rss: 132MB	LLVM passes
time: 0.000; rss: 132MB	serialize work products
time: 0.059; rss: 109MB	linking
done
