commit 6572a463116a31efba8bfddb2e64ed659311b8a1
Merge: 6dc035e ee338c3
Author: bors <bors@rust-lang.org>
Date:   Sun Oct 16 04:22:21 2016 -0700

    Auto merge of #37129 - arielb1:erased-normal, r=eddyb
    
    normalize types every time HR regions are erased
    
    Associated type normalization is inhibited by higher-ranked regions.
    Therefore, every time we erase them, we must re-normalize.
    
    I was meaning to introduce this change some time ago, but we used
    to erase regions in generic context, which broke this terribly (because
    you can't always normalize in a generic context). That seems to be gone
    now.
    
    Ensure this by having a `erase_late_bound_regions_and_normalize`
    function.
    
    Fixes #37109 (the missing call was in mir::block).
    
    r? @eddyb
rustc: ./html5ever-2016-08-25
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling html5ever v0.5.4 (file:///root/benchmarks/html5ever-2016-08-25)
time: 0.045; rss: 45MB	parsing
Lines of code:             8210
Pre-expansion node count:  52238
time: 0.000; rss: 45MB	recursion limit
time: 0.000; rss: 45MB	crate injection
time: 0.000; rss: 45MB	plugin loading
time: 0.000; rss: 45MB	plugin registration
time: 1.355; rss: 98MB	expansion
time: 0.000; rss: 98MB	maybe building test harness
time: 0.002; rss: 98MB	maybe creating a macro crate
Post-expansion node count: 163524
time: 0.000; rss: 98MB	checking for inline asm in case the target doesn't support it
time: 0.003; rss: 98MB	complete gated feature checking
time: 0.008; rss: 98MB	early lint checks
time: 0.002; rss: 98MB	AST validation
time: 0.022; rss: 102MB	name resolution
time: 0.032; rss: 118MB	lowering ast -> hir
time: 0.011; rss: 122MB	indexing hir
time: 0.002; rss: 122MB	attribute checking
time: 0.002; rss: 100MB	language item collection
time: 0.003; rss: 100MB	lifetime resolution
time: 0.000; rss: 100MB	looking for entry point
time: 0.000; rss: 100MB	looking for plugin registrar
time: 0.024; rss: 105MB	region resolution
time: 0.002; rss: 105MB	loop checking
time: 0.003; rss: 105MB	static item recursion checking
time: 0.023; rss: 106MB	compute_incremental_hashes_map
time: 0.000; rss: 106MB	load_dep_graph
time: 0.010; rss: 107MB	type collecting
time: 0.000; rss: 107MB	variance inference
time: 0.025; rss: 111MB	coherence checking
time: 0.025; rss: 111MB	wf checking
time: 0.430; rss: 120MB	item-types checking
time: 0.517; rss: 131MB	item-bodies checking
time: 0.000; rss: 131MB	drop-impl checking
time: 0.072; rss: 134MB	const checking
time: 0.009; rss: 134MB	privacy checking
time: 0.002; rss: 134MB	stability index
time: 0.004; rss: 134MB	intrinsic checking
time: 0.003; rss: 134MB	effect checking
time: 0.024; rss: 134MB	match checking
time: 0.041; rss: 128MB	liveness checking
time: 0.028; rss: 128MB	rvalue checking
time: 0.140; rss: 178MB	MIR dump
  time: 0.011; rss: 167MB	SimplifyCfg
  time: 0.015; rss: 168MB	QualifyAndPromoteConstants
  time: 0.025; rss: 168MB	TypeckMir
  time: 0.000; rss: 168MB	SimplifyBranches
  time: 0.004; rss: 168MB	SimplifyCfg
time: 0.055; rss: 168MB	MIR passes
time: 0.092; rss: 176MB	borrow checking
time: 0.003; rss: 176MB	reachability checking
time: 0.008; rss: 176MB	death checking
time: 0.009; rss: 176MB	stability checking
time: 0.000; rss: 176MB	unused lib feature checking
time: 0.065; rss: 177MB	lint checking
time: 0.000; rss: 177MB	resolving dependency formats
  time: 0.000; rss: 177MB	NoLandingPads
  time: 0.004; rss: 177MB	SimplifyCfg
  time: 0.010; rss: 177MB	EraseRegions
  time: 0.001; rss: 177MB	AddCallGuards
  time: 0.075; rss: 181MB	ElaborateDrops
  time: 0.000; rss: 181MB	NoLandingPads
  time: 0.007; rss: 179MB	SimplifyCfg
  time: 0.008; rss: 177MB	InstCombine
  time: 0.001; rss: 177MB	Deaggregator
  time: 0.000; rss: 177MB	CopyPropagation
  time: 0.001; rss: 177MB	AddCallGuards
  time: 0.000; rss: 177MB	PreTrans
time: 0.109; rss: 177MB	Prepare MIR codegen passes
  time: 0.053; rss: 178MB	write metadata
  time: 0.050; rss: 180MB	translation item collection
  time: 0.005; rss: 180MB	codegen unit partitioning
  time: 0.006; rss: 195MB	internalize symbols
time: 0.371; rss: 165MB	translation
time: 0.000; rss: 165MB	assert dep graph
time: 0.000; rss: 165MB	serialize dep graph
  time: 0.020; rss: 100MB	llvm function passes [0]
  time: 0.012; rss: 101MB	llvm module passes [0]
  time: 0.459; rss: 103MB	codegen passes [0]
  time: 0.001; rss: 103MB	codegen passes [0]
time: 0.531; rss: 103MB	LLVM passes
time: 0.000; rss: 103MB	serialize work products
time: 0.058; rss: 86MB	linking
done
