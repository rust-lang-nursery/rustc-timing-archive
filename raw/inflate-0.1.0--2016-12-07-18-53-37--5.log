commit 7b06438d8349c1a6bbeb29c2a1bd874553a8625c
Merge: 535b6d3 0f7a18b
Author: bors <bors@rust-lang.org>
Date:   Wed Dec 7 23:06:10 2016 +0000

    Auto merge of #38191 - oli-obk:clippy_is_sad, r=eddyb
    
    annotate stricter lifetimes on LateLintPass methods to allow them to forward to a Visitor
    
    this unblocks clippy (rustup blocked after #37918)
    
    clippy has lots of lints that internally call an `intravisit::Visitor`, but the current lifetimes on `LateLintPass` methods conflicted with the required lifetimes (there was no connection between the HIR elements and the `TyCtxt`)
    
    r? @Manishearth
rustc: ./inflate-0.1.0
cargo rustc  -- -Ztime-passes -Zinput-stats
time: 0.003; rss: 44MB	parsing
Lines of code:             956
Pre-expansion node count:  4736
time: 0.000; rss: 44MB	recursion limit
time: 0.000; rss: 44MB	crate injection
time: 0.000; rss: 44MB	plugin loading
time: 0.000; rss: 44MB	plugin registration
time: 0.058; rss: 75MB	expansion
time: 0.000; rss: 75MB	maybe building test harness
time: 0.000; rss: 75MB	maybe creating a macro crate
Post-expansion node count: 55748
time: 0.000; rss: 75MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 75MB	complete gated feature checking
time: 0.002; rss: 75MB	early lint checks
time: 0.000; rss: 75MB	AST validation
time: 0.007; rss: 75MB	name resolution
time: 0.006; rss: 79MB	lowering ast -> hir
time: 0.001; rss: 79MB	indexing hir
time: 0.001; rss: 79MB	attribute checking
time: 0.000; rss: 76MB	language item collection
time: 0.001; rss: 76MB	lifetime resolution
time: 0.000; rss: 76MB	looking for entry point
time: 0.000; rss: 76MB	looking for plugin registrar
time: 0.002; rss: 76MB	region resolution
time: 0.000; rss: 76MB	loop checking
time: 0.000; rss: 76MB	static item recursion checking
time: 0.018; rss: 76MB	compute_incremental_hashes_map
time: 0.000; rss: 76MB	load_dep_graph
time: 0.000; rss: 76MB	stability index
time: 0.001; rss: 76MB	stability checking
time: 0.001; rss: 78MB	type collecting
time: 0.000; rss: 78MB	variance inference
time: 0.000; rss: 78MB	impl wf inference
time: 0.005; rss: 80MB	coherence checking
time: 0.001; rss: 80MB	wf checking
time: 0.002; rss: 80MB	item-types checking
time: 1.566; rss: 89MB	item-bodies checking
time: 0.000; rss: 89MB	drop-impl checking
time: 0.014; rss: 89MB	const checking
time: 0.001; rss: 89MB	privacy checking
time: 0.000; rss: 89MB	intrinsic checking
time: 0.000; rss: 89MB	effect checking
time: 0.002; rss: 89MB	match checking
time: 0.065; rss: 88MB	liveness checking
time: 0.011; rss: 87MB	rvalue checking
time: 0.034; rss: 105MB	MIR dump
  time: 0.007; rss: 106MB	SimplifyCfg
  time: 0.005; rss: 107MB	QualifyAndPromoteConstants
  time: 0.007; rss: 107MB	TypeckMir
  time: 0.000; rss: 107MB	SimplifyBranches
  time: 0.002; rss: 107MB	SimplifyCfg
time: 0.021; rss: 107MB	MIR cleanup and validation
time: 0.194; rss: 106MB	borrow checking
time: 0.000; rss: 106MB	reachability checking
time: 0.002; rss: 106MB	death checking
time: 0.000; rss: 106MB	unused lib feature checking
time: 0.015; rss: 108MB	lint checking
time: 0.000; rss: 108MB	resolving dependency formats
  time: 0.000; rss: 108MB	NoLandingPads
  time: 0.002; rss: 108MB	SimplifyCfg
  time: 0.002; rss: 108MB	EraseRegions
  time: 0.001; rss: 108MB	AddCallGuards
  time: 0.223; rss: 112MB	ElaborateDrops
  time: 0.000; rss: 112MB	NoLandingPads
  time: 0.006; rss: 110MB	SimplifyCfg
  time: 0.002; rss: 110MB	InstCombine
  time: 0.000; rss: 110MB	Deaggregator
  time: 0.000; rss: 110MB	CopyPropagation
  time: 0.003; rss: 110MB	SimplifyLocals
  time: 0.001; rss: 110MB	AddCallGuards
  time: 0.000; rss: 110MB	PreTrans
time: 0.241; rss: 110MB	MIR optimisations
  time: 0.001; rss: 111MB	write metadata
  time: 0.008; rss: 115MB	translation item collection
  time: 0.001; rss: 115MB	codegen unit partitioning
  time: 0.001; rss: 128MB	internalize symbols
time: 0.183; rss: 128MB	translation
time: 0.000; rss: 128MB	assert dep graph
time: 0.000; rss: 128MB	serialize dep graph
  time: 0.027; rss: 93MB	llvm function passes [0]
  time: 0.007; rss: 94MB	llvm module passes [0]
  time: 0.659; rss: 100MB	codegen passes [0]
  time: 0.000; rss: 100MB	codegen passes [0]
time: 0.727; rss: 100MB	LLVM passes
time: 0.000; rss: 100MB	serialize work products
time: 0.019; rss: 85MB	linking
done
