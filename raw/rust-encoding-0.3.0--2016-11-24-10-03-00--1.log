commit ddf011d7730594f4db36b01858b8c6733b07c084
Merge: 217f57c 75825fe
Author: bors <bors@rust-lang.org>
Date:   Thu Nov 24 08:26:36 2016 -0600

    Auto merge of #37770 - pnkfelix:print-type-sizes, r=arielb1
    
    Add debug flag `-Z print-type-sizes` for instrumention type/variant sizes
    
    Add debug flag `-Z print-type-sizes` for instrumention type/variant sizes
    
    This is meant to help with things like #36799 in a very local way; namely, once you have a hypothesis as to which types have a large population or are "too large", you can use `-Z print-type-sizes` to learn how large each type is, and how much each variant in an enum contributes to the size of that overall enum.
rustc: ./rust-encoding-0.3.0
cargo rustc  -- -Ztime-passes -Zinput-stats
   Compiling encoding v0.3.0-dev (file:///root/benchmarks/rust-encoding-0.3.0)
time: 0.016; rss: 45MB	parsing
Lines of code:             5757
Pre-expansion node count:  26523
time: 0.000; rss: 45MB	recursion limit
time: 0.000; rss: 45MB	crate injection
time: 0.000; rss: 45MB	plugin loading
time: 0.000; rss: 45MB	plugin registration
time: 0.030; rss: 75MB	expansion
time: 0.000; rss: 75MB	maybe building test harness
time: 0.000; rss: 75MB	maybe creating a macro crate
Post-expansion node count: 37888
time: 0.000; rss: 75MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 75MB	complete gated feature checking
time: 0.001; rss: 75MB	early lint checks
time: 0.000; rss: 75MB	AST validation
time: 0.004; rss: 75MB	name resolution
time: 0.003; rss: 77MB	lowering ast -> hir
time: 0.000; rss: 77MB	indexing hir
time: 0.000; rss: 77MB	attribute checking
time: 0.000; rss: 77MB	language item collection
time: 0.000; rss: 77MB	lifetime resolution
time: 0.000; rss: 77MB	looking for entry point
time: 0.000; rss: 77MB	looking for plugin registrar
time: 0.002; rss: 78MB	region resolution
time: 0.000; rss: 78MB	loop checking
time: 0.000; rss: 78MB	static item recursion checking
time: 0.013; rss: 79MB	compute_incremental_hashes_map
time: 0.000; rss: 79MB	load_dep_graph
time: 0.007; rss: 80MB	type collecting
time: 0.000; rss: 80MB	variance inference
time: 0.000; rss: 80MB	impl wf inference
time: 0.007; rss: 81MB	coherence checking
time: 0.010; rss: 81MB	wf checking
time: 0.009; rss: 81MB	item-types checking
time: 0.111; rss: 86MB	item-bodies checking
time: 0.000; rss: 86MB	drop-impl checking
time: 0.007; rss: 86MB	const checking
time: 0.001; rss: 86MB	privacy checking
time: 0.000; rss: 86MB	stability index
time: 0.001; rss: 86MB	intrinsic checking
time: 0.000; rss: 86MB	effect checking
time: 0.004; rss: 86MB	match checking
time: 0.001; rss: 86MB	liveness checking
time: 0.004; rss: 86MB	rvalue checking
time: 0.017; rss: 93MB	MIR dump
  time: 0.002; rss: 93MB	SimplifyCfg
  time: 0.003; rss: 93MB	QualifyAndPromoteConstants
  time: 0.004; rss: 93MB	TypeckMir
  time: 0.000; rss: 93MB	SimplifyBranches
  time: 0.001; rss: 93MB	SimplifyCfg
time: 0.011; rss: 93MB	MIR cleanup and validation
time: 0.017; rss: 93MB	borrow checking
time: 0.000; rss: 93MB	reachability checking
time: 0.001; rss: 93MB	death checking
time: 0.001; rss: 93MB	stability checking
time: 0.000; rss: 93MB	unused lib feature checking
time: 0.013; rss: 93MB	lint checking
time: 0.000; rss: 93MB	resolving dependency formats
  time: 0.000; rss: 93MB	NoLandingPads
  time: 0.001; rss: 93MB	SimplifyCfg
  time: 0.002; rss: 93MB	EraseRegions
  time: 0.000; rss: 93MB	AddCallGuards
  time: 0.022; rss: 95MB	ElaborateDrops
  time: 0.000; rss: 95MB	NoLandingPads
  time: 0.002; rss: 95MB	SimplifyCfg
  time: 0.001; rss: 95MB	InstCombine
  time: 0.001; rss: 95MB	Deaggregator
  time: 0.000; rss: 95MB	CopyPropagation
  time: 0.001; rss: 95MB	SimplifyLocals
  time: 0.000; rss: 95MB	AddCallGuards
  time: 0.000; rss: 95MB	PreTrans
time: 0.031; rss: 95MB	MIR optimisations
  time: 0.004; rss: 95MB	write metadata
  time: 0.135; rss: 179MB	translation item collection
  time: 0.002; rss: 179MB	codegen unit partitioning
  time: 0.002; rss: 202MB	internalize symbols
time: 0.383; rss: 202MB	translation
time: 0.000; rss: 202MB	assert dep graph
time: 0.000; rss: 202MB	serialize dep graph
  time: 0.025; rss: 116MB	llvm function passes [0]
  time: 0.056; rss: 121MB	llvm module passes [0]
  time: 0.630; rss: 126MB	codegen passes [0]
  time: 0.000; rss: 126MB	codegen passes [0]
time: 0.766; rss: 126MB	LLVM passes
time: 0.000; rss: 126MB	serialize work products
time: 0.039; rss: 96MB	linking
done
