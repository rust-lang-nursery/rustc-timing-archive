commit 98a3502da1456b209ff031604cabbbcb9d0eddf1
Merge: 5bfe107 a61d85b
Author: bors <bors@rust-lang.org>
Date:   Sat Oct 15 15:38:52 2016 -0700

    Auto merge of #37152 - arielb1:drop-cache, r=pnkfelix
    
    add a per-param-env cache to `impls_bound`
    
    There used to be only a global cache, which led to uncached calls to
    trait selection when there were type parameters.
    
    This causes a 20% decrease in borrow-checking time and an overall 0.5% performance increase during bootstrapping (as borrow-checking tends to be a tiny part of compilation time).
    
    Fixes #37106 (drop elaboration times are now ~half of borrow checking,
    so might still be worthy of optimization, but not critical).
    
    r? @pnkfelix
rustc: ./futures-rs-test-all
cargo rustc --test all -- -Ztime-passes -Zinput-stats
   Compiling futures v0.1.0 (file:///root/benchmarks/futures-rs-test-all)
time: 0.003; rss: 43MB	parsing
Lines of code:             412
Pre-expansion node count:  5522
time: 0.000; rss: 43MB	recursion limit
time: 0.000; rss: 43MB	crate injection
time: 0.000; rss: 43MB	plugin loading
time: 0.000; rss: 43MB	plugin registration
time: 0.023; rss: 69MB	expansion
time: 0.002; rss: 69MB	maybe building test harness
time: 0.000; rss: 69MB	maybe creating a macro crate
Post-expansion node count: 10623
time: 0.000; rss: 69MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 69MB	complete gated feature checking
time: 0.000; rss: 69MB	early lint checks
time: 0.000; rss: 69MB	AST validation
time: 0.004; rss: 69MB	name resolution
time: 0.001; rss: 69MB	lowering ast -> hir
time: 0.000; rss: 69MB	indexing hir
time: 0.000; rss: 69MB	attribute checking
time: 0.000; rss: 69MB	language item collection
time: 0.000; rss: 69MB	lifetime resolution
time: 0.000; rss: 69MB	looking for entry point
time: 0.000; rss: 69MB	looking for plugin registrar
time: 0.001; rss: 69MB	region resolution
time: 0.000; rss: 69MB	loop checking
time: 0.000; rss: 69MB	static item recursion checking
time: 0.003; rss: 69MB	compute_incremental_hashes_map
time: 0.000; rss: 69MB	load_dep_graph
time: 0.005; rss: 74MB	type collecting
time: 0.000; rss: 74MB	variance inference
time: 0.004; rss: 74MB	coherence checking
time: 0.013; rss: 74MB	wf checking
time: 0.002; rss: 74MB	item-types checking
time: 0.152; rss: 78MB	item-bodies checking
time: 0.000; rss: 78MB	drop-impl checking
time: 0.004; rss: 79MB	const checking
time: 0.000; rss: 79MB	privacy checking
time: 0.000; rss: 79MB	stability index
time: 0.000; rss: 79MB	intrinsic checking
time: 0.000; rss: 79MB	effect checking
time: 0.001; rss: 79MB	match checking
time: 0.001; rss: 79MB	liveness checking
time: 0.003; rss: 79MB	rvalue checking
time: 0.007; rss: 81MB	MIR dump
  time: 0.001; rss: 81MB	SimplifyCfg
  time: 0.002; rss: 81MB	QualifyAndPromoteConstants
  time: 0.002; rss: 81MB	TypeckMir
  time: 0.000; rss: 81MB	SimplifyBranches
  time: 0.000; rss: 81MB	SimplifyCfg
time: 0.005; rss: 81MB	MIR passes
time: 0.007; rss: 82MB	borrow checking
time: 0.000; rss: 82MB	reachability checking
time: 0.000; rss: 82MB	death checking
time: 0.001; rss: 82MB	stability checking
time: 0.000; rss: 82MB	unused lib feature checking
time: 0.003; rss: 82MB	lint checking
time: 0.001; rss: 82MB	resolving dependency formats
  time: 0.000; rss: 82MB	NoLandingPads
  time: 0.000; rss: 82MB	SimplifyCfg
  time: 0.001; rss: 82MB	EraseRegions
  time: 0.000; rss: 82MB	AddCallGuards
  time: 0.006; rss: 83MB	ElaborateDrops
  time: 0.000; rss: 83MB	NoLandingPads
  time: 0.001; rss: 83MB	SimplifyCfg
  time: 0.000; rss: 83MB	InstCombine
  time: 0.000; rss: 83MB	Deaggregator
  time: 0.000; rss: 83MB	CopyPropagation
  time: 0.000; rss: 83MB	AddCallGuards
  time: 0.000; rss: 83MB	PreTrans
time: 0.010; rss: 83MB	Prepare MIR codegen passes
  time: 0.000; rss: 83MB	write metadata
  time: 0.212; rss: 91MB	translation item collection
  time: 0.021; rss: 93MB	codegen unit partitioning
  time: 0.021; rss: 145MB	internalize symbols
time: 1.452; rss: 145MB	translation
time: 0.000; rss: 145MB	assert dep graph
time: 0.000; rss: 145MB	serialize dep graph
  time: 0.084; rss: 130MB	llvm function passes [0]
  time: 0.028; rss: 132MB	llvm module passes [0]
  time: 1.859; rss: 135MB	codegen passes [0]
  time: 0.000; rss: 135MB	codegen passes [0]
time: 1.972; rss: 135MB	LLVM passes
time: 0.000; rss: 135MB	serialize work products
  time: 0.173; rss: 83MB	running linker
time: 0.175; rss: 83MB	linking
done
