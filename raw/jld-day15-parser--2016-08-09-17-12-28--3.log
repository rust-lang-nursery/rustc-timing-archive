commit e1d2bc2916b5b5840789d7e7fc89e4647063bfa0
Merge: f013914 e0b82d5
Author: bors <bors@rust-lang.org>
Date:   Tue Aug 9 10:00:54 2016 -0700

    Auto merge of #35166 - nikomatsakis:incr-comp-ice-34991-2, r=mw
    
    Address ICEs running w/ incremental compilation and building glium
    
    Fixes for various ICEs I encountered trying to build glium with incremental compilation enabled. Building glium now works. Of the 4 ICEs, I have test cases for 3 of them -- I didn't isolate a test for the last commit and kind of want to go do other things -- most notably, figuring out why incremental isn't saving much *effort*.
    
    But if it seems worthwhile and I can come back and try to narrow down the problem.
    
    r? @michaelwoerister
    
    Fixes #34991
    Fixes #32015
rustc: ./jld-day15-parser
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling day15 v0.1.0 (file:///root/benchmarks/jld-day15-parser)
time: 0.001; rss: 50MB	parsing
Lines of code:             72
Pre-expansion node count:  654
time: 0.000; rss: 50MB	configuration
time: 0.000; rss: 50MB	recursion limit
time: 0.000; rss: 50MB	crate injection
time: 0.000; rss: 50MB	plugin loading
time: 0.000; rss: 50MB	plugin registration
time: 0.017; rss: 86MB	expansion
time: 0.000; rss: 86MB	maybe building test harness
time: 0.000; rss: 86MB	assigning node ids
Post-expansion node count: 1155
time: 0.000; rss: 86MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 86MB	complete gated feature checking
time: 0.000; rss: 86MB	collecting defs
time: 0.003; rss: 90MB	external crate/lib resolution
time: 0.000; rss: 90MB	early lint checks
time: 0.000; rss: 90MB	AST validation
time: 0.001; rss: 90MB	name resolution
time: 0.000; rss: 90MB	lowering ast -> hir
time: 0.000; rss: 90MB	indexing hir
time: 0.000; rss: 90MB	attribute checking
time: 0.000; rss: 90MB	language item collection
time: 0.000; rss: 90MB	lifetime resolution
time: 0.000; rss: 90MB	looking for entry point
time: 0.000; rss: 90MB	looking for plugin registrar
time: 0.000; rss: 90MB	region resolution
time: 0.000; rss: 90MB	loop checking
time: 0.000; rss: 90MB	static item recursion checking
time: 0.000; rss: 90MB	load_dep_graph
time: 0.001; rss: 90MB	type collecting
time: 0.000; rss: 90MB	variance inference
time: 0.005; rss: 90MB	coherence checking
time: 0.006; rss: 90MB	wf checking
time: 0.000; rss: 90MB	item-types checking
time: 0.044; rss: 99MB	item-bodies checking
time: 0.000; rss: 99MB	drop-impl checking
time: 0.001; rss: 102MB	const checking
time: 0.000; rss: 102MB	privacy checking
time: 0.000; rss: 102MB	stability index
time: 0.000; rss: 102MB	intrinsic checking
time: 0.000; rss: 102MB	effect checking
time: 0.000; rss: 102MB	match checking
time: 0.000; rss: 102MB	liveness checking
time: 0.000; rss: 102MB	rvalue checking
time: 0.001; rss: 102MB	MIR dump
time: 0.001; rss: 102MB	MIR passes
time: 0.001; rss: 102MB	borrow checking
time: 0.000; rss: 102MB	reachability checking
time: 0.000; rss: 102MB	death checking
time: 0.000; rss: 102MB	stability checking
time: 0.000; rss: 102MB	unused lib feature checking
time: 0.004; rss: 102MB	lint checking
time: 0.001; rss: 102MB	resolving dependency formats
time: 0.005; rss: 102MB	Prepare MIR codegen passes
  time: 0.000; rss: 102MB	write metadata
  time: 0.560; rss: 109MB	translation item collection
  time: 0.003; rss: 109MB	codegen unit partitioning
  time: 0.006; rss: 135MB	internalize symbols
time: 4.065; rss: 135MB	translation
time: 0.000; rss: 135MB	assert dep graph
time: 0.000; rss: 135MB	serialize dep graph
  time: 0.017; rss: 113MB	llvm function passes [0]
  time: 0.001; rss: 113MB	llvm module passes [0]
  time: 0.338; rss: 118MB	codegen passes [0]
  time: 0.000; rss: 118MB	codegen passes [0]
time: 0.357; rss: 118MB	LLVM passes
time: 0.000; rss: 118MB	serialize work products
  time: 0.121; rss: 108MB	running linker
time: 0.122; rss: 108MB	linking
done
