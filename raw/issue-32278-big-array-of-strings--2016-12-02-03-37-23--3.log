commit af0a0719ead0dc1c2787128f7290b57b8848c88b
Merge: 1077149 e1b752b
Author: bors <bors@rust-lang.org>
Date:   Fri Dec 2 07:35:06 2016 +0000

    Auto merge of #37936 - tedsta:fuchsia_std_process, r=alexcrichton
    
    Fuchsia support for std::process via liblaunchpad.
    
    Now we can launch processes on Fuchsia via the Rust standard library! ... Mostly.
    
    Right now, ~5% of the time, reading the stdout/stderr off the pipes will fail. Some Magenta kernel people think it's probably a bug in Magenta's pipes. I wrote a unit test that demonstrates the issue in C, which I was told will expedite a fix. https://fuchsia-review.googlesource.com/#/c/15628/
    
    Hopefully this can get merged once the issue is fixed :)
    
    @raphlinus
rustc: ./issue-32278-big-array-of-strings
cargo rustc  -- -Ztime-passes -Zinput-stats
time: 0.104; rss: 60MB	parsing
Lines of code:             65577
Pre-expansion node count:  65552
time: 0.000; rss: 60MB	recursion limit
time: 0.000; rss: 60MB	crate injection
time: 0.000; rss: 60MB	plugin loading
time: 0.000; rss: 60MB	plugin registration
time: 0.024; rss: 84MB	expansion
time: 0.000; rss: 84MB	maybe building test harness
time: 0.001; rss: 84MB	maybe creating a macro crate
Post-expansion node count: 65565
time: 0.000; rss: 84MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 84MB	complete gated feature checking
time: 0.004; rss: 84MB	early lint checks
time: 0.000; rss: 84MB	AST validation
time: 0.002; rss: 84MB	name resolution
time: 0.004; rss: 93MB	lowering ast -> hir
time: 0.001; rss: 97MB	indexing hir
time: 0.001; rss: 97MB	attribute checking
time: 0.000; rss: 86MB	language item collection
time: 0.000; rss: 86MB	lifetime resolution
time: 0.000; rss: 86MB	looking for entry point
time: 0.000; rss: 86MB	looking for plugin registrar
time: 0.007; rss: 92MB	region resolution
time: 0.000; rss: 92MB	loop checking
time: 0.001; rss: 92MB	static item recursion checking
time: 0.038; rss: 92MB	compute_incremental_hashes_map
time: 0.000; rss: 92MB	load_dep_graph
time: 0.000; rss: 92MB	stability index
time: 0.000; rss: 92MB	stability checking
time: 0.000; rss: 92MB	type collecting
time: 0.000; rss: 92MB	variance inference
time: 0.000; rss: 92MB	impl wf inference
time: 0.004; rss: 94MB	coherence checking
time: 0.000; rss: 94MB	wf checking
time: 0.519; rss: 107MB	item-types checking
time: 0.000; rss: 107MB	item-bodies checking
time: 0.000; rss: 107MB	drop-impl checking
time: 0.021; rss: 107MB	const checking
time: 0.001; rss: 107MB	privacy checking
time: 0.000; rss: 107MB	intrinsic checking
time: 0.000; rss: 107MB	effect checking
time: 0.000; rss: 107MB	match checking
time: 0.000; rss: 107MB	liveness checking
time: 0.000; rss: 107MB	rvalue checking
time: 0.036; rss: 115MB	MIR dump
  time: 0.000; rss: 115MB	SimplifyCfg
  time: 0.001; rss: 115MB	QualifyAndPromoteConstants
  time: 0.000; rss: 115MB	TypeckMir
  time: 0.000; rss: 115MB	SimplifyBranches
  time: 0.000; rss: 115MB	SimplifyCfg
time: 0.001; rss: 115MB	MIR cleanup and validation
time: 0.001; rss: 115MB	borrow checking
time: 0.000; rss: 115MB	reachability checking
time: 0.000; rss: 115MB	death checking
time: 0.000; rss: 115MB	unused lib feature checking
time: 0.021; rss: 115MB	lint checking
time: 0.001; rss: 115MB	resolving dependency formats
  time: 0.000; rss: 115MB	NoLandingPads
  time: 0.000; rss: 115MB	SimplifyCfg
  time: 0.001; rss: 115MB	EraseRegions
  time: 0.000; rss: 115MB	AddCallGuards
  time: 0.000; rss: 115MB	ElaborateDrops
  time: 0.000; rss: 115MB	NoLandingPads
  time: 0.000; rss: 115MB	SimplifyCfg
  time: 0.000; rss: 115MB	InstCombine
  time: 0.000; rss: 115MB	Deaggregator
  time: 0.000; rss: 115MB	CopyPropagation
  time: 0.000; rss: 115MB	SimplifyLocals
  time: 0.000; rss: 115MB	AddCallGuards
  time: 0.000; rss: 115MB	PreTrans
time: 0.001; rss: 115MB	MIR optimisations
  time: 0.000; rss: 116MB	write metadata
  time: 0.000; rss: 116MB	translation item collection
  time: 0.000; rss: 116MB	codegen unit partitioning
  time: 0.001; rss: 126MB	internalize symbols
time: 0.056; rss: 126MB	translation
time: 0.000; rss: 126MB	assert dep graph
time: 0.000; rss: 126MB	serialize dep graph
  time: 0.008; rss: 91MB	llvm function passes [0]
  time: 0.000; rss: 91MB	llvm module passes [0]
  time: 0.189; rss: 92MB	codegen passes [0]
  time: 0.000; rss: 92MB	codegen passes [0]
time: 0.199; rss: 92MB	LLVM passes
time: 0.000; rss: 92MB	serialize work products
  time: 0.162; rss: 81MB	running linker
time: 0.163; rss: 81MB	linking
done
