commit 34d7f7e607aec07b6db2ccd5cab42f996220e148
Merge: 103e5c9 b9a3590
Author: bors <bors@rust-lang.org>
Date:   Sat Jul 16 21:09:15 2016 -0700

    Auto merge of #34606 - mathstuf:llvm-with-ninja, r=alexcrichton
    
    llvm, rt: build using the Ninja generator if available
    
    The Ninja generator generally builds much faster than make. It may also
    be used on Windows to have a vast speed improvement over the Visual
    Studio generators.
    
    Currently hidden behind an `--enable-ninja` flag because it does not
    obey the top-level `-j` or `-l` flags given to `make`.
rustc: ./regex.0.1.30
cargo rustc -- -Ztime-passes -Zinput-stats
    Updating registry `https://github.com/rust-lang/crates.io-index`
   Compiling regex v0.1.30 (file:///root/benchmarks/regex.0.1.30)
time: 0.064; rss: 99MB	parsing
Lines of code:             8558
Pre-expansion node count:  58076
time: 0.010; rss: 99MB	configuration
time: 0.000; rss: 99MB	recursion limit
time: 0.000; rss: 99MB	crate injection
time: 0.000; rss: 99MB	plugin loading
time: 0.000; rss: 99MB	plugin registration
time: 0.036; rss: 133MB	expansion
time: 0.000; rss: 133MB	maybe building test harness
time: 0.006; rss: 133MB	assigning node ids
Post-expansion node count: 68148
time: 0.000; rss: 133MB	checking for inline asm in case the target doesn't support it
time: 0.001; rss: 133MB	complete gated feature checking
time: 0.001; rss: 133MB	collecting defs
time: 0.001; rss: 133MB	external crate/lib resolution
time: 0.006; rss: 133MB	early lint checks
time: 0.001; rss: 133MB	AST validation
time: 0.007; rss: 136MB	name resolution
time: 0.009; rss: 145MB	lowering ast -> hir
time: 0.001; rss: 148MB	indexing hir
time: 0.001; rss: 148MB	attribute checking
time: 0.001; rss: 139MB	language item collection
time: 0.001; rss: 139MB	lifetime resolution
time: 0.000; rss: 139MB	looking for entry point
time: 0.000; rss: 139MB	looking for plugin registrar
time: 0.006; rss: 141MB	region resolution
time: 0.001; rss: 141MB	loop checking
time: 0.001; rss: 141MB	static item recursion checking
time: 0.000; rss: 141MB	load_dep_graph
time: 0.010; rss: 142MB	type collecting
time: 0.000; rss: 142MB	variance inference
time: 0.025; rss: 147MB	coherence checking
time: 0.014; rss: 147MB	wf checking
time: 0.328; rss: 156MB	item-types checking
time: 0.204; rss: 161MB	item-bodies checking
time: 0.000; rss: 161MB	drop-impl checking
time: 0.028; rss: 163MB	const checking
time: 0.004; rss: 163MB	privacy checking
time: 0.001; rss: 163MB	stability index
time: 0.002; rss: 163MB	intrinsic checking
time: 0.001; rss: 163MB	effect checking
time: 0.004; rss: 163MB	match checking
time: 0.002; rss: 163MB	liveness checking
time: 0.008; rss: 163MB	rvalue checking
time: 0.053; rss: 175MB	MIR dump
time: 0.022; rss: 175MB	MIR passes
time: 0.022; rss: 175MB	borrow checking
time: 0.000; rss: 175MB	reachability checking
time: 0.002; rss: 175MB	death checking
time: 0.002; rss: 175MB	stability checking
time: 0.000; rss: 175MB	unused lib feature checking
time: 0.028; rss: 175MB	lint checking
time: 0.000; rss: 175MB	resolving dependency formats
time: 0.019; rss: 177MB	Prepare MIR codegen passes
  time: 0.174; rss: 187MB	write metadata
  time: 0.059; rss: 188MB	translation item collection
  time: 0.008; rss: 188MB	codegen unit partitioning
time: 1.527; rss: 237MB	translation
time: 0.000; rss: 237MB	assert dep graph
time: 0.000; rss: 237MB	serialize dep graph
  time: 0.410; rss: 166MB	llvm function passes [0]
  time: 0.188; rss: 167MB	llvm module passes [0]
  time: 5.999; rss: 170MB	codegen passes [0]
  time: 0.002; rss: 170MB	codegen passes [0]
time: 7.031; rss: 170MB	LLVM passes
time: 0.063; rss: 150MB	linking
done
