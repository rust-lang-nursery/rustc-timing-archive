commit 9376da6f77e8b7ed204ee704b29e96213b69d0f1
Merge: 1bf5fa3 dc22186
Author: bors <bors@rust-lang.org>
Date:   Tue Aug 16 19:44:10 2016 -0700

    Auto merge of #35559 - frewsxcv:slice-iter-as-ref, r=alexcrichton
    
    Implement `AsRef<[T]>` for `std::slice::Iter`.
    
    `AsRef` is designed for conversions that are "cheap" (as per
    the API docs). It is the case that retrieving the underlying
    data of `std::slice::Iter` is cheap. In my opinion, there's no
    ambiguity about what slice data will be returned, otherwise,
    I would be more cautious about implementing `AsRef`.
rustc: ./hyper.0.5.0
cargo rustc -- -Ztime-passes -Zinput-stats
    Updating registry `https://github.com/rust-lang/crates.io-index`
   Compiling traitobject v0.0.1
   Compiling bitflags v0.3.3
   Compiling winapi-build v0.1.1
   Compiling libc v0.1.12
   Compiling rustc-serialize v0.3.19
   Compiling matches v0.1.2
   Compiling unicase v0.1.0
   Compiling gcc v0.3.32
   Compiling lazy_static v0.1.16
   Compiling pkg-config v0.3.8
   Compiling libc v0.2.15
   Compiling typeable v0.1.2
   Compiling log v0.3.6
   Compiling httparse v0.1.6
   Compiling kernel32-sys v0.2.2
   Compiling mime v0.0.11
   Compiling winapi v0.2.8
   Compiling num_cpus v0.2.13
   Compiling rand v0.3.14
   Compiling time v0.1.35
   Compiling openssl-sys v0.6.7
   Compiling openssl v0.6.7
   Compiling uuid v0.1.18
   Compiling url v0.2.38
   Compiling cookie v0.1.21
   Compiling hyper v0.5.0 (file:///root/benchmarks/hyper.0.5.0)
time: 0.026; rss: 50MB	parsing
Lines of code:             9154
Pre-expansion node count:  44838
time: 0.003; rss: 50MB	configuration
time: 0.000; rss: 50MB	recursion limit
time: 0.000; rss: 50MB	crate injection
time: 0.000; rss: 50MB	plugin loading
time: 0.000; rss: 50MB	plugin registration
time: 0.093; rss: 93MB	expansion
time: 0.000; rss: 93MB	maybe building test harness
time: 0.005; rss: 93MB	assigning node ids
Post-expansion node count: 101581
time: 0.000; rss: 93MB	checking for inline asm in case the target doesn't support it
time: 0.002; rss: 93MB	complete gated feature checking
time: 0.003; rss: 93MB	collecting defs
time: 0.010; rss: 105MB	external crate/lib resolution
time: 0.003; rss: 105MB	early lint checks
time: 0.001; rss: 105MB	AST validation
time: 0.020; rss: 111MB	name resolution
time: 0.008; rss: 117MB	lowering ast -> hir
time: 0.002; rss: 119MB	indexing hir
time: 0.001; rss: 119MB	attribute checking
time: 0.001; rss: 113MB	language item collection
time: 0.001; rss: 113MB	lifetime resolution
time: 0.000; rss: 113MB	looking for entry point
time: 0.000; rss: 113MB	looking for plugin registrar
time: 0.006; rss: 116MB	region resolution
time: 0.001; rss: 116MB	loop checking
time: 0.000; rss: 116MB	static item recursion checking
time: 0.000; rss: 116MB	load_dep_graph
time: 0.023; rss: 118MB	type collecting
time: 0.000; rss: 118MB	variance inference
time: 0.046; rss: 126MB	coherence checking
time: 0.081; rss: 128MB	wf checking
time: 0.033; rss: 128MB	item-types checking
time: 0.488; rss: 139MB	item-bodies checking
time: 0.000; rss: 139MB	drop-impl checking
time: 0.042; rss: 142MB	const checking
time: 0.006; rss: 142MB	privacy checking
time: 0.001; rss: 142MB	stability index
time: 0.005; rss: 142MB	intrinsic checking
time: 0.002; rss: 142MB	effect checking
time: 0.013; rss: 142MB	match checking
time: 0.005; rss: 142MB	liveness checking
time: 0.030; rss: 142MB	rvalue checking
time: 0.059; rss: 158MB	MIR dump
time: 0.044; rss: 158MB	MIR passes
time: 0.067; rss: 158MB	borrow checking
time: 0.003; rss: 158MB	reachability checking
time: 0.005; rss: 158MB	death checking
time: 0.006; rss: 161MB	stability checking
time: 0.000; rss: 161MB	unused lib feature checking
time: 0.049; rss: 161MB	lint checking
time: 0.000; rss: 161MB	resolving dependency formats
time: 0.097; rss: 163MB	Prepare MIR codegen passes
  time: 0.130; rss: 173MB	write metadata
  time: 0.179; rss: 178MB	translation item collection
  time: 0.020; rss: 182MB	codegen unit partitioning
  time: 0.034; rss: 310MB	internalize symbols
time: 1.824; rss: 310MB	translation
time: 0.000; rss: 310MB	assert dep graph
time: 0.000; rss: 310MB	serialize dep graph
  time: 0.098; rss: 187MB	llvm function passes [0]
  time: 0.048; rss: 190MB	llvm module passes [0]
  time: 1.821; rss: 192MB	codegen passes [0]
  time: 0.001; rss: 191MB	codegen passes [0]
time: 2.124; rss: 189MB	LLVM passes
time: 0.000; rss: 189MB	serialize work products
time: 0.695; rss: 122MB	linking
done
