commit fef6c64a8020c357dda902593f1065864564c079
Merge: 576229f e8441b6
Author: bors <bors@rust-lang.org>
Date:   Fri Apr 15 18:13:59 2016 -0700

    Auto merge of #32779 - michaelwoerister:partitioning, r=nikomatsakis
    
    Add initial version of codegen unit partitioning for incremental compilation.
    
    The task of the partitioning module is to take the complete set of translation items of a crate and produce a set of codegen units from it, where a codegen unit is a named set of (translation-item, linkage) pairs. That is, this module decides which translation item appears in which codegen units with which linkage.
    
    This version only handles the case of partitioning for incremental compilation, not the regular N-codegen units case. In the future the regular case should be handled too, maybe even doing a bit more analysis to intelligently figure out a good partitioning.
    
    One thing that could be improved is the syntax of the codegen unit tests. Right now they still use the compile-fail error specification infrastructure, so everything has to be on one line. Would be nice to be able to format things in a more readable way.
rustc: ./regex.0.1.30
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling regex v0.1.30 (file:///root/benchmarks/regex.0.1.30)
time: 0.059; rss: 53MB	parsing
Lines of code:             8558
Pre-expansion node count:  58217
time: 0.011; rss: 53MB	configuration 1
time: 0.000; rss: 53MB	recursion limit
time: 0.001; rss: 53MB	gated macro checking
time: 0.000; rss: 53MB	crate injection
time: 0.003; rss: 56MB	macro loading
time: 0.000; rss: 56MB	plugin loading
time: 0.000; rss: 56MB	plugin registration
time: 0.057; rss: 60MB	expansion
time: 0.001; rss: 60MB	complete gated feature checking 1
time: 0.012; rss: 60MB	configuration 2
time: 0.000; rss: 60MB	gated configuration checking
time: 0.006; rss: 60MB	maybe building test harness
time: 0.006; rss: 60MB	prelude injection
time: 0.000; rss: 60MB	checking that all macro invocations are gone
time: 0.000; rss: 60MB	checking for inline asm in case the target doesn't support it
time: 0.001; rss: 60MB	complete gated feature checking 2
time: 0.001; rss: 60MB	const fn bodies and arguments
Post-expansion node count: 68485
time: 0.006; rss: 60MB	assigning node ids
time: 0.009; rss: 70MB	lowering ast -> hir
time: 0.002; rss: 72MB	indexing hir
time: 0.001; rss: 72MB	attribute checking
time: 0.007; rss: 72MB	early lint checks
time: 0.001; rss: 65MB	external crate/lib resolution
time: 0.001; rss: 65MB	language item collection
time: 0.010; rss: 75MB	resolution
time: 0.001; rss: 75MB	lifetime resolution
time: 0.000; rss: 75MB	looking for entry point
time: 0.000; rss: 75MB	looking for plugin registrar
time: 0.006; rss: 79MB	region resolution
time: 0.001; rss: 79MB	loop checking
time: 0.001; rss: 79MB	static item recursion checking
time: 0.000; rss: 79MB	load_dep_graph
time: 0.007; rss: 90MB	type collecting
time: 0.000; rss: 90MB	variance inference
time: 0.024; rss: 100MB	coherence checking
time: 0.010; rss: 100MB	wf checking
time: 0.250; rss: 106MB	item-types checking
time: 0.187; rss: 119MB	item-bodies checking
time: 0.000; rss: 119MB	drop-impl checking
time: 0.023; rss: 119MB	const checking
time: 0.003; rss: 119MB	privacy checking
time: 0.001; rss: 119MB	stability index
time: 0.001; rss: 119MB	intrinsic checking
time: 0.001; rss: 119MB	effect checking
time: 0.003; rss: 119MB	match checking
time: 0.002; rss: 119MB	liveness checking
time: 0.007; rss: 119MB	rvalue checking
time: 0.015; rss: 121MB	MIR dump
time: 0.007; rss: 121MB	MIR passes
time: 0.019; rss: 121MB	borrow checking
time: 0.000; rss: 121MB	reachability checking
time: 0.003; rss: 121MB	death checking
time: 0.002; rss: 121MB	stability checking
time: 0.000; rss: 121MB	unused lib feature checking
time: 0.028; rss: 121MB	lint checking
time: 0.000; rss: 121MB	resolving dependency formats
time: 0.003; rss: 121MB	Prepare MIR codegen passes
  time: 0.055; rss: 139MB	translation item collection
  time: 0.001; rss: 139MB	codegen unit partitioning
  time: 0.129; rss: 186MB	write metadata
time: 0.609; rss: 186MB	translation
time: 0.000; rss: 186MB	assert dep graph
time: 0.000; rss: 186MB	serialize dep graph
  time: 0.035; rss: 123MB	llvm function passes [0]
  time: 0.017; rss: 124MB	llvm module passes [0]
  time: 0.608; rss: 128MB	codegen passes [0]
  time: 0.001; rss: 109MB	codegen passes [0]
time: 0.733; rss: 108MB	LLVM passes
time: 0.065; rss: 106MB	linking
done
