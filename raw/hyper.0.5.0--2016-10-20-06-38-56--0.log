commit eb38d426c41aa8487e8cb8a9dafbfcf3528201f9
Merge: dfd98eb cde42cd
Author: bors <bors@rust-lang.org>
Date:   Wed Oct 19 22:05:13 2016 -0700

    Auto merge of #36973 - nnethercote:dep_graph, r=nikomatsakis
    
    Don't enqueue onto a disabled dep_graph.
    
    This commit guards all calls to `DepGraphThreadData::enqueue` with a
    check to make sure it is enabled. This avoids some useless allocation
    and vector manipulations when it is disabled (i.e. when incremental
    compilation is off) which improves speed by 1--2% on most of the
    rustc-benchmarks.
    
    This commit has an observable functional change: when the dep_graph is
    disabled its `shadow_graph` will no longer receive messages. This should
    be ok because these message are only used when debug assertions are
    enabled.
    
    r? @nikomatsakis
rustc: ./hyper.0.5.0
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling typeable v0.1.2
   Compiling lazy_static v0.1.16
   Compiling bitflags v0.3.3
   Compiling winapi-build v0.1.1
   Compiling winapi v0.2.8
   Compiling traitobject v0.0.1
   Compiling unicase v0.1.0
   Compiling pkg-config v0.3.8
   Compiling gcc v0.3.35
   Compiling matches v0.1.2
   Compiling rustc-serialize v0.3.19
   Compiling libc v0.1.12
   Compiling httparse v0.1.6
   Compiling log v0.3.6
   Compiling kernel32-sys v0.2.2
   Compiling libc v0.2.16
   Compiling mime v0.0.11
   Compiling num_cpus v0.2.13
   Compiling rand v0.3.14
   Compiling time v0.1.35
   Compiling openssl-sys v0.6.7
   Compiling openssl v0.6.7
   Compiling uuid v0.1.18
   Compiling url v0.2.38
   Compiling cookie v0.1.21
   Compiling hyper v0.5.0 (file:///root/benchmarks/hyper.0.5.0)
time: 0.026; rss: 49MB	parsing
Lines of code:             9003
Pre-expansion node count:  44129
time: 0.000; rss: 49MB	recursion limit
time: 0.000; rss: 49MB	crate injection
time: 0.000; rss: 49MB	plugin loading
time: 0.000; rss: 49MB	plugin registration
time: 0.098; rss: 87MB	expansion
time: 0.000; rss: 87MB	maybe building test harness
time: 0.001; rss: 87MB	maybe creating a macro crate
Post-expansion node count: 101823
time: 0.000; rss: 87MB	checking for inline asm in case the target doesn't support it
time: 0.002; rss: 87MB	complete gated feature checking
time: 0.003; rss: 87MB	early lint checks
time: 0.001; rss: 87MB	AST validation
time: 0.017; rss: 91MB	name resolution
time: 0.009; rss: 97MB	lowering ast -> hir
time: 0.002; rss: 97MB	indexing hir
time: 0.001; rss: 97MB	attribute checking
time: 0.001; rss: 91MB	language item collection
time: 0.002; rss: 91MB	lifetime resolution
time: 0.000; rss: 91MB	looking for entry point
time: 0.000; rss: 91MB	looking for plugin registrar
time: 0.007; rss: 96MB	region resolution
time: 0.001; rss: 96MB	loop checking
time: 0.001; rss: 96MB	static item recursion checking
time: 0.057; rss: 96MB	compute_incremental_hashes_map
time: 0.000; rss: 96MB	load_dep_graph
time: 0.016; rss: 97MB	type collecting
time: 0.000; rss: 97MB	variance inference
time: 0.031; rss: 101MB	coherence checking
time: 0.045; rss: 102MB	wf checking
time: 0.020; rss: 102MB	item-types checking
time: 0.342; rss: 112MB	item-bodies checking
time: 0.000; rss: 112MB	drop-impl checking
time: 0.030; rss: 114MB	const checking
time: 0.008; rss: 114MB	privacy checking
time: 0.001; rss: 114MB	stability index
time: 0.003; rss: 114MB	intrinsic checking
time: 0.002; rss: 114MB	effect checking
time: 0.009; rss: 114MB	match checking
time: 0.004; rss: 114MB	liveness checking
time: 0.021; rss: 114MB	rvalue checking
time: 0.048; rss: 132MB	MIR dump
  time: 0.006; rss: 132MB	SimplifyCfg
  time: 0.011; rss: 132MB	QualifyAndPromoteConstants
  time: 0.013; rss: 132MB	TypeckMir
  time: 0.001; rss: 132MB	SimplifyBranches
  time: 0.003; rss: 132MB	SimplifyCfg
time: 0.034; rss: 132MB	MIR passes
time: 0.055; rss: 132MB	borrow checking
time: 0.003; rss: 132MB	reachability checking
time: 0.005; rss: 132MB	death checking
time: 0.006; rss: 134MB	stability checking
time: 0.000; rss: 134MB	unused lib feature checking
time: 0.039; rss: 136MB	lint checking
time: 0.000; rss: 136MB	resolving dependency formats
  time: 0.000; rss: 136MB	NoLandingPads
  time: 0.003; rss: 136MB	SimplifyCfg
  time: 0.009; rss: 136MB	EraseRegions
  time: 0.001; rss: 136MB	AddCallGuards
  time: 0.022; rss: 136MB	ElaborateDrops
  time: 0.001; rss: 136MB	NoLandingPads
  time: 0.005; rss: 136MB	SimplifyCfg
  time: 0.003; rss: 136MB	InstCombine
  time: 0.003; rss: 136MB	Deaggregator
  time: 0.000; rss: 136MB	CopyPropagation
  time: 0.001; rss: 136MB	AddCallGuards
  time: 0.000; rss: 136MB	PreTrans
time: 0.048; rss: 136MB	Prepare MIR codegen passes
  time: 0.013; rss: 140MB	write metadata
  time: 0.123; rss: 146MB	translation item collection
  time: 0.016; rss: 150MB	codegen unit partitioning
  time: 0.014; rss: 204MB	internalize symbols
time: 1.024; rss: 193MB	translation
time: 0.000; rss: 193MB	assert dep graph
time: 0.000; rss: 193MB	serialize dep graph
  time: 0.084; rss: 145MB	llvm function passes [0]
  time: 0.041; rss: 148MB	llvm module passes [0]
  time: 1.601; rss: 151MB	codegen passes [0]
  time: 0.000; rss: 151MB	codegen passes [0]
time: 1.862; rss: 151MB	LLVM passes
time: 0.000; rss: 151MB	serialize work products
time: 0.137; rss: 94MB	linking
done
