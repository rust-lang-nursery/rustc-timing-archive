commit 98a3502da1456b209ff031604cabbbcb9d0eddf1
Merge: 5bfe107 a61d85b
Author: bors <bors@rust-lang.org>
Date:   Sat Oct 15 15:38:52 2016 -0700

    Auto merge of #37152 - arielb1:drop-cache, r=pnkfelix
    
    add a per-param-env cache to `impls_bound`
    
    There used to be only a global cache, which led to uncached calls to
    trait selection when there were type parameters.
    
    This causes a 20% decrease in borrow-checking time and an overall 0.5% performance increase during bootstrapping (as borrow-checking tends to be a tiny part of compilation time).
    
    Fixes #37106 (drop elaboration times are now ~half of borrow checking,
    so might still be worthy of optimization, but not critical).
    
    r? @pnkfelix
rustc: ./syntex-0.42.2-incr-clean
RUSTFLAGS="-Z incremental=incr" \
    cargo rustc -p syntex_syntax -- -Ztime-passes -Zinput-stats -Z incremental-info
   Compiling syntex_syntax v0.42.0
time: 0.163; rss: 70MB	parsing
Lines of code:             33687
Pre-expansion node count:  224033
time: 0.000; rss: 70MB	recursion limit
time: 0.000; rss: 70MB	crate injection
time: 0.000; rss: 70MB	plugin loading
time: 0.000; rss: 70MB	plugin registration
time: 0.366; rss: 140MB	expansion
time: 0.000; rss: 140MB	maybe building test harness
time: 0.007; rss: 140MB	maybe creating a macro crate
Post-expansion node count: 641571
time: 0.000; rss: 140MB	checking for inline asm in case the target doesn't support it
time: 0.014; rss: 140MB	complete gated feature checking
time: 0.024; rss: 140MB	early lint checks
time: 0.008; rss: 140MB	AST validation
time: 0.117; rss: 156MB	name resolution
time: 0.125; rss: 196MB	lowering ast -> hir
time: 0.026; rss: 204MB	indexing hir
time: 0.007; rss: 204MB	attribute checking
time: 0.006; rss: 156MB	language item collection
time: 0.012; rss: 156MB	lifetime resolution
time: 0.000; rss: 156MB	looking for entry point
time: 0.000; rss: 156MB	looking for plugin registrar
time: 0.063; rss: 166MB	region resolution
time: 0.006; rss: 166MB	loop checking
time: 0.006; rss: 166MB	static item recursion checking
time: 0.266; rss: 168MB	compute_incremental_hashes_map
time: 0.000; rss: 168MB	load_dep_graph
time: 0.045; rss: 174MB	type collecting
time: 0.001; rss: 174MB	variance inference
time: 0.038; rss: 176MB	coherence checking
time: 0.107; rss: 178MB	wf checking
time: 0.207; rss: 183MB	item-types checking
time: 4.073; rss: 230MB	item-bodies checking
time: 0.000; rss: 230MB	drop-impl checking
time: 0.285; rss: 235MB	const checking
time: 0.057; rss: 235MB	privacy checking
time: 0.007; rss: 235MB	stability index
time: 0.023; rss: 235MB	intrinsic checking
time: 0.019; rss: 235MB	effect checking
time: 0.061; rss: 235MB	match checking
time: 0.089; rss: 225MB	liveness checking
time: 0.236; rss: 225MB	rvalue checking
time: 0.668; rss: 402MB	MIR dump
  time: 0.060; rss: 409MB	SimplifyCfg
  time: 0.085; rss: 409MB	QualifyAndPromoteConstants
  time: 0.114; rss: 409MB	TypeckMir
  time: 0.005; rss: 409MB	SimplifyBranches
  time: 0.031; rss: 409MB	SimplifyCfg
time: 0.295; rss: 409MB	MIR passes
time: 0.594; rss: 412MB	borrow checking
time: 0.023; rss: 412MB	reachability checking
time: 0.047; rss: 412MB	death checking
time: 0.049; rss: 414MB	stability checking
time: 0.000; rss: 414MB	unused lib feature checking
time: 0.226; rss: 414MB	lint checking
time: 0.000; rss: 414MB	resolving dependency formats
  time: 0.003; rss: 414MB	NoLandingPads
  time: 0.027; rss: 414MB	SimplifyCfg
  time: 0.088; rss: 421MB	EraseRegions
  time: 0.012; rss: 421MB	AddCallGuards
  time: 0.342; rss: 443MB	ElaborateDrops
  time: 0.003; rss: 443MB	NoLandingPads
  time: 0.054; rss: 443MB	SimplifyCfg
  time: 0.032; rss: 443MB	InstCombine
  time: 0.012; rss: 443MB	Deaggregator
  time: 0.003; rss: 443MB	CopyPropagation
  time: 0.010; rss: 443MB	AddCallGuards
  time: 0.003; rss: 443MB	PreTrans
time: 0.589; rss: 443MB	Prepare MIR codegen passes
  time: 0.281; rss: 449MB	write metadata
  time: 0.477; rss: 462MB	translation item collection
  time: 0.065; rss: 467MB	codegen unit partitioning
  time: 0.054; rss: 713MB	internalize symbols
time: 5.732; rss: 594MB	translation
time: 0.000; rss: 594MB	assert dep graph
time: 0.000; rss: 594MB	serialize dep graph
incremental: re-using 0 out of 1 modules
  time: 0.521; rss: 405MB	llvm function passes [0]
  time: 0.260; rss: 414MB	llvm module passes [0]
  time: 10.160; rss: 411MB	codegen passes [0]
  time: 0.002; rss: 407MB	codegen passes [0]
time: 11.863; rss: 407MB	LLVM passes
time: 0.000; rss: 407MB	serialize work products
time: 0.667; rss: 103MB	linking
done
