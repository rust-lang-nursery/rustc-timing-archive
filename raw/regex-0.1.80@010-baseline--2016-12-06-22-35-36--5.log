commit 3fef221514ab31088f75d14516c851e68a70cf9e
Merge: 5f128ed bc3618e
Author: bors <bors@rust-lang.org>
Date:   Wed Dec 7 00:30:25 2016 +0000

    Auto merge of #38134 - bluss:iter-nth, r=aturon
    
    Remove Self: Sized from Iterator::nth
    
    It is an unnecessary restriction; nth neither needs self to be sized
    nor needs to be exempted from the trait object.
    
    It increases the utility of the nth method, because type specific
    implementations are available through `&mut I` or through an iterator
    trait object.
    
    It is a backwards compatible change due to the special cases of the
    `where Self: Sized` bound; it was already optional to include this bound
    in `Iterator` implementations.
rustc: ./regex-0.1.80@010-baseline@010-baseline
cargo rustc  -- -Ztime-passes -Zinput-stats
time: 0.024; rss: 50MB	parsing
Lines of code:             10689
Pre-expansion node count:  55396
time: 0.000; rss: 50MB	recursion limit
time: 0.000; rss: 50MB	crate injection
time: 0.000; rss: 50MB	plugin loading
time: 0.000; rss: 50MB	plugin registration
time: 0.043; rss: 81MB	expansion
time: 0.000; rss: 81MB	maybe building test harness
time: 0.001; rss: 81MB	maybe creating a macro crate
Post-expansion node count: 86869
time: 0.000; rss: 81MB	checking for inline asm in case the target doesn't support it
time: 0.001; rss: 81MB	complete gated feature checking
time: 0.003; rss: 81MB	early lint checks
time: 0.001; rss: 81MB	AST validation
time: 0.010; rss: 84MB	name resolution
time: 0.008; rss: 88MB	lowering ast -> hir
time: 0.001; rss: 90MB	indexing hir
time: 0.001; rss: 90MB	attribute checking
time: 0.000; rss: 84MB	language item collection
time: 0.002; rss: 84MB	lifetime resolution
time: 0.000; rss: 84MB	looking for entry point
time: 0.000; rss: 84MB	looking for plugin registrar
time: 0.005; rss: 89MB	region resolution
time: 0.001; rss: 89MB	loop checking
time: 0.000; rss: 89MB	static item recursion checking
time: 0.034; rss: 88MB	compute_incremental_hashes_map
time: 0.000; rss: 88MB	load_dep_graph
time: 0.001; rss: 88MB	stability index
time: 0.002; rss: 88MB	stability checking
time: 0.010; rss: 90MB	type collecting
time: 0.000; rss: 90MB	variance inference
time: 0.000; rss: 90MB	impl wf inference
time: 0.012; rss: 92MB	coherence checking
time: 0.020; rss: 93MB	wf checking
time: 0.115; rss: 98MB	item-types checking
time: 0.285; rss: 105MB	item-bodies checking
time: 0.000; rss: 105MB	drop-impl checking
time: 0.038; rss: 134MB	const checking
time: 0.006; rss: 134MB	privacy checking
time: 0.002; rss: 134MB	intrinsic checking
time: 0.001; rss: 134MB	effect checking
time: 0.005; rss: 134MB	match checking
time: 0.004; rss: 135MB	liveness checking
time: 0.015; rss: 135MB	rvalue checking
time: 0.042; rss: 156MB	MIR dump
  time: 0.006; rss: 156MB	SimplifyCfg
  time: 0.009; rss: 156MB	QualifyAndPromoteConstants
  time: 0.012; rss: 156MB	TypeckMir
  time: 0.000; rss: 156MB	SimplifyBranches
  time: 0.003; rss: 156MB	SimplifyCfg
time: 0.030; rss: 156MB	MIR cleanup and validation
time: 0.044; rss: 157MB	borrow checking
time: 0.001; rss: 157MB	reachability checking
time: 0.004; rss: 157MB	death checking
time: 0.000; rss: 157MB	unused lib feature checking
time: 0.028; rss: 157MB	lint checking
time: 0.000; rss: 157MB	resolving dependency formats
  time: 0.000; rss: 157MB	NoLandingPads
  time: 0.003; rss: 157MB	SimplifyCfg
  time: 0.007; rss: 157MB	EraseRegions
  time: 0.001; rss: 157MB	AddCallGuards
  time: 0.017; rss: 159MB	ElaborateDrops
  time: 0.000; rss: 159MB	NoLandingPads
  time: 0.004; rss: 159MB	SimplifyCfg
  time: 0.003; rss: 159MB	InstCombine
  time: 0.002; rss: 159MB	Deaggregator
  time: 0.000; rss: 159MB	CopyPropagation
  time: 0.004; rss: 159MB	SimplifyLocals
  time: 0.001; rss: 159MB	AddCallGuards
  time: 0.000; rss: 159MB	PreTrans
time: 0.042; rss: 159MB	MIR optimisations
  time: 0.008; rss: 161MB	write metadata
  time: 0.083; rss: 167MB	translation item collection
  time: 0.012; rss: 171MB	codegen unit partitioning
  time: 0.012; rss: 226MB	internalize symbols
time: 0.889; rss: 226MB	translation
time: 0.000; rss: 226MB	assert dep graph
time: 0.000; rss: 226MB	serialize dep graph
  time: 0.085; rss: 146MB	llvm function passes [0]
  time: 0.429; rss: 182MB	llvm module passes [0]
  time: 2.458; rss: 187MB	codegen passes [0]
  time: 0.000; rss: 184MB	codegen passes [0]
time: 3.185; rss: 184MB	LLVM passes
time: 0.000; rss: 184MB	serialize work products
time: 0.116; rss: 95MB	linking
done
