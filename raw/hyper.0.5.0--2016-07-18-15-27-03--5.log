commit 9c888980763e8ba16caa67f5f08e13109bbc6fa5
Merge: 06ca016 22f77a9
Author: bors <bors@rust-lang.org>
Date:   Mon Jul 18 11:29:25 2016 -0700

    Auto merge of #34899 - michaelwoerister:always_internalize_symbols, r=eddyb
    
    Run base::internalize_symbols() even for single-codegen-unit crates.
    
    The initial linkage-assignment (especially for closures) is a conservative one that makes some symbols more visible than they need to be. While this is not a correctness problem, it does force the LLVM inliner to be more conservative too, which results in poor performance. Once translation is based solely on MIR, it will be easier to also make the initial linkage assignment a better fitting one. Until then `internalize_symbols()` does a good job of preventing most performance regressions.
    
    This should solve the regressions reported in https://github.com/rust-lang/rust/issues/34891 and maybe also those in https://github.com/rust-lang/rust/issues/34831.
    
    As a side-effect, this will also solve most of the problematic cases described in https://github.com/rust-lang/rust/issues/34793. Not reliably so, however. For that, we still need a solution like the one implement in https://github.com/rust-lang/rust/pull/34830.
    
    cc @rust-lang/compiler
rustc: ./hyper.0.5.0
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling hyper v0.5.0 (file:///root/benchmarks/hyper.0.5.0)
time: 0.033; rss: 89MB	parsing
Lines of code:             9154
Pre-expansion node count:  44838
time: 0.005; rss: 93MB	configuration
time: 0.000; rss: 93MB	recursion limit
time: 0.000; rss: 93MB	crate injection
time: 0.000; rss: 93MB	plugin loading
time: 0.000; rss: 93MB	plugin registration
time: 0.116; rss: 133MB	expansion
time: 0.000; rss: 133MB	maybe building test harness
time: 0.008; rss: 133MB	assigning node ids
Post-expansion node count: 101581
time: 0.000; rss: 133MB	checking for inline asm in case the target doesn't support it
time: 0.002; rss: 133MB	complete gated feature checking
time: 0.003; rss: 133MB	collecting defs
time: 0.011; rss: 144MB	external crate/lib resolution
time: 0.006; rss: 144MB	early lint checks
time: 0.001; rss: 144MB	AST validation
time: 0.019; rss: 148MB	name resolution
time: 0.010; rss: 157MB	lowering ast -> hir
time: 0.001; rss: 159MB	indexing hir
time: 0.001; rss: 159MB	attribute checking
time: 0.001; rss: 152MB	language item collection
time: 0.002; rss: 152MB	lifetime resolution
time: 0.000; rss: 152MB	looking for entry point
time: 0.000; rss: 152MB	looking for plugin registrar
time: 0.005; rss: 157MB	region resolution
time: 0.001; rss: 157MB	loop checking
time: 0.000; rss: 157MB	static item recursion checking
time: 0.000; rss: 157MB	load_dep_graph
time: 0.030; rss: 159MB	type collecting
time: 0.000; rss: 159MB	variance inference
time: 0.044; rss: 164MB	coherence checking
time: 0.098; rss: 167MB	wf checking
time: 0.037; rss: 168MB	item-types checking
time: 0.532; rss: 179MB	item-bodies checking
time: 0.000; rss: 179MB	drop-impl checking
time: 0.045; rss: 181MB	const checking
time: 0.008; rss: 181MB	privacy checking
time: 0.001; rss: 181MB	stability index
time: 0.006; rss: 181MB	intrinsic checking
time: 0.002; rss: 181MB	effect checking
time: 0.015; rss: 181MB	match checking
time: 0.005; rss: 181MB	liveness checking
time: 0.032; rss: 181MB	rvalue checking
time: 0.062; rss: 189MB	MIR dump
time: 0.044; rss: 189MB	MIR passes
time: 0.073; rss: 189MB	borrow checking
time: 0.003; rss: 189MB	reachability checking
time: 0.005; rss: 192MB	death checking
time: 0.006; rss: 192MB	stability checking
time: 0.000; rss: 192MB	unused lib feature checking
time: 0.052; rss: 192MB	lint checking
time: 0.000; rss: 192MB	resolving dependency formats
time: 0.092; rss: 194MB	Prepare MIR codegen passes
  time: 0.131; rss: 199MB	write metadata
  time: 0.191; rss: 203MB	translation item collection
  time: 0.021; rss: 208MB	codegen unit partitioning
time: 3.665; rss: 326MB	translation
time: 0.001; rss: 326MB	assert dep graph
time: 0.000; rss: 326MB	serialize dep graph
  time: 1.113; rss: 213MB	llvm function passes [0]
  time: 0.430; rss: 215MB	llvm module passes [0]
  time: 16.106; rss: 214MB	codegen passes [0]
  time: 0.002; rss: 214MB	codegen passes [0]
time: 18.752; rss: 213MB	LLVM passes
time: 0.151; rss: 165MB	linking
done
