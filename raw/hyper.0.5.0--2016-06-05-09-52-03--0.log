commit 8cbffc5bcfbc4696173678d50d519e9e61676265
Merge: 22b36c7 cee244d
Author: bors <bors@rust-lang.org>
Date:   Sun Jun 5 06:08:37 2016 -0700

    Auto merge of #33905 - eddyb:mir-overflow, r=nikomatsakis
    
    [MIR] Implement overflow checking
    
    The initial set of changes is from @Aatch's #33255 PR, rebased on master, plus:
    
    Added an `Assert` terminator to MIR, to simplify working with overflow and bounds checks.
    With this terminator, error cases can be accounted for directly, instead of looking for lang item calls.
    It also keeps the MIR slimmer, with no extra explicit blocks for the actual panic calls.
    
    Warnings can be produced when the `Assert` is known to always panic at runtime, e.g.:
    ```rust
    warning: index out of bounds: the len is 1 but the index is 3
     --> <anon>:1:14
    1 |> fn main() { &[std::io::stdout()][3]; }
      |>              ^^^^^^^^^^^^^^^^^^^^^^
    ```
    
    Generalized the `OperandValue::FatPtr` optimization to any aggregate pair of immediates.
    This allows us to generate the same IR for overflow checks as old trans, not something worse.
    For example, addition on `i16` calls `llvm.sadd.with.overflow.i16`, which returns `{i16, i1}`.
    However, the Rust type `(i16, bool)`, has to be `{i16, i8}`, only an immediate `bool` is `i1`.
    But if we split the pair into an `i16` and an `i1`, we can pass them around as such for free.
    
    The latest addition is a rebase of #34054, updated to work for pairs too. Closes #34054, fixes #33873.
    
    Last but not least, the `#[rustc_inherit_overflow_checks]` attribute was introduced to control the
    overflow checking behavior of generic or `#[inline]` functions, when translated in another crate.
    
    It is **not** intended to be used by crates other than `libcore`, which is in the unusual position of
    being distributed as only an optimized build with no checks, even when used from debug mode.
    Before MIR-based translation, this worked out fine, as the decision for overflow was made at
    translation time, in the crate being compiled, but MIR stored in `rlib` has to contain the checks.
    
    To avoid always generating the checks and slowing everything down, a decision was made to
    use an attribute in the few spots of `libcore` that need it (see #33255 for previous discussion):
    * `core::ops::{Add, Sub, Mul, Neg, Shl, Shr}` implementations for integers, which have `#[inline]` methods and can be used in generic abstractions from other crates
    * `core::ops::{Add, Sub, Mul, Neg, Shl, Shr}Assign` same as above, for augmented assignment
    * `pow` and `abs` methods on integers, which intentionally piggy-back on built-in multiplication and negation, respectively, to get overflow checks
    * `core::iter::{Iterator, Chain, Peek}::count` and `core::iter::Enumerate::{next, nth}`, also documented as panicking on overflow, from addition, counting elements of an iterator in an `usize`
rustc: ./hyper.0.5.0
cargo rustc -- -Ztime-passes -Zinput-stats
    Updating registry `https://github.com/rust-lang/crates.io-index`
   Compiling pkg-config v0.3.8
   Compiling unicase v0.1.0
   Compiling gcc v0.3.28
   Compiling traitobject v0.0.1
   Compiling libc v0.2.11
   Compiling rustc-serialize v0.3.19
   Compiling winapi v0.2.7
   Compiling lazy_static v0.1.16
   Compiling libc v0.1.12
   Compiling log v0.3.6
   Compiling httparse v0.1.6
   Compiling mime v0.0.11
   Compiling typeable v0.1.2
   Compiling matches v0.1.2
   Compiling bitflags v0.3.3
   Compiling winapi-build v0.1.1
   Compiling kernel32-sys v0.2.2
   Compiling rand v0.3.14
   Compiling num_cpus v0.2.12
   Compiling openssl-sys v0.6.7
   Compiling time v0.1.35
   Compiling openssl v0.6.7
   Compiling uuid v0.1.18
   Compiling url v0.2.38
   Compiling cookie v0.1.21
   Compiling hyper v0.5.0 (file:///root/benchmarks/hyper.0.5.0)
time: 0.045; rss: 56MB	parsing
Lines of code:             9154
Pre-expansion node count:  44646
time: 0.007; rss: 56MB	configuration 1
time: 0.000; rss: 56MB	recursion limit
time: 0.000; rss: 56MB	crate injection
time: 0.022; rss: 91MB	macro loading
time: 0.000; rss: 91MB	plugin loading
time: 0.000; rss: 91MB	plugin registration
time: 0.251; rss: 100MB	expansion
time: 0.000; rss: 100MB	gated configuration checking
time: 0.014; rss: 100MB	maybe building test harness
time: 0.011; rss: 100MB	prelude injection
time: 0.000; rss: 100MB	checking for inline asm in case the target doesn't support it
time: 0.002; rss: 100MB	complete gated feature checking
Post-expansion node count: 101566
time: 0.010; rss: 100MB	assigning node ids
time: 0.003; rss: 102MB	collecting defs
time: 0.011; rss: 113MB	external crate/lib resolution
time: 0.007; rss: 113MB	early lint checks
time: 0.001; rss: 113MB	AST validation
time: 0.025; rss: 116MB	name resolution
time: 0.023; rss: 123MB	lowering ast -> hir
time: 0.004; rss: 124MB	indexing hir
time: 0.001; rss: 124MB	attribute checking
time: 0.001; rss: 116MB	language item collection
time: 0.002; rss: 116MB	lifetime resolution
time: 0.000; rss: 116MB	looking for entry point
time: 0.000; rss: 116MB	looking for plugin registrar
time: 0.012; rss: 119MB	region resolution
time: 0.001; rss: 119MB	loop checking
time: 0.001; rss: 119MB	static item recursion checking
time: 0.000; rss: 119MB	load_dep_graph
time: 0.044; rss: 122MB	type collecting
time: 0.000; rss: 122MB	variance inference
time: 0.050; rss: 129MB	coherence checking
time: 0.114; rss: 130MB	wf checking
time: 0.040; rss: 131MB	item-types checking
time: 0.598; rss: 141MB	item-bodies checking
time: 0.000; rss: 141MB	drop-impl checking
time: 0.048; rss: 142MB	const checking
time: 0.009; rss: 142MB	privacy checking
time: 0.001; rss: 142MB	stability index
time: 0.007; rss: 142MB	intrinsic checking
time: 0.002; rss: 142MB	effect checking
time: 0.016; rss: 142MB	match checking
time: 0.004; rss: 142MB	liveness checking
time: 0.038; rss: 144MB	rvalue checking
time: 0.089; rss: 153MB	MIR dump
time: 0.048; rss: 154MB	MIR passes
time: 0.080; rss: 154MB	borrow checking
time: 0.003; rss: 154MB	reachability checking
time: 0.006; rss: 155MB	death checking
time: 0.009; rss: 155MB	stability checking
time: 0.000; rss: 155MB	unused lib feature checking
time: 0.054; rss: 155MB	lint checking
time: 0.000; rss: 155MB	resolving dependency formats
time: 0.103; rss: 157MB	Prepare MIR codegen passes
  time: 0.145; rss: 165MB	write metadata
  time: 0.199; rss: 168MB	translation item collection
  time: 0.007; rss: 168MB	codegen unit partitioning
time: 1.989; rss: 286MB	translation
time: 0.001; rss: 286MB	assert dep graph
time: 0.000; rss: 286MB	serialize dep graph
  time: 0.099; rss: 180MB	llvm function passes [0]
  time: 0.051; rss: 181MB	llvm module passes [0]
  time: 1.631; rss: 183MB	codegen passes [0]
  time: 0.001; rss: 134MB	codegen passes [0]
time: 1.991; rss: 134MB	LLVM passes
time: 0.177; rss: 132MB	linking
done
