commit cfc9b5185bbf5ab04a2736347bfa7fd9ab70c1e7
Merge: a41505f 8b0c292
Author: bors <bors@rust-lang.org>
Date:   Wed Oct 19 06:33:10 2016 -0700

    Auto merge of #37213 - jseyfried:refactor_crate_var, r=nrc
    
    macros: improve `$crate`
    
    This PR refactors the implementation of `$crate` so that
     - `$crate` is only allowed at the start of a path (like `super`),
     - we can make `$crate` work with inter-crate re-exports (groundwork for macro modularization), and
     - we can support importing macros from an extern crate that is not declared at the crate root (also groundwork for macro modularization).
    
    This is a [breaking-change]. For example, the following would break:
    ```rust
    fn foo() {}
    macro_rules! m { () => {
        $crate foo $crate () $crate $crate;
        //^ Today, `$crate` is allowed just about anywhere in unexported macros.
    } }
    fn main() {
        m!();
    }
    ```
    r? @nrc
rustc: ./syntex-0.42.2-incr-clean
RUSTFLAGS="-Z incremental=incr" \
    cargo rustc -p syntex_syntax -- -Ztime-passes -Zinput-stats -Z incremental-info
   Compiling syntex_syntax v0.42.0
time: 0.108; rss: 75MB	parsing
Lines of code:             33687
Pre-expansion node count:  224033
time: 0.000; rss: 75MB	recursion limit
time: 0.000; rss: 75MB	crate injection
time: 0.000; rss: 75MB	plugin loading
time: 0.000; rss: 75MB	plugin registration
time: 0.269; rss: 148MB	expansion
time: 0.000; rss: 148MB	maybe building test harness
time: 0.006; rss: 148MB	maybe creating a macro crate
Post-expansion node count: 641571
time: 0.000; rss: 148MB	checking for inline asm in case the target doesn't support it
time: 0.013; rss: 148MB	complete gated feature checking
time: 0.022; rss: 148MB	early lint checks
time: 0.007; rss: 148MB	AST validation
time: 0.086; rss: 162MB	name resolution
time: 0.049; rss: 202MB	lowering ast -> hir
time: 0.009; rss: 213MB	indexing hir
time: 0.007; rss: 213MB	attribute checking
time: 0.005; rss: 164MB	language item collection
time: 0.011; rss: 164MB	lifetime resolution
time: 0.000; rss: 164MB	looking for entry point
time: 0.000; rss: 164MB	looking for plugin registrar
time: 0.043; rss: 174MB	region resolution
time: 0.006; rss: 174MB	loop checking
time: 0.006; rss: 174MB	static item recursion checking
time: 0.526; rss: 175MB	compute_incremental_hashes_map
time: 0.000; rss: 175MB	load_dep_graph
time: 0.042; rss: 181MB	type collecting
time: 0.001; rss: 181MB	variance inference
time: 0.035; rss: 185MB	coherence checking
time: 0.101; rss: 188MB	wf checking
time: 0.190; rss: 194MB	item-types checking
time: 3.835; rss: 245MB	item-bodies checking
time: 0.000; rss: 245MB	drop-impl checking
time: 0.252; rss: 249MB	const checking
time: 0.052; rss: 249MB	privacy checking
time: 0.007; rss: 249MB	stability index
time: 0.021; rss: 249MB	intrinsic checking
time: 0.018; rss: 249MB	effect checking
time: 0.055; rss: 249MB	match checking
time: 0.053; rss: 242MB	liveness checking
time: 0.215; rss: 242MB	rvalue checking
time: 0.407; rss: 430MB	MIR dump
  time: 0.058; rss: 431MB	SimplifyCfg
  time: 0.081; rss: 431MB	QualifyAndPromoteConstants
  time: 0.112; rss: 431MB	TypeckMir
  time: 0.004; rss: 431MB	SimplifyBranches
  time: 0.031; rss: 431MB	SimplifyCfg
time: 0.287; rss: 431MB	MIR passes
time: 0.560; rss: 432MB	borrow checking
time: 0.018; rss: 432MB	reachability checking
time: 0.043; rss: 432MB	death checking
time: 0.040; rss: 434MB	stability checking
time: 0.000; rss: 434MB	unused lib feature checking
time: 0.222; rss: 434MB	lint checking
time: 0.000; rss: 434MB	resolving dependency formats
  time: 0.003; rss: 434MB	NoLandingPads
  time: 0.027; rss: 434MB	SimplifyCfg
  time: 0.068; rss: 442MB	EraseRegions
  time: 0.011; rss: 442MB	AddCallGuards
  time: 0.292; rss: 465MB	ElaborateDrops
  time: 0.003; rss: 465MB	NoLandingPads
  time: 0.055; rss: 463MB	SimplifyCfg
  time: 0.031; rss: 463MB	InstCombine
  time: 0.011; rss: 463MB	Deaggregator
  time: 0.003; rss: 463MB	CopyPropagation
  time: 0.009; rss: 463MB	AddCallGuards
  time: 0.003; rss: 463MB	PreTrans
time: 0.516; rss: 463MB	Prepare MIR codegen passes
  time: 0.061; rss: 468MB	write metadata
  time: 0.419; rss: 478MB	translation item collection
  time: 0.056; rss: 488MB	codegen unit partitioning
  time: 0.047; rss: 730MB	internalize symbols
time: 4.824; rss: 609MB	translation
time: 0.000; rss: 609MB	assert dep graph
time: 0.000; rss: 609MB	serialize dep graph
incremental: re-using 0 out of 1 modules
  time: 0.513; rss: 406MB	llvm function passes [0]
  time: 0.242; rss: 414MB	llvm module passes [0]
  time: 10.078; rss: 415MB	codegen passes [0]
  time: 0.000; rss: 415MB	codegen passes [0]
time: 11.567; rss: 413MB	LLVM passes
time: 0.000; rss: 413MB	serialize work products
time: 0.663; rss: 105MB	linking
done
