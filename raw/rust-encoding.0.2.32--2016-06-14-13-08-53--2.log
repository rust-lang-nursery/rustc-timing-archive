commit be8bd82268a229be6de90dd241c9d6dc64d48b8c
Merge: 2940eb5 7cd8912
Author: bors <bors@rust-lang.org>
Date:   Tue Jun 14 07:49:56 2016 -0700

    Auto merge of #34234 - GuillaumeGomez:bad_inlining, r=steveklabnik
    
    Fix invalid inlining
    
    r? @steveklabnik
    
    So to put a context. @nox found an issue on the generated doc:
    
    ![screenshot from 2016-06-11 19-53-38](https://cloud.githubusercontent.com/assets/3050060/15987898/f7341de0-303b-11e6-9cd7-f2a6df423ee7.png)
    
    So as you can see, the two variants are on the same where they shouldn't. I found out that the issue is also on structs:
    
    ![screenshot from 2016-06-11 19-53-31](https://cloud.githubusercontent.com/assets/3050060/15987900/0f66c5de-303c-11e6-90fc-5e49d11b6903.png)
    
    And so such is the result of the PR:
    
    ![screenshot from 2016-06-12 01-15-21](https://cloud.githubusercontent.com/assets/3050060/15987904/19d9183c-303c-11e6-91c1-7c3f1163fbb0.png)
    ![screenshot from 2016-06-12 01-15-24](https://cloud.githubusercontent.com/assets/3050060/15987905/1b5d2db0-303c-11e6-8f43-9a8ad2371007.png)
rustc: ./rust-encoding.0.2.32
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling encoding v0.2.32 (file:///root/benchmarks/rust-encoding.0.2.32)
time: 0.024; rss: 50MB	parsing
Lines of code:             6441
Pre-expansion node count:  30015
time: 0.003; rss: 54MB	configuration 1
time: 0.000; rss: 54MB	recursion limit
time: 0.000; rss: 54MB	crate injection
time: 0.000; rss: 54MB	plugin loading
time: 0.000; rss: 54MB	plugin registration
time: 0.073; rss: 91MB	expansion
time: 0.000; rss: 91MB	gated configuration checking
time: 0.000; rss: 91MB	maybe building test harness
time: 0.000; rss: 91MB	checking for inline asm in case the target doesn't support it
time: 0.001; rss: 91MB	complete gated feature checking
Post-expansion node count: 40313
time: 0.003; rss: 91MB	assigning node ids
time: 0.001; rss: 91MB	collecting defs
time: 0.001; rss: 91MB	external crate/lib resolution
time: 0.002; rss: 91MB	early lint checks
time: 0.000; rss: 91MB	AST validation
time: 0.008; rss: 95MB	name resolution
time: 0.005; rss: 95MB	lowering ast -> hir
time: 0.000; rss: 95MB	indexing hir
time: 0.000; rss: 95MB	attribute checking
time: 0.000; rss: 93MB	language item collection
time: 0.001; rss: 93MB	lifetime resolution
time: 0.000; rss: 93MB	looking for entry point
time: 0.000; rss: 93MB	looking for plugin registrar
time: 0.002; rss: 95MB	region resolution
time: 0.000; rss: 95MB	loop checking
time: 0.000; rss: 95MB	static item recursion checking
time: 0.000; rss: 95MB	load_dep_graph
time: 0.012; rss: 98MB	type collecting
time: 0.000; rss: 98MB	variance inference
time: 0.023; rss: 102MB	coherence checking
time: 0.024; rss: 102MB	wf checking
time: 0.015; rss: 103MB	item-types checking
time: 0.222; rss: 109MB	item-bodies checking
time: 0.000; rss: 109MB	drop-impl checking
time: 0.013; rss: 109MB	const checking
time: 0.002; rss: 109MB	privacy checking
time: 0.000; rss: 109MB	stability index
time: 0.002; rss: 109MB	intrinsic checking
time: 0.000; rss: 109MB	effect checking
time: 0.008; rss: 109MB	match checking
time: 0.002; rss: 109MB	liveness checking
time: 0.008; rss: 109MB	rvalue checking
time: 0.024; rss: 118MB	MIR dump
time: 0.015; rss: 118MB	MIR passes
time: 0.024; rss: 118MB	borrow checking
time: 0.000; rss: 118MB	reachability checking
time: 0.002; rss: 118MB	death checking
time: 0.002; rss: 118MB	stability checking
time: 0.000; rss: 118MB	unused lib feature checking
time: 0.025; rss: 118MB	lint checking
time: 0.000; rss: 118MB	resolving dependency formats
time: 0.027; rss: 119MB	Prepare MIR codegen passes
  time: 0.057; rss: 119MB	write metadata
  time: 0.028; rss: 122MB	translation item collection
  time: 0.001; rss: 122MB	codegen unit partitioning
time: 0.368; rss: 158MB	translation
time: 0.000; rss: 158MB	assert dep graph
time: 0.000; rss: 158MB	serialize dep graph
  time: 0.027; rss: 117MB	llvm function passes [0]
  time: 0.051; rss: 122MB	llvm module passes [0]
  time: 0.591; rss: 126MB	codegen passes [0]
  time: 0.001; rss: 110MB	codegen passes [0]
time: 0.739; rss: 109MB	LLVM passes
time: 0.053; rss: 108MB	linking
done
