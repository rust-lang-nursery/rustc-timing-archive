commit 6572a463116a31efba8bfddb2e64ed659311b8a1
Merge: 6dc035e ee338c3
Author: bors <bors@rust-lang.org>
Date:   Sun Oct 16 04:22:21 2016 -0700

    Auto merge of #37129 - arielb1:erased-normal, r=eddyb
    
    normalize types every time HR regions are erased
    
    Associated type normalization is inhibited by higher-ranked regions.
    Therefore, every time we erase them, we must re-normalize.
    
    I was meaning to introduce this change some time ago, but we used
    to erase regions in generic context, which broke this terribly (because
    you can't always normalize in a generic context). That seems to be gone
    now.
    
    Ensure this by having a `erase_late_bound_regions_and_normalize`
    function.
    
    Fixes #37109 (the missing call was in mir::block).
    
    r? @eddyb
rustc: ./syntex-0.42.2
cargo rustc -p syntex_syntax -- -Ztime-passes -Zinput-stats
   Compiling syntex_syntax v0.42.0
time: 0.165; rss: 70MB	parsing
Lines of code:             33687
Pre-expansion node count:  224033
time: 0.000; rss: 70MB	recursion limit
time: 0.000; rss: 70MB	crate injection
time: 0.000; rss: 70MB	plugin loading
time: 0.000; rss: 70MB	plugin registration
time: 0.375; rss: 140MB	expansion
time: 0.000; rss: 140MB	maybe building test harness
time: 0.007; rss: 140MB	maybe creating a macro crate
Post-expansion node count: 641571
time: 0.000; rss: 140MB	checking for inline asm in case the target doesn't support it
time: 0.016; rss: 140MB	complete gated feature checking
time: 0.026; rss: 140MB	early lint checks
time: 0.009; rss: 140MB	AST validation
time: 0.120; rss: 156MB	name resolution
time: 0.129; rss: 195MB	lowering ast -> hir
time: 0.026; rss: 203MB	indexing hir
time: 0.008; rss: 203MB	attribute checking
time: 0.007; rss: 156MB	language item collection
time: 0.014; rss: 156MB	lifetime resolution
time: 0.000; rss: 156MB	looking for entry point
time: 0.000; rss: 156MB	looking for plugin registrar
time: 0.063; rss: 166MB	region resolution
time: 0.007; rss: 166MB	loop checking
time: 0.007; rss: 166MB	static item recursion checking
time: 0.270; rss: 168MB	compute_incremental_hashes_map
time: 0.000; rss: 168MB	load_dep_graph
time: 0.045; rss: 173MB	type collecting
time: 0.001; rss: 173MB	variance inference
time: 0.038; rss: 176MB	coherence checking
time: 0.106; rss: 178MB	wf checking
time: 0.209; rss: 183MB	item-types checking
time: 4.102; rss: 229MB	item-bodies checking
time: 0.000; rss: 229MB	drop-impl checking
time: 0.285; rss: 234MB	const checking
time: 0.055; rss: 234MB	privacy checking
time: 0.007; rss: 234MB	stability index
time: 0.023; rss: 234MB	intrinsic checking
time: 0.019; rss: 234MB	effect checking
time: 0.060; rss: 234MB	match checking
time: 0.085; rss: 227MB	liveness checking
time: 0.234; rss: 227MB	rvalue checking
time: 0.658; rss: 403MB	MIR dump
  time: 0.060; rss: 409MB	SimplifyCfg
  time: 0.084; rss: 409MB	QualifyAndPromoteConstants
  time: 0.116; rss: 409MB	TypeckMir
  time: 0.005; rss: 409MB	SimplifyBranches
  time: 0.031; rss: 409MB	SimplifyCfg
time: 0.296; rss: 409MB	MIR passes
time: 0.597; rss: 412MB	borrow checking
time: 0.022; rss: 412MB	reachability checking
time: 0.047; rss: 412MB	death checking
time: 0.047; rss: 415MB	stability checking
time: 0.000; rss: 415MB	unused lib feature checking
time: 0.224; rss: 415MB	lint checking
time: 0.000; rss: 415MB	resolving dependency formats
  time: 0.003; rss: 415MB	NoLandingPads
  time: 0.027; rss: 415MB	SimplifyCfg
  time: 0.088; rss: 421MB	EraseRegions
  time: 0.012; rss: 421MB	AddCallGuards
  time: 0.333; rss: 442MB	ElaborateDrops
  time: 0.003; rss: 442MB	NoLandingPads
  time: 0.054; rss: 443MB	SimplifyCfg
  time: 0.031; rss: 443MB	InstCombine
  time: 0.012; rss: 443MB	Deaggregator
  time: 0.003; rss: 443MB	CopyPropagation
  time: 0.010; rss: 443MB	AddCallGuards
  time: 0.003; rss: 443MB	PreTrans
time: 0.578; rss: 443MB	Prepare MIR codegen passes
  time: 0.286; rss: 450MB	write metadata
  time: 0.472; rss: 462MB	translation item collection
  time: 0.065; rss: 467MB	codegen unit partitioning
  time: 0.054; rss: 713MB	internalize symbols
time: 5.774; rss: 593MB	translation
time: 0.000; rss: 593MB	assert dep graph
time: 0.000; rss: 593MB	serialize dep graph
  time: 0.521; rss: 405MB	llvm function passes [0]
  time: 0.248; rss: 412MB	llvm module passes [0]
  time: 10.143; rss: 411MB	codegen passes [0]
  time: 0.001; rss: 412MB	codegen passes [0]
time: 11.812; rss: 412MB	LLVM passes
time: 0.000; rss: 412MB	serialize work products
time: 0.677; rss: 103MB	linking
done
