commit 7cee8b9ffb6a2dac7e2f729988c2324e2f8ac10f
Merge: 7b0b80a e67590b
Author: bors <bors@rust-lang.org>
Date:   Thu Mar 3 02:21:28 2016 +0000

    Auto merge of #31824 - jseyfried:privacy_in_resolve, r=nikomatsakis
    
    This PR privacy checks paths as they are resolved instead of in `librustc_privacy` (fixes #12334 and fixes #31779). This removes the need for the `LastPrivate` system introduced in PR #9735, the limitations of which cause #31779.
    
    This PR also reports privacy violations in paths to intra- and inter-crate items the same way -- it always reports the first inaccessible segment of the path.
    
    Since it fixes #31779, this is a [breaking-change]. For example, the following code would break:
    ```rust
    mod foo {
        pub use foo::bar::S;
        mod bar { // `bar` should be private to `foo`
            pub struct S;
        }
    }
    
    impl foo::S {
        fn f() {}
    }
    
    fn main() {
        foo::bar::S::f(); // This is now a privacy error
    }
    ```
    
    r? @alexcrichton
rustc: ./rust-encoding.0.2.32
cargo rustc -- -Ztime-passes -Zinput-stats
    Updating registry `https://github.com/rust-lang/crates.io-index`
   Compiling encoding_index_tests v0.1.4 (file:///root/benchmarks/rust-encoding.0.2.32)
   Compiling encoding-index-japanese v1.20141219.5 (file:///root/benchmarks/rust-encoding.0.2.32)
   Compiling encoding-index-singlebyte v1.20141219.5 (file:///root/benchmarks/rust-encoding.0.2.32)
   Compiling encoding-index-korean v1.20141219.5 (file:///root/benchmarks/rust-encoding.0.2.32)
   Compiling encoding-index-tradchinese v1.20141219.5 (file:///root/benchmarks/rust-encoding.0.2.32)
   Compiling encoding-index-simpchinese v1.20141219.5 (file:///root/benchmarks/rust-encoding.0.2.32)
   Compiling encoding v0.2.32 (file:///root/benchmarks/rust-encoding.0.2.32)
time: 0.023; rss: 43MB	parsing
Lines of code:             6441
Pre-expansion node count:  30335
time: 0.007; rss: 43MB	configuration 1
time: 0.000; rss: 43MB	recursion limit
time: 0.000; rss: 43MB	gated macro checking
time: 0.000; rss: 43MB	crate injection
time: 0.003; rss: 45MB	macro loading
time: 0.000; rss: 45MB	plugin loading
time: 0.000; rss: 45MB	plugin registration
time: 0.046; rss: 48MB	expansion
time: 0.001; rss: 48MB	complete gated feature checking 1
time: 0.008; rss: 48MB	configuration 2
time: 0.000; rss: 48MB	gated configuration checking
time: 0.004; rss: 48MB	maybe building test harness
time: 0.004; rss: 48MB	prelude injection
time: 0.000; rss: 48MB	checking that all macro invocations are gone
time: 0.000; rss: 48MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 48MB	complete gated feature checking 2
time: 0.000; rss: 48MB	const fn bodies and arguments
Post-expansion node count: 41783
time: 0.003; rss: 48MB	assigning node ids
time: 0.004; rss: 52MB	lowering ast -> hir
time: 0.001; rss: 52MB	indexing hir
time: 0.000; rss: 52MB	attribute checking
time: 0.002; rss: 52MB	early lint checks
time: 0.001; rss: 50MB	external crate/lib resolution
time: 0.000; rss: 50MB	language item collection
time: 0.007; rss: 58MB	resolution
time: 0.000; rss: 58MB	lifetime resolution
time: 0.000; rss: 58MB	looking for entry point
time: 0.000; rss: 58MB	looking for plugin registrar
time: 0.002; rss: 58MB	region resolution
time: 0.000; rss: 58MB	loop checking
time: 0.000; rss: 58MB	static item recursion checking
time: 0.005; rss: 60MB	type collecting
time: 0.000; rss: 60MB	variance inference
time: 0.020; rss: 78MB	coherence checking
time: 0.018; rss: 78MB	wf checking
time: 0.012; rss: 79MB	item-types checking
time: 0.174; rss: 88MB	item-bodies checking
time: 0.000; rss: 88MB	drop-impl checking
time: 0.010; rss: 88MB	const checking
time: 0.002; rss: 88MB	privacy checking
time: 0.000; rss: 88MB	stability index
time: 0.001; rss: 88MB	intrinsic checking
time: 0.000; rss: 88MB	effect checking
time: 0.005; rss: 88MB	match checking
time: 0.002; rss: 88MB	liveness checking
time: 0.006; rss: 88MB	rvalue checking
time: 0.021; rss: 95MB	MIR dump
time: 0.000; rss: 95MB	MIR passes
time: 0.022; rss: 95MB	borrow checking
time: 0.000; rss: 95MB	reachability checking
time: 0.002; rss: 95MB	death checking
time: 0.002; rss: 95MB	stability checking
time: 0.000; rss: 95MB	unused lib feature checking
time: 0.019; rss: 95MB	lint checking
time: 0.000; rss: 95MB	resolving dependency formats
time: 0.002; rss: 95MB	erasing regions from MIR
  time: 0.023; rss: 105MB	translation item collection
  time: 0.055; rss: 138MB	write metadata
time: 0.306; rss: 138MB	translation
  time: 0.027; rss: 106MB	llvm function passes [0]
  time: 0.047; rss: 108MB	llvm module passes [0]
  time: 0.561; rss: 114MB	codegen passes [0]
  time: 0.001; rss: 98MB	codegen passes [0]
time: 0.699; rss: 97MB	LLVM passes
time: 0.050; rss: 96MB	linking
done
