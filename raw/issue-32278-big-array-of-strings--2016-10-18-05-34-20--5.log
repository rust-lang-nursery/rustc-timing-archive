commit 753ea76336be2def223335c63d7b20188651a8c6
Merge: 3543a0f 6a4bb35
Author: bors <bors@rust-lang.org>
Date:   Tue Oct 18 01:49:13 2016 -0700

    Auto merge of #37083 - nnethercote:uleb128, r=eddyb
    
    Inline read_{un,}signed_leb128 and opaque::Decoder functions.
    
    `read_unsigned_leb128` is hot within rustc because it's heavily used
    during the reading of crate metadata. This commit tweaks its signature
    (and that of `read_signed_leb128`, for consistency) so it can increment
    the buffer index directly instead of maintaining its own copy, the
    change in which is then used by the caller to advance the index.
    
    This reduces the instruction count (as measured by Cachegrind) for some
    benchmarks a bit, e.g. hyper-0.5.0 by 0.7%.
rustc: ./issue-32278-big-array-of-strings
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling issue-32278-big-array-of-strings v0.1.0 (file:///root/benchmarks/issue-32278-big-array-of-strings)
time: 0.116; rss: 62MB	parsing
Lines of code:             65577
Pre-expansion node count:  65552
time: 0.000; rss: 62MB	recursion limit
time: 0.000; rss: 62MB	crate injection
time: 0.000; rss: 62MB	plugin loading
time: 0.000; rss: 62MB	plugin registration
time: 0.026; rss: 85MB	expansion
time: 0.000; rss: 85MB	maybe building test harness
time: 0.000; rss: 85MB	maybe creating a macro crate
Post-expansion node count: 65565
time: 0.000; rss: 85MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 85MB	complete gated feature checking
time: 0.004; rss: 85MB	early lint checks
time: 0.000; rss: 85MB	AST validation
time: 0.003; rss: 85MB	name resolution
time: 0.007; rss: 104MB	lowering ast -> hir
time: 0.002; rss: 108MB	indexing hir
time: 0.001; rss: 108MB	attribute checking
time: 0.001; rss: 95MB	language item collection
time: 0.001; rss: 95MB	lifetime resolution
time: 0.000; rss: 95MB	looking for entry point
time: 0.000; rss: 95MB	looking for plugin registrar
time: 0.008; rss: 101MB	region resolution
time: 0.001; rss: 101MB	loop checking
time: 0.001; rss: 101MB	static item recursion checking
time: 0.021; rss: 101MB	compute_incremental_hashes_map
time: 0.000; rss: 101MB	load_dep_graph
time: 0.000; rss: 101MB	type collecting
time: 0.000; rss: 101MB	variance inference
time: 0.005; rss: 103MB	coherence checking
time: 0.001; rss: 104MB	wf checking
time: 0.657; rss: 114MB	item-types checking
time: 0.000; rss: 114MB	item-bodies checking
time: 0.000; rss: 114MB	drop-impl checking
time: 0.022; rss: 116MB	const checking
time: 0.002; rss: 116MB	privacy checking
time: 0.000; rss: 116MB	stability index
time: 0.001; rss: 116MB	intrinsic checking
time: 0.001; rss: 116MB	effect checking
time: 0.001; rss: 116MB	match checking
time: 0.001; rss: 116MB	liveness checking
time: 0.001; rss: 116MB	rvalue checking
time: 0.046; rss: 123MB	MIR dump
  time: 0.000; rss: 123MB	SimplifyCfg
  time: 0.001; rss: 123MB	QualifyAndPromoteConstants
  time: 0.001; rss: 123MB	TypeckMir
  time: 0.000; rss: 123MB	SimplifyBranches
  time: 0.000; rss: 123MB	SimplifyCfg
time: 0.002; rss: 123MB	MIR passes
time: 0.001; rss: 123MB	borrow checking
time: 0.000; rss: 123MB	reachability checking
time: 0.001; rss: 123MB	death checking
time: 0.001; rss: 123MB	stability checking
time: 0.000; rss: 123MB	unused lib feature checking
time: 0.026; rss: 123MB	lint checking
time: 0.001; rss: 123MB	resolving dependency formats
  time: 0.000; rss: 123MB	NoLandingPads
  time: 0.000; rss: 123MB	SimplifyCfg
  time: 0.001; rss: 123MB	EraseRegions
  time: 0.000; rss: 123MB	AddCallGuards
  time: 0.000; rss: 123MB	ElaborateDrops
  time: 0.000; rss: 123MB	NoLandingPads
  time: 0.000; rss: 123MB	SimplifyCfg
  time: 0.000; rss: 123MB	InstCombine
  time: 0.000; rss: 123MB	Deaggregator
  time: 0.000; rss: 123MB	CopyPropagation
  time: 0.000; rss: 123MB	AddCallGuards
  time: 0.000; rss: 123MB	PreTrans
time: 0.001; rss: 123MB	Prepare MIR codegen passes
  time: 0.000; rss: 124MB	write metadata
  time: 0.001; rss: 124MB	translation item collection
  time: 0.000; rss: 124MB	codegen unit partitioning
  time: 0.001; rss: 133MB	internalize symbols
time: 0.058; rss: 132MB	translation
time: 0.000; rss: 132MB	assert dep graph
time: 0.000; rss: 132MB	serialize dep graph
  time: 0.008; rss: 86MB	llvm function passes [0]
  time: 0.000; rss: 86MB	llvm module passes [0]
  time: 0.170; rss: 87MB	codegen passes [0]
  time: 0.000; rss: 87MB	codegen passes [0]
time: 0.180; rss: 87MB	LLVM passes
time: 0.000; rss: 87MB	serialize work products
  time: 0.156; rss: 76MB	running linker
time: 0.157; rss: 76MB	linking
done
