commit 0667ae93fb72eb25594258e55de9b4ae8f9f02a8
Merge: 30422de 20b9129
Author: bors <bors@rust-lang.org>
Date:   Tue May 17 13:11:57 2016 -0700

    Auto merge of #33665 - golddranks:thread-park-add-big-picture-explanation, r=aturon
    
    Added a big-picture explanation for thread::park() & co.
    
    As I said in https://www.reddit.com/r/rust/comments/4ihvv1/hey_rust_programmers_got_a_question_ask_here/d372s4i, the current explanation of the `park()` and `unpark()` is a bit unclear. It says that they're used for blocking, but then it goes on explaining the semantics in detail, leaving the bigger picture a bit unclear.
    
    I added a short high-level explanation that explains how the functions are used. I also exposed the full paths (`thread::park()` and `thread::Thread::unpark()`), because `unpark()`, being a method, is not directly visible at the module level.
rustc: ./hyper.0.5.0
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling hyper v0.5.0 (file:///root/benchmarks/hyper.0.5.0)
time: 0.032; rss: 52MB	parsing
Lines of code:             9154
Pre-expansion node count:  45851
time: 0.008; rss: 52MB	configuration 1
time: 0.000; rss: 52MB	recursion limit
time: 0.000; rss: 52MB	crate injection
time: 0.005; rss: 61MB	macro loading
time: 0.000; rss: 61MB	plugin loading
time: 0.000; rss: 61MB	plugin registration
time: 0.188; rss: 70MB	expansion
time: 0.028; rss: 70MB	configuration 2
time: 0.000; rss: 70MB	gated configuration checking
time: 0.011; rss: 70MB	maybe building test harness
time: 0.008; rss: 70MB	prelude injection
time: 0.001; rss: 70MB	checking that all macro invocations are gone
time: 0.000; rss: 70MB	checking for inline asm in case the target doesn't support it
time: 0.002; rss: 70MB	complete gated feature checking
Post-expansion node count: 103616
time: 0.008; rss: 70MB	assigning node ids
time: 0.003; rss: 72MB	collecting defs
time: 0.005; rss: 75MB	external crate/lib resolution
time: 0.006; rss: 75MB	early lint checks
time: 0.024; rss: 91MB	name resolution
time: 0.010; rss: 97MB	lowering ast -> hir
time: 0.001; rss: 99MB	indexing hir
time: 0.001; rss: 99MB	attribute checking
time: 0.001; rss: 92MB	language item collection
time: 0.002; rss: 92MB	lifetime resolution
time: 0.000; rss: 92MB	looking for entry point
time: 0.000; rss: 92MB	looking for plugin registrar
time: 0.005; rss: 96MB	region resolution
time: 0.001; rss: 96MB	loop checking
time: 0.001; rss: 96MB	static item recursion checking
time: 0.000; rss: 96MB	load_dep_graph
time: 0.018; rss: 106MB	type collecting
time: 0.000; rss: 106MB	variance inference
time: 0.044; rss: 121MB	coherence checking
time: 0.092; rss: 122MB	wf checking
time: 0.036; rss: 122MB	item-types checking
time: 0.522; rss: 134MB	item-bodies checking
time: 0.000; rss: 134MB	drop-impl checking
time: 0.043; rss: 136MB	const checking
time: 0.007; rss: 136MB	privacy checking
time: 0.001; rss: 136MB	stability index
time: 0.006; rss: 136MB	intrinsic checking
time: 0.002; rss: 136MB	effect checking
time: 0.015; rss: 136MB	match checking
time: 0.005; rss: 136MB	liveness checking
time: 0.031; rss: 136MB	rvalue checking
time: 0.061; rss: 145MB	MIR dump
time: 0.041; rss: 145MB	MIR passes
time: 0.071; rss: 145MB	borrow checking
time: 0.003; rss: 145MB	reachability checking
time: 0.005; rss: 145MB	death checking
time: 0.005; rss: 145MB	stability checking
time: 0.000; rss: 145MB	unused lib feature checking
time: 0.051; rss: 145MB	lint checking
time: 0.000; rss: 145MB	resolving dependency formats
time: 0.011; rss: 147MB	Prepare MIR codegen passes
  time: 0.221; rss: 155MB	translation item collection
  time: 0.007; rss: 157MB	codegen unit partitioning
  time: 0.131; rss: 281MB	write metadata
time: 1.581; rss: 281MB	translation
time: 0.001; rss: 281MB	assert dep graph
time: 0.000; rss: 281MB	serialize dep graph
  time: 0.097; rss: 172MB	llvm function passes [0]
  time: 0.050; rss: 174MB	llvm module passes [0]
  time: 1.615; rss: 176MB	codegen passes [0]
  time: 0.001; rss: 128MB	codegen passes [0]
time: 1.962; rss: 127MB	LLVM passes
time: 0.174; rss: 125MB	linking
done
