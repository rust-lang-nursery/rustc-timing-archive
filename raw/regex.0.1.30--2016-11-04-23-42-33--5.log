commit e96b9d2bb48b7a886a4d2b9df716265af5d15646
Merge: 713a360 67626e0
Author: bors <bors@rust-lang.org>
Date:   Fri Nov 4 17:48:07 2016 -0700

    Auto merge of #37422 - bluss:wrapping-offset, r=alexcrichton
    
    Add .wrapping_offset() methods
    
    .wrapping_offset() exposes the arith_offset intrinsic in the core
    module (as methods on raw pointers, next to offset). This is the
    first step in making it possible to stabilize the interface later.
    
    `arith_offset` is a useful tool for developing iterators for two
    reasons:
    1. `arith_offset` is used by the slice's iterator, the most important
       iterator in libcore, and it is natural that Rust users need the same
       power available to implement similar iterators.
    2. It is a good way to implement raw pointer iterations with step
       greater than one.
    
    The name seems to fit the style of methods like "wrapping_add".
rustc: ./regex.0.1.30
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling regex v0.1.30 (file:///root/benchmarks/regex.0.1.30)
time: 0.051; rss: 57MB	parsing
Lines of code:             8558
Pre-expansion node count:  58080
time: 0.000; rss: 57MB	recursion limit
time: 0.000; rss: 57MB	crate injection
time: 0.000; rss: 57MB	plugin loading
time: 0.000; rss: 57MB	plugin registration
time: 0.032; rss: 82MB	expansion
time: 0.000; rss: 82MB	maybe building test harness
time: 0.001; rss: 82MB	maybe creating a macro crate
Post-expansion node count: 68134
time: 0.000; rss: 82MB	checking for inline asm in case the target doesn't support it
time: 0.001; rss: 82MB	complete gated feature checking
time: 0.004; rss: 82MB	early lint checks
time: 0.001; rss: 82MB	AST validation
time: 0.006; rss: 83MB	name resolution
time: 0.006; rss: 87MB	lowering ast -> hir
time: 0.001; rss: 89MB	indexing hir
time: 0.001; rss: 89MB	attribute checking
time: 0.001; rss: 80MB	language item collection
time: 0.001; rss: 80MB	lifetime resolution
time: 0.000; rss: 80MB	looking for entry point
time: 0.000; rss: 80MB	looking for plugin registrar
time: 0.005; rss: 83MB	region resolution
time: 0.001; rss: 83MB	loop checking
time: 0.001; rss: 83MB	static item recursion checking
time: 0.028; rss: 84MB	compute_incremental_hashes_map
time: 0.000; rss: 84MB	load_dep_graph
time: 0.006; rss: 84MB	type collecting
time: 0.000; rss: 84MB	variance inference
time: 0.017; rss: 87MB	coherence checking
time: 0.007; rss: 88MB	wf checking
time: 0.162; rss: 98MB	item-types checking
time: 0.128; rss: 100MB	item-bodies checking
time: 0.000; rss: 100MB	drop-impl checking
time: 0.025; rss: 102MB	const checking
time: 0.002; rss: 102MB	privacy checking
time: 0.000; rss: 102MB	stability index
time: 0.001; rss: 102MB	intrinsic checking
time: 0.001; rss: 102MB	effect checking
time: 0.002; rss: 102MB	match checking
time: 0.002; rss: 102MB	liveness checking
time: 0.007; rss: 102MB	rvalue checking
time: 0.042; rss: 118MB	MIR dump
  time: 0.003; rss: 118MB	SimplifyCfg
  time: 0.005; rss: 118MB	QualifyAndPromoteConstants
  time: 0.009; rss: 118MB	TypeckMir
  time: 0.000; rss: 118MB	SimplifyBranches
  time: 0.001; rss: 118MB	SimplifyCfg
time: 0.017; rss: 118MB	MIR cleanup and validation
time: 0.021; rss: 118MB	borrow checking
time: 0.000; rss: 118MB	reachability checking
time: 0.002; rss: 118MB	death checking
time: 0.002; rss: 118MB	stability checking
time: 0.000; rss: 118MB	unused lib feature checking
time: 0.023; rss: 118MB	lint checking
time: 0.000; rss: 118MB	resolving dependency formats
  time: 0.000; rss: 118MB	NoLandingPads
  time: 0.001; rss: 118MB	SimplifyCfg
  time: 0.004; rss: 118MB	EraseRegions
  time: 0.000; rss: 118MB	AddCallGuards
  time: 0.008; rss: 120MB	ElaborateDrops
  time: 0.000; rss: 120MB	NoLandingPads
  time: 0.002; rss: 120MB	SimplifyCfg
  time: 0.002; rss: 120MB	InstCombine
  time: 0.000; rss: 120MB	Deaggregator
  time: 0.000; rss: 120MB	CopyPropagation
  time: 0.002; rss: 120MB	SimplifyLocals
  time: 0.000; rss: 120MB	AddCallGuards
  time: 0.000; rss: 120MB	PreTrans
time: 0.021; rss: 120MB	MIR optimisations
  time: 0.018; rss: 124MB	write metadata
  time: 0.050; rss: 127MB	translation item collection
  time: 0.006; rss: 127MB	codegen unit partitioning
  time: 0.006; rss: 157MB	internalize symbols
time: 0.433; rss: 157MB	translation
time: 0.000; rss: 157MB	assert dep graph
time: 0.000; rss: 157MB	serialize dep graph
  time: 0.038; rss: 111MB	llvm function passes [0]
  time: 0.019; rss: 112MB	llvm module passes [0]
  time: 0.708; rss: 114MB	codegen passes [0]
  time: 0.000; rss: 114MB	codegen passes [0]
time: 0.824; rss: 114MB	LLVM passes
time: 0.000; rss: 114MB	serialize work products
time: 0.035; rss: 85MB	linking
done
