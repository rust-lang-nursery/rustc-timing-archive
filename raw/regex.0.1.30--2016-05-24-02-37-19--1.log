commit dd6e8d45e183861d44ed91a99f0a50403b2776a3
Merge: 57ef015 0ca7d3d
Author: bors <bors@rust-lang.org>
Date:   Mon May 23 20:02:23 2016 -0700

    Auto merge of #33787 - cuviper:local-rebuild, r=alexcrichton
    
    Add --enable-local-rebuild to bootstrap from the current release
    
    In Linux distributions, it is often necessary to rebuild packages for cases like applying new patches or linking against new system libraries.  In this scenario, the rustc in the distro build environment may already match the current release that we're trying to rebuild.  Thus we don't want to use the prior release's bootstrap key, nor `--cfg stage0` for the prior unstable features.
    
    The new `configure --enable-local-rebuild` option specifies that we are rebuilding from the current release.  The current bootstrap key is used for the local rustc, and current stage1 features are also assumed.  Both the makefiles and rustbuild support this configuration.
    
    Fixes #29556
    r? @alexcrichton
rustc: ./regex.0.1.30
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling regex v0.1.30 (file:///root/benchmarks/regex.0.1.30)
time: 0.064; rss: 63MB	parsing
Lines of code:             8558
Pre-expansion node count:  58331
time: 0.011; rss: 63MB	configuration 1
time: 0.000; rss: 63MB	recursion limit
time: 0.000; rss: 63MB	crate injection
time: 0.019; rss: 95MB	macro loading
time: 0.000; rss: 95MB	plugin loading
time: 0.000; rss: 95MB	plugin registration
time: 0.059; rss: 99MB	expansion
time: 0.013; rss: 99MB	configuration 2
time: 0.000; rss: 99MB	gated configuration checking
time: 0.006; rss: 99MB	maybe building test harness
time: 0.006; rss: 99MB	prelude injection
time: 0.000; rss: 99MB	checking that all macro invocations are gone
time: 0.000; rss: 99MB	checking for inline asm in case the target doesn't support it
time: 0.001; rss: 99MB	complete gated feature checking
Post-expansion node count: 68487
time: 0.006; rss: 99MB	assigning node ids
time: 0.001; rss: 99MB	collecting defs
time: 0.001; rss: 99MB	external crate/lib resolution
time: 0.006; rss: 99MB	early lint checks
time: 0.008; rss: 101MB	name resolution
time: 0.010; rss: 111MB	lowering ast -> hir
time: 0.001; rss: 111MB	indexing hir
time: 0.001; rss: 111MB	attribute checking
time: 0.001; rss: 103MB	language item collection
time: 0.001; rss: 103MB	lifetime resolution
time: 0.000; rss: 103MB	looking for entry point
time: 0.000; rss: 103MB	looking for plugin registrar
time: 0.006; rss: 108MB	region resolution
time: 0.001; rss: 108MB	loop checking
time: 0.001; rss: 108MB	static item recursion checking
time: 0.000; rss: 108MB	load_dep_graph
time: 0.007; rss: 110MB	type collecting
time: 0.000; rss: 110MB	variance inference
time: 0.026; rss: 116MB	coherence checking
time: 0.013; rss: 116MB	wf checking
time: 0.322; rss: 123MB	item-types checking
time: 0.212; rss: 127MB	item-bodies checking
time: 0.000; rss: 127MB	drop-impl checking
time: 0.027; rss: 127MB	const checking
time: 0.004; rss: 127MB	privacy checking
time: 0.001; rss: 127MB	stability index
time: 0.002; rss: 127MB	intrinsic checking
time: 0.001; rss: 127MB	effect checking
time: 0.004; rss: 127MB	match checking
time: 0.002; rss: 127MB	liveness checking
time: 0.007; rss: 127MB	rvalue checking
time: 0.054; rss: 138MB	MIR dump
time: 0.020; rss: 138MB	MIR passes
time: 0.021; rss: 138MB	borrow checking
time: 0.000; rss: 138MB	reachability checking
time: 0.003; rss: 138MB	death checking
time: 0.002; rss: 138MB	stability checking
time: 0.000; rss: 138MB	unused lib feature checking
time: 0.028; rss: 138MB	lint checking
time: 0.000; rss: 138MB	resolving dependency formats
time: 0.005; rss: 140MB	Prepare MIR codegen passes
  time: 0.089; rss: 145MB	translation item collection
  time: 0.001; rss: 145MB	codegen unit partitioning
  time: 0.179; rss: 202MB	write metadata
time: 0.757; rss: 200MB	translation
time: 0.000; rss: 200MB	assert dep graph
time: 0.000; rss: 200MB	serialize dep graph
  time: 0.036; rss: 131MB	llvm function passes [0]
  time: 0.018; rss: 132MB	llvm module passes [0]
  time: 0.612; rss: 136MB	codegen passes [0]
  time: 0.001; rss: 117MB	codegen passes [0]
time: 0.741; rss: 114MB	LLVM passes
time: 0.067; rss: 114MB	linking
done
