commit da7f8c540b47c5bb063356bf5ad05a6a49ed0ff1
Merge: 54c133d 8d5b523
Author: bors <bors@rust-lang.org>
Date:   Mon Oct 17 00:31:25 2016 -0700

    Auto merge of #37153 - michaelwoerister:spread-arg-debuginfo, r=eddyb
    
    debuginfo: Handle spread_arg case in MIR-trans in a more stable way.
    
    Use `VariableAccess::DirectVariable` instead of `VariableAccess::IndirectVariable` in order not to make LLVM's SROA angry. This is a step towards fixing #36774 and #35547. At least, I can build Cargo with optimizations + debuginfo again.
    
    r? @eddyb
rustc: ./futures-rs-test-all
cargo rustc --test all -- -Ztime-passes -Zinput-stats
   Compiling futures v0.1.0 (file:///root/benchmarks/futures-rs-test-all)
time: 0.002; rss: 43MB	parsing
Lines of code:             412
Pre-expansion node count:  5522
time: 0.000; rss: 43MB	recursion limit
time: 0.000; rss: 43MB	crate injection
time: 0.000; rss: 43MB	plugin loading
time: 0.000; rss: 43MB	plugin registration
time: 0.024; rss: 68MB	expansion
time: 0.002; rss: 68MB	maybe building test harness
time: 0.000; rss: 68MB	maybe creating a macro crate
Post-expansion node count: 10623
time: 0.000; rss: 68MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 68MB	complete gated feature checking
time: 0.000; rss: 68MB	early lint checks
time: 0.000; rss: 68MB	AST validation
time: 0.004; rss: 68MB	name resolution
time: 0.001; rss: 68MB	lowering ast -> hir
time: 0.000; rss: 68MB	indexing hir
time: 0.000; rss: 68MB	attribute checking
time: 0.000; rss: 68MB	language item collection
time: 0.000; rss: 68MB	lifetime resolution
time: 0.000; rss: 68MB	looking for entry point
time: 0.000; rss: 68MB	looking for plugin registrar
time: 0.001; rss: 68MB	region resolution
time: 0.000; rss: 68MB	loop checking
time: 0.000; rss: 68MB	static item recursion checking
time: 0.003; rss: 68MB	compute_incremental_hashes_map
time: 0.000; rss: 68MB	load_dep_graph
time: 0.006; rss: 74MB	type collecting
time: 0.000; rss: 74MB	variance inference
time: 0.004; rss: 74MB	coherence checking
time: 0.013; rss: 74MB	wf checking
time: 0.002; rss: 74MB	item-types checking
time: 0.140; rss: 80MB	item-bodies checking
time: 0.000; rss: 80MB	drop-impl checking
time: 0.004; rss: 80MB	const checking
time: 0.000; rss: 80MB	privacy checking
time: 0.000; rss: 80MB	stability index
time: 0.000; rss: 80MB	intrinsic checking
time: 0.000; rss: 80MB	effect checking
time: 0.001; rss: 80MB	match checking
time: 0.001; rss: 80MB	liveness checking
time: 0.003; rss: 80MB	rvalue checking
time: 0.007; rss: 81MB	MIR dump
  time: 0.001; rss: 81MB	SimplifyCfg
  time: 0.002; rss: 81MB	QualifyAndPromoteConstants
  time: 0.002; rss: 82MB	TypeckMir
  time: 0.000; rss: 82MB	SimplifyBranches
  time: 0.000; rss: 82MB	SimplifyCfg
time: 0.005; rss: 82MB	MIR passes
time: 0.007; rss: 82MB	borrow checking
time: 0.000; rss: 82MB	reachability checking
time: 0.000; rss: 82MB	death checking
time: 0.001; rss: 82MB	stability checking
time: 0.000; rss: 82MB	unused lib feature checking
time: 0.003; rss: 82MB	lint checking
time: 0.001; rss: 82MB	resolving dependency formats
  time: 0.000; rss: 82MB	NoLandingPads
  time: 0.001; rss: 82MB	SimplifyCfg
  time: 0.001; rss: 82MB	EraseRegions
  time: 0.000; rss: 82MB	AddCallGuards
  time: 0.005; rss: 84MB	ElaborateDrops
  time: 0.000; rss: 84MB	NoLandingPads
  time: 0.001; rss: 84MB	SimplifyCfg
  time: 0.000; rss: 84MB	InstCombine
  time: 0.000; rss: 84MB	Deaggregator
  time: 0.000; rss: 84MB	CopyPropagation
  time: 0.000; rss: 84MB	AddCallGuards
  time: 0.000; rss: 84MB	PreTrans
time: 0.009; rss: 84MB	Prepare MIR codegen passes
  time: 0.000; rss: 84MB	write metadata
  time: 0.192; rss: 92MB	translation item collection
  time: 0.022; rss: 92MB	codegen unit partitioning
  time: 0.021; rss: 146MB	internalize symbols
time: 1.294; rss: 146MB	translation
time: 0.000; rss: 146MB	assert dep graph
time: 0.000; rss: 146MB	serialize dep graph
  time: 0.084; rss: 131MB	llvm function passes [0]
  time: 0.027; rss: 132MB	llvm module passes [0]
  time: 1.790; rss: 135MB	codegen passes [0]
  time: 0.000; rss: 135MB	codegen passes [0]
time: 1.902; rss: 135MB	LLVM passes
time: 0.000; rss: 135MB	serialize work products
  time: 0.163; rss: 83MB	running linker
time: 0.164; rss: 83MB	linking
done
