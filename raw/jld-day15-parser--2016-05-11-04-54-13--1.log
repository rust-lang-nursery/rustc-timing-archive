commit c7ab8840c8cfcd62e9f7212371ed3e31ad2ae73a
Merge: 80ec1b9 42eb703
Author: bors <bors@rust-lang.org>
Date:   Tue May 10 23:40:09 2016 -0700

    Auto merge of #33425 - eddyb:rift, r=nikomatsakis
    
    Split the type context into a global and a local (inference-only) one.
    
    After this change, each `InferCtxt` creates its own local type interner for types with inference by-products.
    Most of the code which handles both a global and a local interner uses `'gcx` and `'tcx` for them.
    A reference to the type context in that situation (e.g. `infcx.tcx`) is `TyCtxt<'a, 'gcx, 'tcx>`.
    The global type context which used to be `&'a TyCtxt<'tcx>` is now `TyCtxt<'a, 'tcx, 'tcx>`.
    
    In order to minimize the number of extra lifetime parameters, many functions became methods.
    Where possible (some inherent impls), lifetime parameters were added on the impl, not each method.
    
    As inference by-products no longer escape their inference contexts, memory usage is lower.
    Example of `-Z time-passes` excerpt for `librustc`, stage1 (~100MB gains):
    Before "rustc: Split local type contexts interners from the global one.":
    ```
    time: 0.395; rss: 335MB item-types checking
    time: 15.392; rss: 472MB        item-bodies checking
    time: 0.000; rss: 472MB drop-impl checking
    time: 1.140; rss: 478MB const checking
    time: 0.139; rss: 478MB privacy checking
    time: 0.024; rss: 478MB stability index
    time: 0.072; rss: 478MB intrinsic checking
    time: 0.038; rss: 478MB effect checking
    time: 0.255; rss: 478MB match checking
    time: 0.128; rss: 484MB liveness checking
    time: 1.372; rss: 484MB rvalue checking
    time: 1.404; rss: 597MB MIR dump
    time: 0.809; rss: 599MB MIR passes
    ```
    After:
    ```
    time: 0.467; rss: 337MB item-types checking
    time: 17.443; rss: 395MB        item-bodies checking
    time: 0.000; rss: 395MB drop-impl checking
    time: 1.423; rss: 401MB const checking
    time: 0.141; rss: 401MB privacy checking
    time: 0.024; rss: 401MB stability index
    time: 0.116; rss: 401MB intrinsic checking
    time: 0.038; rss: 401MB effect checking
    time: 0.382; rss: 401MB match checking
    time: 0.132; rss: 407MB liveness checking
    time: 1.678; rss: 407MB rvalue checking
    time: 1.614; rss: 503MB MIR dump
    time: 0.957; rss: 512MB MIR passes
    ```
    
    **NOTE**: Functions changed to methods weren't re-indented to keep this PR easier to review.
    Once approved, the changes will be mechanically performed.
    However, indentation changes of function arguments are there - and I believe there's a way to hide whitespace-only changes in diffs on GitHub.
rustc: ./jld-day15-parser
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling day15 v0.1.0 (file:///root/benchmarks/jld-day15-parser)
time: 0.001; rss: 45MB	parsing
Lines of code:             72
Pre-expansion node count:  673
time: 0.000; rss: 45MB	configuration 1
time: 0.000; rss: 45MB	recursion limit
time: 0.000; rss: 45MB	crate injection
time: 0.003; rss: 51MB	macro loading
time: 0.000; rss: 51MB	plugin loading
time: 0.000; rss: 51MB	plugin registration
time: 0.002; rss: 51MB	expansion
time: 0.000; rss: 51MB	configuration 2
time: 0.000; rss: 51MB	gated configuration checking
time: 0.000; rss: 51MB	maybe building test harness
time: 0.000; rss: 51MB	prelude injection
time: 0.000; rss: 51MB	checking that all macro invocations are gone
time: 0.000; rss: 51MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 51MB	complete gated feature checking
Post-expansion node count: 1176
time: 0.000; rss: 51MB	assigning node ids
time: 0.000; rss: 51MB	collecting defs
time: 0.004; rss: 55MB	external crate/lib resolution
time: 0.000; rss: 55MB	early lint checks
time: 0.001; rss: 60MB	name resolution
time: 0.000; rss: 60MB	lowering ast -> hir
time: 0.000; rss: 60MB	indexing hir
time: 0.000; rss: 60MB	attribute checking
time: 0.000; rss: 60MB	language item collection
time: 0.000; rss: 60MB	lifetime resolution
time: 0.000; rss: 60MB	looking for entry point
time: 0.000; rss: 60MB	looking for plugin registrar
time: 0.000; rss: 60MB	region resolution
time: 0.000; rss: 60MB	loop checking
time: 0.000; rss: 60MB	static item recursion checking
time: 0.000; rss: 64MB	load_dep_graph
time: 0.001; rss: 64MB	type collecting
time: 0.000; rss: 64MB	variance inference
time: 0.005; rss: 74MB	coherence checking
time: 0.007; rss: 78MB	wf checking
time: 0.000; rss: 78MB	item-types checking
time: 1.594; rss: 114MB	item-bodies checking
time: 0.000; rss: 114MB	drop-impl checking
time: 0.001; rss: 114MB	const checking
time: 0.000; rss: 114MB	privacy checking
time: 0.000; rss: 114MB	stability index
time: 0.000; rss: 114MB	intrinsic checking
time: 0.000; rss: 114MB	effect checking
time: 0.000; rss: 114MB	match checking
time: 0.000; rss: 114MB	liveness checking
time: 0.000; rss: 114MB	rvalue checking
time: 0.001; rss: 115MB	MIR dump
time: 0.001; rss: 115MB	MIR passes
time: 0.001; rss: 115MB	borrow checking
time: 0.000; rss: 115MB	reachability checking
time: 0.000; rss: 115MB	death checking
time: 0.000; rss: 115MB	stability checking
time: 0.000; rss: 115MB	unused lib feature checking
time: 0.004; rss: 116MB	lint checking
time: 0.002; rss: 116MB	resolving dependency formats
time: 0.000; rss: 116MB	Prepare MIR codegen passes
  time: 15.584; rss: 128MB	translation item collection
  time: 0.001; rss: 128MB	codegen unit partitioning
  time: 0.000; rss: 153MB	write metadata
time: 49.111; rss: 153MB	translation
time: 0.000; rss: 153MB	assert dep graph
time: 0.000; rss: 153MB	serialize dep graph
  time: 0.015; rss: 107MB	llvm function passes [0]
  time: 0.001; rss: 107MB	llvm module passes [0]
  time: 0.272; rss: 113MB	codegen passes [0]
  time: 0.000; rss: 107MB	codegen passes [0]
time: 0.296; rss: 107MB	LLVM passes
  time: 0.123; rss: 106MB	running linker
time: 0.123; rss: 106MB	linking
done
