commit e7c822cee29b5b939340c2cb0dfefa9a49742d77
Merge: 936bfea ee6011f
Author: bors <bors@rust-lang.org>
Date:   Wed Jul 20 19:02:00 2016 -0700

    Auto merge of #34873 - alexcrichton:down-with-compiler-rt-for-good, r=brson
    
    mk: Stop using cmake for compiler-rt
    
    The compiler-rt build system has been a never ending cause of pain for Rust
    unfortunately:
    
    * The build system is very difficult to invoke and configure to only build
      compiler-rt, especially across platforms.
    * The standard build system doesn't actually do what we want, not working for
      some of our platforms and requiring a significant number of patches on our end
      which are difficult to apply when updating compiler-rt.
    * Compiling compiler-rt requires LLVM to be compiled, which... is a big
      dependency! This also means that over time compiler-rt is not guaranteed to
      build against older versions of LLVM (or newer versions), and we often want to
      work with multiple versions of LLVM simultaneously.
    
    The makefiles and rustbuild already know how to compile C code, the code here is
    far from the *only* C code we're compiling. This patch jettisons all logic to
    work with compiler-rt's build system and just goes straight to the source. We
    just list all files manually (copied from compiler-rt's
    lib/builtins/CMakeLists.txt) and compile them into an archive.
    
    It's likely that this means we'll fail to pick up new files when we upgrade
    compiler-rt, but that seems like a much less significant cost to pay than what
    we're currently paying.
    
    cc #34400, first steps towards that
rustc: ./regex.0.1.30
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling regex v0.1.30 (file:///root/benchmarks/regex.0.1.30)
time: 0.065; rss: 99MB	parsing
Lines of code:             8558
Pre-expansion node count:  58076
time: 0.011; rss: 99MB	configuration
time: 0.000; rss: 99MB	recursion limit
time: 0.000; rss: 99MB	crate injection
time: 0.000; rss: 99MB	plugin loading
time: 0.000; rss: 99MB	plugin registration
time: 0.038; rss: 134MB	expansion
time: 0.000; rss: 134MB	maybe building test harness
time: 0.006; rss: 134MB	assigning node ids
Post-expansion node count: 68148
time: 0.000; rss: 134MB	checking for inline asm in case the target doesn't support it
time: 0.001; rss: 134MB	complete gated feature checking
time: 0.001; rss: 135MB	collecting defs
time: 0.001; rss: 135MB	external crate/lib resolution
time: 0.006; rss: 135MB	early lint checks
time: 0.001; rss: 135MB	AST validation
time: 0.007; rss: 136MB	name resolution
time: 0.009; rss: 146MB	lowering ast -> hir
time: 0.002; rss: 148MB	indexing hir
time: 0.001; rss: 148MB	attribute checking
time: 0.001; rss: 139MB	language item collection
time: 0.001; rss: 139MB	lifetime resolution
time: 0.000; rss: 139MB	looking for entry point
time: 0.000; rss: 139MB	looking for plugin registrar
time: 0.006; rss: 142MB	region resolution
time: 0.001; rss: 142MB	loop checking
time: 0.002; rss: 142MB	static item recursion checking
time: 0.000; rss: 142MB	load_dep_graph
time: 0.010; rss: 144MB	type collecting
time: 0.000; rss: 144MB	variance inference
time: 0.027; rss: 148MB	coherence checking
time: 0.014; rss: 149MB	wf checking
time: 0.335; rss: 157MB	item-types checking
time: 0.209; rss: 162MB	item-bodies checking
time: 0.000; rss: 162MB	drop-impl checking
time: 0.028; rss: 164MB	const checking
time: 0.004; rss: 164MB	privacy checking
time: 0.001; rss: 164MB	stability index
time: 0.002; rss: 164MB	intrinsic checking
time: 0.001; rss: 164MB	effect checking
time: 0.004; rss: 164MB	match checking
time: 0.002; rss: 164MB	liveness checking
time: 0.008; rss: 164MB	rvalue checking
time: 0.053; rss: 175MB	MIR dump
time: 0.021; rss: 175MB	MIR passes
time: 0.022; rss: 175MB	borrow checking
time: 0.000; rss: 175MB	reachability checking
time: 0.003; rss: 175MB	death checking
time: 0.003; rss: 175MB	stability checking
time: 0.000; rss: 175MB	unused lib feature checking
time: 0.030; rss: 175MB	lint checking
time: 0.000; rss: 175MB	resolving dependency formats
time: 0.018; rss: 178MB	Prepare MIR codegen passes
  time: 0.174; rss: 189MB	write metadata
  time: 0.059; rss: 190MB	translation item collection
  time: 0.008; rss: 190MB	codegen unit partitioning
time: 1.551; rss: 237MB	translation
time: 0.000; rss: 237MB	assert dep graph
time: 0.000; rss: 237MB	serialize dep graph
  time: 0.414; rss: 167MB	llvm function passes [0]
  time: 0.188; rss: 167MB	llvm module passes [0]
  time: 6.031; rss: 170MB	codegen passes [0]
  time: 0.002; rss: 170MB	codegen passes [0]
time: 7.053; rss: 170MB	LLVM passes
time: 0.063; rss: 150MB	linking
done
