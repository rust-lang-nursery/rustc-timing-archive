commit bed32d83fcd1337e962a58fd04fae6b8503e3283
Merge: 28c9fda 552eda7
Author: bors <bors@rust-lang.org>
Date:   Tue Apr 12 04:17:36 2016 -0700

    Auto merge of #32804 - alexcrichton:stabilize-1.9, r=brson
    
    std: Stabilize APIs for the 1.9 release
    
    This commit applies all stabilizations, renamings, and deprecations that the
    library team has decided on for the upcoming 1.9 release. All tracking issues
    have gone through a cycle-long "final comment period" and the specific APIs
    stabilized/deprecated are:
    
    Stable
    
    * `std::panic`
    * `std::panic::catch_unwind` (renamed from `recover`)
    * `std::panic::resume_unwind` (renamed from `propagate`)
    * `std::panic::AssertUnwindSafe` (renamed from `AssertRecoverSafe`)
    * `std::panic::UnwindSafe` (renamed from `RecoverSafe`)
    * `str::is_char_boundary`
    * `<*const T>::as_ref`
    * `<*mut T>::as_ref`
    * `<*mut T>::as_mut`
    * `AsciiExt::make_ascii_uppercase`
    * `AsciiExt::make_ascii_lowercase`
    * `char::decode_utf16`
    * `char::DecodeUtf16`
    * `char::DecodeUtf16Error`
    * `char::DecodeUtf16Error::unpaired_surrogate`
    * `BTreeSet::take`
    * `BTreeSet::replace`
    * `BTreeSet::get`
    * `HashSet::take`
    * `HashSet::replace`
    * `HashSet::get`
    * `OsString::with_capacity`
    * `OsString::clear`
    * `OsString::capacity`
    * `OsString::reserve`
    * `OsString::reserve_exact`
    * `OsStr::is_empty`
    * `OsStr::len`
    * `std::os::unix::thread`
    * `RawPthread`
    * `JoinHandleExt`
    * `JoinHandleExt::as_pthread_t`
    * `JoinHandleExt::into_pthread_t`
    * `HashSet::hasher`
    * `HashMap::hasher`
    * `CommandExt::exec`
    * `File::try_clone`
    * `SocketAddr::set_ip`
    * `SocketAddr::set_port`
    * `SocketAddrV4::set_ip`
    * `SocketAddrV4::set_port`
    * `SocketAddrV6::set_ip`
    * `SocketAddrV6::set_port`
    * `SocketAddrV6::set_flowinfo`
    * `SocketAddrV6::set_scope_id`
    * `<[T]>::copy_from_slice`
    * `ptr::read_volatile`
    * `ptr::write_volatile`
    * The `#[deprecated]` attribute
    * `OpenOptions::create_new`
    
    Deprecated
    
    * `std::raw::Slice` - use raw parts of `slice` module instead
    * `std::raw::Repr` - use raw parts of `slice` module instead
    * `str::char_range_at` - use slicing plus `chars()` plus `len_utf8`
    * `str::char_range_at_reverse` - use slicing plus `chars().rev()` plus `len_utf8`
    * `str::char_at` - use slicing plus `chars()`
    * `str::char_at_reverse` - use slicing plus `chars().rev()`
    * `str::slice_shift_char` - use `chars()` plus `Chars::as_str`
    * `CommandExt::session_leader` - use `before_exec` instead.
    
    Closes #27719
    cc #27751 (deprecating the `Slice` bits)
    Closes #27754
    Closes #27780
    Closes #27809
    Closes #27811
    Closes #27830
    Closes #28050
    Closes #29453
    Closes #29791
    Closes #29935
    Closes #30014
    Closes #30752
    Closes #31262
    cc #31398 (still need to deal with `before_exec`)
    Closes #31405
    Closes #31572
    Closes #31755
    Closes #31756
rustc: ./hyper.0.5.0
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling hyper v0.5.0 (file:///root/benchmarks/hyper.0.5.0)
time: 0.044; rss: 40MB	parsing
Lines of code:             9154
Pre-expansion node count:  45594
time: 0.009; rss: 41MB	configuration 1
time: 0.000; rss: 41MB	recursion limit
time: 0.000; rss: 41MB	gated macro checking
time: 0.000; rss: 41MB	crate injection
time: 0.004; rss: 46MB	macro loading
time: 0.000; rss: 46MB	plugin loading
time: 0.000; rss: 46MB	plugin registration
time: 0.198; rss: 56MB	expansion
time: 0.004; rss: 56MB	complete gated feature checking 1
time: 0.030; rss: 56MB	configuration 2
time: 0.000; rss: 56MB	gated configuration checking
time: 0.011; rss: 56MB	maybe building test harness
time: 0.009; rss: 56MB	prelude injection
time: 0.001; rss: 56MB	checking that all macro invocations are gone
time: 0.000; rss: 56MB	checking for inline asm in case the target doesn't support it
time: 0.002; rss: 56MB	complete gated feature checking 2
time: 0.001; rss: 56MB	const fn bodies and arguments
Post-expansion node count: 107125
time: 0.008; rss: 56MB	assigning node ids
time: 0.019; rss: 62MB	lowering ast -> hir
time: 0.009; rss: 63MB	indexing hir
time: 0.001; rss: 63MB	attribute checking
time: 0.007; rss: 63MB	early lint checks
time: 0.004; rss: 59MB	external crate/lib resolution
time: 0.001; rss: 59MB	language item collection
time: 0.031; rss: 75MB	resolution
time: 0.002; rss: 75MB	lifetime resolution
time: 0.000; rss: 75MB	looking for entry point
time: 0.000; rss: 75MB	looking for plugin registrar
time: 0.007; rss: 78MB	region resolution
time: 0.001; rss: 78MB	loop checking
time: 0.001; rss: 78MB	static item recursion checking
time: 0.000; rss: 78MB	load_dep_graph
time: 0.018; rss: 88MB	type collecting
time: 0.000; rss: 88MB	variance inference
time: 0.046; rss: 103MB	coherence checking
time: 0.074; rss: 104MB	wf checking
time: 0.028; rss: 105MB	item-types checking
time: 0.514; rss: 122MB	item-bodies checking
time: 0.000; rss: 122MB	drop-impl checking
time: 0.042; rss: 124MB	const checking
time: 0.009; rss: 124MB	privacy checking
time: 0.001; rss: 124MB	stability index
time: 0.004; rss: 124MB	intrinsic checking
time: 0.002; rss: 124MB	effect checking
time: 0.012; rss: 124MB	match checking
time: 0.005; rss: 125MB	liveness checking
time: 0.033; rss: 125MB	rvalue checking
time: 0.056; rss: 132MB	MIR dump
time: 0.022; rss: 132MB	MIR passes
time: 0.065; rss: 133MB	borrow checking
time: 0.003; rss: 133MB	reachability checking
time: 0.006; rss: 133MB	death checking
time: 0.006; rss: 133MB	stability checking
time: 0.000; rss: 133MB	unused lib feature checking
time: 0.046; rss: 133MB	lint checking
time: 0.000; rss: 133MB	resolving dependency formats
time: 0.014; rss: 134MB	Prepare MIR codegen passes
  time: 0.195; rss: 153MB	translation item collection
  time: 0.138; rss: 275MB	write metadata
time: 1.754; rss: 275MB	translation
time: 0.001; rss: 275MB	assert dep graph
time: 0.000; rss: 275MB	serialize dep graph
  time: 0.096; rss: 162MB	llvm function passes [0]
  time: 0.047; rss: 164MB	llvm module passes [0]
  time: 1.632; rss: 168MB	codegen passes [0]
  time: 0.001; rss: 118MB	codegen passes [0]
time: 1.975; rss: 117MB	LLVM passes
time: 0.171; rss: 114MB	linking
done
