commit c66d2380a810c9a2b3dbb4f93a830b101ee49cc2
Merge: 74dfc1d 67395d8
Author: bors <bors@rust-lang.org>
Date:   Tue Mar 15 15:03:00 2016 -0700

    Auto merge of #31838 - aochagavia:trans, r=nrc
    
    Refactor rustc_trans::save to allow other backends than CSV
    
    r? @nrc
    
    Things done:
    * Moved `(.*)Data` structs to an own module, so they can be imported easily (`use data::*`).
    * Created a `Dump` trait with callbacks for dumping items.
    * Refactored `DumpCsvVisitor` to use an implementor of `Dump` instead of dumping as CSV. Renamed it to `DumpVisitor`.
    * Created a `DumpCsv` struct that implements `Dump` and serializes items as CSV.
    
    I tried to extract some of the logic contained in `FmtStr` and `Recorder`, such as normalization of ids (I put it in `DumpVisitor`). I think it makes sense to provide the same information to other implementors of `Dump`, instead of normalizing only for `DumpCsv`. However, there is still some logic related to spans implemented only for `DumpCsv`. I just thought it would be better to merge this as soon as possible, since there are so much changes, and fix this afterwards.
rustc: ./regex.0.1.30
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling regex v0.1.30 (file:///root/benchmarks/regex.0.1.30)
time: 0.060; rss: 49MB	parsing
Lines of code:             8558
Pre-expansion node count:  58217
time: 0.011; rss: 50MB	configuration 1
time: 0.000; rss: 50MB	recursion limit
time: 0.001; rss: 50MB	gated macro checking
time: 0.000; rss: 50MB	crate injection
time: 0.003; rss: 54MB	macro loading
time: 0.000; rss: 54MB	plugin loading
time: 0.000; rss: 54MB	plugin registration
time: 0.057; rss: 55MB	expansion
time: 0.001; rss: 55MB	complete gated feature checking 1
time: 0.013; rss: 55MB	configuration 2
time: 0.000; rss: 55MB	gated configuration checking
time: 0.006; rss: 55MB	maybe building test harness
time: 0.006; rss: 55MB	prelude injection
time: 0.001; rss: 55MB	checking that all macro invocations are gone
time: 0.000; rss: 55MB	checking for inline asm in case the target doesn't support it
time: 0.001; rss: 55MB	complete gated feature checking 2
time: 0.001; rss: 55MB	const fn bodies and arguments
Post-expansion node count: 68657
time: 0.006; rss: 55MB	assigning node ids
time: 0.008; rss: 62MB	lowering ast -> hir
time: 0.002; rss: 64MB	indexing hir
time: 0.001; rss: 64MB	attribute checking
time: 0.006; rss: 64MB	early lint checks
time: 0.001; rss: 58MB	external crate/lib resolution
time: 0.001; rss: 58MB	language item collection
time: 0.009; rss: 67MB	resolution
time: 0.001; rss: 67MB	lifetime resolution
time: 0.000; rss: 67MB	looking for entry point
time: 0.000; rss: 67MB	looking for plugin registrar
time: 0.005; rss: 71MB	region resolution
time: 0.001; rss: 71MB	loop checking
time: 0.001; rss: 71MB	static item recursion checking
time: 0.003; rss: 74MB	type collecting
time: 0.000; rss: 74MB	variance inference
time: 0.063; rss: 93MB	coherence checking
time: 0.010; rss: 93MB	wf checking
time: 0.258; rss: 98MB	item-types checking
time: 0.198; rss: 112MB	item-bodies checking
time: 0.000; rss: 112MB	drop-impl checking
time: 0.023; rss: 112MB	const checking
time: 0.004; rss: 112MB	privacy checking
time: 0.000; rss: 112MB	stability index
time: 0.001; rss: 112MB	intrinsic checking
time: 0.001; rss: 112MB	effect checking
time: 0.003; rss: 112MB	match checking
time: 0.002; rss: 112MB	liveness checking
time: 0.006; rss: 112MB	rvalue checking
time: 0.014; rss: 114MB	MIR dump
time: 0.008; rss: 114MB	MIR passes
time: 0.018; rss: 114MB	borrow checking
time: 0.000; rss: 114MB	reachability checking
time: 0.002; rss: 114MB	death checking
time: 0.002; rss: 114MB	stability checking
time: 0.000; rss: 114MB	unused lib feature checking
time: 0.027; rss: 114MB	lint checking
time: 0.000; rss: 114MB	resolving dependency formats
  time: 0.058; rss: 127MB	translation item collection
  time: 0.130; rss: 175MB	write metadata
time: 0.592; rss: 175MB	translation
  time: 0.035; rss: 117MB	llvm function passes [0]
  time: 0.017; rss: 118MB	llvm module passes [0]
  time: 0.592; rss: 122MB	codegen passes [0]
  time: 0.001; rss: 102MB	codegen passes [0]
time: 0.717; rss: 100MB	LLVM passes
time: 0.065; rss: 100MB	linking
done
