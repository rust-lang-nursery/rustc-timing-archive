commit 00ce2c0ffa93bd13b52037dfd9b70d3fc68c943c
Merge: 4d91323 5e9149d
Author: bors <bors@rust-lang.org>
Date:   Mon Sep 12 01:33:40 2016 -0700

    Auto merge of #36360 - orbea:docdir, r=alexcrichton
    
    Allow setting --docdir
    
    This will allow setting `--docdir` during configure, this is useful because not all linux distributions install documentation to `/usr/share/doc`.  For example in Slackware documentation is installed to `/usr/doc/$PRGNAM-$VERSION` and `/usr/share/doc` is a symlink to `/usr/doc`.
    
    To use this `./configure --docdir=/usr/doc/$PRGNAM-$VERSION` can be used.
rustc: ./issue-32278-big-array-of-strings
/root/rust/x86_64-unknown-linux-gnu/stage2/bin/rustc big-array-of-strings.rs -Ztime-passes -Zinput-stats
time: 0.134; rss: 64MB	parsing
Lines of code:             65577
Pre-expansion node count:  65552
time: 0.000; rss: 64MB	recursion limit
time: 0.000; rss: 64MB	crate injection
time: 0.000; rss: 64MB	plugin loading
time: 0.000; rss: 64MB	plugin registration
time: 0.027; rss: 85MB	expansion
time: 0.000; rss: 85MB	maybe building test harness
time: 0.001; rss: 88MB	maybe creating a macro crate
time: 0.003; rss: 88MB	assigning node ids
Post-expansion node count: 65565
time: 0.000; rss: 88MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 88MB	complete gated feature checking
time: 0.001; rss: 88MB	collecting defs
time: 0.003; rss: 88MB	external crate/lib resolution
time: 0.004; rss: 88MB	early lint checks
time: 0.000; rss: 88MB	AST validation
time: 0.002; rss: 88MB	name resolution
time: 0.007; rss: 104MB	lowering ast -> hir
time: 0.002; rss: 109MB	indexing hir
time: 0.001; rss: 109MB	attribute checking
time: 0.001; rss: 99MB	language item collection
time: 0.001; rss: 99MB	lifetime resolution
time: 0.000; rss: 99MB	looking for entry point
time: 0.000; rss: 99MB	looking for plugin registrar
time: 0.008; rss: 105MB	region resolution
time: 0.001; rss: 105MB	loop checking
time: 0.002; rss: 105MB	static item recursion checking
time: 0.007; rss: 105MB	compute_incremental_hashes_map
time: 0.000; rss: 105MB	load_dep_graph
time: 0.000; rss: 105MB	type collecting
time: 0.000; rss: 105MB	variance inference
time: 0.005; rss: 107MB	coherence checking
time: 0.001; rss: 107MB	wf checking
time: 0.684; rss: 118MB	item-types checking
time: 0.000; rss: 118MB	item-bodies checking
time: 0.000; rss: 118MB	drop-impl checking
time: 0.023; rss: 115MB	const checking
time: 0.002; rss: 115MB	privacy checking
time: 0.001; rss: 115MB	stability index
time: 0.001; rss: 115MB	intrinsic checking
time: 0.000; rss: 115MB	effect checking
time: 0.000; rss: 115MB	match checking
time: 0.001; rss: 115MB	liveness checking
time: 0.000; rss: 115MB	rvalue checking
time: 0.047; rss: 127MB	MIR dump
  time: 0.000; rss: 127MB	SimplifyCfg
  time: 0.001; rss: 127MB	QualifyAndPromoteConstants
  time: 0.001; rss: 127MB	TypeckMir
  time: 0.000; rss: 127MB	SimplifyBranches
  time: 0.000; rss: 127MB	SimplifyCfg
time: 0.002; rss: 127MB	MIR passes
time: 0.001; rss: 127MB	borrow checking
time: 0.000; rss: 127MB	reachability checking
time: 0.001; rss: 127MB	death checking
time: 0.001; rss: 127MB	stability checking
time: 0.000; rss: 127MB	unused lib feature checking
time: 0.025; rss: 127MB	lint checking
time: 0.001; rss: 127MB	resolving dependency formats
  time: 0.000; rss: 127MB	NoLandingPads
  time: 0.000; rss: 127MB	SimplifyCfg
  time: 0.001; rss: 127MB	EraseRegions
  time: 0.000; rss: 127MB	AddCallGuards
  time: 0.000; rss: 127MB	ElaborateDrops
  time: 0.000; rss: 127MB	NoLandingPads
  time: 0.000; rss: 127MB	SimplifyCfg
  time: 0.000; rss: 127MB	Deaggregator
  time: 0.000; rss: 127MB	AddCallGuards
  time: 0.000; rss: 127MB	PreTrans
time: 0.001; rss: 127MB	Prepare MIR codegen passes
  time: 0.000; rss: 127MB	write metadata
  time: 0.001; rss: 127MB	translation item collection
  time: 0.000; rss: 127MB	codegen unit partitioning
  time: 0.001; rss: 135MB	internalize symbols
time: 0.064; rss: 134MB	translation
time: 0.000; rss: 134MB	assert dep graph
time: 0.000; rss: 134MB	serialize dep graph
  time: 0.009; rss: 91MB	llvm function passes [0]
  time: 0.000; rss: 91MB	llvm module passes [0]
  time: 0.175; rss: 90MB	codegen passes [0]
  time: 0.000; rss: 90MB	codegen passes [0]
time: 0.185; rss: 90MB	LLVM passes
time: 0.000; rss: 90MB	serialize work products
  time: 0.189; rss: 79MB	running linker
time: 0.190; rss: 79MB	linking
done
