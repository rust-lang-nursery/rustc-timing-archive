commit 6572a463116a31efba8bfddb2e64ed659311b8a1
Merge: 6dc035e ee338c3
Author: bors <bors@rust-lang.org>
Date:   Sun Oct 16 04:22:21 2016 -0700

    Auto merge of #37129 - arielb1:erased-normal, r=eddyb
    
    normalize types every time HR regions are erased
    
    Associated type normalization is inhibited by higher-ranked regions.
    Therefore, every time we erase them, we must re-normalize.
    
    I was meaning to introduce this change some time ago, but we used
    to erase regions in generic context, which broke this terribly (because
    you can't always normalize in a generic context). That seems to be gone
    now.
    
    Ensure this by having a `erase_late_bound_regions_and_normalize`
    function.
    
    Fixes #37109 (the missing call was in mir::block).
    
    r? @eddyb
rustc: ./hyper.0.5.0
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling hyper v0.5.0 (file:///root/benchmarks/hyper.0.5.0)
time: 0.042; rss: 49MB	parsing
Lines of code:             9003
Pre-expansion node count:  44129
time: 0.000; rss: 49MB	recursion limit
time: 0.000; rss: 49MB	crate injection
time: 0.000; rss: 49MB	plugin loading
time: 0.000; rss: 49MB	plugin registration
time: 0.120; rss: 85MB	expansion
time: 0.000; rss: 85MB	maybe building test harness
time: 0.001; rss: 85MB	maybe creating a macro crate
Post-expansion node count: 101371
time: 0.000; rss: 85MB	checking for inline asm in case the target doesn't support it
time: 0.002; rss: 85MB	complete gated feature checking
time: 0.003; rss: 85MB	early lint checks
time: 0.001; rss: 85MB	AST validation
time: 0.021; rss: 89MB	name resolution
time: 0.017; rss: 95MB	lowering ast -> hir
time: 0.001; rss: 96MB	indexing hir
time: 0.001; rss: 96MB	attribute checking
time: 0.001; rss: 90MB	language item collection
time: 0.002; rss: 90MB	lifetime resolution
time: 0.000; rss: 90MB	looking for entry point
time: 0.000; rss: 90MB	looking for plugin registrar
time: 0.009; rss: 92MB	region resolution
time: 0.001; rss: 92MB	loop checking
time: 0.001; rss: 92MB	static item recursion checking
time: 0.039; rss: 93MB	compute_incremental_hashes_map
time: 0.000; rss: 93MB	load_dep_graph
time: 0.017; rss: 95MB	type collecting
time: 0.000; rss: 95MB	variance inference
time: 0.034; rss: 98MB	coherence checking
time: 0.052; rss: 100MB	wf checking
time: 0.021; rss: 100MB	item-types checking
time: 0.371; rss: 110MB	item-bodies checking
time: 0.000; rss: 110MB	drop-impl checking
time: 0.033; rss: 111MB	const checking
time: 0.007; rss: 111MB	privacy checking
time: 0.001; rss: 111MB	stability index
time: 0.004; rss: 111MB	intrinsic checking
time: 0.002; rss: 111MB	effect checking
time: 0.010; rss: 111MB	match checking
time: 0.005; rss: 111MB	liveness checking
time: 0.023; rss: 111MB	rvalue checking
time: 0.078; rss: 128MB	MIR dump
  time: 0.007; rss: 129MB	SimplifyCfg
  time: 0.013; rss: 129MB	QualifyAndPromoteConstants
  time: 0.014; rss: 129MB	TypeckMir
  time: 0.001; rss: 129MB	SimplifyBranches
  time: 0.003; rss: 129MB	SimplifyCfg
time: 0.038; rss: 129MB	MIR passes
time: 0.058; rss: 130MB	borrow checking
time: 0.003; rss: 130MB	reachability checking
time: 0.005; rss: 130MB	death checking
time: 0.009; rss: 130MB	stability checking
time: 0.000; rss: 130MB	unused lib feature checking
time: 0.044; rss: 132MB	lint checking
time: 0.000; rss: 132MB	resolving dependency formats
  time: 0.001; rss: 132MB	NoLandingPads
  time: 0.003; rss: 132MB	SimplifyCfg
  time: 0.009; rss: 132MB	EraseRegions
  time: 0.001; rss: 132MB	AddCallGuards
  time: 0.026; rss: 134MB	ElaborateDrops
  time: 0.001; rss: 134MB	NoLandingPads
  time: 0.005; rss: 134MB	SimplifyCfg
  time: 0.003; rss: 134MB	InstCombine
  time: 0.003; rss: 134MB	Deaggregator
  time: 0.001; rss: 134MB	CopyPropagation
  time: 0.001; rss: 134MB	AddCallGuards
  time: 0.000; rss: 134MB	PreTrans
time: 0.054; rss: 134MB	Prepare MIR codegen passes
  time: 0.047; rss: 137MB	write metadata
  time: 0.150; rss: 143MB	translation item collection
  time: 0.017; rss: 146MB	codegen unit partitioning
  time: 0.015; rss: 200MB	internalize symbols
time: 1.214; rss: 189MB	translation
time: 0.000; rss: 189MB	assert dep graph
time: 0.000; rss: 189MB	serialize dep graph
  time: 0.087; rss: 145MB	llvm function passes [0]
  time: 0.041; rss: 147MB	llvm module passes [0]
  time: 1.611; rss: 151MB	codegen passes [0]
  time: 0.001; rss: 150MB	codegen passes [0]
time: 1.906; rss: 150MB	LLVM passes
time: 0.000; rss: 150MB	serialize work products
time: 0.140; rss: 94MB	linking
done
