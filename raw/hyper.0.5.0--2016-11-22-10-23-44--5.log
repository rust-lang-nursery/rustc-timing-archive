commit 0f7c75b74fb7adc436eedc66c0032879293eeac6
Merge: 1c11ea3 6c2a456
Author: bors <bors@rust-lang.org>
Date:   Tue Nov 22 03:29:46 2016 -0600

    Auto merge of #37834 - bluss:peek-none, r=BurntSushi
    
    Make Peekable remember peeking a None
    
    Peekable should remember if a None has been seen in the `.peek()` method.
    It ensures that `.peek(); .peek();` or `.peek(); .next();` only advances the
    underlying iterator at most once. This does not by itself make the iterator
    fused.
    
    Thanks to @s3bk for the code in `fn peek()` itself.
    
    Fixes #37784
rustc: ./hyper.0.5.0
cargo rustc  -- -Ztime-passes -Zinput-stats
   Compiling hyper v0.5.0 (file:///root/benchmarks/hyper.0.5.0)
time: 0.033; rss: 45MB	parsing
Lines of code:             9003
Pre-expansion node count:  44055
time: 0.000; rss: 46MB	recursion limit
time: 0.000; rss: 46MB	crate injection
time: 0.000; rss: 46MB	plugin loading
time: 0.000; rss: 46MB	plugin registration
time: 0.097; rss: 84MB	expansion
time: 0.000; rss: 84MB	maybe building test harness
time: 0.001; rss: 84MB	maybe creating a macro crate
Post-expansion node count: 101769
time: 0.000; rss: 84MB	checking for inline asm in case the target doesn't support it
time: 0.002; rss: 84MB	complete gated feature checking
time: 0.003; rss: 84MB	early lint checks
time: 0.001; rss: 84MB	AST validation
time: 0.018; rss: 88MB	name resolution
time: 0.014; rss: 92MB	lowering ast -> hir
time: 0.001; rss: 92MB	indexing hir
time: 0.001; rss: 92MB	attribute checking
time: 0.001; rss: 88MB	language item collection
time: 0.002; rss: 88MB	lifetime resolution
time: 0.000; rss: 88MB	looking for entry point
time: 0.000; rss: 88MB	looking for plugin registrar
time: 0.010; rss: 91MB	region resolution
time: 0.001; rss: 91MB	loop checking
time: 0.001; rss: 91MB	static item recursion checking
time: 0.039; rss: 90MB	compute_incremental_hashes_map
time: 0.000; rss: 90MB	load_dep_graph
time: 0.014; rss: 92MB	type collecting
time: 0.000; rss: 92MB	variance inference
time: 0.001; rss: 92MB	impl wf inference
time: 0.014; rss: 94MB	coherence checking
time: 0.041; rss: 95MB	wf checking
time: 0.025; rss: 96MB	item-types checking
time: 0.478; rss: 104MB	item-bodies checking
time: 0.000; rss: 104MB	drop-impl checking
time: 0.049; rss: 106MB	const checking
time: 0.009; rss: 106MB	privacy checking
time: 0.001; rss: 106MB	stability index
time: 0.003; rss: 106MB	intrinsic checking
time: 0.001; rss: 106MB	effect checking
time: 0.008; rss: 106MB	match checking
time: 0.004; rss: 107MB	liveness checking
time: 0.020; rss: 107MB	rvalue checking
time: 0.067; rss: 127MB	MIR dump
  time: 0.007; rss: 128MB	SimplifyCfg
  time: 0.015; rss: 129MB	QualifyAndPromoteConstants
  time: 0.013; rss: 129MB	TypeckMir
  time: 0.001; rss: 129MB	SimplifyBranches
  time: 0.003; rss: 129MB	SimplifyCfg
time: 0.039; rss: 129MB	MIR cleanup and validation
time: 0.055; rss: 129MB	borrow checking
time: 0.003; rss: 129MB	reachability checking
time: 0.005; rss: 130MB	death checking
time: 0.004; rss: 130MB	stability checking
time: 0.000; rss: 130MB	unused lib feature checking
time: 0.038; rss: 130MB	lint checking
time: 0.000; rss: 130MB	resolving dependency formats
  time: 0.000; rss: 130MB	NoLandingPads
  time: 0.003; rss: 130MB	SimplifyCfg
  time: 0.008; rss: 130MB	EraseRegions
  time: 0.001; rss: 130MB	AddCallGuards
  time: 0.025; rss: 132MB	ElaborateDrops
  time: 0.000; rss: 132MB	NoLandingPads
  time: 0.005; rss: 132MB	SimplifyCfg
  time: 0.003; rss: 132MB	InstCombine
  time: 0.003; rss: 132MB	Deaggregator
  time: 0.000; rss: 132MB	CopyPropagation
  time: 0.004; rss: 132MB	SimplifyLocals
  time: 0.001; rss: 132MB	AddCallGuards
  time: 0.000; rss: 132MB	PreTrans
time: 0.054; rss: 132MB	MIR optimisations
  time: 0.014; rss: 134MB	write metadata
  time: 0.130; rss: 140MB	translation item collection
  time: 0.014; rss: 144MB	codegen unit partitioning
  time: 0.012; rss: 197MB	internalize symbols
time: 1.066; rss: 197MB	translation
time: 0.000; rss: 197MB	assert dep graph
time: 0.000; rss: 197MB	serialize dep graph
  time: 0.087; rss: 149MB	llvm function passes [0]
  time: 0.043; rss: 151MB	llvm module passes [0]
  time: 1.657; rss: 152MB	codegen passes [0]
  time: 0.000; rss: 152MB	codegen passes [0]
time: 1.948; rss: 152MB	LLVM passes
time: 0.000; rss: 152MB	serialize work products
time: 0.071; rss: 96MB	linking
done
