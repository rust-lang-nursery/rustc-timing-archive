commit b6b98eaa40d2c81890cbeb31258aadb238f07279
Merge: 8c2b0e6 fff9216
Author: bors <bors@rust-lang.org>
Date:   Sat Nov 12 22:36:49 2016 -0800

    Auto merge of #37728 - QuietMisdreavus:rustdoc-enum-struct, r=GuillaumeGomez
    
    rustdoc: fold fields for enum struct variants into a docblock
    
    Per discussion in #37500, this PR updates the enum rendering code to wrap variants with named struct fields in a `docblock` span that is hidden automatically upon load of the page. This gives struct variant fields a clean separation from other enum variants, giving a boost to the readability of such documentation. Preview output is available [on the issue page](https://github.com/rust-lang/rust/issues/37500#issuecomment-260069269), but for the sake of completeness I'll include the images here again.
    
    ![rustdoc struct enum variant 4 part 1](https://cloud.githubusercontent.com/assets/5217170/20231925/96160b7e-a82a-11e6-945b-bbba95c5e4bc.PNG)
    
    When you initially load the page, there's a line under variants with struct fields letting you know you can click to expand the listing.
    
    ![rustdoc struct enum variant 4 part 2](https://cloud.githubusercontent.com/assets/3050060/20232067/1dc63266-a866-11e6-9555-8fb1c8afdcec.png)
    
    If you click to expand, the header and table unfold into a nicely-indented listing.
    
    If you want to take a look in your own browser and screen size, [I've got this version hosted on my server](https://shiva.icesoldier.me/doctest/doctest/enum.OldTopicRemoval.html).
    
    Fixes #37500
    
    r? @GuillaumeGomez
rustc: ./syntex-0.42.2
cargo rustc -p syntex_syntax  -- -Ztime-passes -Zinput-stats
   Compiling syntex_syntax v0.42.0
time: 0.092; rss: 71MB	parsing
Lines of code:             33687
Pre-expansion node count:  223115
time: 0.000; rss: 71MB	recursion limit
time: 0.000; rss: 71MB	crate injection
time: 0.000; rss: 71MB	plugin loading
time: 0.000; rss: 71MB	plugin registration
time: 0.233; rss: 144MB	expansion
time: 0.000; rss: 144MB	maybe building test harness
time: 0.006; rss: 144MB	maybe creating a macro crate
Post-expansion node count: 638863
time: 0.000; rss: 144MB	checking for inline asm in case the target doesn't support it
time: 0.013; rss: 144MB	complete gated feature checking
time: 0.023; rss: 144MB	early lint checks
time: 0.007; rss: 144MB	AST validation
time: 0.075; rss: 159MB	name resolution
time: 0.043; rss: 184MB	lowering ast -> hir
time: 0.008; rss: 194MB	indexing hir
time: 0.006; rss: 194MB	attribute checking
time: 0.005; rss: 151MB	language item collection
time: 0.010; rss: 151MB	lifetime resolution
time: 0.000; rss: 151MB	looking for entry point
time: 0.000; rss: 151MB	looking for plugin registrar
time: 0.040; rss: 171MB	region resolution
time: 0.005; rss: 171MB	loop checking
time: 0.005; rss: 171MB	static item recursion checking
time: 0.326; rss: 172MB	compute_incremental_hashes_map
time: 0.000; rss: 172MB	load_dep_graph
time: 0.049; rss: 171MB	type collecting
time: 0.001; rss: 171MB	variance inference
time: 0.018; rss: 174MB	coherence checking
time: 0.092; rss: 178MB	wf checking
time: 0.182; rss: 183MB	item-types checking
time: 3.279; rss: 234MB	item-bodies checking
time: 0.000; rss: 234MB	drop-impl checking
time: 0.217; rss: 258MB	const checking
time: 0.045; rss: 258MB	privacy checking
time: 0.005; rss: 258MB	stability index
time: 0.017; rss: 258MB	intrinsic checking
time: 0.014; rss: 258MB	effect checking
time: 0.045; rss: 258MB	match checking
time: 0.049; rss: 254MB	liveness checking
time: 0.178; rss: 254MB	rvalue checking
time: 0.372; rss: 440MB	MIR dump
  time: 0.057; rss: 443MB	SimplifyCfg
  time: 0.073; rss: 443MB	QualifyAndPromoteConstants
  time: 0.103; rss: 443MB	TypeckMir
  time: 0.004; rss: 443MB	SimplifyBranches
  time: 0.031; rss: 443MB	SimplifyCfg
time: 0.267; rss: 443MB	MIR cleanup and validation
time: 0.481; rss: 444MB	borrow checking
time: 0.020; rss: 444MB	reachability checking
time: 0.039; rss: 444MB	death checking
time: 0.030; rss: 446MB	stability checking
time: 0.000; rss: 446MB	unused lib feature checking
time: 0.195; rss: 446MB	lint checking
time: 0.000; rss: 446MB	resolving dependency formats
  time: 0.003; rss: 446MB	NoLandingPads
  time: 0.027; rss: 446MB	SimplifyCfg
  time: 0.060; rss: 452MB	EraseRegions
  time: 0.011; rss: 452MB	AddCallGuards
  time: 0.266; rss: 467MB	ElaborateDrops
  time: 0.003; rss: 467MB	NoLandingPads
  time: 0.052; rss: 467MB	SimplifyCfg
  time: 0.028; rss: 467MB	InstCombine
  time: 0.012; rss: 467MB	Deaggregator
  time: 0.002; rss: 467MB	CopyPropagation
  time: 0.034; rss: 467MB	SimplifyLocals
  time: 0.010; rss: 467MB	AddCallGuards
  time: 0.003; rss: 467MB	PreTrans
time: 0.511; rss: 467MB	MIR optimisations
  time: 0.061; rss: 478MB	write metadata
  time: 0.383; rss: 492MB	translation item collection
  time: 0.066; rss: 498MB	codegen unit partitioning
  time: 0.047; rss: 740MB	internalize symbols
time: 4.531; rss: 740MB	translation
time: 0.000; rss: 740MB	assert dep graph
time: 0.000; rss: 740MB	serialize dep graph
  time: 0.523; rss: 418MB	llvm function passes [0]
  time: 0.245; rss: 428MB	llvm module passes [0]
  time: 10.271; rss: 427MB	codegen passes [0]
  time: 0.000; rss: 427MB	codegen passes [0]
time: 11.784; rss: 427MB	LLVM passes
time: 0.000; rss: 427MB	serialize work products
time: 0.340; rss: 105MB	linking
done
