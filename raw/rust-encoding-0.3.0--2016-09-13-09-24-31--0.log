commit c87ba3f1222ba20d491e8ed76a04977283280742
Merge: 58450c0 f9a3408
Author: bors <bors@rust-lang.org>
Date:   Tue Sep 13 04:57:23 2016 -0700

    Auto merge of #36264 - matklad:zeroing-cstring, r=alexcrichton
    
    Zero first byte of CString on drop
    
    Hi! This is one more attempt to ameliorate `CString::new("...").unwrap().as_ptr()` problem (related RFC: https://github.com/rust-lang/rfcs/pull/1642).
    
    One of the biggest problems with this code is that it may actually work in practice, so the idea of this PR is to proactively break such invalid code.
    
    Looks like writing a `null` byte at the start of the CString should do the trick, and I think is an affordable cost: zeroing a single byte in `Drop` should be cheap enough compared to actual memory deallocation which would follow.
    
    I would actually prefer to do something like
    
    ```Rust
    impl Drop for CString {
        fn drop(&mut self) {
            let pattern = b"CTHULHU FHTAGN ";
            let bytes = self.inner[..self.inner.len() - 1];
            for (d, s) in bytes.iter_mut().zip(pattern.iter().cycle()) {
                *d = *s;
            }
        }
    }
    ```
    
    because Cthulhu error should be much easier to google, but unfortunately this would be too expensive in release builds, and we can't implement things `cfg(debug_assertions)` conditionally in stdlib.
    
    Not sure if the whole idea or my implementation (I've used ~~`transmute`~~ `mem::unitialized` to workaround move out of Drop thing) makes sense :)
rustc: ./rust-encoding-0.3.0
cargo rustc -- -Ztime-passes -Zinput-stats
    Updating registry `https://github.com/rust-lang/crates.io-index`
   Compiling encoding-types v0.2.0 (file:///root/benchmarks/rust-encoding-0.3.0)
   Compiling encoding_index_tests v0.1.5 (file:///root/benchmarks/rust-encoding-0.3.0)
   Compiling encoding-index-singlebyte v1.20160120.0 (file:///root/benchmarks/rust-encoding-0.3.0)
   Compiling encoding-index-tradchinese v1.20141219.6 (file:///root/benchmarks/rust-encoding-0.3.0)
   Compiling encoding-index-simpchinese v1.20160120.0 (file:///root/benchmarks/rust-encoding-0.3.0)
   Compiling encoding-index-korean v1.20141219.6 (file:///root/benchmarks/rust-encoding-0.3.0)
   Compiling encoding-index-japanese v1.20141219.6 (file:///root/benchmarks/rust-encoding-0.3.0)
   Compiling encoding v0.3.0-dev (file:///root/benchmarks/rust-encoding-0.3.0)
time: 0.021; rss: 49MB	parsing
Lines of code:             6066
Pre-expansion node count:  28489
time: 0.000; rss: 49MB	recursion limit
time: 0.000; rss: 49MB	crate injection
time: 0.000; rss: 49MB	plugin loading
time: 0.000; rss: 49MB	plugin registration
time: 0.040; rss: 73MB	expansion
time: 0.000; rss: 73MB	maybe building test harness
time: 0.000; rss: 73MB	maybe creating a macro crate
time: 0.002; rss: 73MB	assigning node ids
Post-expansion node count: 39145
time: 0.000; rss: 73MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 73MB	complete gated feature checking
time: 0.001; rss: 73MB	collecting defs
time: 0.001; rss: 76MB	external crate/lib resolution
time: 0.001; rss: 76MB	early lint checks
time: 0.000; rss: 76MB	AST validation
time: 0.004; rss: 79MB	name resolution
time: 0.004; rss: 81MB	lowering ast -> hir
time: 0.001; rss: 81MB	indexing hir
time: 0.000; rss: 81MB	attribute checking
time: 0.000; rss: 80MB	language item collection
time: 0.001; rss: 80MB	lifetime resolution
time: 0.000; rss: 80MB	looking for entry point
time: 0.000; rss: 80MB	looking for plugin registrar
time: 0.002; rss: 82MB	region resolution
time: 0.000; rss: 82MB	loop checking
time: 0.000; rss: 82MB	static item recursion checking
time: 0.015; rss: 83MB	compute_incremental_hashes_map
time: 0.000; rss: 83MB	load_dep_graph
time: 0.010; rss: 84MB	type collecting
time: 0.000; rss: 84MB	variance inference
time: 0.016; rss: 87MB	coherence checking
time: 0.013; rss: 87MB	wf checking
time: 0.011; rss: 87MB	item-types checking
time: 0.148; rss: 93MB	item-bodies checking
time: 0.000; rss: 93MB	drop-impl checking
time: 0.011; rss: 93MB	const checking
time: 0.001; rss: 93MB	privacy checking
time: 0.000; rss: 93MB	stability index
time: 0.002; rss: 93MB	intrinsic checking
time: 0.000; rss: 93MB	effect checking
time: 0.007; rss: 93MB	match checking
time: 0.001; rss: 93MB	liveness checking
time: 0.007; rss: 93MB	rvalue checking
time: 0.020; rss: 104MB	MIR dump
  time: 0.003; rss: 104MB	SimplifyCfg
  time: 0.004; rss: 104MB	QualifyAndPromoteConstants
  time: 0.005; rss: 104MB	TypeckMir
  time: 0.000; rss: 104MB	SimplifyBranches
  time: 0.001; rss: 104MB	SimplifyCfg
time: 0.013; rss: 104MB	MIR passes
time: 0.021; rss: 104MB	borrow checking
time: 0.000; rss: 104MB	reachability checking
time: 0.001; rss: 104MB	death checking
time: 0.002; rss: 104MB	stability checking
time: 0.000; rss: 104MB	unused lib feature checking
time: 0.016; rss: 104MB	lint checking
time: 0.000; rss: 104MB	resolving dependency formats
  time: 0.000; rss: 104MB	NoLandingPads
  time: 0.001; rss: 104MB	SimplifyCfg
  time: 0.003; rss: 104MB	EraseRegions
  time: 0.000; rss: 104MB	AddCallGuards
  time: 0.020; rss: 104MB	ElaborateDrops
  time: 0.000; rss: 104MB	NoLandingPads
  time: 0.002; rss: 104MB	SimplifyCfg
  time: 0.001; rss: 104MB	Deaggregator
  time: 0.000; rss: 104MB	AddCallGuards
  time: 0.000; rss: 104MB	PreTrans
time: 0.027; rss: 104MB	Prepare MIR codegen passes
  time: 0.021; rss: 106MB	write metadata
  time: 0.244; rss: 234MB	translation item collection
  time: 0.003; rss: 234MB	codegen unit partitioning
  time: 0.005; rss: 255MB	internalize symbols
time: 0.593; rss: 248MB	translation
time: 0.000; rss: 248MB	assert dep graph
time: 0.000; rss: 248MB	serialize dep graph
  time: 0.027; rss: 123MB	llvm function passes [0]
  time: 0.058; rss: 127MB	llvm module passes [0]
  time: 0.646; rss: 133MB	codegen passes [0]
  time: 0.001; rss: 133MB	codegen passes [0]
time: 0.788; rss: 133MB	LLVM passes
time: 0.000; rss: 133MB	serialize work products
time: 0.081; rss: 103MB	linking
done
