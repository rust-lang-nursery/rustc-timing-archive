commit 9003e1ab6a2e26ec881b9ff297095a8343ebc7d1
Merge: 7e39c0e 17cb7bd
Author: bors <bors@rust-lang.org>
Date:   Sat Nov 26 12:32:19 2016 -0600

    Auto merge of #38008 - bluss:rustbuild-benches, r=alexcrichton
    
    Add rustbuild command `bench`
    
    Add command bench to rustbuild, so that `./x.py bench <path>` can compile and run benchmarks.
    
    `./x.py bench --stage 1 src/libcollections` and `./x.py bench --stage 1 src/libstd` should both compile well. Just `./x.py bench` runs all benchmarks for the libstd crates.
    
    Fixes #37897
rustc: ./syntex-0.42.2
cargo rustc -p syntex_syntax  -- -Ztime-passes -Zinput-stats
   Compiling syntex_syntax v0.42.0
time: 0.091; rss: 71MB	parsing
Lines of code:             33687
Pre-expansion node count:  223115
time: 0.000; rss: 71MB	recursion limit
time: 0.000; rss: 71MB	crate injection
time: 0.000; rss: 71MB	plugin loading
time: 0.000; rss: 71MB	plugin registration
time: 0.237; rss: 146MB	expansion
time: 0.000; rss: 146MB	maybe building test harness
time: 0.006; rss: 146MB	maybe creating a macro crate
Post-expansion node count: 638863
time: 0.000; rss: 146MB	checking for inline asm in case the target doesn't support it
time: 0.012; rss: 146MB	complete gated feature checking
time: 0.022; rss: 146MB	early lint checks
time: 0.007; rss: 146MB	AST validation
time: 0.075; rss: 161MB	name resolution
time: 0.044; rss: 184MB	lowering ast -> hir
time: 0.008; rss: 194MB	indexing hir
time: 0.006; rss: 194MB	attribute checking
time: 0.004; rss: 149MB	language item collection
time: 0.010; rss: 149MB	lifetime resolution
time: 0.000; rss: 149MB	looking for entry point
time: 0.000; rss: 149MB	looking for plugin registrar
time: 0.041; rss: 169MB	region resolution
time: 0.005; rss: 169MB	loop checking
time: 0.004; rss: 169MB	static item recursion checking
time: 0.328; rss: 169MB	compute_incremental_hashes_map
time: 0.000; rss: 169MB	load_dep_graph
time: 0.047; rss: 169MB	type collecting
time: 0.001; rss: 169MB	variance inference
time: 0.002; rss: 169MB	impl wf inference
time: 0.018; rss: 172MB	coherence checking
time: 0.087; rss: 176MB	wf checking
time: 0.178; rss: 181MB	item-types checking
time: 6.101; rss: 232MB	item-bodies checking
time: 0.000; rss: 232MB	drop-impl checking
time: 0.211; rss: 252MB	const checking
time: 0.047; rss: 252MB	privacy checking
time: 0.006; rss: 252MB	stability index
time: 0.017; rss: 252MB	intrinsic checking
time: 0.014; rss: 252MB	effect checking
time: 0.045; rss: 252MB	match checking
time: 0.049; rss: 241MB	liveness checking
time: 0.176; rss: 241MB	rvalue checking
time: 0.363; rss: 436MB	MIR dump
  time: 0.056; rss: 438MB	SimplifyCfg
  time: 0.076; rss: 438MB	QualifyAndPromoteConstants
  time: 0.102; rss: 438MB	TypeckMir
  time: 0.004; rss: 438MB	SimplifyBranches
  time: 0.030; rss: 438MB	SimplifyCfg
time: 0.268; rss: 438MB	MIR cleanup and validation
time: 0.538; rss: 439MB	borrow checking
time: 0.019; rss: 439MB	reachability checking
time: 0.038; rss: 439MB	death checking
time: 0.030; rss: 441MB	stability checking
time: 0.000; rss: 441MB	unused lib feature checking
time: 0.192; rss: 441MB	lint checking
time: 0.000; rss: 441MB	resolving dependency formats
  time: 0.003; rss: 441MB	NoLandingPads
  time: 0.026; rss: 441MB	SimplifyCfg
  time: 0.062; rss: 447MB	EraseRegions
  time: 0.010; rss: 447MB	AddCallGuards
  time: 0.269; rss: 463MB	ElaborateDrops
  time: 0.003; rss: 463MB	NoLandingPads
  time: 0.051; rss: 463MB	SimplifyCfg
  time: 0.028; rss: 463MB	InstCombine
  time: 0.012; rss: 463MB	Deaggregator
  time: 0.002; rss: 463MB	CopyPropagation
  time: 0.033; rss: 463MB	SimplifyLocals
  time: 0.009; rss: 463MB	AddCallGuards
  time: 0.002; rss: 463MB	PreTrans
time: 0.510; rss: 463MB	MIR optimisations
  time: 0.060; rss: 473MB	write metadata
  time: 0.379; rss: 488MB	translation item collection
  time: 0.057; rss: 496MB	codegen unit partitioning
  time: 0.040; rss: 739MB	internalize symbols
time: 4.340; rss: 739MB	translation
time: 0.000; rss: 739MB	assert dep graph
time: 0.000; rss: 739MB	serialize dep graph
  time: 0.524; rss: 428MB	llvm function passes [0]
  time: 0.281; rss: 435MB	llvm module passes [0]
  time: 10.342; rss: 433MB	codegen passes [0]
  time: 0.000; rss: 433MB	codegen passes [0]
time: 11.905; rss: 433MB	LLVM passes
time: 0.000; rss: 433MB	serialize work products
time: 0.335; rss: 115MB	linking
done
