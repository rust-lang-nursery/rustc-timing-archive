commit 9a140454ea47b7fd107b6e963b7ea2aef74e9518
Merge: 9743c66 f860f8b
Author: bors <bors@rust-lang.org>
Date:   Wed May 18 08:47:53 2016 -0700

    Auto merge of #33476 - nikomatsakis:incr-comp-xcrate, r=mw
    
    track incr. comp. dependencies across crates
    
    This PR refactors the compiler's incremental compilation hashing so that it can track dependencies across crates. The main bits are:
    
    - computing a hash representing the metadata for an item we are emitting
      - we do this by making `MetaData(X)` be the current task while computing metadata for an item
      - this naturally registers reads from any tables and things that we read for that purpose
      - we can then hash all the inputs to those tables
    - tracking when we access metadata
      - we do this by registering a read of `MetaData(X)` for each foreign item `X` whose metadata we read
    - hashing metadata from foreign items
      - we do this by loading up metadata from a file in the incr. comp. directory
      - if there is no file, we use the SVH for the entire crate
    
    There is one very simple test only at this point. The next PR will be focused on expanding out the tests.
    
    Note that this is based on top of https://github.com/rust-lang/rust/pull/33228
    
    r? @michaelwoerister
rustc: ./rust-encoding.0.2.32
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling encoding v0.2.32 (file:///root/benchmarks/rust-encoding.0.2.32)
time: 0.024; rss: 50MB	parsing
Lines of code:             6441
Pre-expansion node count:  30537
time: 0.006; rss: 57MB	configuration 1
time: 0.000; rss: 57MB	recursion limit
time: 0.000; rss: 57MB	crate injection
time: 0.019; rss: 89MB	macro loading
time: 0.000; rss: 89MB	plugin loading
time: 0.000; rss: 89MB	plugin registration
time: 0.044; rss: 92MB	expansion
time: 0.006; rss: 92MB	configuration 2
time: 0.000; rss: 92MB	gated configuration checking
time: 0.003; rss: 92MB	maybe building test harness
time: 0.003; rss: 92MB	prelude injection
time: 0.000; rss: 92MB	checking that all macro invocations are gone
time: 0.000; rss: 92MB	checking for inline asm in case the target doesn't support it
time: 0.001; rss: 92MB	complete gated feature checking
Post-expansion node count: 41376
time: 0.003; rss: 92MB	assigning node ids
time: 0.001; rss: 92MB	collecting defs
time: 0.001; rss: 92MB	external crate/lib resolution
time: 0.002; rss: 92MB	early lint checks
time: 0.008; rss: 94MB	name resolution
time: 0.005; rss: 97MB	lowering ast -> hir
time: 0.000; rss: 97MB	indexing hir
time: 0.000; rss: 97MB	attribute checking
time: 0.000; rss: 96MB	language item collection
time: 0.000; rss: 96MB	lifetime resolution
time: 0.000; rss: 96MB	looking for entry point
time: 0.000; rss: 96MB	looking for plugin registrar
time: 0.002; rss: 98MB	region resolution
time: 0.000; rss: 98MB	loop checking
time: 0.000; rss: 98MB	static item recursion checking
time: 0.000; rss: 98MB	load_dep_graph
time: 0.005; rss: 100MB	type collecting
time: 0.000; rss: 100MB	variance inference
time: 0.021; rss: 103MB	coherence checking
time: 0.023; rss: 104MB	wf checking
time: 0.014; rss: 104MB	item-types checking
time: 0.220; rss: 111MB	item-bodies checking
time: 0.000; rss: 111MB	drop-impl checking
time: 0.013; rss: 111MB	const checking
time: 0.002; rss: 111MB	privacy checking
time: 0.000; rss: 111MB	stability index
time: 0.002; rss: 111MB	intrinsic checking
time: 0.000; rss: 111MB	effect checking
time: 0.007; rss: 111MB	match checking
time: 0.002; rss: 111MB	liveness checking
time: 0.008; rss: 111MB	rvalue checking
time: 0.023; rss: 117MB	MIR dump
time: 0.014; rss: 117MB	MIR passes
time: 0.025; rss: 117MB	borrow checking
time: 0.000; rss: 117MB	reachability checking
time: 0.002; rss: 117MB	death checking
time: 0.002; rss: 117MB	stability checking
time: 0.000; rss: 117MB	unused lib feature checking
time: 0.024; rss: 117MB	lint checking
time: 0.000; rss: 117MB	resolving dependency formats
time: 0.004; rss: 117MB	Prepare MIR codegen passes
  time: 0.029; rss: 120MB	translation item collection
  time: 0.001; rss: 120MB	codegen unit partitioning
  time: 0.058; rss: 154MB	write metadata
time: 0.353; rss: 154MB	translation
time: 0.000; rss: 154MB	assert dep graph
time: 0.000; rss: 154MB	serialize dep graph
  time: 0.026; rss: 120MB	llvm function passes [0]
  time: 0.051; rss: 123MB	llvm module passes [0]
  time: 0.582; rss: 127MB	codegen passes [0]
  time: 0.000; rss: 112MB	codegen passes [0]
time: 0.723; rss: 112MB	LLVM passes
time: 0.053; rss: 110MB	linking
done
