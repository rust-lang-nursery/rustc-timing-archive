commit 493d999ffa44be6610441dabab80e18dda90015a
Merge: f6e125f fc4d0ec
Author: bors <bors@rust-lang.org>
Date:   Thu Mar 3 17:41:13 2016 +0000

    Auto merge of #32007 - nikomatsakis:compiletest-incremental, r=alexcrichton
    
    This PR extends compiletest to support **test revisions** and with a preliminary **incremental testing harness**. run-pass, compile-fail, and run-fail tests may be tagged with
    
    ```
    // revisions: a b c d
    ```
    
    This will cause the test to be re-run four times with `--cfg {a,b,c,d}` in turn. This means you can write very closely related things using `cfg`. You can also configure the headers/expected-errors by writing `//[foo] header: value` or `//[foo]~ ERROR bar`, where `foo` is the name of your revision. See the changes to `coherence-cow.rs` as a proof of concept.
    
    The main point of this work is to support the incremental testing harness. This PR contains an initial, unused version. The code that uses it will land later. The incremental testing harness compiles each revision in turn, and requires that the revisions have particular names (e.g., `rpass2`, `cfail3`), which tell it whether a particular revision is expected to compile or not.
    
    Two questions:
    
    - Is there compiletest documentation anywhere I can update?
    - Should I hold off on landing the incremental testing harness until I have the code to exercise it? (That will come in a separate PR, still fixing a few details)
    
    r? @alexcrichton
    cc @rust-lang/compiler <-- new testing capabilities
rustc: ./inflate-0.1.0
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling inflate v0.1.0 (file:///root/benchmarks/inflate-0.1.0)
time: 0.008; rss: 35MB	parsing
Lines of code:             956
Pre-expansion node count:  4761
time: 0.001; rss: 35MB	configuration 1
time: 0.000; rss: 35MB	recursion limit
time: 0.000; rss: 35MB	gated macro checking
time: 0.000; rss: 35MB	crate injection
time: 0.003; rss: 39MB	macro loading
time: 0.000; rss: 39MB	plugin loading
time: 0.000; rss: 39MB	plugin registration
time: 0.085; rss: 46MB	expansion
time: 0.001; rss: 46MB	complete gated feature checking 1
time: 0.009; rss: 46MB	configuration 2
time: 0.000; rss: 46MB	gated configuration checking
time: 0.004; rss: 46MB	maybe building test harness
time: 0.004; rss: 46MB	prelude injection
time: 0.000; rss: 46MB	checking that all macro invocations are gone
time: 0.000; rss: 46MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 46MB	complete gated feature checking 2
time: 0.000; rss: 46MB	const fn bodies and arguments
Post-expansion node count: 54798
time: 0.004; rss: 46MB	assigning node ids
time: 0.015; rss: 51MB	lowering ast -> hir
time: 0.002; rss: 51MB	indexing hir
time: 0.000; rss: 51MB	attribute checking
time: 0.004; rss: 51MB	early lint checks
time: 0.001; rss: 47MB	external crate/lib resolution
time: 0.001; rss: 47MB	language item collection
time: 0.012; rss: 53MB	resolution
time: 0.001; rss: 53MB	lifetime resolution
time: 0.000; rss: 53MB	looking for entry point
time: 0.000; rss: 53MB	looking for plugin registrar
time: 0.003; rss: 55MB	region resolution
time: 0.000; rss: 55MB	loop checking
time: 0.000; rss: 55MB	static item recursion checking
time: 0.001; rss: 57MB	type collecting
time: 0.000; rss: 57MB	variance inference
time: 0.009; rss: 68MB	coherence checking
time: 0.002; rss: 70MB	wf checking
time: 0.002; rss: 70MB	item-types checking
time: 2.564; rss: 93MB	item-bodies checking
time: 0.000; rss: 93MB	drop-impl checking
time: 0.014; rss: 94MB	const checking
time: 0.002; rss: 94MB	privacy checking
time: 0.000; rss: 94MB	stability index
time: 0.000; rss: 94MB	intrinsic checking
time: 0.001; rss: 94MB	effect checking
time: 0.003; rss: 94MB	match checking
time: 0.311; rss: 95MB	liveness checking
time: 0.009; rss: 94MB	rvalue checking
time: 0.037; rss: 104MB	MIR dump
time: 0.000; rss: 104MB	MIR passes
time: 0.208; rss: 101MB	borrow checking
time: 0.000; rss: 101MB	reachability checking
time: 0.003; rss: 101MB	death checking
time: 0.002; rss: 101MB	stability checking
time: 0.000; rss: 101MB	unused lib feature checking
time: 0.017; rss: 101MB	lint checking
time: 0.000; rss: 101MB	resolving dependency formats
time: 0.002; rss: 101MB	erasing regions from MIR
  time: 0.012; rss: 113MB	translation item collection
  time: 0.003; rss: 129MB	write metadata
time: 0.362; rss: 126MB	translation
  time: 0.025; rss: 96MB	llvm function passes [0]
  time: 0.005; rss: 96MB	llvm module passes [0]
  time: 0.490; rss: 102MB	codegen passes [0]
  time: 0.000; rss: 90MB	codegen passes [0]
time: 0.563; rss: 89MB	LLVM passes
time: 0.034; rss: 89MB	linking
done
