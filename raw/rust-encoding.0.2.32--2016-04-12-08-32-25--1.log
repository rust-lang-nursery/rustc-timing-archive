commit bed32d83fcd1337e962a58fd04fae6b8503e3283
Merge: 28c9fda 552eda7
Author: bors <bors@rust-lang.org>
Date:   Tue Apr 12 04:17:36 2016 -0700

    Auto merge of #32804 - alexcrichton:stabilize-1.9, r=brson
    
    std: Stabilize APIs for the 1.9 release
    
    This commit applies all stabilizations, renamings, and deprecations that the
    library team has decided on for the upcoming 1.9 release. All tracking issues
    have gone through a cycle-long "final comment period" and the specific APIs
    stabilized/deprecated are:
    
    Stable
    
    * `std::panic`
    * `std::panic::catch_unwind` (renamed from `recover`)
    * `std::panic::resume_unwind` (renamed from `propagate`)
    * `std::panic::AssertUnwindSafe` (renamed from `AssertRecoverSafe`)
    * `std::panic::UnwindSafe` (renamed from `RecoverSafe`)
    * `str::is_char_boundary`
    * `<*const T>::as_ref`
    * `<*mut T>::as_ref`
    * `<*mut T>::as_mut`
    * `AsciiExt::make_ascii_uppercase`
    * `AsciiExt::make_ascii_lowercase`
    * `char::decode_utf16`
    * `char::DecodeUtf16`
    * `char::DecodeUtf16Error`
    * `char::DecodeUtf16Error::unpaired_surrogate`
    * `BTreeSet::take`
    * `BTreeSet::replace`
    * `BTreeSet::get`
    * `HashSet::take`
    * `HashSet::replace`
    * `HashSet::get`
    * `OsString::with_capacity`
    * `OsString::clear`
    * `OsString::capacity`
    * `OsString::reserve`
    * `OsString::reserve_exact`
    * `OsStr::is_empty`
    * `OsStr::len`
    * `std::os::unix::thread`
    * `RawPthread`
    * `JoinHandleExt`
    * `JoinHandleExt::as_pthread_t`
    * `JoinHandleExt::into_pthread_t`
    * `HashSet::hasher`
    * `HashMap::hasher`
    * `CommandExt::exec`
    * `File::try_clone`
    * `SocketAddr::set_ip`
    * `SocketAddr::set_port`
    * `SocketAddrV4::set_ip`
    * `SocketAddrV4::set_port`
    * `SocketAddrV6::set_ip`
    * `SocketAddrV6::set_port`
    * `SocketAddrV6::set_flowinfo`
    * `SocketAddrV6::set_scope_id`
    * `<[T]>::copy_from_slice`
    * `ptr::read_volatile`
    * `ptr::write_volatile`
    * The `#[deprecated]` attribute
    * `OpenOptions::create_new`
    
    Deprecated
    
    * `std::raw::Slice` - use raw parts of `slice` module instead
    * `std::raw::Repr` - use raw parts of `slice` module instead
    * `str::char_range_at` - use slicing plus `chars()` plus `len_utf8`
    * `str::char_range_at_reverse` - use slicing plus `chars().rev()` plus `len_utf8`
    * `str::char_at` - use slicing plus `chars()`
    * `str::char_at_reverse` - use slicing plus `chars().rev()`
    * `str::slice_shift_char` - use `chars()` plus `Chars::as_str`
    * `CommandExt::session_leader` - use `before_exec` instead.
    
    Closes #27719
    cc #27751 (deprecating the `Slice` bits)
    Closes #27754
    Closes #27780
    Closes #27809
    Closes #27811
    Closes #27830
    Closes #28050
    Closes #29453
    Closes #29791
    Closes #29935
    Closes #30014
    Closes #30752
    Closes #31262
    cc #31398 (still need to deal with `before_exec`)
    Closes #31405
    Closes #31572
    Closes #31755
    Closes #31756
rustc: ./rust-encoding.0.2.32
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling encoding v0.2.32 (file:///root/benchmarks/rust-encoding.0.2.32)
time: 0.022; rss: 46MB	parsing
Lines of code:             6441
Pre-expansion node count:  30335
time: 0.006; rss: 46MB	configuration 1
time: 0.000; rss: 46MB	recursion limit
time: 0.000; rss: 46MB	gated macro checking
time: 0.000; rss: 46MB	crate injection
time: 0.003; rss: 49MB	macro loading
time: 0.000; rss: 49MB	plugin loading
time: 0.000; rss: 49MB	plugin registration
time: 0.044; rss: 52MB	expansion
time: 0.001; rss: 52MB	complete gated feature checking 1
time: 0.006; rss: 52MB	configuration 2
time: 0.000; rss: 52MB	gated configuration checking
time: 0.003; rss: 52MB	maybe building test harness
time: 0.003; rss: 52MB	prelude injection
time: 0.000; rss: 52MB	checking that all macro invocations are gone
time: 0.000; rss: 52MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 52MB	complete gated feature checking 2
time: 0.000; rss: 52MB	const fn bodies and arguments
Post-expansion node count: 41611
time: 0.003; rss: 52MB	assigning node ids
time: 0.004; rss: 55MB	lowering ast -> hir
time: 0.001; rss: 57MB	indexing hir
time: 0.001; rss: 57MB	attribute checking
time: 0.002; rss: 57MB	early lint checks
time: 0.001; rss: 57MB	external crate/lib resolution
time: 0.000; rss: 57MB	language item collection
time: 0.008; rss: 66MB	resolution
time: 0.000; rss: 66MB	lifetime resolution
time: 0.000; rss: 66MB	looking for entry point
time: 0.000; rss: 66MB	looking for plugin registrar
time: 0.002; rss: 68MB	region resolution
time: 0.000; rss: 68MB	loop checking
time: 0.000; rss: 68MB	static item recursion checking
time: 0.000; rss: 68MB	load_dep_graph
time: 0.005; rss: 70MB	type collecting
time: 0.000; rss: 70MB	variance inference
time: 0.021; rss: 85MB	coherence checking
time: 0.017; rss: 86MB	wf checking
time: 0.012; rss: 86MB	item-types checking
time: 0.195; rss: 96MB	item-bodies checking
time: 0.000; rss: 96MB	drop-impl checking
time: 0.010; rss: 96MB	const checking
time: 0.002; rss: 96MB	privacy checking
time: 0.000; rss: 96MB	stability index
time: 0.001; rss: 96MB	intrinsic checking
time: 0.000; rss: 96MB	effect checking
time: 0.006; rss: 98MB	match checking
time: 0.002; rss: 98MB	liveness checking
time: 0.006; rss: 98MB	rvalue checking
time: 0.017; rss: 104MB	MIR dump
time: 0.008; rss: 105MB	MIR passes
time: 0.022; rss: 105MB	borrow checking
time: 0.000; rss: 105MB	reachability checking
time: 0.002; rss: 105MB	death checking
time: 0.002; rss: 105MB	stability checking
time: 0.000; rss: 105MB	unused lib feature checking
time: 0.023; rss: 105MB	lint checking
time: 0.000; rss: 105MB	resolving dependency formats
time: 0.003; rss: 106MB	Prepare MIR codegen passes
  time: 0.023; rss: 116MB	translation item collection
  time: 0.058; rss: 149MB	write metadata
time: 0.349; rss: 149MB	translation
time: 0.000; rss: 149MB	assert dep graph
time: 0.000; rss: 149MB	serialize dep graph
  time: 0.027; rss: 113MB	llvm function passes [0]
  time: 0.050; rss: 116MB	llvm module passes [0]
  time: 0.581; rss: 122MB	codegen passes [0]
  time: 0.001; rss: 107MB	codegen passes [0]
time: 0.725; rss: 106MB	LLVM passes
time: 0.054; rss: 104MB	linking
done
