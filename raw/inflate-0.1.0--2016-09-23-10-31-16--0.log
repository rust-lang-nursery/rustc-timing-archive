commit 86a686c4f71d208ecf8f7ee5a035b17a545d8b62
Merge: f2c53ea bfa3433
Author: bors <bors@rust-lang.org>
Date:   Fri Sep 23 06:17:26 2016 -0700

    Auto merge of #36335 - mcarton:compiletest, r=GuillaumeGomez
    
    Fix ICE test in compiletest fail-tests
    
    While working on Clippy which uses *compiletest*, I noticed that as long as all expected error are found, *compile-fail* tests will be marked *ok* even if there is an ICE. One function seems to have not been updated with JSON errors because ICEs are now reported like this:
    ```json
    {"message":"../src/librustc/ty/context.rs:161: Attempted to intern `_` which contains inference types/regions in the global type context","code":null,"level":"error: internal compiler error","spans":[],"children":[],"rendered":null}
    ```
    I don't think I can add a test for that.
    
    I guess:
    r? @nikomatsakis
rustc: ./inflate-0.1.0
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling inflate v0.1.0 (file:///root/benchmarks/inflate-0.1.0)
time: 0.004; rss: 44MB	parsing
Lines of code:             956
Pre-expansion node count:  4740
time: 0.000; rss: 44MB	recursion limit
time: 0.000; rss: 44MB	crate injection
time: 0.000; rss: 44MB	plugin loading
time: 0.000; rss: 44MB	plugin registration
time: 0.072; rss: 74MB	expansion
time: 0.000; rss: 74MB	maybe building test harness
time: 0.000; rss: 74MB	maybe creating a macro crate
time: 0.002; rss: 74MB	assigning node ids
Post-expansion node count: 55771
time: 0.000; rss: 74MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 74MB	complete gated feature checking
time: 0.005; rss: 74MB	collecting defs
time: 0.001; rss: 74MB	external crate/lib resolution
time: 0.002; rss: 74MB	early lint checks
time: 0.000; rss: 74MB	AST validation
time: 0.007; rss: 76MB	name resolution
time: 0.006; rss: 78MB	lowering ast -> hir
time: 0.001; rss: 80MB	indexing hir
time: 0.001; rss: 80MB	attribute checking
time: 0.001; rss: 78MB	language item collection
time: 0.001; rss: 78MB	lifetime resolution
time: 0.000; rss: 78MB	looking for entry point
time: 0.000; rss: 78MB	looking for plugin registrar
time: 0.003; rss: 79MB	region resolution
time: 0.000; rss: 79MB	loop checking
time: 0.000; rss: 79MB	static item recursion checking
time: 0.022; rss: 79MB	compute_incremental_hashes_map
time: 0.000; rss: 79MB	load_dep_graph
time: 0.001; rss: 80MB	type collecting
time: 0.000; rss: 80MB	variance inference
time: 0.008; rss: 81MB	coherence checking
time: 0.002; rss: 81MB	wf checking
time: 0.002; rss: 81MB	item-types checking
time: 2.381; rss: 97MB	item-bodies checking
time: 0.000; rss: 97MB	drop-impl checking
time: 0.016; rss: 98MB	const checking
time: 0.001; rss: 98MB	privacy checking
time: 0.000; rss: 98MB	stability index
time: 0.001; rss: 98MB	intrinsic checking
time: 0.001; rss: 98MB	effect checking
time: 0.004; rss: 98MB	match checking
time: 0.067; rss: 95MB	liveness checking
time: 0.011; rss: 95MB	rvalue checking
time: 0.035; rss: 115MB	MIR dump
  time: 0.007; rss: 114MB	SimplifyCfg
  time: 0.005; rss: 114MB	QualifyAndPromoteConstants
  time: 0.006; rss: 114MB	TypeckMir
  time: 0.000; rss: 114MB	SimplifyBranches
  time: 0.004; rss: 114MB	SimplifyCfg
time: 0.022; rss: 114MB	MIR passes
time: 0.202; rss: 113MB	borrow checking
time: 0.000; rss: 113MB	reachability checking
time: 0.003; rss: 113MB	death checking
time: 0.002; rss: 113MB	stability checking
time: 0.000; rss: 113MB	unused lib feature checking
time: 0.019; rss: 117MB	lint checking
time: 0.000; rss: 117MB	resolving dependency formats
  time: 0.000; rss: 117MB	NoLandingPads
  time: 0.002; rss: 117MB	SimplifyCfg
  time: 0.003; rss: 117MB	EraseRegions
  time: 0.001; rss: 117MB	AddCallGuards
  time: 0.162; rss: 118MB	ElaborateDrops
  time: 0.000; rss: 118MB	NoLandingPads
  time: 0.006; rss: 115MB	SimplifyCfg
  time: 0.000; rss: 115MB	Deaggregator
  time: 0.001; rss: 115MB	AddCallGuards
  time: 0.000; rss: 115MB	PreTrans
time: 0.175; rss: 115MB	Prepare MIR codegen passes
  time: 0.003; rss: 116MB	write metadata
  time: 0.009; rss: 117MB	translation item collection
  time: 0.001; rss: 117MB	codegen unit partitioning
  time: 0.002; rss: 131MB	internalize symbols
time: 0.189; rss: 118MB	translation
time: 0.000; rss: 118MB	assert dep graph
time: 0.000; rss: 118MB	serialize dep graph
  time: 0.028; rss: 90MB	llvm function passes [0]
  time: 0.005; rss: 91MB	llvm module passes [0]
  time: 0.636; rss: 98MB	codegen passes [0]
  time: 0.000; rss: 98MB	codegen passes [0]
time: 0.702; rss: 98MB	LLVM passes
time: 0.000; rss: 98MB	serialize work products
time: 0.047; rss: 85MB	linking
done
