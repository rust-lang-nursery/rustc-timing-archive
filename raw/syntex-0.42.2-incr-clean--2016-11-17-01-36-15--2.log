commit 6cd5be81cc3a6f972eb00541224037a95a08cc7b
Merge: f22fdb0 0e1828a
Author: bors <bors@rust-lang.org>
Date:   Wed Nov 16 21:02:55 2016 -0800

    Auto merge of #37607 - dns2utf8:doc_grammar, r=alexcrichton
    
    Fix grammar verification
    
     * Use make check-lexer to verify the grammar.
     * Extend grammar/README
     * Add make clean-grammar rule
     * Add target check-build-lexer-verifier to make tidy, so it will build the verifier with every build and catch future errors
    
    This is the continuation of #34994
    
    r? @steveklabnik @jonathandturner @alexcrichton
rustc: ./syntex-0.42.2-incr-clean
RUSTFLAGS="-Z incremental=incr" \
    cargo rustc -p syntex_syntax  -- \
    -Ztime-passes -Zinput-stats -Z incremental-info
   Compiling syntex_syntax v0.42.0
time: 0.093; rss: 70MB	parsing
Lines of code:             33687
Pre-expansion node count:  223115
time: 0.000; rss: 70MB	recursion limit
time: 0.000; rss: 70MB	crate injection
time: 0.000; rss: 70MB	plugin loading
time: 0.000; rss: 70MB	plugin registration
time: 0.231; rss: 144MB	expansion
time: 0.000; rss: 144MB	maybe building test harness
time: 0.006; rss: 144MB	maybe creating a macro crate
Post-expansion node count: 638863
time: 0.000; rss: 144MB	checking for inline asm in case the target doesn't support it
time: 0.013; rss: 144MB	complete gated feature checking
time: 0.023; rss: 144MB	early lint checks
time: 0.007; rss: 144MB	AST validation
time: 0.076; rss: 159MB	name resolution
time: 0.045; rss: 184MB	lowering ast -> hir
time: 0.008; rss: 194MB	indexing hir
time: 0.006; rss: 194MB	attribute checking
time: 0.005; rss: 151MB	language item collection
time: 0.010; rss: 151MB	lifetime resolution
time: 0.000; rss: 151MB	looking for entry point
time: 0.000; rss: 151MB	looking for plugin registrar
time: 0.040; rss: 172MB	region resolution
time: 0.005; rss: 172MB	loop checking
time: 0.005; rss: 172MB	static item recursion checking
time: 0.325; rss: 172MB	compute_incremental_hashes_map
time: 0.000; rss: 172MB	load_dep_graph
time: 0.049; rss: 171MB	type collecting
time: 0.001; rss: 171MB	variance inference
time: 0.018; rss: 174MB	coherence checking
time: 0.094; rss: 178MB	wf checking
time: 0.182; rss: 184MB	item-types checking
time: 3.324; rss: 233MB	item-bodies checking
time: 0.000; rss: 233MB	drop-impl checking
time: 0.218; rss: 253MB	const checking
time: 0.046; rss: 253MB	privacy checking
time: 0.006; rss: 253MB	stability index
time: 0.018; rss: 253MB	intrinsic checking
time: 0.014; rss: 253MB	effect checking
time: 0.046; rss: 253MB	match checking
time: 0.050; rss: 242MB	liveness checking
time: 0.182; rss: 242MB	rvalue checking
time: 0.577; rss: 423MB	MIR dump
  time: 0.059; rss: 429MB	SimplifyCfg
  time: 0.075; rss: 429MB	QualifyAndPromoteConstants
  time: 0.099; rss: 429MB	TypeckMir
  time: 0.004; rss: 429MB	SimplifyBranches
  time: 0.031; rss: 429MB	SimplifyCfg
time: 0.269; rss: 429MB	MIR cleanup and validation
time: 0.481; rss: 432MB	borrow checking
time: 0.025; rss: 432MB	reachability checking
time: 0.040; rss: 433MB	death checking
time: 0.035; rss: 435MB	stability checking
time: 0.000; rss: 435MB	unused lib feature checking
time: 0.201; rss: 435MB	lint checking
time: 0.000; rss: 435MB	resolving dependency formats
  time: 0.003; rss: 435MB	NoLandingPads
  time: 0.026; rss: 435MB	SimplifyCfg
  time: 0.078; rss: 441MB	EraseRegions
  time: 0.012; rss: 441MB	AddCallGuards
  time: 0.301; rss: 459MB	ElaborateDrops
  time: 0.003; rss: 459MB	NoLandingPads
  time: 0.053; rss: 460MB	SimplifyCfg
  time: 0.030; rss: 460MB	InstCombine
  time: 0.013; rss: 460MB	Deaggregator
  time: 0.002; rss: 460MB	CopyPropagation
  time: 0.036; rss: 460MB	SimplifyLocals
  time: 0.010; rss: 460MB	AddCallGuards
  time: 0.003; rss: 460MB	PreTrans
time: 0.569; rss: 460MB	MIR optimisations
  time: 0.075; rss: 467MB	write metadata
  time: 0.426; rss: 479MB	translation item collection
  time: 0.074; rss: 488MB	codegen unit partitioning
  time: 0.047; rss: 730MB	internalize symbols
time: 4.957; rss: 730MB	translation
time: 0.000; rss: 730MB	assert dep graph
time: 0.000; rss: 730MB	serialize dep graph
incremental: re-using 0 out of 1 modules
  time: 0.535; rss: 419MB	llvm function passes [0]
  time: 0.266; rss: 424MB	llvm module passes [0]
  time: 10.500; rss: 423MB	codegen passes [0]
  time: 0.000; rss: 423MB	codegen passes [0]
time: 12.149; rss: 423MB	LLVM passes
time: 0.000; rss: 423MB	serialize work products
time: 0.347; rss: 104MB	linking
done
