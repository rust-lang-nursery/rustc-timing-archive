commit d00c2454157713e77729989c715b96ee31c6b278
Merge: eaf71f8 a65b201
Author: bors <bors@rust-lang.org>
Date:   Fri Aug 26 03:29:45 2016 -0700

    Auto merge of #35975 - jonathandturner:error_buffering, r=alexcrichton
    
    Buffer unix and lock windows to prevent message interleaving
    
    When cargo does a build on multiple processes, multiple crates may error at the same time.  If this happens, currently you'll see interleaving of the error messages, which makes for an unreadable message.
    
    Example:
    
    ```
        --> --> src/bin/multithread-unix.rs:16:35src/bin/singlethread.rs:16:24
    
          ||
    
    1616  | |     Server::new(&addr).workers(8).    Server::new(&addr).serveserve(|r: Request| {(|r: Request| {
    
          | |                                                          ^^^^^^^^^^ expected struct `std::io::Error`, found () expected struct `std::io::Error`, found ()
    
          ||
    
          = = notenote: expected type `std::io::Error`: expected type `std::io::Error`
    
          = = notenote:    found type `()`:    found type `()`
    
          = = notenote: required because of the requirements on the impl of `futures_minihttp::Service<futures_minihttp::Request, futures_minihttp::Response>` for `[closure@src/bin/multithread-unix.rs:16:41: 22:6]`: required because of the requirements on the impl of `futures_minihttp::Service<futures_minihttp::Request, futures_minihttp::Response>` for `[closure@src/bin/singlethread.rs:16:30: 22:6]`
    
    error: aborting due to previous error
    
    error: aborting due to previous error
    ```
    
    This patch uses two techniques to prevent this interleaving.  On Unix systems, since they use the text-based ANSI protocol for coloring, we can safely buffer up whole messages before we emit.  This PR does this buffering, and emits the whole message at once.
    
    On Windows, term must use the Windows terminal API to color the output.  This disallows us from using the same buffering technique.  Instead, here we grab a Windows mutex (thanks to @alexcrichton for the lock code).  This lock only works in Windows and will hold a mutex for the duration of a message output.
    
    r? @nikomatsakis
rustc: ./hyper.0.5.0
cargo rustc -- -Ztime-passes -Zinput-stats
    Updating registry `https://github.com/rust-lang/crates.io-index`
   Compiling pkg-config v0.3.8
   Compiling lazy_static v0.1.16
   Compiling winapi v0.2.8
   Compiling httparse v0.1.6
   Compiling matches v0.1.2
   Compiling libc v0.1.12
   Compiling winapi-build v0.1.1
   Compiling libc v0.2.15
   Compiling rustc-serialize v0.3.19
   Compiling typeable v0.1.2
   Compiling gcc v0.3.35
   Compiling kernel32-sys v0.2.2
   Compiling traitobject v0.0.1
   Compiling bitflags v0.3.3
   Compiling log v0.3.6
   Compiling unicase v0.1.0
   Compiling mime v0.0.11
   Compiling time v0.1.35
   Compiling num_cpus v0.2.13
   Compiling rand v0.3.14
   Compiling openssl-sys v0.6.7
   Compiling openssl v0.6.7
   Compiling uuid v0.1.18
   Compiling url v0.2.38
   Compiling cookie v0.1.21
   Compiling hyper v0.5.0 (file:///root/benchmarks/hyper.0.5.0)
time: 0.027; rss: 50MB	parsing
Lines of code:             9154
Pre-expansion node count:  44838
time: 0.003; rss: 50MB	configuration
time: 0.000; rss: 50MB	recursion limit
time: 0.000; rss: 50MB	crate injection
time: 0.000; rss: 50MB	plugin loading
time: 0.000; rss: 50MB	plugin registration
time: 0.093; rss: 76MB	expansion
time: 0.000; rss: 76MB	maybe building test harness
time: 0.005; rss: 76MB	assigning node ids
Post-expansion node count: 101581
time: 0.000; rss: 76MB	checking for inline asm in case the target doesn't support it
time: 0.002; rss: 76MB	complete gated feature checking
time: 0.003; rss: 76MB	collecting defs
time: 0.011; rss: 85MB	external crate/lib resolution
time: 0.004; rss: 85MB	early lint checks
time: 0.001; rss: 85MB	AST validation
time: 0.019; rss: 90MB	name resolution
time: 0.008; rss: 97MB	lowering ast -> hir
time: 0.002; rss: 99MB	indexing hir
time: 0.001; rss: 99MB	attribute checking
time: 0.001; rss: 92MB	language item collection
time: 0.002; rss: 92MB	lifetime resolution
time: 0.000; rss: 92MB	looking for entry point
time: 0.000; rss: 92MB	looking for plugin registrar
time: 0.006; rss: 96MB	region resolution
time: 0.001; rss: 96MB	loop checking
time: 0.001; rss: 96MB	static item recursion checking
time: 0.012; rss: 96MB	compute_incremental_hashes_map
time: 0.000; rss: 96MB	load_dep_graph
time: 0.024; rss: 98MB	type collecting
time: 0.000; rss: 98MB	variance inference
time: 0.036; rss: 102MB	coherence checking
time: 0.066; rss: 105MB	wf checking
time: 0.029; rss: 105MB	item-types checking
time: 0.402; rss: 116MB	item-bodies checking
time: 0.000; rss: 116MB	drop-impl checking
time: 0.039; rss: 117MB	const checking
time: 0.006; rss: 117MB	privacy checking
time: 0.001; rss: 117MB	stability index
time: 0.005; rss: 117MB	intrinsic checking
time: 0.002; rss: 117MB	effect checking
time: 0.013; rss: 117MB	match checking
time: 0.005; rss: 117MB	liveness checking
time: 0.028; rss: 117MB	rvalue checking
time: 0.057; rss: 136MB	MIR dump
time: 0.044; rss: 136MB	MIR passes
time: 0.063; rss: 137MB	borrow checking
time: 0.003; rss: 137MB	reachability checking
time: 0.005; rss: 137MB	death checking
time: 0.005; rss: 137MB	stability checking
time: 0.000; rss: 137MB	unused lib feature checking
time: 0.043; rss: 137MB	lint checking
time: 0.000; rss: 137MB	resolving dependency formats
time: 0.084; rss: 139MB	Prepare MIR codegen passes
  time: 0.057; rss: 145MB	write metadata
  time: 0.146; rss: 147MB	translation item collection
  time: 0.020; rss: 152MB	codegen unit partitioning
  time: 0.034; rss: 216MB	internalize symbols
time: 1.474; rss: 207MB	translation
time: 0.000; rss: 207MB	assert dep graph
time: 0.000; rss: 207MB	serialize dep graph
  time: 0.100; rss: 156MB	llvm function passes [0]
  time: 0.047; rss: 159MB	llvm module passes [0]
  time: 1.846; rss: 163MB	codegen passes [0]
  time: 0.001; rss: 162MB	codegen passes [0]
time: 2.163; rss: 162MB	LLVM passes
time: 0.000; rss: 162MB	serialize work products
time: 0.155; rss: 96MB	linking
done
