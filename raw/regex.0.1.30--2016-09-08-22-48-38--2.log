commit 1df64450ecf9d2c458b5789ef823203fcdbd60a9
Merge: 3781956 ce3cecf
Author: bors <bors@rust-lang.org>
Date:   Thu Sep 8 19:15:50 2016 -0700

    Auto merge of #36321 - uweigand:enum-abi, r=eddyb
    
    Follow target ABI sign-/zero-extension rules for enum types
    
    While attempting to port Rust to s390x, I ran into an ABI violation
    (that caused rust_eh_personality to be miscompiled, breaking unwinding).
    The problem is that this function returns an enum type, which is
    supposed to be sign-extended according to the s390x ABI.  However,
    common code would ignore target sign-/zero-extension rules for any
    types that do not satisfy is_integral(), which includes enums.
    
    For the general case of Rust enum types, which map to structure types
    with a discriminant, that seems correct.  However, in the special case
    of simple enums that map directly to C enum types (i.e. LLVM integers),
    this is incorrect; we must follow the target extension rules for those.
    
    Signed-off-by: Ulrich Weigand <ulrich.weigand@de.ibm.com>
rustc: ./regex.0.1.30
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling regex v0.1.30 (file:///root/benchmarks/regex.0.1.30)
time: 0.055; rss: 57MB	parsing
Lines of code:             8558
Pre-expansion node count:  58080
time: 0.000; rss: 57MB	recursion limit
time: 0.000; rss: 57MB	crate injection
time: 0.000; rss: 57MB	plugin loading
time: 0.000; rss: 57MB	plugin registration
time: 0.032; rss: 79MB	expansion
time: 0.000; rss: 79MB	maybe building test harness
time: 0.001; rss: 79MB	maybe creating a macro crate
time: 0.003; rss: 79MB	assigning node ids
Post-expansion node count: 68154
time: 0.000; rss: 79MB	checking for inline asm in case the target doesn't support it
time: 0.001; rss: 79MB	complete gated feature checking
time: 0.001; rss: 80MB	collecting defs
time: 0.001; rss: 80MB	external crate/lib resolution
time: 0.003; rss: 80MB	early lint checks
time: 0.000; rss: 80MB	AST validation
time: 0.006; rss: 81MB	name resolution
time: 0.008; rss: 92MB	lowering ast -> hir
time: 0.002; rss: 94MB	indexing hir
time: 0.001; rss: 94MB	attribute checking
time: 0.001; rss: 86MB	language item collection
time: 0.001; rss: 86MB	lifetime resolution
time: 0.000; rss: 86MB	looking for entry point
time: 0.000; rss: 86MB	looking for plugin registrar
time: 0.006; rss: 89MB	region resolution
time: 0.001; rss: 89MB	loop checking
time: 0.001; rss: 89MB	static item recursion checking
time: 0.021; rss: 90MB	compute_incremental_hashes_map
time: 0.000; rss: 90MB	load_dep_graph
time: 0.008; rss: 91MB	type collecting
time: 0.000; rss: 91MB	variance inference
time: 0.020; rss: 93MB	coherence checking
time: 0.009; rss: 93MB	wf checking
time: 0.255; rss: 103MB	item-types checking
time: 0.145; rss: 107MB	item-bodies checking
time: 0.000; rss: 107MB	drop-impl checking
time: 0.028; rss: 109MB	const checking
time: 0.003; rss: 109MB	privacy checking
time: 0.001; rss: 109MB	stability index
time: 0.002; rss: 109MB	intrinsic checking
time: 0.001; rss: 109MB	effect checking
time: 0.004; rss: 109MB	match checking
time: 0.002; rss: 109MB	liveness checking
time: 0.008; rss: 109MB	rvalue checking
time: 0.043; rss: 125MB	MIR dump
  time: 0.003; rss: 125MB	SimplifyCfg
  time: 0.005; rss: 125MB	QualifyAndPromoteConstants
  time: 0.010; rss: 125MB	TypeckMir
  time: 0.000; rss: 125MB	SimplifyBranches
  time: 0.002; rss: 125MB	SimplifyCfg
time: 0.020; rss: 125MB	MIR passes
time: 0.021; rss: 125MB	borrow checking
time: 0.000; rss: 125MB	reachability checking
time: 0.002; rss: 125MB	death checking
time: 0.002; rss: 125MB	stability checking
time: 0.000; rss: 125MB	unused lib feature checking
time: 0.025; rss: 125MB	lint checking
time: 0.000; rss: 125MB	resolving dependency formats
  time: 0.000; rss: 125MB	NoLandingPads
  time: 0.001; rss: 125MB	SimplifyCfg
  time: 0.004; rss: 125MB	EraseRegions
  time: 0.000; rss: 125MB	AddCallGuards
  time: 0.009; rss: 125MB	ElaborateDrops
  time: 0.000; rss: 125MB	NoLandingPads
  time: 0.002; rss: 125MB	SimplifyCfg
  time: 0.000; rss: 125MB	Deaggregator
  time: 0.000; rss: 125MB	AddCallGuards
  time: 0.000; rss: 125MB	PreTrans
time: 0.018; rss: 125MB	Prepare MIR codegen passes
  time: 0.162; rss: 135MB	write metadata
  time: 0.042; rss: 137MB	translation item collection
  time: 0.007; rss: 137MB	codegen unit partitioning
  time: 0.013; rss: 163MB	internalize symbols
time: 0.648; rss: 156MB	translation
time: 0.000; rss: 156MB	assert dep graph
time: 0.000; rss: 156MB	serialize dep graph
  time: 0.035; rss: 112MB	llvm function passes [0]
  time: 0.019; rss: 114MB	llvm module passes [0]
  time: 0.675; rss: 119MB	codegen passes [0]
  time: 0.001; rss: 119MB	codegen passes [0]
time: 0.788; rss: 119MB	LLVM passes
time: 0.000; rss: 119MB	serialize work products
time: 0.065; rss: 90MB	linking
done
