commit 888970370a3f4b9e8be399869581422c67638d7b
Merge: 85592fb 826f673
Author: bors <bors@rust-lang.org>
Date:   Mon Sep 12 07:43:57 2016 -0700

    Auto merge of #36414 - nnethercote:char_lit, r=jseyfried
    
    Improve char_lit's readability and speed
    
    This is my first contribution to rustc. Please let me know if I've done anything wrong. (I ran `make tidy` before making the pull request.)
rustc: ./regex.0.1.30
cargo rustc -- -Ztime-passes -Zinput-stats
    Updating registry `https://github.com/rust-lang/crates.io-index`
   Compiling regex v0.1.30 (file:///root/benchmarks/regex.0.1.30)
time: 0.052; rss: 56MB	parsing
Lines of code:             8558
Pre-expansion node count:  58080
time: 0.000; rss: 56MB	recursion limit
time: 0.000; rss: 56MB	crate injection
time: 0.000; rss: 56MB	plugin loading
time: 0.000; rss: 56MB	plugin registration
time: 0.032; rss: 79MB	expansion
time: 0.000; rss: 79MB	maybe building test harness
time: 0.001; rss: 79MB	maybe creating a macro crate
time: 0.003; rss: 79MB	assigning node ids
Post-expansion node count: 68154
time: 0.000; rss: 79MB	checking for inline asm in case the target doesn't support it
time: 0.001; rss: 79MB	complete gated feature checking
time: 0.001; rss: 79MB	collecting defs
time: 0.001; rss: 79MB	external crate/lib resolution
time: 0.004; rss: 79MB	early lint checks
time: 0.001; rss: 79MB	AST validation
time: 0.006; rss: 81MB	name resolution
time: 0.008; rss: 92MB	lowering ast -> hir
time: 0.002; rss: 94MB	indexing hir
time: 0.001; rss: 94MB	attribute checking
time: 0.001; rss: 84MB	language item collection
time: 0.001; rss: 84MB	lifetime resolution
time: 0.000; rss: 84MB	looking for entry point
time: 0.000; rss: 84MB	looking for plugin registrar
time: 0.006; rss: 89MB	region resolution
time: 0.001; rss: 89MB	loop checking
time: 0.001; rss: 89MB	static item recursion checking
time: 0.022; rss: 89MB	compute_incremental_hashes_map
time: 0.000; rss: 89MB	load_dep_graph
time: 0.008; rss: 89MB	type collecting
time: 0.000; rss: 89MB	variance inference
time: 0.019; rss: 92MB	coherence checking
time: 0.009; rss: 92MB	wf checking
time: 0.252; rss: 104MB	item-types checking
time: 0.145; rss: 107MB	item-bodies checking
time: 0.000; rss: 107MB	drop-impl checking
time: 0.027; rss: 109MB	const checking
time: 0.003; rss: 109MB	privacy checking
time: 0.001; rss: 109MB	stability index
time: 0.002; rss: 109MB	intrinsic checking
time: 0.001; rss: 109MB	effect checking
time: 0.004; rss: 109MB	match checking
time: 0.002; rss: 109MB	liveness checking
time: 0.008; rss: 109MB	rvalue checking
time: 0.042; rss: 123MB	MIR dump
  time: 0.003; rss: 123MB	SimplifyCfg
  time: 0.005; rss: 123MB	QualifyAndPromoteConstants
  time: 0.010; rss: 123MB	TypeckMir
  time: 0.000; rss: 123MB	SimplifyBranches
  time: 0.002; rss: 123MB	SimplifyCfg
time: 0.020; rss: 123MB	MIR passes
time: 0.021; rss: 123MB	borrow checking
time: 0.000; rss: 123MB	reachability checking
time: 0.002; rss: 123MB	death checking
time: 0.002; rss: 123MB	stability checking
time: 0.000; rss: 123MB	unused lib feature checking
time: 0.025; rss: 123MB	lint checking
time: 0.000; rss: 123MB	resolving dependency formats
  time: 0.000; rss: 123MB	NoLandingPads
  time: 0.001; rss: 123MB	SimplifyCfg
  time: 0.004; rss: 123MB	EraseRegions
  time: 0.000; rss: 123MB	AddCallGuards
  time: 0.009; rss: 125MB	ElaborateDrops
  time: 0.000; rss: 125MB	NoLandingPads
  time: 0.002; rss: 125MB	SimplifyCfg
  time: 0.000; rss: 125MB	Deaggregator
  time: 0.000; rss: 125MB	AddCallGuards
  time: 0.000; rss: 125MB	PreTrans
time: 0.018; rss: 125MB	Prepare MIR codegen passes
  time: 0.161; rss: 135MB	write metadata
  time: 0.042; rss: 137MB	translation item collection
  time: 0.007; rss: 137MB	codegen unit partitioning
  time: 0.013; rss: 160MB	internalize symbols
time: 0.651; rss: 153MB	translation
time: 0.000; rss: 153MB	assert dep graph
time: 0.000; rss: 153MB	serialize dep graph
  time: 0.036; rss: 111MB	llvm function passes [0]
  time: 0.020; rss: 112MB	llvm module passes [0]
  time: 0.678; rss: 117MB	codegen passes [0]
  time: 0.001; rss: 117MB	codegen passes [0]
time: 0.792; rss: 117MB	LLVM passes
time: 0.000; rss: 117MB	serialize work products
time: 0.066; rss: 90MB	linking
done
