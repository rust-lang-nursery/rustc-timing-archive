commit 8f552181895921a377ab8c235340ea3d80ec7fc0
Merge: 897199a 9249e6a
Author: bors <bors@rust-lang.org>
Date:   Tue Apr 26 14:54:37 2016 -0700

    Auto merge of #31414 - durka:clone-copy, r=alexcrichton
    
    special-case #[derive(Copy, Clone)] with a shallow clone
    
    If a type is Copy then its Clone implementation can be a no-op. Currently `#[derive(Clone)]` generates a deep clone anyway. This can lead to lots of code bloat.
    
    This PR detects the case where Copy and Clone are both being derived (the general case of "is this type Copy" can't be determined by a syntax extension) and generates the shallow Clone impl. Right now this can only be done if there are no type parameters (see https://github.com/rust-lang/rust/issues/31085#issuecomment-178988663), but this restriction can be removed after specialization.
    
    Fixes #31085.
rustc: ./issue-32278-big-array-of-strings
/root/rust/x86_64-unknown-linux-gnu/stage2/bin/rustc big-array-of-strings.rs -Ztime-passes -Zinput-stats
time: 0.149; rss: 68MB	parsing
Lines of code:             65577
Pre-expansion node count:  65552
time: 0.011; rss: 68MB	configuration 1
time: 0.000; rss: 68MB	recursion limit
time: 0.001; rss: 68MB	gated macro checking
time: 0.000; rss: 68MB	crate injection
time: 0.004; rss: 73MB	macro loading
time: 0.000; rss: 73MB	plugin loading
time: 0.000; rss: 73MB	plugin registration
time: 0.042; rss: 77MB	expansion
time: 0.001; rss: 77MB	complete gated feature checking 1
time: 0.011; rss: 77MB	configuration 2
time: 0.000; rss: 77MB	gated configuration checking
time: 0.005; rss: 77MB	maybe building test harness
time: 0.005; rss: 77MB	prelude injection
time: 0.000; rss: 77MB	checking that all macro invocations are gone
time: 0.000; rss: 77MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 77MB	complete gated feature checking 2
time: 0.001; rss: 77MB	const fn bodies and arguments
Post-expansion node count: 65565
time: 0.007; rss: 77MB	assigning node ids
time: 0.001; rss: 77MB	collecting defs
time: 0.002; rss: 78MB	external crate/lib resolution
time: 0.009; rss: 90MB	lowering ast -> hir
time: 0.002; rss: 93MB	indexing hir
time: 0.001; rss: 93MB	attribute checking
time: 0.008; rss: 93MB	early lint checks
time: 0.001; rss: 79MB	language item collection
time: 0.002; rss: 83MB	name resolution
time: 0.001; rss: 83MB	lifetime resolution
time: 0.000; rss: 83MB	looking for entry point
time: 0.000; rss: 83MB	looking for plugin registrar
time: 0.008; rss: 91MB	region resolution
time: 0.001; rss: 91MB	loop checking
time: 0.001; rss: 91MB	static item recursion checking
time: 0.000; rss: 91MB	load_dep_graph
time: 0.000; rss: 91MB	type collecting
time: 0.000; rss: 91MB	variance inference
time: 0.006; rss: 100MB	coherence checking
time: 0.001; rss: 100MB	wf checking
time: 1.050; rss: 195MB	item-types checking
time: 0.000; rss: 195MB	item-bodies checking
time: 0.000; rss: 195MB	drop-impl checking
time: 0.021; rss: 197MB	const checking
time: 0.003; rss: 197MB	privacy checking
time: 0.001; rss: 197MB	stability index
time: 0.001; rss: 197MB	intrinsic checking
time: 0.001; rss: 197MB	effect checking
time: 0.001; rss: 197MB	match checking
time: 0.001; rss: 197MB	liveness checking
time: 0.001; rss: 197MB	rvalue checking
time: 0.001; rss: 197MB	MIR dump
time: 0.000; rss: 197MB	MIR passes
time: 0.001; rss: 197MB	borrow checking
time: 0.000; rss: 197MB	reachability checking
time: 0.001; rss: 197MB	death checking
time: 0.001; rss: 197MB	stability checking
time: 0.000; rss: 197MB	unused lib feature checking
time: 0.032; rss: 197MB	lint checking
time: 0.001; rss: 197MB	resolving dependency formats
time: 0.000; rss: 197MB	Prepare MIR codegen passes
  time: 0.001; rss: 198MB	translation item collection
  time: 0.000; rss: 198MB	codegen unit partitioning
  time: 0.000; rss: 203MB	write metadata
time: 0.084; rss: 203MB	translation
time: 0.000; rss: 203MB	assert dep graph
time: 0.000; rss: 203MB	serialize dep graph
  time: 0.003; rss: 89MB	llvm function passes [0]
  time: 0.000; rss: 89MB	llvm module passes [0]
  time: 0.167; rss: 90MB	codegen passes [0]
  time: 0.000; rss: 79MB	codegen passes [0]
time: 0.182; rss: 79MB	LLVM passes
  time: 0.183; rss: 79MB	running linker
time: 0.184; rss: 79MB	linking
done
