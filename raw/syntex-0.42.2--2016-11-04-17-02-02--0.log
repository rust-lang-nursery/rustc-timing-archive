commit 81601cd3a393d1cb8ca82eb1b2270d24c5d7724f
Merge: ccfc38f f0e6b90
Author: bors <bors@rust-lang.org>
Date:   Fri Nov 4 10:40:30 2016 -0700

    Auto merge of #37306 - bluss:trusted-len, r=alexcrichton
    
    Add Iterator trait TrustedLen to enable better FromIterator / Extend
    
    This trait attempts to improve FromIterator / Extend code by enabling it to trust the iterator to produce an exact number of elements, which means that reallocation needs to happen only once and is moved out of the loop.
    
    `TrustedLen` differs from `ExactSizeIterator` in that it attempts to include _more_ iterators by allowing for the case that the iterator's len does not fit in `usize`. Consumers must check for this case (for example they could panic, since they can't allocate a collection of that size).
    
    For example, chain can be TrustedLen and all numerical ranges can be TrustedLen. All they need to do is to report an exact size if it fits in `usize`, and `None` as the upper bound otherwise.
    
    The trait describes its contract like this:
    
    ```
    An iterator that reports an accurate length using size_hint.
    
    The iterator reports a size hint where it is either exact
    (lower bound is equal to upper bound), or the upper bound is `None`.
    The upper bound must only be `None` if the actual iterator length is
    larger than `usize::MAX`.
    
    The iterator must produce exactly the number of elements it reported.
    
    This trait must only be implemented when the contract is upheld.
    Consumers of this trait must inspect `.size_hint()`â€™s upper bound.
    ```
    
    Fixes #37232
rustc: ./syntex-0.42.2
cargo rustc -p syntex_syntax -- -Ztime-passes -Zinput-stats
   Compiling libc v0.2.15
   Compiling log v0.3.6
   Compiling winapi-build v0.1.1
   Compiling rustc-serialize v0.3.19
   Compiling winapi v0.2.8
   Compiling bitflags v0.5.0
   Compiling unicode-xid v0.0.3
   Compiling kernel32-sys v0.2.2
   Compiling term v0.4.4
   Compiling syntex_pos v0.42.0
   Compiling syntex_errors v0.42.0
   Compiling syntex_syntax v0.42.0
time: 0.110; rss: 76MB	parsing
Lines of code:             33687
Pre-expansion node count:  224033
time: 0.000; rss: 76MB	recursion limit
time: 0.000; rss: 76MB	crate injection
time: 0.000; rss: 76MB	plugin loading
time: 0.000; rss: 76MB	plugin registration
time: 0.263; rss: 148MB	expansion
time: 0.000; rss: 148MB	maybe building test harness
time: 0.006; rss: 148MB	maybe creating a macro crate
Post-expansion node count: 641571
time: 0.000; rss: 148MB	checking for inline asm in case the target doesn't support it
time: 0.013; rss: 148MB	complete gated feature checking
time: 0.024; rss: 148MB	early lint checks
time: 0.007; rss: 148MB	AST validation
time: 0.086; rss: 163MB	name resolution
time: 0.046; rss: 190MB	lowering ast -> hir
time: 0.008; rss: 200MB	indexing hir
time: 0.007; rss: 200MB	attribute checking
time: 0.005; rss: 154MB	language item collection
time: 0.010; rss: 154MB	lifetime resolution
time: 0.000; rss: 154MB	looking for entry point
time: 0.000; rss: 154MB	looking for plugin registrar
time: 0.044; rss: 165MB	region resolution
time: 0.005; rss: 165MB	loop checking
time: 0.005; rss: 165MB	static item recursion checking
time: 0.528; rss: 167MB	compute_incremental_hashes_map
time: 0.000; rss: 167MB	load_dep_graph
time: 0.042; rss: 172MB	type collecting
time: 0.001; rss: 172MB	variance inference
time: 0.034; rss: 175MB	coherence checking
time: 0.098; rss: 178MB	wf checking
time: 0.194; rss: 184MB	item-types checking
time: 3.650; rss: 234MB	item-bodies checking
time: 0.000; rss: 234MB	drop-impl checking
time: 0.244; rss: 237MB	const checking
time: 0.048; rss: 237MB	privacy checking
time: 0.006; rss: 237MB	stability index
time: 0.020; rss: 237MB	intrinsic checking
time: 0.016; rss: 237MB	effect checking
time: 0.050; rss: 237MB	match checking
time: 0.052; rss: 231MB	liveness checking
time: 0.208; rss: 231MB	rvalue checking
time: 0.403; rss: 420MB	MIR dump
  time: 0.056; rss: 421MB	SimplifyCfg
  time: 0.077; rss: 421MB	QualifyAndPromoteConstants
  time: 0.111; rss: 421MB	TypeckMir
  time: 0.004; rss: 421MB	SimplifyBranches
  time: 0.030; rss: 421MB	SimplifyCfg
time: 0.279; rss: 421MB	MIR cleanup and validation
time: 0.543; rss: 421MB	borrow checking
time: 0.021; rss: 421MB	reachability checking
time: 0.041; rss: 421MB	death checking
time: 0.039; rss: 423MB	stability checking
time: 0.000; rss: 423MB	unused lib feature checking
time: 0.217; rss: 423MB	lint checking
time: 0.000; rss: 423MB	resolving dependency formats
  time: 0.003; rss: 423MB	NoLandingPads
  time: 0.026; rss: 423MB	SimplifyCfg
  time: 0.067; rss: 430MB	EraseRegions
  time: 0.011; rss: 430MB	AddCallGuards
  time: 0.283; rss: 449MB	ElaborateDrops
  time: 0.003; rss: 449MB	NoLandingPads
  time: 0.052; rss: 449MB	SimplifyCfg
  time: 0.030; rss: 449MB	InstCombine
  time: 0.013; rss: 449MB	Deaggregator
  time: 0.002; rss: 449MB	CopyPropagation
  time: 0.035; rss: 449MB	SimplifyLocals
  time: 0.010; rss: 449MB	AddCallGuards
  time: 0.003; rss: 449MB	PreTrans
time: 0.539; rss: 449MB	MIR optimisations
  time: 0.061; rss: 458MB	write metadata
  time: 0.441; rss: 470MB	translation item collection
  time: 0.063; rss: 478MB	codegen unit partitioning
  time: 0.053; rss: 726MB	internalize symbols
time: 4.810; rss: 726MB	translation
time: 0.000; rss: 726MB	assert dep graph
time: 0.000; rss: 726MB	serialize dep graph
  time: 0.535; rss: 419MB	llvm function passes [0]
  time: 0.261; rss: 428MB	llvm module passes [0]
  time: 10.508; rss: 420MB	codegen passes [0]
  time: 0.000; rss: 420MB	codegen passes [0]
time: 12.075; rss: 420MB	LLVM passes
time: 0.000; rss: 420MB	serialize work products
time: 0.341; rss: 104MB	linking
done
