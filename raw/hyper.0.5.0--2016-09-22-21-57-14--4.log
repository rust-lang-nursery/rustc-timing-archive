commit 3a5d975fdcef451375df20e5ac234bb01e453e33
Merge: 4c04e36 3863834
Author: bors <bors@rust-lang.org>
Date:   Thu Sep 22 16:33:41 2016 -0700

    Auto merge of #36154 - nrc:proc-macro-init, r=@jseyfried
    
    Adds a `ProcMacro` form of syntax extension
    
    This commit adds syntax extension forms matching the types for procedural macros 2.0 (RFC #1566), these still require the usual syntax extension boiler plate, but this is a first step towards proper implementation and should be useful for macros 1.1 stuff too.
    
    Supports both attribute-like and function-like macros.
    
    Note that RFC #1566 has not been accepted yet, but I think there is consensus that we want to head in vaguely that direction and so this PR will be useful in any case. It is also fairly easy to undo and does not break any existing programs.
    
    This is related to #35957 in that I hope it can be used in the implementation of macros 1.1, however, there is no direct overlap and is more of a complement than a competing proposal. There is still a fair bit of work to do before the two can be combined.
    
    r? @jseyfried
    
    cc @alexcrichton, @cgswords, @eddyb, @aturon
rustc: ./hyper.0.5.0
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling traitobject v0.0.1
   Compiling unicase v0.1.0
   Compiling libc v0.1.12
   Compiling bitflags v0.3.3
   Compiling lazy_static v0.1.16
   Compiling pkg-config v0.3.8
   Compiling rustc-serialize v0.3.19
   Compiling gcc v0.3.35
   Compiling winapi v0.2.8
   Compiling typeable v0.1.2
   Compiling libc v0.2.16
   Compiling winapi-build v0.1.1
   Compiling httparse v0.1.6
   Compiling log v0.3.6
   Compiling kernel32-sys v0.2.2
   Compiling matches v0.1.2
   Compiling mime v0.0.11
   Compiling time v0.1.35
   Compiling rand v0.3.14
   Compiling num_cpus v0.2.13
   Compiling openssl-sys v0.6.7
   Compiling openssl v0.6.7
   Compiling uuid v0.1.18
   Compiling url v0.2.38
   Compiling cookie v0.1.21
   Compiling hyper v0.5.0 (file:///root/benchmarks/hyper.0.5.0)
time: 0.028; rss: 51MB	parsing
Lines of code:             9154
Pre-expansion node count:  44873
time: 0.000; rss: 51MB	recursion limit
time: 0.000; rss: 51MB	crate injection
time: 0.000; rss: 51MB	plugin loading
time: 0.000; rss: 51MB	plugin registration
time: 0.095; rss: 79MB	expansion
time: 0.000; rss: 79MB	maybe building test harness
time: 0.001; rss: 79MB	maybe creating a macro crate
time: 0.005; rss: 79MB	assigning node ids
Post-expansion node count: 101537
time: 0.000; rss: 79MB	checking for inline asm in case the target doesn't support it
time: 0.002; rss: 79MB	complete gated feature checking
time: 0.003; rss: 81MB	collecting defs
time: 0.009; rss: 87MB	external crate/lib resolution
time: 0.003; rss: 87MB	early lint checks
time: 0.001; rss: 87MB	AST validation
time: 0.015; rss: 95MB	name resolution
time: 0.008; rss: 99MB	lowering ast -> hir
time: 0.002; rss: 101MB	indexing hir
time: 0.001; rss: 101MB	attribute checking
time: 0.001; rss: 95MB	language item collection
time: 0.002; rss: 95MB	lifetime resolution
time: 0.000; rss: 95MB	looking for entry point
time: 0.000; rss: 95MB	looking for plugin registrar
time: 0.006; rss: 100MB	region resolution
time: 0.001; rss: 100MB	loop checking
time: 0.001; rss: 100MB	static item recursion checking
time: 0.040; rss: 101MB	compute_incremental_hashes_map
time: 0.000; rss: 101MB	load_dep_graph
time: 0.023; rss: 102MB	type collecting
time: 0.000; rss: 102MB	variance inference
time: 0.035; rss: 104MB	coherence checking
time: 0.056; rss: 108MB	wf checking
time: 0.029; rss: 108MB	item-types checking
time: 0.361; rss: 118MB	item-bodies checking
time: 0.000; rss: 118MB	drop-impl checking
time: 0.039; rss: 121MB	const checking
time: 0.008; rss: 121MB	privacy checking
time: 0.001; rss: 121MB	stability index
time: 0.005; rss: 121MB	intrinsic checking
time: 0.002; rss: 121MB	effect checking
time: 0.013; rss: 121MB	match checking
time: 0.005; rss: 121MB	liveness checking
time: 0.028; rss: 121MB	rvalue checking
time: 0.054; rss: 139MB	MIR dump
  time: 0.007; rss: 139MB	SimplifyCfg
  time: 0.013; rss: 139MB	QualifyAndPromoteConstants
  time: 0.016; rss: 139MB	TypeckMir
  time: 0.001; rss: 139MB	SimplifyBranches
  time: 0.004; rss: 139MB	SimplifyCfg
time: 0.041; rss: 139MB	MIR passes
time: 0.062; rss: 139MB	borrow checking
time: 0.003; rss: 139MB	reachability checking
time: 0.005; rss: 139MB	death checking
time: 0.005; rss: 139MB	stability checking
time: 0.000; rss: 139MB	unused lib feature checking
time: 0.041; rss: 139MB	lint checking
time: 0.000; rss: 139MB	resolving dependency formats
  time: 0.001; rss: 139MB	NoLandingPads
  time: 0.003; rss: 139MB	SimplifyCfg
  time: 0.008; rss: 139MB	EraseRegions
  time: 0.001; rss: 139MB	AddCallGuards
  time: 0.054; rss: 141MB	ElaborateDrops
  time: 0.001; rss: 141MB	NoLandingPads
  time: 0.005; rss: 141MB	SimplifyCfg
  time: 0.003; rss: 141MB	Deaggregator
  time: 0.001; rss: 141MB	AddCallGuards
  time: 0.000; rss: 141MB	PreTrans
time: 0.076; rss: 141MB	Prepare MIR codegen passes
  time: 0.054; rss: 146MB	write metadata
  time: 0.113; rss: 150MB	translation item collection
  time: 0.019; rss: 152MB	codegen unit partitioning
  time: 0.032; rss: 219MB	internalize symbols
time: 1.360; rss: 209MB	translation
time: 0.000; rss: 209MB	assert dep graph
time: 0.000; rss: 209MB	serialize dep graph
  time: 0.098; rss: 159MB	llvm function passes [0]
  time: 0.048; rss: 162MB	llvm module passes [0]
  time: 1.840; rss: 163MB	codegen passes [0]
  time: 0.001; rss: 163MB	codegen passes [0]
time: 2.146; rss: 163MB	LLVM passes
time: 0.000; rss: 163MB	serialize work products
time: 0.156; rss: 99MB	linking
done
