commit 49c36bf16f80a9d9d4e96172b1bc8cb7279de468
Merge: ac919fc 4752367
Author: bors <bors@rust-lang.org>
Date:   Thu Nov 3 22:58:55 2016 -0700

    Auto merge of #36306 - nagisa:mir-local-cleanup, r=eddyb
    
    A way to remove otherwise unused locals from MIR
    
    There is a certain amount of desire for a pass which cleans up the provably unused variables (no assignments or reads). There has been an implementation of such pass by @scottcarr, and another (two!) implementations by me in my own dataflow efforts.
    
    PR like https://github.com/rust-lang/rust/pull/35916 proves that this pass is useful even on its own, which is why I cherry-picked it out from my dataflow effort.
    
    @nikomatsakis previously expressed concerns over this pass not seeming to be very cheap to run and therefore unsuitable for regular cleanup duties. Turns out, regular cleanup of local declarations is not at all necessary, at least now, because majority of passes simply do not (or should not) care about them. Thatâ€™s why it is viable to only run this pass once (perhaps a few more times in the future?) per function, right before translation.
    
    r? @eddyb or @nikomatsakis
rustc: ./hyper.0.5.0
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling hyper v0.5.0 (file:///root/benchmarks/hyper.0.5.0)
time: 0.026; rss: 50MB	parsing
Lines of code:             9003
Pre-expansion node count:  44129
time: 0.000; rss: 50MB	recursion limit
time: 0.000; rss: 50MB	crate injection
time: 0.000; rss: 50MB	plugin loading
time: 0.000; rss: 50MB	plugin registration
time: 0.090; rss: 87MB	expansion
time: 0.000; rss: 87MB	maybe building test harness
time: 0.001; rss: 87MB	maybe creating a macro crate
Post-expansion node count: 101823
time: 0.000; rss: 87MB	checking for inline asm in case the target doesn't support it
time: 0.002; rss: 87MB	complete gated feature checking
time: 0.003; rss: 87MB	early lint checks
time: 0.001; rss: 87MB	AST validation
time: 0.016; rss: 91MB	name resolution
time: 0.007; rss: 95MB	lowering ast -> hir
time: 0.001; rss: 97MB	indexing hir
time: 0.001; rss: 97MB	attribute checking
time: 0.001; rss: 90MB	language item collection
time: 0.001; rss: 90MB	lifetime resolution
time: 0.000; rss: 90MB	looking for entry point
time: 0.000; rss: 90MB	looking for plugin registrar
time: 0.005; rss: 94MB	region resolution
time: 0.001; rss: 94MB	loop checking
time: 0.000; rss: 94MB	static item recursion checking
time: 0.056; rss: 94MB	compute_incremental_hashes_map
time: 0.000; rss: 94MB	load_dep_graph
time: 0.015; rss: 97MB	type collecting
time: 0.000; rss: 97MB	variance inference
time: 0.028; rss: 100MB	coherence checking
time: 0.042; rss: 101MB	wf checking
time: 0.020; rss: 103MB	item-types checking
time: 0.319; rss: 112MB	item-bodies checking
time: 0.000; rss: 112MB	drop-impl checking
time: 0.029; rss: 112MB	const checking
time: 0.005; rss: 112MB	privacy checking
time: 0.001; rss: 112MB	stability index
time: 0.003; rss: 112MB	intrinsic checking
time: 0.001; rss: 112MB	effect checking
time: 0.008; rss: 112MB	match checking
time: 0.004; rss: 112MB	liveness checking
time: 0.021; rss: 112MB	rvalue checking
time: 0.048; rss: 130MB	MIR dump
  time: 0.006; rss: 130MB	SimplifyCfg
  time: 0.011; rss: 130MB	QualifyAndPromoteConstants
  time: 0.013; rss: 130MB	TypeckMir
  time: 0.001; rss: 130MB	SimplifyBranches
  time: 0.003; rss: 130MB	SimplifyCfg
time: 0.034; rss: 130MB	MIR cleanup and validation
time: 0.054; rss: 130MB	borrow checking
time: 0.003; rss: 130MB	reachability checking
time: 0.005; rss: 130MB	death checking
time: 0.006; rss: 132MB	stability checking
time: 0.000; rss: 132MB	unused lib feature checking
time: 0.038; rss: 134MB	lint checking
time: 0.000; rss: 134MB	resolving dependency formats
  time: 0.001; rss: 134MB	NoLandingPads
  time: 0.003; rss: 134MB	SimplifyCfg
  time: 0.008; rss: 134MB	EraseRegions
  time: 0.001; rss: 134MB	AddCallGuards
  time: 0.021; rss: 136MB	ElaborateDrops
  time: 0.001; rss: 136MB	NoLandingPads
  time: 0.005; rss: 136MB	SimplifyCfg
  time: 0.003; rss: 136MB	InstCombine
  time: 0.003; rss: 136MB	Deaggregator
  time: 0.001; rss: 136MB	CopyPropagation
  time: 0.004; rss: 136MB	SimplifyLocals
  time: 0.001; rss: 136MB	AddCallGuards
  time: 0.000; rss: 136MB	PreTrans
time: 0.052; rss: 136MB	MIR optimisations
  time: 0.011; rss: 140MB	write metadata
  time: 0.116; rss: 144MB	translation item collection
  time: 0.015; rss: 148MB	codegen unit partitioning
  time: 0.013; rss: 204MB	internalize symbols
time: 1.008; rss: 204MB	translation
time: 0.000; rss: 204MB	assert dep graph
time: 0.000; rss: 204MB	serialize dep graph
  time: 0.086; rss: 148MB	llvm function passes [0]
  time: 0.041; rss: 147MB	llvm module passes [0]
  time: 1.598; rss: 152MB	codegen passes [0]
  time: 0.000; rss: 152MB	codegen passes [0]
time: 1.859; rss: 152MB	LLVM passes
time: 0.000; rss: 152MB	serialize work products
time: 0.068; rss: 94MB	linking
done
