commit 4b71f8d1417423d933dfd4f74d5d4d167b85f77e
Merge: 7c27cce bc6daea
Author: bors <bors@rust-lang.org>
Date:   Tue Apr 12 22:21:23 2016 -0700

    Auto merge of #32814 - jseyfried:improve_duplicate_glob_detection, r=nikomatsakis
    
    resolve: Improve duplicate glob detection
    
    This fixes a bug introduced in #31726 in which we erroneously allow multiple imports of the same item under some circumstances.
    
    More specifically, we erroneously allow a module that is in a cycle of glob re-exports to have other re-exports (besides the glob from the cycle).
    For example,
    ```rust
    pub fn f() {}
    mod foo {
        pub use f; // (1) This defines `foo::f`.
        pub use bar::*; // (3) This also defines `foo::f`, which should be a duplicate error but is currently allowed.
    }
    mod bar {
        pub use foo::*; // (2) This defines `bar::f`.
    }
    ```
    
    A module in a glob re-export cycle can still have `pub` items after this PR. For example,
    ```rust
    mod foo {
        pub fn f() {}; // (1) This defines `foo::f`.
        pub use bar::*; // (3) This is not a duplicate error since items shadow glob-imported re-exports (cf #31337).
    }
    mod bar {
        pub use foo::*; // (2) This defines `bar::f`.
    }
    ```
    r? @nikomatsakis
rustc: ./issue-32278-big-array-of-strings
/root/rust/x86_64-unknown-linux-gnu/stage2/bin/rustc big-array-of-strings.rs -Ztime-passes -Zinput-stats
time: 0.191; rss: 58MB	parsing
Lines of code:             65577
Pre-expansion node count:  65552
time: 0.011; rss: 58MB	configuration 1
time: 0.000; rss: 58MB	recursion limit
time: 0.001; rss: 58MB	gated macro checking
time: 0.000; rss: 58MB	crate injection
time: 0.004; rss: 63MB	macro loading
time: 0.000; rss: 63MB	plugin loading
time: 0.000; rss: 63MB	plugin registration
time: 0.044; rss: 69MB	expansion
time: 0.001; rss: 69MB	complete gated feature checking 1
time: 0.011; rss: 69MB	configuration 2
time: 0.000; rss: 69MB	gated configuration checking
time: 0.005; rss: 69MB	maybe building test harness
time: 0.005; rss: 69MB	prelude injection
time: 0.000; rss: 69MB	checking that all macro invocations are gone
time: 0.000; rss: 69MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 69MB	complete gated feature checking 2
time: 0.001; rss: 69MB	const fn bodies and arguments
Post-expansion node count: 65565
time: 0.006; rss: 69MB	assigning node ids
time: 0.009; rss: 82MB	lowering ast -> hir
time: 0.002; rss: 84MB	indexing hir
time: 0.001; rss: 84MB	attribute checking
time: 0.008; rss: 84MB	early lint checks
time: 0.001; rss: 71MB	external crate/lib resolution
time: 0.001; rss: 71MB	language item collection
time: 0.002; rss: 74MB	resolution
time: 0.001; rss: 74MB	lifetime resolution
time: 0.000; rss: 74MB	looking for entry point
time: 0.000; rss: 74MB	looking for plugin registrar
time: 0.007; rss: 80MB	region resolution
time: 0.001; rss: 80MB	loop checking
time: 0.002; rss: 80MB	static item recursion checking
time: 0.000; rss: 80MB	load_dep_graph
time: 0.000; rss: 80MB	type collecting
time: 0.000; rss: 80MB	variance inference
time: 0.006; rss: 88MB	coherence checking
time: 0.001; rss: 88MB	wf checking
time: 1.103; rss: 189MB	item-types checking
time: 0.000; rss: 189MB	item-bodies checking
time: 0.000; rss: 189MB	drop-impl checking
time: 0.021; rss: 188MB	const checking
time: 0.002; rss: 188MB	privacy checking
time: 0.000; rss: 188MB	stability index
time: 0.000; rss: 188MB	intrinsic checking
time: 0.000; rss: 188MB	effect checking
time: 0.000; rss: 188MB	match checking
time: 0.001; rss: 188MB	liveness checking
time: 0.000; rss: 188MB	rvalue checking
time: 0.001; rss: 188MB	MIR dump
time: 0.000; rss: 188MB	MIR passes
time: 0.001; rss: 188MB	borrow checking
time: 0.000; rss: 188MB	reachability checking
time: 0.001; rss: 188MB	death checking
time: 0.001; rss: 188MB	stability checking
time: 0.000; rss: 188MB	unused lib feature checking
time: 0.029; rss: 188MB	lint checking
time: 0.001; rss: 188MB	resolving dependency formats
time: 0.000; rss: 188MB	Prepare MIR codegen passes
  time: 0.001; rss: 198MB	translation item collection
  time: 0.000; rss: 204MB	write metadata
time: 0.089; rss: 204MB	translation
time: 0.000; rss: 204MB	assert dep graph
time: 0.000; rss: 204MB	serialize dep graph
  time: 0.004; rss: 86MB	llvm function passes [0]
  time: 0.000; rss: 86MB	llvm module passes [0]
  time: 0.174; rss: 88MB	codegen passes [0]
  time: 0.000; rss: 75MB	codegen passes [0]
time: 0.190; rss: 75MB	LLVM passes
  time: 0.202; rss: 75MB	running linker
time: 0.202; rss: 75MB	linking
done
