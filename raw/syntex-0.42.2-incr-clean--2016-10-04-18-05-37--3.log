commit 1a4192804518199623fb88bf43bde69d6b0203cb
Merge: a5dac7a 4625642
Author: bors <bors@rust-lang.org>
Date:   Tue Oct 4 13:23:09 2016 -0700

    Auto merge of #36933 - alexcrichton:less-neon-again, r=eddyb
    
    rustc: Try again to disable NEON on armv7 linux
    
    This is a follow-up to #35814 which apparently didn't disable it hard enough. It
    looks like LLVM's default armv7 target enables NEON so we'd otherwise have to
    pass `-neon`, but we're already enabling armv7 with `+v7` supposedly, so let's
    try just telling LLVM that the armv7 target is arm and then enable features
    selectively.
    
    Closes #36913
rustc: ./syntex-0.42.2-incr-clean
RUSTFLAGS="-Z incremental=incr" \
    cargo rustc -p syntex_syntax -- -Ztime-passes -Zinput-stats -Z incremental-info
   Compiling syntex_syntax v0.42.0
time: 0.107; rss: 75MB	parsing
Lines of code:             33687
Pre-expansion node count:  224033
time: 0.000; rss: 75MB	recursion limit
time: 0.000; rss: 75MB	crate injection
time: 0.000; rss: 75MB	plugin loading
time: 0.000; rss: 75MB	plugin registration
time: 0.273; rss: 147MB	expansion
time: 0.000; rss: 147MB	maybe building test harness
time: 0.006; rss: 147MB	maybe creating a macro crate
Post-expansion node count: 641571
time: 0.000; rss: 147MB	checking for inline asm in case the target doesn't support it
time: 0.013; rss: 147MB	complete gated feature checking
time: 0.023; rss: 147MB	early lint checks
time: 0.007; rss: 147MB	AST validation
time: 0.084; rss: 161MB	name resolution
time: 0.050; rss: 202MB	lowering ast -> hir
time: 0.009; rss: 211MB	indexing hir
time: 0.007; rss: 211MB	attribute checking
time: 0.006; rss: 161MB	language item collection
time: 0.012; rss: 161MB	lifetime resolution
time: 0.000; rss: 161MB	looking for entry point
time: 0.000; rss: 161MB	looking for plugin registrar
time: 0.045; rss: 172MB	region resolution
time: 0.006; rss: 172MB	loop checking
time: 0.006; rss: 172MB	static item recursion checking
time: 0.262; rss: 173MB	compute_incremental_hashes_map
time: 0.000; rss: 173MB	load_dep_graph
time: 0.080; rss: 176MB	type collecting
time: 0.001; rss: 176MB	variance inference
time: 0.039; rss: 179MB	coherence checking
time: 0.101; rss: 181MB	wf checking
time: 0.194; rss: 187MB	item-types checking
time: 3.970; rss: 239MB	item-bodies checking
time: 0.000; rss: 239MB	drop-impl checking
time: 0.315; rss: 239MB	const checking
time: 0.055; rss: 239MB	privacy checking
time: 0.007; rss: 239MB	stability index
time: 0.022; rss: 239MB	intrinsic checking
time: 0.019; rss: 239MB	effect checking
time: 0.057; rss: 239MB	match checking
time: 0.055; rss: 235MB	liveness checking
time: 0.287; rss: 235MB	rvalue checking
time: 0.420; rss: 426MB	MIR dump
  time: 0.060; rss: 427MB	SimplifyCfg
  time: 0.087; rss: 427MB	QualifyAndPromoteConstants
  time: 0.111; rss: 427MB	TypeckMir
  time: 0.004; rss: 427MB	SimplifyBranches
  time: 0.038; rss: 427MB	SimplifyCfg
time: 0.300; rss: 427MB	MIR passes
time: 0.704; rss: 428MB	borrow checking
time: 0.022; rss: 428MB	reachability checking
time: 0.045; rss: 428MB	death checking
time: 0.042; rss: 430MB	stability checking
time: 0.000; rss: 430MB	unused lib feature checking
time: 0.222; rss: 430MB	lint checking
time: 0.000; rss: 430MB	resolving dependency formats
  time: 0.003; rss: 430MB	NoLandingPads
  time: 0.028; rss: 430MB	SimplifyCfg
  time: 0.072; rss: 438MB	EraseRegions
  time: 0.011; rss: 438MB	AddCallGuards
  time: 1.051; rss: 457MB	ElaborateDrops
  time: 0.003; rss: 457MB	NoLandingPads
  time: 0.055; rss: 457MB	SimplifyCfg
  time: 0.030; rss: 457MB	InstCombine
  time: 0.012; rss: 457MB	Deaggregator
  time: 0.003; rss: 457MB	CopyPropagation
  time: 0.009; rss: 457MB	AddCallGuards
  time: 0.003; rss: 457MB	PreTrans
time: 1.281; rss: 457MB	Prepare MIR codegen passes
  time: 0.264; rss: 465MB	write metadata
  time: 0.478; rss: 475MB	translation item collection
  time: 0.068; rss: 477MB	codegen unit partitioning
  time: 0.058; rss: 726MB	internalize symbols
time: 5.162; rss: 603MB	translation
time: 0.000; rss: 603MB	assert dep graph
time: 0.000; rss: 603MB	serialize dep graph
incremental: re-using 0 out of 1 modules
  time: 0.508; rss: 413MB	llvm function passes [0]
  time: 0.245; rss: 420MB	llvm module passes [0]
  time: 10.105; rss: 420MB	codegen passes [0]
  time: 0.002; rss: 414MB	codegen passes [0]
time: 11.605; rss: 414MB	LLVM passes
time: 0.000; rss: 414MB	serialize work products
time: 0.656; rss: 106MB	linking
done
