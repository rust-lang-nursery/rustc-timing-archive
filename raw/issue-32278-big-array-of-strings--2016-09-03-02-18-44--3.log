commit d128e6bc74ce750ab94dffa422a77e740eba877a
Merge: 100b309 5928be1
Author: bors <bors@rust-lang.org>
Date:   Fri Sep 2 21:02:41 2016 -0700

    Auto merge of #35856 - phimuemue:master, r=brson
    
    Introduce max_by/min_by on iterators
    
    See https://github.com/rust-lang/rfcs/issues/1722 for reference.
    
    It seems that there is `min`, `max` (simple computation of min/max), `min_by_key`, `max_by_key` (min/max by comparing mapped values) but no `min_by` and `max_by` (min/max according to comparison function). However, e.g. on vectors or slices there is `sort`, `sort_by_key` and `sort_by`.
rustc: ./issue-32278-big-array-of-strings
/root/rust/x86_64-unknown-linux-gnu/stage2/bin/rustc big-array-of-strings.rs -Ztime-passes -Zinput-stats
time: 0.141; rss: 63MB	parsing
Lines of code:             65577
Pre-expansion node count:  65552
time: 0.006; rss: 63MB	configuration
time: 0.000; rss: 63MB	recursion limit
time: 0.000; rss: 63MB	crate injection
time: 0.000; rss: 63MB	plugin loading
time: 0.000; rss: 63MB	plugin registration
time: 0.023; rss: 85MB	expansion
time: 0.000; rss: 85MB	maybe building test harness
time: 0.004; rss: 85MB	assigning node ids
Post-expansion node count: 65565
time: 0.000; rss: 85MB	checking for inline asm in case the target doesn't support it
time: 0.001; rss: 85MB	complete gated feature checking
time: 0.001; rss: 85MB	collecting defs
time: 0.003; rss: 85MB	external crate/lib resolution
time: 0.005; rss: 85MB	early lint checks
time: 0.001; rss: 85MB	AST validation
time: 0.002; rss: 85MB	name resolution
time: 0.007; rss: 104MB	lowering ast -> hir
time: 0.002; rss: 108MB	indexing hir
time: 0.001; rss: 108MB	attribute checking
time: 0.001; rss: 98MB	language item collection
time: 0.001; rss: 98MB	lifetime resolution
time: 0.000; rss: 98MB	looking for entry point
time: 0.000; rss: 98MB	looking for plugin registrar
time: 0.009; rss: 104MB	region resolution
time: 0.001; rss: 104MB	loop checking
time: 0.002; rss: 104MB	static item recursion checking
time: 0.006; rss: 104MB	compute_incremental_hashes_map
time: 0.000; rss: 104MB	load_dep_graph
time: 0.000; rss: 104MB	type collecting
time: 0.000; rss: 104MB	variance inference
time: 0.005; rss: 107MB	coherence checking
time: 0.001; rss: 107MB	wf checking
time: 0.695; rss: 117MB	item-types checking
time: 0.000; rss: 117MB	item-bodies checking
time: 0.000; rss: 117MB	drop-impl checking
time: 0.022; rss: 115MB	const checking
time: 0.002; rss: 115MB	privacy checking
time: 0.001; rss: 115MB	stability index
time: 0.001; rss: 115MB	intrinsic checking
time: 0.000; rss: 115MB	effect checking
time: 0.000; rss: 115MB	match checking
time: 0.001; rss: 115MB	liveness checking
time: 0.000; rss: 115MB	rvalue checking
time: 0.046; rss: 125MB	MIR dump
time: 0.002; rss: 125MB	MIR passes
time: 0.001; rss: 125MB	borrow checking
time: 0.000; rss: 125MB	reachability checking
time: 0.001; rss: 125MB	death checking
time: 0.001; rss: 125MB	stability checking
time: 0.000; rss: 125MB	unused lib feature checking
time: 0.025; rss: 125MB	lint checking
time: 0.001; rss: 125MB	resolving dependency formats
time: 0.001; rss: 125MB	Prepare MIR codegen passes
  time: 0.000; rss: 125MB	write metadata
  time: 0.001; rss: 125MB	translation item collection
  time: 0.000; rss: 125MB	codegen unit partitioning
  time: 0.001; rss: 135MB	internalize symbols
time: 0.064; rss: 134MB	translation
time: 0.000; rss: 134MB	assert dep graph
time: 0.000; rss: 134MB	serialize dep graph
  time: 0.008; rss: 90MB	llvm function passes [0]
  time: 0.000; rss: 90MB	llvm module passes [0]
  time: 0.177; rss: 91MB	codegen passes [0]
  time: 0.000; rss: 91MB	codegen passes [0]
time: 0.186; rss: 91MB	LLVM passes
time: 0.000; rss: 91MB	serialize work products
  time: 0.187; rss: 79MB	running linker
time: 0.189; rss: 79MB	linking
done
