commit d88d06448e1ad928d22cf0a511f1edae91b646d5
Merge: c19cb9c 6fe7786
Author: bors <bors@rust-lang.org>
Date:   Wed Nov 16 01:17:53 2016 -0800

    Auto merge of #37773 - ollie27:rustdoc_inline_glob, r=brson
    
    rustdoc: Fix some local inlining issues
    
    * Only inline public items when inlining glob imports.
    * Never inline while in a private module or a child of a private module.
    * Never inline impls. This allowed the removal of a workaround in the
    rendering code.
rustc: ./html5ever-2016-08-25
cargo rustc  -- -Ztime-passes -Zinput-stats
   Compiling html5ever v0.5.4 (file:///root/benchmarks/html5ever-2016-08-25)
time: 0.023; rss: 48MB	parsing
Lines of code:             8210
Pre-expansion node count:  52140
time: 0.000; rss: 48MB	recursion limit
time: 0.000; rss: 48MB	crate injection
time: 0.000; rss: 48MB	plugin loading
time: 0.000; rss: 48MB	plugin registration
time: 0.630; rss: 101MB	expansion
time: 0.000; rss: 101MB	maybe building test harness
time: 0.002; rss: 101MB	maybe creating a macro crate
Post-expansion node count: 163412
time: 0.000; rss: 101MB	checking for inline asm in case the target doesn't support it
time: 0.003; rss: 101MB	complete gated feature checking
time: 0.008; rss: 101MB	early lint checks
time: 0.002; rss: 101MB	AST validation
time: 0.016; rss: 104MB	name resolution
time: 0.012; rss: 114MB	lowering ast -> hir
time: 0.003; rss: 118MB	indexing hir
time: 0.002; rss: 118MB	attribute checking
time: 0.001; rss: 98MB	language item collection
time: 0.002; rss: 98MB	lifetime resolution
time: 0.000; rss: 98MB	looking for entry point
time: 0.000; rss: 98MB	looking for plugin registrar
time: 0.011; rss: 106MB	region resolution
time: 0.001; rss: 106MB	loop checking
time: 0.001; rss: 106MB	static item recursion checking
time: 0.020; rss: 107MB	compute_incremental_hashes_map
time: 0.000; rss: 107MB	load_dep_graph
time: 0.010; rss: 109MB	type collecting
time: 0.000; rss: 109MB	variance inference
time: 0.011; rss: 110MB	coherence checking
time: 0.020; rss: 109MB	wf checking
time: 0.255; rss: 118MB	item-types checking
time: 0.413; rss: 130MB	item-bodies checking
time: 0.000; rss: 130MB	drop-impl checking
time: 0.061; rss: 134MB	const checking
time: 0.006; rss: 134MB	privacy checking
time: 0.001; rss: 134MB	stability index
time: 0.002; rss: 134MB	intrinsic checking
time: 0.002; rss: 134MB	effect checking
time: 0.014; rss: 134MB	match checking
time: 0.011; rss: 130MB	liveness checking
time: 0.022; rss: 130MB	rvalue checking
time: 0.102; rss: 178MB	MIR dump
  time: 0.008; rss: 178MB	SimplifyCfg
  time: 0.013; rss: 178MB	QualifyAndPromoteConstants
  time: 0.019; rss: 178MB	TypeckMir
  time: 0.000; rss: 178MB	SimplifyBranches
  time: 0.004; rss: 178MB	SimplifyCfg
time: 0.045; rss: 178MB	MIR cleanup and validation
time: 0.078; rss: 182MB	borrow checking
time: 0.002; rss: 182MB	reachability checking
time: 0.005; rss: 182MB	death checking
time: 0.005; rss: 182MB	stability checking
time: 0.000; rss: 182MB	unused lib feature checking
time: 0.057; rss: 182MB	lint checking
time: 0.000; rss: 182MB	resolving dependency formats
  time: 0.000; rss: 182MB	NoLandingPads
  time: 0.004; rss: 182MB	SimplifyCfg
  time: 0.009; rss: 182MB	EraseRegions
  time: 0.001; rss: 182MB	AddCallGuards
  time: 0.074; rss: 184MB	ElaborateDrops
  time: 0.000; rss: 184MB	NoLandingPads
  time: 0.007; rss: 182MB	SimplifyCfg
  time: 0.007; rss: 182MB	InstCombine
  time: 0.001; rss: 182MB	Deaggregator
  time: 0.000; rss: 182MB	CopyPropagation
  time: 0.007; rss: 179MB	SimplifyLocals
  time: 0.001; rss: 179MB	AddCallGuards
  time: 0.000; rss: 179MB	PreTrans
time: 0.112; rss: 179MB	MIR optimisations
  time: 0.011; rss: 180MB	write metadata
  time: 0.041; rss: 181MB	translation item collection
  time: 0.005; rss: 181MB	codegen unit partitioning
  time: 0.005; rss: 194MB	internalize symbols
time: 0.273; rss: 194MB	translation
time: 0.000; rss: 194MB	assert dep graph
time: 0.000; rss: 194MB	serialize dep graph
  time: 0.021; rss: 104MB	llvm function passes [0]
  time: 0.012; rss: 106MB	llvm module passes [0]
  time: 0.479; rss: 109MB	codegen passes [0]
  time: 0.000; rss: 109MB	codegen passes [0]
time: 0.551; rss: 109MB	LLVM passes
time: 0.000; rss: 109MB	serialize work products
time: 0.025; rss: 92MB	linking
done
