commit 803c3e2ee8be0516d68131d4c8bae31cfce67891
Merge: e2d6494 0c6c34d
Author: bors <bors@rust-lang.org>
Date:   Tue Jan 5 03:32:12 2016 +0000

    Auto merge of #30595 - steveklabnik:remove_learn_rust, r=gankro
    
    Some history:
    
    While getting Rust to 1.0, it was a struggle to keep the book in a
    working state. I had always wanted a certain kind of TOC, but couldn't
    quite get it there.
    
    At the 11th hour, I wrote up "Rust inside other langauges" and "Dining
    Philosophers" in an attempt to get the book in the direction I wanted to
    go. They were fine, but not my best work. I wanted to further expand
    this section, but it's just never going to end up happening. We're doing
    the second draft of the book now, and these sections are basically gone
    already.
    
    Here's the issues with these two sections, and removing them just fixes
    it all:
    
    // Philosophers
    
    There was always controversy over which ones were chosen, and why. This
    is kind of a perpetual bikeshed, but it comes up every once in a while.
    
    The implementation was originally supposed to show off channels, but
    never did, due to time constraints. Months later, I still haven't
    re-written it to use them.
    
    People get different results and assume that means they're wrong, rather
    than the non-determinism inherent in concurrency. Platform differences
    aggrivate this, as does the exact amount of sleeping and printing.
    
    // Rust Inside Other Languages
    
    This section is wonderful, and shows off a strength of Rust. However,
    it's not clear what qualifies a language to be in this section. And I'm
    not sure how tracking a ton of other languages is gonna work, into the
    future; we can't test _anything_ in this section, so it's prone to
    bitrot.
    
    By removing this section, and making the Guessing Game an initial
    tutorial, we will move this version of the book closer to the future
    version, and just eliminate all of these questions.
    
    In addition, this also solves the 'split-brained'-ness of having two
    paths, which has endlessly confused people in the past.
    
    I'm sad to see these sections go, but I think it's for the best.
    
    Fixes #30471
    Fixes #30163
    Fixes #30162
    Fixes #25488
    Fixes #30345
    Fixes #29590
    Fixes #28713
    Fixes #28915
    
    And probably others. This lengthy list alone is enough to show that
    these should have been removed.
    
    RIP.
rustc: ./jld-day15-parser
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling day15 v0.1.0 (file:///root/benchmarks/jld-day15-parser)
time: 0.001; rss: 30MB	parsing
Lines of code:             72
Pre-expansion node count:  673
time: 0.000; rss: 30MB	configuration 1
time: 0.000; rss: 30MB	recursion limit
time: 0.000; rss: 30MB	gated macro checking
time: 0.000; rss: 30MB	crate injection
time: 0.003; rss: 33MB	macro loading
time: 0.000; rss: 33MB	plugin loading
time: 0.000; rss: 33MB	plugin registration
time: 0.002; rss: 33MB	expansion
time: 0.000; rss: 33MB	complete gated feature checking 1
time: 0.000; rss: 33MB	configuration 2
time: 0.000; rss: 33MB	gated configuration checking
time: 0.000; rss: 33MB	maybe building test harness
time: 0.000; rss: 33MB	prelude injection
time: 0.000; rss: 33MB	checking that all macro invocations are gone
time: 0.000; rss: 33MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 33MB	complete gated feature checking 2
Post-expansion node count: 1176
time: 0.000; rss: 33MB	assigning node ids
time: 0.000; rss: 33MB	lowering ast -> hir
time: 0.000; rss: 33MB	indexing hir
time: 0.000; rss: 33MB	attribute checking
time: 0.000; rss: 33MB	early lint checks
time: 0.001; rss: 33MB	external crate/lib resolution
time: 0.000; rss: 33MB	language item collection
time: 0.001; rss: 41MB	resolution
time: 0.000; rss: 41MB	lifetime resolution
time: 0.000; rss: 41MB	looking for entry point
time: 0.000; rss: 41MB	looking for plugin registrar
time: 0.000; rss: 41MB	region resolution
time: 0.000; rss: 41MB	loop checking
time: 0.000; rss: 41MB	static item recursion checking
time: 0.001; rss: 46MB	type collecting
time: 0.000; rss: 46MB	variance inference
time: 0.006; rss: 56MB	coherence checking
time: 0.005; rss: 56MB	wf checking
time: 0.000; rss: 56MB	item-types checking
time: 1.115; rss: 98MB	item-bodies checking
time: 0.000; rss: 98MB	drop-impl checking
time: 0.001; rss: 98MB	const checking
time: 0.000; rss: 98MB	privacy checking
time: 0.000; rss: 98MB	stability index
time: 0.000; rss: 98MB	intrinsic checking
time: 0.000; rss: 98MB	effect checking
time: 0.000; rss: 98MB	match checking
time: 0.001; rss: 98MB	MIR dump
time: 0.000; rss: 98MB	liveness checking
time: 0.001; rss: 98MB	borrow checking
time: 0.002; rss: 98MB	rvalue checking
time: 0.000; rss: 98MB	reachability checking
time: 0.000; rss: 98MB	death checking
time: 0.000; rss: 98MB	stability checking
time: 0.000; rss: 98MB	unused lib feature checking
time: 0.003; rss: 96MB	lint checking
time: 0.001; rss: 96MB	resolving dependency formats
time: 0.000; rss: 96MB	erasing regions from MIR
  time: 0.000; rss: 156MB	write metadata
time: 16.277; rss: 156MB	translation
  time: 0.014; rss: 89MB	llvm function passes [0]
  time: 0.002; rss: 89MB	llvm module passes [0]
  time: 0.267; rss: 100MB	codegen passes [0]
  time: 0.000; rss: 98MB	codegen passes [0]
time: 0.295; rss: 98MB	LLVM passes
  time: 0.037; rss: 102MB	running linker
time: 0.037; rss: 102MB	linking
done
