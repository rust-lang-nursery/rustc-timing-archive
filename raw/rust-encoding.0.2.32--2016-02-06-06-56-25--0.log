commit 35635aebab321ff2a4708aeb172351356ad63cf7
Merge: 5147c1f ee79bfa
Author: bors <bors@rust-lang.org>
Date:   Sat Feb 6 09:24:04 2016 +0000

    Auto merge of #31333 - lambda:31273-abort-on-stack-overflow, r=brson
    
    Abort on stack overflow instead of re-raising SIGSEGV
    
    We use guard pages that cause the process to abort to protect against
    undefined behavior in the event of stack overflow.  We have a handler
    that catches segfaults, prints out an error message if the segfault was
    due to a stack overflow, then unregisters itself and returns to allow
    the signal to be re-raised and kill the process.
    
    This caused some confusion, as it was unexpected that safe code would be
    able to cause a segfault, while it's easy to overflow the stack in safe
    code.  To avoid this confusion, when we detect a segfault in the guard
    page, abort instead of the previous behavior of re-raising SIGSEGV.
    
    To test this, we need to adapt the tests for segfault to actually check
    the exit status.  Doing so revealed that the existing test for segfault
    behavior was actually invalid; LLVM optimizes the explicit null pointer
    reference down to an illegal instruction, so the program aborts with
    SIGILL instead of SIGSEGV and the test didn't actually trigger the
    signal handler at all.  Use a C helper function to get a null pointer
    that LLVM can't optimize away, so we get our segfault instead.
    
    This is a [breaking-change] if anyone is relying on the exact signal
    raised to kill a process on stack overflow.
    
    Closes #31273
rustc: ./rust-encoding.0.2.32
cargo rustc -- -Ztime-passes -Zinput-stats
    Updating registry `https://github.com/rust-lang/crates.io-index`
   Compiling encoding_index_tests v0.1.4 (file:///root/benchmarks/rust-encoding.0.2.32)
   Compiling encoding-index-japanese v1.20141219.5 (file:///root/benchmarks/rust-encoding.0.2.32)
   Compiling encoding-index-korean v1.20141219.5 (file:///root/benchmarks/rust-encoding.0.2.32)
   Compiling encoding-index-singlebyte v1.20141219.5 (file:///root/benchmarks/rust-encoding.0.2.32)
   Compiling encoding-index-simpchinese v1.20141219.5 (file:///root/benchmarks/rust-encoding.0.2.32)
   Compiling encoding-index-tradchinese v1.20141219.5 (file:///root/benchmarks/rust-encoding.0.2.32)
   Compiling encoding v0.2.32 (file:///root/benchmarks/rust-encoding.0.2.32)
time: 0.023; rss: 41MB	parsing
Lines of code:             6441
Pre-expansion node count:  30335
time: 0.006; rss: 41MB	configuration 1
time: 0.000; rss: 41MB	recursion limit
time: 0.000; rss: 41MB	gated macro checking
time: 0.000; rss: 41MB	crate injection
time: 0.003; rss: 44MB	macro loading
time: 0.000; rss: 44MB	plugin loading
time: 0.000; rss: 44MB	plugin registration
time: 0.047; rss: 46MB	expansion
time: 0.001; rss: 46MB	complete gated feature checking 1
time: 0.008; rss: 46MB	configuration 2
time: 0.000; rss: 46MB	gated configuration checking
time: 0.004; rss: 46MB	maybe building test harness
time: 0.004; rss: 46MB	prelude injection
time: 0.000; rss: 46MB	checking that all macro invocations are gone
time: 0.000; rss: 46MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 46MB	complete gated feature checking 2
Post-expansion node count: 41783
time: 0.004; rss: 46MB	assigning node ids
time: 0.004; rss: 50MB	lowering ast -> hir
time: 0.001; rss: 50MB	indexing hir
time: 0.000; rss: 50MB	attribute checking
time: 0.002; rss: 50MB	early lint checks
time: 0.001; rss: 50MB	external crate/lib resolution
time: 0.000; rss: 50MB	language item collection
time: 0.008; rss: 57MB	resolution
time: 0.000; rss: 57MB	lifetime resolution
time: 0.000; rss: 57MB	looking for entry point
time: 0.000; rss: 57MB	looking for plugin registrar
time: 0.002; rss: 59MB	region resolution
time: 0.000; rss: 59MB	loop checking
time: 0.000; rss: 59MB	static item recursion checking
time: 0.005; rss: 62MB	type collecting
time: 0.000; rss: 62MB	variance inference
time: 0.019; rss: 76MB	coherence checking
time: 0.015; rss: 76MB	wf checking
time: 0.013; rss: 78MB	item-types checking
time: 0.199; rss: 88MB	item-bodies checking
time: 0.000; rss: 88MB	drop-impl checking
time: 0.011; rss: 88MB	const checking
time: 0.002; rss: 88MB	privacy checking
time: 0.000; rss: 88MB	stability index
time: 0.001; rss: 88MB	intrinsic checking
time: 0.000; rss: 88MB	effect checking
time: 0.006; rss: 88MB	match checking
time: 0.017; rss: 92MB	MIR dump
time: 0.002; rss: 92MB	liveness checking
time: 0.023; rss: 92MB	borrow checking
time: 0.006; rss: 92MB	rvalue checking
time: 0.000; rss: 92MB	reachability checking
time: 0.002; rss: 92MB	death checking
time: 0.002; rss: 92MB	stability checking
time: 0.000; rss: 92MB	unused lib feature checking
time: 0.017; rss: 92MB	lint checking
time: 0.000; rss: 92MB	resolving dependency formats
time: 0.002; rss: 92MB	erasing regions from MIR
  time: 0.057; rss: 144MB	write metadata
time: 0.335; rss: 144MB	translation
  time: 0.026; rss: 106MB	llvm function passes [0]
  time: 0.061; rss: 108MB	llvm module passes [0]
  time: 0.564; rss: 130MB	codegen passes [0]
  time: 0.000; rss: 126MB	codegen passes [0]
time: 0.724; rss: 126MB	LLVM passes
time: 0.052; rss: 126MB	linking
done
