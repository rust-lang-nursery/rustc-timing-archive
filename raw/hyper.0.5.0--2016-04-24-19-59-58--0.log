commit 645dd013ac6b334ab5bf7a7240c2243f4bb590c9
Merge: 1930483 e078667
Author: bors <bors@rust-lang.org>
Date:   Sun Apr 24 17:04:49 2016 -0700

    Auto merge of #33085 - fitzgen:make-enumerate-example-more-clear, r=steveklabnik
    
    Make the `Iterator::enumerate` doc example more clear
    
    The example uses integers for the value being iterated over, but the indices
    added by `enumerate` are also integers, so I always end up double taking and
    thinking harder than I should when parsing the documentation. I also always
    forget which order the index and value are in the tuple so I frequently hit this
    stumbling block. This commit changes the documentation to iterate over
    characters so that it is immediately obvious which part of the tuple is the
    index and which is the value.
rustc: ./hyper.0.5.0
cargo rustc -- -Ztime-passes -Zinput-stats
    Updating registry `https://github.com/rust-lang/crates.io-index`
 Downloading regex v0.1.68
   Compiling matches v0.1.2
   Compiling unicase v0.1.0
   Compiling typeable v0.1.2
   Compiling libc v0.2.10
   Compiling httparse v0.1.6
   Compiling bitflags v0.3.3
   Compiling winapi v0.2.6
   Compiling pkg-config v0.3.8
   Compiling rustc-serialize v0.3.19
   Compiling log v0.3.6
   Compiling traitobject v0.0.1
   Compiling gcc v0.3.27
   Compiling lazy_static v0.1.16
   Compiling libc v0.1.12
   Compiling winapi-build v0.1.1
   Compiling mime v0.0.11
   Compiling kernel32-sys v0.2.2
   Compiling num_cpus v0.2.11
   Compiling rand v0.3.14
   Compiling time v0.1.35
   Compiling openssl-sys v0.6.7
   Compiling openssl v0.6.7
   Compiling uuid v0.1.18
   Compiling url v0.2.38
   Compiling cookie v0.1.21
   Compiling hyper v0.5.0 (file:///root/benchmarks/hyper.0.5.0)
time: 0.043; rss: 52MB	parsing
Lines of code:             9154
Pre-expansion node count:  45594
time: 0.009; rss: 53MB	configuration 1
time: 0.000; rss: 53MB	recursion limit
time: 0.000; rss: 53MB	gated macro checking
time: 0.000; rss: 53MB	crate injection
time: 0.004; rss: 57MB	macro loading
time: 0.000; rss: 57MB	plugin loading
time: 0.000; rss: 57MB	plugin registration
time: 0.200; rss: 67MB	expansion
time: 0.005; rss: 67MB	complete gated feature checking 1
time: 0.031; rss: 67MB	configuration 2
time: 0.000; rss: 67MB	gated configuration checking
time: 0.011; rss: 67MB	maybe building test harness
time: 0.009; rss: 67MB	prelude injection
time: 0.001; rss: 67MB	checking that all macro invocations are gone
time: 0.000; rss: 67MB	checking for inline asm in case the target doesn't support it
time: 0.002; rss: 67MB	complete gated feature checking 2
time: 0.001; rss: 67MB	const fn bodies and arguments
Post-expansion node count: 107125
time: 0.008; rss: 67MB	assigning node ids
time: 0.005; rss: 69MB	collecting defs
time: 0.005; rss: 71MB	external crate/lib resolution
time: 0.020; rss: 76MB	lowering ast -> hir
time: 0.003; rss: 78MB	indexing hir
time: 0.002; rss: 78MB	attribute checking
time: 0.007; rss: 78MB	early lint checks
time: 0.001; rss: 71MB	language item collection
time: 0.027; rss: 87MB	name resolution
time: 0.002; rss: 87MB	lifetime resolution
time: 0.000; rss: 87MB	looking for entry point
time: 0.000; rss: 87MB	looking for plugin registrar
time: 0.008; rss: 90MB	region resolution
time: 0.001; rss: 90MB	loop checking
time: 0.001; rss: 90MB	static item recursion checking
time: 0.000; rss: 90MB	load_dep_graph
time: 0.019; rss: 100MB	type collecting
time: 0.000; rss: 100MB	variance inference
time: 0.047; rss: 115MB	coherence checking
time: 0.073; rss: 116MB	wf checking
time: 0.031; rss: 117MB	item-types checking
time: 0.498; rss: 134MB	item-bodies checking
time: 0.000; rss: 134MB	drop-impl checking
time: 0.040; rss: 136MB	const checking
time: 0.009; rss: 136MB	privacy checking
time: 0.001; rss: 136MB	stability index
time: 0.004; rss: 136MB	intrinsic checking
time: 0.002; rss: 136MB	effect checking
time: 0.012; rss: 136MB	match checking
time: 0.005; rss: 137MB	liveness checking
time: 0.033; rss: 137MB	rvalue checking
time: 0.058; rss: 147MB	MIR dump
time: 0.022; rss: 147MB	MIR passes
time: 0.066; rss: 148MB	borrow checking
time: 0.003; rss: 148MB	reachability checking
time: 0.006; rss: 148MB	death checking
time: 0.006; rss: 148MB	stability checking
time: 0.000; rss: 148MB	unused lib feature checking
time: 0.051; rss: 148MB	lint checking
time: 0.000; rss: 148MB	resolving dependency formats
time: 0.010; rss: 148MB	Prepare MIR codegen passes
  time: 0.213; rss: 166MB	translation item collection
  time: 0.011; rss: 167MB	codegen unit partitioning
  time: 0.142; rss: 282MB	write metadata
time: 1.768; rss: 282MB	translation
time: 0.001; rss: 282MB	assert dep graph
time: 0.000; rss: 282MB	serialize dep graph
  time: 0.099; rss: 166MB	llvm function passes [0]
  time: 0.047; rss: 168MB	llvm module passes [0]
  time: 1.631; rss: 172MB	codegen passes [0]
  time: 0.001; rss: 122MB	codegen passes [0]
time: 1.984; rss: 122MB	LLVM passes
time: 0.177; rss: 119MB	linking
done
