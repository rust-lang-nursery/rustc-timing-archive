commit e5ed0a5d78be74238af31631e7ecf311eb661586
Merge: 7c535c6 36f2af1
Author: bors <bors@rust-lang.org>
Date:   Sat Nov 19 23:39:25 2016 -0600

    Auto merge of #37842 - nikomatsakis:incremental-test, r=mw
    
    Add tests for incremental reuse scenarios
    
    These are microbenchmarks checking that we achieve the expected reuse in the scenarios covered by incremental beta.
    
    r? @michaelwoerister
rustc: ./html5ever-2016-08-25
cargo rustc  -- -Ztime-passes -Zinput-stats
   Compiling html5ever v0.5.4 (file:///root/benchmarks/html5ever-2016-08-25)
time: 0.034; rss: 46MB	parsing
Lines of code:             8210
Pre-expansion node count:  52140
time: 0.000; rss: 46MB	recursion limit
time: 0.000; rss: 46MB	crate injection
time: 0.000; rss: 46MB	plugin loading
time: 0.000; rss: 46MB	plugin registration
time: 0.681; rss: 99MB	expansion
time: 0.000; rss: 99MB	maybe building test harness
time: 0.002; rss: 99MB	maybe creating a macro crate
Post-expansion node count: 163412
time: 0.000; rss: 99MB	checking for inline asm in case the target doesn't support it
time: 0.003; rss: 99MB	complete gated feature checking
time: 0.008; rss: 99MB	early lint checks
time: 0.002; rss: 99MB	AST validation
time: 0.019; rss: 102MB	name resolution
time: 0.023; rss: 111MB	lowering ast -> hir
time: 0.009; rss: 114MB	indexing hir
time: 0.002; rss: 114MB	attribute checking
time: 0.001; rss: 94MB	language item collection
time: 0.002; rss: 94MB	lifetime resolution
time: 0.000; rss: 94MB	looking for entry point
time: 0.000; rss: 94MB	looking for plugin registrar
time: 0.013; rss: 102MB	region resolution
time: 0.001; rss: 102MB	loop checking
time: 0.001; rss: 102MB	static item recursion checking
time: 0.021; rss: 103MB	compute_incremental_hashes_map
time: 0.000; rss: 103MB	load_dep_graph
time: 0.010; rss: 105MB	type collecting
time: 0.000; rss: 105MB	variance inference
time: 0.000; rss: 105MB	impl wf inference
time: 0.011; rss: 106MB	coherence checking
time: 0.020; rss: 107MB	wf checking
time: 0.353; rss: 113MB	item-types checking
time: 0.464; rss: 124MB	item-bodies checking
time: 0.000; rss: 124MB	drop-impl checking
time: 0.068; rss: 130MB	const checking
time: 0.006; rss: 130MB	privacy checking
time: 0.001; rss: 130MB	stability index
time: 0.003; rss: 130MB	intrinsic checking
time: 0.002; rss: 130MB	effect checking
time: 0.014; rss: 130MB	match checking
time: 0.034; rss: 126MB	liveness checking
time: 0.023; rss: 126MB	rvalue checking
time: 0.111; rss: 164MB	MIR dump
  time: 0.009; rss: 165MB	SimplifyCfg
  time: 0.015; rss: 166MB	QualifyAndPromoteConstants
  time: 0.024; rss: 166MB	TypeckMir
  time: 0.000; rss: 166MB	SimplifyBranches
  time: 0.004; rss: 166MB	SimplifyCfg
time: 0.052; rss: 166MB	MIR cleanup and validation
time: 0.084; rss: 172MB	borrow checking
time: 0.002; rss: 172MB	reachability checking
time: 0.005; rss: 172MB	death checking
time: 0.006; rss: 172MB	stability checking
time: 0.000; rss: 172MB	unused lib feature checking
time: 0.057; rss: 172MB	lint checking
time: 0.000; rss: 172MB	resolving dependency formats
  time: 0.000; rss: 172MB	NoLandingPads
  time: 0.004; rss: 172MB	SimplifyCfg
  time: 0.009; rss: 172MB	EraseRegions
  time: 0.001; rss: 172MB	AddCallGuards
  time: 0.082; rss: 176MB	ElaborateDrops
  time: 0.000; rss: 176MB	NoLandingPads
  time: 0.007; rss: 173MB	SimplifyCfg
  time: 0.007; rss: 173MB	InstCombine
  time: 0.001; rss: 173MB	Deaggregator
  time: 0.000; rss: 173MB	CopyPropagation
  time: 0.007; rss: 172MB	SimplifyLocals
  time: 0.001; rss: 172MB	AddCallGuards
  time: 0.000; rss: 172MB	PreTrans
time: 0.120; rss: 172MB	MIR optimisations
  time: 0.011; rss: 173MB	write metadata
  time: 0.041; rss: 175MB	translation item collection
  time: 0.005; rss: 175MB	codegen unit partitioning
  time: 0.005; rss: 187MB	internalize symbols
time: 0.286; rss: 187MB	translation
time: 0.000; rss: 187MB	assert dep graph
time: 0.000; rss: 187MB	serialize dep graph
  time: 0.021; rss: 101MB	llvm function passes [0]
  time: 0.013; rss: 102MB	llvm module passes [0]
  time: 0.479; rss: 107MB	codegen passes [0]
  time: 0.000; rss: 107MB	codegen passes [0]
time: 0.555; rss: 107MB	LLVM passes
time: 0.000; rss: 107MB	serialize work products
time: 0.025; rss: 89MB	linking
done
