commit d128e6bc74ce750ab94dffa422a77e740eba877a
Merge: 100b309 5928be1
Author: bors <bors@rust-lang.org>
Date:   Fri Sep 2 21:02:41 2016 -0700

    Auto merge of #35856 - phimuemue:master, r=brson
    
    Introduce max_by/min_by on iterators
    
    See https://github.com/rust-lang/rfcs/issues/1722 for reference.
    
    It seems that there is `min`, `max` (simple computation of min/max), `min_by_key`, `max_by_key` (min/max by comparing mapped values) but no `min_by` and `max_by` (min/max according to comparison function). However, e.g. on vectors or slices there is `sort`, `sort_by_key` and `sort_by`.
rustc: ./inflate-0.1.0
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling inflate v0.1.0 (file:///root/benchmarks/inflate-0.1.0)
time: 0.004; rss: 44MB	parsing
Lines of code:             956
Pre-expansion node count:  4740
time: 0.000; rss: 44MB	configuration
time: 0.000; rss: 44MB	recursion limit
time: 0.000; rss: 44MB	crate injection
time: 0.000; rss: 44MB	plugin loading
time: 0.000; rss: 44MB	plugin registration
time: 0.072; rss: 72MB	expansion
time: 0.000; rss: 72MB	maybe building test harness
time: 0.003; rss: 72MB	assigning node ids
Post-expansion node count: 55770
time: 0.000; rss: 72MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 72MB	complete gated feature checking
time: 0.005; rss: 72MB	collecting defs
time: 0.001; rss: 72MB	external crate/lib resolution
time: 0.002; rss: 72MB	early lint checks
time: 0.000; rss: 72MB	AST validation
time: 0.007; rss: 74MB	name resolution
time: 0.006; rss: 78MB	lowering ast -> hir
time: 0.001; rss: 80MB	indexing hir
time: 0.001; rss: 80MB	attribute checking
time: 0.001; rss: 77MB	language item collection
time: 0.001; rss: 77MB	lifetime resolution
time: 0.000; rss: 77MB	looking for entry point
time: 0.000; rss: 77MB	looking for plugin registrar
time: 0.003; rss: 77MB	region resolution
time: 0.000; rss: 77MB	loop checking
time: 0.000; rss: 77MB	static item recursion checking
time: 0.005; rss: 78MB	compute_incremental_hashes_map
time: 0.000; rss: 78MB	load_dep_graph
time: 0.001; rss: 78MB	type collecting
time: 0.000; rss: 78MB	variance inference
time: 0.008; rss: 81MB	coherence checking
time: 0.002; rss: 81MB	wf checking
time: 0.002; rss: 81MB	item-types checking
time: 2.379; rss: 95MB	item-bodies checking
time: 0.000; rss: 95MB	drop-impl checking
time: 0.016; rss: 96MB	const checking
time: 0.001; rss: 96MB	privacy checking
time: 0.000; rss: 96MB	stability index
time: 0.001; rss: 96MB	intrinsic checking
time: 0.001; rss: 96MB	effect checking
time: 0.004; rss: 96MB	match checking
time: 0.062; rss: 95MB	liveness checking
time: 0.012; rss: 95MB	rvalue checking
time: 0.036; rss: 116MB	MIR dump
time: 0.023; rss: 116MB	MIR passes
time: 0.200; rss: 113MB	borrow checking
time: 0.000; rss: 113MB	reachability checking
time: 0.003; rss: 113MB	death checking
time: 0.002; rss: 113MB	stability checking
time: 0.000; rss: 113MB	unused lib feature checking
time: 0.019; rss: 113MB	lint checking
time: 0.000; rss: 113MB	resolving dependency formats
time: 0.180; rss: 116MB	Prepare MIR codegen passes
  time: 0.003; rss: 117MB	write metadata
  time: 0.009; rss: 118MB	translation item collection
  time: 0.001; rss: 118MB	codegen unit partitioning
  time: 0.002; rss: 133MB	internalize symbols
time: 0.186; rss: 120MB	translation
time: 0.000; rss: 120MB	assert dep graph
time: 0.000; rss: 120MB	serialize dep graph
  time: 0.028; rss: 93MB	llvm function passes [0]
  time: 0.005; rss: 94MB	llvm module passes [0]
  time: 0.639; rss: 97MB	codegen passes [0]
  time: 0.000; rss: 97MB	codegen passes [0]
time: 0.705; rss: 97MB	LLVM passes
time: 0.000; rss: 97MB	serialize work products
time: 0.046; rss: 84MB	linking
done
