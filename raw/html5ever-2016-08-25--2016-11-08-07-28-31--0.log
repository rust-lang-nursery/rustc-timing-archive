commit 38a959a543dfc70a67e64f7d369ed6c9e12fc806
Merge: 57f971b 74bb594
Author: bors <bors@rust-lang.org>
Date:   Tue Nov 8 02:06:45 2016 -0800

    Auto merge of #36843 - petrochenkov:dotstab, r=nikomatsakis
    
    Stabilize `..` in tuple (struct) patterns
    
    I'd like to nominate `..` in tuple and tuple struct patterns for stabilization.
    This feature is a relatively small extension to existing stable functionality and doesn't have known blockers.
    The feature first appeared in Rust 1.10 6 months ago.
    An example of use: https://github.com/rust-lang/rust/pull/36203
    
    Closes https://github.com/rust-lang/rust/issues/33627
    r? @nikomatsakis
rustc: ./html5ever-2016-08-25
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling void v1.0.2
   Compiling libc v0.2.16
   Compiling mac v0.0.2
   Compiling serde v0.8.9
   Compiling lazy_static v0.2.1
   Compiling encoding_index_tests v0.1.4
   Compiling matches v0.1.2
   Compiling log v0.3.6
   Compiling rustc-serialize v0.3.19
   Compiling unreachable v0.1.1
   Compiling utf-8 v0.6.0
   Compiling phf_shared v0.7.16
   Compiling encoding-index-singlebyte v1.20141219.5
   Compiling encoding-index-korean v1.20141219.5
   Compiling encoding-index-tradchinese v1.20141219.5
   Compiling encoding-index-japanese v1.20141219.5
   Compiling debug_unreachable v0.1.1
   Compiling phf v0.7.16
   Compiling futf v0.1.2
   Compiling encoding-index-simpchinese v1.20141219.5
   Compiling rand v0.3.14
   Compiling encoding v0.2.33
   Compiling phf_generator v0.7.16
   Compiling phf_codegen v0.7.16
   Compiling string_cache v0.2.29
   Compiling tendril v0.2.3
   Compiling html5ever v0.5.4 (file:///root/benchmarks/html5ever-2016-08-25)
time: 0.023; rss: 48MB	parsing
Lines of code:             8210
Pre-expansion node count:  52238
time: 0.000; rss: 48MB	recursion limit
time: 0.000; rss: 48MB	crate injection
time: 0.000; rss: 48MB	plugin loading
time: 0.000; rss: 48MB	plugin registration
time: 0.692; rss: 103MB	expansion
time: 0.000; rss: 103MB	maybe building test harness
time: 0.002; rss: 103MB	maybe creating a macro crate
Post-expansion node count: 163524
time: 0.000; rss: 103MB	checking for inline asm in case the target doesn't support it
time: 0.003; rss: 103MB	complete gated feature checking
time: 0.008; rss: 103MB	early lint checks
time: 0.002; rss: 103MB	AST validation
time: 0.018; rss: 106MB	name resolution
time: 0.012; rss: 114MB	lowering ast -> hir
time: 0.002; rss: 118MB	indexing hir
time: 0.002; rss: 118MB	attribute checking
time: 0.001; rss: 98MB	language item collection
time: 0.002; rss: 98MB	lifetime resolution
time: 0.000; rss: 98MB	looking for entry point
time: 0.000; rss: 98MB	looking for plugin registrar
time: 0.013; rss: 106MB	region resolution
time: 0.001; rss: 106MB	loop checking
time: 0.001; rss: 106MB	static item recursion checking
time: 0.020; rss: 107MB	compute_incremental_hashes_map
time: 0.000; rss: 107MB	load_dep_graph
time: 0.008; rss: 109MB	type collecting
time: 0.000; rss: 109MB	variance inference
time: 0.022; rss: 112MB	coherence checking
time: 0.022; rss: 113MB	wf checking
time: 0.331; rss: 120MB	item-types checking
time: 0.484; rss: 134MB	item-bodies checking
time: 0.000; rss: 134MB	drop-impl checking
time: 0.069; rss: 138MB	const checking
time: 0.006; rss: 138MB	privacy checking
time: 0.001; rss: 138MB	stability index
time: 0.003; rss: 138MB	intrinsic checking
time: 0.002; rss: 138MB	effect checking
time: 0.015; rss: 138MB	match checking
time: 0.012; rss: 132MB	liveness checking
time: 0.025; rss: 132MB	rvalue checking
time: 0.118; rss: 180MB	MIR dump
  time: 0.009; rss: 179MB	SimplifyCfg
  time: 0.014; rss: 179MB	QualifyAndPromoteConstants
  time: 0.023; rss: 179MB	TypeckMir
  time: 0.000; rss: 179MB	SimplifyBranches
  time: 0.004; rss: 179MB	SimplifyCfg
time: 0.050; rss: 179MB	MIR cleanup and validation
time: 0.087; rss: 181MB	borrow checking
time: 0.003; rss: 181MB	reachability checking
time: 0.005; rss: 181MB	death checking
time: 0.007; rss: 181MB	stability checking
time: 0.000; rss: 181MB	unused lib feature checking
time: 0.061; rss: 181MB	lint checking
time: 0.000; rss: 181MB	resolving dependency formats
  time: 0.000; rss: 181MB	NoLandingPads
  time: 0.004; rss: 181MB	SimplifyCfg
  time: 0.010; rss: 181MB	EraseRegions
  time: 0.001; rss: 181MB	AddCallGuards
  time: 0.076; rss: 188MB	ElaborateDrops
  time: 0.000; rss: 188MB	NoLandingPads
  time: 0.007; rss: 184MB	SimplifyCfg
  time: 0.007; rss: 184MB	InstCombine
  time: 0.001; rss: 184MB	Deaggregator
  time: 0.000; rss: 184MB	CopyPropagation
  time: 0.007; rss: 181MB	SimplifyLocals
  time: 0.001; rss: 181MB	AddCallGuards
  time: 0.000; rss: 181MB	PreTrans
time: 0.116; rss: 181MB	MIR optimisations
  time: 0.011; rss: 183MB	write metadata
  time: 0.046; rss: 185MB	translation item collection
  time: 0.005; rss: 185MB	codegen unit partitioning
  time: 0.005; rss: 197MB	internalize symbols
time: 0.304; rss: 197MB	translation
time: 0.000; rss: 197MB	assert dep graph
time: 0.000; rss: 197MB	serialize dep graph
  time: 0.020; rss: 106MB	llvm function passes [0]
  time: 0.012; rss: 107MB	llvm module passes [0]
  time: 0.561; rss: 110MB	codegen passes [0]
  time: 0.000; rss: 110MB	codegen passes [0]
time: 0.633; rss: 110MB	LLVM passes
time: 0.000; rss: 110MB	serialize work products
time: 0.025; rss: 92MB	linking
done
