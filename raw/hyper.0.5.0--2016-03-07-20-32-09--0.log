commit 4352a8554f3765b98d27c1a0b1a170414f82b199
Merge: 388ccda 660bbf4
Author: bors <bors@rust-lang.org>
Date:   Tue Mar 8 01:04:36 2016 +0000

    Auto merge of #31986 - ashleysommer:emscripten_fixes, r=alexcrichton
    
    Fix building libstd on emscripten targets.
    
    The main cause of the problem is that libstd/os/mod.rs treats emscripten targets as an alias of linux targets, whereas liblibc treats emscripten targets as musl-compliant, so it gets a slightly different struct stat64 defined.
    This commit adds conditional compilation checks to use the correct timestamp format on fs metadata functions in the case of compiling to emscripten targets.
    
    This commit also depends needs https://github.com/ashleysommer/rust/commit/f1575cff2d631e977038fdba3fa3422ba5f8f2fe applied in order to successfully build libstd with emscripten target.
rustc: ./hyper.0.5.0
cargo rustc -- -Ztime-passes -Zinput-stats
    Updating registry `https://github.com/rust-lang/crates.io-index`
   Compiling typeable v0.1.2
   Compiling libc v0.1.12
   Compiling winapi-build v0.1.1
   Compiling libc v0.2.8
   Compiling httparse v0.1.6
   Compiling pkg-config v0.3.7
   Compiling lazy_static v0.1.15
   Compiling winapi v0.2.5
   Compiling bitflags v0.3.3
   Compiling traitobject v0.0.1
   Compiling rustc-serialize v0.3.18
   Compiling unicase v0.1.0
   Compiling gcc v0.3.25
   Compiling kernel32-sys v0.2.1
   Compiling matches v0.1.2
   Compiling time v0.1.34
   Compiling log v0.3.5
   Compiling rand v0.3.14
   Compiling num_cpus v0.2.11
   Compiling mime v0.0.11
   Compiling openssl-sys v0.6.7
   Compiling openssl v0.6.7
   Compiling uuid v0.1.18
   Compiling url v0.2.38
   Compiling cookie v0.1.21
   Compiling hyper v0.5.0 (file:///root/benchmarks/hyper.0.5.0)
time: 0.029; rss: 45MB	parsing
Lines of code:             9154
Pre-expansion node count:  45594
time: 0.009; rss: 45MB	configuration 1
time: 0.000; rss: 45MB	recursion limit
time: 0.000; rss: 45MB	gated macro checking
time: 0.000; rss: 45MB	crate injection
time: 0.004; rss: 50MB	macro loading
time: 0.000; rss: 50MB	plugin loading
time: 0.000; rss: 50MB	plugin registration
time: 0.189; rss: 59MB	expansion
time: 0.005; rss: 59MB	complete gated feature checking 1
time: 0.034; rss: 59MB	configuration 2
time: 0.000; rss: 59MB	gated configuration checking
time: 0.013; rss: 59MB	maybe building test harness
time: 0.010; rss: 59MB	prelude injection
time: 0.001; rss: 59MB	checking that all macro invocations are gone
time: 0.000; rss: 59MB	checking for inline asm in case the target doesn't support it
time: 0.002; rss: 59MB	complete gated feature checking 2
time: 0.001; rss: 59MB	const fn bodies and arguments
Post-expansion node count: 109138
time: 0.010; rss: 59MB	assigning node ids
time: 0.010; rss: 63MB	lowering ast -> hir
time: 0.004; rss: 67MB	indexing hir
time: 0.001; rss: 67MB	attribute checking
time: 0.006; rss: 67MB	early lint checks
time: 0.004; rss: 64MB	external crate/lib resolution
time: 0.001; rss: 64MB	language item collection
time: 0.024; rss: 82MB	resolution
time: 0.002; rss: 82MB	lifetime resolution
time: 0.000; rss: 82MB	looking for entry point
time: 0.000; rss: 82MB	looking for plugin registrar
time: 0.006; rss: 85MB	region resolution
time: 0.001; rss: 85MB	loop checking
time: 0.001; rss: 85MB	static item recursion checking
time: 0.012; rss: 89MB	type collecting
time: 0.000; rss: 89MB	variance inference
time: 0.038; rss: 106MB	coherence checking
time: 0.076; rss: 107MB	wf checking
time: 0.023; rss: 109MB	item-types checking
time: 0.462; rss: 133MB	item-bodies checking
time: 0.000; rss: 133MB	drop-impl checking
time: 0.036; rss: 135MB	const checking
time: 0.008; rss: 135MB	privacy checking
time: 0.001; rss: 135MB	stability index
time: 0.004; rss: 135MB	intrinsic checking
time: 0.002; rss: 135MB	effect checking
time: 0.012; rss: 135MB	match checking
time: 0.005; rss: 135MB	liveness checking
time: 0.032; rss: 135MB	rvalue checking
time: 0.059; rss: 138MB	MIR dump
time: 0.000; rss: 138MB	MIR passes
time: 0.064; rss: 138MB	borrow checking
time: 0.003; rss: 138MB	reachability checking
time: 0.006; rss: 138MB	death checking
time: 0.005; rss: 138MB	stability checking
time: 0.000; rss: 138MB	unused lib feature checking
time: 0.047; rss: 138MB	lint checking
time: 0.000; rss: 138MB	resolving dependency formats
time: 0.007; rss: 138MB	erasing regions from MIR
  time: 0.183; rss: 156MB	translation item collection
  time: 0.135; rss: 274MB	write metadata
time: 1.324; rss: 274MB	translation
  time: 0.096; rss: 163MB	llvm function passes [0]
  time: 0.046; rss: 165MB	llvm module passes [0]
  time: 1.605; rss: 167MB	codegen passes [0]
  time: 0.001; rss: 119MB	codegen passes [0]
time: 1.942; rss: 118MB	LLVM passes
time: 0.167; rss: 116MB	linking
done
