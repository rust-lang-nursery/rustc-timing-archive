commit 86995dc8c56b3c2923dff8a4bb79fed7c60a4396
Merge: 91f057d ca5dfd0
Author: bors <bors@rust-lang.org>
Date:   Sun Sep 4 18:36:42 2016 -0700

    Auto merge of #36240 - leeopop:master, r=jseyfried
    
    Allow CompilerControllers to access rustc_plugin::registry::Registry
    
    fixes #36064
    
    I chose to put ructc_plugin::registry::Registry structure
    into CompilerState structure, instead of Session structure.
    This will preserve dependencies among librustc, libructc_driver, and libructc_plugin.
    
    @jseyfried @sanxiyn
rustc: ./regex.0.1.30
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling regex v0.1.30 (file:///root/benchmarks/regex.0.1.30)
time: 0.053; rss: 57MB	parsing
Lines of code:             8558
Pre-expansion node count:  58080
time: 0.005; rss: 57MB	configuration
time: 0.000; rss: 57MB	recursion limit
time: 0.000; rss: 57MB	crate injection
time: 0.000; rss: 57MB	plugin loading
time: 0.000; rss: 57MB	plugin registration
time: 0.029; rss: 79MB	expansion
time: 0.000; rss: 79MB	maybe building test harness
time: 0.001; rss: 79MB	maybe creating a macro crate
time: 0.003; rss: 79MB	assigning node ids
Post-expansion node count: 68154
time: 0.000; rss: 79MB	checking for inline asm in case the target doesn't support it
time: 0.001; rss: 79MB	complete gated feature checking
time: 0.001; rss: 79MB	collecting defs
time: 0.001; rss: 79MB	external crate/lib resolution
time: 0.003; rss: 80MB	early lint checks
time: 0.000; rss: 80MB	AST validation
time: 0.006; rss: 81MB	name resolution
time: 0.008; rss: 92MB	lowering ast -> hir
time: 0.002; rss: 94MB	indexing hir
time: 0.001; rss: 94MB	attribute checking
time: 0.001; rss: 86MB	language item collection
time: 0.001; rss: 86MB	lifetime resolution
time: 0.000; rss: 86MB	looking for entry point
time: 0.000; rss: 86MB	looking for plugin registrar
time: 0.006; rss: 89MB	region resolution
time: 0.001; rss: 89MB	loop checking
time: 0.001; rss: 89MB	static item recursion checking
time: 0.008; rss: 90MB	compute_incremental_hashes_map
time: 0.000; rss: 90MB	load_dep_graph
time: 0.008; rss: 90MB	type collecting
time: 0.000; rss: 90MB	variance inference
time: 0.020; rss: 93MB	coherence checking
time: 0.008; rss: 94MB	wf checking
time: 0.253; rss: 105MB	item-types checking
time: 0.146; rss: 109MB	item-bodies checking
time: 0.000; rss: 109MB	drop-impl checking
time: 0.027; rss: 110MB	const checking
time: 0.003; rss: 110MB	privacy checking
time: 0.001; rss: 110MB	stability index
time: 0.002; rss: 110MB	intrinsic checking
time: 0.001; rss: 110MB	effect checking
time: 0.004; rss: 110MB	match checking
time: 0.002; rss: 110MB	liveness checking
time: 0.008; rss: 110MB	rvalue checking
time: 0.044; rss: 122MB	MIR dump
time: 0.020; rss: 122MB	MIR passes
time: 0.021; rss: 122MB	borrow checking
time: 0.000; rss: 122MB	reachability checking
time: 0.002; rss: 122MB	death checking
time: 0.002; rss: 122MB	stability checking
time: 0.000; rss: 122MB	unused lib feature checking
time: 0.026; rss: 124MB	lint checking
time: 0.000; rss: 124MB	resolving dependency formats
time: 0.019; rss: 126MB	Prepare MIR codegen passes
  time: 0.163; rss: 135MB	write metadata
  time: 0.042; rss: 137MB	translation item collection
  time: 0.007; rss: 137MB	codegen unit partitioning
  time: 0.013; rss: 161MB	internalize symbols
time: 0.625; rss: 154MB	translation
time: 0.000; rss: 154MB	assert dep graph
time: 0.000; rss: 154MB	serialize dep graph
  time: 0.038; rss: 111MB	llvm function passes [0]
  time: 0.019; rss: 113MB	llvm module passes [0]
  time: 0.677; rss: 117MB	codegen passes [0]
  time: 0.001; rss: 118MB	codegen passes [0]
time: 0.794; rss: 117MB	LLVM passes
time: 0.000; rss: 117MB	serialize work products
time: 0.065; rss: 90MB	linking
done
