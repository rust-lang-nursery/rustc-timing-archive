commit 6572a463116a31efba8bfddb2e64ed659311b8a1
Merge: 6dc035e ee338c3
Author: bors <bors@rust-lang.org>
Date:   Sun Oct 16 04:22:21 2016 -0700

    Auto merge of #37129 - arielb1:erased-normal, r=eddyb
    
    normalize types every time HR regions are erased
    
    Associated type normalization is inhibited by higher-ranked regions.
    Therefore, every time we erase them, we must re-normalize.
    
    I was meaning to introduce this change some time ago, but we used
    to erase regions in generic context, which broke this terribly (because
    you can't always normalize in a generic context). That seems to be gone
    now.
    
    Ensure this by having a `erase_late_bound_regions_and_normalize`
    function.
    
    Fixes #37109 (the missing call was in mir::block).
    
    r? @eddyb
rustc: ./piston-image-0.10.3
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling image v0.10.3 (file:///root/benchmarks/piston-image-0.10.3)
time: 0.063; rss: 49MB	parsing
Lines of code:             12000
Pre-expansion node count:  90272
time: 0.000; rss: 49MB	recursion limit
time: 0.000; rss: 49MB	crate injection
time: 0.000; rss: 49MB	plugin loading
time: 0.000; rss: 49MB	plugin registration
time: 0.095; rss: 87MB	expansion
time: 0.000; rss: 87MB	maybe building test harness
time: 0.001; rss: 87MB	maybe creating a macro crate
Post-expansion node count: 148999
time: 0.000; rss: 87MB	checking for inline asm in case the target doesn't support it
time: 0.003; rss: 87MB	complete gated feature checking
time: 0.005; rss: 87MB	early lint checks
time: 0.001; rss: 87MB	AST validation
time: 0.029; rss: 92MB	name resolution
time: 0.033; rss: 103MB	lowering ast -> hir
time: 0.008; rss: 105MB	indexing hir
time: 0.002; rss: 105MB	attribute checking
time: 0.002; rss: 94MB	language item collection
time: 0.003; rss: 94MB	lifetime resolution
time: 0.000; rss: 94MB	looking for entry point
time: 0.000; rss: 94MB	looking for plugin registrar
time: 0.020; rss: 99MB	region resolution
time: 0.001; rss: 99MB	loop checking
time: 0.001; rss: 99MB	static item recursion checking
time: 0.055; rss: 99MB	compute_incremental_hashes_map
time: 0.000; rss: 99MB	load_dep_graph
time: 0.017; rss: 102MB	type collecting
time: 0.000; rss: 102MB	variance inference
time: 0.030; rss: 105MB	coherence checking
time: 0.094; rss: 107MB	wf checking
time: 0.158; rss: 111MB	item-types checking
time: 0.946; rss: 121MB	item-bodies checking
time: 0.000; rss: 121MB	drop-impl checking
time: 0.061; rss: 122MB	const checking
time: 0.011; rss: 122MB	privacy checking
time: 0.001; rss: 122MB	stability index
time: 0.008; rss: 122MB	intrinsic checking
time: 0.003; rss: 122MB	effect checking
time: 0.018; rss: 122MB	match checking
time: 0.011; rss: 123MB	liveness checking
time: 0.050; rss: 123MB	rvalue checking
time: 0.173; rss: 163MB	MIR dump
  time: 0.012; rss: 164MB	SimplifyCfg
  time: 0.024; rss: 164MB	QualifyAndPromoteConstants
  time: 0.026; rss: 164MB	TypeckMir
  time: 0.001; rss: 164MB	SimplifyBranches
  time: 0.005; rss: 164MB	SimplifyCfg
time: 0.067; rss: 164MB	MIR passes
time: 0.127; rss: 165MB	borrow checking
time: 0.004; rss: 165MB	reachability checking
time: 0.009; rss: 165MB	death checking
time: 0.012; rss: 165MB	stability checking
time: 0.000; rss: 165MB	unused lib feature checking
time: 0.075; rss: 165MB	lint checking
time: 0.000; rss: 165MB	resolving dependency formats
  time: 0.001; rss: 165MB	NoLandingPads
  time: 0.005; rss: 165MB	SimplifyCfg
  time: 0.013; rss: 166MB	EraseRegions
  time: 0.002; rss: 166MB	AddCallGuards
  time: 0.052; rss: 170MB	ElaborateDrops
  time: 0.001; rss: 170MB	NoLandingPads
  time: 0.009; rss: 170MB	SimplifyCfg
  time: 0.006; rss: 170MB	InstCombine
  time: 0.002; rss: 170MB	Deaggregator
  time: 0.001; rss: 170MB	CopyPropagation
  time: 0.002; rss: 170MB	AddCallGuards
  time: 0.000; rss: 170MB	PreTrans
time: 0.094; rss: 170MB	Prepare MIR codegen passes
  time: 0.078; rss: 173MB	write metadata
  time: 0.481; rss: 186MB	translation item collection
  time: 0.032; rss: 190MB	codegen unit partitioning
  time: 0.025; rss: 307MB	internalize symbols
time: 3.159; rss: 280MB	translation
time: 0.000; rss: 280MB	assert dep graph
time: 0.000; rss: 280MB	serialize dep graph
  time: 0.206; rss: 213MB	llvm function passes [0]
  time: 0.082; rss: 217MB	llvm module passes [0]
  time: 4.148; rss: 219MB	codegen passes [0]
  time: 0.001; rss: 220MB	codegen passes [0]
time: 4.831; rss: 220MB	LLVM passes
time: 0.000; rss: 220MB	serialize work products
time: 0.256; rss: 94MB	linking
done
