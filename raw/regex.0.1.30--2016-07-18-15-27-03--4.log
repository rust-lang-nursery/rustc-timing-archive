commit 9c888980763e8ba16caa67f5f08e13109bbc6fa5
Merge: 06ca016 22f77a9
Author: bors <bors@rust-lang.org>
Date:   Mon Jul 18 11:29:25 2016 -0700

    Auto merge of #34899 - michaelwoerister:always_internalize_symbols, r=eddyb
    
    Run base::internalize_symbols() even for single-codegen-unit crates.
    
    The initial linkage-assignment (especially for closures) is a conservative one that makes some symbols more visible than they need to be. While this is not a correctness problem, it does force the LLVM inliner to be more conservative too, which results in poor performance. Once translation is based solely on MIR, it will be easier to also make the initial linkage assignment a better fitting one. Until then `internalize_symbols()` does a good job of preventing most performance regressions.
    
    This should solve the regressions reported in https://github.com/rust-lang/rust/issues/34891 and maybe also those in https://github.com/rust-lang/rust/issues/34831.
    
    As a side-effect, this will also solve most of the problematic cases described in https://github.com/rust-lang/rust/issues/34793. Not reliably so, however. For that, we still need a solution like the one implement in https://github.com/rust-lang/rust/pull/34830.
    
    cc @rust-lang/compiler
rustc: ./regex.0.1.30
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling regex v0.1.30 (file:///root/benchmarks/regex.0.1.30)
time: 0.063; rss: 99MB	parsing
Lines of code:             8558
Pre-expansion node count:  58076
time: 0.010; rss: 99MB	configuration
time: 0.000; rss: 99MB	recursion limit
time: 0.000; rss: 99MB	crate injection
time: 0.000; rss: 99MB	plugin loading
time: 0.000; rss: 99MB	plugin registration
time: 0.036; rss: 134MB	expansion
time: 0.000; rss: 134MB	maybe building test harness
time: 0.006; rss: 134MB	assigning node ids
Post-expansion node count: 68148
time: 0.000; rss: 134MB	checking for inline asm in case the target doesn't support it
time: 0.001; rss: 134MB	complete gated feature checking
time: 0.001; rss: 134MB	collecting defs
time: 0.001; rss: 134MB	external crate/lib resolution
time: 0.006; rss: 135MB	early lint checks
time: 0.001; rss: 135MB	AST validation
time: 0.007; rss: 136MB	name resolution
time: 0.009; rss: 146MB	lowering ast -> hir
time: 0.001; rss: 148MB	indexing hir
time: 0.001; rss: 148MB	attribute checking
time: 0.001; rss: 139MB	language item collection
time: 0.001; rss: 139MB	lifetime resolution
time: 0.000; rss: 139MB	looking for entry point
time: 0.000; rss: 139MB	looking for plugin registrar
time: 0.006; rss: 142MB	region resolution
time: 0.001; rss: 142MB	loop checking
time: 0.001; rss: 142MB	static item recursion checking
time: 0.000; rss: 142MB	load_dep_graph
time: 0.010; rss: 143MB	type collecting
time: 0.000; rss: 143MB	variance inference
time: 0.025; rss: 148MB	coherence checking
time: 0.014; rss: 148MB	wf checking
time: 0.333; rss: 157MB	item-types checking
time: 0.206; rss: 161MB	item-bodies checking
time: 0.000; rss: 161MB	drop-impl checking
time: 0.028; rss: 164MB	const checking
time: 0.004; rss: 164MB	privacy checking
time: 0.001; rss: 164MB	stability index
time: 0.002; rss: 164MB	intrinsic checking
time: 0.001; rss: 164MB	effect checking
time: 0.004; rss: 165MB	match checking
time: 0.002; rss: 165MB	liveness checking
time: 0.008; rss: 165MB	rvalue checking
time: 0.053; rss: 175MB	MIR dump
time: 0.022; rss: 175MB	MIR passes
time: 0.022; rss: 175MB	borrow checking
time: 0.000; rss: 175MB	reachability checking
time: 0.003; rss: 175MB	death checking
time: 0.002; rss: 175MB	stability checking
time: 0.000; rss: 175MB	unused lib feature checking
time: 0.029; rss: 175MB	lint checking
time: 0.000; rss: 175MB	resolving dependency formats
time: 0.019; rss: 177MB	Prepare MIR codegen passes
  time: 0.174; rss: 188MB	write metadata
  time: 0.059; rss: 190MB	translation item collection
  time: 0.008; rss: 190MB	codegen unit partitioning
time: 1.545; rss: 234MB	translation
time: 0.000; rss: 234MB	assert dep graph
time: 0.000; rss: 234MB	serialize dep graph
  time: 0.411; rss: 165MB	llvm function passes [0]
  time: 0.189; rss: 165MB	llvm module passes [0]
  time: 6.069; rss: 169MB	codegen passes [0]
  time: 0.002; rss: 169MB	codegen passes [0]
time: 7.090; rss: 169MB	LLVM passes
time: 0.063; rss: 149MB	linking
done
