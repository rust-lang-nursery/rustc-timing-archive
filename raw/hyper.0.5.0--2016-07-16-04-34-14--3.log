commit dc8212ff200dc54113a87b3a7033879133fdfff0
Merge: c4788c2 bbff336
Author: bors <bors@rust-lang.org>
Date:   Sat Jul 16 01:19:16 2016 -0700

    Auto merge of #34779 - infinity0:master, r=alexcrichton
    
    If local-rust is the same as the current version, then force a local-rebuild
    
    In Debian, we would like the option to build/rebuild the current release from
    *either* the current or previous stable release. So we use enable-local-rust
    instead of enable-local-rebuild, and read the bootstrap key dynamically from
    whatever is installed locally.
    
    In general, it does not make much sense to allow enable-local-rust without also
    setting the bootstrap key, since the build would fail otherwise.
    
    (The way I detect "the bootstrap key of [the local] rustc installation" is a bit hacky, suggestions welcome.)
rustc: ./hyper.0.5.0
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling hyper v0.5.0 (file:///root/benchmarks/hyper.0.5.0)
time: 0.032; rss: 89MB	parsing
Lines of code:             9154
Pre-expansion node count:  44838
time: 0.005; rss: 93MB	configuration
time: 0.000; rss: 93MB	recursion limit
time: 0.000; rss: 93MB	crate injection
time: 0.000; rss: 93MB	plugin loading
time: 0.000; rss: 93MB	plugin registration
time: 0.119; rss: 132MB	expansion
time: 0.000; rss: 132MB	maybe building test harness
time: 0.008; rss: 132MB	assigning node ids
Post-expansion node count: 101581
time: 0.000; rss: 132MB	checking for inline asm in case the target doesn't support it
time: 0.002; rss: 132MB	complete gated feature checking
time: 0.003; rss: 132MB	collecting defs
time: 0.011; rss: 143MB	external crate/lib resolution
time: 0.006; rss: 143MB	early lint checks
time: 0.001; rss: 143MB	AST validation
time: 0.020; rss: 147MB	name resolution
time: 0.011; rss: 156MB	lowering ast -> hir
time: 0.002; rss: 158MB	indexing hir
time: 0.001; rss: 158MB	attribute checking
time: 0.001; rss: 151MB	language item collection
time: 0.002; rss: 151MB	lifetime resolution
time: 0.000; rss: 151MB	looking for entry point
time: 0.000; rss: 151MB	looking for plugin registrar
time: 0.005; rss: 155MB	region resolution
time: 0.001; rss: 155MB	loop checking
time: 0.001; rss: 155MB	static item recursion checking
time: 0.000; rss: 155MB	load_dep_graph
time: 0.032; rss: 157MB	type collecting
time: 0.000; rss: 157MB	variance inference
time: 0.047; rss: 165MB	coherence checking
time: 0.099; rss: 166MB	wf checking
time: 0.037; rss: 166MB	item-types checking
time: 0.535; rss: 178MB	item-bodies checking
time: 0.000; rss: 178MB	drop-impl checking
time: 0.046; rss: 180MB	const checking
time: 0.007; rss: 180MB	privacy checking
time: 0.001; rss: 180MB	stability index
time: 0.006; rss: 180MB	intrinsic checking
time: 0.002; rss: 180MB	effect checking
time: 0.015; rss: 180MB	match checking
time: 0.005; rss: 180MB	liveness checking
time: 0.032; rss: 180MB	rvalue checking
time: 0.065; rss: 191MB	MIR dump
time: 0.045; rss: 191MB	MIR passes
time: 0.074; rss: 191MB	borrow checking
time: 0.003; rss: 191MB	reachability checking
time: 0.005; rss: 191MB	death checking
time: 0.005; rss: 191MB	stability checking
time: 0.000; rss: 191MB	unused lib feature checking
time: 0.053; rss: 191MB	lint checking
time: 0.000; rss: 191MB	resolving dependency formats
time: 0.094; rss: 195MB	Prepare MIR codegen passes
  time: 0.132; rss: 198MB	write metadata
  time: 0.194; rss: 205MB	translation item collection
  time: 0.021; rss: 207MB	codegen unit partitioning
time: 3.637; rss: 326MB	translation
time: 0.001; rss: 326MB	assert dep graph
time: 0.000; rss: 326MB	serialize dep graph
  time: 1.115; rss: 213MB	llvm function passes [0]
  time: 0.434; rss: 212MB	llvm module passes [0]
  time: 16.137; rss: 215MB	codegen passes [0]
  time: 0.002; rss: 215MB	codegen passes [0]
time: 18.785; rss: 214MB	LLVM passes
time: 0.153; rss: 165MB	linking
done
