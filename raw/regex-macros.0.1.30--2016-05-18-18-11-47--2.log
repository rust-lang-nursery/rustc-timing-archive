commit 9a140454ea47b7fd107b6e963b7ea2aef74e9518
Merge: 9743c66 f860f8b
Author: bors <bors@rust-lang.org>
Date:   Wed May 18 08:47:53 2016 -0700

    Auto merge of #33476 - nikomatsakis:incr-comp-xcrate, r=mw
    
    track incr. comp. dependencies across crates
    
    This PR refactors the compiler's incremental compilation hashing so that it can track dependencies across crates. The main bits are:
    
    - computing a hash representing the metadata for an item we are emitting
      - we do this by making `MetaData(X)` be the current task while computing metadata for an item
      - this naturally registers reads from any tables and things that we read for that purpose
      - we can then hash all the inputs to those tables
    - tracking when we access metadata
      - we do this by registering a read of `MetaData(X)` for each foreign item `X` whose metadata we read
    - hashing metadata from foreign items
      - we do this by loading up metadata from a file in the incr. comp. directory
      - if there is no file, we use the SVH for the entire crate
    
    There is one very simple test only at this point. The next PR will be focused on expanding out the tests.
    
    Note that this is based on top of https://github.com/rust-lang/rust/pull/33228
    
    r? @michaelwoerister
rustc: ./regex-macros.0.1.30
cd regex_macros && cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling regex_macros v0.1.17 (file:///root/benchmarks/regex-macros.0.1.30/regex_macros)
time: 0.002; rss: 46MB	parsing
Lines of code:             639
Pre-expansion node count:  2180
time: 0.001; rss: 46MB	configuration 1
time: 0.000; rss: 46MB	recursion limit
time: 0.000; rss: 46MB	crate injection
time: 0.018; rss: 83MB	macro loading
time: 0.000; rss: 83MB	plugin loading
time: 0.000; rss: 83MB	plugin registration
time: 0.032; rss: 89MB	expansion
time: 0.010; rss: 89MB	configuration 2
time: 0.000; rss: 89MB	gated configuration checking
time: 0.005; rss: 89MB	maybe building test harness
time: 0.005; rss: 89MB	prelude injection
time: 0.000; rss: 89MB	checking that all macro invocations are gone
time: 0.000; rss: 89MB	checking for inline asm in case the target doesn't support it
time: 0.001; rss: 89MB	complete gated feature checking
Post-expansion node count: 69751
time: 0.004; rss: 89MB	assigning node ids
time: 0.000; rss: 89MB	collecting defs
time: 0.102; rss: 174MB	external crate/lib resolution
time: 0.003; rss: 174MB	early lint checks
time: 0.010; rss: 177MB	name resolution
time: 0.006; rss: 182MB	lowering ast -> hir
time: 0.001; rss: 182MB	indexing hir
time: 0.000; rss: 182MB	attribute checking
time: 0.000; rss: 176MB	language item collection
time: 0.001; rss: 176MB	lifetime resolution
time: 0.000; rss: 176MB	looking for entry point
time: 0.000; rss: 176MB	looking for plugin registrar
time: 0.002; rss: 178MB	region resolution
time: 0.000; rss: 178MB	loop checking
time: 0.000; rss: 178MB	static item recursion checking
time: 0.000; rss: 178MB	load_dep_graph
time: 0.014; rss: 181MB	type collecting
time: 0.000; rss: 181MB	variance inference
time: 0.010; rss: 183MB	coherence checking
time: 0.007; rss: 184MB	wf checking
time: 0.001; rss: 184MB	item-types checking
time: 1.183; rss: 199MB	item-bodies checking
makefile:2: recipe for target 'all' failed
done
