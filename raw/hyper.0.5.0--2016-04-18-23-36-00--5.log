commit d36ad55aa5176eeec0da6d2a7b1689c263195e8a
Merge: b324fa7 b325baf
Author: bors <bors@rust-lang.org>
Date:   Mon Apr 18 17:53:58 2016 -0700

    Auto merge of #32755 - alexcrichton:rustbuild-start-test, r=brson
    
    rustbuild: Add support for compiletest test suites
    
    This commit adds support in rustbuild for running all of the compiletest test
    suites as part of `make check`. The `compiletest` program was moved to
    `src/tools` (like `rustbook` and others) and is now just compiled like any other
    old tool. Each test suite has a pretty standard set of dependencies and just
    tweaks various parameters to the final compiletest executable.
    
    Note that full support is lacking in terms of:
    
    * Once a test suite has passed, that's not remembered. When a test suite is
      requested to be run, it's always run.
    * The arguments to compiletest probably don't work for every possible
      combination of platforms and testing environments just yet. There will likely
      need to be future updates to tweak various pieces here and there.
    * Cross compiled test suites probably don't work just yet, support for that will
      come in a follow-up patch.
rustc: ./hyper.0.5.0
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling hyper v0.5.0 (file:///root/benchmarks/hyper.0.5.0)
time: 0.045; rss: 40MB	parsing
Lines of code:             9154
Pre-expansion node count:  45594
time: 0.009; rss: 42MB	configuration 1
time: 0.000; rss: 42MB	recursion limit
time: 0.000; rss: 42MB	gated macro checking
time: 0.000; rss: 42MB	crate injection
time: 0.004; rss: 47MB	macro loading
time: 0.000; rss: 47MB	plugin loading
time: 0.000; rss: 47MB	plugin registration
time: 0.201; rss: 56MB	expansion
time: 0.005; rss: 56MB	complete gated feature checking 1
time: 0.030; rss: 56MB	configuration 2
time: 0.000; rss: 56MB	gated configuration checking
time: 0.011; rss: 56MB	maybe building test harness
time: 0.008; rss: 56MB	prelude injection
time: 0.001; rss: 56MB	checking that all macro invocations are gone
time: 0.000; rss: 56MB	checking for inline asm in case the target doesn't support it
time: 0.002; rss: 56MB	complete gated feature checking 2
time: 0.001; rss: 56MB	const fn bodies and arguments
Post-expansion node count: 107125
time: 0.008; rss: 56MB	assigning node ids
time: 0.019; rss: 62MB	lowering ast -> hir
time: 0.007; rss: 63MB	indexing hir
time: 0.001; rss: 63MB	attribute checking
time: 0.007; rss: 63MB	early lint checks
time: 0.004; rss: 59MB	external crate/lib resolution
time: 0.001; rss: 59MB	language item collection
time: 0.028; rss: 75MB	resolution
time: 0.002; rss: 75MB	lifetime resolution
time: 0.000; rss: 75MB	looking for entry point
time: 0.000; rss: 75MB	looking for plugin registrar
time: 0.006; rss: 79MB	region resolution
time: 0.001; rss: 79MB	loop checking
time: 0.001; rss: 79MB	static item recursion checking
time: 0.000; rss: 79MB	load_dep_graph
time: 0.018; rss: 89MB	type collecting
time: 0.000; rss: 89MB	variance inference
time: 0.049; rss: 104MB	coherence checking
time: 0.075; rss: 104MB	wf checking
time: 0.030; rss: 105MB	item-types checking
time: 0.502; rss: 122MB	item-bodies checking
time: 0.000; rss: 122MB	drop-impl checking
time: 0.042; rss: 124MB	const checking
time: 0.008; rss: 124MB	privacy checking
time: 0.001; rss: 124MB	stability index
time: 0.004; rss: 124MB	intrinsic checking
time: 0.002; rss: 124MB	effect checking
time: 0.012; rss: 124MB	match checking
time: 0.005; rss: 125MB	liveness checking
time: 0.033; rss: 125MB	rvalue checking
time: 0.063; rss: 132MB	MIR dump
time: 0.023; rss: 133MB	MIR passes
time: 0.067; rss: 134MB	borrow checking
time: 0.003; rss: 134MB	reachability checking
time: 0.006; rss: 134MB	death checking
time: 0.006; rss: 134MB	stability checking
time: 0.000; rss: 134MB	unused lib feature checking
time: 0.048; rss: 134MB	lint checking
time: 0.000; rss: 134MB	resolving dependency formats
time: 0.010; rss: 135MB	Prepare MIR codegen passes
  time: 0.217; rss: 162MB	translation item collection
  time: 0.008; rss: 163MB	codegen unit partitioning
  time: 0.141; rss: 278MB	write metadata
time: 1.790; rss: 278MB	translation
time: 0.001; rss: 278MB	assert dep graph
time: 0.000; rss: 278MB	serialize dep graph
  time: 0.098; rss: 164MB	llvm function passes [0]
  time: 0.047; rss: 166MB	llvm module passes [0]
  time: 1.634; rss: 169MB	codegen passes [0]
  time: 0.001; rss: 118MB	codegen passes [0]
time: 1.982; rss: 116MB	LLVM passes
time: 0.175; rss: 114MB	linking
done
