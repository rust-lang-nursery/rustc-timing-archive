commit a7b2232d20320dc3b4044a2aec1d51a129e7e17d
Merge: 9627e9e 8cfc69e
Author: bors <bors@rust-lang.org>
Date:   Wed Sep 7 15:45:14 2016 -0700

    Auto merge of #36292 - japaric:musl-root, r=alexcrichton
    
    rustbuild: per target musl-root
    
    config.toml now accepts a target.$TARGET.musl-root key that lets you
    override the "build" musl-root value, which is set via the --musl-root
    flag or via the build.musl-root key.
    
    With this change, it's now possible to compile std for several musl
    targets at once. Here's are the sample commands to do such thing:
    
    ```
    $ configure \
        --enable-rustbuild \
        --target=x86_64-unknown-linux-musl,arm-unknown-linux-musleabi \
        --musl-root=/musl/x86_64-unknown-linux-musl/
    
    $ edit config.toml && tail config.toml
    [target.arm-unknown-linux-musleabi]
    musl-root = "/x-tools/arm-unknown-linux-musleabi/arm-unknown-linux-musleabi/sysroot/usr"
    
    $ make
    ```
    
    r? @alexcrichton
    With this we should be able to start producing releases of std for arm musl targets
rustc: ./html5ever-2016-08-25
cargo rustc -- -Ztime-passes -Zinput-stats
    Updating registry `https://github.com/rust-lang/crates.io-index`
   Compiling encoding_index_tests v0.1.4
   Compiling mac v0.0.2
   Compiling log v0.3.6
   Compiling matches v0.1.2
   Compiling phf_shared v0.7.16
   Compiling void v1.0.2
   Compiling libc v0.2.15
   Compiling serde v0.8.7
   Compiling encoding-index-korean v1.20141219.5
   Compiling encoding-index-japanese v1.20141219.5
   Compiling utf-8 v0.6.0
   Compiling encoding-index-singlebyte v1.20141219.5
   Compiling encoding-index-tradchinese v1.20141219.5
   Compiling encoding-index-simpchinese v1.20141219.5
   Compiling rustc-serialize v0.3.19
   Compiling phf v0.7.16
   Compiling unreachable v0.1.1
   Compiling lazy_static v0.2.1
   Compiling debug_unreachable v0.1.1
   Compiling futf v0.1.2
   Compiling rand v0.3.14
   Compiling encoding v0.2.33
   Compiling phf_generator v0.7.16
   Compiling phf_codegen v0.7.16
   Compiling string_cache v0.2.27
   Compiling tendril v0.2.3
   Compiling html5ever v0.5.4 (file:///root/benchmarks/html5ever-2016-08-25)
time: 0.029; rss: 52MB	parsing
Lines of code:             8210
Pre-expansion node count:  52238
time: 0.003; rss: 53MB	configuration
time: 0.000; rss: 53MB	recursion limit
time: 0.000; rss: 53MB	crate injection
time: 0.000; rss: 53MB	plugin loading
time: 0.000; rss: 53MB	plugin registration
time: 1.447; rss: 100MB	expansion
time: 0.000; rss: 100MB	maybe building test harness
time: 0.002; rss: 100MB	maybe creating a macro crate
time: 0.009; rss: 101MB	assigning node ids
Post-expansion node count: 164262
time: 0.000; rss: 101MB	checking for inline asm in case the target doesn't support it
time: 0.003; rss: 101MB	complete gated feature checking
time: 0.005; rss: 102MB	collecting defs
time: 0.006; rss: 102MB	external crate/lib resolution
time: 0.009; rss: 102MB	early lint checks
time: 0.002; rss: 102MB	AST validation
time: 0.020; rss: 109MB	name resolution
time: 0.016; rss: 125MB	lowering ast -> hir
time: 0.004; rss: 127MB	indexing hir
time: 0.002; rss: 127MB	attribute checking
time: 0.002; rss: 109MB	language item collection
time: 0.003; rss: 109MB	lifetime resolution
time: 0.000; rss: 109MB	looking for entry point
time: 0.000; rss: 109MB	looking for plugin registrar
time: 0.016; rss: 115MB	region resolution
time: 0.002; rss: 115MB	loop checking
time: 0.003; rss: 115MB	static item recursion checking
time: 0.024; rss: 116MB	compute_incremental_hashes_map
time: 0.000; rss: 116MB	load_dep_graph
time: 0.014; rss: 117MB	type collecting
time: 0.000; rss: 117MB	variance inference
time: 0.027; rss: 121MB	coherence checking
time: 0.028; rss: 122MB	wf checking
time: 0.364; rss: 133MB	item-types checking
time: 0.594; rss: 143MB	item-bodies checking
time: 0.000; rss: 143MB	drop-impl checking
time: 0.079; rss: 145MB	const checking
time: 0.009; rss: 145MB	privacy checking
time: 0.002; rss: 145MB	stability index
time: 0.005; rss: 145MB	intrinsic checking
time: 0.003; rss: 145MB	effect checking
time: 0.028; rss: 145MB	match checking
time: 0.014; rss: 139MB	liveness checking
time: 0.032; rss: 139MB	rvalue checking
time: 0.123; rss: 182MB	MIR dump
  time: 0.009; rss: 182MB	SimplifyCfg
  time: 0.015; rss: 182MB	QualifyAndPromoteConstants
  time: 0.027; rss: 182MB	TypeckMir
  time: 0.000; rss: 182MB	SimplifyBranches
  time: 0.005; rss: 182MB	SimplifyCfg
time: 0.056; rss: 182MB	MIR passes
time: 0.097; rss: 187MB	borrow checking
time: 0.003; rss: 187MB	reachability checking
time: 0.007; rss: 187MB	death checking
time: 0.009; rss: 187MB	stability checking
time: 0.000; rss: 187MB	unused lib feature checking
time: 0.067; rss: 187MB	lint checking
time: 0.000; rss: 187MB	resolving dependency formats
  time: 0.000; rss: 187MB	NoLandingPads
  time: 0.004; rss: 187MB	SimplifyCfg
  time: 0.010; rss: 187MB	EraseRegions
  time: 0.001; rss: 187MB	AddCallGuards
  time: 0.082; rss: 192MB	ElaborateDrops
  time: 0.000; rss: 192MB	NoLandingPads
  time: 0.007; rss: 189MB	SimplifyCfg
  time: 0.001; rss: 189MB	Deaggregator
  time: 0.001; rss: 189MB	AddCallGuards
  time: 0.000; rss: 189MB	PreTrans
time: 0.106; rss: 189MB	Prepare MIR codegen passes
  time: 0.060; rss: 189MB	write metadata
  time: 0.044; rss: 192MB	translation item collection
  time: 0.005; rss: 192MB	codegen unit partitioning
  time: 0.010; rss: 209MB	internalize symbols
time: 0.413; rss: 183MB	translation
time: 0.000; rss: 183MB	assert dep graph
time: 0.000; rss: 183MB	serialize dep graph
  time: 0.023; rss: 114MB	llvm function passes [0]
  time: 0.013; rss: 115MB	llvm module passes [0]
  time: 0.540; rss: 117MB	codegen passes [0]
  time: 0.001; rss: 117MB	codegen passes [0]
time: 0.619; rss: 117MB	LLVM passes
time: 0.000; rss: 117MB	serialize work products
time: 0.060; rss: 97MB	linking
done
