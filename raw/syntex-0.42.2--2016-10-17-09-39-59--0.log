commit da7f8c540b47c5bb063356bf5ad05a6a49ed0ff1
Merge: 54c133d 8d5b523
Author: bors <bors@rust-lang.org>
Date:   Mon Oct 17 00:31:25 2016 -0700

    Auto merge of #37153 - michaelwoerister:spread-arg-debuginfo, r=eddyb
    
    debuginfo: Handle spread_arg case in MIR-trans in a more stable way.
    
    Use `VariableAccess::DirectVariable` instead of `VariableAccess::IndirectVariable` in order not to make LLVM's SROA angry. This is a step towards fixing #36774 and #35547. At least, I can build Cargo with optimizations + debuginfo again.
    
    r? @eddyb
rustc: ./syntex-0.42.2
cargo rustc -p syntex_syntax -- -Ztime-passes -Zinput-stats
   Compiling winapi v0.2.8
   Compiling log v0.3.6
   Compiling winapi-build v0.1.1
   Compiling unicode-xid v0.0.3
   Compiling bitflags v0.5.0
   Compiling rustc-serialize v0.3.19
   Compiling libc v0.2.15
   Compiling kernel32-sys v0.2.2
   Compiling term v0.4.4
   Compiling syntex_pos v0.42.0
   Compiling syntex_errors v0.42.0
   Compiling syntex_syntax v0.42.0
time: 0.108; rss: 75MB	parsing
Lines of code:             33687
Pre-expansion node count:  224033
time: 0.000; rss: 75MB	recursion limit
time: 0.000; rss: 75MB	crate injection
time: 0.000; rss: 75MB	plugin loading
time: 0.000; rss: 75MB	plugin registration
time: 0.273; rss: 148MB	expansion
time: 0.000; rss: 148MB	maybe building test harness
time: 0.006; rss: 148MB	maybe creating a macro crate
Post-expansion node count: 641571
time: 0.000; rss: 148MB	checking for inline asm in case the target doesn't support it
time: 0.013; rss: 148MB	complete gated feature checking
time: 0.023; rss: 148MB	early lint checks
time: 0.007; rss: 148MB	AST validation
time: 0.084; rss: 162MB	name resolution
time: 0.049; rss: 202MB	lowering ast -> hir
time: 0.009; rss: 213MB	indexing hir
time: 0.006; rss: 213MB	attribute checking
time: 0.005; rss: 164MB	language item collection
time: 0.011; rss: 164MB	lifetime resolution
time: 0.000; rss: 164MB	looking for entry point
time: 0.000; rss: 164MB	looking for plugin registrar
time: 0.043; rss: 174MB	region resolution
time: 0.006; rss: 174MB	loop checking
time: 0.006; rss: 174MB	static item recursion checking
time: 0.263; rss: 176MB	compute_incremental_hashes_map
time: 0.000; rss: 176MB	load_dep_graph
time: 0.043; rss: 181MB	type collecting
time: 0.001; rss: 181MB	variance inference
time: 0.037; rss: 184MB	coherence checking
time: 0.102; rss: 187MB	wf checking
time: 0.196; rss: 193MB	item-types checking
time: 3.900; rss: 244MB	item-bodies checking
time: 0.000; rss: 244MB	drop-impl checking
time: 0.256; rss: 248MB	const checking
time: 0.052; rss: 248MB	privacy checking
time: 0.007; rss: 248MB	stability index
time: 0.021; rss: 248MB	intrinsic checking
time: 0.018; rss: 248MB	effect checking
time: 0.056; rss: 248MB	match checking
time: 0.052; rss: 239MB	liveness checking
time: 0.222; rss: 239MB	rvalue checking
time: 0.404; rss: 430MB	MIR dump
  time: 0.066; rss: 431MB	SimplifyCfg
  time: 0.080; rss: 431MB	QualifyAndPromoteConstants
  time: 0.111; rss: 431MB	TypeckMir
  time: 0.004; rss: 431MB	SimplifyBranches
  time: 0.036; rss: 431MB	SimplifyCfg
time: 0.297; rss: 431MB	MIR passes
time: 0.570; rss: 431MB	borrow checking
time: 0.022; rss: 432MB	reachability checking
time: 0.044; rss: 432MB	death checking
time: 0.040; rss: 434MB	stability checking
time: 0.000; rss: 434MB	unused lib feature checking
time: 0.215; rss: 434MB	lint checking
time: 0.000; rss: 434MB	resolving dependency formats
  time: 0.003; rss: 434MB	NoLandingPads
  time: 0.030; rss: 434MB	SimplifyCfg
  time: 0.070; rss: 442MB	EraseRegions
  time: 0.010; rss: 442MB	AddCallGuards
  time: 0.296; rss: 461MB	ElaborateDrops
  time: 0.003; rss: 461MB	NoLandingPads
  time: 0.062; rss: 461MB	SimplifyCfg
  time: 0.029; rss: 461MB	InstCombine
  time: 0.011; rss: 461MB	Deaggregator
  time: 0.003; rss: 461MB	CopyPropagation
  time: 0.009; rss: 461MB	AddCallGuards
  time: 0.003; rss: 461MB	PreTrans
time: 0.529; rss: 461MB	Prepare MIR codegen passes
  time: 0.261; rss: 468MB	write metadata
  time: 0.451; rss: 478MB	translation item collection
  time: 0.063; rss: 485MB	codegen unit partitioning
  time: 0.053; rss: 730MB	internalize symbols
time: 5.230; rss: 609MB	translation
time: 0.000; rss: 609MB	assert dep graph
time: 0.000; rss: 609MB	serialize dep graph
  time: 0.512; rss: 412MB	llvm function passes [0]
  time: 0.241; rss: 419MB	llvm module passes [0]
  time: 9.972; rss: 413MB	codegen passes [0]
  time: 0.001; rss: 414MB	codegen passes [0]
time: 11.456; rss: 414MB	LLVM passes
time: 0.000; rss: 414MB	serialize work products
time: 0.661; rss: 107MB	linking
done
