commit 6572a463116a31efba8bfddb2e64ed659311b8a1
Merge: 6dc035e ee338c3
Author: bors <bors@rust-lang.org>
Date:   Sun Oct 16 04:22:21 2016 -0700

    Auto merge of #37129 - arielb1:erased-normal, r=eddyb
    
    normalize types every time HR regions are erased
    
    Associated type normalization is inhibited by higher-ranked regions.
    Therefore, every time we erase them, we must re-normalize.
    
    I was meaning to introduce this change some time ago, but we used
    to erase regions in generic context, which broke this terribly (because
    you can't always normalize in a generic context). That seems to be gone
    now.
    
    Ensure this by having a `erase_late_bound_regions_and_normalize`
    function.
    
    Fixes #37109 (the missing call was in mir::block).
    
    r? @eddyb
rustc: ./syntex-0.42.2
cargo rustc -p syntex_syntax -- -Ztime-passes -Zinput-stats
   Compiling syntex_syntax v0.42.0
time: 0.147; rss: 68MB	parsing
Lines of code:             33687
Pre-expansion node count:  224033
time: 0.000; rss: 68MB	recursion limit
time: 0.000; rss: 68MB	crate injection
time: 0.000; rss: 68MB	plugin loading
time: 0.000; rss: 68MB	plugin registration
time: 0.363; rss: 138MB	expansion
time: 0.000; rss: 138MB	maybe building test harness
time: 0.007; rss: 138MB	maybe creating a macro crate
Post-expansion node count: 641571
time: 0.000; rss: 138MB	checking for inline asm in case the target doesn't support it
time: 0.013; rss: 138MB	complete gated feature checking
time: 0.023; rss: 138MB	early lint checks
time: 0.008; rss: 138MB	AST validation
time: 0.115; rss: 154MB	name resolution
time: 0.123; rss: 194MB	lowering ast -> hir
time: 0.028; rss: 202MB	indexing hir
time: 0.007; rss: 202MB	attribute checking
time: 0.006; rss: 155MB	language item collection
time: 0.012; rss: 155MB	lifetime resolution
time: 0.000; rss: 155MB	looking for entry point
time: 0.000; rss: 155MB	looking for plugin registrar
time: 0.063; rss: 164MB	region resolution
time: 0.006; rss: 164MB	loop checking
time: 0.006; rss: 164MB	static item recursion checking
time: 0.265; rss: 166MB	compute_incremental_hashes_map
time: 0.000; rss: 166MB	load_dep_graph
time: 0.045; rss: 171MB	type collecting
time: 0.001; rss: 171MB	variance inference
time: 0.038; rss: 174MB	coherence checking
time: 0.108; rss: 176MB	wf checking
time: 0.207; rss: 182MB	item-types checking
time: 4.090; rss: 228MB	item-bodies checking
time: 0.000; rss: 228MB	drop-impl checking
time: 0.285; rss: 234MB	const checking
time: 0.057; rss: 234MB	privacy checking
time: 0.007; rss: 234MB	stability index
time: 0.023; rss: 234MB	intrinsic checking
time: 0.019; rss: 234MB	effect checking
time: 0.061; rss: 234MB	match checking
time: 0.090; rss: 225MB	liveness checking
time: 0.235; rss: 225MB	rvalue checking
time: 0.662; rss: 401MB	MIR dump
  time: 0.066; rss: 408MB	SimplifyCfg
  time: 0.085; rss: 408MB	QualifyAndPromoteConstants
  time: 0.114; rss: 408MB	TypeckMir
  time: 0.005; rss: 408MB	SimplifyBranches
  time: 0.034; rss: 408MB	SimplifyCfg
time: 0.304; rss: 408MB	MIR passes
time: 0.596; rss: 411MB	borrow checking
time: 0.023; rss: 411MB	reachability checking
time: 0.047; rss: 411MB	death checking
time: 0.049; rss: 414MB	stability checking
time: 0.000; rss: 414MB	unused lib feature checking
time: 0.221; rss: 414MB	lint checking
time: 0.000; rss: 414MB	resolving dependency formats
  time: 0.003; rss: 414MB	NoLandingPads
  time: 0.029; rss: 414MB	SimplifyCfg
  time: 0.089; rss: 420MB	EraseRegions
  time: 0.012; rss: 420MB	AddCallGuards
  time: 0.340; rss: 443MB	ElaborateDrops
  time: 0.004; rss: 443MB	NoLandingPads
  time: 0.061; rss: 443MB	SimplifyCfg
  time: 0.032; rss: 442MB	InstCombine
  time: 0.012; rss: 442MB	Deaggregator
  time: 0.003; rss: 442MB	CopyPropagation
  time: 0.009; rss: 442MB	AddCallGuards
  time: 0.003; rss: 442MB	PreTrans
time: 0.596; rss: 442MB	Prepare MIR codegen passes
  time: 0.282; rss: 448MB	write metadata
  time: 0.474; rss: 461MB	translation item collection
  time: 0.065; rss: 467MB	codegen unit partitioning
  time: 0.054; rss: 712MB	internalize symbols
time: 5.717; rss: 593MB	translation
time: 0.000; rss: 593MB	assert dep graph
time: 0.000; rss: 593MB	serialize dep graph
  time: 0.515; rss: 403MB	llvm function passes [0]
  time: 0.259; rss: 412MB	llvm module passes [0]
  time: 10.131; rss: 406MB	codegen passes [0]
  time: 0.001; rss: 406MB	codegen passes [0]
time: 11.822; rss: 406MB	LLVM passes
time: 0.000; rss: 406MB	serialize work products
time: 0.665; rss: 101MB	linking
done
