commit fe5c439f695fd72b7be0d0f28ee8397b3256630c
Merge: 6998018 3205c51
Author: bors <bors@rust-lang.org>
Date:   Thu Jul 14 06:37:30 2016 -0700

    Auto merge of #34783 - Dridi:cdylib_usage, r=alexcrichton
    
    Mention the crate type cdylib in rustc's usage
    
    Hello,
    
    I just tried to build a `cdylib` with the latest stable release, I've been passively waiting for this for quite some time now. Tested successfully on my machine, although it doesn't appear in `rustc`'s usage it seems to work like a charm so far. :grinning:
    
    Thanks!
rustc: ./rust-encoding.0.2.32
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling encoding v0.2.32 (file:///root/benchmarks/rust-encoding.0.2.32)
time: 0.025; rss: 90MB	parsing
Lines of code:             6441
Pre-expansion node count:  30069
time: 0.003; rss: 90MB	configuration
time: 0.000; rss: 90MB	recursion limit
time: 0.000; rss: 90MB	crate injection
time: 0.000; rss: 90MB	plugin loading
time: 0.000; rss: 90MB	plugin registration
time: 0.056; rss: 128MB	expansion
time: 0.000; rss: 128MB	maybe building test harness
time: 0.000; rss: 128MB	checking for inline asm in case the target doesn't support it
time: 0.001; rss: 128MB	complete gated feature checking
Post-expansion node count: 40757
time: 0.003; rss: 128MB	assigning node ids
time: 0.001; rss: 128MB	collecting defs
time: 0.001; rss: 129MB	external crate/lib resolution
time: 0.002; rss: 129MB	early lint checks
time: 0.000; rss: 129MB	AST validation
time: 0.005; rss: 129MB	name resolution
time: 0.004; rss: 131MB	lowering ast -> hir
time: 0.000; rss: 131MB	indexing hir
time: 0.000; rss: 131MB	attribute checking
time: 0.000; rss: 132MB	language item collection
time: 0.001; rss: 132MB	lifetime resolution
time: 0.000; rss: 132MB	looking for entry point
time: 0.000; rss: 132MB	looking for plugin registrar
time: 0.002; rss: 133MB	region resolution
time: 0.000; rss: 133MB	loop checking
time: 0.000; rss: 133MB	static item recursion checking
time: 0.000; rss: 133MB	load_dep_graph
time: 0.012; rss: 136MB	type collecting
time: 0.000; rss: 136MB	variance inference
time: 0.021; rss: 140MB	coherence checking
time: 0.025; rss: 140MB	wf checking
time: 0.016; rss: 140MB	item-types checking
time: 0.226; rss: 149MB	item-bodies checking
time: 0.000; rss: 149MB	drop-impl checking
time: 0.013; rss: 149MB	const checking
time: 0.002; rss: 149MB	privacy checking
time: 0.000; rss: 149MB	stability index
time: 0.002; rss: 149MB	intrinsic checking
time: 0.000; rss: 149MB	effect checking
time: 0.008; rss: 149MB	match checking
time: 0.002; rss: 149MB	liveness checking
time: 0.008; rss: 149MB	rvalue checking
time: 0.025; rss: 155MB	MIR dump
time: 0.016; rss: 155MB	MIR passes
time: 0.024; rss: 155MB	borrow checking
time: 0.000; rss: 155MB	reachability checking
time: 0.002; rss: 155MB	death checking
time: 0.002; rss: 155MB	stability checking
time: 0.000; rss: 155MB	unused lib feature checking
time: 0.025; rss: 158MB	lint checking
time: 0.000; rss: 158MB	resolving dependency formats
time: 0.027; rss: 158MB	Prepare MIR codegen passes
  time: 0.059; rss: 162MB	write metadata
  time: 0.033; rss: 164MB	translation item collection
  time: 0.003; rss: 165MB	codegen unit partitioning
time: 0.924; rss: 192MB	translation
time: 0.000; rss: 192MB	assert dep graph
time: 0.000; rss: 192MB	serialize dep graph
  time: 0.331; rss: 156MB	llvm function passes [0]
  time: 0.630; rss: 160MB	llvm module passes [0]
  time: 5.861; rss: 163MB	codegen passes [0]
  time: 0.002; rss: 163MB	codegen passes [0]
time: 7.219; rss: 163MB	LLVM passes
time: 0.054; rss: 146MB	linking
done
