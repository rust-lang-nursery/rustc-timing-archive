commit e5ed0a5d78be74238af31631e7ecf311eb661586
Merge: 7c535c6 36f2af1
Author: bors <bors@rust-lang.org>
Date:   Sat Nov 19 23:39:25 2016 -0600

    Auto merge of #37842 - nikomatsakis:incremental-test, r=mw
    
    Add tests for incremental reuse scenarios
    
    These are microbenchmarks checking that we achieve the expected reuse in the scenarios covered by incremental beta.
    
    r? @michaelwoerister
rustc: ./syntex-0.42.2-incr-clean
RUSTFLAGS="-Z incremental=incr" \
    cargo rustc -p syntex_syntax  -- \
    -Ztime-passes -Zinput-stats -Z incremental-info
   Compiling syntex_syntax v0.42.0
time: 0.132; rss: 65MB	parsing
Lines of code:             33687
Pre-expansion node count:  223115
time: 0.000; rss: 65MB	recursion limit
time: 0.000; rss: 65MB	crate injection
time: 0.000; rss: 65MB	plugin loading
time: 0.000; rss: 65MB	plugin registration
time: 0.322; rss: 137MB	expansion
time: 0.000; rss: 137MB	maybe building test harness
time: 0.006; rss: 137MB	maybe creating a macro crate
Post-expansion node count: 638863
time: 0.000; rss: 137MB	checking for inline asm in case the target doesn't support it
time: 0.014; rss: 137MB	complete gated feature checking
time: 0.024; rss: 137MB	early lint checks
time: 0.007; rss: 137MB	AST validation
time: 0.105; rss: 153MB	name resolution
time: 0.088; rss: 177MB	lowering ast -> hir
time: 0.020; rss: 185MB	indexing hir
time: 0.006; rss: 185MB	attribute checking
time: 0.005; rss: 143MB	language item collection
time: 0.011; rss: 143MB	lifetime resolution
time: 0.000; rss: 143MB	looking for entry point
time: 0.000; rss: 143MB	looking for plugin registrar
time: 0.078; rss: 163MB	region resolution
time: 0.005; rss: 163MB	loop checking
time: 0.005; rss: 163MB	static item recursion checking
time: 0.333; rss: 164MB	compute_incremental_hashes_map
time: 0.000; rss: 164MB	load_dep_graph
time: 0.050; rss: 162MB	type collecting
time: 0.001; rss: 162MB	variance inference
time: 0.002; rss: 163MB	impl wf inference
time: 0.018; rss: 166MB	coherence checking
time: 0.091; rss: 168MB	wf checking
time: 0.182; rss: 173MB	item-types checking
time: 6.481; rss: 217MB	item-bodies checking
time: 0.000; rss: 217MB	drop-impl checking
time: 0.281; rss: 239MB	const checking
time: 0.050; rss: 239MB	privacy checking
time: 0.006; rss: 239MB	stability index
time: 0.018; rss: 239MB	intrinsic checking
time: 0.015; rss: 239MB	effect checking
time: 0.046; rss: 239MB	match checking
time: 0.068; rss: 225MB	liveness checking
time: 0.188; rss: 225MB	rvalue checking
time: 0.586; rss: 406MB	MIR dump
  time: 0.060; rss: 412MB	SimplifyCfg
  time: 0.075; rss: 412MB	QualifyAndPromoteConstants
  time: 0.108; rss: 412MB	TypeckMir
  time: 0.004; rss: 412MB	SimplifyBranches
  time: 0.031; rss: 412MB	SimplifyCfg
time: 0.279; rss: 412MB	MIR cleanup and validation
time: 0.567; rss: 416MB	borrow checking
time: 0.020; rss: 416MB	reachability checking
time: 0.041; rss: 416MB	death checking
time: 0.036; rss: 419MB	stability checking
time: 0.000; rss: 419MB	unused lib feature checking
time: 0.206; rss: 419MB	lint checking
time: 0.000; rss: 419MB	resolving dependency formats
  time: 0.003; rss: 419MB	NoLandingPads
  time: 0.027; rss: 419MB	SimplifyCfg
  time: 0.078; rss: 425MB	EraseRegions
  time: 0.012; rss: 425MB	AddCallGuards
  time: 0.303; rss: 444MB	ElaborateDrops
  time: 0.003; rss: 444MB	NoLandingPads
  time: 0.053; rss: 445MB	SimplifyCfg
  time: 0.030; rss: 445MB	InstCombine
  time: 0.013; rss: 445MB	Deaggregator
  time: 0.003; rss: 445MB	CopyPropagation
  time: 0.036; rss: 445MB	SimplifyLocals
  time: 0.010; rss: 445MB	AddCallGuards
  time: 0.003; rss: 445MB	PreTrans
time: 0.572; rss: 445MB	MIR optimisations
  time: 0.081; rss: 453MB	write metadata
  time: 0.423; rss: 467MB	translation item collection
  time: 0.070; rss: 472MB	codegen unit partitioning
  time: 0.048; rss: 719MB	internalize symbols
time: 5.036; rss: 719MB	translation
time: 0.000; rss: 719MB	assert dep graph
time: 0.000; rss: 719MB	serialize dep graph
incremental: re-using 0 out of 1 modules
  time: 0.531; rss: 410MB	llvm function passes [0]
  time: 0.262; rss: 419MB	llvm module passes [0]
  time: 10.374; rss: 418MB	codegen passes [0]
  time: 0.000; rss: 418MB	codegen passes [0]
time: 12.051; rss: 418MB	LLVM passes
time: 0.000; rss: 418MB	serialize work products
time: 0.347; rss: 100MB	linking
done
