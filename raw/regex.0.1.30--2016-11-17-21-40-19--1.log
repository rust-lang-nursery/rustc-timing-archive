commit 35e8924dc5d5cc248f33767ff35f7aeb797a71ec
Merge: c356537 c938007
Author: bors <bors@rust-lang.org>
Date:   Thu Nov 17 17:31:01 2016 -0800

    Auto merge of #37660 - nikomatsakis:incremental-36349, r=eddyb
    
    Separate impl items from the parent impl
    
    This change separates impl item bodies out of the impl itself. This gives incremental more resolution. In so doing, it refactors how the visitors work, and cleans up a bit of the collect/check logic (mostly by moving things out of collect that didn't really belong there, because they were just checking conditions).
    
    However, this is not as effective as I expected, for a kind of frustrating reason. In particular, when invoking `foo.bar()` you still wind up with dependencies on private items. The problem is that the method resolution code scans that list for methods with the name `bar` -- and this winds up touching *all* the methods, even private ones.
    
    I can imagine two obvious ways to fix this:
    
    - separating fn bodies from fn sigs (#35078, currently being pursued by @flodiebold)
    - a more aggressive model of incremental that @michaelwoerister has been advocating, in which we hash the intermediate results (e.g., the outputs of collect) so that we can see that the intermediate result hasn't changed, even if a particular impl item has changed.
    
    So all in all I'm not quite sure whether to land this or not. =) It still seems like it has to be a win in some cases, but not with the test cases we have just now. I can try to gin up some test cases, but I'm not sure if they will be totally realistic. On the other hand, some of the early refactorings to the visitor trait seem worthwhile to me regardless.
    
    cc #36349 -- well, this is basically a fix for that issue, I guess
    
    r? @michaelwoerister
    
    NB: Based atop of @eddyb's PR https://github.com/rust-lang/rust/pull/37402; don't land until that lands.
rustc: ./regex.0.1.30
cargo rustc  -- -Ztime-passes -Zinput-stats
   Compiling regex v0.1.30 (file:///root/benchmarks/regex.0.1.30)
time: 0.042; rss: 53MB	parsing
Lines of code:             8558
Pre-expansion node count:  58049
time: 0.000; rss: 54MB	recursion limit
time: 0.000; rss: 54MB	crate injection
time: 0.000; rss: 54MB	plugin loading
time: 0.000; rss: 54MB	plugin registration
time: 0.028; rss: 78MB	expansion
time: 0.000; rss: 78MB	maybe building test harness
time: 0.001; rss: 78MB	maybe creating a macro crate
Post-expansion node count: 68093
time: 0.000; rss: 78MB	checking for inline asm in case the target doesn't support it
time: 0.001; rss: 78MB	complete gated feature checking
time: 0.003; rss: 78MB	early lint checks
time: 0.000; rss: 78MB	AST validation
time: 0.005; rss: 78MB	name resolution
time: 0.005; rss: 85MB	lowering ast -> hir
time: 0.001; rss: 87MB	indexing hir
time: 0.001; rss: 87MB	attribute checking
time: 0.001; rss: 79MB	language item collection
time: 0.001; rss: 79MB	lifetime resolution
time: 0.000; rss: 79MB	looking for entry point
time: 0.000; rss: 79MB	looking for plugin registrar
time: 0.004; rss: 82MB	region resolution
time: 0.000; rss: 82MB	loop checking
time: 0.001; rss: 82MB	static item recursion checking
time: 0.019; rss: 83MB	compute_incremental_hashes_map
time: 0.000; rss: 83MB	load_dep_graph
time: 0.006; rss: 83MB	type collecting
time: 0.000; rss: 83MB	variance inference
time: 0.000; rss: 83MB	impl wf inference
time: 0.009; rss: 86MB	coherence checking
time: 0.006; rss: 86MB	wf checking
time: 0.150; rss: 98MB	item-types checking
time: 0.114; rss: 99MB	item-bodies checking
time: 0.000; rss: 99MB	drop-impl checking
time: 0.021; rss: 102MB	const checking
time: 0.002; rss: 102MB	privacy checking
time: 0.000; rss: 102MB	stability index
time: 0.001; rss: 102MB	intrinsic checking
time: 0.000; rss: 102MB	effect checking
time: 0.002; rss: 102MB	match checking
time: 0.002; rss: 102MB	liveness checking
time: 0.006; rss: 102MB	rvalue checking
time: 0.036; rss: 113MB	MIR dump
  time: 0.002; rss: 113MB	SimplifyCfg
  time: 0.005; rss: 113MB	QualifyAndPromoteConstants
  time: 0.008; rss: 113MB	TypeckMir
  time: 0.000; rss: 113MB	SimplifyBranches
  time: 0.001; rss: 113MB	SimplifyCfg
time: 0.016; rss: 113MB	MIR cleanup and validation
time: 0.018; rss: 113MB	borrow checking
time: 0.000; rss: 113MB	reachability checking
time: 0.002; rss: 113MB	death checking
time: 0.001; rss: 113MB	stability checking
time: 0.000; rss: 113MB	unused lib feature checking
time: 0.022; rss: 113MB	lint checking
time: 0.000; rss: 113MB	resolving dependency formats
  time: 0.000; rss: 113MB	NoLandingPads
  time: 0.001; rss: 113MB	SimplifyCfg
  time: 0.003; rss: 113MB	EraseRegions
  time: 0.000; rss: 113MB	AddCallGuards
  time: 0.007; rss: 115MB	ElaborateDrops
  time: 0.000; rss: 115MB	NoLandingPads
  time: 0.002; rss: 115MB	SimplifyCfg
  time: 0.002; rss: 115MB	InstCombine
  time: 0.000; rss: 115MB	Deaggregator
  time: 0.000; rss: 115MB	CopyPropagation
  time: 0.002; rss: 115MB	SimplifyLocals
  time: 0.000; rss: 115MB	AddCallGuards
  time: 0.000; rss: 115MB	PreTrans
time: 0.019; rss: 115MB	MIR optimisations
  time: 0.019; rss: 119MB	write metadata
  time: 0.044; rss: 123MB	translation item collection
  time: 0.006; rss: 123MB	codegen unit partitioning
  time: 0.006; rss: 150MB	internalize symbols
time: 0.406; rss: 150MB	translation
time: 0.000; rss: 150MB	assert dep graph
time: 0.000; rss: 150MB	serialize dep graph
  time: 0.037; rss: 108MB	llvm function passes [0]
  time: 0.019; rss: 110MB	llvm module passes [0]
  time: 0.701; rss: 112MB	codegen passes [0]
  time: 0.000; rss: 112MB	codegen passes [0]
time: 0.815; rss: 112MB	LLVM passes
time: 0.000; rss: 112MB	serialize work products
time: 0.052; rss: 84MB	linking
done
