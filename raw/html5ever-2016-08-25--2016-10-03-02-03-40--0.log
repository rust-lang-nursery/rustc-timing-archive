commit 144af3e97aa30feba3d36a98ac04c0f1b2bc0bea
Merge: 1cdc0fb 4d76ac8
Author: bors <bors@rust-lang.org>
Date:   Sun Oct 2 17:33:34 2016 -0700

    Auto merge of #36807 - brson:pal, r=brson
    
    Restrict where in the tree platform-specific cfgs may be mentioned
    
    With the ports of Rust never ending, it's important that we keep things tidy. The main thing this PR does is introduce  a new "pal" (platform abstraction layer) tidy check that limits where platform-specific CFGs may appear.
    
    This is intended to maintain existing standards of code organization
    in hopes that the standard library will continue to be refactored to
    isolate platform-specific bits, making porting easier; where "standard
    library" roughly means "all the dependencies of the std and test
    crates".
    
    This generally means placing restrictions on where `cfg(unix)`,
    `cfg(windows)`, `cfg(target_os)` and `cfg(target_env)` may appear,
    the basic objective being to isolate platform-specific code to the
    platform-specific `std::sys` modules, and to the allocation,
    unwinding, and libc crates.
    
    Following are the basic rules, though there are currently
    exceptions:
    
    - core may not have platform-specific code
    - liballoc_system may have platform-specific code
    - liballoc_jemalloc may have platform-specific code
    - libpanic_abort may have platform-specific code
    - libpanic_unwind may have platform-specific code
    - other crates in the std facade may not
    - std may have platform-specific code in the following places
      - sys/unix/
      - sys/windows/
      - os/
    
    There are plenty of exceptions today though, noted in the whitelist.
    
    The end-state, IMO, is for the standard library to be portable by porting only `std::sys` (possibly extracted to its own crate), an allocator crate, an unwinder crate, and possibly a libc crate (if std depends on it); but that outcome is far off and independent of the utility of enforcing where such code lives today.
    
    cc @rust-lang/libs
rustc: ./html5ever-2016-08-25
cargo rustc -- -Ztime-passes -Zinput-stats
    Updating registry `https://github.com/rust-lang/crates.io-index`
   Compiling encoding_index_tests v0.1.4
   Compiling matches v0.1.2
   Compiling lazy_static v0.2.1
   Compiling rustc-serialize v0.3.19
   Compiling void v1.0.2
   Compiling log v0.3.6
   Compiling mac v0.0.2
   Compiling phf_shared v0.7.16
   Compiling encoding-index-singlebyte v1.20141219.5
   Compiling encoding-index-simpchinese v1.20141219.5
   Compiling utf-8 v0.6.0
   Compiling unreachable v0.1.1
   Compiling encoding-index-japanese v1.20141219.5
   Compiling encoding-index-tradchinese v1.20141219.5
   Compiling libc v0.2.16
   Compiling debug_unreachable v0.1.1
   Compiling encoding-index-korean v1.20141219.5
   Compiling futf v0.1.2
   Compiling phf v0.7.16
   Compiling serde v0.8.10
   Compiling rand v0.3.14
   Compiling encoding v0.2.33
   Compiling phf_generator v0.7.16
   Compiling tendril v0.2.3
   Compiling phf_codegen v0.7.16
   Compiling string_cache v0.2.29
   Compiling html5ever v0.5.4 (file:///root/benchmarks/html5ever-2016-08-25)
time: 0.045; rss: 49MB	parsing
Lines of code:             8210
Pre-expansion node count:  52238
time: 0.000; rss: 49MB	recursion limit
time: 0.000; rss: 49MB	crate injection
time: 0.000; rss: 49MB	plugin loading
time: 0.000; rss: 49MB	plugin registration
time: 1.352; rss: 100MB	expansion
time: 0.000; rss: 100MB	maybe building test harness
time: 0.002; rss: 100MB	maybe creating a macro crate
Post-expansion node count: 163524
time: 0.000; rss: 100MB	checking for inline asm in case the target doesn't support it
time: 0.003; rss: 100MB	complete gated feature checking
time: 0.009; rss: 100MB	early lint checks
time: 0.002; rss: 100MB	AST validation
time: 0.019; rss: 104MB	name resolution
time: 0.028; rss: 120MB	lowering ast -> hir
time: 0.008; rss: 123MB	indexing hir
time: 0.002; rss: 123MB	attribute checking
time: 0.002; rss: 102MB	language item collection
time: 0.003; rss: 102MB	lifetime resolution
time: 0.000; rss: 102MB	looking for entry point
time: 0.000; rss: 102MB	looking for plugin registrar
time: 0.018; rss: 107MB	region resolution
time: 0.002; rss: 107MB	loop checking
time: 0.003; rss: 107MB	static item recursion checking
time: 0.024; rss: 108MB	compute_incremental_hashes_map
time: 0.000; rss: 108MB	load_dep_graph
time: 0.014; rss: 110MB	type collecting
time: 0.000; rss: 110MB	variance inference
time: 0.026; rss: 113MB	coherence checking
time: 0.024; rss: 114MB	wf checking
time: 0.444; rss: 116MB	item-types checking
time: 0.511; rss: 131MB	item-bodies checking
time: 0.000; rss: 131MB	drop-impl checking
time: 0.075; rss: 134MB	const checking
time: 0.009; rss: 134MB	privacy checking
time: 0.002; rss: 134MB	stability index
time: 0.004; rss: 134MB	intrinsic checking
time: 0.003; rss: 134MB	effect checking
time: 0.025; rss: 134MB	match checking
time: 0.040; rss: 129MB	liveness checking
time: 0.032; rss: 129MB	rvalue checking
time: 0.142; rss: 176MB	MIR dump
  time: 0.009; rss: 175MB	SimplifyCfg
  time: 0.016; rss: 175MB	QualifyAndPromoteConstants
  time: 0.024; rss: 175MB	TypeckMir
  time: 0.000; rss: 175MB	SimplifyBranches
  time: 0.005; rss: 175MB	SimplifyCfg
time: 0.055; rss: 175MB	MIR passes
time: 0.097; rss: 177MB	borrow checking
time: 0.003; rss: 177MB	reachability checking
time: 0.008; rss: 177MB	death checking
time: 0.009; rss: 177MB	stability checking
time: 0.000; rss: 177MB	unused lib feature checking
time: 0.067; rss: 177MB	lint checking
time: 0.000; rss: 177MB	resolving dependency formats
  time: 0.000; rss: 177MB	NoLandingPads
  time: 0.004; rss: 177MB	SimplifyCfg
  time: 0.010; rss: 177MB	EraseRegions
  time: 0.001; rss: 177MB	AddCallGuards
  time: 0.078; rss: 183MB	ElaborateDrops
  time: 0.000; rss: 183MB	NoLandingPads
  time: 0.007; rss: 179MB	SimplifyCfg
  time: 0.008; rss: 179MB	InstCombine
  time: 0.001; rss: 179MB	Deaggregator
  time: 0.000; rss: 179MB	CopyPropagation
  time: 0.001; rss: 179MB	AddCallGuards
  time: 0.000; rss: 179MB	PreTrans
time: 0.110; rss: 179MB	Prepare MIR codegen passes
  time: 0.053; rss: 180MB	write metadata
  time: 0.053; rss: 182MB	translation item collection
  time: 0.006; rss: 182MB	codegen unit partitioning
  time: 0.006; rss: 196MB	internalize symbols
time: 0.384; rss: 167MB	translation
time: 0.000; rss: 167MB	assert dep graph
time: 0.000; rss: 167MB	serialize dep graph
  time: 0.021; rss: 102MB	llvm function passes [0]
  time: 0.013; rss: 103MB	llvm module passes [0]
  time: 0.472; rss: 108MB	codegen passes [0]
  time: 0.001; rss: 108MB	codegen passes [0]
time: 0.545; rss: 108MB	LLVM passes
time: 0.000; rss: 108MB	serialize work products
time: 0.058; rss: 91MB	linking
done
