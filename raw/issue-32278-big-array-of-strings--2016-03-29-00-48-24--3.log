commit a11129701c873d96fe0816e4c8b55510efebe96e
Merge: cad964a 221d0fb
Author: bors <bors@rust-lang.org>
Date:   Mon Mar 28 20:50:42 2016 -0700

    Auto merge of #32479 - eddyb:eof-not-even-twice, r=nikomatsakis
    
    Prevent bumping the parser past the EOF.
    
    Makes `Parser::bump` after EOF into an ICE, forcing callers to avoid repeated EOF bumps.
    This ICE is intended to break infinite loops where EOF wasn't stopping the loop.
    
    For example, the handling of EOF in `parse_trait_items`' recovery loop fixes #32446.
    But even without this specific fix, the ICE is triggered, which helps diagnosis and UX.
    
    This is a `[breaking-change]` for plugins authors who eagerly eat multiple EOFs.
    See https://github.com/docopt/docopt.rs/pull/171 for such an example and the necessary fix.
rustc: ./issue-32278-big-array-of-strings
/root/rust/x86_64-unknown-linux-gnu/stage2/bin/rustc big-array-of-strings.rs -Ztime-passes -Zinput-stats
time: 0.149; rss: 58MB	parsing
Lines of code:             65577
Pre-expansion node count:  65552
time: 0.012; rss: 58MB	configuration 1
time: 0.000; rss: 58MB	recursion limit
time: 0.001; rss: 58MB	gated macro checking
time: 0.000; rss: 58MB	crate injection
time: 0.004; rss: 61MB	macro loading
time: 0.000; rss: 61MB	plugin loading
time: 0.000; rss: 61MB	plugin registration
time: 0.045; rss: 67MB	expansion
time: 0.001; rss: 67MB	complete gated feature checking 1
time: 0.011; rss: 67MB	configuration 2
time: 0.000; rss: 67MB	gated configuration checking
time: 0.006; rss: 67MB	maybe building test harness
time: 0.005; rss: 67MB	prelude injection
time: 0.000; rss: 67MB	checking that all macro invocations are gone
time: 0.000; rss: 67MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 67MB	complete gated feature checking 2
time: 0.001; rss: 67MB	const fn bodies and arguments
Post-expansion node count: 65565
time: 0.006; rss: 67MB	assigning node ids
time: 0.011; rss: 80MB	lowering ast -> hir
time: 0.003; rss: 83MB	indexing hir
time: 0.001; rss: 83MB	attribute checking
time: 0.010; rss: 83MB	early lint checks
time: 0.001; rss: 69MB	external crate/lib resolution
time: 0.001; rss: 69MB	language item collection
time: 0.003; rss: 73MB	resolution
time: 0.001; rss: 73MB	lifetime resolution
time: 0.000; rss: 73MB	looking for entry point
time: 0.000; rss: 73MB	looking for plugin registrar
time: 0.009; rss: 79MB	region resolution
time: 0.001; rss: 79MB	loop checking
time: 0.002; rss: 79MB	static item recursion checking
time: 0.000; rss: 79MB	type collecting
time: 0.000; rss: 79MB	variance inference
time: 0.006; rss: 86MB	coherence checking
time: 0.001; rss: 89MB	wf checking
time: 0.805; rss: 194MB	item-types checking
time: 0.000; rss: 194MB	item-bodies checking
time: 0.000; rss: 194MB	drop-impl checking
time: 0.019; rss: 193MB	const checking
time: 0.003; rss: 193MB	privacy checking
time: 0.000; rss: 193MB	stability index
time: 0.000; rss: 193MB	intrinsic checking
time: 0.000; rss: 193MB	effect checking
time: 0.000; rss: 193MB	match checking
time: 0.001; rss: 193MB	liveness checking
time: 0.000; rss: 193MB	rvalue checking
time: 0.001; rss: 193MB	MIR dump
time: 0.000; rss: 193MB	MIR passes
time: 0.001; rss: 193MB	borrow checking
time: 0.000; rss: 193MB	reachability checking
time: 0.001; rss: 193MB	death checking
time: 0.001; rss: 193MB	stability checking
time: 0.000; rss: 193MB	unused lib feature checking
time: 0.030; rss: 193MB	lint checking
time: 0.001; rss: 193MB	resolving dependency formats
  time: 0.001; rss: 202MB	translation item collection
  time: 0.000; rss: 208MB	write metadata
time: 0.085; rss: 208MB	translation
  time: 0.003; rss: 84MB	llvm function passes [0]
  time: 0.000; rss: 84MB	llvm module passes [0]
  time: 0.162; rss: 87MB	codegen passes [0]
  time: 0.000; rss: 74MB	codegen passes [0]
time: 0.177; rss: 74MB	LLVM passes
  time: 0.181; rss: 74MB	running linker
time: 0.182; rss: 74MB	linking
done
