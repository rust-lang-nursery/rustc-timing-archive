commit 08839965f96ea9947afe936f13a66a0f4f93db73
Merge: e96b9d2 d73c68c
Author: bors <bors@rust-lang.org>
Date:   Sat Nov 5 01:10:57 2016 -0700

    Auto merge of #37427 - nnethercote:opt-IchHasher, r=michaelwoerister
    
    Reduce the number of bytes hashed by IchHasher.
    
    IchHasher uses blake2b hashing, which is expensive, so the fewer bytes hashed
    the better. There are two big ways to reduce the number of bytes hashed.
    - Filenames in spans account for ~66% of all bytes (for builds with debuginfo).
      The vast majority of spans have the same filename for the start of the span
      and the end of the span, so hashing the filename just once in those cases is
      a big win.
    - u32 and u64 and usize values account for ~25%--33% of all bytes (for builds
      with debuginfo). The vast majority of these are small, i.e. fit in a u8, so
      shrinking them down before hashing is also a big win.
    
    This PR implements these two optimizations. I'm certain the first one is safe.
    I'm about 90% sure that the second one is safe.
    
    Here are measurements of the number of bytes hashed when doing
    debuginfo-enabled builds of stdlib and
    rustc-benchmarks/syntex-0.42.2-incr-clean.
    
    ```
                        stdlib   syntex-incr
                        ------   -----------
    original       156,781,386   255,095,596
    half-SawSpan   106,744,403   176,345,419
    short-ints      45,890,534   118,014,227
    no-SawSpan[*]    6,831,874    45,875,714
    
    [*] don't hash the SawSpan at all. Not part of this PR, just implemented for
        comparison's sake.
    ```
    
    For debug builds of syntex-0.42.2-incr-clean, the two changes give a 1--2%
    speed-up.
rustc: ./html5ever-2016-08-25
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling log v0.3.6
   Compiling encoding_index_tests v0.1.4
   Compiling libc v0.2.16
   Compiling phf_shared v0.7.16
   Compiling serde v0.8.9
   Compiling void v1.0.2
   Compiling mac v0.0.2
   Compiling rustc-serialize v0.3.19
   Compiling encoding-index-korean v1.20141219.5
   Compiling encoding-index-japanese v1.20141219.5
   Compiling encoding-index-simpchinese v1.20141219.5
   Compiling encoding-index-tradchinese v1.20141219.5
   Compiling unreachable v0.1.1
   Compiling debug_unreachable v0.1.1
   Compiling futf v0.1.2
   Compiling lazy_static v0.2.1
   Compiling rand v0.3.14
   Compiling encoding-index-singlebyte v1.20141219.5
   Compiling matches v0.1.2
   Compiling phf v0.7.16
   Compiling utf-8 v0.6.0
   Compiling encoding v0.2.33
   Compiling phf_generator v0.7.16
   Compiling string_cache v0.2.29
   Compiling phf_codegen v0.7.16
   Compiling tendril v0.2.3
   Compiling html5ever v0.5.4 (file:///root/benchmarks/html5ever-2016-08-25)
time: 0.028; rss: 52MB	parsing
Lines of code:             8210
Pre-expansion node count:  52238
time: 0.000; rss: 52MB	recursion limit
time: 0.000; rss: 52MB	crate injection
time: 0.000; rss: 52MB	plugin loading
time: 0.000; rss: 52MB	plugin registration
time: 0.483; rss: 107MB	expansion
time: 0.000; rss: 107MB	maybe building test harness
time: 0.002; rss: 107MB	maybe creating a macro crate
Post-expansion node count: 163524
time: 0.000; rss: 107MB	checking for inline asm in case the target doesn't support it
time: 0.003; rss: 107MB	complete gated feature checking
time: 0.009; rss: 107MB	early lint checks
time: 0.002; rss: 107MB	AST validation
time: 0.018; rss: 112MB	name resolution
time: 0.014; rss: 119MB	lowering ast -> hir
time: 0.003; rss: 123MB	indexing hir
time: 0.002; rss: 123MB	attribute checking
time: 0.001; rss: 99MB	language item collection
time: 0.002; rss: 99MB	lifetime resolution
time: 0.000; rss: 99MB	looking for entry point
time: 0.000; rss: 99MB	looking for plugin registrar
time: 0.016; rss: 107MB	region resolution
time: 0.001; rss: 107MB	loop checking
time: 0.001; rss: 107MB	static item recursion checking
time: 0.020; rss: 107MB	compute_incremental_hashes_map
time: 0.000; rss: 107MB	load_dep_graph
time: 0.009; rss: 110MB	type collecting
time: 0.000; rss: 110MB	variance inference
time: 0.022; rss: 113MB	coherence checking
time: 0.022; rss: 113MB	wf checking
time: 0.323; rss: 120MB	item-types checking
time: 0.471; rss: 133MB	item-bodies checking
time: 0.000; rss: 133MB	drop-impl checking
time: 0.068; rss: 136MB	const checking
time: 0.006; rss: 136MB	privacy checking
time: 0.001; rss: 136MB	stability index
time: 0.003; rss: 136MB	intrinsic checking
time: 0.003; rss: 136MB	effect checking
time: 0.015; rss: 137MB	match checking
time: 0.012; rss: 132MB	liveness checking
time: 0.025; rss: 132MB	rvalue checking
time: 0.117; rss: 182MB	MIR dump
  time: 0.008; rss: 170MB	SimplifyCfg
  time: 0.014; rss: 172MB	QualifyAndPromoteConstants
  time: 0.023; rss: 172MB	TypeckMir
  time: 0.000; rss: 172MB	SimplifyBranches
  time: 0.004; rss: 172MB	SimplifyCfg
time: 0.050; rss: 172MB	MIR cleanup and validation
time: 0.087; rss: 181MB	borrow checking
time: 0.003; rss: 181MB	reachability checking
time: 0.006; rss: 181MB	death checking
time: 0.008; rss: 181MB	stability checking
time: 0.000; rss: 181MB	unused lib feature checking
time: 0.060; rss: 181MB	lint checking
time: 0.000; rss: 181MB	resolving dependency formats
  time: 0.000; rss: 181MB	NoLandingPads
  time: 0.004; rss: 181MB	SimplifyCfg
  time: 0.009; rss: 181MB	EraseRegions
  time: 0.001; rss: 181MB	AddCallGuards
  time: 0.076; rss: 185MB	ElaborateDrops
  time: 0.000; rss: 185MB	NoLandingPads
  time: 0.006; rss: 183MB	SimplifyCfg
  time: 0.008; rss: 181MB	InstCombine
  time: 0.001; rss: 181MB	Deaggregator
  time: 0.000; rss: 181MB	CopyPropagation
  time: 0.007; rss: 178MB	SimplifyLocals
  time: 0.001; rss: 178MB	AddCallGuards
  time: 0.000; rss: 178MB	PreTrans
time: 0.115; rss: 178MB	MIR optimisations
  time: 0.011; rss: 179MB	write metadata
  time: 0.045; rss: 181MB	translation item collection
  time: 0.005; rss: 181MB	codegen unit partitioning
  time: 0.005; rss: 196MB	internalize symbols
time: 0.296; rss: 196MB	translation
time: 0.000; rss: 196MB	assert dep graph
time: 0.000; rss: 196MB	serialize dep graph
  time: 0.021; rss: 105MB	llvm function passes [0]
  time: 0.012; rss: 106MB	llvm module passes [0]
  time: 0.469; rss: 110MB	codegen passes [0]
  time: 0.000; rss: 110MB	codegen passes [0]
time: 0.542; rss: 110MB	LLVM passes
time: 0.000; rss: 110MB	serialize work products
time: 0.024; rss: 93MB	linking
done
