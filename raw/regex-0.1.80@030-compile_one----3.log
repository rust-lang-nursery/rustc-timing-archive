commit 6c9bb42ecc48ffb5a3c8b61e220b11adc3a46384
Merge: 7f2d2af a8535ce
Author: bors <bors@rust-lang.org>
Date:   Fri Dec 30 18:24:27 2016 +0000

    Auto merge of #38658 - alexcrichton:less-docs, r=nikomatsakis
    
    std: Don't build docs for misc facade crates
    
    Retain the same behavior as stable.
    
    Closes #38319
rustc 1.15.0-nightly (daf8c1dfc 2016-12-05)
-rwxr-xr-x 1 root root 9432 Dec  6 15:39 /usr/local/bin/rustc
rustc: ./regex-0.1.80@030-compile_one
git apply 030-compile_one.diff
find . -name "*.rs" | xargs touch
git diff
diff --git a/process.sh b/process.sh
index 4d62e73..a8f0ca6 100755
--- a/process.sh
+++ b/process.sh
@@ -9,7 +9,6 @@ source "$MYDIR/scripts/dirs.sh"
 
 export CARGO_RUSTC_OPTS="-Ztime-passes -Zinput-stats"
 export PATH=$RUSTC_DIR/bin:$PATH
-export BENCH_DIR=$MYDIR
 
 echo TIMES_DIR=$TIMES_DIR
 echo SCRIPTS_DIR=$SCRIPTS_DIR
diff --git a/regex-0.1.80/src/compile.rs b/regex-0.1.80/src/compile.rs
index 9db743f..9a32d30 100644
--- a/regex-0.1.80/src/compile.rs
+++ b/regex-0.1.80/src/compile.rs
@@ -137,6 +137,8 @@ impl Compiler {
     }
 
     fn compile_one(mut self, expr: &Expr) -> result::Result<Program, Error> {
+        {} // @030
+
         // If we're compiling a forward DFA and we aren't anchored, then
         // add a `.*?` before the first capture group.
         // Other matching engines handle this by baking the logic into the
RUSTFLAGS="-Z incremental=incr" cargo rustc  -- \
  -Ztime-passes -Zinput-stats -Z incremental-info
time: 0.025; rss: 65MB	parsing
Lines of code:             10691
Pre-expansion node count:  55399
time: 0.000; rss: 65MB	recursion limit
time: 0.000; rss: 65MB	crate injection
time: 0.000; rss: 65MB	plugin loading
time: 0.000; rss: 65MB	plugin registration
time: 0.043; rss: 99MB	expansion
time: 0.000; rss: 99MB	maybe building test harness
time: 0.001; rss: 99MB	maybe creating a macro crate
Post-expansion node count: 86872
time: 0.000; rss: 99MB	checking for inline asm in case the target doesn't support it
time: 0.001; rss: 99MB	complete gated feature checking
time: 0.003; rss: 99MB	early lint checks
time: 0.001; rss: 99MB	AST validation
time: 0.010; rss: 101MB	name resolution
time: 0.008; rss: 105MB	lowering ast -> hir
time: 0.002; rss: 108MB	indexing hir
time: 0.001; rss: 108MB	attribute checking
time: 0.000; rss: 102MB	language item collection
time: 0.002; rss: 102MB	lifetime resolution
time: 0.000; rss: 102MB	looking for entry point
time: 0.000; rss: 102MB	looking for plugin registrar
time: 0.005; rss: 106MB	region resolution
time: 0.001; rss: 106MB	loop checking
time: 0.000; rss: 106MB	static item recursion checking
time: 0.035; rss: 106MB	compute_incremental_hashes_map
incremental: session directory: 45 files hard-linked
incremental: session directory: 0 files copied
incremental: module WorkProduct(WorkProductId("regex-literals")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::compile[0]::SuffixCacheEntry[0]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-re_unicode")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::compile[0]::{{impl}}[13]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-error")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::compile[0]::{{impl}}[21]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-re_bytes")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::compile[0]::SuffixCacheEntry[0]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-re_plugin")) is dirty because Krate changed or was removed
incremental: module WorkProduct(WorkProductId("regex-re_builder-bytes")) is dirty because Krate changed or was removed
incremental: module WorkProduct(WorkProductId("regex-expand")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::compile[0]::SuffixCacheEntry[0]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-pikevm")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::compile[0]::SuffixCacheEntry[0]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-prog")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::compile[0]::InstHole[0]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-compile")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::compile[0]::Hole[0]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-sparse")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::compile[0]::Hole[0]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-utf8")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::compile[0]::{{impl}}[13]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-re_set-unicode")) is dirty because Krate changed or was removed
incremental: module WorkProduct(WorkProductId("regex-re_builder")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::compile[0]::SuffixCacheEntry[0]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-dfa")) is dirty because HirBody("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::compile[0]::{{impl}}[0]::c_class[0]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-re_builder-unicode")) is dirty because Krate changed or was removed
incremental: module WorkProduct(WorkProductId("regex-simd_accel-teddy128")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::compile[0]::{{impl}}[13]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-input")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::compile[0]::{{impl}}[21]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-re_set-bytes")) is dirty because Krate changed or was removed
incremental: module WorkProduct(WorkProductId("regex-exec")) is dirty because Krate changed or was removed
incremental: module WorkProduct(WorkProductId("regex-backtrack")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::compile[0]::SuffixCacheEntry[0]") changed or was removed
time: 0.022; rss: 106MB	load_dep_graph
time: 0.002; rss: 106MB	stability index
time: 0.002; rss: 107MB	stability checking
time: 0.012; rss: 109MB	type collecting
time: 0.001; rss: 109MB	variance inference
time: 0.001; rss: 109MB	impl wf inference
time: 0.015; rss: 115MB	coherence checking
time: 0.020; rss: 116MB	wf checking
time: 0.130; rss: 124MB	item-types checking
time: 0.305; rss: 134MB	item-bodies checking
time: 0.000; rss: 134MB	drop-impl checking
time: 0.041; rss: 163MB	const checking
time: 0.007; rss: 163MB	privacy checking
time: 0.002; rss: 163MB	intrinsic checking
time: 0.001; rss: 163MB	effect checking
time: 0.006; rss: 163MB	match checking
time: 0.004; rss: 163MB	liveness checking
time: 0.017; rss: 163MB	rvalue checking
time: 0.044; rss: 184MB	MIR dump
  time: 0.006; rss: 185MB	SimplifyCfg
  time: 0.011; rss: 185MB	QualifyAndPromoteConstants
  time: 0.013; rss: 185MB	TypeckMir
  time: 0.000; rss: 185MB	SimplifyBranches
  time: 0.003; rss: 185MB	SimplifyCfg
time: 0.034; rss: 185MB	MIR cleanup and validation
time: 0.048; rss: 185MB	borrow checking
time: 0.001; rss: 185MB	reachability checking
time: 0.005; rss: 185MB	death checking
time: 0.000; rss: 185MB	unused lib feature checking
time: 0.030; rss: 185MB	lint checking
time: 0.000; rss: 185MB	resolving dependency formats
  time: 0.000; rss: 185MB	NoLandingPads
  time: 0.003; rss: 185MB	SimplifyCfg
  time: 0.008; rss: 185MB	EraseRegions
  time: 0.001; rss: 185MB	AddCallGuards
  time: 0.018; rss: 188MB	ElaborateDrops
  time: 0.000; rss: 188MB	NoLandingPads
  time: 0.004; rss: 188MB	SimplifyCfg
  time: 0.004; rss: 188MB	InstCombine
  time: 0.002; rss: 188MB	Deaggregator
  time: 0.000; rss: 188MB	CopyPropagation
  time: 0.005; rss: 188MB	SimplifyLocals
  time: 0.001; rss: 188MB	AddCallGuards
  time: 0.000; rss: 188MB	PreTrans
time: 0.048; rss: 188MB	MIR optimisations
  time: 0.010; rss: 190MB	write metadata
  time: 0.088; rss: 195MB	translation item collection
  time: 0.015; rss: 197MB	codegen unit partitioning
  time: 0.013; rss: 323MB	internalize symbols
time: 1.880; rss: 323MB	translation
time: 0.000; rss: 323MB	assert dep graph
time: 0.110; rss: 333MB	serialize dep graph
incremental: re-using 0 out of 21 modules
time: 0.001; rss: 277MB	llvm function passes [0]
time: 0.000; rss: 277MB	llvm module passes [0]
time: 0.002; rss: 277MB	llvm function passes [6]
time: 0.003; rss: 277MB	llvm function passes [1]
time: 0.000; rss: 277MB	llvm module passes [1]
time: 0.001; rss: 277MB	llvm module passes [6]
time: 0.005; rss: 277MB	llvm function passes [2]
time: 0.001; rss: 277MB	llvm module passes [2]
time: 0.012; rss: 277MB	llvm function passes [8]
time: 0.014; rss: 280MB	codegen passes [0]
time: 0.011; rss: 280MB	llvm function passes [0]
time: 0.024; rss: 280MB	codegen passes [6]
time: 0.004; rss: 280MB	llvm module passes [0]
time: 0.032; rss: 280MB	llvm function passes [5]
time: 0.003; rss: 280MB	llvm function passes [6]
time: 0.028; rss: 280MB	codegen passes [1]
time: 0.001; rss: 280MB	llvm module passes [6]
time: 0.024; rss: 280MB	llvm module passes [8]
time: 0.040; rss: 280MB	llvm function passes [4]
time: 0.053; rss: 294MB	llvm function passes [7]
time: 0.060; rss: 301MB	codegen passes [2]
time: 0.038; rss: 311MB	codegen passes [6]
time: 0.000; rss: 311MB	codegen passes [6]
time: 0.005; rss: 312MB	llvm function passes [11]
time: 0.033; rss: 312MB	llvm function passes [10]
time: 0.001; rss: 312MB	llvm module passes [11]
time: 0.045; rss: 312MB	llvm function passes [1]
time: 0.002; rss: 312MB	llvm module passes [10]
time: 0.026; rss: 312MB	llvm function passes [16]
time: 0.087; rss: 312MB	llvm function passes [3]
time: 0.049; rss: 312MB	llvm function passes [9]
time: 0.018; rss: 310MB	llvm module passes [1]
time: 0.024; rss: 312MB	llvm module passes [16]
time: 0.014; rss: 312MB	llvm module passes [9]
time: 0.078; rss: 320MB	llvm function passes [18]
time: 0.094; rss: 325MB	llvm function passes [19]
time: 0.003; rss: 325MB	llvm module passes [19]
time: 0.104; rss: 329MB	llvm function passes [20]
time: 0.096; rss: 329MB	codegen passes [11]
time: 0.013; rss: 333MB	llvm module passes [20]
time: 0.125; rss: 333MB	llvm function passes [17]
time: 0.001; rss: 333MB	llvm module passes [17]
time: 0.118; rss: 333MB	codegen passes [10]
time: 0.070; rss: 339MB	llvm module passes [18]
time: 0.047; rss: 352MB	codegen passes [17]
time: 0.080; rss: 354MB	codegen passes [19]
time: 0.217; rss: 361MB	codegen passes [0]
time: 0.231; rss: 356MB	codegen passes [8]
time: 0.247; rss: 354MB	llvm module passes [4]
time: 0.290; rss: 345MB	llvm module passes [5]
time: 0.273; rss: 346MB	llvm function passes [2]
time: 0.240; rss: 358MB	codegen passes [16]
time: 0.584; rss: 374MB	llvm module passes [7]
time: 0.497; rss: 389MB	codegen passes [1]
time: 0.725; rss: 390MB	llvm module passes [3]
time: 0.471; rss: 390MB	llvm module passes [2]
time: 0.575; rss: 414MB	codegen passes [4]
time: 0.554; rss: 407MB	codegen passes [5]
time: 0.636; rss: 398MB	codegen passes [18]
time: 0.701; rss: 388MB	codegen passes [9]
time: 0.831; rss: 372MB	codegen passes [20]
time: 0.848; rss: 382MB	codegen passes [7]
time: 1.409; rss: 388MB	codegen passes [3]
time: 1.478; rss: 367MB	codegen passes [2]
time: 2.456; rss: 364MB	LLVM passes
time: 0.000; rss: 363MB	serialize work products
time: 0.209; rss: 183MB	linking
done
