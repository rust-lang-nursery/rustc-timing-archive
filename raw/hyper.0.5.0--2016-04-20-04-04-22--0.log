commit 9bba2907ee712753e44d7e248560031c190724e0
Merge: 3dd88f6 02538d4
Author: bors <bors@rust-lang.org>
Date:   Wed Apr 20 01:16:55 2016 -0700

    Auto merge of #32942 - alexcrichton:bootstrap-from-previous, r=brson
    
    mk: Bootstrap from stable instead of snapshots
    
    This commit removes all infrastructure from the repository for our so-called
    snapshots to instead bootstrap the compiler from stable releases. Bootstrapping
    from a previously stable release is a long-desired feature of distros because
    they're not fans of downloading binary stage0 blobs from us. Additionally, this
    makes our own CI easier as we can decommission all of the snapshot builders and
    start having a regular cadence to when we update the stage0 compiler.
    
    A new `src/etc/get-stage0.py` script was added which shares some code with
    `src/bootstrap/bootstrap.py` to read a new file, `src/stage0.txt`, which lists
    the current stage0 compiler as well as cargo that we bootstrap from. This script
    will download the relevant `rustc` package an unpack it into `$target/stage0` as
    we do today.
    
    One problem of bootstrapping from stable releases is that we're not able to
    compile unstable code (e.g. all the `#![feature]` directives in libcore/libstd).
    To overcome this we employ two strategies:
    
    * The bootstrap key of the previous compiler is hardcoded into `src/stage0.txt`
      (enabled as a result of #32731) and exported by the build system. This enables
      nightly features in the compiler we download.
    * The standard library and compiler are pinned to a specific stage0, which
      doesn't change, so we're guaranteed that we'll continue compiling as we start
      from a known fixed source.
    
    The process for making a release will also need to be tweaked now to continue to
    cadence of bootstrapping from the previous release. This process looks like:
    
    1. Merge `beta` to `stable`
    2. Produce a new stable compiler.
    3. Change `master` to bootstrap from this new stable compiler.
    4. Merge `master` to `beta`
    5. Produce a new beta compiler
    6. Change `master` to bootstrap from this new beta compiler.
    
    Step 3 above should involve very few changes as `master` was previously
    bootstrapping from `beta` which is the same as `stable` at that point in time.
    Step 6, however, is where we benefit from removing lots of `#[cfg(stage0)]` and
    get to use new features. This also shouldn't slow the release too much as steps
    1-5 requires little work other than waiting and step 6 just needs to happen at
    some point during a release cycle, it's not time sensitive.
    
    Closes #29555
    Closes #29557
rustc: ./hyper.0.5.0
cargo rustc -- -Ztime-passes -Zinput-stats
    Updating registry `https://github.com/rust-lang/crates.io-index`
   Compiling libc v0.1.12
   Compiling winapi-build v0.1.1
   Compiling libc v0.2.10
   Compiling traitobject v0.0.1
   Compiling winapi v0.2.6
   Compiling httparse v0.1.6
   Compiling matches v0.1.2
   Compiling unicase v0.1.0
   Compiling log v0.3.6
   Compiling typeable v0.1.2
   Compiling rustc-serialize v0.3.19
   Compiling lazy_static v0.1.16
   Compiling pkg-config v0.3.8
   Compiling kernel32-sys v0.2.2
   Compiling mime v0.0.11
   Compiling gcc v0.3.27
   Compiling bitflags v0.3.3
   Compiling rand v0.3.14
   Compiling num_cpus v0.2.11
   Compiling time v0.1.35
   Compiling openssl-sys v0.6.7
   Compiling openssl v0.6.7
   Compiling uuid v0.1.18
   Compiling url v0.2.38
   Compiling cookie v0.1.21
   Compiling hyper v0.5.0 (file:///root/benchmarks/hyper.0.5.0)
time: 0.030; rss: 49MB	parsing
Lines of code:             9154
Pre-expansion node count:  45594
time: 0.008; rss: 49MB	configuration 1
time: 0.000; rss: 49MB	recursion limit
time: 0.000; rss: 49MB	gated macro checking
time: 0.000; rss: 49MB	crate injection
time: 0.004; rss: 54MB	macro loading
time: 0.000; rss: 54MB	plugin loading
time: 0.000; rss: 54MB	plugin registration
time: 0.187; rss: 63MB	expansion
time: 0.005; rss: 63MB	complete gated feature checking 1
time: 0.030; rss: 63MB	configuration 2
time: 0.000; rss: 63MB	gated configuration checking
time: 0.011; rss: 63MB	maybe building test harness
time: 0.008; rss: 63MB	prelude injection
time: 0.001; rss: 63MB	checking that all macro invocations are gone
time: 0.000; rss: 63MB	checking for inline asm in case the target doesn't support it
time: 0.002; rss: 63MB	complete gated feature checking 2
time: 0.001; rss: 63MB	const fn bodies and arguments
Post-expansion node count: 107125
time: 0.008; rss: 63MB	assigning node ids
time: 0.011; rss: 67MB	lowering ast -> hir
time: 0.004; rss: 69MB	indexing hir
time: 0.001; rss: 69MB	attribute checking
time: 0.006; rss: 69MB	early lint checks
time: 0.004; rss: 67MB	external crate/lib resolution
time: 0.001; rss: 67MB	language item collection
time: 0.023; rss: 83MB	resolution
time: 0.002; rss: 83MB	lifetime resolution
time: 0.000; rss: 83MB	looking for entry point
time: 0.000; rss: 83MB	looking for plugin registrar
time: 0.007; rss: 87MB	region resolution
time: 0.001; rss: 87MB	loop checking
time: 0.001; rss: 87MB	static item recursion checking
time: 0.000; rss: 87MB	load_dep_graph
time: 0.018; rss: 97MB	type collecting
time: 0.000; rss: 97MB	variance inference
time: 0.043; rss: 114MB	coherence checking
time: 0.072; rss: 114MB	wf checking
time: 0.028; rss: 116MB	item-types checking
time: 0.464; rss: 138MB	item-bodies checking
time: 0.000; rss: 138MB	drop-impl checking
time: 0.036; rss: 141MB	const checking
time: 0.008; rss: 141MB	privacy checking
time: 0.001; rss: 141MB	stability index
time: 0.004; rss: 141MB	intrinsic checking
time: 0.002; rss: 141MB	effect checking
time: 0.012; rss: 141MB	match checking
time: 0.005; rss: 141MB	liveness checking
time: 0.032; rss: 141MB	rvalue checking
time: 0.048; rss: 148MB	MIR dump
time: 0.021; rss: 148MB	MIR passes
time: 0.064; rss: 148MB	borrow checking
time: 0.003; rss: 148MB	reachability checking
time: 0.006; rss: 148MB	death checking
time: 0.006; rss: 148MB	stability checking
time: 0.000; rss: 148MB	unused lib feature checking
time: 0.045; rss: 148MB	lint checking
time: 0.000; rss: 148MB	resolving dependency formats
time: 0.010; rss: 148MB	Prepare MIR codegen passes
  time: 0.176; rss: 175MB	translation item collection
  time: 0.007; rss: 175MB	codegen unit partitioning
  time: 0.137; rss: 293MB	write metadata
time: 1.455; rss: 293MB	translation
time: 0.001; rss: 293MB	assert dep graph
time: 0.000; rss: 293MB	serialize dep graph
  time: 0.097; rss: 173MB	llvm function passes [0]
  time: 0.046; rss: 173MB	llvm module passes [0]
  time: 1.622; rss: 179MB	codegen passes [0]
  time: 0.001; rss: 126MB	codegen passes [0]
time: 1.965; rss: 124MB	LLVM passes
time: 0.172; rss: 122MB	linking
done
