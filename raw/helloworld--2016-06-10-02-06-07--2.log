commit c09d546ee512c166c2e28306ed67dcf0e3fec751
Merge: 2798772 8841f26
Author: bors <bors@rust-lang.org>
Date:   Thu Jun 9 21:29:26 2016 -0700

    Auto merge of #34046 - Vtec234:fix-atomic-doc, r=steveklabnik
    
    Fix wrong statement in compare_exchange doc
    
    The documentation for `core::sync::atomic::AtomicSomething::compare_exchange` contains a wrong, or imprecise, statement about the return value. It goes:
    
    The return value is a result indicating whether the new value was written and containing
    the previous value. On success this value is guaranteed to be equal to `new`.
    
    In the second sentence, `this value` is gramatically understood as referring to `return value` from the first sentence. Due to how CAS works, the returned value is always what was in the atomic variable _before_ the operation occurred, not what was written into it during the operation. Hence, the fixed doc should say:
    
    The return value is a result indicating whether the new value was written and containing
    the previous value. On success this value is guaranteed to be equal to `current`.
    
    This version is confirmed by the runnable examples in variants of `AtomicSomething`, e.g.
    
        assert_eq!(some_bool.compare_exchange(true, false, Ordering::Acquire, Ordering::Relaxed),
        Ok(true));
    
    where the returned value is `Ok(current)`. This PR fixes all occurrences of this bug I could find.
    
    An alternative solution would be to modify the second sentence so that it refers to the value _written_ into the Atomic rather than what was there before, in which case it would be correct. Example alternative formulation:
    
    On success the value written into the `bool`/`usize`/`whatever` is guaranteed to be equal to `new`.
    
    r? @steveklabnik
rustc: ./helloworld
/root/rust/x86_64-unknown-linux-gnu/stage2/bin/rustc hello.rs -Ztime-passes -Zinput-stats
time: 0.000; rss: 44MB	parsing
Lines of code:             3
Pre-expansion node count:  8
time: 0.000; rss: 44MB	configuration 1
time: 0.000; rss: 44MB	recursion limit
time: 0.000; rss: 44MB	crate injection
time: 0.000; rss: 44MB	plugin loading
time: 0.000; rss: 44MB	plugin registration
time: 0.018; rss: 82MB	expansion
time: 0.000; rss: 82MB	gated configuration checking
time: 0.000; rss: 82MB	maybe building test harness
time: 0.000; rss: 82MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 82MB	complete gated feature checking
Post-expansion node count: 68
time: 0.000; rss: 82MB	assigning node ids
time: 0.000; rss: 82MB	collecting defs
time: 0.003; rss: 82MB	external crate/lib resolution
time: 0.000; rss: 82MB	early lint checks
time: 0.000; rss: 82MB	AST validation
time: 0.000; rss: 82MB	name resolution
time: 0.000; rss: 82MB	lowering ast -> hir
time: 0.000; rss: 82MB	indexing hir
time: 0.000; rss: 82MB	attribute checking
time: 0.000; rss: 82MB	language item collection
time: 0.000; rss: 82MB	lifetime resolution
time: 0.000; rss: 82MB	looking for entry point
time: 0.000; rss: 82MB	looking for plugin registrar
time: 0.000; rss: 82MB	region resolution
time: 0.000; rss: 82MB	loop checking
time: 0.000; rss: 82MB	static item recursion checking
time: 0.000; rss: 86MB	load_dep_graph
time: 0.000; rss: 86MB	type collecting
time: 0.000; rss: 86MB	variance inference
time: 0.005; rss: 86MB	coherence checking
time: 0.000; rss: 86MB	wf checking
time: 0.000; rss: 86MB	item-types checking
time: 0.000; rss: 86MB	item-bodies checking
time: 0.000; rss: 86MB	drop-impl checking
time: 0.000; rss: 86MB	const checking
time: 0.000; rss: 86MB	privacy checking
time: 0.000; rss: 86MB	stability index
time: 0.000; rss: 86MB	intrinsic checking
time: 0.000; rss: 86MB	effect checking
time: 0.000; rss: 86MB	match checking
time: 0.000; rss: 86MB	liveness checking
time: 0.000; rss: 86MB	rvalue checking
time: 0.000; rss: 86MB	MIR dump
time: 0.000; rss: 86MB	MIR passes
time: 0.000; rss: 90MB	borrow checking
time: 0.000; rss: 90MB	reachability checking
time: 0.000; rss: 90MB	death checking
time: 0.000; rss: 90MB	stability checking
time: 0.000; rss: 90MB	unused lib feature checking
time: 0.000; rss: 90MB	lint checking
time: 0.001; rss: 90MB	resolving dependency formats
time: 0.000; rss: 90MB	Prepare MIR codegen passes
  time: 0.000; rss: 90MB	write metadata
  time: 0.000; rss: 90MB	translation item collection
  time: 0.000; rss: 90MB	codegen unit partitioning
time: 0.009; rss: 90MB	translation
time: 0.000; rss: 90MB	assert dep graph
time: 0.000; rss: 90MB	serialize dep graph
  time: 0.000; rss: 90MB	llvm function passes [0]
  time: 0.000; rss: 90MB	llvm module passes [0]
  time: 0.001; rss: 95MB	codegen passes [0]
  time: 0.000; rss: 95MB	codegen passes [0]
time: 0.002; rss: 95MB	LLVM passes
  time: 0.105; rss: 95MB	running linker
time: 0.106; rss: 95MB	linking
done
