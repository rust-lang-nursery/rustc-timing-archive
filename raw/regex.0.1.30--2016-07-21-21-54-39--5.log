commit 62690b3c3fa6e157daa7f7c5a3af005f37eb4199
Merge: 7588653 ede39ae
Author: bors <bors@rust-lang.org>
Date:   Thu Jul 21 16:19:54 2016 -0700

    Auto merge of #34544 - 3Hren:issue/xx/reinterpret-format-precision-for-strings, r=alexcrichton
    
    feat: reinterpret `precision` field for strings
    
    This commit changes the behavior of formatting string arguments with both width and precision fields set.
    
    Documentation says that the `width` field is the "minimum width" that the format should take up. If the value's string does not fill up this many characters, then the padding specified by fill/alignment will be used to take up the required space.
    
    This is true for all formatted types except string, which is truncated down to `precision` number of chars and then all of `fill`, `align` and `width` fields are completely ignored.
    
    For example: `format!("{:/^10.8}", "1234567890);` emits "12345678". In the contrast Python version works as the expected:
    ```python
    >>> '{:/^10.8}'.format('1234567890')
    '/12345678/'
    ```
    
    This commit gives back the `Python` behavior by changing the `precision` field meaning to the truncation and nothing more. The result string *will* be prepended/appended up to the `width` field with the proper `fill` char.
    
    __However, this is the breaking change, I admit.__ Feel free to close it, but otherwise it should be mentioned in the `std::fmt` documentation somewhere near of `fill/align/width` fields description.
rustc: ./regex.0.1.30
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling regex v0.1.30 (file:///root/benchmarks/regex.0.1.30)
time: 0.067; rss: 98MB	parsing
Lines of code:             8558
Pre-expansion node count:  58076
time: 0.011; rss: 98MB	configuration
time: 0.000; rss: 98MB	recursion limit
time: 0.000; rss: 98MB	crate injection
time: 0.000; rss: 98MB	plugin loading
time: 0.000; rss: 98MB	plugin registration
time: 0.037; rss: 133MB	expansion
time: 0.000; rss: 133MB	maybe building test harness
time: 0.006; rss: 133MB	assigning node ids
Post-expansion node count: 68148
time: 0.000; rss: 133MB	checking for inline asm in case the target doesn't support it
time: 0.001; rss: 133MB	complete gated feature checking
time: 0.001; rss: 133MB	collecting defs
time: 0.001; rss: 133MB	external crate/lib resolution
time: 0.006; rss: 133MB	early lint checks
time: 0.001; rss: 133MB	AST validation
time: 0.007; rss: 136MB	name resolution
time: 0.009; rss: 146MB	lowering ast -> hir
time: 0.001; rss: 148MB	indexing hir
time: 0.001; rss: 148MB	attribute checking
time: 0.001; rss: 138MB	language item collection
time: 0.001; rss: 138MB	lifetime resolution
time: 0.000; rss: 138MB	looking for entry point
time: 0.000; rss: 138MB	looking for plugin registrar
time: 0.006; rss: 141MB	region resolution
time: 0.001; rss: 141MB	loop checking
time: 0.001; rss: 141MB	static item recursion checking
time: 0.000; rss: 141MB	load_dep_graph
time: 0.010; rss: 143MB	type collecting
time: 0.000; rss: 143MB	variance inference
time: 0.026; rss: 147MB	coherence checking
time: 0.014; rss: 148MB	wf checking
time: 0.334; rss: 157MB	item-types checking
time: 0.207; rss: 161MB	item-bodies checking
time: 0.000; rss: 161MB	drop-impl checking
time: 0.028; rss: 163MB	const checking
time: 0.004; rss: 163MB	privacy checking
time: 0.001; rss: 163MB	stability index
time: 0.002; rss: 163MB	intrinsic checking
time: 0.001; rss: 163MB	effect checking
time: 0.004; rss: 163MB	match checking
time: 0.002; rss: 163MB	liveness checking
time: 0.008; rss: 163MB	rvalue checking
time: 0.053; rss: 174MB	MIR dump
time: 0.022; rss: 174MB	MIR passes
time: 0.022; rss: 174MB	borrow checking
time: 0.000; rss: 174MB	reachability checking
time: 0.003; rss: 174MB	death checking
time: 0.002; rss: 174MB	stability checking
time: 0.000; rss: 174MB	unused lib feature checking
time: 0.028; rss: 174MB	lint checking
time: 0.000; rss: 174MB	resolving dependency formats
time: 0.018; rss: 177MB	Prepare MIR codegen passes
  time: 0.175; rss: 188MB	write metadata
  time: 0.058; rss: 190MB	translation item collection
  time: 0.008; rss: 190MB	codegen unit partitioning
time: 1.547; rss: 237MB	translation
time: 0.000; rss: 237MB	assert dep graph
time: 0.000; rss: 237MB	serialize dep graph
  time: 0.411; rss: 166MB	llvm function passes [0]
  time: 0.188; rss: 166MB	llvm module passes [0]
  time: 6.048; rss: 170MB	codegen passes [0]
  time: 0.002; rss: 169MB	codegen passes [0]
time: 7.079; rss: 169MB	LLVM passes
time: 0.062; rss: 150MB	linking
done
