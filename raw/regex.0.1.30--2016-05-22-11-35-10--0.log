commit 6e455640950c4e8cb8bff919edb4854fcf7773ca
Merge: e24d621 cfc3865
Author: bors <bors@rust-lang.org>
Date:   Sun May 22 23:14:11 2016 -0700

    Auto merge of #31457 - lambda:rtabort-use-libc-abort, r=alexcrichton
    
    Use libc::abort, not intrinsics::abort, in rtabort!
    
    intrinsics::abort compiles down to an illegal instruction, which on
    Unix-like platforms causes the process to be killed with SIGILL.  A more
    appropriate way to kill the process would be SIGABRT; this indicates
    better that the runtime has explicitly aborted, rather than some kind of
    compiler bug or architecture mismatch that SIGILL might indicate.
    
    For rtassert!, replace this with libc::abort.  libc::abort raises
    SIGABRT, but is defined to do so in such a way that it will terminate
    the process even if SIGABRT is currently masked or caught by a signal
    handler that returns.
    
    On non-Unix platforms, retain the existing behavior.  On Windows we
    prefer to avoid depending on the C runtime, and we need a fallback for
    any other platforms that may be defined.  An alternative on Windows
    would be to call TerminateProcess, but this seems less essential than
    switching to using SIGABRT on Unix-like platforms, where it is common
    for the process-killing signal to be printed out or logged.
    
    This is a [breaking-change] for any code that depends on the exact
    signal raised to abort a process via rtabort!
    
    cc #31273
    cc #31333
rustc: ./regex.0.1.30
cargo rustc -- -Ztime-passes -Zinput-stats
    Updating registry `https://github.com/rust-lang/crates.io-index`
   Compiling regex v0.1.30 (file:///root/benchmarks/regex.0.1.30)
time: 0.063; rss: 63MB	parsing
Lines of code:             8558
Pre-expansion node count:  58331
time: 0.011; rss: 63MB	configuration 1
time: 0.000; rss: 63MB	recursion limit
time: 0.000; rss: 63MB	crate injection
time: 0.020; rss: 95MB	macro loading
time: 0.000; rss: 95MB	plugin loading
time: 0.000; rss: 95MB	plugin registration
time: 0.057; rss: 99MB	expansion
time: 0.013; rss: 99MB	configuration 2
time: 0.000; rss: 99MB	gated configuration checking
time: 0.006; rss: 99MB	maybe building test harness
time: 0.006; rss: 99MB	prelude injection
time: 0.000; rss: 99MB	checking that all macro invocations are gone
time: 0.000; rss: 99MB	checking for inline asm in case the target doesn't support it
time: 0.001; rss: 99MB	complete gated feature checking
Post-expansion node count: 68487
time: 0.006; rss: 99MB	assigning node ids
time: 0.001; rss: 99MB	collecting defs
time: 0.001; rss: 99MB	external crate/lib resolution
time: 0.006; rss: 99MB	early lint checks
time: 0.008; rss: 101MB	name resolution
time: 0.009; rss: 111MB	lowering ast -> hir
time: 0.001; rss: 111MB	indexing hir
time: 0.001; rss: 111MB	attribute checking
time: 0.001; rss: 103MB	language item collection
time: 0.001; rss: 103MB	lifetime resolution
time: 0.000; rss: 103MB	looking for entry point
time: 0.000; rss: 103MB	looking for plugin registrar
time: 0.006; rss: 107MB	region resolution
time: 0.001; rss: 107MB	loop checking
time: 0.001; rss: 107MB	static item recursion checking
time: 0.000; rss: 107MB	load_dep_graph
time: 0.007; rss: 110MB	type collecting
time: 0.000; rss: 110MB	variance inference
time: 0.025; rss: 116MB	coherence checking
time: 0.012; rss: 116MB	wf checking
time: 0.318; rss: 123MB	item-types checking
time: 0.208; rss: 127MB	item-bodies checking
time: 0.000; rss: 127MB	drop-impl checking
time: 0.026; rss: 127MB	const checking
time: 0.004; rss: 127MB	privacy checking
time: 0.001; rss: 127MB	stability index
time: 0.002; rss: 127MB	intrinsic checking
time: 0.001; rss: 127MB	effect checking
time: 0.004; rss: 127MB	match checking
time: 0.002; rss: 127MB	liveness checking
time: 0.007; rss: 127MB	rvalue checking
time: 0.055; rss: 140MB	MIR dump
time: 0.019; rss: 140MB	MIR passes
time: 0.022; rss: 140MB	borrow checking
time: 0.000; rss: 140MB	reachability checking
time: 0.003; rss: 140MB	death checking
time: 0.003; rss: 140MB	stability checking
time: 0.000; rss: 140MB	unused lib feature checking
time: 0.030; rss: 140MB	lint checking
time: 0.000; rss: 140MB	resolving dependency formats
time: 0.005; rss: 140MB	Prepare MIR codegen passes
  time: 0.090; rss: 146MB	translation item collection
  time: 0.001; rss: 146MB	codegen unit partitioning
  time: 0.179; rss: 202MB	write metadata
time: 0.757; rss: 199MB	translation
time: 0.000; rss: 199MB	assert dep graph
time: 0.000; rss: 199MB	serialize dep graph
  time: 0.035; rss: 131MB	llvm function passes [0]
  time: 0.018; rss: 132MB	llvm module passes [0]
  time: 0.607; rss: 136MB	codegen passes [0]
  time: 0.001; rss: 117MB	codegen passes [0]
time: 0.736; rss: 114MB	LLVM passes
time: 0.067; rss: 114MB	linking
done
