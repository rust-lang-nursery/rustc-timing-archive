commit a7b2232d20320dc3b4044a2aec1d51a129e7e17d
Merge: 9627e9e 8cfc69e
Author: bors <bors@rust-lang.org>
Date:   Wed Sep 7 15:45:14 2016 -0700

    Auto merge of #36292 - japaric:musl-root, r=alexcrichton
    
    rustbuild: per target musl-root
    
    config.toml now accepts a target.$TARGET.musl-root key that lets you
    override the "build" musl-root value, which is set via the --musl-root
    flag or via the build.musl-root key.
    
    With this change, it's now possible to compile std for several musl
    targets at once. Here's are the sample commands to do such thing:
    
    ```
    $ configure \
        --enable-rustbuild \
        --target=x86_64-unknown-linux-musl,arm-unknown-linux-musleabi \
        --musl-root=/musl/x86_64-unknown-linux-musl/
    
    $ edit config.toml && tail config.toml
    [target.arm-unknown-linux-musleabi]
    musl-root = "/x-tools/arm-unknown-linux-musleabi/arm-unknown-linux-musleabi/sysroot/usr"
    
    $ make
    ```
    
    r? @alexcrichton
    With this we should be able to start producing releases of std for arm musl targets
rustc: ./regex.0.1.30
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling regex v0.1.30 (file:///root/benchmarks/regex.0.1.30)
time: 0.053; rss: 57MB	parsing
Lines of code:             8558
Pre-expansion node count:  58080
time: 0.005; rss: 57MB	configuration
time: 0.000; rss: 57MB	recursion limit
time: 0.000; rss: 57MB	crate injection
time: 0.000; rss: 57MB	plugin loading
time: 0.000; rss: 57MB	plugin registration
time: 0.029; rss: 80MB	expansion
time: 0.000; rss: 80MB	maybe building test harness
time: 0.001; rss: 80MB	maybe creating a macro crate
time: 0.003; rss: 80MB	assigning node ids
Post-expansion node count: 68154
time: 0.000; rss: 80MB	checking for inline asm in case the target doesn't support it
time: 0.001; rss: 80MB	complete gated feature checking
time: 0.001; rss: 80MB	collecting defs
time: 0.001; rss: 80MB	external crate/lib resolution
time: 0.003; rss: 80MB	early lint checks
time: 0.000; rss: 80MB	AST validation
time: 0.006; rss: 82MB	name resolution
time: 0.008; rss: 92MB	lowering ast -> hir
time: 0.002; rss: 94MB	indexing hir
time: 0.001; rss: 94MB	attribute checking
time: 0.001; rss: 86MB	language item collection
time: 0.001; rss: 86MB	lifetime resolution
time: 0.000; rss: 86MB	looking for entry point
time: 0.000; rss: 86MB	looking for plugin registrar
time: 0.006; rss: 89MB	region resolution
time: 0.001; rss: 89MB	loop checking
time: 0.001; rss: 89MB	static item recursion checking
time: 0.021; rss: 90MB	compute_incremental_hashes_map
time: 0.000; rss: 90MB	load_dep_graph
time: 0.008; rss: 90MB	type collecting
time: 0.000; rss: 90MB	variance inference
time: 0.019; rss: 93MB	coherence checking
time: 0.009; rss: 94MB	wf checking
time: 0.249; rss: 104MB	item-types checking
time: 0.145; rss: 110MB	item-bodies checking
time: 0.000; rss: 110MB	drop-impl checking
time: 0.027; rss: 110MB	const checking
time: 0.003; rss: 110MB	privacy checking
time: 0.001; rss: 110MB	stability index
time: 0.002; rss: 110MB	intrinsic checking
time: 0.001; rss: 110MB	effect checking
time: 0.004; rss: 110MB	match checking
time: 0.002; rss: 110MB	liveness checking
time: 0.008; rss: 110MB	rvalue checking
time: 0.041; rss: 125MB	MIR dump
  time: 0.003; rss: 125MB	SimplifyCfg
  time: 0.005; rss: 125MB	QualifyAndPromoteConstants
  time: 0.010; rss: 125MB	TypeckMir
  time: 0.000; rss: 125MB	SimplifyBranches
  time: 0.001; rss: 125MB	SimplifyCfg
time: 0.020; rss: 125MB	MIR passes
time: 0.021; rss: 125MB	borrow checking
time: 0.000; rss: 125MB	reachability checking
time: 0.002; rss: 125MB	death checking
time: 0.002; rss: 125MB	stability checking
time: 0.000; rss: 125MB	unused lib feature checking
time: 0.025; rss: 125MB	lint checking
time: 0.000; rss: 125MB	resolving dependency formats
  time: 0.000; rss: 125MB	NoLandingPads
  time: 0.001; rss: 125MB	SimplifyCfg
  time: 0.004; rss: 125MB	EraseRegions
  time: 0.000; rss: 125MB	AddCallGuards
  time: 0.009; rss: 127MB	ElaborateDrops
  time: 0.000; rss: 127MB	NoLandingPads
  time: 0.002; rss: 127MB	SimplifyCfg
  time: 0.000; rss: 127MB	Deaggregator
  time: 0.000; rss: 127MB	AddCallGuards
  time: 0.000; rss: 127MB	PreTrans
time: 0.018; rss: 127MB	Prepare MIR codegen passes
  time: 0.161; rss: 136MB	write metadata
  time: 0.041; rss: 138MB	translation item collection
  time: 0.007; rss: 140MB	codegen unit partitioning
  time: 0.014; rss: 163MB	internalize symbols
time: 0.621; rss: 157MB	translation
time: 0.000; rss: 157MB	assert dep graph
time: 0.000; rss: 157MB	serialize dep graph
  time: 0.036; rss: 112MB	llvm function passes [0]
  time: 0.019; rss: 114MB	llvm module passes [0]
  time: 0.672; rss: 118MB	codegen passes [0]
  time: 0.001; rss: 118MB	codegen passes [0]
time: 0.786; rss: 118MB	LLVM passes
time: 0.000; rss: 118MB	serialize work products
time: 0.065; rss: 90MB	linking
done
