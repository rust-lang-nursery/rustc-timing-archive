commit 816a34aca23f3ebd0fddf79ebdf96c9fae976f58
Merge: d9aae63 a1882ca
Author: bors <bors@rust-lang.org>
Date:   Thu Dec 8 07:05:19 2016 +0000

    Auto merge of #38146 - kali:master, r=alexcrichton
    
    fix objc ABI in std::env::args
    
    iOS use different calling convention for `objc_msgSend` depending on the platform. armv7 expect good old variadic arguments, but aarch64 wants "normal" convention: `objc_msgSend` has to be called mimicking the actual callee prototype.
    
    https://developer.apple.com/library/content/documentation/General/Conceptual/CocoaTouch64BitGuide/ConvertingYourAppto64-Bit/ConvertingYourAppto64-Bit.html#//apple_ref/doc/uid/TP40013501-CH3-SW26
    
    This currently breaks std::env:args() on aarch64 iOS devices. As far as I can tell, in the standard library, this is the only occurrence of ObjectiveC dispatching.
rustc: ./issue-32278-big-array-of-strings
cargo rustc  -- -Ztime-passes -Zinput-stats
time: 0.103; rss: 60MB	parsing
Lines of code:             65577
Pre-expansion node count:  65552
time: 0.000; rss: 60MB	recursion limit
time: 0.000; rss: 60MB	crate injection
time: 0.000; rss: 60MB	plugin loading
time: 0.000; rss: 60MB	plugin registration
time: 0.023; rss: 84MB	expansion
time: 0.000; rss: 84MB	maybe building test harness
time: 0.001; rss: 84MB	maybe creating a macro crate
Post-expansion node count: 65565
time: 0.000; rss: 84MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 84MB	complete gated feature checking
time: 0.004; rss: 84MB	early lint checks
time: 0.000; rss: 84MB	AST validation
time: 0.002; rss: 84MB	name resolution
time: 0.004; rss: 93MB	lowering ast -> hir
time: 0.001; rss: 97MB	indexing hir
time: 0.000; rss: 97MB	attribute checking
time: 0.000; rss: 86MB	language item collection
time: 0.000; rss: 86MB	lifetime resolution
time: 0.000; rss: 86MB	looking for entry point
time: 0.000; rss: 86MB	looking for plugin registrar
time: 0.007; rss: 92MB	region resolution
time: 0.000; rss: 92MB	loop checking
time: 0.000; rss: 92MB	static item recursion checking
time: 0.037; rss: 92MB	compute_incremental_hashes_map
time: 0.000; rss: 92MB	load_dep_graph
time: 0.000; rss: 92MB	stability index
time: 0.000; rss: 92MB	stability checking
time: 0.000; rss: 92MB	type collecting
time: 0.000; rss: 92MB	variance inference
time: 0.000; rss: 92MB	impl wf inference
time: 0.003; rss: 94MB	coherence checking
time: 0.000; rss: 94MB	wf checking
time: 0.517; rss: 106MB	item-types checking
time: 0.000; rss: 106MB	item-bodies checking
time: 0.000; rss: 106MB	drop-impl checking
time: 0.022; rss: 105MB	const checking
time: 0.001; rss: 105MB	privacy checking
time: 0.000; rss: 105MB	intrinsic checking
time: 0.000; rss: 105MB	effect checking
time: 0.000; rss: 105MB	match checking
time: 0.000; rss: 105MB	liveness checking
time: 0.000; rss: 105MB	rvalue checking
time: 0.035; rss: 113MB	MIR dump
  time: 0.000; rss: 113MB	SimplifyCfg
  time: 0.001; rss: 113MB	QualifyAndPromoteConstants
  time: 0.001; rss: 113MB	TypeckMir
  time: 0.000; rss: 113MB	SimplifyBranches
  time: 0.000; rss: 113MB	SimplifyCfg
time: 0.001; rss: 113MB	MIR cleanup and validation
time: 0.001; rss: 113MB	borrow checking
time: 0.000; rss: 113MB	reachability checking
time: 0.000; rss: 113MB	death checking
time: 0.000; rss: 113MB	unused lib feature checking
time: 0.021; rss: 113MB	lint checking
time: 0.001; rss: 113MB	resolving dependency formats
  time: 0.000; rss: 113MB	NoLandingPads
  time: 0.000; rss: 113MB	SimplifyCfg
  time: 0.001; rss: 113MB	EraseRegions
  time: 0.000; rss: 113MB	AddCallGuards
  time: 0.000; rss: 113MB	ElaborateDrops
  time: 0.000; rss: 113MB	NoLandingPads
  time: 0.000; rss: 113MB	SimplifyCfg
  time: 0.000; rss: 113MB	InstCombine
  time: 0.000; rss: 113MB	Deaggregator
  time: 0.000; rss: 113MB	CopyPropagation
  time: 0.000; rss: 113MB	SimplifyLocals
  time: 0.000; rss: 113MB	AddCallGuards
  time: 0.000; rss: 113MB	PreTrans
time: 0.001; rss: 113MB	MIR optimisations
  time: 0.000; rss: 114MB	write metadata
  time: 0.000; rss: 114MB	translation item collection
  time: 0.000; rss: 114MB	codegen unit partitioning
  time: 0.001; rss: 126MB	internalize symbols
time: 0.098; rss: 126MB	translation
time: 0.000; rss: 126MB	assert dep graph
time: 0.000; rss: 126MB	serialize dep graph
  time: 0.007; rss: 92MB	llvm function passes [0]
  time: 0.000; rss: 92MB	llvm module passes [0]
  time: 0.190; rss: 91MB	codegen passes [0]
  time: 0.000; rss: 91MB	codegen passes [0]
time: 0.198; rss: 91MB	LLVM passes
time: 0.000; rss: 91MB	serialize work products
  time: 0.154; rss: 82MB	running linker
time: 0.155; rss: 82MB	linking
done
