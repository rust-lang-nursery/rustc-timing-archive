commit 816a34aca23f3ebd0fddf79ebdf96c9fae976f58
Merge: d9aae63 a1882ca
Author: bors <bors@rust-lang.org>
Date:   Thu Dec 8 07:05:19 2016 +0000

    Auto merge of #38146 - kali:master, r=alexcrichton
    
    fix objc ABI in std::env::args
    
    iOS use different calling convention for `objc_msgSend` depending on the platform. armv7 expect good old variadic arguments, but aarch64 wants "normal" convention: `objc_msgSend` has to be called mimicking the actual callee prototype.
    
    https://developer.apple.com/library/content/documentation/General/Conceptual/CocoaTouch64BitGuide/ConvertingYourAppto64-Bit/ConvertingYourAppto64-Bit.html#//apple_ref/doc/uid/TP40013501-CH3-SW26
    
    This currently breaks std::env:args() on aarch64 iOS devices. As far as I can tell, in the standard library, this is the only occurrence of ObjectiveC dispatching.
rustc: ./syntex-0.42.2@000-base@000-base
cargo rustc -p syntex_syntax  -- -Ztime-passes -Zinput-stats
time: 0.093; rss: 71MB	parsing
Lines of code:             33687
Pre-expansion node count:  223115
time: 0.000; rss: 71MB	recursion limit
time: 0.000; rss: 71MB	crate injection
time: 0.000; rss: 71MB	plugin loading
time: 0.000; rss: 71MB	plugin registration
time: 0.240; rss: 146MB	expansion
time: 0.000; rss: 146MB	maybe building test harness
time: 0.006; rss: 146MB	maybe creating a macro crate
Post-expansion node count: 638863
time: 0.000; rss: 146MB	checking for inline asm in case the target doesn't support it
time: 0.012; rss: 146MB	complete gated feature checking
time: 0.023; rss: 146MB	early lint checks
time: 0.007; rss: 146MB	AST validation
time: 0.076; rss: 161MB	name resolution
time: 0.059; rss: 194MB	lowering ast -> hir
time: 0.010; rss: 187MB	indexing hir
time: 0.006; rss: 187MB	attribute checking
time: 0.002; rss: 149MB	language item collection
time: 0.011; rss: 149MB	lifetime resolution
time: 0.000; rss: 149MB	looking for entry point
time: 0.000; rss: 149MB	looking for plugin registrar
time: 0.047; rss: 169MB	region resolution
time: 0.007; rss: 169MB	loop checking
time: 0.002; rss: 169MB	static item recursion checking
time: 0.381; rss: 171MB	compute_incremental_hashes_map
time: 0.000; rss: 171MB	load_dep_graph
time: 0.009; rss: 171MB	stability index
time: 0.017; rss: 171MB	stability checking
time: 0.047; rss: 175MB	type collecting
time: 0.001; rss: 175MB	variance inference
time: 0.002; rss: 176MB	impl wf inference
time: 0.018; rss: 177MB	coherence checking
time: 0.085; rss: 179MB	wf checking
time: 0.187; rss: 184MB	item-types checking
time: 3.421; rss: 234MB	item-bodies checking
time: 0.000; rss: 234MB	drop-impl checking
time: 0.212; rss: 244MB	const checking
time: 0.056; rss: 244MB	privacy checking
time: 0.016; rss: 244MB	intrinsic checking
time: 0.014; rss: 244MB	effect checking
time: 0.048; rss: 244MB	match checking
time: 0.047; rss: 253MB	liveness checking
time: 0.174; rss: 254MB	rvalue checking
time: 0.353; rss: 441MB	MIR dump
  time: 0.056; rss: 442MB	SimplifyCfg
  time: 0.073; rss: 442MB	QualifyAndPromoteConstants
  time: 0.105; rss: 442MB	TypeckMir
  time: 0.004; rss: 442MB	SimplifyBranches
  time: 0.030; rss: 442MB	SimplifyCfg
time: 0.267; rss: 442MB	MIR cleanup and validation
time: 0.472; rss: 442MB	borrow checking
time: 0.024; rss: 442MB	reachability checking
time: 0.038; rss: 442MB	death checking
time: 0.000; rss: 442MB	unused lib feature checking
time: 0.180; rss: 442MB	lint checking
time: 0.000; rss: 442MB	resolving dependency formats
  time: 0.003; rss: 442MB	NoLandingPads
  time: 0.026; rss: 442MB	SimplifyCfg
  time: 0.064; rss: 452MB	EraseRegions
  time: 0.011; rss: 452MB	AddCallGuards
  time: 0.270; rss: 473MB	ElaborateDrops
  time: 0.003; rss: 473MB	NoLandingPads
  time: 0.052; rss: 473MB	SimplifyCfg
  time: 0.028; rss: 473MB	InstCombine
  time: 0.012; rss: 473MB	Deaggregator
  time: 0.002; rss: 473MB	CopyPropagation
  time: 0.034; rss: 473MB	SimplifyLocals
  time: 0.009; rss: 473MB	AddCallGuards
  time: 0.002; rss: 473MB	PreTrans
time: 0.515; rss: 473MB	MIR optimisations
  time: 0.064; rss: 481MB	write metadata
  time: 0.379; rss: 494MB	translation item collection
  time: 0.057; rss: 504MB	codegen unit partitioning
  time: 0.067; rss: 756MB	internalize symbols
time: 4.502; rss: 756MB	translation
time: 0.000; rss: 756MB	assert dep graph
time: 0.000; rss: 756MB	serialize dep graph
  time: 0.567; rss: 428MB	llvm function passes [0]
  time: 0.306; rss: 434MB	llvm module passes [0]
  time: 10.657; rss: 427MB	codegen passes [0]
  time: 0.000; rss: 427MB	codegen passes [0]
time: 12.292; rss: 427MB	LLVM passes
time: 0.000; rss: 427MB	serialize work products
time: 0.345; rss: 117MB	linking
done
