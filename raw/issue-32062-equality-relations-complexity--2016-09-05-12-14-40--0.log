commit 3f50b6342db87f4a8fb76e70f6ada07331e062a2
Merge: 58dc448 b9a8c1a
Author: bors <bors@rust-lang.org>
Date:   Mon Sep 5 08:13:32 2016 -0700

    Auto merge of #36200 - mattico:fix-llvm-linkage, r=arielb1
    
    Fix incorrect LLVM Linkage enum
    
    Followup of #33994 to actually work.
    
    The `Linkage` enum in librustc_llvm got out of sync with the version in LLVM and it caused two variants of the `#[linkage=""]` attribute to break.
    
    This adds the functions `LLVMRustGetLinkage` and `LLVMRustSetLinkage` which convert between the Rust Linkage enum and the LLVM one, which should stop this from breaking every time LLVM changes it.
    
    Possible remaining concerns:
    
    1. There could be a codegen test to make sure that the attributes are applied correctly (I don't know how to do this).
    2. ~~The test does not exercise the `appending` linkage. I can't figure out how to make a global static raw pointer to an array. This might not even be possible? If not we should probably remove appending linkage as its unusable in rust.~~ Appending linkage is not 'emittable' anyway.
    3. The test only runs on Linux.
    
    Fixes #33992
    
    r? @alexcrichton
rustc: ./issue-32062-equality-relations-complexity
/root/rust/x86_64-unknown-linux-gnu/stage2/bin/rustc issue-32062.rs -Ztime-passes -Zinput-stats
time: 0.000; rss: 42MB	parsing
Lines of code:             60
Pre-expansion node count:  582
time: 0.000; rss: 42MB	configuration
time: 0.000; rss: 42MB	recursion limit
time: 0.000; rss: 42MB	crate injection
time: 0.000; rss: 42MB	plugin loading
time: 0.000; rss: 42MB	plugin registration
time: 0.017; rss: 67MB	expansion
time: 0.000; rss: 67MB	maybe building test harness
time: 0.000; rss: 67MB	maybe creating a macro crate
time: 0.000; rss: 67MB	assigning node ids
Post-expansion node count: 595
time: 0.000; rss: 67MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 67MB	complete gated feature checking
time: 0.000; rss: 67MB	collecting defs
time: 0.002; rss: 67MB	external crate/lib resolution
time: 0.000; rss: 67MB	early lint checks
time: 0.000; rss: 67MB	AST validation
time: 0.000; rss: 67MB	name resolution
time: 0.000; rss: 67MB	lowering ast -> hir
time: 0.000; rss: 67MB	indexing hir
time: 0.000; rss: 67MB	attribute checking
time: 0.000; rss: 67MB	language item collection
time: 0.000; rss: 67MB	lifetime resolution
time: 0.000; rss: 67MB	looking for entry point
time: 0.000; rss: 67MB	looking for plugin registrar
time: 0.000; rss: 67MB	region resolution
time: 0.000; rss: 67MB	loop checking
time: 0.000; rss: 67MB	static item recursion checking
time: 0.000; rss: 67MB	compute_incremental_hashes_map
time: 0.000; rss: 67MB	load_dep_graph
time: 0.001; rss: 71MB	type collecting
time: 0.000; rss: 71MB	variance inference
time: 0.004; rss: 71MB	coherence checking
time: 0.005; rss: 71MB	wf checking
time: 0.000; rss: 71MB	item-types checking
time: 0.022; rss: 73MB	item-bodies checking
time: 0.000; rss: 73MB	drop-impl checking
time: 0.001; rss: 73MB	const checking
time: 0.000; rss: 73MB	privacy checking
time: 0.000; rss: 73MB	stability index
time: 0.000; rss: 73MB	intrinsic checking
time: 0.000; rss: 73MB	effect checking
time: 0.000; rss: 73MB	match checking
time: 0.000; rss: 73MB	liveness checking
time: 0.001; rss: 73MB	rvalue checking
time: 0.001; rss: 73MB	MIR dump
time: 0.000; rss: 73MB	MIR passes
time: 0.001; rss: 73MB	borrow checking
time: 0.000; rss: 73MB	reachability checking
time: 0.000; rss: 73MB	death checking
time: 0.000; rss: 73MB	stability checking
time: 0.000; rss: 73MB	unused lib feature checking
time: 0.000; rss: 73MB	lint checking
time: 0.001; rss: 73MB	resolving dependency formats
time: 0.004; rss: 73MB	Prepare MIR codegen passes
  time: 0.000; rss: 73MB	write metadata
  time: 0.041; rss: 73MB	translation item collection
  time: 0.000; rss: 73MB	codegen unit partitioning
  time: 0.000; rss: 77MB	internalize symbols
time: 0.092; rss: 77MB	translation
time: 0.000; rss: 77MB	assert dep graph
time: 0.000; rss: 77MB	serialize dep graph
  time: 0.000; rss: 77MB	llvm function passes [0]
  time: 0.000; rss: 77MB	llvm module passes [0]
  time: 0.009; rss: 82MB	codegen passes [0]
  time: 0.011; rss: 82MB	codegen passes [0]
time: 0.021; rss: 82MB	LLVM passes
time: 0.000; rss: 82MB	serialize work products
  time: 0.106; rss: 82MB	running linker
time: 0.106; rss: 82MB	linking
done
