commit eec30ea65792fd07826a931a9e0c5dfa3c050b2f
Merge: 2b7ea14 95b68aa
Author: bors <bors@rust-lang.org>
Date:   Sat Aug 13 23:37:11 2016 -0700

    Auto merge of #35453 - jseyfried:hygienize_metavariables, r=nrc
    
    macros: Make metavariables hygienic
    
    This PR makes metavariables hygienic. For example, consider:
    ```rust
    macro_rules! foo {
        ($x:tt) => { // Suppose that this token tree argument is always a metavariable.
            macro_rules! bar { ($x:expr, $y:expr) => { ($x, $y) } }
        }
    }
    
    fn main() {
        foo!($z); // This currently compiles.
        foo!($y); // This is an error today but compiles after this PR.
    }
    ```
    Today, the `macro_rules! bar { ... }` definition is only valid when the metavariable passed to `foo` is not `$y` (since it unhygienically conflicts with the `$y` in the definition of `bar`) or `$x` (c.f. #35450).
    
    After this PR, the definition of `bar` is always valid (and `bar!(a, b)` always expands to `(a, b)` as expected).
    
    This can break code that was allowed in #34925 (landed two weeks ago). For example,
    ```rust
    macro_rules! outer {
        ($t:tt) => {
            macro_rules! inner { ($i:item) => { $t } }
        }
    }
    
    outer!($i); // This `$i` should not interact with the `$i` in the definition of `inner!`.
    inner!(fn main() {}); // After this PR, this is an error ("unknown macro variable `i`").
    ```
    
    Due to the severe limitations on nested `macro_rules!` before #34925, this is not a breaking change for stable/beta.
    
    Fixes #35450.
    
    r? @nrc
rustc: ./regex-macros.0.1.30
cd regex_macros && cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling regex_macros v0.1.17 (file:///root/benchmarks/regex-macros.0.1.30/regex_macros)
time: 0.002; rss: 52MB	parsing
Lines of code:             639
Pre-expansion node count:  2088
time: 0.000; rss: 52MB	configuration
time: 0.000; rss: 52MB	recursion limit
time: 0.000; rss: 52MB	crate injection
time: 0.000; rss: 52MB	plugin loading
time: 0.000; rss: 52MB	plugin registration
time: 0.030; rss: 92MB	expansion
time: 0.000; rss: 92MB	maybe building test harness
time: 0.003; rss: 92MB	assigning node ids
Post-expansion node count: 69587
time: 0.000; rss: 92MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 92MB	complete gated feature checking
time: 0.000; rss: 92MB	collecting defs
time: 0.081; rss: 180MB	external crate/lib resolution
time: 0.002; rss: 180MB	early lint checks
time: 0.000; rss: 180MB	AST validation
time: 0.021; rss: 186MB	name resolution
time: 0.004; rss: 191MB	lowering ast -> hir
time: 0.001; rss: 190MB	indexing hir
time: 0.000; rss: 190MB	attribute checking
time: 0.001; rss: 184MB	language item collection
time: 0.000; rss: 184MB	lifetime resolution
time: 0.000; rss: 184MB	looking for entry point
time: 0.000; rss: 184MB	looking for plugin registrar
time: 0.002; rss: 187MB	region resolution
time: 0.000; rss: 187MB	loop checking
time: 0.000; rss: 187MB	static item recursion checking
time: 0.000; rss: 187MB	load_dep_graph
time: 0.012; rss: 188MB	type collecting
time: 0.000; rss: 188MB	variance inference
time: 0.010; rss: 189MB	coherence checking
time: 0.008; rss: 190MB	wf checking
time: 0.001; rss: 190MB	item-types checking
time: 0.751; rss: 208MB	item-bodies checking
makefile:2: recipe for target 'all' failed
done
