commit 753ea76336be2def223335c63d7b20188651a8c6
Merge: 3543a0f 6a4bb35
Author: bors <bors@rust-lang.org>
Date:   Tue Oct 18 01:49:13 2016 -0700

    Auto merge of #37083 - nnethercote:uleb128, r=eddyb
    
    Inline read_{un,}signed_leb128 and opaque::Decoder functions.
    
    `read_unsigned_leb128` is hot within rustc because it's heavily used
    during the reading of crate metadata. This commit tweaks its signature
    (and that of `read_signed_leb128`, for consistency) so it can increment
    the buffer index directly instead of maintaining its own copy, the
    change in which is then used by the caller to advance the index.
    
    This reduces the instruction count (as measured by Cachegrind) for some
    benchmarks a bit, e.g. hyper-0.5.0 by 0.7%.
rustc: ./jld-day15-parser
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling day15 v0.1.0 (file:///root/benchmarks/jld-day15-parser)
time: 0.000; rss: 41MB	parsing
Lines of code:             72
Pre-expansion node count:  654
time: 0.000; rss: 41MB	recursion limit
time: 0.000; rss: 41MB	crate injection
time: 0.000; rss: 41MB	plugin loading
time: 0.000; rss: 41MB	plugin registration
time: 0.014; rss: 65MB	expansion
time: 0.000; rss: 65MB	maybe building test harness
time: 0.000; rss: 65MB	maybe creating a macro crate
Post-expansion node count: 1155
time: 0.000; rss: 65MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 65MB	complete gated feature checking
time: 0.000; rss: 65MB	early lint checks
time: 0.000; rss: 65MB	AST validation
time: 0.002; rss: 65MB	name resolution
time: 0.000; rss: 65MB	lowering ast -> hir
time: 0.000; rss: 65MB	indexing hir
time: 0.000; rss: 65MB	attribute checking
time: 0.000; rss: 65MB	language item collection
time: 0.000; rss: 65MB	lifetime resolution
time: 0.000; rss: 65MB	looking for entry point
time: 0.000; rss: 65MB	looking for plugin registrar
time: 0.000; rss: 65MB	region resolution
time: 0.000; rss: 65MB	loop checking
time: 0.000; rss: 65MB	static item recursion checking
time: 0.000; rss: 65MB	compute_incremental_hashes_map
time: 0.000; rss: 65MB	load_dep_graph
time: 0.001; rss: 65MB	type collecting
time: 0.000; rss: 65MB	variance inference
time: 0.004; rss: 71MB	coherence checking
time: 0.004; rss: 71MB	wf checking
time: 0.000; rss: 71MB	item-types checking
time: 0.027; rss: 73MB	item-bodies checking
time: 0.000; rss: 73MB	drop-impl checking
time: 0.001; rss: 73MB	const checking
time: 0.000; rss: 73MB	privacy checking
time: 0.000; rss: 73MB	stability index
time: 0.000; rss: 73MB	intrinsic checking
time: 0.000; rss: 73MB	effect checking
time: 0.000; rss: 73MB	match checking
time: 0.000; rss: 73MB	liveness checking
time: 0.000; rss: 73MB	rvalue checking
time: 0.001; rss: 73MB	MIR dump
  time: 0.000; rss: 73MB	SimplifyCfg
  time: 0.000; rss: 73MB	QualifyAndPromoteConstants
  time: 0.000; rss: 73MB	TypeckMir
  time: 0.000; rss: 73MB	SimplifyBranches
  time: 0.000; rss: 73MB	SimplifyCfg
time: 0.001; rss: 73MB	MIR passes
time: 0.001; rss: 73MB	borrow checking
time: 0.000; rss: 73MB	reachability checking
time: 0.000; rss: 73MB	death checking
time: 0.000; rss: 73MB	stability checking
time: 0.000; rss: 73MB	unused lib feature checking
time: 0.003; rss: 75MB	lint checking
time: 0.001; rss: 75MB	resolving dependency formats
  time: 0.000; rss: 75MB	NoLandingPads
  time: 0.000; rss: 75MB	SimplifyCfg
  time: 0.000; rss: 75MB	EraseRegions
  time: 0.000; rss: 75MB	AddCallGuards
  time: 0.001; rss: 75MB	ElaborateDrops
  time: 0.000; rss: 75MB	NoLandingPads
  time: 0.000; rss: 75MB	SimplifyCfg
  time: 0.000; rss: 75MB	InstCombine
  time: 0.002; rss: 75MB	Deaggregator
  time: 0.000; rss: 75MB	CopyPropagation
  time: 0.000; rss: 75MB	AddCallGuards
  time: 0.000; rss: 75MB	PreTrans
time: 0.003; rss: 75MB	Prepare MIR codegen passes
  time: 0.000; rss: 75MB	write metadata
  time: 0.142; rss: 81MB	translation item collection
  time: 0.003; rss: 81MB	codegen unit partitioning
  time: 0.003; rss: 92MB	internalize symbols
time: 0.657; rss: 92MB	translation
time: 0.000; rss: 92MB	assert dep graph
time: 0.000; rss: 92MB	serialize dep graph
  time: 0.018; rss: 86MB	llvm function passes [0]
  time: 0.001; rss: 86MB	llvm module passes [0]
  time: 0.348; rss: 93MB	codegen passes [0]
  time: 0.000; rss: 92MB	codegen passes [0]
time: 0.369; rss: 92MB	LLVM passes
time: 0.000; rss: 92MB	serialize work products
  time: 0.083; rss: 83MB	running linker
time: 0.084; rss: 83MB	linking
done
