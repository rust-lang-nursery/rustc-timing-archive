commit 6bc551a261de4b62a50761e624dc8fd27c85c4ce
Merge: ebeee0e b8d8ab8
Author: bors <bors@rust-lang.org>
Date:   Mon Dec 5 02:48:03 2016 +0000

    Auto merge of #38093 - mikhail-m1:stack-overflow, r=arielb1
    
    fix stack overflow by enum and cont issue #36163
    
    some paths were skipped while checking for recursion.
    
    I fixed bug reproduces on win64 cargo test. In previous PR #36458 time complexity was exponential in case of linked const values. Now it's linear.
    
    r? @alexcrichton
rustc: ./issue-32278-big-array-of-strings
cargo rustc  -- -Ztime-passes -Zinput-stats
time: 0.099; rss: 61MB	parsing
Lines of code:             65577
Pre-expansion node count:  65552
time: 0.000; rss: 61MB	recursion limit
time: 0.000; rss: 61MB	crate injection
time: 0.000; rss: 61MB	plugin loading
time: 0.000; rss: 61MB	plugin registration
time: 0.024; rss: 85MB	expansion
time: 0.000; rss: 85MB	maybe building test harness
time: 0.000; rss: 85MB	maybe creating a macro crate
Post-expansion node count: 65565
time: 0.000; rss: 85MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 85MB	complete gated feature checking
time: 0.004; rss: 85MB	early lint checks
time: 0.000; rss: 85MB	AST validation
time: 0.002; rss: 85MB	name resolution
time: 0.003; rss: 93MB	lowering ast -> hir
time: 0.001; rss: 97MB	indexing hir
time: 0.000; rss: 97MB	attribute checking
time: 0.000; rss: 86MB	language item collection
time: 0.000; rss: 86MB	lifetime resolution
time: 0.000; rss: 86MB	looking for entry point
time: 0.000; rss: 86MB	looking for plugin registrar
time: 0.007; rss: 92MB	region resolution
time: 0.000; rss: 92MB	loop checking
time: 0.000; rss: 92MB	static item recursion checking
time: 0.036; rss: 92MB	compute_incremental_hashes_map
time: 0.000; rss: 92MB	load_dep_graph
time: 0.000; rss: 92MB	stability index
time: 0.000; rss: 92MB	stability checking
time: 0.000; rss: 92MB	type collecting
time: 0.000; rss: 92MB	variance inference
time: 0.000; rss: 92MB	impl wf inference
time: 0.003; rss: 94MB	coherence checking
time: 0.000; rss: 94MB	wf checking
time: 0.513; rss: 106MB	item-types checking
time: 0.000; rss: 106MB	item-bodies checking
time: 0.000; rss: 106MB	drop-impl checking
time: 0.020; rss: 105MB	const checking
time: 0.001; rss: 105MB	privacy checking
time: 0.000; rss: 105MB	intrinsic checking
time: 0.000; rss: 105MB	effect checking
time: 0.000; rss: 105MB	match checking
time: 0.000; rss: 105MB	liveness checking
time: 0.000; rss: 105MB	rvalue checking
time: 0.034; rss: 113MB	MIR dump
  time: 0.000; rss: 113MB	SimplifyCfg
  time: 0.001; rss: 113MB	QualifyAndPromoteConstants
  time: 0.001; rss: 113MB	TypeckMir
  time: 0.000; rss: 113MB	SimplifyBranches
  time: 0.000; rss: 113MB	SimplifyCfg
time: 0.002; rss: 113MB	MIR cleanup and validation
time: 0.001; rss: 113MB	borrow checking
time: 0.000; rss: 113MB	reachability checking
time: 0.000; rss: 113MB	death checking
time: 0.000; rss: 113MB	unused lib feature checking
time: 0.023; rss: 113MB	lint checking
time: 0.001; rss: 113MB	resolving dependency formats
  time: 0.000; rss: 113MB	NoLandingPads
  time: 0.000; rss: 113MB	SimplifyCfg
  time: 0.001; rss: 113MB	EraseRegions
  time: 0.000; rss: 113MB	AddCallGuards
  time: 0.000; rss: 113MB	ElaborateDrops
  time: 0.000; rss: 113MB	NoLandingPads
  time: 0.000; rss: 113MB	SimplifyCfg
  time: 0.000; rss: 113MB	InstCombine
  time: 0.000; rss: 113MB	Deaggregator
  time: 0.000; rss: 113MB	CopyPropagation
  time: 0.000; rss: 113MB	SimplifyLocals
  time: 0.000; rss: 113MB	AddCallGuards
  time: 0.000; rss: 113MB	PreTrans
time: 0.001; rss: 113MB	MIR optimisations
  time: 0.000; rss: 114MB	write metadata
  time: 0.000; rss: 114MB	translation item collection
  time: 0.000; rss: 114MB	codegen unit partitioning
  time: 0.001; rss: 125MB	internalize symbols
time: 0.056; rss: 125MB	translation
time: 0.000; rss: 125MB	assert dep graph
time: 0.000; rss: 125MB	serialize dep graph
  time: 0.008; rss: 91MB	llvm function passes [0]
  time: 0.000; rss: 91MB	llvm module passes [0]
  time: 0.191; rss: 90MB	codegen passes [0]
  time: 0.000; rss: 90MB	codegen passes [0]
time: 0.201; rss: 90MB	LLVM passes
time: 0.000; rss: 90MB	serialize work products
  time: 0.161; rss: 82MB	running linker
time: 0.163; rss: 82MB	linking
done
