commit 9a101d8987ea66795db6623f42788db856e7efc8
Merge: 24175e8 5c0eb6e
Author: bors <bors@rust-lang.org>
Date:   Sat Dec 3 11:04:01 2016 +0000

    Auto merge of #38059 - arielb1:no-mere-overflow, r=nikomatsakis
    
    evaluate obligations in LIFO order during closure projection
    
    This is an annoying gotcha with the projection cache's handling of
    nested obligations.
    
    Nested projection obligations enter the issue in this case:
    ```
    DEBUG:rustc::traits::project: AssociatedTypeNormalizer: depth=3
    normalized
    <std::iter::Map<std::ops::Range<i32>,
    [closure@not-a-recursion-error.rs:5:30: 5:53]> as
    std::iter::IntoIterator>::Item to _#7t with 12 add'l obligations
    ```
    
    Here the normalization result is the result of the nested impl
    `<[closure@not-a-recursion-error.rs:5:30: 5:53] as FnMut(i32)>::Output`,
    which is an additional obligation that is a part of "add'l obligations".
    
    By itself, this is proper behaviour - the additional obligation is
    returned, and the RFC 447 rules ensure that it is processed before the
    output `#_7t` is used in any way.
    
    However, the projection cache breaks this - it caches the
    `<std::iter::Map<std::ops::Range<i32>,[closure@not-a-recursion-error.rs:5:30:
    5:53]> as std::iter::IntoIterator>::Item = #_7t` resolution. Now
    everybody else that attempts to look up the projection will just get
    `#_7t` *without* any additional obligations. This obviously causes all
    sorts of trouble (here a spurious `EvaluatedToAmbig` results in
    specializations not being discarded
    [here](https://github.com/rust-lang/rust/blob/9ca50bd4d50b55456e88a8c3ad8fcc9798f57522/src/librustc/traits/select.rs#L1705)).
    
    The compiler works even with this projection cache gotcha because in most
    cases during "one-pass evaluation". we tend to process obligations in LIFO
    order - after an obligation is added to the cache, we process its nested
    obligations before we do anything else (and if we have a cycle, we handle
    it specifically) - which makes sure the inference variables are resolved
    before they are used.
    
    That "LIFO" order That was not done when projecting out of a closure, so
    let's just fix that for the time being.
    
    Fixes #38033.
    
    Beta-nominating because regression.
    
    r? @nikomatsakis
rustc: ./inflate-0.1.0
cargo rustc  -- -Ztime-passes -Zinput-stats
time: 0.003; rss: 44MB	parsing
Lines of code:             956
Pre-expansion node count:  4736
time: 0.000; rss: 44MB	recursion limit
time: 0.000; rss: 44MB	crate injection
time: 0.000; rss: 44MB	plugin loading
time: 0.000; rss: 44MB	plugin registration
time: 0.058; rss: 73MB	expansion
time: 0.000; rss: 73MB	maybe building test harness
time: 0.000; rss: 73MB	maybe creating a macro crate
Post-expansion node count: 55748
time: 0.000; rss: 73MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 73MB	complete gated feature checking
time: 0.002; rss: 73MB	early lint checks
time: 0.000; rss: 73MB	AST validation
time: 0.007; rss: 75MB	name resolution
time: 0.006; rss: 79MB	lowering ast -> hir
time: 0.001; rss: 79MB	indexing hir
time: 0.000; rss: 79MB	attribute checking
time: 0.000; rss: 76MB	language item collection
time: 0.001; rss: 76MB	lifetime resolution
time: 0.000; rss: 76MB	looking for entry point
time: 0.000; rss: 76MB	looking for plugin registrar
time: 0.002; rss: 76MB	region resolution
time: 0.000; rss: 76MB	loop checking
time: 0.000; rss: 76MB	static item recursion checking
time: 0.018; rss: 76MB	compute_incremental_hashes_map
time: 0.000; rss: 76MB	load_dep_graph
time: 0.000; rss: 76MB	stability index
time: 0.001; rss: 76MB	stability checking
time: 0.001; rss: 78MB	type collecting
time: 0.000; rss: 78MB	variance inference
time: 0.000; rss: 78MB	impl wf inference
time: 0.005; rss: 80MB	coherence checking
time: 0.001; rss: 80MB	wf checking
time: 0.002; rss: 80MB	item-types checking
time: 1.563; rss: 86MB	item-bodies checking
time: 0.000; rss: 86MB	drop-impl checking
time: 0.014; rss: 86MB	const checking
time: 0.001; rss: 86MB	privacy checking
time: 0.000; rss: 86MB	intrinsic checking
time: 0.000; rss: 86MB	effect checking
time: 0.002; rss: 86MB	match checking
time: 0.064; rss: 86MB	liveness checking
time: 0.011; rss: 86MB	rvalue checking
time: 0.034; rss: 106MB	MIR dump
  time: 0.007; rss: 106MB	SimplifyCfg
  time: 0.005; rss: 107MB	QualifyAndPromoteConstants
  time: 0.007; rss: 107MB	TypeckMir
  time: 0.000; rss: 107MB	SimplifyBranches
  time: 0.002; rss: 107MB	SimplifyCfg
time: 0.021; rss: 107MB	MIR cleanup and validation
time: 0.197; rss: 109MB	borrow checking
time: 0.000; rss: 109MB	reachability checking
time: 0.002; rss: 109MB	death checking
time: 0.000; rss: 109MB	unused lib feature checking
time: 0.015; rss: 110MB	lint checking
time: 0.000; rss: 110MB	resolving dependency formats
  time: 0.000; rss: 110MB	NoLandingPads
  time: 0.002; rss: 110MB	SimplifyCfg
  time: 0.002; rss: 110MB	EraseRegions
  time: 0.001; rss: 110MB	AddCallGuards
  time: 0.221; rss: 112MB	ElaborateDrops
  time: 0.000; rss: 112MB	NoLandingPads
  time: 0.006; rss: 111MB	SimplifyCfg
  time: 0.003; rss: 111MB	InstCombine
  time: 0.000; rss: 111MB	Deaggregator
  time: 0.000; rss: 111MB	CopyPropagation
  time: 0.003; rss: 111MB	SimplifyLocals
  time: 0.001; rss: 111MB	AddCallGuards
  time: 0.000; rss: 111MB	PreTrans
time: 0.239; rss: 111MB	MIR optimisations
  time: 0.001; rss: 111MB	write metadata
  time: 0.008; rss: 115MB	translation item collection
  time: 0.001; rss: 115MB	codegen unit partitioning
  time: 0.001; rss: 127MB	internalize symbols
time: 0.145; rss: 127MB	translation
time: 0.000; rss: 127MB	assert dep graph
time: 0.000; rss: 127MB	serialize dep graph
  time: 0.027; rss: 92MB	llvm function passes [0]
  time: 0.007; rss: 92MB	llvm module passes [0]
  time: 0.654; rss: 100MB	codegen passes [0]
  time: 0.000; rss: 100MB	codegen passes [0]
time: 0.721; rss: 100MB	LLVM passes
time: 0.000; rss: 100MB	serialize work products
time: 0.019; rss: 84MB	linking
done
