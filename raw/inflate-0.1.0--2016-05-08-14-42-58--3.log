commit ebe6da34ffc72a701f4189ef7be5ab2c1cb6e8c9
Merge: cae42a4 ca03b81
Author: bors <bors@rust-lang.org>
Date:   Sun May 8 09:13:19 2016 -0700

    Auto merge of #33414 - Nercury:master, r=alexcrichton
    
    Add armv7-linux-androideabi target
    
    This PR adds `armv7-linux-androideabi` target that matches `armeabi-v7a` Android ABI, ~~downscales `arm-linux-androideabi` target to match `armeabi` Android ABI~~ (TBD later if needed).
    
    This should allow us to get the best performance from every [Android ABI level](http://developer.android.com/ndk/guides/abis.html).
    
    Currently existing target `arm-linux-androideabi` started gaining features out of the supported range of [android `armeabi`](http://developer.android.com/ndk/guides/abis.html). While android compiler does not use a different target for later supported `armv7` architecture, it has distinct ABI name `armeabi-v7a`. We decided to add rust target `armv7-linux-androideabi` to match it.
    
    Note that `NEON`, `VFPv3-D32`, and `ThumbEE` instruction sets are not added, because not all android devices are guaranteed to support all or some of these, and [their availability should be checked at runtime](http://developer.android.com/ndk/guides/abis.html#v7a).
    
    ~~This reduces performance of existing `arm-linux-androideabi` and may make it _much_ slower (we are talking more than order of magnitude in some random ad-hoc fp benchmark that I did).~~
    
    Part of #33278.
rustc: ./inflate-0.1.0
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling inflate v0.1.0 (file:///root/benchmarks/inflate-0.1.0)
time: 0.004; rss: 46MB	parsing
Lines of code:             956
Pre-expansion node count:  4761
time: 0.001; rss: 46MB	configuration 1
time: 0.000; rss: 46MB	recursion limit
time: 0.000; rss: 46MB	crate injection
time: 0.003; rss: 52MB	macro loading
time: 0.000; rss: 52MB	plugin loading
time: 0.000; rss: 52MB	plugin registration
time: 0.083; rss: 60MB	expansion
time: 0.009; rss: 60MB	configuration 2
time: 0.000; rss: 60MB	gated configuration checking
time: 0.004; rss: 60MB	maybe building test harness
time: 0.004; rss: 60MB	prelude injection
time: 0.000; rss: 60MB	checking that all macro invocations are gone
time: 0.000; rss: 60MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 60MB	complete gated feature checking
Post-expansion node count: 54797
time: 0.004; rss: 60MB	assigning node ids
time: 0.005; rss: 62MB	collecting defs
time: 0.001; rss: 62MB	external crate/lib resolution
time: 0.009; rss: 66MB	lowering ast -> hir
time: 0.001; rss: 66MB	indexing hir
time: 0.001; rss: 66MB	attribute checking
time: 0.003; rss: 66MB	early lint checks
time: 0.001; rss: 63MB	language item collection
time: 0.011; rss: 74MB	name resolution
time: 0.001; rss: 74MB	lifetime resolution
time: 0.000; rss: 74MB	looking for entry point
time: 0.000; rss: 74MB	looking for plugin registrar
time: 0.003; rss: 74MB	region resolution
time: 0.000; rss: 74MB	loop checking
time: 0.001; rss: 74MB	static item recursion checking
time: 0.000; rss: 74MB	load_dep_graph
time: 0.001; rss: 75MB	type collecting
time: 0.000; rss: 75MB	variance inference
time: 0.010; rss: 88MB	coherence checking
time: 0.002; rss: 88MB	wf checking
time: 0.002; rss: 90MB	item-types checking
time: 2.888; rss: 111MB	item-bodies checking
time: 0.000; rss: 111MB	drop-impl checking
time: 0.014; rss: 111MB	const checking
time: 0.001; rss: 111MB	privacy checking
time: 0.000; rss: 111MB	stability index
time: 0.000; rss: 111MB	intrinsic checking
time: 0.001; rss: 111MB	effect checking
time: 0.003; rss: 111MB	match checking
time: 0.314; rss: 111MB	liveness checking
time: 0.009; rss: 111MB	rvalue checking
time: 0.035; rss: 123MB	MIR dump
time: 0.015; rss: 119MB	MIR passes
time: 0.211; rss: 123MB	borrow checking
time: 0.000; rss: 123MB	reachability checking
time: 0.003; rss: 123MB	death checking
time: 0.002; rss: 123MB	stability checking
time: 0.000; rss: 123MB	unused lib feature checking
time: 0.021; rss: 124MB	lint checking
time: 0.000; rss: 124MB	resolving dependency formats
time: 0.005; rss: 122MB	Prepare MIR codegen passes
  time: 0.010; rss: 126MB	translation item collection
  time: 0.001; rss: 126MB	codegen unit partitioning
  time: 0.003; rss: 145MB	write metadata
time: 0.362; rss: 138MB	translation
time: 0.000; rss: 138MB	assert dep graph
time: 0.000; rss: 138MB	serialize dep graph
  time: 0.025; rss: 104MB	llvm function passes [0]
  time: 0.005; rss: 105MB	llvm module passes [0]
  time: 0.494; rss: 110MB	codegen passes [0]
  time: 0.000; rss: 100MB	codegen passes [0]
time: 0.566; rss: 99MB	LLVM passes
time: 0.033; rss: 99MB	linking
done
