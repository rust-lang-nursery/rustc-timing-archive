commit 1cdc0fb11af12c04fb4b1984615f03b11a60decc
Merge: 8991ffc 9482bce
Author: bors <bors@rust-lang.org>
Date:   Sun Oct 2 14:13:27 2016 -0700

    Auto merge of #36904 - camlorn:field_offsets_refactor, r=eddyb
    
    Refactor layout to store offsets of fields, not offsets after fields
    
    This is the next PR moving us towards being able to reorder struct fields.
    
    The old code implicitly stored the offset of the first field.  This is inadequate because the first field may no longer be offset 0 in future.  This PR refactors `layout` to use a `offsets` vector instead of a `offset_after_field` vector.
rustc: ./syntex-0.42.2-incr-clean
RUSTFLAGS="-Z incremental=incr" \
    cargo rustc -p syntex_syntax -- -Ztime-passes -Zinput-stats -Z incremental-info
   Compiling syntex_syntax v0.42.0
time: 0.108; rss: 75MB	parsing
Lines of code:             33687
Pre-expansion node count:  224033
time: 0.000; rss: 75MB	recursion limit
time: 0.000; rss: 75MB	crate injection
time: 0.000; rss: 75MB	plugin loading
time: 0.000; rss: 75MB	plugin registration
time: 0.270; rss: 148MB	expansion
time: 0.000; rss: 148MB	maybe building test harness
time: 0.006; rss: 148MB	maybe creating a macro crate
Post-expansion node count: 641571
time: 0.000; rss: 148MB	checking for inline asm in case the target doesn't support it
time: 0.013; rss: 148MB	complete gated feature checking
time: 0.023; rss: 148MB	early lint checks
time: 0.007; rss: 148MB	AST validation
time: 0.084; rss: 162MB	name resolution
time: 0.050; rss: 202MB	lowering ast -> hir
time: 0.009; rss: 211MB	indexing hir
time: 0.006; rss: 211MB	attribute checking
time: 0.006; rss: 161MB	language item collection
time: 0.012; rss: 161MB	lifetime resolution
time: 0.000; rss: 161MB	looking for entry point
time: 0.000; rss: 161MB	looking for plugin registrar
time: 0.044; rss: 172MB	region resolution
time: 0.006; rss: 172MB	loop checking
time: 0.006; rss: 172MB	static item recursion checking
time: 0.298; rss: 173MB	compute_incremental_hashes_map
time: 0.000; rss: 173MB	load_dep_graph
time: 0.080; rss: 176MB	type collecting
time: 0.001; rss: 176MB	variance inference
time: 0.039; rss: 179MB	coherence checking
time: 0.099; rss: 182MB	wf checking
time: 0.193; rss: 188MB	item-types checking
time: 3.953; rss: 244MB	item-bodies checking
time: 0.000; rss: 244MB	drop-impl checking
time: 0.316; rss: 243MB	const checking
time: 0.055; rss: 243MB	privacy checking
time: 0.007; rss: 243MB	stability index
time: 0.022; rss: 243MB	intrinsic checking
time: 0.019; rss: 244MB	effect checking
time: 0.056; rss: 244MB	match checking
time: 0.054; rss: 239MB	liveness checking
time: 0.287; rss: 239MB	rvalue checking
time: 0.418; rss: 428MB	MIR dump
  time: 0.057; rss: 429MB	SimplifyCfg
  time: 0.084; rss: 429MB	QualifyAndPromoteConstants
  time: 0.113; rss: 429MB	TypeckMir
  time: 0.004; rss: 429MB	SimplifyBranches
  time: 0.036; rss: 430MB	SimplifyCfg
time: 0.295; rss: 430MB	MIR passes
time: 0.702; rss: 430MB	borrow checking
time: 0.018; rss: 430MB	reachability checking
time: 0.045; rss: 430MB	death checking
time: 0.042; rss: 432MB	stability checking
time: 0.000; rss: 432MB	unused lib feature checking
time: 0.219; rss: 432MB	lint checking
time: 0.000; rss: 432MB	resolving dependency formats
  time: 0.003; rss: 432MB	NoLandingPads
  time: 0.027; rss: 432MB	SimplifyCfg
  time: 0.072; rss: 438MB	EraseRegions
  time: 0.011; rss: 438MB	AddCallGuards
  time: 1.100; rss: 457MB	ElaborateDrops
  time: 0.003; rss: 457MB	NoLandingPads
  time: 0.052; rss: 457MB	SimplifyCfg
  time: 0.030; rss: 457MB	InstCombine
  time: 0.012; rss: 457MB	Deaggregator
  time: 0.003; rss: 457MB	CopyPropagation
  time: 0.009; rss: 457MB	AddCallGuards
  time: 0.003; rss: 457MB	PreTrans
time: 1.324; rss: 457MB	Prepare MIR codegen passes
  time: 0.264; rss: 465MB	write metadata
  time: 0.478; rss: 475MB	translation item collection
  time: 0.067; rss: 480MB	codegen unit partitioning
  time: 0.058; rss: 728MB	internalize symbols
time: 5.215; rss: 607MB	translation
time: 0.000; rss: 607MB	assert dep graph
time: 0.000; rss: 607MB	serialize dep graph
incremental: re-using 0 out of 1 modules
  time: 0.510; rss: 417MB	llvm function passes [0]
  time: 0.243; rss: 423MB	llvm module passes [0]
  time: 10.026; rss: 420MB	codegen passes [0]
  time: 0.001; rss: 416MB	codegen passes [0]
time: 11.511; rss: 416MB	LLVM passes
time: 0.000; rss: 416MB	serialize work products
time: 0.660; rss: 107MB	linking
done
