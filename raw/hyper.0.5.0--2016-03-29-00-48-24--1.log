commit a11129701c873d96fe0816e4c8b55510efebe96e
Merge: cad964a 221d0fb
Author: bors <bors@rust-lang.org>
Date:   Mon Mar 28 20:50:42 2016 -0700

    Auto merge of #32479 - eddyb:eof-not-even-twice, r=nikomatsakis
    
    Prevent bumping the parser past the EOF.
    
    Makes `Parser::bump` after EOF into an ICE, forcing callers to avoid repeated EOF bumps.
    This ICE is intended to break infinite loops where EOF wasn't stopping the loop.
    
    For example, the handling of EOF in `parse_trait_items`' recovery loop fixes #32446.
    But even without this specific fix, the ICE is triggered, which helps diagnosis and UX.
    
    This is a `[breaking-change]` for plugins authors who eagerly eat multiple EOFs.
    See https://github.com/docopt/docopt.rs/pull/171 for such an example and the necessary fix.
rustc: ./hyper.0.5.0
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling hyper v0.5.0 (file:///root/benchmarks/hyper.0.5.0)
time: 0.030; rss: 46MB	parsing
Lines of code:             9154
Pre-expansion node count:  45594
time: 0.010; rss: 46MB	configuration 1
time: 0.000; rss: 46MB	recursion limit
time: 0.000; rss: 46MB	gated macro checking
time: 0.000; rss: 46MB	crate injection
time: 0.005; rss: 52MB	macro loading
time: 0.000; rss: 52MB	plugin loading
time: 0.000; rss: 52MB	plugin registration
time: 0.189; rss: 61MB	expansion
time: 0.006; rss: 61MB	complete gated feature checking 1
time: 0.035; rss: 61MB	configuration 2
time: 0.000; rss: 61MB	gated configuration checking
time: 0.014; rss: 61MB	maybe building test harness
time: 0.011; rss: 61MB	prelude injection
time: 0.001; rss: 61MB	checking that all macro invocations are gone
time: 0.000; rss: 61MB	checking for inline asm in case the target doesn't support it
time: 0.002; rss: 61MB	complete gated feature checking 2
time: 0.001; rss: 61MB	const fn bodies and arguments
Post-expansion node count: 107125
time: 0.010; rss: 61MB	assigning node ids
time: 0.011; rss: 67MB	lowering ast -> hir
time: 0.005; rss: 69MB	indexing hir
time: 0.001; rss: 69MB	attribute checking
time: 0.007; rss: 69MB	early lint checks
time: 0.004; rss: 66MB	external crate/lib resolution
time: 0.001; rss: 66MB	language item collection
time: 0.024; rss: 84MB	resolution
time: 0.002; rss: 84MB	lifetime resolution
time: 0.000; rss: 84MB	looking for entry point
time: 0.000; rss: 84MB	looking for plugin registrar
time: 0.006; rss: 86MB	region resolution
time: 0.001; rss: 86MB	loop checking
time: 0.001; rss: 86MB	static item recursion checking
time: 0.013; rss: 89MB	type collecting
time: 0.000; rss: 89MB	variance inference
time: 0.528; rss: 112MB	coherence checking
time: 0.078; rss: 112MB	wf checking
time: 0.029; rss: 115MB	item-types checking
time: 0.483; rss: 134MB	item-bodies checking
time: 0.000; rss: 134MB	drop-impl checking
time: 0.036; rss: 136MB	const checking
time: 0.009; rss: 136MB	privacy checking
time: 0.001; rss: 136MB	stability index
time: 0.004; rss: 136MB	intrinsic checking
time: 0.002; rss: 136MB	effect checking
time: 0.012; rss: 136MB	match checking
time: 0.005; rss: 136MB	liveness checking
time: 0.032; rss: 136MB	rvalue checking
time: 0.047; rss: 142MB	MIR dump
time: 0.027; rss: 144MB	MIR passes
time: 0.063; rss: 144MB	borrow checking
time: 0.003; rss: 144MB	reachability checking
time: 0.005; rss: 144MB	death checking
time: 0.005; rss: 144MB	stability checking
time: 0.000; rss: 144MB	unused lib feature checking
time: 0.047; rss: 144MB	lint checking
time: 0.000; rss: 144MB	resolving dependency formats
  time: 0.183; rss: 158MB	translation item collection
  time: 0.138; rss: 288MB	write metadata
time: 1.444; rss: 288MB	translation
  time: 0.098; rss: 169MB	llvm function passes [0]
  time: 0.047; rss: 170MB	llvm module passes [0]
  time: 1.622; rss: 173MB	codegen passes [0]
  time: 0.001; rss: 123MB	codegen passes [0]
time: 1.965; rss: 123MB	LLVM passes
time: 0.171; rss: 120MB	linking
done
