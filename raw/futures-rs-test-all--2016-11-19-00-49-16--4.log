commit 49d3fd3b38cd838b241858baaaa6162666badba1
Merge: ac635aa c722a1e
Author: bors <bors@rust-lang.org>
Date:   Fri Nov 18 19:21:47 2016 -0800

    Auto merge of #37787 - michaelwoerister:macro-def-ich, r=nikomatsakis
    
    ICH: Handle MacroDef HIR instances.
    
    As of recently, `hir::MacroDef` instances are exported in crate metadata, which means we also store their ICH when doing incremental compilation. Even though exported macro definitions should not (yet) interact with incremental compilation, the ICH is also used for the general purpose crate hash, where macros should be included.
    
    This PR implements ICH computation for `MacroDef`. In theory, the ICH of these MacroDefs is less stable than that of other HIR items, since I opted to just call the compiler-generated `Hash::hash()` for `Token::Interpolated` variants. `Token::Interpolated` contains AST data structures and it would have been a lot of effort to expand ICH computation to the AST too. Since quasi-quoting is rarely used *and* it would only make a difference if incremental compilation was extended to macros, the simpler implementation seemed like a good idea.
    
    This fixes the problem reported in https://github.com/rust-lang/rust/issues/37756. The test still fails because of broken codegen-unit support though.
    
    r? @nikomatsakis
rustc: ./futures-rs-test-all
cargo rustc --test all  -- -Ztime-passes -Zinput-stats
   Compiling futures v0.1.0 (file:///root/benchmarks/futures-rs-test-all)
time: 0.002; rss: 43MB	parsing
Lines of code:             412
Pre-expansion node count:  5286
time: 0.000; rss: 43MB	recursion limit
time: 0.000; rss: 43MB	crate injection
time: 0.000; rss: 43MB	plugin loading
time: 0.000; rss: 43MB	plugin registration
time: 0.019; rss: 68MB	expansion
time: 0.001; rss: 68MB	maybe building test harness
time: 0.000; rss: 68MB	maybe creating a macro crate
Post-expansion node count: 10387
time: 0.000; rss: 68MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 68MB	complete gated feature checking
time: 0.000; rss: 68MB	early lint checks
time: 0.000; rss: 68MB	AST validation
time: 0.003; rss: 68MB	name resolution
time: 0.000; rss: 68MB	lowering ast -> hir
time: 0.000; rss: 68MB	indexing hir
time: 0.000; rss: 68MB	attribute checking
time: 0.000; rss: 68MB	language item collection
time: 0.000; rss: 68MB	lifetime resolution
time: 0.000; rss: 68MB	looking for entry point
time: 0.000; rss: 68MB	looking for plugin registrar
time: 0.000; rss: 68MB	region resolution
time: 0.000; rss: 68MB	loop checking
time: 0.000; rss: 68MB	static item recursion checking
time: 0.003; rss: 68MB	compute_incremental_hashes_map
time: 0.000; rss: 68MB	load_dep_graph
time: 0.004; rss: 68MB	type collecting
time: 0.000; rss: 68MB	variance inference
time: 0.000; rss: 68MB	impl wf inference
time: 0.003; rss: 72MB	coherence checking
time: 0.007; rss: 75MB	wf checking
time: 0.002; rss: 75MB	item-types checking
time: 0.104; rss: 79MB	item-bodies checking
time: 0.000; rss: 79MB	drop-impl checking
time: 0.003; rss: 78MB	const checking
time: 0.000; rss: 78MB	privacy checking
time: 0.000; rss: 78MB	stability index
time: 0.000; rss: 78MB	intrinsic checking
time: 0.000; rss: 78MB	effect checking
time: 0.001; rss: 78MB	match checking
time: 0.001; rss: 78MB	liveness checking
time: 0.002; rss: 78MB	rvalue checking
time: 0.006; rss: 79MB	MIR dump
  time: 0.001; rss: 79MB	SimplifyCfg
  time: 0.001; rss: 79MB	QualifyAndPromoteConstants
  time: 0.002; rss: 79MB	TypeckMir
  time: 0.000; rss: 79MB	SimplifyBranches
  time: 0.000; rss: 79MB	SimplifyCfg
time: 0.004; rss: 79MB	MIR cleanup and validation
time: 0.006; rss: 82MB	borrow checking
time: 0.000; rss: 82MB	reachability checking
time: 0.000; rss: 82MB	death checking
time: 0.000; rss: 82MB	stability checking
time: 0.000; rss: 82MB	unused lib feature checking
time: 0.003; rss: 82MB	lint checking
time: 0.001; rss: 82MB	resolving dependency formats
  time: 0.000; rss: 82MB	NoLandingPads
  time: 0.001; rss: 82MB	SimplifyCfg
  time: 0.001; rss: 82MB	EraseRegions
  time: 0.000; rss: 82MB	AddCallGuards
  time: 0.005; rss: 82MB	ElaborateDrops
  time: 0.000; rss: 82MB	NoLandingPads
  time: 0.001; rss: 82MB	SimplifyCfg
  time: 0.000; rss: 82MB	InstCombine
  time: 0.000; rss: 82MB	Deaggregator
  time: 0.000; rss: 82MB	CopyPropagation
  time: 0.000; rss: 82MB	SimplifyLocals
  time: 0.000; rss: 82MB	AddCallGuards
  time: 0.000; rss: 82MB	PreTrans
time: 0.008; rss: 82MB	MIR optimisations
  time: 0.000; rss: 82MB	write metadata
  time: 0.142; rss: 91MB	translation item collection
  time: 0.019; rss: 93MB	codegen unit partitioning
  time: 0.018; rss: 147MB	internalize symbols
time: 1.078; rss: 147MB	translation
time: 0.000; rss: 147MB	assert dep graph
time: 0.000; rss: 147MB	serialize dep graph
  time: 0.083; rss: 136MB	llvm function passes [0]
  time: 0.027; rss: 137MB	llvm module passes [0]
  time: 1.797; rss: 137MB	codegen passes [0]
  time: 0.000; rss: 137MB	codegen passes [0]
time: 1.908; rss: 137MB	LLVM passes
time: 0.000; rss: 137MB	serialize work products
  time: 0.155; rss: 83MB	running linker
time: 0.156; rss: 83MB	linking
done
