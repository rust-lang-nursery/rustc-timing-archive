commit c0b8c438203ada8768f2f8ea7c750131744f97ef
Merge: 0894b06 605bc04
Author: bors <bors@rust-lang.org>
Date:   Sun Apr 3 08:58:59 2016 -0700

    Auto merge of #32210 - Aatch:mir-traversal, r=nikomatsakis
    
    rBreak Critical Edges and other MIR work
    
    This PR is built on top of #32080.
    
    This adds the basic depth-first traversals for MIR, preorder, postorder and reverse postorder. The MIR blocks are now translated using reverse postorder. There is also a transform for breaking critical edges, which includes the edges from `invoke`d calls (`Drop` and `Call`), to account for the fact that we can't add code after an `invoke`. It also stops generating the intermediate block (since the transform essentially does it if necessary already).
    
    The kinds of cases this deals with are difficult to produce, so the test is the one I managed to get. However, it seems to bootstrap with `-Z orbit`, which it didn't before my changes.
rustc: ./rust-encoding.0.2.32
cargo rustc -- -Ztime-passes -Zinput-stats
    Updating registry `https://github.com/rust-lang/crates.io-index`
   Compiling encoding_index_tests v0.1.4 (file:///root/benchmarks/rust-encoding.0.2.32)
   Compiling encoding-index-japanese v1.20141219.5 (file:///root/benchmarks/rust-encoding.0.2.32)
   Compiling encoding-index-singlebyte v1.20141219.5 (file:///root/benchmarks/rust-encoding.0.2.32)
   Compiling encoding-index-korean v1.20141219.5 (file:///root/benchmarks/rust-encoding.0.2.32)
   Compiling encoding-index-tradchinese v1.20141219.5 (file:///root/benchmarks/rust-encoding.0.2.32)
   Compiling encoding-index-simpchinese v1.20141219.5 (file:///root/benchmarks/rust-encoding.0.2.32)
   Compiling encoding v0.2.32 (file:///root/benchmarks/rust-encoding.0.2.32)
time: 0.023; rss: 43MB	parsing
Lines of code:             6441
Pre-expansion node count:  30335
time: 0.006; rss: 43MB	configuration 1
time: 0.000; rss: 43MB	recursion limit
time: 0.000; rss: 43MB	gated macro checking
time: 0.000; rss: 43MB	crate injection
time: 0.003; rss: 46MB	macro loading
time: 0.000; rss: 46MB	plugin loading
time: 0.000; rss: 46MB	plugin registration
time: 0.044; rss: 49MB	expansion
time: 0.001; rss: 49MB	complete gated feature checking 1
time: 0.007; rss: 49MB	configuration 2
time: 0.000; rss: 49MB	gated configuration checking
time: 0.004; rss: 49MB	maybe building test harness
time: 0.003; rss: 49MB	prelude injection
time: 0.000; rss: 49MB	checking that all macro invocations are gone
time: 0.000; rss: 49MB	checking for inline asm in case the target doesn't support it
time: 0.001; rss: 49MB	complete gated feature checking 2
time: 0.000; rss: 49MB	const fn bodies and arguments
Post-expansion node count: 41611
time: 0.003; rss: 49MB	assigning node ids
time: 0.004; rss: 53MB	lowering ast -> hir
time: 0.001; rss: 55MB	indexing hir
time: 0.001; rss: 55MB	attribute checking
time: 0.002; rss: 55MB	early lint checks
time: 0.001; rss: 54MB	external crate/lib resolution
time: 0.000; rss: 54MB	language item collection
time: 0.008; rss: 63MB	resolution
time: 0.000; rss: 63MB	lifetime resolution
time: 0.000; rss: 63MB	looking for entry point
time: 0.000; rss: 63MB	looking for plugin registrar
time: 0.002; rss: 65MB	region resolution
time: 0.000; rss: 65MB	loop checking
time: 0.000; rss: 65MB	static item recursion checking
time: 0.005; rss: 67MB	type collecting
time: 0.000; rss: 67MB	variance inference
time: 0.142; rss: 86MB	coherence checking
time: 0.017; rss: 86MB	wf checking
time: 0.012; rss: 86MB	item-types checking
time: 0.203; rss: 98MB	item-bodies checking
time: 0.000; rss: 98MB	drop-impl checking
time: 0.010; rss: 98MB	const checking
time: 0.002; rss: 98MB	privacy checking
time: 0.000; rss: 98MB	stability index
time: 0.001; rss: 98MB	intrinsic checking
time: 0.000; rss: 98MB	effect checking
time: 0.006; rss: 98MB	match checking
time: 0.002; rss: 98MB	liveness checking
time: 0.006; rss: 98MB	rvalue checking
time: 0.017; rss: 105MB	MIR dump
time: 0.008; rss: 105MB	MIR passes
time: 0.021; rss: 105MB	borrow checking
time: 0.000; rss: 105MB	reachability checking
time: 0.002; rss: 105MB	death checking
time: 0.002; rss: 105MB	stability checking
time: 0.000; rss: 105MB	unused lib feature checking
time: 0.024; rss: 105MB	lint checking
time: 0.000; rss: 105MB	resolving dependency formats
time: 0.003; rss: 105MB	Prepare MIR codegen passes
  time: 0.024; rss: 113MB	translation item collection
  time: 0.059; rss: 151MB	write metadata
time: 0.333; rss: 151MB	translation
  time: 0.026; rss: 111MB	llvm function passes [0]
  time: 0.050; rss: 115MB	llvm module passes [0]
  time: 0.580; rss: 119MB	codegen passes [0]
  time: 0.001; rss: 103MB	codegen passes [0]
time: 0.720; rss: 102MB	LLVM passes
time: 0.054; rss: 100MB	linking
done
