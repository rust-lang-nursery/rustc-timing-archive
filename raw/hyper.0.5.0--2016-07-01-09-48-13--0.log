commit 16281888c0f319706cd07e3c569e0aeb5a66d3b6
Merge: 375fa6e 9e2bd92
Author: bors <bors@rust-lang.org>
Date:   Thu Jun 30 23:30:51 2016 -0700

    Auto merge of #34563 - alexcrichton:robust-mk, r=brson
    
    mk: Don't consider LLVM done until it's done
    
    Currently if an LLVM build is interrupted *after* it creates the llvm-config
    binary but before it's done it puts us in an inconsistent state where we think
    LLVM is compiled but it's not actually. This tweaks our logic to only consider
    LLVM done building once it's actually done building.
    
    This should hopefully alleviate problems on the bots where if we interrupt at
    the wrong time it doesn't corrupt the build directory.
rustc: ./hyper.0.5.0
cargo rustc -- -Ztime-passes -Zinput-stats
    Updating registry `https://github.com/rust-lang/crates.io-index`
   Compiling libc v0.2.13
   Compiling traitobject v0.0.1
   Compiling gcc v0.3.28
   Compiling unicase v0.1.0
   Compiling httparse v0.1.6
   Compiling libc v0.1.12
   Compiling rustc-serialize v0.3.19
   Compiling lazy_static v0.1.16
   Compiling matches v0.1.2
   Compiling bitflags v0.3.3
   Compiling typeable v0.1.2
   Compiling winapi v0.2.7
   Compiling pkg-config v0.3.8
   Compiling log v0.3.6
   Compiling winapi-build v0.1.1
   Compiling mime v0.0.11
   Compiling kernel32-sys v0.2.2
   Compiling num_cpus v0.2.13
   Compiling rand v0.3.14
   Compiling time v0.1.35
   Compiling openssl-sys v0.6.7
   Compiling openssl v0.6.7
   Compiling uuid v0.1.18
   Compiling url v0.2.38
   Compiling cookie v0.1.21
   Compiling hyper v0.5.0 (file:///root/benchmarks/hyper.0.5.0)
time: 0.039; rss: 87MB	parsing
Lines of code:             9154
Pre-expansion node count:  44838
time: 0.006; rss: 87MB	configuration
time: 0.000; rss: 91MB	recursion limit
time: 0.000; rss: 91MB	crate injection
time: 0.000; rss: 91MB	plugin loading
time: 0.000; rss: 91MB	plugin registration
time: 0.174; rss: 127MB	expansion
time: 0.000; rss: 127MB	maybe building test harness
time: 0.000; rss: 127MB	checking for inline asm in case the target doesn't support it
time: 0.003; rss: 127MB	complete gated feature checking
Post-expansion node count: 101579
time: 0.007; rss: 127MB	assigning node ids
time: 0.003; rss: 129MB	collecting defs
time: 0.011; rss: 139MB	external crate/lib resolution
time: 0.006; rss: 139MB	early lint checks
time: 0.001; rss: 139MB	AST validation
time: 0.017; rss: 144MB	name resolution
time: 0.009; rss: 152MB	lowering ast -> hir
time: 0.001; rss: 154MB	indexing hir
time: 0.001; rss: 154MB	attribute checking
time: 0.001; rss: 148MB	language item collection
time: 0.002; rss: 148MB	lifetime resolution
time: 0.000; rss: 148MB	looking for entry point
time: 0.000; rss: 148MB	looking for plugin registrar
time: 0.005; rss: 152MB	region resolution
time: 0.001; rss: 152MB	loop checking
time: 0.001; rss: 152MB	static item recursion checking
time: 0.000; rss: 152MB	load_dep_graph
time: 0.031; rss: 153MB	type collecting
time: 0.000; rss: 153MB	variance inference
time: 0.044; rss: 162MB	coherence checking
time: 0.097; rss: 163MB	wf checking
time: 0.035; rss: 163MB	item-types checking
time: 0.517; rss: 174MB	item-bodies checking
time: 0.000; rss: 174MB	drop-impl checking
time: 0.043; rss: 177MB	const checking
time: 0.006; rss: 177MB	privacy checking
time: 0.001; rss: 177MB	stability index
time: 0.006; rss: 177MB	intrinsic checking
time: 0.002; rss: 177MB	effect checking
time: 0.015; rss: 177MB	match checking
time: 0.005; rss: 177MB	liveness checking
time: 0.031; rss: 177MB	rvalue checking
time: 0.060; rss: 187MB	MIR dump
time: 0.043; rss: 188MB	MIR passes
time: 0.071; rss: 188MB	borrow checking
time: 0.003; rss: 188MB	reachability checking
time: 0.005; rss: 188MB	death checking
time: 0.005; rss: 188MB	stability checking
time: 0.000; rss: 188MB	unused lib feature checking
time: 0.048; rss: 188MB	lint checking
time: 0.000; rss: 188MB	resolving dependency formats
time: 0.091; rss: 191MB	Prepare MIR codegen passes
  time: 0.128; rss: 195MB	write metadata
  time: 0.181; rss: 199MB	translation item collection
  time: 0.007; rss: 199MB	codegen unit partitioning
time: 3.710; rss: 321MB	translation
time: 0.001; rss: 321MB	assert dep graph
time: 0.000; rss: 321MB	serialize dep graph
  time: 1.135; rss: 211MB	llvm function passes [0]
  time: 0.432; rss: 213MB	llvm module passes [0]
  time: 16.083; rss: 214MB	codegen passes [0]
  time: 0.002; rss: 166MB	codegen passes [0]
time: 19.058; rss: 166MB	LLVM passes
time: 0.178; rss: 163MB	linking
done
