commit d36ad55aa5176eeec0da6d2a7b1689c263195e8a
Merge: b324fa7 b325baf
Author: bors <bors@rust-lang.org>
Date:   Mon Apr 18 17:53:58 2016 -0700

    Auto merge of #32755 - alexcrichton:rustbuild-start-test, r=brson
    
    rustbuild: Add support for compiletest test suites
    
    This commit adds support in rustbuild for running all of the compiletest test
    suites as part of `make check`. The `compiletest` program was moved to
    `src/tools` (like `rustbook` and others) and is now just compiled like any other
    old tool. Each test suite has a pretty standard set of dependencies and just
    tweaks various parameters to the final compiletest executable.
    
    Note that full support is lacking in terms of:
    
    * Once a test suite has passed, that's not remembered. When a test suite is
      requested to be run, it's always run.
    * The arguments to compiletest probably don't work for every possible
      combination of platforms and testing environments just yet. There will likely
      need to be future updates to tweak various pieces here and there.
    * Cross compiled test suites probably don't work just yet, support for that will
      come in a follow-up patch.
rustc: ./jld-day15-parser
cargo rustc -- -Ztime-passes -Zinput-stats
    Updating registry `https://github.com/rust-lang/crates.io-index`
   Compiling combine v1.3.0
   Compiling day15 v0.1.0 (file:///root/benchmarks/jld-day15-parser)
time: 0.001; rss: 34MB	parsing
Lines of code:             72
Pre-expansion node count:  673
time: 0.000; rss: 35MB	configuration 1
time: 0.000; rss: 35MB	recursion limit
time: 0.000; rss: 35MB	gated macro checking
time: 0.000; rss: 35MB	crate injection
time: 0.003; rss: 39MB	macro loading
time: 0.000; rss: 39MB	plugin loading
time: 0.000; rss: 39MB	plugin registration
time: 0.002; rss: 41MB	expansion
time: 0.000; rss: 41MB	complete gated feature checking 1
time: 0.000; rss: 41MB	configuration 2
time: 0.000; rss: 41MB	gated configuration checking
time: 0.000; rss: 41MB	maybe building test harness
time: 0.000; rss: 41MB	prelude injection
time: 0.000; rss: 41MB	checking that all macro invocations are gone
time: 0.000; rss: 41MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 41MB	complete gated feature checking 2
time: 0.000; rss: 41MB	const fn bodies and arguments
Post-expansion node count: 1176
time: 0.000; rss: 41MB	assigning node ids
time: 0.000; rss: 41MB	lowering ast -> hir
time: 0.000; rss: 41MB	indexing hir
time: 0.000; rss: 41MB	attribute checking
time: 0.000; rss: 41MB	early lint checks
time: 0.002; rss: 41MB	external crate/lib resolution
time: 0.000; rss: 41MB	language item collection
time: 0.001; rss: 50MB	resolution
time: 0.000; rss: 50MB	lifetime resolution
time: 0.000; rss: 50MB	looking for entry point
time: 0.000; rss: 50MB	looking for plugin registrar
time: 0.000; rss: 50MB	region resolution
time: 0.000; rss: 50MB	loop checking
time: 0.000; rss: 50MB	static item recursion checking
time: 0.000; rss: 50MB	load_dep_graph
time: 0.001; rss: 53MB	type collecting
time: 0.000; rss: 53MB	variance inference
time: 0.005; rss: 60MB	coherence checking
time: 0.009; rss: 65MB	wf checking
time: 0.000; rss: 65MB	item-types checking
time: 1.852; rss: 136MB	item-bodies checking
time: 0.000; rss: 136MB	drop-impl checking
time: 0.001; rss: 136MB	const checking
time: 0.000; rss: 136MB	privacy checking
time: 0.000; rss: 136MB	stability index
time: 0.000; rss: 136MB	intrinsic checking
time: 0.000; rss: 136MB	effect checking
time: 0.000; rss: 136MB	match checking
time: 0.000; rss: 136MB	liveness checking
time: 0.002; rss: 136MB	rvalue checking
time: 0.001; rss: 137MB	MIR dump
time: 0.000; rss: 137MB	MIR passes
time: 0.001; rss: 137MB	borrow checking
time: 0.000; rss: 137MB	reachability checking
time: 0.000; rss: 137MB	death checking
time: 0.000; rss: 137MB	stability checking
time: 0.000; rss: 137MB	unused lib feature checking
time: 0.004; rss: 138MB	lint checking
time: 0.001; rss: 138MB	resolving dependency formats
time: 0.000; rss: 139MB	Prepare MIR codegen passes
  time: 12.656; rss: 184MB	translation item collection
  time: 0.001; rss: 184MB	codegen unit partitioning
  time: 0.000; rss: 219MB	write metadata
time: 39.515; rss: 219MB	translation
time: 0.000; rss: 219MB	assert dep graph
time: 0.000; rss: 219MB	serialize dep graph
  time: 0.014; rss: 102MB	llvm function passes [0]
  time: 0.001; rss: 102MB	llvm module passes [0]
  time: 0.274; rss: 108MB	codegen passes [0]
  time: 0.000; rss: 101MB	codegen passes [0]
time: 0.298; rss: 101MB	LLVM passes
  time: 0.116; rss: 101MB	running linker
time: 0.116; rss: 101MB	linking
done
