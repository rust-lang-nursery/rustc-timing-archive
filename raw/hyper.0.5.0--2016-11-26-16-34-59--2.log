commit 9003e1ab6a2e26ec881b9ff297095a8343ebc7d1
Merge: 7e39c0e 17cb7bd
Author: bors <bors@rust-lang.org>
Date:   Sat Nov 26 12:32:19 2016 -0600

    Auto merge of #38008 - bluss:rustbuild-benches, r=alexcrichton
    
    Add rustbuild command `bench`
    
    Add command bench to rustbuild, so that `./x.py bench <path>` can compile and run benchmarks.
    
    `./x.py bench --stage 1 src/libcollections` and `./x.py bench --stage 1 src/libstd` should both compile well. Just `./x.py bench` runs all benchmarks for the libstd crates.
    
    Fixes #37897
rustc: ./hyper.0.5.0
cargo rustc  -- -Ztime-passes -Zinput-stats
   Compiling hyper v0.5.0 (file:///root/benchmarks/hyper.0.5.0)
time: 0.023; rss: 47MB	parsing
Lines of code:             9003
Pre-expansion node count:  44055
time: 0.000; rss: 47MB	recursion limit
time: 0.000; rss: 47MB	crate injection
time: 0.000; rss: 47MB	plugin loading
time: 0.000; rss: 47MB	plugin registration
time: 0.075; rss: 87MB	expansion
time: 0.000; rss: 87MB	maybe building test harness
time: 0.001; rss: 87MB	maybe creating a macro crate
Post-expansion node count: 101769
time: 0.000; rss: 87MB	checking for inline asm in case the target doesn't support it
time: 0.002; rss: 87MB	complete gated feature checking
time: 0.003; rss: 87MB	early lint checks
time: 0.001; rss: 87MB	AST validation
time: 0.014; rss: 92MB	name resolution
time: 0.007; rss: 96MB	lowering ast -> hir
time: 0.001; rss: 96MB	indexing hir
time: 0.001; rss: 96MB	attribute checking
time: 0.001; rss: 91MB	language item collection
time: 0.002; rss: 91MB	lifetime resolution
time: 0.000; rss: 91MB	looking for entry point
time: 0.000; rss: 91MB	looking for plugin registrar
time: 0.005; rss: 95MB	region resolution
time: 0.001; rss: 95MB	loop checking
time: 0.000; rss: 95MB	static item recursion checking
time: 0.039; rss: 94MB	compute_incremental_hashes_map
time: 0.000; rss: 94MB	load_dep_graph
time: 0.014; rss: 96MB	type collecting
time: 0.000; rss: 96MB	variance inference
time: 0.001; rss: 96MB	impl wf inference
time: 0.014; rss: 98MB	coherence checking
time: 0.039; rss: 101MB	wf checking
time: 0.024; rss: 101MB	item-types checking
time: 0.445; rss: 111MB	item-bodies checking
time: 0.000; rss: 111MB	drop-impl checking
time: 0.030; rss: 112MB	const checking
time: 0.006; rss: 112MB	privacy checking
time: 0.001; rss: 112MB	stability index
time: 0.003; rss: 112MB	intrinsic checking
time: 0.001; rss: 112MB	effect checking
time: 0.008; rss: 112MB	match checking
time: 0.004; rss: 113MB	liveness checking
time: 0.019; rss: 113MB	rvalue checking
time: 0.047; rss: 134MB	MIR dump
  time: 0.006; rss: 135MB	SimplifyCfg
  time: 0.011; rss: 137MB	QualifyAndPromoteConstants
  time: 0.013; rss: 137MB	TypeckMir
  time: 0.000; rss: 137MB	SimplifyBranches
  time: 0.003; rss: 137MB	SimplifyCfg
time: 0.034; rss: 137MB	MIR cleanup and validation
time: 0.053; rss: 137MB	borrow checking
time: 0.003; rss: 137MB	reachability checking
time: 0.004; rss: 137MB	death checking
time: 0.004; rss: 137MB	stability checking
time: 0.000; rss: 137MB	unused lib feature checking
time: 0.036; rss: 137MB	lint checking
time: 0.000; rss: 137MB	resolving dependency formats
  time: 0.000; rss: 137MB	NoLandingPads
  time: 0.003; rss: 137MB	SimplifyCfg
  time: 0.007; rss: 137MB	EraseRegions
  time: 0.001; rss: 137MB	AddCallGuards
  time: 0.021; rss: 140MB	ElaborateDrops
  time: 0.000; rss: 140MB	NoLandingPads
  time: 0.005; rss: 140MB	SimplifyCfg
  time: 0.003; rss: 140MB	InstCombine
  time: 0.003; rss: 140MB	Deaggregator
  time: 0.000; rss: 140MB	CopyPropagation
  time: 0.004; rss: 140MB	SimplifyLocals
  time: 0.001; rss: 140MB	AddCallGuards
  time: 0.000; rss: 140MB	PreTrans
time: 0.049; rss: 140MB	MIR optimisations
  time: 0.011; rss: 142MB	write metadata
  time: 0.113; rss: 149MB	translation item collection
  time: 0.013; rss: 151MB	codegen unit partitioning
  time: 0.011; rss: 203MB	internalize symbols
time: 0.926; rss: 203MB	translation
time: 0.000; rss: 203MB	assert dep graph
time: 0.000; rss: 203MB	serialize dep graph
  time: 0.089; rss: 151MB	llvm function passes [0]
  time: 0.046; rss: 153MB	llvm module passes [0]
  time: 1.646; rss: 154MB	codegen passes [0]
  time: 0.000; rss: 154MB	codegen passes [0]
time: 1.918; rss: 154MB	LLVM passes
time: 0.000; rss: 154MB	serialize work products
time: 0.069; rss: 99MB	linking
done
