commit 1586005a1d15e7d26b6c46a33e7a9643de9a77ac
Merge: 0672ed4 52883ab
Author: bors <bors@rust-lang.org>
Date:   Mon Jan 11 19:03:18 2016 +0000

    Auto merge of #30534 - bluss:binary-heap-fast-pop, r=Gankro
    
    BinaryHeap: Use full sift down in .pop()
    
    .sift_down can either choose to compare the element on the way down (and
    place it during descent), or to sift down an element fully, then sift
    back up to place it.
    
    A previous PR changed .sift_down() to the former behavior, which is much
    faster for relatively small heaps and for elements that are cheap to
    compare.
    
    A benchmarking run suggested that BinaryHeap::pop() suffers
    improportionally from this, and that it should use the second strategy
    instead. It's logical since .pop() brings last element from the
    heapified vector into index 0, it's very likely that this element will
    end up at the bottom again.
    
    Closes #29969
    Previous PR #29811
rustc: ./piston-image-0.3.11
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling image v0.3.11 (file:///root/benchmarks/piston-image-0.3.11)
time: 0.046; rss: 42MB	parsing
Lines of code:             10676
Pre-expansion node count:  84646
time: 0.016; rss: 42MB	configuration 1
time: 0.000; rss: 42MB	recursion limit
time: 0.001; rss: 42MB	gated macro checking
time: 0.000; rss: 42MB	crate injection
time: 0.005; rss: 47MB	macro loading
time: 0.000; rss: 47MB	plugin loading
time: 0.000; rss: 47MB	plugin registration
time: 0.126; rss: 51MB	expansion
time: 0.004; rss: 51MB	complete gated feature checking 1
time: 0.028; rss: 51MB	configuration 2
time: 0.000; rss: 51MB	gated configuration checking
time: 0.013; rss: 51MB	maybe building test harness
time: 0.012; rss: 51MB	prelude injection
time: 0.001; rss: 51MB	checking that all macro invocations are gone
time: 0.000; rss: 51MB	checking for inline asm in case the target doesn't support it
time: 0.003; rss: 51MB	complete gated feature checking 2
Post-expansion node count: 144338
time: 0.013; rss: 51MB	assigning node ids
time: 0.020; rss: 62MB	lowering ast -> hir
time: 0.006; rss: 66MB	indexing hir
time: 0.000; rss: 66MB	attribute checking
time: 0.007; rss: 66MB	early lint checks
time: 0.003; rss: 57MB	external crate/lib resolution
time: 0.001; rss: 57MB	language item collection
time: 0.030; rss: 76MB	resolution
time: 0.003; rss: 76MB	lifetime resolution
time: 0.000; rss: 76MB	looking for entry point
time: 0.000; rss: 76MB	looking for plugin registrar
time: 0.011; rss: 82MB	region resolution
time: 0.001; rss: 82MB	loop checking
time: 0.001; rss: 82MB	static item recursion checking
time: 0.011; rss: 85MB	type collecting
time: 0.000; rss: 85MB	variance inference
time: 0.031; rss: 103MB	coherence checking
time: 0.147; rss: 106MB	wf checking
time: 0.052; rss: 110MB	item-types checking
time: 1.689; rss: 139MB	item-bodies checking
time: 0.000; rss: 139MB	drop-impl checking
time: 0.076; rss: 140MB	const checking
time: 0.012; rss: 140MB	privacy checking
time: 0.001; rss: 140MB	stability index
time: 0.011; rss: 140MB	intrinsic checking
time: 0.004; rss: 140MB	effect checking
time: 0.027; rss: 140MB	match checking
time: 0.094; rss: 148MB	MIR dump
time: 0.011; rss: 151MB	liveness checking
time: 0.161; rss: 151MB	borrow checking
time: 0.081; rss: 151MB	rvalue checking
time: 0.003; rss: 151MB	reachability checking
time: 0.009; rss: 151MB	death checking
time: 0.011; rss: 151MB	stability checking
time: 0.000; rss: 151MB	unused lib feature checking
time: 0.087; rss: 151MB	lint checking
time: 0.000; rss: 151MB	resolving dependency formats
time: 0.008; rss: 153MB	erasing regions from MIR
  time: 0.213; rss: 276MB	write metadata
time: 2.897; rss: 270MB	translation
  time: 0.099; rss: 162MB	llvm function passes [0]
  time: 0.046; rss: 162MB	llvm module passes [0]
  time: 1.703; rss: 214MB	codegen passes [0]
  time: 0.001; rss: 181MB	codegen passes [0]
time: 2.065; rss: 181MB	LLVM passes
time: 0.155; rss: 179MB	linking
done
