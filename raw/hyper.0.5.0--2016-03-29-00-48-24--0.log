commit a11129701c873d96fe0816e4c8b55510efebe96e
Merge: cad964a 221d0fb
Author: bors <bors@rust-lang.org>
Date:   Mon Mar 28 20:50:42 2016 -0700

    Auto merge of #32479 - eddyb:eof-not-even-twice, r=nikomatsakis
    
    Prevent bumping the parser past the EOF.
    
    Makes `Parser::bump` after EOF into an ICE, forcing callers to avoid repeated EOF bumps.
    This ICE is intended to break infinite loops where EOF wasn't stopping the loop.
    
    For example, the handling of EOF in `parse_trait_items`' recovery loop fixes #32446.
    But even without this specific fix, the ICE is triggered, which helps diagnosis and UX.
    
    This is a `[breaking-change]` for plugins authors who eagerly eat multiple EOFs.
    See https://github.com/docopt/docopt.rs/pull/171 for such an example and the necessary fix.
rustc: ./hyper.0.5.0
cargo rustc -- -Ztime-passes -Zinput-stats
    Updating registry `https://github.com/rust-lang/crates.io-index`
   Compiling unicase v0.1.0
   Compiling winapi-build v0.1.1
   Compiling winapi v0.2.6
   Compiling typeable v0.1.2
   Compiling libc v0.2.8
   Compiling matches v0.1.2
   Compiling gcc v0.3.26
   Compiling rustc-serialize v0.3.18
   Compiling lazy_static v0.1.15
   Compiling bitflags v0.3.3
   Compiling httparse v0.1.6
   Compiling traitobject v0.0.1
   Compiling libc v0.1.12
   Compiling pkg-config v0.3.8
   Compiling kernel32-sys v0.2.1
   Compiling openssl-sys v0.6.7
   Compiling num_cpus v0.2.11
   Compiling rand v0.3.14
   Compiling log v0.3.5
   Compiling time v0.1.34
   Compiling mime v0.0.11
   Compiling openssl v0.6.7
   Compiling uuid v0.1.18
   Compiling url v0.2.38
   Compiling cookie v0.1.21
   Compiling hyper v0.5.0 (file:///root/benchmarks/hyper.0.5.0)
time: 0.030; rss: 46MB	parsing
Lines of code:             9154
Pre-expansion node count:  45594
time: 0.009; rss: 46MB	configuration 1
time: 0.000; rss: 46MB	recursion limit
time: 0.000; rss: 46MB	gated macro checking
time: 0.000; rss: 46MB	crate injection
time: 0.005; rss: 52MB	macro loading
time: 0.000; rss: 52MB	plugin loading
time: 0.000; rss: 52MB	plugin registration
time: 0.189; rss: 60MB	expansion
time: 0.005; rss: 60MB	complete gated feature checking 1
time: 0.033; rss: 60MB	configuration 2
time: 0.000; rss: 60MB	gated configuration checking
time: 0.013; rss: 60MB	maybe building test harness
time: 0.010; rss: 60MB	prelude injection
time: 0.001; rss: 60MB	checking that all macro invocations are gone
time: 0.000; rss: 60MB	checking for inline asm in case the target doesn't support it
time: 0.002; rss: 60MB	complete gated feature checking 2
time: 0.001; rss: 60MB	const fn bodies and arguments
Post-expansion node count: 107125
time: 0.010; rss: 60MB	assigning node ids
time: 0.011; rss: 67MB	lowering ast -> hir
time: 0.004; rss: 69MB	indexing hir
time: 0.001; rss: 69MB	attribute checking
time: 0.006; rss: 69MB	early lint checks
time: 0.004; rss: 66MB	external crate/lib resolution
time: 0.001; rss: 66MB	language item collection
time: 0.025; rss: 83MB	resolution
time: 0.002; rss: 83MB	lifetime resolution
time: 0.000; rss: 83MB	looking for entry point
time: 0.000; rss: 83MB	looking for plugin registrar
time: 0.006; rss: 85MB	region resolution
time: 0.001; rss: 85MB	loop checking
time: 0.001; rss: 85MB	static item recursion checking
time: 0.013; rss: 89MB	type collecting
time: 0.000; rss: 89MB	variance inference
time: 0.530; rss: 112MB	coherence checking
time: 0.076; rss: 113MB	wf checking
time: 0.028; rss: 115MB	item-types checking
time: 0.483; rss: 134MB	item-bodies checking
time: 0.000; rss: 134MB	drop-impl checking
time: 0.038; rss: 137MB	const checking
time: 0.011; rss: 137MB	privacy checking
time: 0.001; rss: 137MB	stability index
time: 0.004; rss: 137MB	intrinsic checking
time: 0.002; rss: 137MB	effect checking
time: 0.012; rss: 137MB	match checking
time: 0.005; rss: 137MB	liveness checking
time: 0.033; rss: 137MB	rvalue checking
time: 0.049; rss: 144MB	MIR dump
time: 0.027; rss: 144MB	MIR passes
time: 0.064; rss: 144MB	borrow checking
time: 0.003; rss: 144MB	reachability checking
time: 0.006; rss: 144MB	death checking
time: 0.006; rss: 144MB	stability checking
time: 0.000; rss: 144MB	unused lib feature checking
time: 0.049; rss: 144MB	lint checking
time: 0.000; rss: 144MB	resolving dependency formats
  time: 0.185; rss: 159MB	translation item collection
  time: 0.138; rss: 287MB	write metadata
time: 1.446; rss: 287MB	translation
  time: 0.096; rss: 167MB	llvm function passes [0]
  time: 0.047; rss: 170MB	llvm module passes [0]
  time: 1.630; rss: 173MB	codegen passes [0]
  time: 0.001; rss: 122MB	codegen passes [0]
time: 1.969; rss: 122MB	LLVM passes
time: 0.172; rss: 119MB	linking
done
