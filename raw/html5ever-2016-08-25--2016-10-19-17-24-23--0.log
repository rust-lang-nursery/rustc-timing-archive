commit d337f345ca8b3bb4aac988ace1c0676abc5310a0
Merge: cfc9b51 83b1982
Author: bors <bors@rust-lang.org>
Date:   Wed Oct 19 09:52:48 2016 -0700

    Auto merge of #37220 - Mark-Simulacrum:arena-alloc-slice, r=eddyb
    
    alloc_slice in TypedArena
    
    Added `TypedArena::alloc_slice`, and moved from using `TypedArena<Vec<T>>` to `TypedArena<T>`.
    
    `TypedArena::alloc_slice` is implemented by copying the slices elements into the typed arena, requiring that `T: Copy` when using it. We allocate a new chunk when there's insufficient space remaining in the previous chunk, and we cannot resize the old chunk in place. This is non-optimal, since we may waste allocated space when allocating (especially longer) slices, but is considered good enough for the time being.
    
    This change also reduces heap fragmentation, since the arena now directly stores objects instead of storing the Vec's length and pointer to its contents.
    
    Performance:
    ```
    futures-rs-test  5.048s vs  5.061s --> 0.997x faster (variance: 1.028x, 1.020x)
    helloworld       0.284s vs  0.295s --> 0.963x faster (variance: 1.207x, 1.189x)
    html5ever-2016-  8.396s vs  8.208s --> 1.023x faster (variance: 1.019x, 1.036x)
    hyper.0.5.0      5.768s vs  5.797s --> 0.995x faster (variance: 1.027x, 1.028x)
    inflate-0.1.0    5.213s vs  5.069s --> 1.028x faster (variance: 1.008x, 1.022x)
    issue-32062-equ  0.428s vs  0.467s --> 0.916x faster (variance: 1.188x, 1.015x)
    issue-32278-big  1.949s vs  2.010s --> 0.970x faster (variance: 1.112x, 1.049x)
    jld-day15-parse  1.795s vs  1.877s --> 0.956x faster (variance: 1.037x, 1.015x)
    piston-image-0. 13.554s vs 13.522s --> 1.002x faster (variance: 1.019x, 1.020x)
    rust-encoding-0  2.489s vs  2.465s --> 1.010x faster (variance: 1.047x, 1.086x)
    syntex-0.42.2   34.646s vs 34.593s --> 1.002x faster (variance: 1.007x, 1.005x)
    syntex-0.42.2-i 17.181s vs 17.163s --> 1.001x faster (variance: 1.004x, 1.004x)
    ```
    
    r? @eddyb
rustc: ./html5ever-2016-08-25
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling libc v0.2.16
   Compiling rustc-serialize v0.3.19
   Compiling log v0.3.6
   Compiling serde v0.8.9
   Compiling mac v0.0.2
   Compiling phf_shared v0.7.16
   Compiling encoding_index_tests v0.1.4
   Compiling lazy_static v0.2.1
   Compiling matches v0.1.2
   Compiling encoding-index-tradchinese v1.20141219.5
   Compiling encoding-index-japanese v1.20141219.5
   Compiling utf-8 v0.6.0
   Compiling encoding-index-singlebyte v1.20141219.5
   Compiling encoding-index-simpchinese v1.20141219.5
   Compiling phf v0.7.16
   Compiling encoding-index-korean v1.20141219.5
   Compiling void v1.0.2
   Compiling unreachable v0.1.1
   Compiling debug_unreachable v0.1.1
   Compiling futf v0.1.2
   Compiling rand v0.3.14
   Compiling encoding v0.2.33
   Compiling phf_generator v0.7.16
   Compiling phf_codegen v0.7.16
   Compiling string_cache v0.2.29
   Compiling tendril v0.2.3
   Compiling html5ever v0.5.4 (file:///root/benchmarks/html5ever-2016-08-25)
time: 0.027; rss: 52MB	parsing
Lines of code:             8210
Pre-expansion node count:  52238
time: 0.000; rss: 52MB	recursion limit
time: 0.000; rss: 52MB	crate injection
time: 0.000; rss: 52MB	plugin loading
time: 0.000; rss: 52MB	plugin registration
time: 0.761; rss: 106MB	expansion
time: 0.000; rss: 106MB	maybe building test harness
time: 0.002; rss: 106MB	maybe creating a macro crate
Post-expansion node count: 163524
time: 0.000; rss: 106MB	checking for inline asm in case the target doesn't support it
time: 0.002; rss: 106MB	complete gated feature checking
time: 0.008; rss: 106MB	early lint checks
time: 0.002; rss: 106MB	AST validation
time: 0.018; rss: 110MB	name resolution
time: 0.016; rss: 125MB	lowering ast -> hir
time: 0.004; rss: 130MB	indexing hir
time: 0.002; rss: 130MB	attribute checking
time: 0.002; rss: 107MB	language item collection
time: 0.003; rss: 107MB	lifetime resolution
time: 0.000; rss: 107MB	looking for entry point
time: 0.000; rss: 107MB	looking for plugin registrar
time: 0.015; rss: 113MB	region resolution
time: 0.002; rss: 113MB	loop checking
time: 0.002; rss: 113MB	static item recursion checking
time: 0.026; rss: 114MB	compute_incremental_hashes_map
time: 0.000; rss: 114MB	load_dep_graph
time: 0.009; rss: 116MB	type collecting
time: 0.000; rss: 116MB	variance inference
time: 0.022; rss: 118MB	coherence checking
time: 0.023; rss: 118MB	wf checking
time: 0.340; rss: 125MB	item-types checking
time: 0.483; rss: 139MB	item-bodies checking
time: 0.000; rss: 139MB	drop-impl checking
time: 0.069; rss: 142MB	const checking
time: 0.009; rss: 142MB	privacy checking
time: 0.001; rss: 142MB	stability index
time: 0.003; rss: 142MB	intrinsic checking
time: 0.003; rss: 142MB	effect checking
time: 0.023; rss: 142MB	match checking
time: 0.013; rss: 136MB	liveness checking
time: 0.025; rss: 136MB	rvalue checking
time: 0.116; rss: 185MB	MIR dump
  time: 0.008; rss: 185MB	SimplifyCfg
  time: 0.014; rss: 185MB	QualifyAndPromoteConstants
  time: 0.024; rss: 185MB	TypeckMir
  time: 0.000; rss: 185MB	SimplifyBranches
  time: 0.004; rss: 185MB	SimplifyCfg
time: 0.050; rss: 185MB	MIR passes
time: 0.087; rss: 186MB	borrow checking
time: 0.003; rss: 186MB	reachability checking
time: 0.007; rss: 186MB	death checking
time: 0.008; rss: 186MB	stability checking
time: 0.000; rss: 186MB	unused lib feature checking
time: 0.065; rss: 186MB	lint checking
time: 0.000; rss: 186MB	resolving dependency formats
  time: 0.000; rss: 186MB	NoLandingPads
  time: 0.004; rss: 186MB	SimplifyCfg
  time: 0.010; rss: 186MB	EraseRegions
  time: 0.001; rss: 186MB	AddCallGuards
  time: 0.075; rss: 193MB	ElaborateDrops
  time: 0.000; rss: 193MB	NoLandingPads
  time: 0.007; rss: 189MB	SimplifyCfg
  time: 0.008; rss: 186MB	InstCombine
  time: 0.001; rss: 186MB	Deaggregator
  time: 0.000; rss: 186MB	CopyPropagation
  time: 0.001; rss: 186MB	AddCallGuards
  time: 0.000; rss: 186MB	PreTrans
time: 0.107; rss: 186MB	Prepare MIR codegen passes
  time: 0.011; rss: 186MB	write metadata
  time: 0.045; rss: 188MB	translation item collection
  time: 0.005; rss: 188MB	codegen unit partitioning
  time: 0.005; rss: 204MB	internalize symbols
time: 0.304; rss: 174MB	translation
time: 0.000; rss: 174MB	assert dep graph
time: 0.000; rss: 174MB	serialize dep graph
  time: 0.020; rss: 106MB	llvm function passes [0]
  time: 0.012; rss: 107MB	llvm module passes [0]
  time: 0.473; rss: 109MB	codegen passes [0]
  time: 0.000; rss: 109MB	codegen passes [0]
time: 0.547; rss: 109MB	LLVM passes
time: 0.000; rss: 109MB	serialize work products
time: 0.058; rss: 91MB	linking
done
