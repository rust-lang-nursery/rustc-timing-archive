commit d515586465522c615f8ae6c5d61deedea61126e1
Merge: 127a83d 2121118
Author: bors <bors@rust-lang.org>
Date:   Wed Nov 23 11:16:22 2016 -0600

    Auto merge of #36449 - canndrew:expand_is_uninhabited, r=eddyb
    
    Expand is_uninhabited
    
    This allows code such as this to compile:
    
    ``` rust
    let x: ! = ...;
    match x {};
    
    let y: (u32, !) = ...;
    match y {};
    ```
    
    @eddyb You were worried about making this change. Do you have any idea about what could break? Are there any special tests that need to be written for it?
rustc: ./jld-day15-parser
cargo rustc  -- -Ztime-passes -Zinput-stats
   Compiling day15 v0.1.0 (file:///root/benchmarks/jld-day15-parser)
time: 0.000; rss: 41MB	parsing
Lines of code:             72
Pre-expansion node count:  648
time: 0.000; rss: 41MB	recursion limit
time: 0.000; rss: 41MB	crate injection
time: 0.000; rss: 41MB	plugin loading
time: 0.000; rss: 41MB	plugin registration
time: 0.014; rss: 69MB	expansion
time: 0.000; rss: 69MB	maybe building test harness
time: 0.000; rss: 69MB	maybe creating a macro crate
Post-expansion node count: 1149
time: 0.000; rss: 69MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 69MB	complete gated feature checking
time: 0.000; rss: 69MB	early lint checks
time: 0.000; rss: 69MB	AST validation
time: 0.002; rss: 69MB	name resolution
time: 0.000; rss: 69MB	lowering ast -> hir
time: 0.000; rss: 69MB	indexing hir
time: 0.000; rss: 69MB	attribute checking
time: 0.000; rss: 69MB	language item collection
time: 0.000; rss: 69MB	lifetime resolution
time: 0.000; rss: 69MB	looking for entry point
time: 0.000; rss: 69MB	looking for plugin registrar
time: 0.000; rss: 69MB	region resolution
time: 0.000; rss: 69MB	loop checking
time: 0.000; rss: 69MB	static item recursion checking
time: 0.000; rss: 69MB	compute_incremental_hashes_map
time: 0.000; rss: 69MB	load_dep_graph
time: 0.001; rss: 69MB	type collecting
time: 0.000; rss: 69MB	variance inference
time: 0.000; rss: 69MB	impl wf inference
time: 0.004; rss: 71MB	coherence checking
time: 0.002; rss: 71MB	wf checking
time: 0.000; rss: 71MB	item-types checking
time: 0.016; rss: 74MB	item-bodies checking
time: 0.000; rss: 74MB	drop-impl checking
time: 0.000; rss: 74MB	const checking
time: 0.000; rss: 74MB	privacy checking
time: 0.000; rss: 74MB	stability index
time: 0.000; rss: 74MB	intrinsic checking
time: 0.000; rss: 74MB	effect checking
time: 0.000; rss: 74MB	match checking
time: 0.000; rss: 74MB	liveness checking
time: 0.000; rss: 74MB	rvalue checking
time: 0.001; rss: 74MB	MIR dump
  time: 0.000; rss: 74MB	SimplifyCfg
  time: 0.000; rss: 74MB	QualifyAndPromoteConstants
  time: 0.000; rss: 74MB	TypeckMir
  time: 0.000; rss: 74MB	SimplifyBranches
  time: 0.000; rss: 74MB	SimplifyCfg
time: 0.001; rss: 74MB	MIR cleanup and validation
time: 0.001; rss: 74MB	borrow checking
time: 0.000; rss: 74MB	reachability checking
time: 0.000; rss: 74MB	death checking
time: 0.000; rss: 74MB	stability checking
time: 0.000; rss: 74MB	unused lib feature checking
time: 0.001; rss: 74MB	lint checking
time: 0.001; rss: 74MB	resolving dependency formats
  time: 0.000; rss: 74MB	NoLandingPads
  time: 0.000; rss: 74MB	SimplifyCfg
  time: 0.000; rss: 74MB	EraseRegions
  time: 0.000; rss: 74MB	AddCallGuards
  time: 0.001; rss: 74MB	ElaborateDrops
  time: 0.000; rss: 74MB	NoLandingPads
  time: 0.000; rss: 74MB	SimplifyCfg
  time: 0.000; rss: 74MB	InstCombine
  time: 0.002; rss: 74MB	Deaggregator
  time: 0.000; rss: 74MB	CopyPropagation
  time: 0.000; rss: 74MB	SimplifyLocals
  time: 0.000; rss: 74MB	AddCallGuards
  time: 0.000; rss: 74MB	PreTrans
time: 0.003; rss: 74MB	MIR optimisations
  time: 0.000; rss: 74MB	write metadata
  time: 0.101; rss: 78MB	translation item collection
  time: 0.002; rss: 80MB	codegen unit partitioning
  time: 0.002; rss: 93MB	internalize symbols
time: 0.491; rss: 93MB	translation
time: 0.000; rss: 93MB	assert dep graph
time: 0.000; rss: 93MB	serialize dep graph
  time: 0.018; rss: 89MB	llvm function passes [0]
  time: 0.001; rss: 89MB	llvm module passes [0]
  time: 0.356; rss: 95MB	codegen passes [0]
  time: 0.000; rss: 95MB	codegen passes [0]
time: 0.376; rss: 95MB	LLVM passes
time: 0.000; rss: 95MB	serialize work products
  time: 0.086; rss: 84MB	running linker
time: 0.087; rss: 84MB	linking
done
