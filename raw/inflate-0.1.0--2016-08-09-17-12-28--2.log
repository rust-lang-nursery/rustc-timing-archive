commit e1d2bc2916b5b5840789d7e7fc89e4647063bfa0
Merge: f013914 e0b82d5
Author: bors <bors@rust-lang.org>
Date:   Tue Aug 9 10:00:54 2016 -0700

    Auto merge of #35166 - nikomatsakis:incr-comp-ice-34991-2, r=mw
    
    Address ICEs running w/ incremental compilation and building glium
    
    Fixes for various ICEs I encountered trying to build glium with incremental compilation enabled. Building glium now works. Of the 4 ICEs, I have test cases for 3 of them -- I didn't isolate a test for the last commit and kind of want to go do other things -- most notably, figuring out why incremental isn't saving much *effort*.
    
    But if it seems worthwhile and I can come back and try to narrow down the problem.
    
    r? @michaelwoerister
    
    Fixes #34991
    Fixes #32015
rustc: ./inflate-0.1.0
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling inflate v0.1.0 (file:///root/benchmarks/inflate-0.1.0)
time: 0.004; rss: 52MB	parsing
Lines of code:             956
Pre-expansion node count:  4738
time: 0.001; rss: 52MB	configuration
time: 0.000; rss: 52MB	recursion limit
time: 0.000; rss: 52MB	crate injection
time: 0.000; rss: 52MB	plugin loading
time: 0.000; rss: 52MB	plugin registration
time: 0.072; rss: 92MB	expansion
time: 0.000; rss: 92MB	maybe building test harness
time: 0.003; rss: 92MB	assigning node ids
Post-expansion node count: 55769
time: 0.000; rss: 92MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 92MB	complete gated feature checking
time: 0.005; rss: 92MB	collecting defs
time: 0.001; rss: 92MB	external crate/lib resolution
time: 0.002; rss: 92MB	early lint checks
time: 0.000; rss: 92MB	AST validation
time: 0.010; rss: 94MB	name resolution
time: 0.005; rss: 98MB	lowering ast -> hir
time: 0.001; rss: 100MB	indexing hir
time: 0.000; rss: 100MB	attribute checking
time: 0.001; rss: 98MB	language item collection
time: 0.001; rss: 98MB	lifetime resolution
time: 0.000; rss: 98MB	looking for entry point
time: 0.000; rss: 98MB	looking for plugin registrar
time: 0.004; rss: 101MB	region resolution
time: 0.000; rss: 101MB	loop checking
time: 0.000; rss: 101MB	static item recursion checking
time: 0.000; rss: 101MB	load_dep_graph
time: 0.001; rss: 101MB	type collecting
time: 0.000; rss: 101MB	variance inference
time: 0.010; rss: 103MB	coherence checking
time: 0.002; rss: 103MB	wf checking
time: 0.002; rss: 104MB	item-types checking
time: 2.444; rss: 119MB	item-bodies checking
time: 0.000; rss: 119MB	drop-impl checking
time: 0.015; rss: 118MB	const checking
time: 0.001; rss: 118MB	privacy checking
time: 0.000; rss: 118MB	stability index
time: 0.001; rss: 118MB	intrinsic checking
time: 0.001; rss: 118MB	effect checking
time: 0.004; rss: 118MB	match checking
time: 0.066; rss: 116MB	liveness checking
time: 0.011; rss: 116MB	rvalue checking
time: 0.031; rss: 133MB	MIR dump
time: 0.018; rss: 129MB	MIR passes
time: 0.200; rss: 130MB	borrow checking
time: 0.000; rss: 130MB	reachability checking
time: 0.003; rss: 130MB	death checking
time: 0.002; rss: 130MB	stability checking
time: 0.000; rss: 130MB	unused lib feature checking
time: 0.020; rss: 130MB	lint checking
time: 0.000; rss: 130MB	resolving dependency formats
time: 0.136; rss: 128MB	Prepare MIR codegen passes
  time: 0.003; rss: 129MB	write metadata
  time: 0.009; rss: 130MB	translation item collection
  time: 0.001; rss: 130MB	codegen unit partitioning
  time: 0.002; rss: 151MB	internalize symbols
time: 0.192; rss: 145MB	translation
time: 0.000; rss: 145MB	assert dep graph
time: 0.000; rss: 145MB	serialize dep graph
  time: 0.029; rss: 113MB	llvm function passes [0]
  time: 0.005; rss: 114MB	llvm module passes [0]
  time: 0.633; rss: 121MB	codegen passes [0]
  time: 0.000; rss: 121MB	codegen passes [0]
time: 0.701; rss: 121MB	LLVM passes
time: 0.000; rss: 121MB	serialize work products
time: 0.048; rss: 104MB	linking
done
