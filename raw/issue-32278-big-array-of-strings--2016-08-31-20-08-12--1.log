commit 2c01bb885108c436adae2006632ff6dfc0a5f2cd
Merge: 7a187c3 bcd2f90
Author: bors <bors@rust-lang.org>
Date:   Wed Aug 31 12:56:15 2016 -0700

    Auto merge of #35718 - michaelwoerister:incr-comp-dir-locking, r=alexcrichton
    
    Implement synchronization scheme for incr. comp. directory
    
    This PR implements a copy-on-write-based synchronization scheme for the incremental compilation cache directory. For technical details, see the documentation at the beginning of `rustc_incremental/persist/fs.rs`.
    
    The PR contains unit tests for some functions but for testing whether the scheme properly handles races, a more elaborate test setup would be needed. It would probably involve a small tool that allows to manipulate the incremental compilation directory in a controlled way and then letting a compiler instance run against directories in different states. I don't know if it's worth the trouble of adding another test category to `compiletest`, but I'd be happy to do so.
    
    Fixes #32754
    Fixes #34957
rustc: ./issue-32278-big-array-of-strings
/root/rust/x86_64-unknown-linux-gnu/stage2/bin/rustc big-array-of-strings.rs -Ztime-passes -Zinput-stats
time: 0.140; rss: 63MB	parsing
Lines of code:             65577
Pre-expansion node count:  65552
time: 0.005; rss: 63MB	configuration
time: 0.000; rss: 63MB	recursion limit
time: 0.000; rss: 63MB	crate injection
time: 0.000; rss: 63MB	plugin loading
time: 0.000; rss: 63MB	plugin registration
time: 0.023; rss: 85MB	expansion
time: 0.000; rss: 85MB	maybe building test harness
time: 0.004; rss: 85MB	assigning node ids
Post-expansion node count: 65565
time: 0.000; rss: 85MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 85MB	complete gated feature checking
time: 0.001; rss: 85MB	collecting defs
time: 0.003; rss: 85MB	external crate/lib resolution
time: 0.004; rss: 85MB	early lint checks
time: 0.000; rss: 85MB	AST validation
time: 0.002; rss: 85MB	name resolution
time: 0.007; rss: 104MB	lowering ast -> hir
time: 0.002; rss: 108MB	indexing hir
time: 0.001; rss: 108MB	attribute checking
time: 0.001; rss: 98MB	language item collection
time: 0.001; rss: 98MB	lifetime resolution
time: 0.000; rss: 98MB	looking for entry point
time: 0.000; rss: 98MB	looking for plugin registrar
time: 0.009; rss: 104MB	region resolution
time: 0.001; rss: 104MB	loop checking
time: 0.001; rss: 104MB	static item recursion checking
time: 0.006; rss: 105MB	compute_incremental_hashes_map
time: 0.000; rss: 105MB	load_dep_graph
time: 0.000; rss: 105MB	type collecting
time: 0.000; rss: 105MB	variance inference
time: 0.005; rss: 107MB	coherence checking
time: 0.001; rss: 107MB	wf checking
time: 0.695; rss: 117MB	item-types checking
time: 0.000; rss: 117MB	item-bodies checking
time: 0.000; rss: 117MB	drop-impl checking
time: 0.023; rss: 115MB	const checking
time: 0.002; rss: 115MB	privacy checking
time: 0.001; rss: 115MB	stability index
time: 0.001; rss: 115MB	intrinsic checking
time: 0.001; rss: 115MB	effect checking
time: 0.000; rss: 115MB	match checking
time: 0.001; rss: 115MB	liveness checking
time: 0.000; rss: 115MB	rvalue checking
time: 0.045; rss: 126MB	MIR dump
time: 0.002; rss: 126MB	MIR passes
time: 0.001; rss: 126MB	borrow checking
time: 0.000; rss: 126MB	reachability checking
time: 0.001; rss: 126MB	death checking
time: 0.001; rss: 126MB	stability checking
time: 0.000; rss: 126MB	unused lib feature checking
time: 0.024; rss: 127MB	lint checking
time: 0.001; rss: 127MB	resolving dependency formats
time: 0.001; rss: 127MB	Prepare MIR codegen passes
  time: 0.000; rss: 127MB	write metadata
  time: 0.001; rss: 127MB	translation item collection
  time: 0.000; rss: 127MB	codegen unit partitioning
  time: 0.001; rss: 135MB	internalize symbols
time: 0.067; rss: 133MB	translation
time: 0.000; rss: 133MB	assert dep graph
time: 0.000; rss: 133MB	serialize dep graph
  time: 0.009; rss: 90MB	llvm function passes [0]
  time: 0.000; rss: 90MB	llvm module passes [0]
  time: 0.176; rss: 89MB	codegen passes [0]
  time: 0.000; rss: 89MB	codegen passes [0]
time: 0.186; rss: 89MB	LLVM passes
time: 0.000; rss: 89MB	serialize work products
  time: 0.202; rss: 79MB	running linker
time: 0.204; rss: 79MB	linking
done
