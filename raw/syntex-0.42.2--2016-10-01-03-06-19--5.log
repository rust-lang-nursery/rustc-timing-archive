commit 8b00355119ba0473eae420049f96f5be91be1bab
Merge: bba3fca afa72b5
Author: bors <bors@rust-lang.org>
Date:   Fri Sep 30 19:00:36 2016 -0700

    Auto merge of #36339 - brson:emscripten-new, r=alexcrichton
    
    Working asmjs and wasm targets
    
    This patch set results in a working standard library for the asmjs-unknown-emscripten and wasm32-unknown-emscripten targets. It is based on the work of @badboy and @rschulman.
    
    It does a few things:
    
    - Updates LLVM with the emscripten [fastcomp](https://github.com/rust-lang/llvm/pull/50) patches, which include the pnacl IR legalizer and the asm.js backend. This patch is thought not to have any significant effect on existing targets.
    - Teaches rustbuild to correctly link C code with emscripten
    - Updates gcc-rs to work correctly with emscripten
    - Teaches rustbuild to run crate tests for emscripten with node
    - Modifies Thread::new to return an error on emscripten, to facilitate debugging a common failure mode
    - Modifies libtest to run in single-threaded mode for emscripten
    - Ignores a host of tests that don't work yet, mostly dealing with threads and I/O
    - Updates libc with wasm32 definitions (presently the same as asmjs)
    - Adds a wasm32-unknown-emscripten target that feeds the output of LLVM's asmjs backend through emcc to generate wasm
    
    Notes and caveats:
    
    - This is only known to work with `--enable-rustbuild`.
    - The wasm32 target can't be tested correctly yet because of issues in compiletest and limitations in node https://github.com/kripken/emscripten/issues/4542, but hello.rs does seem to work when run on node via the binaryen interpreter
    - This requires an up to date installation of the emscripten sdk from its incoming branch
    - Unwinding is very broken
    - When enabling the emscripten targets jemalloc is disabled for all targets, which results in test failures for the host
    
    Next steps are to fix the jemalloc issue, start building the two emscripten targets on the auto builders, then start producing nightlies.
    
    https://github.com/rust-lang/rust/issues/36317 tracks work on this.
    
    Fixes https://github.com/rust-lang/rust/issues/36515
    Fixes https://github.com/rust-lang/rust/issues/36515
    Fixes https://github.com/rust-lang/rust/issues/36356
rustc: ./syntex-0.42.2
cargo rustc -p syntex_syntax -- -Ztime-passes -Zinput-stats
   Compiling syntex_syntax v0.42.0
time: 0.107; rss: 75MB	parsing
Lines of code:             33687
Pre-expansion node count:  224033
time: 0.000; rss: 75MB	recursion limit
time: 0.000; rss: 75MB	crate injection
time: 0.000; rss: 75MB	plugin loading
time: 0.000; rss: 75MB	plugin registration
time: 0.271; rss: 147MB	expansion
time: 0.000; rss: 147MB	maybe building test harness
time: 0.006; rss: 147MB	maybe creating a macro crate
Post-expansion node count: 641571
time: 0.000; rss: 147MB	checking for inline asm in case the target doesn't support it
time: 0.013; rss: 147MB	complete gated feature checking
time: 0.023; rss: 147MB	early lint checks
time: 0.007; rss: 147MB	AST validation
time: 0.084; rss: 161MB	name resolution
time: 0.049; rss: 201MB	lowering ast -> hir
time: 0.009; rss: 211MB	indexing hir
time: 0.006; rss: 211MB	attribute checking
time: 0.006; rss: 161MB	language item collection
time: 0.012; rss: 161MB	lifetime resolution
time: 0.000; rss: 161MB	looking for entry point
time: 0.000; rss: 161MB	looking for plugin registrar
time: 0.044; rss: 172MB	region resolution
time: 0.006; rss: 172MB	loop checking
time: 0.006; rss: 172MB	static item recursion checking
time: 0.295; rss: 173MB	compute_incremental_hashes_map
time: 0.000; rss: 173MB	load_dep_graph
time: 0.082; rss: 173MB	type collecting
time: 0.001; rss: 173MB	variance inference
time: 0.039; rss: 178MB	coherence checking
time: 0.099; rss: 180MB	wf checking
time: 0.197; rss: 188MB	item-types checking
time: 3.987; rss: 241MB	item-bodies checking
time: 0.000; rss: 241MB	drop-impl checking
time: 0.317; rss: 242MB	const checking
time: 0.055; rss: 242MB	privacy checking
time: 0.008; rss: 242MB	stability index
time: 0.022; rss: 242MB	intrinsic checking
time: 0.019; rss: 242MB	effect checking
time: 0.056; rss: 242MB	match checking
time: 0.055; rss: 238MB	liveness checking
time: 0.289; rss: 238MB	rvalue checking
time: 0.415; rss: 426MB	MIR dump
  time: 0.057; rss: 429MB	SimplifyCfg
  time: 0.082; rss: 429MB	QualifyAndPromoteConstants
  time: 0.110; rss: 429MB	TypeckMir
  time: 0.005; rss: 429MB	SimplifyBranches
  time: 0.037; rss: 429MB	SimplifyCfg
time: 0.292; rss: 429MB	MIR passes
time: 0.697; rss: 429MB	borrow checking
time: 0.018; rss: 429MB	reachability checking
time: 0.045; rss: 429MB	death checking
time: 0.042; rss: 429MB	stability checking
time: 0.000; rss: 429MB	unused lib feature checking
time: 0.217; rss: 429MB	lint checking
time: 0.000; rss: 429MB	resolving dependency formats
  time: 0.003; rss: 429MB	NoLandingPads
  time: 0.027; rss: 429MB	SimplifyCfg
  time: 0.072; rss: 442MB	EraseRegions
  time: 0.011; rss: 442MB	AddCallGuards
  time: 1.085; rss: 459MB	ElaborateDrops
  time: 0.004; rss: 459MB	NoLandingPads
  time: 0.052; rss: 459MB	SimplifyCfg
  time: 0.030; rss: 459MB	InstCombine
  time: 0.012; rss: 459MB	Deaggregator
  time: 0.003; rss: 459MB	CopyPropagation
  time: 0.010; rss: 459MB	AddCallGuards
  time: 0.003; rss: 459MB	PreTrans
time: 1.311; rss: 459MB	Prepare MIR codegen passes
  time: 0.264; rss: 465MB	write metadata
  time: 0.483; rss: 476MB	translation item collection
  time: 0.067; rss: 478MB	codegen unit partitioning
  time: 0.057; rss: 728MB	internalize symbols
time: 5.240; rss: 606MB	translation
time: 0.000; rss: 606MB	assert dep graph
time: 0.000; rss: 606MB	serialize dep graph
  time: 0.507; rss: 416MB	llvm function passes [0]
  time: 0.246; rss: 422MB	llvm module passes [0]
  time: 10.116; rss: 420MB	codegen passes [0]
  time: 0.001; rss: 420MB	codegen passes [0]
time: 11.613; rss: 420MB	LLVM passes
time: 0.000; rss: 420MB	serialize work products
time: 0.663; rss: 106MB	linking
done
