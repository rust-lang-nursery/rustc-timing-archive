commit c66d2380a810c9a2b3dbb4f93a830b101ee49cc2
Merge: 74dfc1d 67395d8
Author: bors <bors@rust-lang.org>
Date:   Tue Mar 15 15:03:00 2016 -0700

    Auto merge of #31838 - aochagavia:trans, r=nrc
    
    Refactor rustc_trans::save to allow other backends than CSV
    
    r? @nrc
    
    Things done:
    * Moved `(.*)Data` structs to an own module, so they can be imported easily (`use data::*`).
    * Created a `Dump` trait with callbacks for dumping items.
    * Refactored `DumpCsvVisitor` to use an implementor of `Dump` instead of dumping as CSV. Renamed it to `DumpVisitor`.
    * Created a `DumpCsv` struct that implements `Dump` and serializes items as CSV.
    
    I tried to extract some of the logic contained in `FmtStr` and `Recorder`, such as normalization of ids (I put it in `DumpVisitor`). I think it makes sense to provide the same information to other implementors of `Dump`, instead of normalizing only for `DumpCsv`. However, there is still some logic related to spans implemented only for `DumpCsv`. I just thought it would be better to merge this as soon as possible, since there are so much changes, and fix this afterwards.
rustc: ./hyper.0.5.0
cargo rustc -- -Ztime-passes -Zinput-stats
    Updating registry `https://github.com/rust-lang/crates.io-index`
   Compiling winapi v0.2.6
   Compiling matches v0.1.2
   Compiling pkg-config v0.3.8
   Compiling unicase v0.1.0
   Compiling libc v0.2.8
   Compiling libc v0.1.12
   Compiling httparse v0.1.6
   Compiling gcc v0.3.25
   Compiling traitobject v0.0.1
   Compiling typeable v0.1.2
   Compiling winapi-build v0.1.1
   Compiling lazy_static v0.1.15
   Compiling rustc-serialize v0.3.18
   Compiling kernel32-sys v0.2.1
   Compiling bitflags v0.3.3
   Compiling openssl-sys v0.6.7
   Compiling num_cpus v0.2.11
   Compiling log v0.3.5
   Compiling rand v0.3.14
   Compiling time v0.1.34
   Compiling mime v0.0.11
   Compiling openssl v0.6.7
   Compiling uuid v0.1.18
   Compiling url v0.2.38
   Compiling cookie v0.1.21
   Compiling hyper v0.5.0 (file:///root/benchmarks/hyper.0.5.0)
time: 0.030; rss: 45MB	parsing
Lines of code:             9154
Pre-expansion node count:  45594
time: 0.009; rss: 45MB	configuration 1
time: 0.000; rss: 45MB	recursion limit
time: 0.000; rss: 45MB	gated macro checking
time: 0.000; rss: 45MB	crate injection
time: 0.005; rss: 50MB	macro loading
time: 0.000; rss: 50MB	plugin loading
time: 0.000; rss: 50MB	plugin registration
time: 0.189; rss: 59MB	expansion
time: 0.005; rss: 59MB	complete gated feature checking 1
time: 0.034; rss: 59MB	configuration 2
time: 0.000; rss: 59MB	gated configuration checking
time: 0.013; rss: 59MB	maybe building test harness
time: 0.011; rss: 59MB	prelude injection
time: 0.001; rss: 59MB	checking that all macro invocations are gone
time: 0.000; rss: 59MB	checking for inline asm in case the target doesn't support it
time: 0.002; rss: 59MB	complete gated feature checking 2
time: 0.001; rss: 59MB	const fn bodies and arguments
Post-expansion node count: 109069
time: 0.010; rss: 59MB	assigning node ids
time: 0.010; rss: 63MB	lowering ast -> hir
time: 0.004; rss: 66MB	indexing hir
time: 0.001; rss: 66MB	attribute checking
time: 0.006; rss: 66MB	early lint checks
time: 0.004; rss: 62MB	external crate/lib resolution
time: 0.001; rss: 62MB	language item collection
time: 0.026; rss: 82MB	resolution
time: 0.002; rss: 82MB	lifetime resolution
time: 0.000; rss: 82MB	looking for entry point
time: 0.000; rss: 82MB	looking for plugin registrar
time: 0.005; rss: 86MB	region resolution
time: 0.001; rss: 86MB	loop checking
time: 0.001; rss: 86MB	static item recursion checking
time: 0.013; rss: 89MB	type collecting
time: 0.000; rss: 89MB	variance inference
time: 0.477; rss: 110MB	coherence checking
time: 0.076; rss: 110MB	wf checking
time: 0.030; rss: 113MB	item-types checking
time: 0.496; rss: 132MB	item-bodies checking
time: 0.000; rss: 132MB	drop-impl checking
time: 0.037; rss: 134MB	const checking
time: 0.008; rss: 134MB	privacy checking
time: 0.001; rss: 134MB	stability index
time: 0.004; rss: 134MB	intrinsic checking
time: 0.002; rss: 134MB	effect checking
time: 0.012; rss: 134MB	match checking
time: 0.005; rss: 134MB	liveness checking
time: 0.032; rss: 134MB	rvalue checking
time: 0.045; rss: 140MB	MIR dump
time: 0.027; rss: 140MB	MIR passes
time: 0.064; rss: 140MB	borrow checking
time: 0.003; rss: 140MB	reachability checking
time: 0.006; rss: 140MB	death checking
time: 0.005; rss: 140MB	stability checking
time: 0.000; rss: 140MB	unused lib feature checking
time: 0.045; rss: 140MB	lint checking
time: 0.000; rss: 140MB	resolving dependency formats
  time: 0.192; rss: 162MB	translation item collection
  time: 0.138; rss: 279MB	write metadata
time: 1.423; rss: 279MB	translation
  time: 0.095; rss: 164MB	llvm function passes [0]
  time: 0.047; rss: 166MB	llvm module passes [0]
  time: 1.614; rss: 168MB	codegen passes [0]
  time: 0.001; rss: 119MB	codegen passes [0]
time: 1.952; rss: 117MB	LLVM passes
time: 0.167; rss: 115MB	linking
done
