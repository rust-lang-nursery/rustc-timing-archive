commit 46957f05771a427545c792f69b37f8e05dcbb15d
Merge: 3210fd5 fb90e4c
Author: bors <bors@rust-lang.org>
Date:   Wed Oct 5 18:10:34 2016 -0700

    Auto merge of #36893 - apasel422:issue-32114, r=alexcrichton
    
    Restore `DISCONNECTED` state in `oneshot::Packet::send`
    
    Closes #32114
    
    I'm not sure if this is the best approach, but the current action of swapping `DISCONNECTED` with `DATA` seems wrong. Additionally, it is strange that the `send` method (and others in the `oneshot` module) takes `&mut self` despite performing atomic operations, as this requires extra discipline to avoid data races and lets us use methods like `AtomicUsize::get_mut` instead of methods that require a memory ordering.
rustc: ./syntex-0.42.2
cargo rustc -p syntex_syntax -- -Ztime-passes -Zinput-stats
   Compiling syntex_syntax v0.42.0
time: 0.108; rss: 76MB	parsing
Lines of code:             33687
Pre-expansion node count:  224033
time: 0.000; rss: 76MB	recursion limit
time: 0.000; rss: 76MB	crate injection
time: 0.000; rss: 76MB	plugin loading
time: 0.000; rss: 76MB	plugin registration
time: 0.275; rss: 146MB	expansion
time: 0.000; rss: 146MB	maybe building test harness
time: 0.006; rss: 146MB	maybe creating a macro crate
Post-expansion node count: 641571
time: 0.000; rss: 146MB	checking for inline asm in case the target doesn't support it
time: 0.013; rss: 146MB	complete gated feature checking
time: 0.023; rss: 146MB	early lint checks
time: 0.007; rss: 146MB	AST validation
time: 0.084; rss: 160MB	name resolution
time: 0.051; rss: 202MB	lowering ast -> hir
time: 0.009; rss: 211MB	indexing hir
time: 0.007; rss: 211MB	attribute checking
time: 0.006; rss: 161MB	language item collection
time: 0.012; rss: 161MB	lifetime resolution
time: 0.000; rss: 161MB	looking for entry point
time: 0.000; rss: 161MB	looking for plugin registrar
time: 0.045; rss: 173MB	region resolution
time: 0.006; rss: 173MB	loop checking
time: 0.006; rss: 173MB	static item recursion checking
time: 0.263; rss: 175MB	compute_incremental_hashes_map
time: 0.000; rss: 175MB	load_dep_graph
time: 0.080; rss: 177MB	type collecting
time: 0.001; rss: 177MB	variance inference
time: 0.041; rss: 180MB	coherence checking
time: 0.102; rss: 183MB	wf checking
time: 0.195; rss: 189MB	item-types checking
time: 3.953; rss: 241MB	item-bodies checking
time: 0.000; rss: 241MB	drop-impl checking
time: 0.315; rss: 241MB	const checking
time: 0.055; rss: 241MB	privacy checking
time: 0.007; rss: 241MB	stability index
time: 0.022; rss: 241MB	intrinsic checking
time: 0.019; rss: 241MB	effect checking
time: 0.057; rss: 241MB	match checking
time: 0.056; rss: 238MB	liveness checking
time: 0.285; rss: 238MB	rvalue checking
time: 0.421; rss: 426MB	MIR dump
  time: 0.063; rss: 429MB	SimplifyCfg
  time: 0.083; rss: 429MB	QualifyAndPromoteConstants
  time: 0.111; rss: 429MB	TypeckMir
  time: 0.005; rss: 429MB	SimplifyBranches
  time: 0.041; rss: 429MB	SimplifyCfg
time: 0.303; rss: 429MB	MIR passes
time: 0.696; rss: 430MB	borrow checking
time: 0.018; rss: 430MB	reachability checking
time: 0.045; rss: 430MB	death checking
time: 0.042; rss: 430MB	stability checking
time: 0.000; rss: 430MB	unused lib feature checking
time: 0.221; rss: 430MB	lint checking
time: 0.000; rss: 430MB	resolving dependency formats
  time: 0.003; rss: 430MB	NoLandingPads
  time: 0.029; rss: 430MB	SimplifyCfg
  time: 0.073; rss: 442MB	EraseRegions
  time: 0.011; rss: 442MB	AddCallGuards
  time: 1.047; rss: 457MB	ElaborateDrops
  time: 0.003; rss: 457MB	NoLandingPads
  time: 0.059; rss: 457MB	SimplifyCfg
  time: 0.030; rss: 457MB	InstCombine
  time: 0.012; rss: 457MB	Deaggregator
  time: 0.003; rss: 457MB	CopyPropagation
  time: 0.009; rss: 457MB	AddCallGuards
  time: 0.003; rss: 457MB	PreTrans
time: 1.282; rss: 457MB	Prepare MIR codegen passes
  time: 0.265; rss: 465MB	write metadata
  time: 0.475; rss: 475MB	translation item collection
  time: 0.067; rss: 479MB	codegen unit partitioning
  time: 0.058; rss: 726MB	internalize symbols
time: 5.154; rss: 604MB	translation
time: 0.000; rss: 604MB	assert dep graph
time: 0.000; rss: 604MB	serialize dep graph
  time: 0.511; rss: 415MB	llvm function passes [0]
  time: 0.247; rss: 419MB	llvm module passes [0]
  time: 10.065; rss: 413MB	codegen passes [0]
  time: 0.001; rss: 415MB	codegen passes [0]
time: 11.571; rss: 415MB	LLVM passes
time: 0.000; rss: 415MB	serialize work products
time: 0.652; rss: 107MB	linking
done
