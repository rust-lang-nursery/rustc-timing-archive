commit e96b9d2bb48b7a886a4d2b9df716265af5d15646
Merge: 713a360 67626e0
Author: bors <bors@rust-lang.org>
Date:   Fri Nov 4 17:48:07 2016 -0700

    Auto merge of #37422 - bluss:wrapping-offset, r=alexcrichton
    
    Add .wrapping_offset() methods
    
    .wrapping_offset() exposes the arith_offset intrinsic in the core
    module (as methods on raw pointers, next to offset). This is the
    first step in making it possible to stabilize the interface later.
    
    `arith_offset` is a useful tool for developing iterators for two
    reasons:
    1. `arith_offset` is used by the slice's iterator, the most important
       iterator in libcore, and it is natural that Rust users need the same
       power available to implement similar iterators.
    2. It is a good way to implement raw pointer iterations with step
       greater than one.
    
    The name seems to fit the style of methods like "wrapping_add".
rustc: ./piston-image-0.10.3
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling gcc v0.3.35
   Compiling bitflags v0.7.0
   Compiling color_quant v1.0.0
   Compiling glob v0.2.11
   Compiling inflate v0.1.1
   Compiling byteorder v0.5.3
   Compiling libc v0.2.16
   Compiling rustc-serialize v0.3.19
   Compiling lzw v0.10.0
   Compiling scoped_threadpool v0.1.7
   Compiling num-traits v0.1.35
   Compiling gif v0.9.0
   Compiling num_cpus v0.2.13
   Compiling rand v0.3.14
   Compiling miniz-sys v0.1.7
   Compiling num-integer v0.1.32
   Compiling num-iter v0.1.32
   Compiling num v0.1.35
   Compiling enum_primitive v0.1.0
   Compiling flate2 v0.2.14
   Compiling deque v0.3.1
   Compiling rayon v0.4.2
   Compiling jpeg-decoder v0.1.6
   Compiling num-bigint v0.1.35
   Compiling png v0.5.2
   Compiling num-rational v0.1.35
   Compiling image v0.10.3 (file:///root/benchmarks/piston-image-0.10.3)
time: 0.044; rss: 56MB	parsing
Lines of code:             12000
Pre-expansion node count:  90272
time: 0.000; rss: 56MB	recursion limit
time: 0.000; rss: 56MB	crate injection
time: 0.000; rss: 56MB	plugin loading
time: 0.000; rss: 56MB	plugin registration
time: 0.073; rss: 94MB	expansion
time: 0.000; rss: 94MB	maybe building test harness
time: 0.002; rss: 94MB	maybe creating a macro crate
Post-expansion node count: 148999
time: 0.000; rss: 94MB	checking for inline asm in case the target doesn't support it
time: 0.003; rss: 94MB	complete gated feature checking
time: 0.006; rss: 94MB	early lint checks
time: 0.001; rss: 94MB	AST validation
time: 0.021; rss: 99MB	name resolution
time: 0.012; rss: 107MB	lowering ast -> hir
time: 0.002; rss: 111MB	indexing hir
time: 0.002; rss: 111MB	attribute checking
time: 0.001; rss: 100MB	language item collection
time: 0.002; rss: 100MB	lifetime resolution
time: 0.000; rss: 100MB	looking for entry point
time: 0.000; rss: 100MB	looking for plugin registrar
time: 0.010; rss: 105MB	region resolution
time: 0.001; rss: 105MB	loop checking
time: 0.001; rss: 105MB	static item recursion checking
time: 0.076; rss: 105MB	compute_incremental_hashes_map
time: 0.000; rss: 105MB	load_dep_graph
time: 0.017; rss: 107MB	type collecting
time: 0.000; rss: 107MB	variance inference
time: 0.026; rss: 111MB	coherence checking
time: 0.076; rss: 115MB	wf checking
time: 0.143; rss: 119MB	item-types checking
time: 0.793; rss: 133MB	item-bodies checking
time: 0.000; rss: 133MB	drop-impl checking
time: 0.053; rss: 135MB	const checking
time: 0.009; rss: 135MB	privacy checking
time: 0.001; rss: 135MB	stability index
time: 0.007; rss: 135MB	intrinsic checking
time: 0.003; rss: 135MB	effect checking
time: 0.014; rss: 135MB	match checking
time: 0.010; rss: 134MB	liveness checking
time: 0.045; rss: 133MB	rvalue checking
time: 0.097; rss: 175MB	MIR dump
  time: 0.011; rss: 175MB	SimplifyCfg
  time: 0.021; rss: 175MB	QualifyAndPromoteConstants
  time: 0.023; rss: 175MB	TypeckMir
  time: 0.001; rss: 175MB	SimplifyBranches
  time: 0.005; rss: 175MB	SimplifyCfg
time: 0.060; rss: 175MB	MIR cleanup and validation
time: 0.117; rss: 175MB	borrow checking
time: 0.004; rss: 175MB	reachability checking
time: 0.008; rss: 175MB	death checking
time: 0.009; rss: 175MB	stability checking
time: 0.000; rss: 175MB	unused lib feature checking
time: 0.070; rss: 175MB	lint checking
time: 0.000; rss: 175MB	resolving dependency formats
  time: 0.001; rss: 175MB	NoLandingPads
  time: 0.005; rss: 175MB	SimplifyCfg
  time: 0.012; rss: 177MB	EraseRegions
  time: 0.002; rss: 177MB	AddCallGuards
  time: 0.044; rss: 179MB	ElaborateDrops
  time: 0.001; rss: 179MB	NoLandingPads
  time: 0.009; rss: 179MB	SimplifyCfg
  time: 0.006; rss: 179MB	InstCombine
  time: 0.002; rss: 179MB	Deaggregator
  time: 0.000; rss: 179MB	CopyPropagation
  time: 0.007; rss: 179MB	SimplifyLocals
  time: 0.002; rss: 179MB	AddCallGuards
  time: 0.000; rss: 179MB	PreTrans
time: 0.091; rss: 179MB	MIR optimisations
  time: 0.016; rss: 182MB	write metadata
  time: 0.456; rss: 194MB	translation item collection
  time: 0.025; rss: 198MB	codegen unit partitioning
  time: 0.021; rss: 321MB	internalize symbols
time: 2.653; rss: 321MB	translation
time: 0.000; rss: 321MB	assert dep graph
time: 0.000; rss: 321MB	serialize dep graph
  time: 0.212; rss: 230MB	llvm function passes [0]
  time: 0.082; rss: 232MB	llvm module passes [0]
  time: 4.244; rss: 231MB	codegen passes [0]
  time: 0.000; rss: 231MB	codegen passes [0]
time: 4.841; rss: 231MB	LLVM passes
time: 0.000; rss: 231MB	serialize work products
time: 0.128; rss: 100MB	linking
done
