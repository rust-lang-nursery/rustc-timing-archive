commit 3fef221514ab31088f75d14516c851e68a70cf9e
Merge: 5f128ed bc3618e
Author: bors <bors@rust-lang.org>
Date:   Wed Dec 7 00:30:25 2016 +0000

    Auto merge of #38134 - bluss:iter-nth, r=aturon
    
    Remove Self: Sized from Iterator::nth
    
    It is an unnecessary restriction; nth neither needs self to be sized
    nor needs to be exempted from the trait object.
    
    It increases the utility of the nth method, because type specific
    implementations are available through `&mut I` or through an iterator
    trait object.
    
    It is a backwards compatible change due to the special cases of the
    `where Self: Sized` bound; it was already optional to include this bound
    in `Iterator` implementations.
rustc: ./html5ever-2016-08-25
cargo rustc  -- -Ztime-passes -Zinput-stats
time: 0.024; rss: 50MB	parsing
Lines of code:             8210
Pre-expansion node count:  52140
time: 0.000; rss: 50MB	recursion limit
time: 0.000; rss: 50MB	crate injection
time: 0.000; rss: 50MB	plugin loading
time: 0.000; rss: 50MB	plugin registration
time: 0.688; rss: 102MB	expansion
time: 0.000; rss: 102MB	maybe building test harness
time: 0.002; rss: 102MB	maybe creating a macro crate
Post-expansion node count: 163412
time: 0.000; rss: 102MB	checking for inline asm in case the target doesn't support it
time: 0.003; rss: 102MB	complete gated feature checking
time: 0.008; rss: 103MB	early lint checks
time: 0.002; rss: 103MB	AST validation
time: 0.016; rss: 105MB	name resolution
time: 0.014; rss: 116MB	lowering ast -> hir
time: 0.002; rss: 118MB	indexing hir
time: 0.002; rss: 118MB	attribute checking
time: 0.001; rss: 100MB	language item collection
time: 0.002; rss: 100MB	lifetime resolution
time: 0.000; rss: 100MB	looking for entry point
time: 0.000; rss: 100MB	looking for plugin registrar
time: 0.012; rss: 104MB	region resolution
time: 0.001; rss: 104MB	loop checking
time: 0.001; rss: 104MB	static item recursion checking
time: 0.023; rss: 104MB	compute_incremental_hashes_map
time: 0.000; rss: 104MB	load_dep_graph
time: 0.001; rss: 104MB	stability index
time: 0.003; rss: 104MB	stability checking
time: 0.009; rss: 107MB	type collecting
time: 0.000; rss: 107MB	variance inference
time: 0.000; rss: 107MB	impl wf inference
time: 0.011; rss: 108MB	coherence checking
time: 0.019; rss: 109MB	wf checking
time: 0.258; rss: 116MB	item-types checking
time: 0.417; rss: 128MB	item-bodies checking
time: 0.000; rss: 128MB	drop-impl checking
time: 0.057; rss: 130MB	const checking
time: 0.006; rss: 131MB	privacy checking
time: 0.002; rss: 131MB	intrinsic checking
time: 0.002; rss: 131MB	effect checking
time: 0.014; rss: 131MB	match checking
time: 0.010; rss: 130MB	liveness checking
time: 0.021; rss: 130MB	rvalue checking
time: 0.102; rss: 171MB	MIR dump
  time: 0.008; rss: 171MB	SimplifyCfg
  time: 0.013; rss: 173MB	QualifyAndPromoteConstants
  time: 0.022; rss: 173MB	TypeckMir
  time: 0.000; rss: 173MB	SimplifyBranches
  time: 0.004; rss: 173MB	SimplifyCfg
time: 0.047; rss: 173MB	MIR cleanup and validation
time: 0.076; rss: 178MB	borrow checking
time: 0.002; rss: 178MB	reachability checking
time: 0.005; rss: 178MB	death checking
time: 0.000; rss: 178MB	unused lib feature checking
time: 0.051; rss: 178MB	lint checking
time: 0.000; rss: 178MB	resolving dependency formats
  time: 0.000; rss: 178MB	NoLandingPads
  time: 0.004; rss: 178MB	SimplifyCfg
  time: 0.009; rss: 179MB	EraseRegions
  time: 0.001; rss: 179MB	AddCallGuards
  time: 0.073; rss: 183MB	ElaborateDrops
  time: 0.000; rss: 183MB	NoLandingPads
  time: 0.007; rss: 179MB	SimplifyCfg
  time: 0.007; rss: 177MB	InstCombine
  time: 0.001; rss: 177MB	Deaggregator
  time: 0.000; rss: 177MB	CopyPropagation
  time: 0.007; rss: 175MB	SimplifyLocals
  time: 0.001; rss: 175MB	AddCallGuards
  time: 0.000; rss: 175MB	PreTrans
time: 0.110; rss: 175MB	MIR optimisations
  time: 0.011; rss: 178MB	write metadata
  time: 0.042; rss: 189MB	translation item collection
  time: 0.004; rss: 190MB	codegen unit partitioning
  time: 0.005; rss: 206MB	internalize symbols
time: 0.326; rss: 206MB	translation
time: 0.000; rss: 206MB	assert dep graph
time: 0.000; rss: 206MB	serialize dep graph
  time: 0.020; rss: 112MB	llvm function passes [0]
  time: 0.014; rss: 113MB	llvm module passes [0]
  time: 0.484; rss: 116MB	codegen passes [0]
  time: 0.000; rss: 116MB	codegen passes [0]
time: 0.558; rss: 116MB	LLVM passes
time: 0.000; rss: 116MB	serialize work products
time: 0.025; rss: 99MB	linking
done
