commit 1586005a1d15e7d26b6c46a33e7a9643de9a77ac
Merge: 0672ed4 52883ab
Author: bors <bors@rust-lang.org>
Date:   Mon Jan 11 19:03:18 2016 +0000

    Auto merge of #30534 - bluss:binary-heap-fast-pop, r=Gankro
    
    BinaryHeap: Use full sift down in .pop()
    
    .sift_down can either choose to compare the element on the way down (and
    place it during descent), or to sift down an element fully, then sift
    back up to place it.
    
    A previous PR changed .sift_down() to the former behavior, which is much
    faster for relatively small heaps and for elements that are cheap to
    compare.
    
    A benchmarking run suggested that BinaryHeap::pop() suffers
    improportionally from this, and that it should use the second strategy
    instead. It's logical since .pop() brings last element from the
    heapified vector into index 0, it's very likely that this element will
    end up at the bottom again.
    
    Closes #29969
    Previous PR #29811
rustc: ./regex.0.1.30
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling regex v0.1.30 (file:///root/benchmarks/regex.0.1.30)
time: 0.063; rss: 42MB	parsing
Lines of code:             8558
Pre-expansion node count:  58217
time: 0.011; rss: 42MB	configuration 1
time: 0.000; rss: 42MB	recursion limit
time: 0.001; rss: 42MB	gated macro checking
time: 0.000; rss: 42MB	crate injection
time: 0.003; rss: 45MB	macro loading
time: 0.000; rss: 45MB	plugin loading
time: 0.000; rss: 45MB	plugin registration
time: 0.065; rss: 49MB	expansion
time: 0.001; rss: 49MB	complete gated feature checking 1
time: 0.013; rss: 49MB	configuration 2
time: 0.000; rss: 49MB	gated configuration checking
time: 0.006; rss: 49MB	maybe building test harness
time: 0.006; rss: 49MB	prelude injection
time: 0.000; rss: 49MB	checking that all macro invocations are gone
time: 0.000; rss: 49MB	checking for inline asm in case the target doesn't support it
time: 0.001; rss: 49MB	complete gated feature checking 2
Post-expansion node count: 68727
time: 0.006; rss: 49MB	assigning node ids
time: 0.009; rss: 56MB	lowering ast -> hir
time: 0.002; rss: 58MB	indexing hir
time: 0.000; rss: 58MB	attribute checking
time: 0.004; rss: 58MB	early lint checks
time: 0.001; rss: 51MB	external crate/lib resolution
time: 0.001; rss: 51MB	language item collection
time: 0.009; rss: 59MB	resolution
time: 0.001; rss: 59MB	lifetime resolution
time: 0.000; rss: 59MB	looking for entry point
time: 0.000; rss: 59MB	looking for plugin registrar
time: 0.006; rss: 63MB	region resolution
time: 0.001; rss: 63MB	loop checking
time: 0.001; rss: 63MB	static item recursion checking
time: 0.004; rss: 66MB	type collecting
time: 0.000; rss: 66MB	variance inference
time: 0.023; rss: 82MB	coherence checking
time: 0.008; rss: 82MB	wf checking
time: 0.092; rss: 87MB	item-types checking
time: 0.210; rss: 102MB	item-bodies checking
time: 0.000; rss: 102MB	drop-impl checking
time: 0.027; rss: 102MB	const checking
time: 0.004; rss: 102MB	privacy checking
time: 0.000; rss: 102MB	stability index
time: 0.001; rss: 102MB	intrinsic checking
time: 0.001; rss: 102MB	effect checking
time: 0.003; rss: 102MB	match checking
time: 0.016; rss: 105MB	MIR dump
time: 0.002; rss: 105MB	liveness checking
time: 0.021; rss: 106MB	borrow checking
time: 0.007; rss: 106MB	rvalue checking
time: 0.000; rss: 106MB	reachability checking
time: 0.002; rss: 106MB	death checking
time: 0.003; rss: 106MB	stability checking
time: 0.000; rss: 106MB	unused lib feature checking
time: 0.029; rss: 106MB	lint checking
time: 0.000; rss: 106MB	resolving dependency formats
time: 0.002; rss: 106MB	erasing regions from MIR
  time: 0.132; rss: 168MB	write metadata
time: 0.619; rss: 168MB	translation
  time: 0.039; rss: 110MB	llvm function passes [0]
  time: 0.020; rss: 112MB	llvm module passes [0]
  time: 0.610; rss: 137MB	codegen passes [0]
  time: 0.001; rss: 124MB	codegen passes [0]
time: 0.749; rss: 124MB	LLVM passes
time: 0.067; rss: 122MB	linking
done
