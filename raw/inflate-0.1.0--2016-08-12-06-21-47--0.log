commit f55ac6944a88d4da62b30a16cc95893ca050c328
Merge: 68d9284 23f0494
Author: bors <bors@rust-lang.org>
Date:   Fri Aug 12 01:26:12 2016 -0700

    Auto merge of #35091 - eddyb:impl-trait, r=nikomatsakis
    
    Implement `impl Trait` in return type position by anonymization.
    
    This is the first step towards implementing `impl Trait` (cc #34511).
    `impl Trait` types are only allowed in function and inherent method return types, and capture all named lifetime and type parameters, being invariant over them.
    No lifetimes that are not explicitly named lifetime parameters are allowed to escape from the function body.
    The exposed traits are only those listed explicitly, i.e. `Foo` and `Clone` in `impl Foo + Clone`, with the exception of "auto traits" (like `Send` or `Sync`) which "leak" the actual contents.
    
    The implementation strategy is anonymization, i.e.:
    ```rust
    fn foo<T>(xs: Vec<T>) -> impl Iterator<Item=impl FnOnce() -> T> {
        xs.into_iter().map(|x| || x)
    }
    
    // is represented as:
    type A</*invariant over*/ T> where A<T>: Iterator<Item=B<T>>;
    type B</*invariant over*/ T> where B<T>: FnOnce() -> T;
    fn foo<T>(xs: Vec<T>) -> A<T> {
        xs.into_iter().map(|x| || x): $0 where $0: Iterator<Item=$1>, $1: FnOnce() -> T
    }
    ```
    `$0` and `$1` are resolved (to `iter::Map<vec::Iter<T>, closure>` and the closure, respectively) and assigned to `A` and `B`, after checking the body of `foo`. `A` and `B` are *never* resolved for user-facing type equality (typeck), but always for the low-level representation and specialization (trans).
    
    The "auto traits" exception is implemented by collecting bounds like `impl Trait: Send` that have failed for the obscure `impl Trait` type (i.e. `A` or `B` above), pretending they succeeded within the function and trying them again after type-checking the whole crate, by replacing `impl Trait` with the real type.
    
    While passing around values which have explicit lifetime parameters (of the function with `-> impl Trait`) in their type *should* work, regionck appears to assign inference variables in *way* too many cases, and never properly resolving them to either explicit lifetime parameters, or `'static`.
    We might not be able to handle lifetime parameters in `impl Trait` without changes to lifetime inference, but type parameters can have arbitrary lifetimes in them from the caller, so most type-generic usecases (or not generic at all) should not run into this problem.
    
    cc @rust-lang/lang
rustc: ./inflate-0.1.0
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling inflate v0.1.0 (file:///root/benchmarks/inflate-0.1.0)
time: 0.004; rss: 52MB	parsing
Lines of code:             956
Pre-expansion node count:  4738
time: 0.000; rss: 52MB	configuration
time: 0.000; rss: 52MB	recursion limit
time: 0.000; rss: 52MB	crate injection
time: 0.000; rss: 52MB	plugin loading
time: 0.000; rss: 52MB	plugin registration
time: 0.072; rss: 93MB	expansion
time: 0.000; rss: 93MB	maybe building test harness
time: 0.003; rss: 93MB	assigning node ids
Post-expansion node count: 55769
time: 0.000; rss: 93MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 93MB	complete gated feature checking
time: 0.005; rss: 93MB	collecting defs
time: 0.001; rss: 93MB	external crate/lib resolution
time: 0.002; rss: 93MB	early lint checks
time: 0.000; rss: 93MB	AST validation
time: 0.010; rss: 95MB	name resolution
time: 0.006; rss: 99MB	lowering ast -> hir
time: 0.001; rss: 101MB	indexing hir
time: 0.001; rss: 101MB	attribute checking
time: 0.001; rss: 99MB	language item collection
time: 0.001; rss: 99MB	lifetime resolution
time: 0.000; rss: 99MB	looking for entry point
time: 0.000; rss: 99MB	looking for plugin registrar
time: 0.003; rss: 100MB	region resolution
time: 0.000; rss: 100MB	loop checking
time: 0.000; rss: 100MB	static item recursion checking
time: 0.000; rss: 100MB	load_dep_graph
time: 0.001; rss: 102MB	type collecting
time: 0.000; rss: 102MB	variance inference
time: 0.010; rss: 103MB	coherence checking
time: 0.002; rss: 103MB	wf checking
time: 0.002; rss: 103MB	item-types checking
time: 2.593; rss: 119MB	item-bodies checking
time: 0.000; rss: 119MB	drop-impl checking
time: 0.015; rss: 120MB	const checking
time: 0.001; rss: 120MB	privacy checking
time: 0.000; rss: 120MB	stability index
time: 0.001; rss: 120MB	intrinsic checking
time: 0.001; rss: 120MB	effect checking
time: 0.004; rss: 120MB	match checking
time: 0.262; rss: 118MB	liveness checking
time: 0.011; rss: 118MB	rvalue checking
time: 0.032; rss: 131MB	MIR dump
time: 0.018; rss: 130MB	MIR passes
time: 0.218; rss: 131MB	borrow checking
time: 0.000; rss: 131MB	reachability checking
time: 0.003; rss: 131MB	death checking
time: 0.002; rss: 131MB	stability checking
time: 0.000; rss: 131MB	unused lib feature checking
time: 0.019; rss: 132MB	lint checking
time: 0.000; rss: 132MB	resolving dependency formats
time: 0.144; rss: 129MB	Prepare MIR codegen passes
  time: 0.003; rss: 130MB	write metadata
  time: 0.009; rss: 131MB	translation item collection
  time: 0.001; rss: 132MB	codegen unit partitioning
  time: 0.002; rss: 153MB	internalize symbols
time: 0.200; rss: 147MB	translation
time: 0.000; rss: 147MB	assert dep graph
time: 0.000; rss: 147MB	serialize dep graph
  time: 0.027; rss: 113MB	llvm function passes [0]
  time: 0.005; rss: 113MB	llvm module passes [0]
  time: 0.639; rss: 120MB	codegen passes [0]
  time: 0.000; rss: 120MB	codegen passes [0]
time: 0.704; rss: 117MB	LLVM passes
time: 0.000; rss: 117MB	serialize work products
time: 0.047; rss: 106MB	linking
done
