commit a36c41912ba91435d75ab5702ed8bc30116565fe
Merge: 6301e22 61cbd07
Author: bors <bors@rust-lang.org>
Date:   Fri May 6 03:07:00 2016 -0700

    Auto merge of #33086 - cardoe:non-blocking-rand-read, r=alexcrichton
    
    rand: don't block before random pool is initialized
    
    If we attempt a read with getrandom() on Linux the syscall can block
    before the random pool is initialized unless the GRND_NONBLOCK flag is
    passed. This flag causes getrandom() to instead return EAGAIN while the
    pool is uninitialized. To avoid downstream users of crate or std
    functionality that have no ability to avoid this blocking behavior this
    change causes Rust to read bytes from /dev/urandom while getrandom()
    would block and once getrandom() is available to use that. Fixes #32953.
    
    Signed-off-by: Doug Goldstein <cardoe@cardoe.com>
rustc: ./inflate-0.1.0
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling inflate v0.1.0 (file:///root/benchmarks/inflate-0.1.0)
time: 0.004; rss: 47MB	parsing
Lines of code:             956
Pre-expansion node count:  4761
time: 0.001; rss: 47MB	configuration 1
time: 0.000; rss: 47MB	recursion limit
time: 0.000; rss: 47MB	crate injection
time: 0.003; rss: 54MB	macro loading
time: 0.000; rss: 54MB	plugin loading
time: 0.000; rss: 54MB	plugin registration
time: 0.084; rss: 61MB	expansion
time: 0.009; rss: 61MB	configuration 2
time: 0.000; rss: 61MB	gated configuration checking
time: 0.004; rss: 61MB	maybe building test harness
time: 0.004; rss: 61MB	prelude injection
time: 0.000; rss: 61MB	checking that all macro invocations are gone
time: 0.000; rss: 61MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 61MB	complete gated feature checking
time: 0.000; rss: 61MB	const fn bodies and arguments
Post-expansion node count: 54797
time: 0.004; rss: 61MB	assigning node ids
time: 0.004; rss: 63MB	collecting defs
time: 0.001; rss: 63MB	external crate/lib resolution
time: 0.009; rss: 67MB	lowering ast -> hir
time: 0.001; rss: 67MB	indexing hir
time: 0.001; rss: 67MB	attribute checking
time: 0.003; rss: 67MB	early lint checks
time: 0.001; rss: 64MB	language item collection
time: 0.010; rss: 75MB	name resolution
time: 0.001; rss: 75MB	lifetime resolution
time: 0.000; rss: 75MB	looking for entry point
time: 0.000; rss: 75MB	looking for plugin registrar
time: 0.003; rss: 75MB	region resolution
time: 0.000; rss: 75MB	loop checking
time: 0.000; rss: 75MB	static item recursion checking
time: 0.000; rss: 75MB	load_dep_graph
time: 0.001; rss: 76MB	type collecting
time: 0.000; rss: 76MB	variance inference
time: 0.010; rss: 90MB	coherence checking
time: 0.002; rss: 90MB	wf checking
time: 0.002; rss: 90MB	item-types checking
time: 2.768; rss: 114MB	item-bodies checking
time: 0.000; rss: 114MB	drop-impl checking
time: 0.015; rss: 115MB	const checking
time: 0.001; rss: 115MB	privacy checking
time: 0.000; rss: 115MB	stability index
time: 0.000; rss: 115MB	intrinsic checking
time: 0.001; rss: 115MB	effect checking
time: 0.003; rss: 115MB	match checking
time: 0.060; rss: 115MB	liveness checking
time: 0.009; rss: 115MB	rvalue checking
time: 0.034; rss: 129MB	MIR dump
time: 0.012; rss: 126MB	MIR passes
time: 0.238; rss: 126MB	borrow checking
time: 0.000; rss: 126MB	reachability checking
time: 0.003; rss: 126MB	death checking
time: 0.002; rss: 126MB	stability checking
time: 0.000; rss: 126MB	unused lib feature checking
time: 0.023; rss: 128MB	lint checking
time: 0.000; rss: 128MB	resolving dependency formats
time: 0.005; rss: 128MB	Prepare MIR codegen passes
  time: 0.010; rss: 131MB	translation item collection
  time: 0.001; rss: 131MB	codegen unit partitioning
  time: 0.003; rss: 150MB	write metadata
time: 0.362; rss: 142MB	translation
time: 0.000; rss: 142MB	assert dep graph
time: 0.000; rss: 142MB	serialize dep graph
  time: 0.026; rss: 105MB	llvm function passes [0]
  time: 0.005; rss: 106MB	llvm module passes [0]
  time: 0.500; rss: 111MB	codegen passes [0]
  time: 0.000; rss: 100MB	codegen passes [0]
time: 0.572; rss: 100MB	LLVM passes
time: 0.034; rss: 100MB	linking
done
