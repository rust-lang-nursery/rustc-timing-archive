commit 01b35d82e51458870f61cf850b73479f253fcb54
Merge: a029ea3 175d434
Author: bors <bors@rust-lang.org>
Date:   Sat Sep 3 04:40:38 2016 -0700

    Auto merge of #36072 - arthurprs:binary_heap_opt, r=Aatch
    
    Optimize BinaryHeap bounds checking
    
    I was experimenting with d-ary binary heaps during the weekend (dead end) and I found that we could get some good improvements by removing bounds checking. Specially due to the panic-safe additional code, llvm can't really optimize them out.
    
    ```
     name                         d_ary_heap:: ns/iter  std___heap:: ns/iter  diff ns/iter  diff %
     bench_build_insert           148,610               236,960                     88,350  59.45%
     bench_from_vec               243,846               299,719                     55,873  22.91%
     bench_insert_2000_empty      4,512                 7,517                        3,005  66.60%
     bench_insert_2000_prefilled  28,665                32,605                       3,940  13.74%
     bench_pop_2000               111,515               128,005                     16,490  14.79%
     bench_pop_all                2,759,945             3,317,626                  557,681  20.21%
     peek_mut                     23,186                23,635                         449   1.94%
     pop_modify_push              41,573                43,822                       2,249   5.41%
    
    test d_ary_heap::bench_build_insert          ... bench:     148,610 ns/iter (+/- 10,687)
    test d_ary_heap::bench_from_vec              ... bench:     243,846 ns/iter (+/- 16,500)
    test d_ary_heap::bench_insert_2000_empty     ... bench:       4,512 ns/iter (+/- 136)
    test d_ary_heap::bench_insert_2000_prefilled ... bench:      28,665 ns/iter (+/- 1,347)
    test d_ary_heap::bench_pop_2000              ... bench:     111,515 ns/iter (+/- 104,677)
    test d_ary_heap::bench_pop_all               ... bench:   2,759,945 ns/iter (+/- 173,838)
    test d_ary_heap::peek_mut                    ... bench:      23,186 ns/iter (+/- 106,254)
    test d_ary_heap::pop_modify_push             ... bench:      41,573 ns/iter (+/- 3,313)
    test std___heap::bench_build_insert          ... bench:     236,960 ns/iter (+/- 16,955)
    test std___heap::bench_from_vec              ... bench:     299,719 ns/iter (+/- 6,354)
    test std___heap::bench_insert_2000_empty     ... bench:       7,517 ns/iter (+/- 372)
    test std___heap::bench_insert_2000_prefilled ... bench:      32,605 ns/iter (+/- 2,433)
    test std___heap::bench_pop_2000              ... bench:     128,005 ns/iter (+/- 11,787)
    test std___heap::bench_pop_all               ... bench:   3,317,626 ns/iter (+/- 238,968)
    test std___heap::peek_mut                    ... bench:      23,635 ns/iter (+/- 1,420)
    test std___heap::pop_modify_push             ... bench:      43,822 ns/iter (+/- 3,788)
    ```
    
    Test code: https://github.com/arthurprs/heap-experiments
rustc: ./futures-rs-test-all
cargo rustc --test all --verbose -- -Ztime-passes -Zinput-stats
       Fresh log v0.3.6
   Compiling futures v0.1.0 (file:///root/benchmarks/futures-rs-test-all)
     Running `/root/rust/x86_64-unknown-linux-gnu/stage2/bin/rustc tests/all.rs --crate-name all --crate-type bin -g -Ztime-passes -Zinput-stats --test -C metadata=449e6fc7d003a0bc -C extra-filename=-449e6fc7d003a0bc --out-dir /root/benchmarks/futures-rs-test-all/target/debug --emit=dep-info,link -L dependency=/root/benchmarks/futures-rs-test-all/target/debug -L dependency=/root/benchmarks/futures-rs-test-all/target/debug/deps --extern log=/root/benchmarks/futures-rs-test-all/target/debug/deps/liblog-30a8a27ec161f1be.rlib --extern futures=/root/benchmarks/futures-rs-test-all/target/debug/libfutures.rlib`
time: 0.003; rss: 44MB	parsing
Lines of code:             412
Pre-expansion node count:  5522
time: 0.000; rss: 44MB	configuration
time: 0.000; rss: 44MB	recursion limit
time: 0.000; rss: 44MB	crate injection
time: 0.000; rss: 44MB	plugin loading
time: 0.000; rss: 44MB	plugin registration
time: 0.023; rss: 63MB	expansion
time: 0.000; rss: 63MB	maybe building test harness
time: 0.000; rss: 63MB	maybe creating a macro crate
time: 0.000; rss: 68MB	assigning node ids
Post-expansion node count: 10613
time: 0.000; rss: 68MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 68MB	complete gated feature checking
time: 0.000; rss: 68MB	collecting defs
time: 0.005; rss: 69MB	external crate/lib resolution
time: 0.000; rss: 69MB	early lint checks
time: 0.000; rss: 69MB	AST validation
time: 0.002; rss: 69MB	name resolution
time: 0.001; rss: 72MB	lowering ast -> hir
time: 0.000; rss: 72MB	indexing hir
time: 0.000; rss: 72MB	attribute checking
time: 0.000; rss: 72MB	language item collection
time: 0.000; rss: 72MB	lifetime resolution
time: 0.000; rss: 72MB	looking for entry point
time: 0.000; rss: 72MB	looking for plugin registrar
time: 0.001; rss: 72MB	region resolution
time: 0.000; rss: 72MB	loop checking
time: 0.000; rss: 72MB	static item recursion checking
time: 0.001; rss: 72MB	compute_incremental_hashes_map
time: 0.000; rss: 72MB	load_dep_graph
time: 0.005; rss: 72MB	type collecting
time: 0.000; rss: 72MB	variance inference
time: 0.004; rss: 72MB	coherence checking
time: 0.014; rss: 75MB	wf checking
time: 0.003; rss: 75MB	item-types checking
time: 0.154; rss: 81MB	item-bodies checking
time: 0.000; rss: 81MB	drop-impl checking
time: 0.005; rss: 83MB	const checking
time: 0.000; rss: 83MB	privacy checking
time: 0.000; rss: 83MB	stability index
time: 0.000; rss: 83MB	intrinsic checking
time: 0.000; rss: 83MB	effect checking
time: 0.001; rss: 83MB	match checking
time: 0.001; rss: 83MB	liveness checking
time: 0.004; rss: 83MB	rvalue checking
time: 0.007; rss: 85MB	MIR dump
time: 0.005; rss: 85MB	MIR passes
time: 0.008; rss: 85MB	borrow checking
time: 0.000; rss: 85MB	reachability checking
time: 0.000; rss: 85MB	death checking
time: 0.000; rss: 85MB	stability checking
time: 0.000; rss: 85MB	unused lib feature checking
time: 0.003; rss: 85MB	lint checking
time: 0.002; rss: 85MB	resolving dependency formats
time: 0.017; rss: 87MB	Prepare MIR codegen passes
  time: 0.000; rss: 87MB	write metadata
  time: 0.195; rss: 96MB	translation item collection
  time: 0.020; rss: 96MB	codegen unit partitioning
  time: 0.043; rss: 148MB	internalize symbols
time: 1.463; rss: 148MB	translation
time: 0.000; rss: 148MB	assert dep graph
time: 0.000; rss: 148MB	serialize dep graph
  time: 0.083; rss: 133MB	llvm function passes [0]
  time: 0.026; rss: 135MB	llvm module passes [0]
  time: 1.761; rss: 139MB	codegen passes [0]
  time: 0.000; rss: 139MB	codegen passes [0]
time: 1.872; rss: 139MB	LLVM passes
time: 0.000; rss: 139MB	serialize work products
  time: 0.202; rss: 86MB	running linker
time: 0.204; rss: 86MB	linking
done
