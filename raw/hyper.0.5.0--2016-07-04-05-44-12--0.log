commit d508de6cf7c7bb9b5057ee63432dbbc899209101
Merge: d98da85 d37edef
Author: bors <bors@rust-lang.org>
Date:   Mon Jul 4 02:18:46 2016 -0700

    Auto merge of #34638 - zackmdavis:if_let_over_none_empty_block_arm, r=jseyfried
    
    prefer `if let` to match with `None => {}` arm in some places
    
    This is a spiritual succesor to #34268 / 8531d581, in which we replaced a
    number of matches of None to the unit value with `if let` conditionals
    where it was judged that this made for clearer/simpler code (as would be
    recommended by Manishearth/rust-clippy's `single_match` lint). The same
    rationale applies to matches of None to the empty block.
    
    ----
    
    r? @jseyfried
rustc: ./hyper.0.5.0
cargo rustc -- -Ztime-passes -Zinput-stats
    Updating registry `https://github.com/rust-lang/crates.io-index`
   Compiling traitobject v0.0.1
   Compiling libc v0.1.12
   Compiling bitflags v0.3.3
   Compiling libc v0.2.13
   Compiling rustc-serialize v0.3.19
   Compiling gcc v0.3.28
   Compiling pkg-config v0.3.8
   Compiling lazy_static v0.1.16
   Compiling unicase v0.1.0
   Compiling typeable v0.1.2
   Compiling log v0.3.6
   Compiling winapi-build v0.1.1
   Compiling httparse v0.1.6
   Compiling matches v0.1.2
   Compiling winapi v0.2.7
   Compiling kernel32-sys v0.2.2
   Compiling mime v0.0.11
   Compiling rand v0.3.14
   Compiling time v0.1.35
   Compiling num_cpus v0.2.13
   Compiling openssl-sys v0.6.7
   Compiling openssl v0.6.7
   Compiling uuid v0.1.18
   Compiling url v0.2.38
   Compiling cookie v0.1.21
   Compiling hyper v0.5.0 (file:///root/benchmarks/hyper.0.5.0)
time: 0.040; rss: 88MB	parsing
Lines of code:             9154
Pre-expansion node count:  44838
time: 0.006; rss: 88MB	configuration
time: 0.000; rss: 88MB	recursion limit
time: 0.000; rss: 88MB	crate injection
time: 0.000; rss: 91MB	plugin loading
time: 0.000; rss: 91MB	plugin registration
time: 0.178; rss: 127MB	expansion
time: 0.000; rss: 127MB	maybe building test harness
time: 0.000; rss: 127MB	checking for inline asm in case the target doesn't support it
time: 0.002; rss: 127MB	complete gated feature checking
Post-expansion node count: 101579
time: 0.007; rss: 127MB	assigning node ids
time: 0.003; rss: 129MB	collecting defs
time: 0.010; rss: 139MB	external crate/lib resolution
time: 0.006; rss: 139MB	early lint checks
time: 0.001; rss: 139MB	AST validation
time: 0.017; rss: 144MB	name resolution
time: 0.009; rss: 152MB	lowering ast -> hir
time: 0.001; rss: 154MB	indexing hir
time: 0.001; rss: 154MB	attribute checking
time: 0.001; rss: 148MB	language item collection
time: 0.002; rss: 148MB	lifetime resolution
time: 0.000; rss: 148MB	looking for entry point
time: 0.000; rss: 148MB	looking for plugin registrar
time: 0.005; rss: 152MB	region resolution
time: 0.001; rss: 152MB	loop checking
time: 0.001; rss: 152MB	static item recursion checking
time: 0.000; rss: 152MB	load_dep_graph
time: 0.031; rss: 154MB	type collecting
time: 0.000; rss: 154MB	variance inference
time: 0.044; rss: 162MB	coherence checking
time: 0.097; rss: 163MB	wf checking
time: 0.035; rss: 163MB	item-types checking
time: 0.518; rss: 175MB	item-bodies checking
time: 0.000; rss: 175MB	drop-impl checking
time: 0.044; rss: 177MB	const checking
time: 0.007; rss: 177MB	privacy checking
time: 0.001; rss: 177MB	stability index
time: 0.006; rss: 177MB	intrinsic checking
time: 0.002; rss: 177MB	effect checking
time: 0.015; rss: 177MB	match checking
time: 0.005; rss: 177MB	liveness checking
time: 0.031; rss: 177MB	rvalue checking
time: 0.060; rss: 188MB	MIR dump
time: 0.043; rss: 188MB	MIR passes
time: 0.071; rss: 188MB	borrow checking
time: 0.003; rss: 188MB	reachability checking
time: 0.005; rss: 188MB	death checking
time: 0.005; rss: 188MB	stability checking
time: 0.000; rss: 188MB	unused lib feature checking
time: 0.048; rss: 188MB	lint checking
time: 0.000; rss: 188MB	resolving dependency formats
time: 0.091; rss: 191MB	Prepare MIR codegen passes
  time: 0.129; rss: 195MB	write metadata
  time: 0.184; rss: 200MB	translation item collection
  time: 0.007; rss: 202MB	codegen unit partitioning
time: 3.698; rss: 322MB	translation
time: 0.001; rss: 322MB	assert dep graph
time: 0.000; rss: 322MB	serialize dep graph
  time: 1.127; rss: 212MB	llvm function passes [0]
  time: 0.431; rss: 213MB	llvm module passes [0]
  time: 16.023; rss: 214MB	codegen passes [0]
  time: 0.002; rss: 166MB	codegen passes [0]
time: 18.968; rss: 166MB	LLVM passes
time: 0.178; rss: 164MB	linking
done
