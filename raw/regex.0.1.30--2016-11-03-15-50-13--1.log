commit ac919fcd9d4a958baf99b2f2ed5c3d38a2ebf9d0
Merge: f9f45c6 b4f910d
Author: bors <bors@rust-lang.org>
Date:   Wed Nov 2 22:58:01 2016 -0700

    Auto merge of #37541 - nikomatsakis:issue-37291, r=brson
    
    Use impl obligations as initial environment for specialization
    
    This corrects a small regression in specialization that crept in, I think as part of the refactoring to introduce arenas. I also made an experiment (in the last commit) to cleanup the code to be more aggressive about normalization. As the commit log notes, I am not 100% sure that this is correct, but it feels safer, and I think that at worst it yields *more* ICEs (as opposed to admitting faulty code). I'll schedule a crater run to check beyond the testbase.
    
    Fixes #37291.
    
    r? @aturon
rustc: ./regex.0.1.30
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling regex v0.1.30 (file:///root/benchmarks/regex.0.1.30)
time: 0.051; rss: 57MB	parsing
Lines of code:             8558
Pre-expansion node count:  58080
time: 0.000; rss: 57MB	recursion limit
time: 0.000; rss: 57MB	crate injection
time: 0.000; rss: 57MB	plugin loading
time: 0.000; rss: 57MB	plugin registration
time: 0.031; rss: 80MB	expansion
time: 0.000; rss: 80MB	maybe building test harness
time: 0.001; rss: 80MB	maybe creating a macro crate
Post-expansion node count: 68134
time: 0.000; rss: 80MB	checking for inline asm in case the target doesn't support it
time: 0.001; rss: 80MB	complete gated feature checking
time: 0.004; rss: 80MB	early lint checks
time: 0.001; rss: 80MB	AST validation
time: 0.006; rss: 81MB	name resolution
time: 0.006; rss: 86MB	lowering ast -> hir
time: 0.001; rss: 86MB	indexing hir
time: 0.001; rss: 86MB	attribute checking
time: 0.001; rss: 78MB	language item collection
time: 0.001; rss: 78MB	lifetime resolution
time: 0.000; rss: 78MB	looking for entry point
time: 0.000; rss: 78MB	looking for plugin registrar
time: 0.006; rss: 82MB	region resolution
time: 0.000; rss: 82MB	loop checking
time: 0.001; rss: 82MB	static item recursion checking
time: 0.029; rss: 82MB	compute_incremental_hashes_map
time: 0.000; rss: 82MB	load_dep_graph
time: 0.006; rss: 83MB	type collecting
time: 0.000; rss: 83MB	variance inference
time: 0.016; rss: 86MB	coherence checking
time: 0.007; rss: 87MB	wf checking
time: 0.166; rss: 97MB	item-types checking
time: 0.125; rss: 103MB	item-bodies checking
time: 0.000; rss: 103MB	drop-impl checking
time: 0.024; rss: 105MB	const checking
time: 0.002; rss: 105MB	privacy checking
time: 0.000; rss: 105MB	stability index
time: 0.001; rss: 105MB	intrinsic checking
time: 0.001; rss: 105MB	effect checking
time: 0.002; rss: 105MB	match checking
time: 0.002; rss: 105MB	liveness checking
time: 0.007; rss: 105MB	rvalue checking
time: 0.041; rss: 119MB	MIR dump
  time: 0.003; rss: 119MB	SimplifyCfg
  time: 0.005; rss: 119MB	QualifyAndPromoteConstants
  time: 0.009; rss: 119MB	TypeckMir
  time: 0.000; rss: 119MB	SimplifyBranches
  time: 0.001; rss: 119MB	SimplifyCfg
time: 0.018; rss: 119MB	MIR passes
time: 0.020; rss: 119MB	borrow checking
time: 0.000; rss: 119MB	reachability checking
time: 0.002; rss: 119MB	death checking
time: 0.002; rss: 119MB	stability checking
time: 0.000; rss: 119MB	unused lib feature checking
time: 0.023; rss: 119MB	lint checking
time: 0.000; rss: 119MB	resolving dependency formats
  time: 0.000; rss: 119MB	NoLandingPads
  time: 0.001; rss: 119MB	SimplifyCfg
  time: 0.004; rss: 119MB	EraseRegions
  time: 0.000; rss: 119MB	AddCallGuards
  time: 0.007; rss: 121MB	ElaborateDrops
  time: 0.000; rss: 121MB	NoLandingPads
  time: 0.002; rss: 121MB	SimplifyCfg
  time: 0.002; rss: 121MB	InstCombine
  time: 0.000; rss: 121MB	Deaggregator
  time: 0.000; rss: 121MB	CopyPropagation
  time: 0.000; rss: 121MB	AddCallGuards
  time: 0.000; rss: 121MB	PreTrans
time: 0.018; rss: 121MB	Prepare MIR codegen passes
  time: 0.018; rss: 124MB	write metadata
  time: 0.045; rss: 129MB	translation item collection
  time: 0.006; rss: 129MB	codegen unit partitioning
  time: 0.006; rss: 156MB	internalize symbols
time: 0.421; rss: 156MB	translation
time: 0.000; rss: 156MB	assert dep graph
time: 0.000; rss: 156MB	serialize dep graph
  time: 0.037; rss: 108MB	llvm function passes [0]
  time: 0.018; rss: 109MB	llvm module passes [0]
  time: 0.671; rss: 111MB	codegen passes [0]
  time: 0.000; rss: 111MB	codegen passes [0]
time: 0.784; rss: 111MB	LLVM passes
time: 0.000; rss: 111MB	serialize work products
time: 0.034; rss: 83MB	linking
done
