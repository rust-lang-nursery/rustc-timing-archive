commit ddf011d7730594f4db36b01858b8c6733b07c084
Merge: 217f57c 75825fe
Author: bors <bors@rust-lang.org>
Date:   Thu Nov 24 08:26:36 2016 -0600

    Auto merge of #37770 - pnkfelix:print-type-sizes, r=arielb1
    
    Add debug flag `-Z print-type-sizes` for instrumention type/variant sizes
    
    Add debug flag `-Z print-type-sizes` for instrumention type/variant sizes
    
    This is meant to help with things like #36799 in a very local way; namely, once you have a hypothesis as to which types have a large population or are "too large", you can use `-Z print-type-sizes` to learn how large each type is, and how much each variant in an enum contributes to the size of that overall enum.
rustc: ./jld-day15-parser
cargo rustc  -- -Ztime-passes -Zinput-stats
   Compiling combine v1.3.0
   Compiling day15 v0.1.0 (file:///root/benchmarks/jld-day15-parser)
time: 0.000; rss: 41MB	parsing
Lines of code:             72
Pre-expansion node count:  648
time: 0.000; rss: 41MB	recursion limit
time: 0.000; rss: 41MB	crate injection
time: 0.000; rss: 41MB	plugin loading
time: 0.000; rss: 41MB	plugin registration
time: 0.015; rss: 69MB	expansion
time: 0.000; rss: 69MB	maybe building test harness
time: 0.000; rss: 69MB	maybe creating a macro crate
Post-expansion node count: 1149
time: 0.000; rss: 69MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 69MB	complete gated feature checking
time: 0.000; rss: 69MB	early lint checks
time: 0.000; rss: 69MB	AST validation
time: 0.002; rss: 69MB	name resolution
time: 0.000; rss: 69MB	lowering ast -> hir
time: 0.000; rss: 69MB	indexing hir
time: 0.000; rss: 69MB	attribute checking
time: 0.000; rss: 69MB	language item collection
time: 0.000; rss: 69MB	lifetime resolution
time: 0.000; rss: 69MB	looking for entry point
time: 0.000; rss: 69MB	looking for plugin registrar
time: 0.000; rss: 69MB	region resolution
time: 0.000; rss: 69MB	loop checking
time: 0.000; rss: 69MB	static item recursion checking
time: 0.000; rss: 69MB	compute_incremental_hashes_map
time: 0.000; rss: 69MB	load_dep_graph
time: 0.001; rss: 69MB	type collecting
time: 0.000; rss: 69MB	variance inference
time: 0.000; rss: 69MB	impl wf inference
time: 0.004; rss: 72MB	coherence checking
time: 0.002; rss: 72MB	wf checking
time: 0.000; rss: 72MB	item-types checking
time: 0.017; rss: 74MB	item-bodies checking
time: 0.000; rss: 74MB	drop-impl checking
time: 0.000; rss: 74MB	const checking
time: 0.000; rss: 74MB	privacy checking
time: 0.000; rss: 74MB	stability index
time: 0.000; rss: 74MB	intrinsic checking
time: 0.000; rss: 74MB	effect checking
time: 0.000; rss: 74MB	match checking
time: 0.000; rss: 74MB	liveness checking
time: 0.000; rss: 74MB	rvalue checking
time: 0.001; rss: 74MB	MIR dump
  time: 0.000; rss: 74MB	SimplifyCfg
  time: 0.000; rss: 74MB	QualifyAndPromoteConstants
  time: 0.000; rss: 74MB	TypeckMir
  time: 0.000; rss: 74MB	SimplifyBranches
  time: 0.000; rss: 74MB	SimplifyCfg
time: 0.001; rss: 74MB	MIR cleanup and validation
time: 0.001; rss: 74MB	borrow checking
time: 0.000; rss: 74MB	reachability checking
time: 0.000; rss: 74MB	death checking
time: 0.000; rss: 74MB	stability checking
time: 0.000; rss: 74MB	unused lib feature checking
time: 0.001; rss: 74MB	lint checking
time: 0.001; rss: 74MB	resolving dependency formats
  time: 0.000; rss: 74MB	NoLandingPads
  time: 0.000; rss: 74MB	SimplifyCfg
  time: 0.000; rss: 74MB	EraseRegions
  time: 0.000; rss: 74MB	AddCallGuards
  time: 0.001; rss: 74MB	ElaborateDrops
  time: 0.000; rss: 74MB	NoLandingPads
  time: 0.000; rss: 74MB	SimplifyCfg
  time: 0.000; rss: 74MB	InstCombine
  time: 0.002; rss: 74MB	Deaggregator
  time: 0.000; rss: 74MB	CopyPropagation
  time: 0.000; rss: 74MB	SimplifyLocals
  time: 0.000; rss: 74MB	AddCallGuards
  time: 0.000; rss: 74MB	PreTrans
time: 0.003; rss: 74MB	MIR optimisations
  time: 0.000; rss: 74MB	write metadata
  time: 0.106; rss: 78MB	translation item collection
  time: 0.002; rss: 80MB	codegen unit partitioning
  time: 0.002; rss: 94MB	internalize symbols
time: 0.506; rss: 94MB	translation
time: 0.000; rss: 94MB	assert dep graph
time: 0.000; rss: 94MB	serialize dep graph
  time: 0.017; rss: 89MB	llvm function passes [0]
  time: 0.001; rss: 89MB	llvm module passes [0]
  time: 0.355; rss: 96MB	codegen passes [0]
  time: 0.000; rss: 95MB	codegen passes [0]
time: 0.375; rss: 95MB	LLVM passes
time: 0.000; rss: 95MB	serialize work products
  time: 0.081; rss: 84MB	running linker
time: 0.082; rss: 84MB	linking
done
