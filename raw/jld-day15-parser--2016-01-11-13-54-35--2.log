commit 1586005a1d15e7d26b6c46a33e7a9643de9a77ac
Merge: 0672ed4 52883ab
Author: bors <bors@rust-lang.org>
Date:   Mon Jan 11 19:03:18 2016 +0000

    Auto merge of #30534 - bluss:binary-heap-fast-pop, r=Gankro
    
    BinaryHeap: Use full sift down in .pop()
    
    .sift_down can either choose to compare the element on the way down (and
    place it during descent), or to sift down an element fully, then sift
    back up to place it.
    
    A previous PR changed .sift_down() to the former behavior, which is much
    faster for relatively small heaps and for elements that are cheap to
    compare.
    
    A benchmarking run suggested that BinaryHeap::pop() suffers
    improportionally from this, and that it should use the second strategy
    instead. It's logical since .pop() brings last element from the
    heapified vector into index 0, it's very likely that this element will
    end up at the bottom again.
    
    Closes #29969
    Previous PR #29811
rustc: ./jld-day15-parser
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling day15 v0.1.0 (file:///root/benchmarks/jld-day15-parser)
time: 0.001; rss: 26MB	parsing
Lines of code:             72
Pre-expansion node count:  673
time: 0.000; rss: 30MB	configuration 1
time: 0.000; rss: 30MB	recursion limit
time: 0.000; rss: 30MB	gated macro checking
time: 0.000; rss: 30MB	crate injection
time: 0.003; rss: 33MB	macro loading
time: 0.000; rss: 33MB	plugin loading
time: 0.000; rss: 33MB	plugin registration
time: 0.002; rss: 33MB	expansion
time: 0.000; rss: 33MB	complete gated feature checking 1
time: 0.000; rss: 33MB	configuration 2
time: 0.000; rss: 33MB	gated configuration checking
time: 0.000; rss: 33MB	maybe building test harness
time: 0.000; rss: 33MB	prelude injection
time: 0.000; rss: 33MB	checking that all macro invocations are gone
time: 0.000; rss: 33MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 33MB	complete gated feature checking 2
Post-expansion node count: 1176
time: 0.000; rss: 33MB	assigning node ids
time: 0.000; rss: 33MB	lowering ast -> hir
time: 0.000; rss: 33MB	indexing hir
time: 0.000; rss: 33MB	attribute checking
time: 0.000; rss: 33MB	early lint checks
time: 0.001; rss: 33MB	external crate/lib resolution
time: 0.000; rss: 37MB	language item collection
time: 0.001; rss: 41MB	resolution
time: 0.000; rss: 41MB	lifetime resolution
time: 0.000; rss: 41MB	looking for entry point
time: 0.000; rss: 41MB	looking for plugin registrar
time: 0.000; rss: 41MB	region resolution
time: 0.000; rss: 41MB	loop checking
time: 0.000; rss: 41MB	static item recursion checking
time: 0.001; rss: 45MB	type collecting
time: 0.000; rss: 45MB	variance inference
time: 0.005; rss: 50MB	coherence checking
time: 0.006; rss: 55MB	wf checking
time: 0.000; rss: 55MB	item-types checking
time: 1.165; rss: 96MB	item-bodies checking
time: 0.000; rss: 96MB	drop-impl checking
time: 0.001; rss: 96MB	const checking
time: 0.000; rss: 96MB	privacy checking
time: 0.000; rss: 96MB	stability index
time: 0.000; rss: 96MB	intrinsic checking
time: 0.000; rss: 96MB	effect checking
time: 0.000; rss: 96MB	match checking
time: 0.001; rss: 96MB	MIR dump
time: 0.000; rss: 96MB	liveness checking
time: 0.001; rss: 97MB	borrow checking
time: 0.002; rss: 97MB	rvalue checking
time: 0.000; rss: 97MB	reachability checking
time: 0.000; rss: 97MB	death checking
time: 0.000; rss: 97MB	stability checking
time: 0.000; rss: 97MB	unused lib feature checking
time: 0.003; rss: 97MB	lint checking
time: 0.001; rss: 98MB	resolving dependency formats
time: 0.000; rss: 98MB	erasing regions from MIR
  time: 0.000; rss: 153MB	write metadata
time: 16.759; rss: 153MB	translation
  time: 0.014; rss: 89MB	llvm function passes [0]
  time: 0.002; rss: 89MB	llvm module passes [0]
  time: 0.265; rss: 99MB	codegen passes [0]
  time: 0.000; rss: 97MB	codegen passes [0]
time: 0.290; rss: 97MB	LLVM passes
  time: 0.036; rss: 101MB	running linker
time: 0.036; rss: 101MB	linking
done
