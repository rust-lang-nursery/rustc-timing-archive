commit a70a60a02bca4c1fb75a0eb0ecf80acb73972f66
Merge: d8869d3 acc9428
Author: bors <bors@rust-lang.org>
Date:   Fri Jan 15 06:38:26 2016 +0000

    Auto merge of #30763 - gchp:issue/30033, r=nagisa
    
    This is achieved by adding the scan_back method. This method looks back
    through the source_text of the StringReader until it finds the target
    char, returning it's offset in the source. We use this method to find
    the offset of the opening single quote, and use that offset as the start
    of the error.
    
    Given this code:
    
    ```rust
    fn main() {
        let _ = 'abcd';
    }
    ```
    
    The compiler would give a message like:
    
    ```
    error: character literal may only contain one codepoint: ';
    let _ = 'abcd';
                 ^~
    ```
    With this change, the message now displays:
    
    ```
    error: character literal may only contain one codepoint: 'abcd';
    let _ = 'abcd';
            ^~~~~~~
    ```
    
    Fixes #30033
rustc: ./piston-image-0.3.11
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling image v0.3.11 (file:///root/benchmarks/piston-image-0.3.11)
time: 0.044; rss: 47MB	parsing
Lines of code:             10676
Pre-expansion node count:  84646
time: 0.016; rss: 47MB	configuration 1
time: 0.000; rss: 47MB	recursion limit
time: 0.001; rss: 47MB	gated macro checking
time: 0.000; rss: 47MB	crate injection
time: 0.005; rss: 53MB	macro loading
time: 0.000; rss: 53MB	plugin loading
time: 0.000; rss: 53MB	plugin registration
time: 0.122; rss: 57MB	expansion
time: 0.004; rss: 57MB	complete gated feature checking 1
time: 0.027; rss: 57MB	configuration 2
time: 0.000; rss: 57MB	gated configuration checking
time: 0.013; rss: 57MB	maybe building test harness
time: 0.012; rss: 57MB	prelude injection
time: 0.001; rss: 57MB	checking that all macro invocations are gone
time: 0.000; rss: 57MB	checking for inline asm in case the target doesn't support it
time: 0.003; rss: 57MB	complete gated feature checking 2
Post-expansion node count: 144338
time: 0.012; rss: 57MB	assigning node ids
time: 0.020; rss: 70MB	lowering ast -> hir
time: 0.006; rss: 71MB	indexing hir
time: 0.000; rss: 71MB	attribute checking
time: 0.007; rss: 71MB	early lint checks
time: 0.003; rss: 62MB	external crate/lib resolution
time: 0.001; rss: 62MB	language item collection
time: 0.029; rss: 80MB	resolution
time: 0.003; rss: 80MB	lifetime resolution
time: 0.000; rss: 80MB	looking for entry point
time: 0.000; rss: 80MB	looking for plugin registrar
time: 0.011; rss: 88MB	region resolution
time: 0.001; rss: 88MB	loop checking
time: 0.001; rss: 88MB	static item recursion checking
time: 0.011; rss: 91MB	type collecting
time: 0.000; rss: 91MB	variance inference
time: 0.031; rss: 108MB	coherence checking
time: 0.141; rss: 112MB	wf checking
time: 0.050; rss: 114MB	item-types checking
time: 1.652; rss: 148MB	item-bodies checking
time: 0.000; rss: 148MB	drop-impl checking
time: 0.074; rss: 148MB	const checking
time: 0.012; rss: 148MB	privacy checking
time: 0.001; rss: 148MB	stability index
time: 0.011; rss: 148MB	intrinsic checking
time: 0.003; rss: 148MB	effect checking
time: 0.025; rss: 148MB	match checking
time: 0.094; rss: 155MB	MIR dump
time: 0.011; rss: 157MB	liveness checking
time: 0.156; rss: 157MB	borrow checking
time: 0.079; rss: 157MB	rvalue checking
time: 0.003; rss: 157MB	reachability checking
time: 0.009; rss: 157MB	death checking
time: 0.011; rss: 157MB	stability checking
time: 0.000; rss: 157MB	unused lib feature checking
time: 0.086; rss: 157MB	lint checking
time: 0.000; rss: 157MB	resolving dependency formats
time: 0.008; rss: 157MB	erasing regions from MIR
  time: 0.213; rss: 281MB	write metadata
time: 2.841; rss: 276MB	translation
  time: 0.101; rss: 165MB	llvm function passes [0]
  time: 0.044; rss: 166MB	llvm module passes [0]
  time: 1.749; rss: 217MB	codegen passes [0]
  time: 0.001; rss: 184MB	codegen passes [0]
time: 2.101; rss: 184MB	LLVM passes
time: 0.150; rss: 182MB	linking
done
