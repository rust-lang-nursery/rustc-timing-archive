commit 3029e0918de00162932132a7972e566f3a3372f5
Merge: 07a1803 b3572ae
Author: bors <bors@rust-lang.org>
Date:   Sat Mar 5 20:11:37 2016 +0000

    Auto merge of #31726 - jseyfried:improve_import_resolution, r=nikomatsakis
    
    This PR improves the import resolution algorithm.
    
    First, it records that an import succeeded or failed for one namespace (by calling `decrement_outstanding_references_for` and `try_define_child` if successful) even if it is still indeterminate in the other namespace, fixing #31444.
    
    Second, it starts importing bindings from globs as soon as the glob path is determined.
    It maintains links from imported modules to their importers so that when a resolution becomes successful in an imported module, a corresponding binding will be added to the importer module.
    It also maintains links from importer modules to imported modules so that we can determine if an undefined name is indeterminate or failing by recursively checking this in the imported modules.
    This allows, for example:
    ```rust
    mod foo {
        pub mod baz {}
        pub use bar::baz::*;
    }
    
    mod bar {
        pub use foo::*;
    }
    ```
    It also allows cycles of pub glob imports, although by to the current shadowing rules, the only way for such a cycle to compile is if each participating module defines no names. Incidentally, this PR lays the groundwork for more permissive feature-gated shadowing rules.
    
    Finally, this PR encapsulates almost all implementation details of import resolution in `resolve_imports` (some of which used to be in `lib.rs`) and refactors reexport recording, shadowed trait collecting, some duplicate checking, and the `private_in_public` lint out of the core import resolution algorithm and into a post-processing pass in `resolve_imports`.
    
    r? @nrc
rustc: ./helloworld
/root/rust/x86_64-unknown-linux-gnu/stage2/bin/rustc hello.rs -Ztime-passes -Zinput-stats
time: 0.000; rss: 32MB	parsing
Lines of code:             3
Pre-expansion node count:  8
time: 0.000; rss: 36MB	configuration 1
time: 0.000; rss: 36MB	recursion limit
time: 0.000; rss: 36MB	gated macro checking
time: 0.000; rss: 36MB	crate injection
time: 0.003; rss: 39MB	macro loading
time: 0.000; rss: 39MB	plugin loading
time: 0.000; rss: 39MB	plugin registration
time: 0.001; rss: 39MB	expansion
time: 0.000; rss: 39MB	complete gated feature checking 1
time: 0.000; rss: 39MB	configuration 2
time: 0.000; rss: 39MB	gated configuration checking
time: 0.000; rss: 39MB	maybe building test harness
time: 0.000; rss: 39MB	prelude injection
time: 0.000; rss: 39MB	checking that all macro invocations are gone
time: 0.000; rss: 39MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 39MB	complete gated feature checking 2
time: 0.000; rss: 39MB	const fn bodies and arguments
Post-expansion node count: 68
time: 0.000; rss: 39MB	assigning node ids
time: 0.000; rss: 39MB	lowering ast -> hir
time: 0.000; rss: 39MB	indexing hir
time: 0.000; rss: 39MB	attribute checking
time: 0.000; rss: 39MB	early lint checks
time: 0.001; rss: 39MB	external crate/lib resolution
time: 0.000; rss: 39MB	language item collection
time: 0.001; rss: 48MB	resolution
time: 0.000; rss: 48MB	lifetime resolution
time: 0.000; rss: 48MB	looking for entry point
time: 0.000; rss: 48MB	looking for plugin registrar
time: 0.000; rss: 48MB	region resolution
time: 0.000; rss: 48MB	loop checking
time: 0.000; rss: 48MB	static item recursion checking
time: 0.000; rss: 48MB	type collecting
time: 0.000; rss: 48MB	variance inference
time: 0.005; rss: 52MB	coherence checking
time: 0.000; rss: 52MB	wf checking
time: 0.000; rss: 52MB	item-types checking
time: 0.000; rss: 52MB	item-bodies checking
time: 0.000; rss: 52MB	drop-impl checking
time: 0.000; rss: 56MB	const checking
time: 0.000; rss: 56MB	privacy checking
time: 0.000; rss: 56MB	stability index
time: 0.000; rss: 56MB	intrinsic checking
time: 0.000; rss: 56MB	effect checking
time: 0.000; rss: 56MB	match checking
time: 0.000; rss: 56MB	liveness checking
time: 0.000; rss: 56MB	rvalue checking
time: 0.000; rss: 56MB	MIR dump
time: 0.000; rss: 56MB	MIR passes
time: 0.000; rss: 56MB	borrow checking
time: 0.000; rss: 56MB	reachability checking
time: 0.000; rss: 56MB	death checking
time: 0.000; rss: 56MB	stability checking
time: 0.000; rss: 56MB	unused lib feature checking
time: 0.000; rss: 56MB	lint checking
time: 0.001; rss: 56MB	resolving dependency formats
time: 0.000; rss: 56MB	erasing regions from MIR
  time: 0.000; rss: 65MB	translation item collection
  time: 0.000; rss: 65MB	write metadata
time: 0.003; rss: 65MB	translation
  time: 0.000; rss: 67MB	llvm function passes [0]
  time: 0.000; rss: 67MB	llvm module passes [0]
  time: 0.001; rss: 71MB	codegen passes [0]
  time: 0.000; rss: 73MB	codegen passes [0]
time: 0.003; rss: 72MB	LLVM passes
  time: 0.094; rss: 76MB	running linker
time: 0.094; rss: 76MB	linking
done
