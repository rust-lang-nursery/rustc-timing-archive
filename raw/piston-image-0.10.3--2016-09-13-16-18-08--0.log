commit 2fd060815f9e9c4ae787cb1cd44df51aeb91fe6e
Merge: c87ba3f b778f7fa
Author: bors <bors@rust-lang.org>
Date:   Tue Sep 13 10:54:55 2016 -0700

    Auto merge of #36181 - seanmonstar:likely, r=nikomatsakis
    
    core: add likely and unlikely intrinsics
    
    I'm no good at reading assembly, but I have tried a stage1 compiler with this patch, and it does cause different asm output. Additionally, testing this compiler on my httparse crate with some `likely` usage added in to the branches does affect benchmarks. However, I'm sure a codegen test should be included, if anyone knows what it should look like.
    
    There isn't an entry in `librustc_trans/context.rs` in this diff, because it already exists (`llvm.expect.i1` is used for array indices).
    
    ----
    
    Even though this does affect httparse benchmarks, it doesn't seem to affect it the same way GCC's `__builtin_expect` affects picohttpparser. I was confused that the deviation on the benchmarks grew hugely when testing this, especially since I'm absolutely certain that the branchs where I added `likely` were always `true`. I chalk that up to GCC and LLVM handle branch prediction differently.
    
    cc #26179
rustc: ./piston-image-0.10.3
cargo rustc -- -Ztime-passes -Zinput-stats
    Updating registry `https://github.com/rust-lang/crates.io-index`
   Compiling byteorder v0.5.3
   Compiling lzw v0.10.0
   Compiling gcc v0.3.35
   Compiling scoped_threadpool v0.1.7
   Compiling libc v0.2.16
   Compiling glob v0.2.11
   Compiling inflate v0.1.1
   Compiling num-traits v0.1.35
   Compiling rustc-serialize v0.3.19
   Compiling color_quant v1.0.0
   Compiling num_cpus v0.2.13
   Compiling bitflags v0.7.0
   Compiling rand v0.3.14
   Compiling miniz-sys v0.1.7
   Compiling gif v0.9.0
   Compiling num-integer v0.1.32
   Compiling num-iter v0.1.32
   Compiling flate2 v0.2.14
   Compiling num v0.1.35
   Compiling enum_primitive v0.1.0
   Compiling deque v0.3.1
   Compiling rayon v0.4.0
   Compiling png v0.5.2
   Compiling jpeg-decoder v0.1.6
   Compiling num-bigint v0.1.35
   Compiling num-rational v0.1.35
   Compiling image v0.10.3 (file:///root/benchmarks/piston-image-0.10.3)
time: 0.046; rss: 58MB	parsing
Lines of code:             12000
Pre-expansion node count:  90272
time: 0.000; rss: 58MB	recursion limit
time: 0.000; rss: 58MB	crate injection
time: 0.000; rss: 58MB	plugin loading
time: 0.000; rss: 58MB	plugin registration
time: 0.067; rss: 88MB	expansion
time: 0.000; rss: 88MB	maybe building test harness
time: 0.002; rss: 88MB	maybe creating a macro crate
time: 0.007; rss: 88MB	assigning node ids
Post-expansion node count: 149551
time: 0.000; rss: 88MB	checking for inline asm in case the target doesn't support it
time: 0.003; rss: 88MB	complete gated feature checking
time: 0.004; rss: 88MB	collecting defs
time: 0.011; rss: 92MB	external crate/lib resolution
time: 0.006; rss: 92MB	early lint checks
time: 0.002; rss: 92MB	AST validation
time: 0.022; rss: 101MB	name resolution
time: 0.014; rss: 111MB	lowering ast -> hir
time: 0.003; rss: 115MB	indexing hir
time: 0.002; rss: 115MB	attribute checking
time: 0.002; rss: 105MB	language item collection
time: 0.003; rss: 105MB	lifetime resolution
time: 0.000; rss: 105MB	looking for entry point
time: 0.000; rss: 105MB	looking for plugin registrar
time: 0.011; rss: 111MB	region resolution
time: 0.002; rss: 111MB	loop checking
time: 0.001; rss: 111MB	static item recursion checking
time: 0.058; rss: 111MB	compute_incremental_hashes_map
time: 0.000; rss: 111MB	load_dep_graph
time: 0.024; rss: 113MB	type collecting
time: 0.000; rss: 113MB	variance inference
time: 0.031; rss: 116MB	coherence checking
time: 0.099; rss: 117MB	wf checking
time: 0.221; rss: 125MB	item-types checking
time: 0.943; rss: 137MB	item-bodies checking
time: 0.000; rss: 137MB	drop-impl checking
time: 0.072; rss: 137MB	const checking
time: 0.011; rss: 137MB	privacy checking
time: 0.001; rss: 137MB	stability index
time: 0.010; rss: 137MB	intrinsic checking
time: 0.003; rss: 137MB	effect checking
time: 0.025; rss: 137MB	match checking
time: 0.011; rss: 138MB	liveness checking
time: 0.067; rss: 138MB	rvalue checking
time: 0.113; rss: 182MB	MIR dump
  time: 0.012; rss: 182MB	SimplifyCfg
  time: 0.025; rss: 182MB	QualifyAndPromoteConstants
  time: 0.028; rss: 182MB	TypeckMir
  time: 0.001; rss: 182MB	SimplifyBranches
  time: 0.007; rss: 182MB	SimplifyCfg
time: 0.073; rss: 182MB	MIR passes
time: 0.143; rss: 183MB	borrow checking
time: 0.004; rss: 183MB	reachability checking
time: 0.008; rss: 183MB	death checking
time: 0.010; rss: 183MB	stability checking
time: 0.000; rss: 183MB	unused lib feature checking
time: 0.074; rss: 183MB	lint checking
time: 0.000; rss: 183MB	resolving dependency formats
  time: 0.001; rss: 183MB	NoLandingPads
  time: 0.005; rss: 183MB	SimplifyCfg
  time: 0.012; rss: 185MB	EraseRegions
  time: 0.002; rss: 185MB	AddCallGuards
  time: 0.134; rss: 189MB	ElaborateDrops
  time: 0.001; rss: 189MB	NoLandingPads
  time: 0.009; rss: 189MB	SimplifyCfg
  time: 0.002; rss: 189MB	Deaggregator
  time: 0.001; rss: 189MB	AddCallGuards
  time: 0.000; rss: 189MB	PreTrans
time: 0.167; rss: 189MB	Prepare MIR codegen passes
  time: 0.081; rss: 191MB	write metadata
  time: 0.535; rss: 201MB	translation item collection
  time: 0.030; rss: 205MB	codegen unit partitioning
  time: 0.052; rss: 328MB	internalize symbols
time: 3.519; rss: 301MB	translation
time: 0.000; rss: 301MB	assert dep graph
time: 0.000; rss: 301MB	serialize dep graph
  time: 0.202; rss: 223MB	llvm function passes [0]
  time: 0.086; rss: 228MB	llvm module passes [0]
  time: 4.015; rss: 233MB	codegen passes [0]
  time: 0.001; rss: 233MB	codegen passes [0]
time: 4.606; rss: 233MB	LLVM passes
time: 0.000; rss: 233MB	serialize work products
time: 0.274; rss: 105MB	linking
done
