commit 9376da6f77e8b7ed204ee704b29e96213b69d0f1
Merge: 1bf5fa3 dc22186
Author: bors <bors@rust-lang.org>
Date:   Tue Aug 16 19:44:10 2016 -0700

    Auto merge of #35559 - frewsxcv:slice-iter-as-ref, r=alexcrichton
    
    Implement `AsRef<[T]>` for `std::slice::Iter`.
    
    `AsRef` is designed for conversions that are "cheap" (as per
    the API docs). It is the case that retrieving the underlying
    data of `std::slice::Iter` is cheap. In my opinion, there's no
    ambiguity about what slice data will be returned, otherwise,
    I would be more cautious about implementing `AsRef`.
rustc: ./inflate-0.1.0
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling inflate v0.1.0 (file:///root/benchmarks/inflate-0.1.0)
time: 0.004; rss: 44MB	parsing
Lines of code:             956
Pre-expansion node count:  4740
time: 0.001; rss: 44MB	configuration
time: 0.000; rss: 44MB	recursion limit
time: 0.000; rss: 44MB	crate injection
time: 0.000; rss: 44MB	plugin loading
time: 0.000; rss: 44MB	plugin registration
time: 0.074; rss: 86MB	expansion
time: 0.000; rss: 86MB	maybe building test harness
time: 0.003; rss: 86MB	assigning node ids
Post-expansion node count: 55770
time: 0.000; rss: 86MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 86MB	complete gated feature checking
time: 0.005; rss: 86MB	collecting defs
time: 0.001; rss: 86MB	external crate/lib resolution
time: 0.002; rss: 86MB	early lint checks
time: 0.000; rss: 86MB	AST validation
time: 0.010; rss: 88MB	name resolution
time: 0.006; rss: 92MB	lowering ast -> hir
time: 0.001; rss: 94MB	indexing hir
time: 0.001; rss: 94MB	attribute checking
time: 0.001; rss: 92MB	language item collection
time: 0.001; rss: 92MB	lifetime resolution
time: 0.000; rss: 92MB	looking for entry point
time: 0.000; rss: 92MB	looking for plugin registrar
time: 0.004; rss: 92MB	region resolution
time: 0.000; rss: 92MB	loop checking
time: 0.000; rss: 92MB	static item recursion checking
time: 0.000; rss: 92MB	load_dep_graph
time: 0.001; rss: 92MB	type collecting
time: 0.000; rss: 92MB	variance inference
time: 0.010; rss: 95MB	coherence checking
time: 0.002; rss: 95MB	wf checking
time: 0.002; rss: 96MB	item-types checking
time: 2.701; rss: 114MB	item-bodies checking
time: 0.000; rss: 114MB	drop-impl checking
time: 0.016; rss: 113MB	const checking
time: 0.001; rss: 113MB	privacy checking
time: 0.000; rss: 113MB	stability index
time: 0.001; rss: 113MB	intrinsic checking
time: 0.001; rss: 113MB	effect checking
time: 0.004; rss: 113MB	match checking
time: 0.063; rss: 111MB	liveness checking
time: 0.012; rss: 111MB	rvalue checking
time: 0.036; rss: 132MB	MIR dump
time: 0.024; rss: 133MB	MIR passes
time: 0.231; rss: 130MB	borrow checking
time: 0.000; rss: 130MB	reachability checking
time: 0.003; rss: 130MB	death checking
time: 0.003; rss: 130MB	stability checking
time: 0.000; rss: 130MB	unused lib feature checking
time: 0.020; rss: 130MB	lint checking
time: 0.000; rss: 130MB	resolving dependency formats
time: 0.178; rss: 134MB	Prepare MIR codegen passes
  time: 0.003; rss: 135MB	write metadata
  time: 0.010; rss: 136MB	translation item collection
  time: 0.001; rss: 136MB	codegen unit partitioning
  time: 0.002; rss: 156MB	internalize symbols
time: 0.223; rss: 142MB	translation
time: 0.000; rss: 142MB	assert dep graph
time: 0.000; rss: 142MB	serialize dep graph
  time: 0.029; rss: 107MB	llvm function passes [0]
  time: 0.005; rss: 107MB	llvm module passes [0]
  time: 0.662; rss: 115MB	codegen passes [0]
  time: 0.001; rss: 115MB	codegen passes [0]
time: 0.732; rss: 115MB	LLVM passes
time: 0.000; rss: 115MB	serialize work products
time: 0.047; rss: 98MB	linking
done
