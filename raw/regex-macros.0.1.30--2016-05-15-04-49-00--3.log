commit 088d4178522d4e9464c6beac70b14724670ee735
Merge: dd0ef17 0eeb14e
Author: bors <bors@rust-lang.org>
Date:   Sat May 14 22:04:58 2016 -0700

    Auto merge of #33593 - dotdash:smart_derive, r=brson
    
    Improve derived implementations for enums with lots of fieldless variants
    
    A number of trait methods like PartialEq::eq or Hash::hash don't
    actually need a distinct arm for each variant, because the code within
    the arm only depends on the number and types of the fields in the
    variants. We can easily exploit this fact to create less and better
    code for enums with multiple variants that have no fields at all, the
    extreme case being C-like enums.
    
    For nickel.rs and its by now infamous 800 variant enum, this reduces
    optimized compile times by 25% and non-optimized compile times by 40%.
    Also peak memory usage is down by almost 40% (310MB down to 190MB).
    
    To be fair, most other crates don't benefit nearly as much, because
    they don't have as huge enums. The crates in the Rust distribution that
    I measured saw basically no change in compile times (I only tried
    optimized builds) and only 1-2% reduction in peak memory usage.
rustc: ./regex-macros.0.1.30
cd regex_macros && cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling regex_macros v0.1.17 (file:///root/benchmarks/regex-macros.0.1.30/regex_macros)
time: 0.002; rss: 46MB	parsing
Lines of code:             639
Pre-expansion node count:  2170
time: 0.001; rss: 46MB	configuration 1
time: 0.000; rss: 46MB	recursion limit
time: 0.000; rss: 46MB	crate injection
time: 0.003; rss: 52MB	macro loading
time: 0.000; rss: 52MB	plugin loading
time: 0.000; rss: 52MB	plugin registration
time: 0.032; rss: 59MB	expansion
time: 0.010; rss: 59MB	configuration 2
time: 0.000; rss: 59MB	gated configuration checking
time: 0.005; rss: 59MB	maybe building test harness
time: 0.005; rss: 59MB	prelude injection
time: 0.000; rss: 59MB	checking that all macro invocations are gone
time: 0.000; rss: 59MB	checking for inline asm in case the target doesn't support it
time: 0.001; rss: 59MB	complete gated feature checking
Post-expansion node count: 69741
time: 0.004; rss: 59MB	assigning node ids
time: 0.000; rss: 59MB	collecting defs
time: 0.081; rss: 96MB	external crate/lib resolution
time: 0.003; rss: 96MB	early lint checks
time: 0.011; rss: 117MB	name resolution
time: 0.005; rss: 123MB	lowering ast -> hir
time: 0.001; rss: 123MB	indexing hir
time: 0.000; rss: 123MB	attribute checking
time: 0.001; rss: 119MB	language item collection
time: 0.000; rss: 119MB	lifetime resolution
time: 0.000; rss: 119MB	looking for entry point
time: 0.000; rss: 119MB	looking for plugin registrar
time: 0.002; rss: 120MB	region resolution
time: 0.000; rss: 120MB	loop checking
time: 0.000; rss: 120MB	static item recursion checking
time: 0.000; rss: 120MB	load_dep_graph
time: 0.015; rss: 155MB	type collecting
time: 0.000; rss: 155MB	variance inference
time: 0.011; rss: 162MB	coherence checking
time: 0.007; rss: 163MB	wf checking
time: 0.001; rss: 163MB	item-types checking
time: 1.171; rss: 194MB	item-bodies checking
makefile:2: recipe for target 'all' failed
done
