commit cfc9b5185bbf5ab04a2736347bfa7fd9ab70c1e7
Merge: a41505f 8b0c292
Author: bors <bors@rust-lang.org>
Date:   Wed Oct 19 06:33:10 2016 -0700

    Auto merge of #37213 - jseyfried:refactor_crate_var, r=nrc
    
    macros: improve `$crate`
    
    This PR refactors the implementation of `$crate` so that
     - `$crate` is only allowed at the start of a path (like `super`),
     - we can make `$crate` work with inter-crate re-exports (groundwork for macro modularization), and
     - we can support importing macros from an extern crate that is not declared at the crate root (also groundwork for macro modularization).
    
    This is a [breaking-change]. For example, the following would break:
    ```rust
    fn foo() {}
    macro_rules! m { () => {
        $crate foo $crate () $crate $crate;
        //^ Today, `$crate` is allowed just about anywhere in unexported macros.
    } }
    fn main() {
        m!();
    }
    ```
    r? @nrc
rustc: ./piston-image-0.10.3
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling image v0.10.3 (file:///root/benchmarks/piston-image-0.10.3)
time: 0.045; rss: 57MB	parsing
Lines of code:             12000
Pre-expansion node count:  90272
time: 0.000; rss: 57MB	recursion limit
time: 0.000; rss: 57MB	crate injection
time: 0.000; rss: 57MB	plugin loading
time: 0.000; rss: 57MB	plugin registration
time: 0.076; rss: 95MB	expansion
time: 0.000; rss: 95MB	maybe building test harness
time: 0.001; rss: 95MB	maybe creating a macro crate
Post-expansion node count: 148999
time: 0.000; rss: 95MB	checking for inline asm in case the target doesn't support it
time: 0.002; rss: 95MB	complete gated feature checking
time: 0.005; rss: 95MB	early lint checks
time: 0.001; rss: 95MB	AST validation
time: 0.021; rss: 99MB	name resolution
time: 0.014; rss: 110MB	lowering ast -> hir
time: 0.003; rss: 114MB	indexing hir
time: 0.002; rss: 114MB	attribute checking
time: 0.002; rss: 103MB	language item collection
time: 0.003; rss: 103MB	lifetime resolution
time: 0.000; rss: 103MB	looking for entry point
time: 0.000; rss: 103MB	looking for plugin registrar
time: 0.011; rss: 109MB	region resolution
time: 0.002; rss: 109MB	loop checking
time: 0.001; rss: 109MB	static item recursion checking
time: 0.079; rss: 109MB	compute_incremental_hashes_map
time: 0.000; rss: 109MB	load_dep_graph
time: 0.016; rss: 111MB	type collecting
time: 0.000; rss: 111MB	variance inference
time: 0.027; rss: 114MB	coherence checking
time: 0.084; rss: 115MB	wf checking
time: 0.146; rss: 122MB	item-types checking
time: 0.842; rss: 136MB	item-bodies checking
time: 0.000; rss: 136MB	drop-impl checking
time: 0.055; rss: 134MB	const checking
time: 0.011; rss: 134MB	privacy checking
time: 0.001; rss: 134MB	stability index
time: 0.007; rss: 134MB	intrinsic checking
time: 0.003; rss: 134MB	effect checking
time: 0.016; rss: 134MB	match checking
time: 0.011; rss: 135MB	liveness checking
time: 0.045; rss: 135MB	rvalue checking
time: 0.097; rss: 180MB	MIR dump
  time: 0.011; rss: 180MB	SimplifyCfg
  time: 0.021; rss: 180MB	QualifyAndPromoteConstants
  time: 0.025; rss: 180MB	TypeckMir
  time: 0.001; rss: 180MB	SimplifyBranches
  time: 0.005; rss: 180MB	SimplifyCfg
time: 0.062; rss: 180MB	MIR passes
time: 0.117; rss: 180MB	borrow checking
time: 0.004; rss: 180MB	reachability checking
time: 0.009; rss: 180MB	death checking
time: 0.010; rss: 180MB	stability checking
time: 0.000; rss: 180MB	unused lib feature checking
time: 0.099; rss: 180MB	lint checking
time: 0.000; rss: 180MB	resolving dependency formats
  time: 0.001; rss: 180MB	NoLandingPads
  time: 0.005; rss: 180MB	SimplifyCfg
  time: 0.012; rss: 182MB	EraseRegions
  time: 0.002; rss: 182MB	AddCallGuards
  time: 0.044; rss: 184MB	ElaborateDrops
  time: 0.001; rss: 184MB	NoLandingPads
  time: 0.009; rss: 184MB	SimplifyCfg
  time: 0.006; rss: 184MB	InstCombine
  time: 0.002; rss: 184MB	Deaggregator
  time: 0.000; rss: 184MB	CopyPropagation
  time: 0.001; rss: 184MB	AddCallGuards
  time: 0.000; rss: 184MB	PreTrans
time: 0.083; rss: 184MB	Prepare MIR codegen passes
  time: 0.016; rss: 186MB	write metadata
  time: 0.403; rss: 200MB	translation item collection
  time: 0.026; rss: 202MB	codegen unit partitioning
  time: 0.021; rss: 323MB	internalize symbols
time: 2.594; rss: 296MB	translation
time: 0.000; rss: 296MB	assert dep graph
time: 0.000; rss: 296MB	serialize dep graph
  time: 0.206; rss: 221MB	llvm function passes [0]
  time: 0.080; rss: 226MB	llvm module passes [0]
  time: 4.088; rss: 226MB	codegen passes [0]
  time: 0.000; rss: 226MB	codegen passes [0]
time: 4.669; rss: 226MB	LLVM passes
time: 0.000; rss: 226MB	serialize work products
time: 0.256; rss: 99MB	linking
done
