commit be7196a793a185355efb7ec8801102ddec95483d
Merge: 37c6f28 8ddd86a
Author: bors <bors@rust-lang.org>
Date:   Tue Feb 23 05:17:08 2016 +0000

    Auto merge of #31814 - petevine:master, r=alexcrichton
    
    The `vfp2` option was a leftover from `armv6` compatibility features of the original armhf target.
    Gcc defaults to `vfp3`on `armv7` hard-float linux systems so we should make it the default for rustc too.
rustc: ./hyper.0.5.0
cargo rustc -- -Ztime-passes -Zinput-stats
    Updating registry `https://github.com/rust-lang/crates.io-index`
 Downloading regex-syntax v0.2.5
   Compiling gcc v0.3.24
   Compiling winapi-build v0.1.1
   Compiling typeable v0.1.2
   Compiling bitflags v0.3.3
   Compiling libc v0.1.12
   Compiling winapi v0.2.5
   Compiling lazy_static v0.1.15
   Compiling matches v0.1.2
   Compiling pkg-config v0.3.7
   Compiling httparse v0.1.6
   Compiling libc v0.2.7
   Compiling unicase v0.1.0
   Compiling traitobject v0.0.1
   Compiling kernel32-sys v0.2.1
   Compiling rustc-serialize v0.3.18
   Compiling time v0.1.34
   Compiling num_cpus v0.2.11
   Compiling log v0.3.5
   Compiling rand v0.3.14
   Compiling openssl-sys v0.6.7
   Compiling mime v0.0.11
   Compiling openssl v0.6.7
   Compiling uuid v0.1.18
   Compiling url v0.2.38
   Compiling cookie v0.1.21
   Compiling hyper v0.5.0 (file:///root/benchmarks/hyper.0.5.0)
time: 0.042; rss: 39MB	parsing
Lines of code:             9154
Pre-expansion node count:  45594
time: 0.010; rss: 40MB	configuration 1
time: 0.000; rss: 40MB	recursion limit
time: 0.000; rss: 40MB	gated macro checking
time: 0.000; rss: 40MB	crate injection
time: 0.005; rss: 45MB	macro loading
time: 0.000; rss: 45MB	plugin loading
time: 0.000; rss: 45MB	plugin registration
time: 0.199; rss: 55MB	expansion
time: 0.005; rss: 55MB	complete gated feature checking 1
time: 0.035; rss: 55MB	configuration 2
time: 0.000; rss: 55MB	gated configuration checking
time: 0.014; rss: 55MB	maybe building test harness
time: 0.011; rss: 55MB	prelude injection
time: 0.001; rss: 55MB	checking that all macro invocations are gone
time: 0.000; rss: 55MB	checking for inline asm in case the target doesn't support it
time: 0.002; rss: 55MB	complete gated feature checking 2
time: 0.001; rss: 55MB	const fn bodies and arguments
Post-expansion node count: 109258
time: 0.010; rss: 55MB	assigning node ids
time: 0.018; rss: 60MB	lowering ast -> hir
time: 0.007; rss: 62MB	indexing hir
time: 0.002; rss: 62MB	attribute checking
time: 0.007; rss: 62MB	early lint checks
time: 0.004; rss: 57MB	external crate/lib resolution
time: 0.001; rss: 57MB	language item collection
time: 0.035; rss: 75MB	resolution
time: 0.002; rss: 75MB	lifetime resolution
time: 0.000; rss: 75MB	looking for entry point
time: 0.000; rss: 75MB	looking for plugin registrar
time: 0.006; rss: 78MB	region resolution
time: 0.001; rss: 78MB	loop checking
time: 0.001; rss: 78MB	static item recursion checking
time: 0.012; rss: 83MB	type collecting
time: 0.000; rss: 83MB	variance inference
time: 0.040; rss: 100MB	coherence checking
time: 0.077; rss: 101MB	wf checking
time: 0.024; rss: 101MB	item-types checking
time: 0.508; rss: 119MB	item-bodies checking
time: 0.000; rss: 119MB	drop-impl checking
time: 0.042; rss: 120MB	const checking
time: 0.010; rss: 120MB	privacy checking
time: 0.001; rss: 120MB	stability index
time: 0.004; rss: 120MB	intrinsic checking
time: 0.002; rss: 120MB	effect checking
time: 0.012; rss: 121MB	match checking
time: 0.005; rss: 121MB	liveness checking
time: 0.033; rss: 121MB	rvalue checking
time: 0.065; rss: 124MB	MIR dump
time: 0.000; rss: 124MB	MIR passes
time: 0.068; rss: 125MB	borrow checking
time: 0.003; rss: 125MB	reachability checking
time: 0.006; rss: 125MB	death checking
time: 0.006; rss: 125MB	stability checking
time: 0.000; rss: 125MB	unused lib feature checking
time: 0.047; rss: 125MB	lint checking
time: 0.000; rss: 125MB	resolving dependency formats
time: 0.007; rss: 126MB	erasing regions from MIR
  time: 0.210; rss: 145MB	translation item collection
  time: 0.137; rss: 238MB	write metadata
time: 1.551; rss: 238MB	translation
  time: 0.099; rss: 162MB	llvm function passes [0]
  time: 0.047; rss: 163MB	llvm module passes [0]
  time: 1.644; rss: 168MB	codegen passes [0]
  time: 0.001; rss: 119MB	codegen passes [0]
time: 2.001; rss: 119MB	LLVM passes
time: 0.171; rss: 119MB	linking
done
