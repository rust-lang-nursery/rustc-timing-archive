commit d2bc30b03fa4bf5425d080710f681f36f58f1706
Merge: 49c36bf 99234bb
Author: bors <bors@rust-lang.org>
Date:   Fri Nov 4 03:38:18 2016 -0700

    Auto merge of #37037 - Mark-Simulacrum:stack-error, r=alexcrichton
    
    Add conversions from `io:ErrorKind` to `io::Error`
    
    Filing to help with discussion around the possibility of doing this.
    
    Current changes are clearly backwards incompatible, but I think adding a new function (with a bikeshed on naming) like `Error::new_str` should be possible (or some other way of specializing the string error message case) to fix #36658.
rustc: ./hyper.0.5.0
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling hyper v0.5.0 (file:///root/benchmarks/hyper.0.5.0)
time: 0.026; rss: 49MB	parsing
Lines of code:             9003
Pre-expansion node count:  44129
time: 0.000; rss: 49MB	recursion limit
time: 0.000; rss: 49MB	crate injection
time: 0.000; rss: 49MB	plugin loading
time: 0.000; rss: 49MB	plugin registration
time: 0.093; rss: 86MB	expansion
time: 0.000; rss: 86MB	maybe building test harness
time: 0.001; rss: 86MB	maybe creating a macro crate
Post-expansion node count: 101823
time: 0.000; rss: 86MB	checking for inline asm in case the target doesn't support it
time: 0.002; rss: 86MB	complete gated feature checking
time: 0.003; rss: 86MB	early lint checks
time: 0.001; rss: 86MB	AST validation
time: 0.016; rss: 91MB	name resolution
time: 0.008; rss: 95MB	lowering ast -> hir
time: 0.001; rss: 97MB	indexing hir
time: 0.001; rss: 97MB	attribute checking
time: 0.001; rss: 90MB	language item collection
time: 0.001; rss: 90MB	lifetime resolution
time: 0.000; rss: 90MB	looking for entry point
time: 0.000; rss: 90MB	looking for plugin registrar
time: 0.005; rss: 94MB	region resolution
time: 0.001; rss: 94MB	loop checking
time: 0.000; rss: 94MB	static item recursion checking
time: 0.056; rss: 94MB	compute_incremental_hashes_map
time: 0.000; rss: 94MB	load_dep_graph
time: 0.015; rss: 96MB	type collecting
time: 0.000; rss: 96MB	variance inference
time: 0.028; rss: 99MB	coherence checking
time: 0.043; rss: 103MB	wf checking
time: 0.019; rss: 103MB	item-types checking
time: 0.326; rss: 113MB	item-bodies checking
time: 0.000; rss: 113MB	drop-impl checking
time: 0.030; rss: 112MB	const checking
time: 0.007; rss: 112MB	privacy checking
time: 0.001; rss: 112MB	stability index
time: 0.003; rss: 112MB	intrinsic checking
time: 0.002; rss: 112MB	effect checking
time: 0.008; rss: 112MB	match checking
time: 0.004; rss: 112MB	liveness checking
time: 0.021; rss: 112MB	rvalue checking
time: 0.049; rss: 130MB	MIR dump
  time: 0.006; rss: 130MB	SimplifyCfg
  time: 0.011; rss: 130MB	QualifyAndPromoteConstants
  time: 0.013; rss: 130MB	TypeckMir
  time: 0.001; rss: 130MB	SimplifyBranches
  time: 0.003; rss: 130MB	SimplifyCfg
time: 0.034; rss: 130MB	MIR cleanup and validation
time: 0.054; rss: 130MB	borrow checking
time: 0.003; rss: 130MB	reachability checking
time: 0.005; rss: 130MB	death checking
time: 0.005; rss: 132MB	stability checking
time: 0.000; rss: 132MB	unused lib feature checking
time: 0.038; rss: 134MB	lint checking
time: 0.000; rss: 134MB	resolving dependency formats
  time: 0.001; rss: 134MB	NoLandingPads
  time: 0.003; rss: 134MB	SimplifyCfg
  time: 0.008; rss: 134MB	EraseRegions
  time: 0.001; rss: 134MB	AddCallGuards
  time: 0.021; rss: 134MB	ElaborateDrops
  time: 0.001; rss: 134MB	NoLandingPads
  time: 0.005; rss: 134MB	SimplifyCfg
  time: 0.003; rss: 134MB	InstCombine
  time: 0.003; rss: 134MB	Deaggregator
  time: 0.000; rss: 134MB	CopyPropagation
  time: 0.004; rss: 134MB	SimplifyLocals
  time: 0.001; rss: 134MB	AddCallGuards
  time: 0.000; rss: 134MB	PreTrans
time: 0.052; rss: 134MB	MIR optimisations
  time: 0.012; rss: 139MB	write metadata
  time: 0.116; rss: 144MB	translation item collection
  time: 0.015; rss: 148MB	codegen unit partitioning
  time: 0.013; rss: 203MB	internalize symbols
time: 0.994; rss: 203MB	translation
time: 0.000; rss: 203MB	assert dep graph
time: 0.000; rss: 203MB	serialize dep graph
  time: 0.089; rss: 141MB	llvm function passes [0]
  time: 0.041; rss: 143MB	llvm module passes [0]
  time: 1.616; rss: 150MB	codegen passes [0]
  time: 0.000; rss: 150MB	codegen passes [0]
time: 1.880; rss: 150MB	LLVM passes
time: 0.000; rss: 150MB	serialize work products
time: 0.068; rss: 94MB	linking
done
