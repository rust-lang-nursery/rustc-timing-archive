commit d36ad55aa5176eeec0da6d2a7b1689c263195e8a
Merge: b324fa7 b325baf
Author: bors <bors@rust-lang.org>
Date:   Mon Apr 18 17:53:58 2016 -0700

    Auto merge of #32755 - alexcrichton:rustbuild-start-test, r=brson
    
    rustbuild: Add support for compiletest test suites
    
    This commit adds support in rustbuild for running all of the compiletest test
    suites as part of `make check`. The `compiletest` program was moved to
    `src/tools` (like `rustbook` and others) and is now just compiled like any other
    old tool. Each test suite has a pretty standard set of dependencies and just
    tweaks various parameters to the final compiletest executable.
    
    Note that full support is lacking in terms of:
    
    * Once a test suite has passed, that's not remembered. When a test suite is
      requested to be run, it's always run.
    * The arguments to compiletest probably don't work for every possible
      combination of platforms and testing environments just yet. There will likely
      need to be future updates to tweak various pieces here and there.
    * Cross compiled test suites probably don't work just yet, support for that will
      come in a follow-up patch.
rustc: ./helloworld
/root/rust/x86_64-unknown-linux-gnu/stage2/bin/rustc hello.rs -Ztime-passes -Zinput-stats
time: 0.000; rss: 36MB	parsing
Lines of code:             3
Pre-expansion node count:  8
time: 0.000; rss: 40MB	configuration 1
time: 0.000; rss: 40MB	recursion limit
time: 0.000; rss: 40MB	gated macro checking
time: 0.000; rss: 40MB	crate injection
time: 0.003; rss: 42MB	macro loading
time: 0.000; rss: 42MB	plugin loading
time: 0.000; rss: 42MB	plugin registration
time: 0.001; rss: 42MB	expansion
time: 0.000; rss: 42MB	complete gated feature checking 1
time: 0.000; rss: 42MB	configuration 2
time: 0.000; rss: 42MB	gated configuration checking
time: 0.000; rss: 42MB	maybe building test harness
time: 0.000; rss: 42MB	prelude injection
time: 0.000; rss: 42MB	checking that all macro invocations are gone
time: 0.000; rss: 42MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 42MB	complete gated feature checking 2
time: 0.000; rss: 42MB	const fn bodies and arguments
Post-expansion node count: 68
time: 0.000; rss: 42MB	assigning node ids
time: 0.000; rss: 42MB	lowering ast -> hir
time: 0.000; rss: 42MB	indexing hir
time: 0.000; rss: 42MB	attribute checking
time: 0.000; rss: 47MB	early lint checks
time: 0.001; rss: 47MB	external crate/lib resolution
time: 0.000; rss: 47MB	language item collection
time: 0.001; rss: 51MB	resolution
time: 0.000; rss: 51MB	lifetime resolution
time: 0.000; rss: 51MB	looking for entry point
time: 0.000; rss: 51MB	looking for plugin registrar
time: 0.000; rss: 51MB	region resolution
time: 0.000; rss: 51MB	loop checking
time: 0.000; rss: 51MB	static item recursion checking
time: 0.000; rss: 51MB	load_dep_graph
time: 0.000; rss: 51MB	type collecting
time: 0.000; rss: 51MB	variance inference
time: 0.005; rss: 59MB	coherence checking
time: 0.000; rss: 59MB	wf checking
time: 0.000; rss: 59MB	item-types checking
time: 0.000; rss: 59MB	item-bodies checking
time: 0.000; rss: 59MB	drop-impl checking
time: 0.000; rss: 59MB	const checking
time: 0.000; rss: 59MB	privacy checking
time: 0.000; rss: 59MB	stability index
time: 0.000; rss: 59MB	intrinsic checking
time: 0.000; rss: 59MB	effect checking
time: 0.000; rss: 59MB	match checking
time: 0.000; rss: 59MB	liveness checking
time: 0.000; rss: 59MB	rvalue checking
time: 0.000; rss: 59MB	MIR dump
time: 0.000; rss: 59MB	MIR passes
time: 0.000; rss: 59MB	borrow checking
time: 0.000; rss: 59MB	reachability checking
time: 0.000; rss: 59MB	death checking
time: 0.000; rss: 59MB	stability checking
time: 0.000; rss: 59MB	unused lib feature checking
time: 0.000; rss: 59MB	lint checking
time: 0.001; rss: 59MB	resolving dependency formats
time: 0.000; rss: 59MB	Prepare MIR codegen passes
  time: 0.000; rss: 73MB	translation item collection
  time: 0.000; rss: 73MB	codegen unit partitioning
  time: 0.000; rss: 81MB	write metadata
time: 0.007; rss: 81MB	translation
time: 0.000; rss: 81MB	assert dep graph
time: 0.000; rss: 81MB	serialize dep graph
  time: 0.000; rss: 81MB	llvm function passes [0]
  time: 0.000; rss: 81MB	llvm module passes [0]
  time: 0.001; rss: 86MB	codegen passes [0]
  time: 0.000; rss: 86MB	codegen passes [0]
time: 0.002; rss: 86MB	LLVM passes
  time: 0.100; rss: 86MB	running linker
time: 0.100; rss: 86MB	linking
done
