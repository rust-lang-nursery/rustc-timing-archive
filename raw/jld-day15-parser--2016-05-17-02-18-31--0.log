commit 786b26d7b48accffc638f8c2767a6e4a6f1991a5
Merge: cd6a400 65ad935
Author: bors <bors@rust-lang.org>
Date:   Mon May 16 18:39:59 2016 -0700

    Auto merge of #33491 - arielb1:obligation-jungle, r=nikomatsakis
    
    Replace the obligation forest with a graph
    
    In the presence of caching, arbitrary nodes in the obligation forest can be merged, which makes it a general graph. Handle it as such, using cycle-detection algorithms in the processing.
    
    I should do performance measurements sometime.
    
    This was pretty much written as a proof-of-concept. Please help me write this in a less-ugly way. I should also add comments explaining what is going on.
    
    r? @nikomatsakis
rustc: ./jld-day15-parser
cargo rustc -- -Ztime-passes -Zinput-stats
    Updating registry `https://github.com/rust-lang/crates.io-index`
   Compiling combine v1.3.0
   Compiling day15 v0.1.0 (file:///root/benchmarks/jld-day15-parser)
time: 0.001; rss: 44MB	parsing
Lines of code:             72
Pre-expansion node count:  673
time: 0.000; rss: 44MB	configuration 1
time: 0.000; rss: 44MB	recursion limit
time: 0.000; rss: 44MB	crate injection
time: 0.003; rss: 50MB	macro loading
time: 0.000; rss: 50MB	plugin loading
time: 0.000; rss: 50MB	plugin registration
time: 0.002; rss: 50MB	expansion
time: 0.000; rss: 50MB	configuration 2
time: 0.000; rss: 50MB	gated configuration checking
time: 0.000; rss: 50MB	maybe building test harness
time: 0.000; rss: 50MB	prelude injection
time: 0.000; rss: 50MB	checking that all macro invocations are gone
time: 0.000; rss: 50MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 50MB	complete gated feature checking
Post-expansion node count: 1176
time: 0.000; rss: 50MB	assigning node ids
time: 0.000; rss: 50MB	collecting defs
time: 0.004; rss: 54MB	external crate/lib resolution
time: 0.000; rss: 54MB	early lint checks
time: 0.001; rss: 58MB	name resolution
time: 0.000; rss: 58MB	lowering ast -> hir
time: 0.000; rss: 58MB	indexing hir
time: 0.000; rss: 58MB	attribute checking
time: 0.000; rss: 58MB	language item collection
time: 0.000; rss: 58MB	lifetime resolution
time: 0.000; rss: 58MB	looking for entry point
time: 0.000; rss: 58MB	looking for plugin registrar
time: 0.000; rss: 58MB	region resolution
time: 0.000; rss: 58MB	loop checking
time: 0.000; rss: 58MB	static item recursion checking
time: 0.000; rss: 62MB	load_dep_graph
time: 0.001; rss: 62MB	type collecting
time: 0.000; rss: 62MB	variance inference
time: 0.005; rss: 72MB	coherence checking
time: 0.007; rss: 76MB	wf checking
time: 0.000; rss: 76MB	item-types checking
time: 0.736; rss: 101MB	item-bodies checking
time: 0.000; rss: 101MB	drop-impl checking
time: 0.001; rss: 101MB	const checking
time: 0.000; rss: 101MB	privacy checking
time: 0.000; rss: 101MB	stability index
time: 0.000; rss: 101MB	intrinsic checking
time: 0.000; rss: 101MB	effect checking
time: 0.000; rss: 101MB	match checking
time: 0.000; rss: 101MB	liveness checking
time: 0.000; rss: 101MB	rvalue checking
time: 0.001; rss: 103MB	MIR dump
time: 0.001; rss: 103MB	MIR passes
time: 0.001; rss: 103MB	borrow checking
time: 0.000; rss: 103MB	reachability checking
time: 0.000; rss: 103MB	death checking
time: 0.000; rss: 103MB	stability checking
time: 0.000; rss: 103MB	unused lib feature checking
time: 0.004; rss: 104MB	lint checking
time: 0.002; rss: 104MB	resolving dependency formats
time: 0.000; rss: 104MB	Prepare MIR codegen passes
  time: 10.843; rss: 112MB	translation item collection
  time: 0.000; rss: 112MB	codegen unit partitioning
  time: 0.000; rss: 141MB	write metadata
time: 33.177; rss: 139MB	translation
time: 0.000; rss: 139MB	assert dep graph
time: 0.000; rss: 139MB	serialize dep graph
  time: 0.014; rss: 106MB	llvm function passes [0]
  time: 0.001; rss: 106MB	llvm module passes [0]
  time: 0.273; rss: 112MB	codegen passes [0]
  time: 0.000; rss: 105MB	codegen passes [0]
time: 0.296; rss: 105MB	LLVM passes
  time: 0.123; rss: 105MB	running linker
time: 0.124; rss: 105MB	linking
done
