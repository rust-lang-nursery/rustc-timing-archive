commit b3583193531c124e36aa1813cf5f8b8e667d016c
Merge: 1a26d23 04baf25
Author: bors <bors@rust-lang.org>
Date:   Sun May 15 05:26:50 2016 -0700

    Auto merge of #33612 - royalstream:royalstream-enc-enum-ptr, r=michaelwoerister
    
    gdb Pretty Print: generic encoded was failing on reference/pointer types
    
    If you debug this program using **gdb**
    ```rust
    fn main() {
        let x = 10;
        let y = Some(&x);
        // additional code
    }
    ```
    And you try to print **y**'s value from the debugger, you get the following:
    ```
    (gdb) print y
    Python Exception <class 'gdb.error'> Cannot convert value to int.:
    $1 = {RUST$ENCODED$ENUM$0$None = Some = {0x7fff5fbff97c}}
    ```
    What happens is that inside **debugger_pretty_printers_common.py** the method `is_null_variant` doesn't have any special handling for pointer values so it ends up calling `.as_integer()` on `discriminant_val` (which holds a pointer) and fails.
    
    Considering it needs to handle pointers and return _true_ when the pointer is _null_, I modified the `.as_integer()` method in **gdb_rust_pretty_printing.py** to take pointers into consideration.
    
    After this modification **gdb** prints **y** like this:
    ```
    (gdb) print y
    $1 = Some = {0x7fff5fbff97c}
    ```
    Now, it would be nice to print something useful (instead of a pointer address) but the pretty printer doesn't currently handle references/pointers so that's a completely different subject.
rustc: ./jld-day15-parser
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling day15 v0.1.0 (file:///root/benchmarks/jld-day15-parser)
time: 0.001; rss: 44MB	parsing
Lines of code:             72
Pre-expansion node count:  673
time: 0.000; rss: 48MB	configuration 1
time: 0.000; rss: 48MB	recursion limit
time: 0.000; rss: 48MB	crate injection
time: 0.003; rss: 51MB	macro loading
time: 0.000; rss: 51MB	plugin loading
time: 0.000; rss: 51MB	plugin registration
time: 0.002; rss: 51MB	expansion
time: 0.000; rss: 51MB	configuration 2
time: 0.000; rss: 51MB	gated configuration checking
time: 0.000; rss: 51MB	maybe building test harness
time: 0.000; rss: 51MB	prelude injection
time: 0.000; rss: 51MB	checking that all macro invocations are gone
time: 0.000; rss: 51MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 51MB	complete gated feature checking
Post-expansion node count: 1176
time: 0.000; rss: 51MB	assigning node ids
time: 0.000; rss: 51MB	collecting defs
time: 0.004; rss: 51MB	external crate/lib resolution
time: 0.000; rss: 51MB	early lint checks
time: 0.001; rss: 59MB	name resolution
time: 0.000; rss: 59MB	lowering ast -> hir
time: 0.000; rss: 59MB	indexing hir
time: 0.000; rss: 59MB	attribute checking
time: 0.000; rss: 59MB	language item collection
time: 0.000; rss: 59MB	lifetime resolution
time: 0.000; rss: 59MB	looking for entry point
time: 0.000; rss: 59MB	looking for plugin registrar
time: 0.000; rss: 59MB	region resolution
time: 0.000; rss: 59MB	loop checking
time: 0.000; rss: 59MB	static item recursion checking
time: 0.000; rss: 59MB	load_dep_graph
time: 0.001; rss: 63MB	type collecting
time: 0.000; rss: 63MB	variance inference
time: 0.005; rss: 73MB	coherence checking
time: 0.007; rss: 77MB	wf checking
time: 0.000; rss: 77MB	item-types checking
time: 1.580; rss: 113MB	item-bodies checking
time: 0.000; rss: 113MB	drop-impl checking
time: 0.001; rss: 113MB	const checking
time: 0.000; rss: 113MB	privacy checking
time: 0.000; rss: 113MB	stability index
time: 0.000; rss: 113MB	intrinsic checking
time: 0.000; rss: 113MB	effect checking
time: 0.000; rss: 113MB	match checking
time: 0.000; rss: 113MB	liveness checking
time: 0.000; rss: 113MB	rvalue checking
time: 0.001; rss: 114MB	MIR dump
time: 0.001; rss: 114MB	MIR passes
time: 0.001; rss: 114MB	borrow checking
time: 0.000; rss: 114MB	reachability checking
time: 0.000; rss: 114MB	death checking
time: 0.000; rss: 114MB	stability checking
time: 0.000; rss: 114MB	unused lib feature checking
time: 0.004; rss: 115MB	lint checking
time: 0.002; rss: 115MB	resolving dependency formats
time: 0.000; rss: 115MB	Prepare MIR codegen passes
  time: 14.566; rss: 126MB	translation item collection
  time: 0.000; rss: 126MB	codegen unit partitioning
  time: 0.000; rss: 153MB	write metadata
time: 47.490; rss: 153MB	translation
time: 0.000; rss: 153MB	assert dep graph
time: 0.000; rss: 153MB	serialize dep graph
  time: 0.014; rss: 106MB	llvm function passes [0]
  time: 0.001; rss: 106MB	llvm module passes [0]
  time: 0.273; rss: 112MB	codegen passes [0]
  time: 0.000; rss: 106MB	codegen passes [0]
time: 0.296; rss: 105MB	LLVM passes
  time: 0.117; rss: 105MB	running linker
time: 0.118; rss: 105MB	linking
done
