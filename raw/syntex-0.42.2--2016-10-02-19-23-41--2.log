commit 1cdc0fb11af12c04fb4b1984615f03b11a60decc
Merge: 8991ffc 9482bce
Author: bors <bors@rust-lang.org>
Date:   Sun Oct 2 14:13:27 2016 -0700

    Auto merge of #36904 - camlorn:field_offsets_refactor, r=eddyb
    
    Refactor layout to store offsets of fields, not offsets after fields
    
    This is the next PR moving us towards being able to reorder struct fields.
    
    The old code implicitly stored the offset of the first field.  This is inadequate because the first field may no longer be offset 0 in future.  This PR refactors `layout` to use a `offsets` vector instead of a `offset_after_field` vector.
rustc: ./syntex-0.42.2
cargo rustc -p syntex_syntax -- -Ztime-passes -Zinput-stats
   Compiling syntex_syntax v0.42.0
time: 0.108; rss: 75MB	parsing
Lines of code:             33687
Pre-expansion node count:  224033
time: 0.000; rss: 75MB	recursion limit
time: 0.000; rss: 75MB	crate injection
time: 0.000; rss: 75MB	plugin loading
time: 0.000; rss: 75MB	plugin registration
time: 0.271; rss: 147MB	expansion
time: 0.000; rss: 147MB	maybe building test harness
time: 0.006; rss: 147MB	maybe creating a macro crate
Post-expansion node count: 641571
time: 0.000; rss: 147MB	checking for inline asm in case the target doesn't support it
time: 0.013; rss: 147MB	complete gated feature checking
time: 0.023; rss: 147MB	early lint checks
time: 0.007; rss: 147MB	AST validation
time: 0.084; rss: 161MB	name resolution
time: 0.050; rss: 202MB	lowering ast -> hir
time: 0.009; rss: 211MB	indexing hir
time: 0.006; rss: 211MB	attribute checking
time: 0.006; rss: 161MB	language item collection
time: 0.012; rss: 161MB	lifetime resolution
time: 0.000; rss: 161MB	looking for entry point
time: 0.000; rss: 161MB	looking for plugin registrar
time: 0.044; rss: 172MB	region resolution
time: 0.006; rss: 172MB	loop checking
time: 0.006; rss: 172MB	static item recursion checking
time: 0.296; rss: 174MB	compute_incremental_hashes_map
time: 0.000; rss: 174MB	load_dep_graph
time: 0.080; rss: 174MB	type collecting
time: 0.001; rss: 174MB	variance inference
time: 0.039; rss: 177MB	coherence checking
time: 0.101; rss: 180MB	wf checking
time: 0.195; rss: 184MB	item-types checking
time: 4.007; rss: 242MB	item-bodies checking
time: 0.000; rss: 242MB	drop-impl checking
time: 0.320; rss: 244MB	const checking
time: 0.055; rss: 244MB	privacy checking
time: 0.007; rss: 244MB	stability index
time: 0.022; rss: 244MB	intrinsic checking
time: 0.019; rss: 244MB	effect checking
time: 0.057; rss: 244MB	match checking
time: 0.055; rss: 238MB	liveness checking
time: 0.295; rss: 238MB	rvalue checking
time: 0.421; rss: 426MB	MIR dump
  time: 0.057; rss: 429MB	SimplifyCfg
  time: 0.086; rss: 429MB	QualifyAndPromoteConstants
  time: 0.113; rss: 429MB	TypeckMir
  time: 0.004; rss: 429MB	SimplifyBranches
  time: 0.036; rss: 429MB	SimplifyCfg
time: 0.297; rss: 429MB	MIR passes
time: 0.704; rss: 429MB	borrow checking
time: 0.018; rss: 429MB	reachability checking
time: 0.045; rss: 429MB	death checking
time: 0.041; rss: 429MB	stability checking
time: 0.000; rss: 429MB	unused lib feature checking
time: 0.221; rss: 429MB	lint checking
time: 0.000; rss: 429MB	resolving dependency formats
  time: 0.003; rss: 429MB	NoLandingPads
  time: 0.027; rss: 429MB	SimplifyCfg
  time: 0.072; rss: 442MB	EraseRegions
  time: 0.011; rss: 442MB	AddCallGuards
  time: 1.117; rss: 457MB	ElaborateDrops
  time: 0.003; rss: 457MB	NoLandingPads
  time: 0.052; rss: 457MB	SimplifyCfg
  time: 0.030; rss: 457MB	InstCombine
  time: 0.012; rss: 457MB	Deaggregator
  time: 0.003; rss: 457MB	CopyPropagation
  time: 0.009; rss: 457MB	AddCallGuards
  time: 0.003; rss: 457MB	PreTrans
time: 1.342; rss: 457MB	Prepare MIR codegen passes
  time: 0.263; rss: 467MB	write metadata
  time: 0.477; rss: 474MB	translation item collection
  time: 0.067; rss: 482MB	codegen unit partitioning
  time: 0.058; rss: 730MB	internalize symbols
time: 5.210; rss: 609MB	translation
time: 0.000; rss: 609MB	assert dep graph
time: 0.000; rss: 609MB	serialize dep graph
  time: 0.505; rss: 416MB	llvm function passes [0]
  time: 0.244; rss: 422MB	llvm module passes [0]
  time: 10.057; rss: 415MB	codegen passes [0]
  time: 0.001; rss: 417MB	codegen passes [0]
time: 11.548; rss: 417MB	LLVM passes
time: 0.000; rss: 417MB	serialize work products
time: 0.665; rss: 108MB	linking
done
