commit da7f8c540b47c5bb063356bf5ad05a6a49ed0ff1
Merge: 54c133d 8d5b523
Author: bors <bors@rust-lang.org>
Date:   Mon Oct 17 00:31:25 2016 -0700

    Auto merge of #37153 - michaelwoerister:spread-arg-debuginfo, r=eddyb
    
    debuginfo: Handle spread_arg case in MIR-trans in a more stable way.
    
    Use `VariableAccess::DirectVariable` instead of `VariableAccess::IndirectVariable` in order not to make LLVM's SROA angry. This is a step towards fixing #36774 and #35547. At least, I can build Cargo with optimizations + debuginfo again.
    
    r? @eddyb
rustc: ./syntex-0.42.2-incr-clean
RUSTFLAGS="-Z incremental=incr" \
    cargo rustc -p syntex_syntax -- -Ztime-passes -Zinput-stats -Z incremental-info
   Compiling syntex_syntax v0.42.0
time: 0.108; rss: 76MB	parsing
Lines of code:             33687
Pre-expansion node count:  224033
time: 0.000; rss: 76MB	recursion limit
time: 0.000; rss: 76MB	crate injection
time: 0.000; rss: 76MB	plugin loading
time: 0.000; rss: 76MB	plugin registration
time: 0.274; rss: 148MB	expansion
time: 0.000; rss: 148MB	maybe building test harness
time: 0.006; rss: 148MB	maybe creating a macro crate
Post-expansion node count: 641571
time: 0.000; rss: 148MB	checking for inline asm in case the target doesn't support it
time: 0.012; rss: 148MB	complete gated feature checking
time: 0.023; rss: 148MB	early lint checks
time: 0.007; rss: 148MB	AST validation
time: 0.084; rss: 163MB	name resolution
time: 0.048; rss: 202MB	lowering ast -> hir
time: 0.009; rss: 213MB	indexing hir
time: 0.006; rss: 213MB	attribute checking
time: 0.005; rss: 164MB	language item collection
time: 0.011; rss: 164MB	lifetime resolution
time: 0.000; rss: 164MB	looking for entry point
time: 0.000; rss: 164MB	looking for plugin registrar
time: 0.043; rss: 174MB	region resolution
time: 0.006; rss: 174MB	loop checking
time: 0.005; rss: 174MB	static item recursion checking
time: 0.262; rss: 174MB	compute_incremental_hashes_map
time: 0.000; rss: 174MB	load_dep_graph
time: 0.042; rss: 179MB	type collecting
time: 0.001; rss: 179MB	variance inference
time: 0.038; rss: 185MB	coherence checking
time: 0.104; rss: 189MB	wf checking
time: 0.194; rss: 195MB	item-types checking
time: 3.903; rss: 243MB	item-bodies checking
time: 0.000; rss: 243MB	drop-impl checking
time: 0.255; rss: 247MB	const checking
time: 0.052; rss: 247MB	privacy checking
time: 0.007; rss: 247MB	stability index
time: 0.021; rss: 247MB	intrinsic checking
time: 0.018; rss: 247MB	effect checking
time: 0.056; rss: 247MB	match checking
time: 0.052; rss: 240MB	liveness checking
time: 0.217; rss: 240MB	rvalue checking
time: 0.407; rss: 430MB	MIR dump
  time: 0.066; rss: 431MB	SimplifyCfg
  time: 0.078; rss: 431MB	QualifyAndPromoteConstants
  time: 0.109; rss: 431MB	TypeckMir
  time: 0.004; rss: 431MB	SimplifyBranches
  time: 0.036; rss: 431MB	SimplifyCfg
time: 0.294; rss: 431MB	MIR passes
time: 0.565; rss: 432MB	borrow checking
time: 0.022; rss: 432MB	reachability checking
time: 0.043; rss: 432MB	death checking
time: 0.040; rss: 434MB	stability checking
time: 0.000; rss: 434MB	unused lib feature checking
time: 0.220; rss: 434MB	lint checking
time: 0.000; rss: 434MB	resolving dependency formats
  time: 0.003; rss: 434MB	NoLandingPads
  time: 0.031; rss: 434MB	SimplifyCfg
  time: 0.069; rss: 442MB	EraseRegions
  time: 0.011; rss: 442MB	AddCallGuards
  time: 0.289; rss: 461MB	ElaborateDrops
  time: 0.003; rss: 461MB	NoLandingPads
  time: 0.062; rss: 461MB	SimplifyCfg
  time: 0.029; rss: 460MB	InstCombine
  time: 0.011; rss: 460MB	Deaggregator
  time: 0.003; rss: 460MB	CopyPropagation
  time: 0.009; rss: 460MB	AddCallGuards
  time: 0.003; rss: 460MB	PreTrans
time: 0.524; rss: 460MB	Prepare MIR codegen passes
  time: 0.261; rss: 468MB	write metadata
  time: 0.449; rss: 478MB	translation item collection
  time: 0.063; rss: 489MB	codegen unit partitioning
  time: 0.053; rss: 732MB	internalize symbols
time: 5.071; rss: 612MB	translation
time: 0.000; rss: 612MB	assert dep graph
time: 0.000; rss: 612MB	serialize dep graph
incremental: re-using 0 out of 1 modules
  time: 0.513; rss: 411MB	llvm function passes [0]
  time: 0.244; rss: 418MB	llvm module passes [0]
  time: 10.045; rss: 413MB	codegen passes [0]
  time: 0.001; rss: 414MB	codegen passes [0]
time: 11.543; rss: 414MB	LLVM passes
time: 0.000; rss: 414MB	serialize work products
time: 0.666; rss: 107MB	linking
done
