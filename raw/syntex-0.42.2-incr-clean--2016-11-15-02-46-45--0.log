commit 0ed951993fb5721a303ca5fa743543dd9f3f6b10
Merge: bd6a54d 7cd8a49
Author: bors <bors@rust-lang.org>
Date:   Mon Nov 14 18:12:26 2016 -0800

    Auto merge of #37775 - alexcrichton:try-fix-dox, r=brson
    
    rustbuild: Tweak default rule inclusion
    
    If a rule is flagged with `default(true)` then the pseudo-rule `default:foo`
    will include that. If a rule is also flagged with `.host(true)`, however, then
    the rule shouldn't be included for targets that aren't in the host array. This
    adds a filter to ensure we don't pull in host rules for targets by accident.
rustc: ./syntex-0.42.2-incr-clean
RUSTFLAGS="-Z incremental=incr" \
    cargo rustc -p syntex_syntax  -- \
    -Ztime-passes -Zinput-stats -Z incremental-info
   Compiling libc v0.2.15
   Compiling unicode-xid v0.0.3
   Compiling log v0.3.6
   Compiling winapi-build v0.1.1
   Compiling bitflags v0.5.0
   Compiling rustc-serialize v0.3.19
   Compiling winapi v0.2.8
   Compiling kernel32-sys v0.2.2
   Compiling term v0.4.4
   Compiling syntex_pos v0.42.0
   Compiling syntex_errors v0.42.0
   Compiling syntex_syntax v0.42.0
time: 0.126; rss: 63MB	parsing
Lines of code:             33687
Pre-expansion node count:  223115
time: 0.000; rss: 63MB	recursion limit
time: 0.000; rss: 63MB	crate injection
time: 0.000; rss: 63MB	plugin loading
time: 0.000; rss: 63MB	plugin registration
time: 0.313; rss: 134MB	expansion
time: 0.000; rss: 134MB	maybe building test harness
time: 0.006; rss: 134MB	maybe creating a macro crate
Post-expansion node count: 638863
time: 0.000; rss: 134MB	checking for inline asm in case the target doesn't support it
time: 0.013; rss: 134MB	complete gated feature checking
time: 0.023; rss: 134MB	early lint checks
time: 0.007; rss: 134MB	AST validation
time: 0.103; rss: 150MB	name resolution
time: 0.088; rss: 175MB	lowering ast -> hir
time: 0.021; rss: 183MB	indexing hir
time: 0.006; rss: 183MB	attribute checking
time: 0.005; rss: 141MB	language item collection
time: 0.010; rss: 141MB	lifetime resolution
time: 0.000; rss: 141MB	looking for entry point
time: 0.000; rss: 141MB	looking for plugin registrar
time: 0.081; rss: 161MB	region resolution
time: 0.005; rss: 161MB	loop checking
time: 0.005; rss: 161MB	static item recursion checking
time: 0.330; rss: 161MB	compute_incremental_hashes_map
time: 0.000; rss: 161MB	load_dep_graph
time: 0.051; rss: 161MB	type collecting
time: 0.001; rss: 161MB	variance inference
time: 0.018; rss: 164MB	coherence checking
time: 0.090; rss: 166MB	wf checking
time: 0.181; rss: 172MB	item-types checking
time: 3.470; rss: 216MB	item-bodies checking
time: 0.000; rss: 216MB	drop-impl checking
time: 0.285; rss: 233MB	const checking
time: 0.047; rss: 233MB	privacy checking
time: 0.005; rss: 233MB	stability index
time: 0.018; rss: 233MB	intrinsic checking
time: 0.015; rss: 233MB	effect checking
time: 0.047; rss: 233MB	match checking
time: 0.082; rss: 232MB	liveness checking
time: 0.192; rss: 232MB	rvalue checking
time: 0.596; rss: 404MB	MIR dump
  time: 0.060; rss: 411MB	SimplifyCfg
  time: 0.077; rss: 411MB	QualifyAndPromoteConstants
  time: 0.101; rss: 411MB	TypeckMir
  time: 0.004; rss: 411MB	SimplifyBranches
  time: 0.031; rss: 411MB	SimplifyCfg
time: 0.273; rss: 411MB	MIR cleanup and validation
time: 0.506; rss: 414MB	borrow checking
time: 0.025; rss: 414MB	reachability checking
time: 0.041; rss: 414MB	death checking
time: 0.039; rss: 417MB	stability checking
time: 0.000; rss: 417MB	unused lib feature checking
time: 0.210; rss: 417MB	lint checking
time: 0.000; rss: 417MB	resolving dependency formats
  time: 0.004; rss: 417MB	NoLandingPads
  time: 0.027; rss: 417MB	SimplifyCfg
  time: 0.075; rss: 424MB	EraseRegions
  time: 0.012; rss: 424MB	AddCallGuards
  time: 0.303; rss: 443MB	ElaborateDrops
  time: 0.004; rss: 443MB	NoLandingPads
  time: 0.054; rss: 443MB	SimplifyCfg
  time: 0.030; rss: 443MB	InstCombine
  time: 0.013; rss: 443MB	Deaggregator
  time: 0.003; rss: 443MB	CopyPropagation
  time: 0.036; rss: 443MB	SimplifyLocals
  time: 0.010; rss: 443MB	AddCallGuards
  time: 0.003; rss: 443MB	PreTrans
time: 0.572; rss: 443MB	MIR optimisations
  time: 0.082; rss: 450MB	write metadata
  time: 0.434; rss: 466MB	translation item collection
  time: 0.070; rss: 468MB	codegen unit partitioning
  time: 0.049; rss: 718MB	internalize symbols
time: 5.052; rss: 718MB	translation
time: 0.000; rss: 718MB	assert dep graph
time: 0.000; rss: 718MB	serialize dep graph
incremental: re-using 0 out of 1 modules
  time: 0.537; rss: 410MB	llvm function passes [0]
  time: 0.259; rss: 419MB	llvm module passes [0]
  time: 10.437; rss: 417MB	codegen passes [0]
  time: 0.000; rss: 416MB	codegen passes [0]
time: 12.130; rss: 416MB	LLVM passes
time: 0.000; rss: 416MB	serialize work products
time: 0.347; rss: 98MB	linking
done
