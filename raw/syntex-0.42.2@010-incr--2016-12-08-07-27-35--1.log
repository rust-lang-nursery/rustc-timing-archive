commit 816a34aca23f3ebd0fddf79ebdf96c9fae976f58
Merge: d9aae63 a1882ca
Author: bors <bors@rust-lang.org>
Date:   Thu Dec 8 07:05:19 2016 +0000

    Auto merge of #38146 - kali:master, r=alexcrichton
    
    fix objc ABI in std::env::args
    
    iOS use different calling convention for `objc_msgSend` depending on the platform. armv7 expect good old variadic arguments, but aarch64 wants "normal" convention: `objc_msgSend` has to be called mimicking the actual callee prototype.
    
    https://developer.apple.com/library/content/documentation/General/Conceptual/CocoaTouch64BitGuide/ConvertingYourAppto64-Bit/ConvertingYourAppto64-Bit.html#//apple_ref/doc/uid/TP40013501-CH3-SW26
    
    This currently breaks std::env:args() on aarch64 iOS devices. As far as I can tell, in the standard library, this is the only occurrence of ObjectiveC dispatching.
rustc: ./syntex-0.42.2@010-incr@010-incr
find . -name '*.rs' | xargs touch
RUSTFLAGS="-Z incremental=incr" \
    cargo rustc -p syntex_syntax  -- \
    -Ztime-passes -Zinput-stats -Z incremental-info
time: 0.092; rss: 75MB	parsing
Lines of code:             33687
Pre-expansion node count:  223115
time: 0.000; rss: 75MB	recursion limit
time: 0.000; rss: 75MB	crate injection
time: 0.000; rss: 75MB	plugin loading
time: 0.000; rss: 75MB	plugin registration
time: 0.251; rss: 152MB	expansion
time: 0.000; rss: 152MB	maybe building test harness
time: 0.007; rss: 152MB	maybe creating a macro crate
Post-expansion node count: 638863
time: 0.000; rss: 152MB	checking for inline asm in case the target doesn't support it
time: 0.013; rss: 152MB	complete gated feature checking
time: 0.025; rss: 152MB	early lint checks
time: 0.008; rss: 152MB	AST validation
time: 0.081; rss: 166MB	name resolution
time: 0.067; rss: 200MB	lowering ast -> hir
time: 0.011; rss: 192MB	indexing hir
time: 0.007; rss: 192MB	attribute checking
time: 0.002; rss: 154MB	language item collection
time: 0.013; rss: 156MB	lifetime resolution
time: 0.000; rss: 156MB	looking for entry point
time: 0.000; rss: 156MB	looking for plugin registrar
time: 0.051; rss: 177MB	region resolution
time: 0.009; rss: 177MB	loop checking
time: 0.002; rss: 177MB	static item recursion checking
time: 0.382; rss: 178MB	compute_incremental_hashes_map
time: 0.000; rss: 178MB	load_dep_graph
time: 0.009; rss: 178MB	stability index
time: 0.021; rss: 182MB	stability checking
time: 0.056; rss: 189MB	type collecting
time: 0.004; rss: 189MB	variance inference
time: 0.006; rss: 193MB	impl wf inference
time: 0.026; rss: 197MB	coherence checking
time: 0.090; rss: 199MB	wf checking
time: 0.199; rss: 207MB	item-types checking
time: 3.608; rss: 268MB	item-bodies checking
time: 0.000; rss: 268MB	drop-impl checking
time: 0.219; rss: 277MB	const checking
time: 0.060; rss: 277MB	privacy checking
time: 0.020; rss: 283MB	intrinsic checking
time: 0.016; rss: 283MB	effect checking
time: 0.052; rss: 283MB	match checking
time: 0.050; rss: 291MB	liveness checking
time: 0.179; rss: 293MB	rvalue checking
time: 0.372; rss: 482MB	MIR dump
  time: 0.058; rss: 483MB	SimplifyCfg
  time: 0.077; rss: 483MB	QualifyAndPromoteConstants
  time: 0.122; rss: 500MB	TypeckMir
  time: 0.005; rss: 500MB	SimplifyBranches
  time: 0.034; rss: 500MB	SimplifyCfg
time: 0.296; rss: 500MB	MIR cleanup and validation
time: 0.478; rss: 500MB	borrow checking
time: 0.026; rss: 500MB	reachability checking
time: 0.044; rss: 500MB	death checking
time: 0.000; rss: 500MB	unused lib feature checking
time: 0.185; rss: 500MB	lint checking
time: 0.000; rss: 500MB	resolving dependency formats
  time: 0.004; rss: 500MB	NoLandingPads
  time: 0.030; rss: 500MB	SimplifyCfg
  time: 0.073; rss: 509MB	EraseRegions
  time: 0.013; rss: 509MB	AddCallGuards
  time: 0.281; rss: 531MB	ElaborateDrops
  time: 0.004; rss: 531MB	NoLandingPads
  time: 0.057; rss: 531MB	SimplifyCfg
  time: 0.033; rss: 531MB	InstCombine
  time: 0.013; rss: 531MB	Deaggregator
  time: 0.003; rss: 531MB	CopyPropagation
  time: 0.042; rss: 531MB	SimplifyLocals
  time: 0.012; rss: 531MB	AddCallGuards
  time: 0.003; rss: 531MB	PreTrans
time: 0.565; rss: 531MB	MIR optimisations
  time: 0.079; rss: 540MB	write metadata
  time: 0.412; rss: 552MB	translation item collection
  time: 0.074; rss: 554MB	codegen unit partitioning
  time: 0.048; rss: 1457MB	internalize symbols
time: 11.814; rss: 1457MB	translation
time: 0.000; rss: 1457MB	assert dep graph
time: 1.441; rss: 1485MB	serialize dep graph
incremental: re-using 0 out of 50 modules
time: 0.000; rss: 1193MB	llvm function passes [1]
time: 0.000; rss: 1193MB	llvm module passes [1]
time: 0.001; rss: 1202MB	llvm function passes [2]
time: 0.001; rss: 1202MB	llvm function passes [0]
time: 0.000; rss: 1202MB	llvm module passes [0]
time: 0.000; rss: 1202MB	llvm module passes [2]
time: 0.003; rss: 1210MB	llvm function passes [6]
time: 0.004; rss: 1210MB	llvm function passes [3]
time: 0.000; rss: 1210MB	llvm module passes [3]
time: 0.001; rss: 1216MB	llvm function passes [9]
time: 0.000; rss: 1216MB	llvm module passes [9]
time: 0.011; rss: 1223MB	llvm function passes [5]
time: 0.011; rss: 1227MB	llvm module passes [6]
time: 0.014; rss: 1227MB	codegen passes [1]
time: 0.019; rss: 1227MB	llvm function passes [4]
time: 0.008; rss: 1233MB	llvm module passes [4]
time: 0.016; rss: 1233MB	llvm module passes [5]
time: 0.018; rss: 1233MB	llvm function passes [10]
time: 0.024; rss: 1233MB	llvm function passes [11]
time: 0.008; rss: 1233MB	llvm module passes [10]
time: 0.040; rss: 1235MB	codegen passes [2]
time: 0.014; rss: 1238MB	llvm module passes [11]
time: 0.057; rss: 1249MB	codegen passes [0]
time: 0.031; rss: 1249MB	llvm function passes [15]
time: 0.011; rss: 1249MB	llvm function passes [13]
time: 0.001; rss: 1249MB	llvm module passes [13]
time: 0.029; rss: 1249MB	llvm function passes [12]
time: 0.011; rss: 1249MB	llvm module passes [15]
time: 0.000; rss: 1256MB	llvm function passes [17]
time: 0.000; rss: 1256MB	llvm module passes [17]
time: 0.066; rss: 1256MB	codegen passes [9]
time: 0.003; rss: 1262MB	codegen passes [17]
time: 0.073; rss: 1262MB	codegen passes [3]
time: 0.000; rss: 1262MB	llvm function passes [17]
time: 0.000; rss: 1262MB	llvm module passes [17]
time: 0.001; rss: 1262MB	llvm function passes [18]
time: 0.000; rss: 1262MB	llvm module passes [18]
time: 0.004; rss: 1264MB	codegen passes [17]
time: 0.024; rss: 1266MB	llvm module passes [12]
time: 0.088; rss: 1270MB	llvm function passes [1]
time: 0.038; rss: 1275MB	codegen passes [18]
time: 0.000; rss: 1275MB	llvm function passes [18]
time: 0.000; rss: 1275MB	llvm module passes [18]
time: 0.001; rss: 1275MB	codegen passes [18]
time: 0.076; rss: 1281MB	llvm function passes [0]
time: 0.038; rss: 1281MB	llvm module passes [1]
time: 0.143; rss: 1283MB	llvm function passes [7]
time: 0.016; rss: 1283MB	llvm module passes [0]
time: 0.079; rss: 1289MB	llvm function passes [17]
time: 0.076; rss: 1289MB	codegen passes [13]
time: 0.014; rss: 1293MB	llvm module passes [17]
time: 0.063; rss: 1293MB	llvm function passes [18]
time: 0.098; rss: 1297MB	llvm function passes [16]
time: 0.000; rss: 1297MB	llvm module passes [16]
time: 0.191; rss: 1300MB	llvm function passes [8]
time: 0.024; rss: 1303MB	llvm module passes [18]
time: 0.218; rss: 1314MB	codegen passes [6]
time: 0.052; rss: 1322MB	codegen passes [16]
time: 0.229; rss: 1322MB	llvm function passes [14]
time: 0.021; rss: 1324MB	llvm function passes [6]
time: 0.183; rss: 1324MB	llvm function passes [9]
time: 0.019; rss: 1340MB	llvm module passes [6]
time: 0.133; rss: 1340MB	llvm module passes [7]
time: 0.010; rss: 1340MB	llvm function passes [24]
time: 0.020; rss: 1342MB	llvm function passes [22]
time: 0.004; rss: 1342MB	llvm module passes [24]
time: 0.008; rss: 1342MB	llvm module passes [22]
time: 0.048; rss: 1342MB	llvm function passes [16]
time: 0.151; rss: 1344MB	llvm function passes [19]
time: 0.081; rss: 1346MB	llvm function passes [21]
time: 0.059; rss: 1346MB	llvm module passes [9]
time: 0.023; rss: 1346MB	llvm module passes [16]
time: 0.034; rss: 1352MB	llvm function passes [26]
time: 0.031; rss: 1352MB	llvm module passes [21]
time: 0.011; rss: 1355MB	llvm module passes [26]
time: 0.053; rss: 1363MB	llvm module passes [19]
time: 0.031; rss: 1363MB	llvm function passes [25]
time: 0.169; rss: 1363MB	llvm function passes [20]
time: 0.019; rss: 1362MB	llvm module passes [25]
time: 0.214; rss: 1368MB	llvm module passes [8]
time: 0.026; rss: 1377MB	llvm function passes [29]
time: 0.185; rss: 1376MB	llvm module passes [14]
time: 0.008; rss: 1380MB	llvm module passes [29]
time: 0.086; rss: 1380MB	llvm module passes [20]
time: 0.415; rss: 1387MB	llvm function passes [2]
time: 0.054; rss: 1395MB	codegen passes [29]
time: 0.101; rss: 1406MB	llvm function passes [28]
time: 0.004; rss: 1406MB	llvm function passes [35]
time: 0.009; rss: 1405MB	llvm module passes [35]
time: 0.000; rss: 1405MB	llvm function passes [34]
time: 0.000; rss: 1405MB	llvm module passes [34]
time: 0.003; rss: 1402MB	codegen passes [34]
time: 0.000; rss: 1402MB	codegen passes [34]
time: 0.029; rss: 1406MB	llvm function passes [36]
time: 0.292; rss: 1402MB	llvm function passes [23]
time: 0.057; rss: 1395MB	llvm module passes [28]
time: 0.226; rss: 1400MB	llvm function passes [27]
time: 0.535; rss: 1403MB	llvm function passes [3]
time: 0.145; rss: 1401MB	llvm function passes [32]
time: 0.036; rss: 1402MB	llvm module passes [3]
time: 0.089; rss: 1403MB	llvm module passes [36]
time: 0.077; rss: 1404MB	llvm module passes [27]
time: 0.329; rss: 1400MB	codegen passes [24]
time: 0.112; rss: 1402MB	codegen passes [35]
time: 0.138; rss: 1399MB	llvm module passes [23]
time: 0.243; rss: 1401MB	llvm function passes [33]
time: 0.290; rss: 1401MB	llvm function passes [30]
time: 0.058; rss: 1412MB	llvm module passes [30]
time: 0.558; rss: 1410MB	codegen passes [5]
time: 0.165; rss: 1412MB	llvm module passes [32]
time: 0.645; rss: 1413MB	llvm function passes [13]
time: 0.105; rss: 1412MB	llvm module passes [33]
time: 0.414; rss: 1420MB	llvm function passes [29]
time: 0.470; rss: 1427MB	llvm module passes [2]
time: 0.553; rss: 1437MB	llvm function passes [31]
time: 0.266; rss: 1446MB	llvm module passes [13]
time: 0.178; rss: 1451MB	llvm module passes [29]
time: 0.829; rss: 1447MB	codegen passes [4]
time: 0.655; rss: 1472MB	codegen passes [36]
time: 1.068; rss: 1479MB	codegen passes [22]
time: 0.522; rss: 1479MB	llvm module passes [31]
time: 1.401; rss: 1494MB	codegen passes [12]
time: 1.471; rss: 1532MB	codegen passes [10]
time: 1.437; rss: 1517MB	codegen passes [15]
time: 1.391; rss: 1502MB	codegen passes [11]
time: 2.004; rss: 1445MB	codegen passes [0]
time: 1.831; rss: 1446MB	codegen passes [6]
time: 1.988; rss: 1444MB	codegen passes [26]
time: 1.337; rss: 1442MB	codegen passes [30]
time: 1.566; rss: 1453MB	codegen passes [33]
time: 2.312; rss: 1484MB	codegen passes [16]
time: 2.564; rss: 1494MB	codegen passes [17]
time: 1.895; rss: 1478MB	codegen passes [32]
time: 2.724; rss: 1494MB	codegen passes [18]
time: 2.637; rss: 1482MB	codegen passes [25]
time: 2.909; rss: 1561MB	codegen passes [21]
time: 2.790; rss: 1549MB	codegen passes [3]
time: 3.437; rss: 1580MB	codegen passes [1]
time: 3.877; rss: 1687MB	codegen passes [9]
time: 3.353; rss: 1666MB	codegen passes [28]
time: 4.046; rss: 1679MB	codegen passes [19]
time: 3.680; rss: 1683MB	codegen passes [29]
time: 4.405; rss: 1648MB	codegen passes [7]
time: 3.636; rss: 1608MB	codegen passes [13]
time: 4.057; rss: 1577MB	codegen passes [20]
time: 4.241; rss: 1568MB	codegen passes [27]
time: 4.130; rss: 1535MB	codegen passes [31]
time: 4.840; rss: 1529MB	codegen passes [8]
time: 5.108; rss: 1452MB	codegen passes [14]
time: 5.439; rss: 1394MB	codegen passes [2]
time: 5.503; rss: 1326MB	codegen passes [23]
time: 7.411; rss: 1321MB	LLVM passes
time: 0.000; rss: 1321MB	serialize work products
time: 1.059; rss: 290MB	linking
done
