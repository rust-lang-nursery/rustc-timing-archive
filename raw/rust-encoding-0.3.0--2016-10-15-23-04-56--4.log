commit 98a3502da1456b209ff031604cabbbcb9d0eddf1
Merge: 5bfe107 a61d85b
Author: bors <bors@rust-lang.org>
Date:   Sat Oct 15 15:38:52 2016 -0700

    Auto merge of #37152 - arielb1:drop-cache, r=pnkfelix
    
    add a per-param-env cache to `impls_bound`
    
    There used to be only a global cache, which led to uncached calls to
    trait selection when there were type parameters.
    
    This causes a 20% decrease in borrow-checking time and an overall 0.5% performance increase during bootstrapping (as borrow-checking tends to be a tiny part of compilation time).
    
    Fixes #37106 (drop elaboration times are now ~half of borrow checking,
    so might still be worthy of optimization, but not critical).
    
    r? @pnkfelix
rustc: ./rust-encoding-0.3.0
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling encoding v0.3.0-dev (file:///root/benchmarks/rust-encoding-0.3.0)
time: 0.026; rss: 45MB	parsing
Lines of code:             5757
Pre-expansion node count:  26615
time: 0.000; rss: 45MB	recursion limit
time: 0.000; rss: 45MB	crate injection
time: 0.000; rss: 45MB	plugin loading
time: 0.000; rss: 45MB	plugin registration
time: 0.042; rss: 70MB	expansion
time: 0.000; rss: 70MB	maybe building test harness
time: 0.000; rss: 70MB	maybe creating a macro crate
Post-expansion node count: 37904
time: 0.000; rss: 70MB	checking for inline asm in case the target doesn't support it
time: 0.001; rss: 70MB	complete gated feature checking
time: 0.001; rss: 70MB	early lint checks
time: 0.000; rss: 70MB	AST validation
time: 0.008; rss: 71MB	name resolution
time: 0.003; rss: 73MB	lowering ast -> hir
time: 0.001; rss: 73MB	indexing hir
time: 0.000; rss: 73MB	attribute checking
time: 0.000; rss: 72MB	language item collection
time: 0.001; rss: 72MB	lifetime resolution
time: 0.000; rss: 72MB	looking for entry point
time: 0.000; rss: 72MB	looking for plugin registrar
time: 0.004; rss: 73MB	region resolution
time: 0.000; rss: 73MB	loop checking
time: 0.000; rss: 73MB	static item recursion checking
time: 0.014; rss: 74MB	compute_incremental_hashes_map
time: 0.000; rss: 74MB	load_dep_graph
time: 0.008; rss: 75MB	type collecting
time: 0.000; rss: 75MB	variance inference
time: 0.019; rss: 76MB	coherence checking
time: 0.012; rss: 77MB	wf checking
time: 0.009; rss: 78MB	item-types checking
time: 0.145; rss: 83MB	item-bodies checking
time: 0.000; rss: 83MB	drop-impl checking
time: 0.013; rss: 83MB	const checking
time: 0.002; rss: 83MB	privacy checking
time: 0.000; rss: 83MB	stability index
time: 0.001; rss: 83MB	intrinsic checking
time: 0.000; rss: 83MB	effect checking
time: 0.006; rss: 83MB	match checking
time: 0.001; rss: 83MB	liveness checking
time: 0.006; rss: 83MB	rvalue checking
time: 0.030; rss: 91MB	MIR dump
  time: 0.002; rss: 92MB	SimplifyCfg
  time: 0.004; rss: 92MB	QualifyAndPromoteConstants
  time: 0.004; rss: 92MB	TypeckMir
  time: 0.000; rss: 92MB	SimplifyBranches
  time: 0.001; rss: 92MB	SimplifyCfg
time: 0.012; rss: 92MB	MIR passes
time: 0.020; rss: 92MB	borrow checking
time: 0.000; rss: 92MB	reachability checking
time: 0.001; rss: 92MB	death checking
time: 0.002; rss: 92MB	stability checking
time: 0.000; rss: 92MB	unused lib feature checking
time: 0.016; rss: 93MB	lint checking
time: 0.000; rss: 93MB	resolving dependency formats
  time: 0.000; rss: 93MB	NoLandingPads
  time: 0.001; rss: 93MB	SimplifyCfg
  time: 0.003; rss: 93MB	EraseRegions
  time: 0.000; rss: 93MB	AddCallGuards
  time: 0.026; rss: 93MB	ElaborateDrops
  time: 0.000; rss: 93MB	NoLandingPads
  time: 0.002; rss: 93MB	SimplifyCfg
  time: 0.001; rss: 93MB	InstCombine
  time: 0.001; rss: 93MB	Deaggregator
  time: 0.000; rss: 93MB	CopyPropagation
  time: 0.000; rss: 93MB	AddCallGuards
  time: 0.000; rss: 93MB	PreTrans
time: 0.035; rss: 93MB	Prepare MIR codegen passes
  time: 0.015; rss: 94MB	write metadata
  time: 0.363; rss: 199MB	translation item collection
  time: 0.003; rss: 200MB	codegen unit partitioning
  time: 0.003; rss: 222MB	internalize symbols
time: 0.707; rss: 215MB	translation
time: 0.000; rss: 213MB	assert dep graph
time: 0.000; rss: 213MB	serialize dep graph
  time: 0.026; rss: 107MB	llvm function passes [0]
  time: 0.056; rss: 112MB	llvm module passes [0]
  time: 0.619; rss: 119MB	codegen passes [0]
  time: 0.001; rss: 118MB	codegen passes [0]
time: 0.757; rss: 118MB	LLVM passes
time: 0.000; rss: 118MB	serialize work products
time: 0.077; rss: 90MB	linking
done
