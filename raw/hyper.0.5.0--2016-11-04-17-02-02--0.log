commit 81601cd3a393d1cb8ca82eb1b2270d24c5d7724f
Merge: ccfc38f f0e6b90
Author: bors <bors@rust-lang.org>
Date:   Fri Nov 4 10:40:30 2016 -0700

    Auto merge of #37306 - bluss:trusted-len, r=alexcrichton
    
    Add Iterator trait TrustedLen to enable better FromIterator / Extend
    
    This trait attempts to improve FromIterator / Extend code by enabling it to trust the iterator to produce an exact number of elements, which means that reallocation needs to happen only once and is moved out of the loop.
    
    `TrustedLen` differs from `ExactSizeIterator` in that it attempts to include _more_ iterators by allowing for the case that the iterator's len does not fit in `usize`. Consumers must check for this case (for example they could panic, since they can't allocate a collection of that size).
    
    For example, chain can be TrustedLen and all numerical ranges can be TrustedLen. All they need to do is to report an exact size if it fits in `usize`, and `None` as the upper bound otherwise.
    
    The trait describes its contract like this:
    
    ```
    An iterator that reports an accurate length using size_hint.
    
    The iterator reports a size hint where it is either exact
    (lower bound is equal to upper bound), or the upper bound is `None`.
    The upper bound must only be `None` if the actual iterator length is
    larger than `usize::MAX`.
    
    The iterator must produce exactly the number of elements it reported.
    
    This trait must only be implemented when the contract is upheld.
    Consumers of this trait must inspect `.size_hint()`â€™s upper bound.
    ```
    
    Fixes #37232
rustc: ./hyper.0.5.0
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling pkg-config v0.3.8
   Compiling log v0.3.6
   Compiling libc v0.1.12
   Compiling typeable v0.1.2
   Compiling matches v0.1.2
   Compiling bitflags v0.3.3
   Compiling httparse v0.1.6
   Compiling traitobject v0.0.1
   Compiling gcc v0.3.35
   Compiling unicase v0.1.0
   Compiling winapi-build v0.1.1
   Compiling lazy_static v0.1.16
   Compiling rustc-serialize v0.3.19
   Compiling winapi v0.2.8
   Compiling kernel32-sys v0.2.2
   Compiling mime v0.0.11
   Compiling libc v0.2.16
   Compiling rand v0.3.14
   Compiling time v0.1.35
   Compiling num_cpus v0.2.13
   Compiling openssl-sys v0.6.7
   Compiling openssl v0.6.7
   Compiling uuid v0.1.18
   Compiling url v0.2.38
   Compiling cookie v0.1.21
   Compiling hyper v0.5.0 (file:///root/benchmarks/hyper.0.5.0)
time: 0.027; rss: 49MB	parsing
Lines of code:             9003
Pre-expansion node count:  44129
time: 0.000; rss: 49MB	recursion limit
time: 0.000; rss: 49MB	crate injection
time: 0.000; rss: 49MB	plugin loading
time: 0.000; rss: 49MB	plugin registration
time: 0.091; rss: 87MB	expansion
time: 0.000; rss: 87MB	maybe building test harness
time: 0.001; rss: 87MB	maybe creating a macro crate
Post-expansion node count: 101823
time: 0.000; rss: 87MB	checking for inline asm in case the target doesn't support it
time: 0.002; rss: 87MB	complete gated feature checking
time: 0.003; rss: 87MB	early lint checks
time: 0.001; rss: 87MB	AST validation
time: 0.016; rss: 91MB	name resolution
time: 0.007; rss: 95MB	lowering ast -> hir
time: 0.001; rss: 97MB	indexing hir
time: 0.001; rss: 97MB	attribute checking
time: 0.001; rss: 91MB	language item collection
time: 0.001; rss: 91MB	lifetime resolution
time: 0.000; rss: 91MB	looking for entry point
time: 0.000; rss: 91MB	looking for plugin registrar
time: 0.005; rss: 96MB	region resolution
time: 0.001; rss: 96MB	loop checking
time: 0.000; rss: 96MB	static item recursion checking
time: 0.055; rss: 95MB	compute_incremental_hashes_map
time: 0.000; rss: 95MB	load_dep_graph
time: 0.014; rss: 98MB	type collecting
time: 0.000; rss: 98MB	variance inference
time: 0.028; rss: 102MB	coherence checking
time: 0.043; rss: 103MB	wf checking
time: 0.025; rss: 103MB	item-types checking
time: 0.322; rss: 115MB	item-bodies checking
time: 0.000; rss: 115MB	drop-impl checking
time: 0.030; rss: 114MB	const checking
time: 0.007; rss: 114MB	privacy checking
time: 0.001; rss: 114MB	stability index
time: 0.003; rss: 114MB	intrinsic checking
time: 0.001; rss: 114MB	effect checking
time: 0.008; rss: 114MB	match checking
time: 0.004; rss: 114MB	liveness checking
time: 0.021; rss: 114MB	rvalue checking
time: 0.049; rss: 132MB	MIR dump
  time: 0.006; rss: 132MB	SimplifyCfg
  time: 0.011; rss: 132MB	QualifyAndPromoteConstants
  time: 0.013; rss: 132MB	TypeckMir
  time: 0.001; rss: 132MB	SimplifyBranches
  time: 0.004; rss: 132MB	SimplifyCfg
time: 0.035; rss: 132MB	MIR cleanup and validation
time: 0.055; rss: 132MB	borrow checking
time: 0.003; rss: 132MB	reachability checking
time: 0.005; rss: 132MB	death checking
time: 0.005; rss: 132MB	stability checking
time: 0.000; rss: 132MB	unused lib feature checking
time: 0.039; rss: 134MB	lint checking
time: 0.000; rss: 134MB	resolving dependency formats
  time: 0.001; rss: 134MB	NoLandingPads
  time: 0.003; rss: 134MB	SimplifyCfg
  time: 0.009; rss: 134MB	EraseRegions
  time: 0.001; rss: 134MB	AddCallGuards
  time: 0.022; rss: 136MB	ElaborateDrops
  time: 0.001; rss: 136MB	NoLandingPads
  time: 0.005; rss: 136MB	SimplifyCfg
  time: 0.003; rss: 136MB	InstCombine
  time: 0.003; rss: 136MB	Deaggregator
  time: 0.001; rss: 136MB	CopyPropagation
  time: 0.004; rss: 136MB	SimplifyLocals
  time: 0.001; rss: 136MB	AddCallGuards
  time: 0.000; rss: 136MB	PreTrans
time: 0.053; rss: 136MB	MIR optimisations
  time: 0.011; rss: 138MB	write metadata
  time: 0.129; rss: 144MB	translation item collection
  time: 0.015; rss: 149MB	codegen unit partitioning
  time: 0.013; rss: 204MB	internalize symbols
time: 1.015; rss: 204MB	translation
time: 0.000; rss: 204MB	assert dep graph
time: 0.000; rss: 204MB	serialize dep graph
  time: 0.089; rss: 149MB	llvm function passes [0]
  time: 0.042; rss: 148MB	llvm module passes [0]
  time: 1.674; rss: 151MB	codegen passes [0]
  time: 0.000; rss: 151MB	codegen passes [0]
time: 1.948; rss: 151MB	LLVM passes
time: 0.000; rss: 151MB	serialize work products
time: 0.069; rss: 94MB	linking
done
