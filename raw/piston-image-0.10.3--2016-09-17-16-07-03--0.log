commit fb62f4d544c954d355716dca8beb55726036721e
Merge: cde61ba af1a3ff
Author: bors <bors@rust-lang.org>
Date:   Sat Sep 17 08:23:44 2016 -0700

    Auto merge of #36490 - bluss:zip-slightly-despecialized-edition, r=alexcrichton
    
    Remove data structure specialization for .zip() iterator
    
    Go back on half the specialization, the part that changed the Zip
    struct's fields themselves depending on the types of the iterators.
    
    Previous PR: #33090
    
    This means that the Zip iterator will always carry two usize fields,
    which are sometimes unused. If a whole for loop using a .zip() iterator is
    inlined, these are simply removed and have no effect.
    
    The same improvement for Zip of for example slice iterators remain, and
    they still optimize well. However, like when the specialization of zip
    was merged, the compiler is still very sensistive to the exact context.
    
    For example this code only autovectorizes if the function is used, not
    if the code in zip_sum_i32 is inserted inline where it was called:
    
    ```rust
    fn zip_sum_i32(xs: &[i32], ys: &[i32]) -> i32 {
        let mut s = 0;
        for (&x, &y) in xs.iter().zip(ys) {
            s += x * y;
        }
        s
    }
    
    fn zipdot_i32_default_zip(b: &mut test::Bencher)
    {
        let xs = vec![1; 1024];
        let ys = vec![1; 1024];
    
        b.iter(|| {
            zip_sum_i32(&xs, &ys)
        })
    }
    ```
    
    Include a test that checks that `Zip<T, U>` is covariant w.r.t. T and U.
    
    Fixes #35727
rustc: ./piston-image-0.10.3
cargo rustc -- -Ztime-passes -Zinput-stats
    Updating registry `https://github.com/rust-lang/crates.io-index`
   Compiling lzw v0.10.0
   Compiling color_quant v1.0.0
   Compiling byteorder v0.5.3
   Compiling glob v0.2.11
   Compiling scoped_threadpool v0.1.7
   Compiling rustc-serialize v0.3.19
   Compiling gcc v0.3.35
   Compiling bitflags v0.7.0
   Compiling inflate v0.1.1
   Compiling num-traits v0.1.35
   Compiling libc v0.2.16
   Compiling gif v0.9.0
   Compiling miniz-sys v0.1.7
   Compiling num_cpus v0.2.13
   Compiling rand v0.3.14
   Compiling flate2 v0.2.14
   Compiling num-integer v0.1.32
   Compiling num-iter v0.1.32
   Compiling deque v0.3.1
   Compiling num v0.1.35
   Compiling enum_primitive v0.1.0
   Compiling rayon v0.4.2
   Compiling png v0.5.2
   Compiling jpeg-decoder v0.1.6
   Compiling num-bigint v0.1.35
   Compiling num-rational v0.1.35
   Compiling image v0.10.3 (file:///root/benchmarks/piston-image-0.10.3)
time: 0.046; rss: 58MB	parsing
Lines of code:             12000
Pre-expansion node count:  90272
time: 0.000; rss: 58MB	recursion limit
time: 0.000; rss: 58MB	crate injection
time: 0.000; rss: 58MB	plugin loading
time: 0.000; rss: 58MB	plugin registration
time: 0.067; rss: 88MB	expansion
time: 0.000; rss: 88MB	maybe building test harness
time: 0.002; rss: 88MB	maybe creating a macro crate
time: 0.007; rss: 88MB	assigning node ids
Post-expansion node count: 149551
time: 0.000; rss: 88MB	checking for inline asm in case the target doesn't support it
time: 0.003; rss: 88MB	complete gated feature checking
time: 0.004; rss: 88MB	collecting defs
time: 0.011; rss: 96MB	external crate/lib resolution
time: 0.006; rss: 96MB	early lint checks
time: 0.002; rss: 96MB	AST validation
time: 0.022; rss: 101MB	name resolution
time: 0.014; rss: 111MB	lowering ast -> hir
time: 0.003; rss: 116MB	indexing hir
time: 0.002; rss: 116MB	attribute checking
time: 0.002; rss: 106MB	language item collection
time: 0.003; rss: 106MB	lifetime resolution
time: 0.000; rss: 106MB	looking for entry point
time: 0.000; rss: 106MB	looking for plugin registrar
time: 0.011; rss: 111MB	region resolution
time: 0.002; rss: 111MB	loop checking
time: 0.001; rss: 111MB	static item recursion checking
time: 0.058; rss: 111MB	compute_incremental_hashes_map
time: 0.000; rss: 111MB	load_dep_graph
time: 0.024; rss: 113MB	type collecting
time: 0.000; rss: 113MB	variance inference
time: 0.032; rss: 116MB	coherence checking
time: 0.098; rss: 117MB	wf checking
time: 0.218; rss: 125MB	item-types checking
time: 0.942; rss: 137MB	item-bodies checking
time: 0.000; rss: 137MB	drop-impl checking
time: 0.072; rss: 137MB	const checking
time: 0.011; rss: 137MB	privacy checking
time: 0.001; rss: 137MB	stability index
time: 0.010; rss: 137MB	intrinsic checking
time: 0.003; rss: 137MB	effect checking
time: 0.025; rss: 137MB	match checking
time: 0.011; rss: 137MB	liveness checking
time: 0.068; rss: 137MB	rvalue checking
time: 0.113; rss: 180MB	MIR dump
  time: 0.012; rss: 180MB	SimplifyCfg
  time: 0.025; rss: 180MB	QualifyAndPromoteConstants
  time: 0.028; rss: 180MB	TypeckMir
  time: 0.001; rss: 180MB	SimplifyBranches
  time: 0.007; rss: 180MB	SimplifyCfg
time: 0.073; rss: 180MB	MIR passes
time: 0.143; rss: 180MB	borrow checking
time: 0.004; rss: 180MB	reachability checking
time: 0.008; rss: 180MB	death checking
time: 0.010; rss: 180MB	stability checking
time: 0.000; rss: 180MB	unused lib feature checking
time: 0.074; rss: 180MB	lint checking
time: 0.000; rss: 180MB	resolving dependency formats
  time: 0.001; rss: 180MB	NoLandingPads
  time: 0.005; rss: 180MB	SimplifyCfg
  time: 0.013; rss: 184MB	EraseRegions
  time: 0.002; rss: 184MB	AddCallGuards
  time: 0.134; rss: 186MB	ElaborateDrops
  time: 0.001; rss: 186MB	NoLandingPads
  time: 0.009; rss: 186MB	SimplifyCfg
  time: 0.002; rss: 186MB	Deaggregator
  time: 0.002; rss: 186MB	AddCallGuards
  time: 0.000; rss: 186MB	PreTrans
time: 0.168; rss: 186MB	Prepare MIR codegen passes
  time: 0.082; rss: 188MB	write metadata
  time: 0.532; rss: 199MB	translation item collection
  time: 0.030; rss: 203MB	codegen unit partitioning
  time: 0.052; rss: 327MB	internalize symbols
time: 3.477; rss: 301MB	translation
time: 0.000; rss: 301MB	assert dep graph
time: 0.000; rss: 301MB	serialize dep graph
  time: 0.201; rss: 227MB	llvm function passes [0]
  time: 0.082; rss: 230MB	llvm module passes [0]
  time: 4.017; rss: 233MB	codegen passes [0]
  time: 0.001; rss: 234MB	codegen passes [0]
time: 4.595; rss: 234MB	LLVM passes
time: 0.000; rss: 234MB	serialize work products
time: 0.254; rss: 105MB	linking
done
