commit 1c11ea3aedebac562f5125e1cf22ac56a3a8993c
Merge: 82d8833 fa8c53b
Author: bors <bors@rust-lang.org>
Date:   Mon Nov 21 21:15:48 2016 -0600

    Auto merge of #37602 - jseyfried:directory_ownership, r=nikomatsakis
    
    parser: simplify directory ownership semantics
    
    This PR simplifies the semantics of "directory ownership". After this PR,
     - a non-inline module without a `#[path]` attribute (e.g. `mod foo;`) is allowed iff its parent module/block (whichever is nearer) is a directory owner,
     - an non-inline module is a directory owner iff its corresponding file is named `mod.rs` (c.f. [comment](https://github.com/rust-lang/rust/issues/32401#issuecomment-201021902)),
     - a block is never a directory owner (c.f. #31534), and
     - an inline module is a directory owner iff either
       - its parent module/block is a directory owner (again, c.f. #31534), or
       - it has a `#[path]` attribute (c.f. #36789).
    
    These semantics differ from today's in three orthogonal ways:
     - `#[path = "foo.rs"] mod foo;` is no longer a directory owner. This is a [breaking-change].
     - #36789 is generalized to apply to modules that are not directory owners in addition to blocks.
     - A macro-expanded non-inline module is only allowed where an ordinary non-inline module would be allowed. Today, we incorrectly allow macro-expanded non-inline modules in modules that are not directory owners (but not in blocks). This is a [breaking-change].
    
    Fixes #32401.
    r? @nikomatsakis
rustc: ./syntex-0.42.2
cargo rustc -p syntex_syntax  -- -Ztime-passes -Zinput-stats
   Compiling syntex_syntax v0.42.0
time: 0.090; rss: 71MB	parsing
Lines of code:             33687
Pre-expansion node count:  223115
time: 0.000; rss: 71MB	recursion limit
time: 0.000; rss: 71MB	crate injection
time: 0.000; rss: 71MB	plugin loading
time: 0.000; rss: 71MB	plugin registration
time: 0.236; rss: 146MB	expansion
time: 0.000; rss: 146MB	maybe building test harness
time: 0.006; rss: 146MB	maybe creating a macro crate
Post-expansion node count: 638863
time: 0.000; rss: 146MB	checking for inline asm in case the target doesn't support it
time: 0.012; rss: 146MB	complete gated feature checking
time: 0.022; rss: 146MB	early lint checks
time: 0.007; rss: 146MB	AST validation
time: 0.076; rss: 161MB	name resolution
time: 0.044; rss: 184MB	lowering ast -> hir
time: 0.008; rss: 194MB	indexing hir
time: 0.006; rss: 194MB	attribute checking
time: 0.004; rss: 149MB	language item collection
time: 0.011; rss: 149MB	lifetime resolution
time: 0.000; rss: 149MB	looking for entry point
time: 0.000; rss: 149MB	looking for plugin registrar
time: 0.042; rss: 169MB	region resolution
time: 0.005; rss: 169MB	loop checking
time: 0.004; rss: 169MB	static item recursion checking
time: 0.328; rss: 169MB	compute_incremental_hashes_map
time: 0.000; rss: 169MB	load_dep_graph
time: 0.047; rss: 168MB	type collecting
time: 0.001; rss: 168MB	variance inference
time: 0.002; rss: 168MB	impl wf inference
time: 0.018; rss: 171MB	coherence checking
time: 0.087; rss: 175MB	wf checking
time: 0.179; rss: 180MB	item-types checking
time: 6.202; rss: 231MB	item-bodies checking
time: 0.000; rss: 231MB	drop-impl checking
time: 0.214; rss: 252MB	const checking
time: 0.049; rss: 252MB	privacy checking
time: 0.006; rss: 252MB	stability index
time: 0.018; rss: 252MB	intrinsic checking
time: 0.014; rss: 252MB	effect checking
time: 0.047; rss: 252MB	match checking
time: 0.050; rss: 247MB	liveness checking
time: 0.176; rss: 247MB	rvalue checking
time: 0.358; rss: 437MB	MIR dump
  time: 0.056; rss: 438MB	SimplifyCfg
  time: 0.073; rss: 438MB	QualifyAndPromoteConstants
  time: 0.102; rss: 438MB	TypeckMir
  time: 0.004; rss: 438MB	SimplifyBranches
  time: 0.030; rss: 438MB	SimplifyCfg
time: 0.265; rss: 438MB	MIR cleanup and validation
time: 0.543; rss: 438MB	borrow checking
time: 0.025; rss: 438MB	reachability checking
time: 0.039; rss: 438MB	death checking
time: 0.031; rss: 440MB	stability checking
time: 0.000; rss: 440MB	unused lib feature checking
time: 0.193; rss: 440MB	lint checking
time: 0.000; rss: 440MB	resolving dependency formats
  time: 0.003; rss: 440MB	NoLandingPads
  time: 0.026; rss: 440MB	SimplifyCfg
  time: 0.061; rss: 449MB	EraseRegions
  time: 0.010; rss: 449MB	AddCallGuards
  time: 0.267; rss: 465MB	ElaborateDrops
  time: 0.003; rss: 465MB	NoLandingPads
  time: 0.051; rss: 465MB	SimplifyCfg
  time: 0.028; rss: 465MB	InstCombine
  time: 0.012; rss: 465MB	Deaggregator
  time: 0.002; rss: 465MB	CopyPropagation
  time: 0.033; rss: 465MB	SimplifyLocals
  time: 0.009; rss: 465MB	AddCallGuards
  time: 0.002; rss: 465MB	PreTrans
time: 0.509; rss: 465MB	MIR optimisations
  time: 0.061; rss: 474MB	write metadata
  time: 0.372; rss: 486MB	translation item collection
  time: 0.057; rss: 498MB	codegen unit partitioning
  time: 0.040; rss: 739MB	internalize symbols
time: 4.459; rss: 739MB	translation
time: 0.000; rss: 739MB	assert dep graph
time: 0.000; rss: 739MB	serialize dep graph
  time: 0.523; rss: 427MB	llvm function passes [0]
  time: 0.257; rss: 432MB	llvm module passes [0]
  time: 10.420; rss: 428MB	codegen passes [0]
  time: 0.000; rss: 428MB	codegen passes [0]
time: 11.961; rss: 428MB	LLVM passes
time: 0.000; rss: 428MB	serialize work products
time: 0.338; rss: 115MB	linking
done
