commit dc8212ff200dc54113a87b3a7033879133fdfff0
Merge: c4788c2 bbff336
Author: bors <bors@rust-lang.org>
Date:   Sat Jul 16 01:19:16 2016 -0700

    Auto merge of #34779 - infinity0:master, r=alexcrichton
    
    If local-rust is the same as the current version, then force a local-rebuild
    
    In Debian, we would like the option to build/rebuild the current release from
    *either* the current or previous stable release. So we use enable-local-rust
    instead of enable-local-rebuild, and read the bootstrap key dynamically from
    whatever is installed locally.
    
    In general, it does not make much sense to allow enable-local-rust without also
    setting the bootstrap key, since the build would fail otherwise.
    
    (The way I detect "the bootstrap key of [the local] rustc installation" is a bit hacky, suggestions welcome.)
rustc: ./inflate-0.1.0
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling inflate v0.1.0 (file:///root/benchmarks/inflate-0.1.0)
time: 0.004; rss: 83MB	parsing
Lines of code:             956
Pre-expansion node count:  4738
time: 0.001; rss: 87MB	configuration
time: 0.000; rss: 87MB	recursion limit
time: 0.000; rss: 87MB	crate injection
time: 0.000; rss: 87MB	plugin loading
time: 0.000; rss: 87MB	plugin registration
time: 0.093; rss: 126MB	expansion
time: 0.000; rss: 126MB	maybe building test harness
time: 0.004; rss: 126MB	assigning node ids
Post-expansion node count: 55769
time: 0.000; rss: 126MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 126MB	complete gated feature checking
time: 0.005; rss: 126MB	collecting defs
time: 0.001; rss: 126MB	external crate/lib resolution
time: 0.003; rss: 126MB	early lint checks
time: 0.000; rss: 126MB	AST validation
time: 0.010; rss: 128MB	name resolution
time: 0.006; rss: 132MB	lowering ast -> hir
time: 0.001; rss: 134MB	indexing hir
time: 0.001; rss: 134MB	attribute checking
time: 0.001; rss: 132MB	language item collection
time: 0.001; rss: 132MB	lifetime resolution
time: 0.000; rss: 132MB	looking for entry point
time: 0.000; rss: 132MB	looking for plugin registrar
time: 0.003; rss: 132MB	region resolution
time: 0.000; rss: 132MB	loop checking
time: 0.000; rss: 132MB	static item recursion checking
time: 0.000; rss: 132MB	load_dep_graph
time: 0.002; rss: 134MB	type collecting
time: 0.000; rss: 134MB	variance inference
time: 0.010; rss: 136MB	coherence checking
time: 0.002; rss: 136MB	wf checking
time: 0.002; rss: 136MB	item-types checking
time: 3.607; rss: 152MB	item-bodies checking
time: 0.000; rss: 152MB	drop-impl checking
time: 0.015; rss: 153MB	const checking
time: 0.001; rss: 153MB	privacy checking
time: 0.000; rss: 153MB	stability index
time: 0.001; rss: 153MB	intrinsic checking
time: 0.001; rss: 153MB	effect checking
time: 0.005; rss: 153MB	match checking
time: 0.071; rss: 151MB	liveness checking
time: 0.011; rss: 151MB	rvalue checking
time: 0.038; rss: 166MB	MIR dump
time: 0.023; rss: 164MB	MIR passes
time: 0.230; rss: 164MB	borrow checking
time: 0.000; rss: 164MB	reachability checking
time: 0.003; rss: 164MB	death checking
time: 0.002; rss: 164MB	stability checking
time: 0.000; rss: 164MB	unused lib feature checking
time: 0.021; rss: 164MB	lint checking
time: 0.000; rss: 164MB	resolving dependency formats
time: 0.126; rss: 162MB	Prepare MIR codegen passes
  time: 0.003; rss: 163MB	write metadata
  time: 0.010; rss: 165MB	translation item collection
  time: 0.001; rss: 165MB	codegen unit partitioning
time: 0.833; rss: 179MB	translation
time: 0.000; rss: 179MB	assert dep graph
time: 0.000; rss: 179MB	serialize dep graph
  time: 0.297; rss: 147MB	llvm function passes [0]
  time: 0.075; rss: 147MB	llvm module passes [0]
  time: 4.616; rss: 152MB	codegen passes [0]
  time: 0.001; rss: 152MB	codegen passes [0]
time: 5.229; rss: 151MB	LLVM passes
time: 0.035; rss: 139MB	linking
done
