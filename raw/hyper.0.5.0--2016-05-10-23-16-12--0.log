commit 6dbb0e86aec11050480beb76eade6fb805010ba7
Merge: 04308ce fef8276
Author: bors <bors@rust-lang.org>
Date:   Tue May 10 14:36:46 2016 -0700

    Auto merge of #33319 - birkenfeld:issue31424, r=jseyfried
    
    borrowck: do not suggest to change "&mut self" to "&mut mut self"
    
    Matching the snippet string might not be the cleanest, but matching
    the AST node instead seems to end in a lot of nested `if let`s, so I
    don't know what's better.
    
    Of course it's entirely possible that there is another API altogether
    that I just don't know of?
    
    Fixes #31424.
rustc: ./hyper.0.5.0
cargo rustc -- -Ztime-passes -Zinput-stats
    Updating registry `https://github.com/rust-lang/crates.io-index`
   Compiling matches v0.1.2
   Compiling traitobject v0.0.1
   Compiling log v0.3.6
   Compiling pkg-config v0.3.8
   Compiling lazy_static v0.1.16
   Compiling winapi v0.2.7
   Compiling typeable v0.1.2
   Compiling libc v0.2.11
   Compiling httparse v0.1.6
   Compiling bitflags v0.3.3
   Compiling libc v0.1.12
   Compiling unicase v0.1.0
   Compiling rustc-serialize v0.3.19
   Compiling winapi-build v0.1.1
   Compiling mime v0.0.11
   Compiling gcc v0.3.28
   Compiling kernel32-sys v0.2.2
   Compiling rand v0.3.14
   Compiling num_cpus v0.2.11
   Compiling time v0.1.35
   Compiling openssl-sys v0.6.7
   Compiling openssl v0.6.7
   Compiling uuid v0.1.18
   Compiling url v0.2.38
   Compiling cookie v0.1.21
   Compiling hyper v0.5.0 (file:///root/benchmarks/hyper.0.5.0)
time: 0.032; rss: 53MB	parsing
Lines of code:             9154
Pre-expansion node count:  45594
time: 0.008; rss: 57MB	configuration 1
time: 0.000; rss: 57MB	recursion limit
time: 0.000; rss: 57MB	crate injection
time: 0.005; rss: 62MB	macro loading
time: 0.000; rss: 62MB	plugin loading
time: 0.000; rss: 62MB	plugin registration
time: 0.194; rss: 71MB	expansion
time: 0.030; rss: 71MB	configuration 2
time: 0.000; rss: 71MB	gated configuration checking
time: 0.011; rss: 71MB	maybe building test harness
time: 0.008; rss: 71MB	prelude injection
time: 0.001; rss: 71MB	checking that all macro invocations are gone
time: 0.000; rss: 71MB	checking for inline asm in case the target doesn't support it
time: 0.002; rss: 71MB	complete gated feature checking
Post-expansion node count: 107141
time: 0.008; rss: 71MB	assigning node ids
time: 0.003; rss: 73MB	collecting defs
time: 0.005; rss: 76MB	external crate/lib resolution
time: 0.006; rss: 76MB	early lint checks
time: 0.026; rss: 97MB	name resolution
time: 0.010; rss: 101MB	lowering ast -> hir
time: 0.001; rss: 102MB	indexing hir
time: 0.001; rss: 102MB	attribute checking
time: 0.001; rss: 93MB	language item collection
time: 0.002; rss: 93MB	lifetime resolution
time: 0.000; rss: 93MB	looking for entry point
time: 0.000; rss: 93MB	looking for plugin registrar
time: 0.006; rss: 97MB	region resolution
time: 0.001; rss: 97MB	loop checking
time: 0.001; rss: 97MB	static item recursion checking
time: 0.000; rss: 97MB	load_dep_graph
time: 0.018; rss: 107MB	type collecting
time: 0.000; rss: 107MB	variance inference
time: 0.042; rss: 123MB	coherence checking
time: 0.077; rss: 123MB	wf checking
time: 0.028; rss: 123MB	item-types checking
time: 0.463; rss: 146MB	item-bodies checking
time: 0.000; rss: 146MB	drop-impl checking
time: 0.035; rss: 148MB	const checking
time: 0.007; rss: 148MB	privacy checking
time: 0.001; rss: 148MB	stability index
time: 0.004; rss: 148MB	intrinsic checking
time: 0.002; rss: 148MB	effect checking
time: 0.012; rss: 148MB	match checking
time: 0.005; rss: 148MB	liveness checking
time: 0.024; rss: 148MB	rvalue checking
time: 0.053; rss: 156MB	MIR dump
time: 0.036; rss: 156MB	MIR passes
time: 0.063; rss: 156MB	borrow checking
time: 0.003; rss: 156MB	reachability checking
time: 0.006; rss: 156MB	death checking
time: 0.006; rss: 156MB	stability checking
time: 0.000; rss: 156MB	unused lib feature checking
time: 0.048; rss: 156MB	lint checking
time: 0.000; rss: 156MB	resolving dependency formats
time: 0.011; rss: 158MB	Prepare MIR codegen passes
  time: 0.175; rss: 170MB	translation item collection
  time: 0.009; rss: 170MB	codegen unit partitioning
  time: 0.136; rss: 296MB	write metadata
time: 1.475; rss: 296MB	translation
time: 0.001; rss: 296MB	assert dep graph
time: 0.000; rss: 296MB	serialize dep graph
  time: 0.096; rss: 174MB	llvm function passes [0]
  time: 0.046; rss: 174MB	llvm module passes [0]
  time: 1.625; rss: 177MB	codegen passes [0]
  time: 0.001; rss: 129MB	codegen passes [0]
time: 1.965; rss: 128MB	LLVM passes
time: 0.178; rss: 126MB	linking
done
