commit 1ec22171e6053c640293067418ea1901cb1c7df1
Merge: d91f8ab 3b0e27c
Author: bors <bors@rust-lang.org>
Date:   Sun May 8 00:31:40 2016 -0700

    Auto merge of #33130 - eddyb:mir-const, r=nikomatsakis
    
    Implement constant support in MIR.
    
    All of the intended features in `trans::consts` are now supported by `mir::constant`.
    The implementation is considered a temporary measure until `miri` replaces it.
    
    A `-Z orbit` bootstrap build will only translate LLVM IR from AST for `#[rustc_no_mir]` functions.
    
    Furthermore, almost all checks of constant expressions have been moved to MIR.
    In non-`const` functions, trees of temporaries are promoted, as per RFC 1414 (rvalue promotion).
    Promotion before MIR borrowck would allow reasoning about promoted values' lifetimes.
    
    The improved checking comes at the cost of four `[breaking-change]`s:
    * repeat counts must contain a constant expression, e.g.:
    `let arr = [0; { println!("foo"); 5 }];` used to be allowed (it behaved like `let arr = [0; 5];`)
    * dereference of a reference to a `static` cannot be used in another `static`, e.g.:
    `static X: [u8; 1] = [1]; static Y: u8 = (&X)[0];` was unintentionally allowed before
    * the type of a `static` *must* be `Sync`, irrespective of the initializer, e.g.
    `static FOO: *const T = &BAR;` worked as `&T` is `Sync`, but it shouldn't because `*const T` isn't
    * a `static` cannot wrap `UnsafeCell` around a type that *may* need drop, e.g.
    `static X: MakeSync<UnsafeCell<Option<String>>> = MakeSync(UnsafeCell::new(None));`
    was previously allowed based on the fact `None` alone doesn't need drop, but in `UnsafeCell`
    it can be later changed to `Some(String)` which *does* need dropping
    
    The drop restrictions are relaxed by RFC 1440 (#33156), which is implemented, but feature-gated.
    However, creating `UnsafeCell` from constants is unstable, so users can just enable the feature gate.
rustc: ./inflate-0.1.0
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling inflate v0.1.0 (file:///root/benchmarks/inflate-0.1.0)
time: 0.008; rss: 43MB	parsing
Lines of code:             956
Pre-expansion node count:  4761
time: 0.001; rss: 43MB	configuration 1
time: 0.000; rss: 43MB	recursion limit
time: 0.000; rss: 43MB	crate injection
time: 0.003; rss: 46MB	macro loading
time: 0.000; rss: 46MB	plugin loading
time: 0.000; rss: 46MB	plugin registration
time: 0.092; rss: 54MB	expansion
time: 0.009; rss: 54MB	configuration 2
time: 0.000; rss: 54MB	gated configuration checking
time: 0.004; rss: 54MB	maybe building test harness
time: 0.004; rss: 54MB	prelude injection
time: 0.000; rss: 54MB	checking that all macro invocations are gone
time: 0.000; rss: 54MB	checking for inline asm in case the target doesn't support it
time: 0.001; rss: 54MB	complete gated feature checking
Post-expansion node count: 54797
time: 0.004; rss: 54MB	assigning node ids
time: 0.008; rss: 55MB	collecting defs
time: 0.001; rss: 55MB	external crate/lib resolution
time: 0.015; rss: 60MB	lowering ast -> hir
time: 0.001; rss: 61MB	indexing hir
time: 0.000; rss: 61MB	attribute checking
time: 0.004; rss: 61MB	early lint checks
time: 0.001; rss: 57MB	language item collection
time: 0.013; rss: 67MB	name resolution
time: 0.001; rss: 67MB	lifetime resolution
time: 0.000; rss: 67MB	looking for entry point
time: 0.000; rss: 67MB	looking for plugin registrar
time: 0.004; rss: 68MB	region resolution
time: 0.000; rss: 68MB	loop checking
time: 0.000; rss: 68MB	static item recursion checking
time: 0.000; rss: 68MB	load_dep_graph
time: 0.001; rss: 68MB	type collecting
time: 0.000; rss: 68MB	variance inference
time: 0.010; rss: 82MB	coherence checking
time: 0.002; rss: 82MB	wf checking
time: 0.002; rss: 82MB	item-types checking
time: 2.874; rss: 105MB	item-bodies checking
time: 0.000; rss: 105MB	drop-impl checking
time: 0.015; rss: 106MB	const checking
time: 0.003; rss: 106MB	privacy checking
time: 0.000; rss: 106MB	stability index
time: 0.001; rss: 106MB	intrinsic checking
time: 0.001; rss: 106MB	effect checking
time: 0.004; rss: 106MB	match checking
time: 0.313; rss: 105MB	liveness checking
time: 0.009; rss: 105MB	rvalue checking
time: 0.035; rss: 117MB	MIR dump
time: 0.015; rss: 113MB	MIR passes
time: 0.210; rss: 116MB	borrow checking
time: 0.000; rss: 116MB	reachability checking
time: 0.004; rss: 116MB	death checking
time: 0.003; rss: 116MB	stability checking
time: 0.000; rss: 116MB	unused lib feature checking
time: 0.021; rss: 118MB	lint checking
time: 0.000; rss: 118MB	resolving dependency formats
time: 0.005; rss: 118MB	Prepare MIR codegen passes
  time: 0.010; rss: 123MB	translation item collection
  time: 0.001; rss: 123MB	codegen unit partitioning
  time: 0.003; rss: 139MB	write metadata
time: 0.362; rss: 132MB	translation
time: 0.000; rss: 132MB	assert dep graph
time: 0.000; rss: 132MB	serialize dep graph
  time: 0.027; rss: 99MB	llvm function passes [0]
  time: 0.005; rss: 99MB	llvm module passes [0]
  time: 0.508; rss: 104MB	codegen passes [0]
  time: 0.000; rss: 94MB	codegen passes [0]
time: 0.581; rss: 94MB	LLVM passes
time: 0.034; rss: 93MB	linking
done
