commit 7660bdf70ae0c6a434dd12cfdeb8250ce77c69c7
Merge: c717cfa aaf32aa
Author: bors <bors@rust-lang.org>
Date:   Thu Sep 29 20:25:45 2016 -0700

    Auto merge of #36557 - sfackler:fix-hashdos-docs, r=alexcrichton
    
    Clean up hasher discussion on HashMap
    
    * We never want to make guarantees about protecting against attacks.
    * "True randomness" is not the right terminology to be using in this
        context.
    * There is significantly more nuance to the performance of SipHash than
        "somewhat slow".
    
    r? @steveklabnik
    
    Follow up to discussion on #35371
rustc: ./regex.0.1.30
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling regex v0.1.30 (file:///root/benchmarks/regex.0.1.30)
time: 0.049; rss: 55MB	parsing
Lines of code:             8558
Pre-expansion node count:  58080
time: 0.000; rss: 55MB	recursion limit
time: 0.000; rss: 55MB	crate injection
time: 0.000; rss: 55MB	plugin loading
time: 0.000; rss: 55MB	plugin registration
time: 0.034; rss: 78MB	expansion
time: 0.000; rss: 78MB	maybe building test harness
time: 0.001; rss: 78MB	maybe creating a macro crate
Post-expansion node count: 68134
time: 0.000; rss: 78MB	checking for inline asm in case the target doesn't support it
time: 0.001; rss: 78MB	complete gated feature checking
time: 0.004; rss: 78MB	early lint checks
time: 0.001; rss: 78MB	AST validation
time: 0.006; rss: 79MB	name resolution
time: 0.008; rss: 89MB	lowering ast -> hir
time: 0.002; rss: 91MB	indexing hir
time: 0.001; rss: 91MB	attribute checking
time: 0.001; rss: 83MB	language item collection
time: 0.001; rss: 83MB	lifetime resolution
time: 0.000; rss: 83MB	looking for entry point
time: 0.000; rss: 83MB	looking for plugin registrar
time: 0.006; rss: 85MB	region resolution
time: 0.001; rss: 85MB	loop checking
time: 0.001; rss: 85MB	static item recursion checking
time: 0.021; rss: 86MB	compute_incremental_hashes_map
time: 0.000; rss: 86MB	load_dep_graph
time: 0.008; rss: 87MB	type collecting
time: 0.000; rss: 87MB	variance inference
time: 0.020; rss: 88MB	coherence checking
time: 0.008; rss: 88MB	wf checking
time: 0.181; rss: 101MB	item-types checking
time: 0.137; rss: 104MB	item-bodies checking
time: 0.000; rss: 104MB	drop-impl checking
time: 0.026; rss: 104MB	const checking
time: 0.003; rss: 104MB	privacy checking
time: 0.001; rss: 104MB	stability index
time: 0.001; rss: 104MB	intrinsic checking
time: 0.001; rss: 104MB	effect checking
time: 0.003; rss: 104MB	match checking
time: 0.002; rss: 104MB	liveness checking
time: 0.008; rss: 104MB	rvalue checking
time: 0.041; rss: 120MB	MIR dump
  time: 0.003; rss: 120MB	SimplifyCfg
  time: 0.005; rss: 120MB	QualifyAndPromoteConstants
  time: 0.009; rss: 120MB	TypeckMir
  time: 0.000; rss: 120MB	SimplifyBranches
  time: 0.002; rss: 120MB	SimplifyCfg
time: 0.019; rss: 120MB	MIR passes
time: 0.021; rss: 120MB	borrow checking
time: 0.000; rss: 120MB	reachability checking
time: 0.003; rss: 120MB	death checking
time: 0.003; rss: 120MB	stability checking
time: 0.000; rss: 120MB	unused lib feature checking
time: 0.025; rss: 120MB	lint checking
time: 0.000; rss: 120MB	resolving dependency formats
  time: 0.000; rss: 120MB	NoLandingPads
  time: 0.001; rss: 120MB	SimplifyCfg
  time: 0.004; rss: 120MB	EraseRegions
  time: 0.000; rss: 120MB	AddCallGuards
  time: 0.008; rss: 123MB	ElaborateDrops
  time: 0.000; rss: 123MB	NoLandingPads
  time: 0.002; rss: 123MB	SimplifyCfg
  time: 0.002; rss: 123MB	InstCombine
  time: 0.000; rss: 123MB	Deaggregator
  time: 0.000; rss: 123MB	CopyPropagation
  time: 0.000; rss: 123MB	AddCallGuards
  time: 0.000; rss: 123MB	PreTrans
time: 0.019; rss: 123MB	Prepare MIR codegen passes
  time: 0.116; rss: 129MB	write metadata
  time: 0.055; rss: 129MB	translation item collection
  time: 0.008; rss: 131MB	codegen unit partitioning
  time: 0.007; rss: 154MB	internalize symbols
time: 0.549; rss: 147MB	translation
time: 0.000; rss: 147MB	assert dep graph
time: 0.000; rss: 147MB	serialize dep graph
  time: 0.036; rss: 107MB	llvm function passes [0]
  time: 0.019; rss: 109MB	llvm module passes [0]
  time: 0.675; rss: 111MB	codegen passes [0]
  time: 0.001; rss: 112MB	codegen passes [0]
time: 0.829; rss: 112MB	LLVM passes
time: 0.000; rss: 112MB	serialize work products
time: 0.065; rss: 84MB	linking
done
