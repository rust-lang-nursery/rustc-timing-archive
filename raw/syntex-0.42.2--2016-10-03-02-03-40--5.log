commit 144af3e97aa30feba3d36a98ac04c0f1b2bc0bea
Merge: 1cdc0fb 4d76ac8
Author: bors <bors@rust-lang.org>
Date:   Sun Oct 2 17:33:34 2016 -0700

    Auto merge of #36807 - brson:pal, r=brson
    
    Restrict where in the tree platform-specific cfgs may be mentioned
    
    With the ports of Rust never ending, it's important that we keep things tidy. The main thing this PR does is introduce  a new "pal" (platform abstraction layer) tidy check that limits where platform-specific CFGs may appear.
    
    This is intended to maintain existing standards of code organization
    in hopes that the standard library will continue to be refactored to
    isolate platform-specific bits, making porting easier; where "standard
    library" roughly means "all the dependencies of the std and test
    crates".
    
    This generally means placing restrictions on where `cfg(unix)`,
    `cfg(windows)`, `cfg(target_os)` and `cfg(target_env)` may appear,
    the basic objective being to isolate platform-specific code to the
    platform-specific `std::sys` modules, and to the allocation,
    unwinding, and libc crates.
    
    Following are the basic rules, though there are currently
    exceptions:
    
    - core may not have platform-specific code
    - liballoc_system may have platform-specific code
    - liballoc_jemalloc may have platform-specific code
    - libpanic_abort may have platform-specific code
    - libpanic_unwind may have platform-specific code
    - other crates in the std facade may not
    - std may have platform-specific code in the following places
      - sys/unix/
      - sys/windows/
      - os/
    
    There are plenty of exceptions today though, noted in the whitelist.
    
    The end-state, IMO, is for the standard library to be portable by porting only `std::sys` (possibly extracted to its own crate), an allocator crate, an unwinder crate, and possibly a libc crate (if std depends on it); but that outcome is far off and independent of the utility of enforcing where such code lives today.
    
    cc @rust-lang/libs
rustc: ./syntex-0.42.2
cargo rustc -p syntex_syntax -- -Ztime-passes -Zinput-stats
   Compiling syntex_syntax v0.42.0
time: 0.159; rss: 67MB	parsing
Lines of code:             33687
Pre-expansion node count:  224033
time: 0.000; rss: 67MB	recursion limit
time: 0.000; rss: 67MB	crate injection
time: 0.000; rss: 67MB	plugin loading
time: 0.000; rss: 67MB	plugin registration
time: 0.361; rss: 136MB	expansion
time: 0.000; rss: 136MB	maybe building test harness
time: 0.007; rss: 136MB	maybe creating a macro crate
Post-expansion node count: 641571
time: 0.000; rss: 136MB	checking for inline asm in case the target doesn't support it
time: 0.014; rss: 136MB	complete gated feature checking
time: 0.024; rss: 136MB	early lint checks
time: 0.008; rss: 136MB	AST validation
time: 0.110; rss: 151MB	name resolution
time: 0.123; rss: 190MB	lowering ast -> hir
time: 0.024; rss: 198MB	indexing hir
time: 0.007; rss: 198MB	attribute checking
time: 0.006; rss: 151MB	language item collection
time: 0.013; rss: 151MB	lifetime resolution
time: 0.000; rss: 151MB	looking for entry point
time: 0.000; rss: 151MB	looking for plugin registrar
time: 0.067; rss: 160MB	region resolution
time: 0.006; rss: 160MB	loop checking
time: 0.006; rss: 160MB	static item recursion checking
time: 0.299; rss: 163MB	compute_incremental_hashes_map
time: 0.000; rss: 163MB	load_dep_graph
time: 0.081; rss: 165MB	type collecting
time: 0.001; rss: 165MB	variance inference
time: 0.038; rss: 168MB	coherence checking
time: 0.104; rss: 170MB	wf checking
time: 0.201; rss: 175MB	item-types checking
time: 4.156; rss: 218MB	item-bodies checking
time: 0.000; rss: 218MB	drop-impl checking
time: 0.338; rss: 219MB	const checking
time: 0.058; rss: 219MB	privacy checking
time: 0.008; rss: 219MB	stability index
time: 0.023; rss: 219MB	intrinsic checking
time: 0.020; rss: 219MB	effect checking
time: 0.059; rss: 219MB	match checking
time: 0.091; rss: 216MB	liveness checking
time: 0.311; rss: 216MB	rvalue checking
time: 0.679; rss: 392MB	MIR dump
  time: 0.065; rss: 399MB	SimplifyCfg
  time: 0.089; rss: 399MB	QualifyAndPromoteConstants
  time: 0.115; rss: 399MB	TypeckMir
  time: 0.005; rss: 399MB	SimplifyBranches
  time: 0.038; rss: 399MB	SimplifyCfg
time: 0.312; rss: 399MB	MIR passes
time: 0.733; rss: 402MB	borrow checking
time: 0.018; rss: 402MB	reachability checking
time: 0.048; rss: 402MB	death checking
time: 0.044; rss: 404MB	stability checking
time: 0.000; rss: 404MB	unused lib feature checking
time: 0.237; rss: 404MB	lint checking
time: 0.000; rss: 404MB	resolving dependency formats
  time: 0.004; rss: 404MB	NoLandingPads
  time: 0.028; rss: 404MB	SimplifyCfg
  time: 0.096; rss: 411MB	EraseRegions
  time: 0.012; rss: 411MB	AddCallGuards
  time: 1.148; rss: 431MB	ElaborateDrops
  time: 0.004; rss: 431MB	NoLandingPads
  time: 0.054; rss: 431MB	SimplifyCfg
  time: 0.031; rss: 431MB	InstCombine
  time: 0.012; rss: 431MB	Deaggregator
  time: 0.003; rss: 431MB	CopyPropagation
  time: 0.010; rss: 431MB	AddCallGuards
  time: 0.003; rss: 431MB	PreTrans
time: 1.406; rss: 431MB	Prepare MIR codegen passes
  time: 0.282; rss: 437MB	write metadata
  time: 0.503; rss: 448MB	translation item collection
  time: 0.069; rss: 452MB	codegen unit partitioning
  time: 0.059; rss: 703MB	internalize symbols
time: 5.899; rss: 582MB	translation
time: 0.000; rss: 582MB	assert dep graph
time: 0.000; rss: 582MB	serialize dep graph
  time: 0.516; rss: 406MB	llvm function passes [0]
  time: 0.253; rss: 413MB	llvm module passes [0]
  time: 10.163; rss: 404MB	codegen passes [0]
  time: 0.001; rss: 406MB	codegen passes [0]
time: 11.784; rss: 406MB	LLVM passes
time: 0.000; rss: 406MB	serialize work products
time: 0.661; rss: 101MB	linking
done
