commit 786b26d7b48accffc638f8c2767a6e4a6f1991a5
Merge: cd6a400 65ad935
Author: bors <bors@rust-lang.org>
Date:   Mon May 16 18:39:59 2016 -0700

    Auto merge of #33491 - arielb1:obligation-jungle, r=nikomatsakis
    
    Replace the obligation forest with a graph
    
    In the presence of caching, arbitrary nodes in the obligation forest can be merged, which makes it a general graph. Handle it as such, using cycle-detection algorithms in the processing.
    
    I should do performance measurements sometime.
    
    This was pretty much written as a proof-of-concept. Please help me write this in a less-ugly way. I should also add comments explaining what is going on.
    
    r? @nikomatsakis
rustc: ./regex.0.1.30
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling regex v0.1.30 (file:///root/benchmarks/regex.0.1.30)
time: 0.064; rss: 63MB	parsing
Lines of code:             8558
Pre-expansion node count:  58331
time: 0.011; rss: 63MB	configuration 1
time: 0.000; rss: 63MB	recursion limit
time: 0.000; rss: 63MB	crate injection
time: 0.004; rss: 66MB	macro loading
time: 0.000; rss: 66MB	plugin loading
time: 0.000; rss: 66MB	plugin registration
time: 0.058; rss: 69MB	expansion
time: 0.013; rss: 69MB	configuration 2
time: 0.000; rss: 69MB	gated configuration checking
time: 0.006; rss: 69MB	maybe building test harness
time: 0.006; rss: 69MB	prelude injection
time: 0.000; rss: 69MB	checking that all macro invocations are gone
time: 0.000; rss: 69MB	checking for inline asm in case the target doesn't support it
time: 0.001; rss: 69MB	complete gated feature checking
Post-expansion node count: 68487
time: 0.006; rss: 69MB	assigning node ids
time: 0.001; rss: 69MB	collecting defs
time: 0.001; rss: 69MB	external crate/lib resolution
time: 0.006; rss: 69MB	early lint checks
time: 0.009; rss: 77MB	name resolution
time: 0.009; rss: 89MB	lowering ast -> hir
time: 0.001; rss: 89MB	indexing hir
time: 0.001; rss: 89MB	attribute checking
time: 0.001; rss: 82MB	language item collection
time: 0.001; rss: 82MB	lifetime resolution
time: 0.000; rss: 82MB	looking for entry point
time: 0.000; rss: 82MB	looking for plugin registrar
time: 0.006; rss: 86MB	region resolution
time: 0.001; rss: 86MB	loop checking
time: 0.001; rss: 86MB	static item recursion checking
time: 0.000; rss: 86MB	load_dep_graph
time: 0.008; rss: 96MB	type collecting
time: 0.000; rss: 96MB	variance inference
time: 0.025; rss: 108MB	coherence checking
time: 0.013; rss: 109MB	wf checking
time: 0.380; rss: 114MB	item-types checking
time: 0.210; rss: 119MB	item-bodies checking
time: 0.000; rss: 119MB	drop-impl checking
time: 0.027; rss: 121MB	const checking
time: 0.004; rss: 121MB	privacy checking
time: 0.001; rss: 121MB	stability index
time: 0.002; rss: 121MB	intrinsic checking
time: 0.001; rss: 121MB	effect checking
time: 0.004; rss: 121MB	match checking
time: 0.002; rss: 121MB	liveness checking
time: 0.007; rss: 121MB	rvalue checking
time: 0.053; rss: 131MB	MIR dump
time: 0.020; rss: 131MB	MIR passes
time: 0.021; rss: 131MB	borrow checking
time: 0.000; rss: 131MB	reachability checking
time: 0.003; rss: 131MB	death checking
time: 0.002; rss: 131MB	stability checking
time: 0.000; rss: 131MB	unused lib feature checking
time: 0.029; rss: 131MB	lint checking
time: 0.000; rss: 131MB	resolving dependency formats
time: 0.005; rss: 133MB	Prepare MIR codegen passes
  time: 0.066; rss: 138MB	translation item collection
  time: 0.001; rss: 138MB	codegen unit partitioning
  time: 0.180; rss: 196MB	write metadata
time: 0.704; rss: 193MB	translation
time: 0.000; rss: 193MB	assert dep graph
time: 0.000; rss: 193MB	serialize dep graph
  time: 0.035; rss: 128MB	llvm function passes [0]
  time: 0.018; rss: 129MB	llvm module passes [0]
  time: 0.606; rss: 132MB	codegen passes [0]
  time: 0.001; rss: 114MB	codegen passes [0]
time: 0.733; rss: 111MB	LLVM passes
time: 0.067; rss: 111MB	linking
done
