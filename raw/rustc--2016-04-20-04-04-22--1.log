commit 9bba2907ee712753e44d7e248560031c190724e0
Merge: 3dd88f6 02538d4
Author: bors <bors@rust-lang.org>
Date:   Wed Apr 20 01:16:55 2016 -0700

    Auto merge of #32942 - alexcrichton:bootstrap-from-previous, r=brson
    
    mk: Bootstrap from stable instead of snapshots
    
    This commit removes all infrastructure from the repository for our so-called
    snapshots to instead bootstrap the compiler from stable releases. Bootstrapping
    from a previously stable release is a long-desired feature of distros because
    they're not fans of downloading binary stage0 blobs from us. Additionally, this
    makes our own CI easier as we can decommission all of the snapshot builders and
    start having a regular cadence to when we update the stage0 compiler.
    
    A new `src/etc/get-stage0.py` script was added which shares some code with
    `src/bootstrap/bootstrap.py` to read a new file, `src/stage0.txt`, which lists
    the current stage0 compiler as well as cargo that we bootstrap from. This script
    will download the relevant `rustc` package an unpack it into `$target/stage0` as
    we do today.
    
    One problem of bootstrapping from stable releases is that we're not able to
    compile unstable code (e.g. all the `#![feature]` directives in libcore/libstd).
    To overcome this we employ two strategies:
    
    * The bootstrap key of the previous compiler is hardcoded into `src/stage0.txt`
      (enabled as a result of #32731) and exported by the build system. This enables
      nightly features in the compiler we download.
    * The standard library and compiler are pinned to a specific stage0, which
      doesn't change, so we're guaranteed that we'll continue compiling as we start
      from a known fixed source.
    
    The process for making a release will also need to be tweaked now to continue to
    cadence of bootstrapping from the previous release. This process looks like:
    
    1. Merge `beta` to `stable`
    2. Produce a new stable compiler.
    3. Change `master` to bootstrap from this new stable compiler.
    4. Merge `master` to `beta`
    5. Produce a new beta compiler
    6. Change `master` to bootstrap from this new beta compiler.
    
    Step 3 above should involve very few changes as `master` was previously
    bootstrapping from `beta` which is the same as `stable` at that point in time.
    Step 6, however, is where we benefit from removing lots of `#[cfg(stage0)]` and
    get to use new features. This also shouldn't slow the release too much as steps
    1-5 requires little work other than waiting and step 6 just needs to happen at
    some point during a release cycle, it's not time sensitive.
    
    Closes #29555
    Closes #29557
cfg: version 1.10.0-dev (9bba2907e 2016-04-20)
cfg: build triple x86_64-unknown-linux-gnu
cfg: host triples x86_64-unknown-linux-gnu
cfg: target triples x86_64-unknown-linux-gnu
cfg: host for x86_64-unknown-linux-gnu is x86_64
cfg: os for x86_64-unknown-linux-gnu is unknown-linux-gnu
cfg: have good valgrind for x86_64-unknown-linux-gnu
cfg: using CC=gcc (CFG_CC)
cfg: disabling valgrind run-pass tests
make: Nothing to be done for 'all'.
