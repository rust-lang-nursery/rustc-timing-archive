commit 088d4178522d4e9464c6beac70b14724670ee735
Merge: dd0ef17 0eeb14e
Author: bors <bors@rust-lang.org>
Date:   Sat May 14 22:04:58 2016 -0700

    Auto merge of #33593 - dotdash:smart_derive, r=brson
    
    Improve derived implementations for enums with lots of fieldless variants
    
    A number of trait methods like PartialEq::eq or Hash::hash don't
    actually need a distinct arm for each variant, because the code within
    the arm only depends on the number and types of the fields in the
    variants. We can easily exploit this fact to create less and better
    code for enums with multiple variants that have no fields at all, the
    extreme case being C-like enums.
    
    For nickel.rs and its by now infamous 800 variant enum, this reduces
    optimized compile times by 25% and non-optimized compile times by 40%.
    Also peak memory usage is down by almost 40% (310MB down to 190MB).
    
    To be fair, most other crates don't benefit nearly as much, because
    they don't have as huge enums. The crates in the Rust distribution that
    I measured saw basically no change in compile times (I only tried
    optimized builds) and only 1-2% reduction in peak memory usage.
rustc: ./rust-encoding.0.2.32
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling encoding v0.2.32 (file:///root/benchmarks/rust-encoding.0.2.32)
time: 0.025; rss: 50MB	parsing
Lines of code:             6441
Pre-expansion node count:  30335
time: 0.006; rss: 55MB	configuration 1
time: 0.000; rss: 55MB	recursion limit
time: 0.000; rss: 55MB	crate injection
time: 0.004; rss: 60MB	macro loading
time: 0.000; rss: 60MB	plugin loading
time: 0.000; rss: 60MB	plugin registration
time: 0.044; rss: 60MB	expansion
time: 0.006; rss: 60MB	configuration 2
time: 0.000; rss: 60MB	gated configuration checking
time: 0.003; rss: 60MB	maybe building test harness
time: 0.003; rss: 60MB	prelude injection
time: 0.000; rss: 60MB	checking that all macro invocations are gone
time: 0.000; rss: 60MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 60MB	complete gated feature checking
Post-expansion node count: 41130
time: 0.003; rss: 60MB	assigning node ids
time: 0.001; rss: 60MB	collecting defs
time: 0.001; rss: 60MB	external crate/lib resolution
time: 0.002; rss: 60MB	early lint checks
time: 0.008; rss: 69MB	name resolution
time: 0.005; rss: 71MB	lowering ast -> hir
time: 0.000; rss: 71MB	indexing hir
time: 0.000; rss: 71MB	attribute checking
time: 0.000; rss: 73MB	language item collection
time: 0.000; rss: 73MB	lifetime resolution
time: 0.000; rss: 73MB	looking for entry point
time: 0.000; rss: 73MB	looking for plugin registrar
time: 0.002; rss: 75MB	region resolution
time: 0.000; rss: 75MB	loop checking
time: 0.000; rss: 75MB	static item recursion checking
time: 0.000; rss: 75MB	load_dep_graph
time: 0.005; rss: 78MB	type collecting
time: 0.000; rss: 78MB	variance inference
time: 0.023; rss: 96MB	coherence checking
time: 0.024; rss: 96MB	wf checking
time: 0.016; rss: 98MB	item-types checking
time: 0.237; rss: 104MB	item-bodies checking
time: 0.000; rss: 104MB	drop-impl checking
time: 0.013; rss: 104MB	const checking
time: 0.002; rss: 104MB	privacy checking
time: 0.000; rss: 104MB	stability index
time: 0.002; rss: 104MB	intrinsic checking
time: 0.000; rss: 104MB	effect checking
time: 0.007; rss: 104MB	match checking
time: 0.002; rss: 104MB	liveness checking
time: 0.008; rss: 104MB	rvalue checking
time: 0.023; rss: 111MB	MIR dump
time: 0.015; rss: 113MB	MIR passes
time: 0.026; rss: 112MB	borrow checking
time: 0.000; rss: 112MB	reachability checking
time: 0.002; rss: 112MB	death checking
time: 0.002; rss: 112MB	stability checking
time: 0.000; rss: 112MB	unused lib feature checking
time: 0.025; rss: 112MB	lint checking
time: 0.000; rss: 112MB	resolving dependency formats
time: 0.004; rss: 113MB	Prepare MIR codegen passes
  time: 0.029; rss: 115MB	translation item collection
  time: 0.001; rss: 117MB	codegen unit partitioning
  time: 0.060; rss: 150MB	write metadata
time: 0.366; rss: 150MB	translation
time: 0.000; rss: 150MB	assert dep graph
time: 0.000; rss: 150MB	serialize dep graph
  time: 0.026; rss: 116MB	llvm function passes [0]
  time: 0.051; rss: 120MB	llvm module passes [0]
  time: 0.578; rss: 125MB	codegen passes [0]
  time: 0.001; rss: 110MB	codegen passes [0]
time: 0.720; rss: 109MB	LLVM passes
time: 0.053; rss: 107MB	linking
done
