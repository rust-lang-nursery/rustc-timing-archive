commit 01b35d82e51458870f61cf850b73479f253fcb54
Merge: a029ea3 175d434
Author: bors <bors@rust-lang.org>
Date:   Sat Sep 3 04:40:38 2016 -0700

    Auto merge of #36072 - arthurprs:binary_heap_opt, r=Aatch
    
    Optimize BinaryHeap bounds checking
    
    I was experimenting with d-ary binary heaps during the weekend (dead end) and I found that we could get some good improvements by removing bounds checking. Specially due to the panic-safe additional code, llvm can't really optimize them out.
    
    ```
     name                         d_ary_heap:: ns/iter  std___heap:: ns/iter  diff ns/iter  diff %
     bench_build_insert           148,610               236,960                     88,350  59.45%
     bench_from_vec               243,846               299,719                     55,873  22.91%
     bench_insert_2000_empty      4,512                 7,517                        3,005  66.60%
     bench_insert_2000_prefilled  28,665                32,605                       3,940  13.74%
     bench_pop_2000               111,515               128,005                     16,490  14.79%
     bench_pop_all                2,759,945             3,317,626                  557,681  20.21%
     peek_mut                     23,186                23,635                         449   1.94%
     pop_modify_push              41,573                43,822                       2,249   5.41%
    
    test d_ary_heap::bench_build_insert          ... bench:     148,610 ns/iter (+/- 10,687)
    test d_ary_heap::bench_from_vec              ... bench:     243,846 ns/iter (+/- 16,500)
    test d_ary_heap::bench_insert_2000_empty     ... bench:       4,512 ns/iter (+/- 136)
    test d_ary_heap::bench_insert_2000_prefilled ... bench:      28,665 ns/iter (+/- 1,347)
    test d_ary_heap::bench_pop_2000              ... bench:     111,515 ns/iter (+/- 104,677)
    test d_ary_heap::bench_pop_all               ... bench:   2,759,945 ns/iter (+/- 173,838)
    test d_ary_heap::peek_mut                    ... bench:      23,186 ns/iter (+/- 106,254)
    test d_ary_heap::pop_modify_push             ... bench:      41,573 ns/iter (+/- 3,313)
    test std___heap::bench_build_insert          ... bench:     236,960 ns/iter (+/- 16,955)
    test std___heap::bench_from_vec              ... bench:     299,719 ns/iter (+/- 6,354)
    test std___heap::bench_insert_2000_empty     ... bench:       7,517 ns/iter (+/- 372)
    test std___heap::bench_insert_2000_prefilled ... bench:      32,605 ns/iter (+/- 2,433)
    test std___heap::bench_pop_2000              ... bench:     128,005 ns/iter (+/- 11,787)
    test std___heap::bench_pop_all               ... bench:   3,317,626 ns/iter (+/- 238,968)
    test std___heap::peek_mut                    ... bench:      23,635 ns/iter (+/- 1,420)
    test std___heap::pop_modify_push             ... bench:      43,822 ns/iter (+/- 3,788)
    ```
    
    Test code: https://github.com/arthurprs/heap-experiments
rustc: ./inflate-0.1.0
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling inflate v0.1.0 (file:///root/benchmarks/inflate-0.1.0)
time: 0.004; rss: 44MB	parsing
Lines of code:             956
Pre-expansion node count:  4740
time: 0.000; rss: 44MB	configuration
time: 0.000; rss: 44MB	recursion limit
time: 0.000; rss: 44MB	crate injection
time: 0.000; rss: 44MB	plugin loading
time: 0.000; rss: 44MB	plugin registration
time: 0.072; rss: 72MB	expansion
time: 0.000; rss: 72MB	maybe building test harness
time: 0.000; rss: 72MB	maybe creating a macro crate
time: 0.002; rss: 72MB	assigning node ids
Post-expansion node count: 55771
time: 0.000; rss: 72MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 72MB	complete gated feature checking
time: 0.005; rss: 72MB	collecting defs
time: 0.001; rss: 72MB	external crate/lib resolution
time: 0.002; rss: 72MB	early lint checks
time: 0.000; rss: 72MB	AST validation
time: 0.007; rss: 74MB	name resolution
time: 0.006; rss: 78MB	lowering ast -> hir
time: 0.001; rss: 80MB	indexing hir
time: 0.001; rss: 80MB	attribute checking
time: 0.001; rss: 77MB	language item collection
time: 0.001; rss: 77MB	lifetime resolution
time: 0.000; rss: 77MB	looking for entry point
time: 0.000; rss: 77MB	looking for plugin registrar
time: 0.003; rss: 78MB	region resolution
time: 0.000; rss: 78MB	loop checking
time: 0.000; rss: 78MB	static item recursion checking
time: 0.005; rss: 79MB	compute_incremental_hashes_map
time: 0.000; rss: 79MB	load_dep_graph
time: 0.002; rss: 79MB	type collecting
time: 0.000; rss: 79MB	variance inference
time: 0.008; rss: 80MB	coherence checking
time: 0.002; rss: 80MB	wf checking
time: 0.002; rss: 80MB	item-types checking
time: 2.399; rss: 96MB	item-bodies checking
time: 0.000; rss: 96MB	drop-impl checking
time: 0.016; rss: 96MB	const checking
time: 0.001; rss: 96MB	privacy checking
time: 0.000; rss: 96MB	stability index
time: 0.001; rss: 96MB	intrinsic checking
time: 0.001; rss: 96MB	effect checking
time: 0.004; rss: 96MB	match checking
time: 0.067; rss: 94MB	liveness checking
time: 0.011; rss: 94MB	rvalue checking
time: 0.036; rss: 115MB	MIR dump
time: 0.022; rss: 114MB	MIR passes
time: 0.215; rss: 117MB	borrow checking
time: 0.000; rss: 117MB	reachability checking
time: 0.003; rss: 117MB	death checking
time: 0.002; rss: 117MB	stability checking
time: 0.000; rss: 117MB	unused lib feature checking
time: 0.019; rss: 118MB	lint checking
time: 0.000; rss: 118MB	resolving dependency formats
time: 0.180; rss: 116MB	Prepare MIR codegen passes
  time: 0.003; rss: 117MB	write metadata
  time: 0.009; rss: 118MB	translation item collection
  time: 0.001; rss: 118MB	codegen unit partitioning
  time: 0.002; rss: 131MB	internalize symbols
time: 0.191; rss: 118MB	translation
time: 0.000; rss: 118MB	assert dep graph
time: 0.000; rss: 118MB	serialize dep graph
  time: 0.028; rss: 91MB	llvm function passes [0]
  time: 0.005; rss: 92MB	llvm module passes [0]
  time: 0.636; rss: 96MB	codegen passes [0]
  time: 0.000; rss: 96MB	codegen passes [0]
time: 0.702; rss: 96MB	LLVM passes
time: 0.000; rss: 96MB	serialize work products
time: 0.046; rss: 85MB	linking
done
