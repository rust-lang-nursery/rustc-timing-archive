commit cd6a400175cc230008a5094a8bbb44a3794f0465
Merge: 4fdf2c4 24cfa1e
Author: bors <bors@rust-lang.org>
Date:   Mon May 16 14:41:50 2016 -0700

    Auto merge of #33588 - nikomatsakis:compiletest-ui, r=acrichto
    
    add UI testing framework
    
    This adds a framework for capturing and tracking the precise output of rustc, which allows us to check all manner of minor details with the output. It's pretty strict right now -- the output must match almost exactly -- and hence maybe a bit too strict. But I figure we can add wildcards or whatever later. There is also a script intended to make updating the references easy, though the script could make things a *bit* easier (in particular, it'd be nice if it would find the build directory for you automatically).
    
    One thing I was wondering about is the best way to test colors. Since windows doesn't embed those in the output stream, this test framework can't test colors on windows -- so I figure we can just write tests that are ignored on windows and which pass `--color=always` or whatever to rustc.
    
    cc @jonathandturner
    r? @alexcrichton
rustc: ./hyper.0.5.0
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling hyper v0.5.0 (file:///root/benchmarks/hyper.0.5.0)
time: 0.032; rss: 53MB	parsing
Lines of code:             9154
Pre-expansion node count:  45851
time: 0.008; rss: 57MB	configuration 1
time: 0.000; rss: 57MB	recursion limit
time: 0.000; rss: 57MB	crate injection
time: 0.005; rss: 61MB	macro loading
time: 0.000; rss: 61MB	plugin loading
time: 0.000; rss: 61MB	plugin registration
time: 0.191; rss: 70MB	expansion
time: 0.029; rss: 70MB	configuration 2
time: 0.000; rss: 70MB	gated configuration checking
time: 0.011; rss: 70MB	maybe building test harness
time: 0.008; rss: 70MB	prelude injection
time: 0.001; rss: 70MB	checking that all macro invocations are gone
time: 0.000; rss: 70MB	checking for inline asm in case the target doesn't support it
time: 0.002; rss: 70MB	complete gated feature checking
Post-expansion node count: 103616
time: 0.008; rss: 70MB	assigning node ids
time: 0.003; rss: 73MB	collecting defs
time: 0.005; rss: 76MB	external crate/lib resolution
time: 0.006; rss: 76MB	early lint checks
time: 0.024; rss: 92MB	name resolution
time: 0.010; rss: 98MB	lowering ast -> hir
time: 0.001; rss: 100MB	indexing hir
time: 0.001; rss: 100MB	attribute checking
time: 0.001; rss: 93MB	language item collection
time: 0.002; rss: 93MB	lifetime resolution
time: 0.000; rss: 93MB	looking for entry point
time: 0.000; rss: 93MB	looking for plugin registrar
time: 0.005; rss: 97MB	region resolution
time: 0.001; rss: 97MB	loop checking
time: 0.001; rss: 97MB	static item recursion checking
time: 0.000; rss: 97MB	load_dep_graph
time: 0.018; rss: 107MB	type collecting
time: 0.000; rss: 107MB	variance inference
time: 0.044; rss: 122MB	coherence checking
time: 0.093; rss: 122MB	wf checking
time: 0.037; rss: 122MB	item-types checking
time: 0.524; rss: 134MB	item-bodies checking
time: 0.000; rss: 134MB	drop-impl checking
time: 0.043; rss: 137MB	const checking
time: 0.007; rss: 137MB	privacy checking
time: 0.001; rss: 137MB	stability index
time: 0.006; rss: 137MB	intrinsic checking
time: 0.002; rss: 137MB	effect checking
time: 0.015; rss: 137MB	match checking
time: 0.005; rss: 137MB	liveness checking
time: 0.030; rss: 137MB	rvalue checking
time: 0.060; rss: 145MB	MIR dump
time: 0.040; rss: 145MB	MIR passes
time: 0.071; rss: 145MB	borrow checking
time: 0.003; rss: 145MB	reachability checking
time: 0.005; rss: 145MB	death checking
time: 0.005; rss: 145MB	stability checking
time: 0.000; rss: 145MB	unused lib feature checking
time: 0.051; rss: 145MB	lint checking
time: 0.000; rss: 145MB	resolving dependency formats
time: 0.011; rss: 145MB	Prepare MIR codegen passes
  time: 0.217; rss: 155MB	translation item collection
  time: 0.008; rss: 157MB	codegen unit partitioning
  time: 0.131; rss: 281MB	write metadata
time: 1.574; rss: 281MB	translation
time: 0.001; rss: 281MB	assert dep graph
time: 0.000; rss: 281MB	serialize dep graph
  time: 0.100; rss: 172MB	llvm function passes [0]
  time: 0.049; rss: 174MB	llvm module passes [0]
  time: 1.625; rss: 176MB	codegen passes [0]
  time: 0.001; rss: 125MB	codegen passes [0]
time: 1.979; rss: 123MB	LLVM passes
time: 0.174; rss: 122MB	linking
done
