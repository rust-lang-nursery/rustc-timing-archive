commit a7b2232d20320dc3b4044a2aec1d51a129e7e17d
Merge: 9627e9e 8cfc69e
Author: bors <bors@rust-lang.org>
Date:   Wed Sep 7 15:45:14 2016 -0700

    Auto merge of #36292 - japaric:musl-root, r=alexcrichton
    
    rustbuild: per target musl-root
    
    config.toml now accepts a target.$TARGET.musl-root key that lets you
    override the "build" musl-root value, which is set via the --musl-root
    flag or via the build.musl-root key.
    
    With this change, it's now possible to compile std for several musl
    targets at once. Here's are the sample commands to do such thing:
    
    ```
    $ configure \
        --enable-rustbuild \
        --target=x86_64-unknown-linux-musl,arm-unknown-linux-musleabi \
        --musl-root=/musl/x86_64-unknown-linux-musl/
    
    $ edit config.toml && tail config.toml
    [target.arm-unknown-linux-musleabi]
    musl-root = "/x-tools/arm-unknown-linux-musleabi/arm-unknown-linux-musleabi/sysroot/usr"
    
    $ make
    ```
    
    r? @alexcrichton
    With this we should be able to start producing releases of std for arm musl targets
rustc: ./piston-image-0.10.3
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling image v0.10.3 (file:///root/benchmarks/piston-image-0.10.3)
time: 0.046; rss: 57MB	parsing
Lines of code:             12000
Pre-expansion node count:  90272
time: 0.006; rss: 58MB	configuration
time: 0.000; rss: 58MB	recursion limit
time: 0.000; rss: 58MB	crate injection
time: 0.000; rss: 58MB	plugin loading
time: 0.000; rss: 58MB	plugin registration
time: 0.063; rss: 85MB	expansion
time: 0.000; rss: 85MB	maybe building test harness
time: 0.002; rss: 85MB	maybe creating a macro crate
time: 0.007; rss: 85MB	assigning node ids
Post-expansion node count: 149551
time: 0.000; rss: 85MB	checking for inline asm in case the target doesn't support it
time: 0.002; rss: 85MB	complete gated feature checking
time: 0.004; rss: 87MB	collecting defs
time: 0.011; rss: 92MB	external crate/lib resolution
time: 0.006; rss: 92MB	early lint checks
time: 0.002; rss: 92MB	AST validation
time: 0.022; rss: 100MB	name resolution
time: 0.013; rss: 111MB	lowering ast -> hir
time: 0.003; rss: 115MB	indexing hir
time: 0.002; rss: 115MB	attribute checking
time: 0.002; rss: 103MB	language item collection
time: 0.003; rss: 103MB	lifetime resolution
time: 0.000; rss: 103MB	looking for entry point
time: 0.000; rss: 103MB	looking for plugin registrar
time: 0.011; rss: 109MB	region resolution
time: 0.002; rss: 109MB	loop checking
time: 0.001; rss: 109MB	static item recursion checking
time: 0.057; rss: 109MB	compute_incremental_hashes_map
time: 0.000; rss: 109MB	load_dep_graph
time: 0.025; rss: 109MB	type collecting
time: 0.000; rss: 109MB	variance inference
time: 0.032; rss: 113MB	coherence checking
time: 0.099; rss: 114MB	wf checking
time: 0.218; rss: 121MB	item-types checking
time: 0.941; rss: 135MB	item-bodies checking
time: 0.000; rss: 135MB	drop-impl checking
time: 0.071; rss: 136MB	const checking
time: 0.011; rss: 136MB	privacy checking
time: 0.001; rss: 136MB	stability index
time: 0.009; rss: 136MB	intrinsic checking
time: 0.003; rss: 136MB	effect checking
time: 0.025; rss: 136MB	match checking
time: 0.011; rss: 136MB	liveness checking
time: 0.067; rss: 136MB	rvalue checking
time: 0.113; rss: 179MB	MIR dump
  time: 0.011; rss: 179MB	SimplifyCfg
  time: 0.025; rss: 179MB	QualifyAndPromoteConstants
  time: 0.029; rss: 179MB	TypeckMir
  time: 0.001; rss: 179MB	SimplifyBranches
  time: 0.007; rss: 179MB	SimplifyCfg
time: 0.073; rss: 179MB	MIR passes
time: 0.143; rss: 179MB	borrow checking
time: 0.004; rss: 179MB	reachability checking
time: 0.008; rss: 179MB	death checking
time: 0.010; rss: 179MB	stability checking
time: 0.000; rss: 179MB	unused lib feature checking
time: 0.073; rss: 179MB	lint checking
time: 0.000; rss: 179MB	resolving dependency formats
  time: 0.001; rss: 179MB	NoLandingPads
  time: 0.005; rss: 179MB	SimplifyCfg
  time: 0.012; rss: 181MB	EraseRegions
  time: 0.002; rss: 181MB	AddCallGuards
  time: 0.132; rss: 186MB	ElaborateDrops
  time: 0.001; rss: 186MB	NoLandingPads
  time: 0.009; rss: 186MB	SimplifyCfg
  time: 0.002; rss: 186MB	Deaggregator
  time: 0.002; rss: 186MB	AddCallGuards
  time: 0.000; rss: 186MB	PreTrans
time: 0.166; rss: 186MB	Prepare MIR codegen passes
  time: 0.082; rss: 187MB	write metadata
  time: 0.534; rss: 198MB	translation item collection
  time: 0.028; rss: 202MB	codegen unit partitioning
  time: 0.050; rss: 325MB	internalize symbols
time: 3.338; rss: 297MB	translation
time: 0.000; rss: 297MB	assert dep graph
time: 0.000; rss: 297MB	serialize dep graph
  time: 0.201; rss: 224MB	llvm function passes [0]
  time: 0.082; rss: 227MB	llvm module passes [0]
  time: 3.999; rss: 232MB	codegen passes [0]
  time: 0.001; rss: 232MB	codegen passes [0]
time: 4.587; rss: 232MB	LLVM passes
time: 0.000; rss: 232MB	serialize work products
time: 0.255; rss: 104MB	linking
done
