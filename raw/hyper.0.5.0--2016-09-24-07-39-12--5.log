commit bdad70213b32454837c0ed16dbbac3954325feea
Merge: 41e3aee 2e02803
Author: bors <bors@rust-lang.org>
Date:   Sat Sep 24 02:03:18 2016 -0700

    Auto merge of #36685 - brson:rev-string-from, r=sfackler
    
    Revert "implement `From<Vec<char>>` and `From<&'a [char]>` for `String`"
    
    This reverts commit ac73335f2f5421c914fa3900567696cc6dc73d8d.
    
    This is a revert of https://github.com/rust-lang/rust/pull/35054, which resulted in at least 7 known regressions, reported [here](https://internals.rust-lang.org/t/regression-report-stable-2016-08-16-vs-beta-2016-09-21/4119) and [here](https://github.com/rust-lang/rust/issues/36352), which will hit stable next week.
    
    I think this breakage was somewhat unanticipated, and we did not realize so many crates were broken until this week, so reverting is the conservative thing to do until we figure out how not to cause so much breakage. I've run crater on the revert and did not find any new breakage from the revert.
    
    Fixes https://github.com/rust-lang/rust/issues/36352
    
    cc @pwoolcoc @rust-lang/libs
rustc: ./hyper.0.5.0
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling gcc v0.3.35
   Compiling matches v0.1.2
   Compiling httparse v0.1.6
   Compiling winapi v0.2.8
   Compiling libc v0.2.16
   Compiling log v0.3.6
   Compiling winapi-build v0.1.1
   Compiling pkg-config v0.3.8
   Compiling bitflags v0.3.3
   Compiling typeable v0.1.2
   Compiling rustc-serialize v0.3.19
   Compiling kernel32-sys v0.2.2
   Compiling mime v0.0.11
   Compiling unicase v0.1.0
   Compiling traitobject v0.0.1
   Compiling lazy_static v0.1.16
   Compiling libc v0.1.12
   Compiling rand v0.3.14
   Compiling num_cpus v0.2.13
   Compiling time v0.1.35
   Compiling openssl-sys v0.6.7
   Compiling openssl v0.6.7
   Compiling uuid v0.1.18
   Compiling url v0.2.38
   Compiling cookie v0.1.21
   Compiling hyper v0.5.0 (file:///root/benchmarks/hyper.0.5.0)
time: 0.027; rss: 51MB	parsing
Lines of code:             9154
Pre-expansion node count:  44873
time: 0.000; rss: 51MB	recursion limit
time: 0.000; rss: 51MB	crate injection
time: 0.000; rss: 51MB	plugin loading
time: 0.000; rss: 51MB	plugin registration
time: 0.094; rss: 79MB	expansion
time: 0.000; rss: 79MB	maybe building test harness
time: 0.001; rss: 79MB	maybe creating a macro crate
time: 0.005; rss: 79MB	assigning node ids
Post-expansion node count: 101537
time: 0.000; rss: 79MB	checking for inline asm in case the target doesn't support it
time: 0.002; rss: 79MB	complete gated feature checking
time: 0.003; rss: 81MB	collecting defs
time: 0.009; rss: 87MB	external crate/lib resolution
time: 0.003; rss: 87MB	early lint checks
time: 0.001; rss: 87MB	AST validation
time: 0.015; rss: 95MB	name resolution
time: 0.008; rss: 99MB	lowering ast -> hir
time: 0.002; rss: 101MB	indexing hir
time: 0.001; rss: 101MB	attribute checking
time: 0.001; rss: 95MB	language item collection
time: 0.002; rss: 95MB	lifetime resolution
time: 0.000; rss: 95MB	looking for entry point
time: 0.000; rss: 95MB	looking for plugin registrar
time: 0.006; rss: 100MB	region resolution
time: 0.001; rss: 100MB	loop checking
time: 0.001; rss: 100MB	static item recursion checking
time: 0.041; rss: 101MB	compute_incremental_hashes_map
time: 0.000; rss: 101MB	load_dep_graph
time: 0.023; rss: 102MB	type collecting
time: 0.000; rss: 102MB	variance inference
time: 0.035; rss: 104MB	coherence checking
time: 0.055; rss: 107MB	wf checking
time: 0.028; rss: 107MB	item-types checking
time: 0.362; rss: 120MB	item-bodies checking
time: 0.000; rss: 120MB	drop-impl checking
time: 0.037; rss: 122MB	const checking
time: 0.006; rss: 122MB	privacy checking
time: 0.001; rss: 122MB	stability index
time: 0.005; rss: 122MB	intrinsic checking
time: 0.002; rss: 122MB	effect checking
time: 0.013; rss: 122MB	match checking
time: 0.005; rss: 122MB	liveness checking
time: 0.027; rss: 122MB	rvalue checking
time: 0.053; rss: 139MB	MIR dump
  time: 0.007; rss: 139MB	SimplifyCfg
  time: 0.013; rss: 139MB	QualifyAndPromoteConstants
  time: 0.016; rss: 139MB	TypeckMir
  time: 0.001; rss: 139MB	SimplifyBranches
  time: 0.004; rss: 139MB	SimplifyCfg
time: 0.040; rss: 139MB	MIR passes
time: 0.061; rss: 140MB	borrow checking
time: 0.003; rss: 140MB	reachability checking
time: 0.005; rss: 140MB	death checking
time: 0.005; rss: 140MB	stability checking
time: 0.000; rss: 140MB	unused lib feature checking
time: 0.040; rss: 140MB	lint checking
time: 0.000; rss: 140MB	resolving dependency formats
  time: 0.001; rss: 140MB	NoLandingPads
  time: 0.003; rss: 140MB	SimplifyCfg
  time: 0.008; rss: 142MB	EraseRegions
  time: 0.001; rss: 142MB	AddCallGuards
  time: 0.054; rss: 144MB	ElaborateDrops
  time: 0.001; rss: 144MB	NoLandingPads
  time: 0.005; rss: 144MB	SimplifyCfg
  time: 0.003; rss: 144MB	Deaggregator
  time: 0.001; rss: 144MB	AddCallGuards
  time: 0.000; rss: 144MB	PreTrans
time: 0.077; rss: 144MB	Prepare MIR codegen passes
  time: 0.054; rss: 148MB	write metadata
  time: 0.112; rss: 150MB	translation item collection
  time: 0.019; rss: 154MB	codegen unit partitioning
  time: 0.032; rss: 219MB	internalize symbols
time: 1.385; rss: 209MB	translation
time: 0.000; rss: 209MB	assert dep graph
time: 0.000; rss: 209MB	serialize dep graph
  time: 0.101; rss: 158MB	llvm function passes [0]
  time: 0.048; rss: 161MB	llvm module passes [0]
  time: 1.835; rss: 166MB	codegen passes [0]
  time: 0.001; rss: 166MB	codegen passes [0]
time: 2.147; rss: 166MB	LLVM passes
time: 0.000; rss: 166MB	serialize work products
time: 0.157; rss: 99MB	linking
done
