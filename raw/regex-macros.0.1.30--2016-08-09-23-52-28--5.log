commit 576f7665942414cb95239f8cbec4b654f231f4aa
Merge: e1d2bc2 9b510ba
Author: bors <bors@rust-lang.org>
Date:   Tue Aug 9 14:04:54 2016 -0700

    Auto merge of #35401 - jonathandturner:enable_json_and_new_errors, r=jonathandturner
    
    Turn on new errors and json mode
    
    This PR is a big-switch, but on a well-worn path:
    
    * Turns on new errors by default (and removes old skool)
    * Moves json output from behind a flag
    
    The RFC for new errors [landed](https://github.com/rust-lang/rfcs/pull/1644) and as part of that we wanted some bake time.  It's now had a few weeks + all the time leading up to the RFC of people banging on it.  We've also had [editors updating to the new format](https://github.com/saviorisdead/RustyCode/pull/159) and expect more to follow.
    
    We also have an [issue on old skool](https://github.com/rust-lang/rust/issues/35330) that needs to be fixed as more errors are switched to the new style, but it seems silly to fix old skool errors when we fully intend to throw the switch in the near future.
    
    This makes it lean towards "why not just throw the switch now, rather than waiting a couple more weeks?"  I only know of vim that wanted to try to parse the new format but were not sure how, and I think we can reach out to them and work out something in the 8 weeks before this would appear in a stable release.
    
    We've [hashed out](https://github.com/rust-lang/rust/issues/35330) stabilizing JSON output, and it seems like people are relatively happy making what we have v1 and then likely adding to it in the future.  The idea is that we'd maintain backward compatibility and just add new fields as needed.  We'll also work on a separate output format that'd be better suited for interactive tools like IDES (since JSON message can get a little long depending on the error).
    
    This PR stabilizes JSON mode, allowing its use without `-Z unstable-options`
    
    Combined, this gives editors two ways to support errors going forward: parsing the new error format or using the JSON mode.  By moving JSON to stable, we can also add support to Cargo, which plugin authors tell us does help simplify their support story.
    
    r? @nikomatsakis
    cc @rust-lang/tools
    
    Closes https://github.com/rust-lang/rust/issues/34826
rustc: ./regex-macros.0.1.30
cd regex_macros && cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling regex_macros v0.1.17 (file:///root/benchmarks/regex-macros.0.1.30/regex_macros)
time: 0.002; rss: 52MB	parsing
Lines of code:             639
Pre-expansion node count:  2088
time: 0.000; rss: 52MB	configuration
time: 0.000; rss: 52MB	recursion limit
time: 0.000; rss: 52MB	crate injection
time: 0.000; rss: 52MB	plugin loading
time: 0.000; rss: 52MB	plugin registration
time: 0.031; rss: 92MB	expansion
time: 0.000; rss: 92MB	maybe building test harness
time: 0.003; rss: 92MB	assigning node ids
Post-expansion node count: 69587
time: 0.000; rss: 92MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 92MB	complete gated feature checking
time: 0.000; rss: 92MB	collecting defs
time: 0.082; rss: 179MB	external crate/lib resolution
time: 0.002; rss: 179MB	early lint checks
time: 0.000; rss: 179MB	AST validation
time: 0.021; rss: 185MB	name resolution
time: 0.003; rss: 188MB	lowering ast -> hir
time: 0.001; rss: 187MB	indexing hir
time: 0.000; rss: 187MB	attribute checking
time: 0.001; rss: 181MB	language item collection
time: 0.000; rss: 181MB	lifetime resolution
time: 0.000; rss: 181MB	looking for entry point
time: 0.000; rss: 181MB	looking for plugin registrar
time: 0.002; rss: 183MB	region resolution
time: 0.000; rss: 183MB	loop checking
time: 0.000; rss: 183MB	static item recursion checking
time: 0.000; rss: 184MB	load_dep_graph
time: 0.012; rss: 185MB	type collecting
time: 0.000; rss: 185MB	variance inference
time: 0.010; rss: 186MB	coherence checking
time: 0.008; rss: 188MB	wf checking
time: 0.001; rss: 188MB	item-types checking
time: 0.767; rss: 206MB	item-bodies checking
makefile:2: recipe for target 'all' failed
done
