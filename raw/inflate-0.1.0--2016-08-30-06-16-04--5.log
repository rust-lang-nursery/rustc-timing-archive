commit 71ee82a8aa0c02fc2c73e84f40bdb55512d10938
Merge: addb753 02f081c
Author: bors <bors@rust-lang.org>
Date:   Tue Aug 30 00:36:19 2016 -0700

    Auto merge of #36066 - jseyfried:rollup, r=Manishearth
    
    Batch up libsyntax breaking changes
    
    Batch of the following syntax-[breaking-change] changes:
     - #35591: Add a field `span: Span` to `ast::Generics`.
     - #35618: Remove variant `Mod` of `ast::PathListItemKind` and refactor the remaining variant `ast::PathListKind::Ident` to a struct `ast::PathListKind_`.
     - #35480: Change uses of `Constness` in the AST to `Spanned<Constness>`.
      - c.f. `MethodSig`, `ItemKind`
     - #35728: Refactor `cx.pat_enum()` into `cx.pat_tuple_struct()` and `cx.pat_path()`.
     - #35850: Generalize the elements of lists in attributes from `MetaItem` to a new type `NestedMetaItem` that can represent a `MetaItem` or a literal.
     - #35917: Remove traits `AttrMetaMethods`, `AttributeMethods`, and `AttrNestedMetaItemMethods`.
      - Besides removing imports of these traits, this won't cause fallout.
     - Add a variant `Union` to `ItemKind` to future proof for `union` (c.f. #36016).
     - Remove inherent methods `attrs` and `fold_attrs` of `Annotatable`.
      - Use methods `attrs` and `map_attrs` of `HasAttrs` instead.
    
    r? @Manishearth
rustc: ./inflate-0.1.0
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling inflate v0.1.0 (file:///root/benchmarks/inflate-0.1.0)
time: 0.004; rss: 44MB	parsing
Lines of code:             956
Pre-expansion node count:  4740
time: 0.000; rss: 44MB	configuration
time: 0.000; rss: 44MB	recursion limit
time: 0.000; rss: 44MB	crate injection
time: 0.000; rss: 44MB	plugin loading
time: 0.000; rss: 44MB	plugin registration
time: 0.073; rss: 71MB	expansion
time: 0.000; rss: 71MB	maybe building test harness
time: 0.003; rss: 71MB	assigning node ids
Post-expansion node count: 55770
time: 0.000; rss: 71MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 71MB	complete gated feature checking
time: 0.005; rss: 71MB	collecting defs
time: 0.001; rss: 71MB	external crate/lib resolution
time: 0.002; rss: 71MB	early lint checks
time: 0.000; rss: 71MB	AST validation
time: 0.007; rss: 73MB	name resolution
time: 0.006; rss: 78MB	lowering ast -> hir
time: 0.001; rss: 80MB	indexing hir
time: 0.001; rss: 80MB	attribute checking
time: 0.001; rss: 77MB	language item collection
time: 0.001; rss: 77MB	lifetime resolution
time: 0.000; rss: 77MB	looking for entry point
time: 0.000; rss: 77MB	looking for plugin registrar
time: 0.003; rss: 78MB	region resolution
time: 0.000; rss: 78MB	loop checking
time: 0.000; rss: 78MB	static item recursion checking
time: 0.005; rss: 78MB	compute_incremental_hashes_map
time: 0.000; rss: 78MB	load_dep_graph
time: 0.001; rss: 80MB	type collecting
time: 0.000; rss: 80MB	variance inference
time: 0.008; rss: 81MB	coherence checking
time: 0.002; rss: 81MB	wf checking
time: 0.002; rss: 81MB	item-types checking
time: 2.406; rss: 93MB	item-bodies checking
time: 0.000; rss: 93MB	drop-impl checking
time: 0.016; rss: 93MB	const checking
time: 0.001; rss: 93MB	privacy checking
time: 0.000; rss: 93MB	stability index
time: 0.001; rss: 93MB	intrinsic checking
time: 0.001; rss: 93MB	effect checking
time: 0.004; rss: 93MB	match checking
time: 0.062; rss: 92MB	liveness checking
time: 0.012; rss: 92MB	rvalue checking
time: 0.036; rss: 116MB	MIR dump
time: 0.022; rss: 114MB	MIR passes
time: 0.235; rss: 114MB	borrow checking
time: 0.000; rss: 114MB	reachability checking
time: 0.003; rss: 114MB	death checking
time: 0.002; rss: 114MB	stability checking
time: 0.000; rss: 114MB	unused lib feature checking
time: 0.019; rss: 115MB	lint checking
time: 0.000; rss: 115MB	resolving dependency formats
time: 0.181; rss: 114MB	Prepare MIR codegen passes
  time: 0.003; rss: 115MB	write metadata
  time: 0.009; rss: 116MB	translation item collection
  time: 0.001; rss: 116MB	codegen unit partitioning
  time: 0.002; rss: 129MB	internalize symbols
time: 0.187; rss: 116MB	translation
time: 0.000; rss: 116MB	assert dep graph
time: 0.000; rss: 116MB	serialize dep graph
  time: 0.026; rss: 91MB	llvm function passes [0]
  time: 0.005; rss: 91MB	llvm module passes [0]
  time: 0.632; rss: 96MB	codegen passes [0]
  time: 0.000; rss: 96MB	codegen passes [0]
time: 0.696; rss: 96MB	LLVM passes
time: 0.000; rss: 96MB	serialize work products
time: 0.048; rss: 84MB	linking
done
