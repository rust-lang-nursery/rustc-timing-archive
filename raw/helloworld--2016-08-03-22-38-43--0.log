commit 0a3180baab7c361ee85958c88d971190649c3b70
Merge: a0b4e67 63f0c4d
Author: bors <bors@rust-lang.org>
Date:   Wed Aug 3 13:24:53 2016 -0700

    Auto merge of #35261 - eddyb:llvm-autoupgrade, r=nikomatsakis
    
    Support removed LLVM intrinsics by invoking its AutoUpgrade mechanism.
    
    Turns out that LLVM sometimes renames platform intrinsics or replaces them with first-class instructions.
    For example, signed minimum became `select (icmp SLT, a, b), a, b` where `a` and `b` are vectors.
    
    This is blocking the Servo rustup ([relevant failure](http://build.servo.org/builders/windows-dev/builds/226/steps/compile/logs/stdio)), as they're using a few such intrinsics.
    The fix in this PR is to invoke LLVM's own `AutoUpgrade` mechanism to do the replacements.
rustc: ./helloworld
/root/rust/x86_64-unknown-linux-gnu/stage2/bin/rustc hello.rs -Ztime-passes -Zinput-stats
time: 0.040; rss: 46MB	parsing
Lines of code:             3
Pre-expansion node count:  8
time: 0.002; rss: 46MB	configuration
time: 0.000; rss: 46MB	recursion limit
time: 0.000; rss: 46MB	crate injection
time: 0.017; rss: 46MB	plugin loading
time: 0.000; rss: 46MB	plugin registration
time: 0.434; rss: 84MB	expansion
time: 0.000; rss: 84MB	maybe building test harness
time: 0.000; rss: 84MB	assigning node ids
Post-expansion node count: 68
time: 0.000; rss: 84MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 84MB	complete gated feature checking
time: 0.000; rss: 84MB	collecting defs
time: 0.010; rss: 84MB	external crate/lib resolution
time: 0.016; rss: 84MB	early lint checks
time: 0.000; rss: 84MB	AST validation
time: 0.031; rss: 84MB	name resolution
time: 0.011; rss: 84MB	lowering ast -> hir
time: 0.000; rss: 84MB	indexing hir
time: 0.000; rss: 84MB	attribute checking
time: 0.001; rss: 84MB	language item collection
time: 0.000; rss: 86MB	lifetime resolution
time: 0.000; rss: 86MB	looking for entry point
time: 0.000; rss: 86MB	looking for plugin registrar
time: 0.000; rss: 86MB	region resolution
time: 0.000; rss: 86MB	loop checking
time: 0.000; rss: 86MB	static item recursion checking
time: 0.000; rss: 86MB	load_dep_graph
time: 0.013; rss: 86MB	type collecting
time: 0.000; rss: 86MB	variance inference
time: 0.033; rss: 86MB	coherence checking
time: 0.002; rss: 88MB	wf checking
time: 0.001; rss: 88MB	item-types checking
time: 0.001; rss: 88MB	item-bodies checking
time: 0.000; rss: 88MB	drop-impl checking
time: 0.012; rss: 88MB	const checking
time: 0.000; rss: 88MB	privacy checking
time: 0.000; rss: 88MB	stability index
time: 0.000; rss: 88MB	intrinsic checking
time: 0.000; rss: 88MB	effect checking
time: 0.000; rss: 88MB	match checking
time: 0.000; rss: 88MB	liveness checking
time: 0.000; rss: 88MB	rvalue checking
time: 0.019; rss: 88MB	MIR dump
time: 0.001; rss: 88MB	MIR passes
time: 0.022; rss: 90MB	borrow checking
time: 0.000; rss: 90MB	reachability checking
time: 0.000; rss: 90MB	death checking
time: 0.000; rss: 90MB	stability checking
time: 0.000; rss: 90MB	unused lib feature checking
time: 0.000; rss: 90MB	lint checking
time: 0.003; rss: 90MB	resolving dependency formats
time: 0.000; rss: 90MB	Prepare MIR codegen passes
  time: 0.000; rss: 90MB	write metadata
  time: 0.017; rss: 90MB	translation item collection
  time: 0.000; rss: 90MB	codegen unit partitioning
  time: 0.000; rss: 92MB	internalize symbols
time: 0.163; rss: 92MB	translation
time: 0.000; rss: 92MB	assert dep graph
time: 0.012; rss: 92MB	serialize dep graph
  time: 0.001; rss: 92MB	llvm function passes [0]
  time: 0.000; rss: 92MB	llvm module passes [0]
  time: 0.328; rss: 96MB	codegen passes [0]
  time: 0.001; rss: 96MB	codegen passes [0]
time: 0.332; rss: 96MB	LLVM passes
  time: 0.343; rss: 96MB	running linker
time: 0.345; rss: 96MB	linking
done
