commit 47e6da2a01c284f383ad9658e33735f78e262ade
Merge: 13ff307 5f606f0
Author: bors <bors@rust-lang.org>
Date:   Sun Aug 14 18:36:33 2016 -0700

    Auto merge of #35427 - cardoe:arm-musl-targets, r=alexcrichton
    
    add GNU make files for arm-unknown-linux-musleabi
    
    For Yocto (Embedded Linux meta distro) Rust is provided via the [meta-rust layer](https://github.com/meta-rust/meta-rust). In this project there have been patches to add `arm-unknown-linux-musleabi`. Rust recently acquired that support via #35060 but only for rustbuild. meta-rust is currently only able to build Rust support with the existing GNU Makefiles. This adds `arm-unknown-linux-musleabi` support to Rust for the GNU Makefiles until meta-rust is able to sort out why using rustbuild does not work for it.
    
    /cc @srwalter @derekstraka @jmesmon @japaric
rustc: ./inflate-0.1.0
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling inflate v0.1.0 (file:///root/benchmarks/inflate-0.1.0)
time: 0.004; rss: 44MB	parsing
Lines of code:             956
Pre-expansion node count:  4738
time: 0.001; rss: 44MB	configuration
time: 0.000; rss: 44MB	recursion limit
time: 0.000; rss: 44MB	crate injection
time: 0.000; rss: 44MB	plugin loading
time: 0.000; rss: 44MB	plugin registration
time: 0.073; rss: 86MB	expansion
time: 0.000; rss: 86MB	maybe building test harness
time: 0.003; rss: 86MB	assigning node ids
Post-expansion node count: 55769
time: 0.000; rss: 86MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 86MB	complete gated feature checking
time: 0.005; rss: 86MB	collecting defs
time: 0.001; rss: 86MB	external crate/lib resolution
time: 0.002; rss: 86MB	early lint checks
time: 0.000; rss: 86MB	AST validation
time: 0.010; rss: 88MB	name resolution
time: 0.006; rss: 92MB	lowering ast -> hir
time: 0.001; rss: 94MB	indexing hir
time: 0.001; rss: 94MB	attribute checking
time: 0.001; rss: 92MB	language item collection
time: 0.001; rss: 92MB	lifetime resolution
time: 0.000; rss: 92MB	looking for entry point
time: 0.000; rss: 92MB	looking for plugin registrar
time: 0.004; rss: 93MB	region resolution
time: 0.000; rss: 93MB	loop checking
time: 0.000; rss: 93MB	static item recursion checking
time: 0.000; rss: 93MB	load_dep_graph
time: 0.001; rss: 95MB	type collecting
time: 0.000; rss: 95MB	variance inference
time: 0.010; rss: 97MB	coherence checking
time: 0.002; rss: 97MB	wf checking
time: 0.002; rss: 97MB	item-types checking
time: 2.690; rss: 111MB	item-bodies checking
time: 0.000; rss: 111MB	drop-impl checking
time: 0.016; rss: 111MB	const checking
time: 0.001; rss: 111MB	privacy checking
time: 0.000; rss: 111MB	stability index
time: 0.001; rss: 111MB	intrinsic checking
time: 0.001; rss: 111MB	effect checking
time: 0.004; rss: 111MB	match checking
time: 0.062; rss: 110MB	liveness checking
time: 0.011; rss: 110MB	rvalue checking
time: 0.037; rss: 129MB	MIR dump
time: 0.024; rss: 130MB	MIR passes
time: 0.220; rss: 132MB	borrow checking
time: 0.000; rss: 132MB	reachability checking
time: 0.003; rss: 132MB	death checking
time: 0.003; rss: 132MB	stability checking
time: 0.000; rss: 132MB	unused lib feature checking
time: 0.020; rss: 133MB	lint checking
time: 0.000; rss: 133MB	resolving dependency formats
time: 0.169; rss: 132MB	Prepare MIR codegen passes
  time: 0.003; rss: 133MB	write metadata
  time: 0.011; rss: 134MB	translation item collection
  time: 0.001; rss: 134MB	codegen unit partitioning
  time: 0.002; rss: 158MB	internalize symbols
time: 0.222; rss: 143MB	translation
time: 0.000; rss: 143MB	assert dep graph
time: 0.000; rss: 143MB	serialize dep graph
  time: 0.028; rss: 109MB	llvm function passes [0]
  time: 0.005; rss: 110MB	llvm module passes [0]
  time: 0.633; rss: 115MB	codegen passes [0]
  time: 0.000; rss: 115MB	codegen passes [0]
time: 0.700; rss: 115MB	LLVM passes
time: 0.000; rss: 115MB	serialize work products
time: 0.046; rss: 98MB	linking
done
