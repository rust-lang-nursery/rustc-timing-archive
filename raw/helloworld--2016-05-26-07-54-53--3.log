commit 3c795e08d6f4a532f12f3f8e1837db5e0647f8b0
Merge: d5759a3 5b40452
Author: bors <bors@rust-lang.org>
Date:   Thu May 26 02:52:49 2016 -0700

    Auto merge of #33872 - nagisa:undef-is-llvm-for-sigsegv, r=eddyb
    
    Fix handling of FFI arguments
    
    r? @eddyb @nikomatsakis or whoever else.
    
    cc @alexcrichton @rust-lang/core
    
    The strategy employed here was to essentially change code we generate from
    
    ```llvm
      %s = alloca %S ; potentially smaller than argument, but never larger
      %1 = bitcast %S* %s to { i64, i64 }*
      store { i64, i64 } %0, { i64, i64 }* %1, align 4
    ```
    
    to
    
    ```llvm
      %1 = alloca { i64, i64 } ; the copy of argument itself
      store { i64, i64 } %0, { i64, i64 }* %1, align 4
      %s = bitcast { i64, i64 }* %1 to %S* ; potentially truncate by casting to a pointer of smaller type.
    ```
rustc: ./helloworld
/root/rust/x86_64-unknown-linux-gnu/stage2/bin/rustc hello.rs -Ztime-passes -Zinput-stats
time: 0.000; rss: 44MB	parsing
Lines of code:             3
Pre-expansion node count:  8
time: 0.000; rss: 48MB	configuration 1
time: 0.000; rss: 48MB	recursion limit
time: 0.000; rss: 48MB	crate injection
time: 0.017; rss: 82MB	macro loading
time: 0.000; rss: 82MB	plugin loading
time: 0.000; rss: 82MB	plugin registration
time: 0.001; rss: 82MB	expansion
time: 0.000; rss: 82MB	configuration 2
time: 0.000; rss: 82MB	gated configuration checking
time: 0.000; rss: 82MB	maybe building test harness
time: 0.000; rss: 82MB	prelude injection
time: 0.000; rss: 82MB	checking that all macro invocations are gone
time: 0.000; rss: 82MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 82MB	complete gated feature checking
Post-expansion node count: 68
time: 0.000; rss: 82MB	assigning node ids
time: 0.000; rss: 82MB	collecting defs
time: 0.004; rss: 82MB	external crate/lib resolution
time: 0.000; rss: 82MB	early lint checks
time: 0.000; rss: 87MB	name resolution
time: 0.000; rss: 87MB	lowering ast -> hir
time: 0.000; rss: 87MB	indexing hir
time: 0.000; rss: 87MB	attribute checking
time: 0.000; rss: 87MB	language item collection
time: 0.000; rss: 87MB	lifetime resolution
time: 0.000; rss: 87MB	looking for entry point
time: 0.000; rss: 87MB	looking for plugin registrar
time: 0.000; rss: 87MB	region resolution
time: 0.000; rss: 87MB	loop checking
time: 0.000; rss: 87MB	static item recursion checking
time: 0.000; rss: 87MB	load_dep_graph
time: 0.000; rss: 87MB	type collecting
time: 0.000; rss: 87MB	variance inference
time: 0.005; rss: 87MB	coherence checking
time: 0.000; rss: 87MB	wf checking
time: 0.000; rss: 87MB	item-types checking
time: 0.000; rss: 87MB	item-bodies checking
time: 0.000; rss: 87MB	drop-impl checking
time: 0.000; rss: 87MB	const checking
time: 0.000; rss: 87MB	privacy checking
time: 0.000; rss: 87MB	stability index
time: 0.000; rss: 87MB	intrinsic checking
time: 0.000; rss: 87MB	effect checking
time: 0.000; rss: 91MB	match checking
time: 0.000; rss: 91MB	liveness checking
time: 0.000; rss: 91MB	rvalue checking
time: 0.000; rss: 91MB	MIR dump
time: 0.000; rss: 91MB	MIR passes
time: 0.000; rss: 91MB	borrow checking
time: 0.000; rss: 91MB	reachability checking
time: 0.000; rss: 91MB	death checking
time: 0.000; rss: 91MB	stability checking
time: 0.000; rss: 91MB	unused lib feature checking
time: 0.000; rss: 91MB	lint checking
time: 0.002; rss: 91MB	resolving dependency formats
time: 0.000; rss: 91MB	Prepare MIR codegen passes
  time: 0.000; rss: 91MB	write metadata
  time: 0.000; rss: 91MB	translation item collection
  time: 0.000; rss: 91MB	codegen unit partitioning
time: 0.009; rss: 91MB	translation
time: 0.000; rss: 91MB	assert dep graph
time: 0.000; rss: 91MB	serialize dep graph
  time: 0.000; rss: 91MB	llvm function passes [0]
  time: 0.000; rss: 91MB	llvm module passes [0]
  time: 0.001; rss: 95MB	codegen passes [0]
  time: 0.000; rss: 95MB	codegen passes [0]
time: 0.002; rss: 95MB	LLVM passes
  time: 0.112; rss: 95MB	running linker
time: 0.113; rss: 95MB	linking
done
