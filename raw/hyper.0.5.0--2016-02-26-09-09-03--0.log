commit f59fd4642534e80a61982ce3e10c147d97054212
Merge: ee8b257 b980f22
Author: bors <bors@rust-lang.org>
Date:   Fri Feb 26 13:38:46 2016 +0000

    Auto merge of #31846 - alexcrichton:better-disable-jemallc, r=brson
    
    The `--disable-jemalloc` configure option has a failure mode where it will
    create a distribution that is not compatible with other compilers. For example
    the nightly for Linux will assume that it will link to jemalloc by default as
    an allocator for executable crates. If, however, a standard library is used
    which was built via `./configure --disable-jemalloc` then this will fail
    because the jemalloc crate wasn't built.
    
    While this seems somewhat reasonable as a niche situation, the same mechanism is
    used for disabling jemalloc for platforms that just don't support it. For
    example if the rumprun target is compiled then the sibiling Linux target *also*
    doesn't have jemalloc. This is currently a problem for our cross-build nightlies
    which build many targets. If rumprun is also built, it will disable jemalloc for
    all targets, which isn't desired.
    
    This commit moves the platform-specific disabling of jemalloc as hardcoded logic
    into the makefiles that is scoped per-platform. This way when configuring
    multiple targets **without the `--disable-jemalloc` option specified** all
    targets will get jemalloc as they should.
rustc: ./hyper.0.5.0
cargo rustc -- -Ztime-passes -Zinput-stats
    Updating registry `https://github.com/rust-lang/crates.io-index`
   Compiling rustc-serialize v0.3.18
   Compiling winapi v0.2.5
   Compiling traitobject v0.0.1
   Compiling pkg-config v0.3.7
   Compiling libc v0.1.12
   Compiling unicase v0.1.0
   Compiling bitflags v0.3.3
   Compiling typeable v0.1.2
   Compiling lazy_static v0.1.15
   Compiling httparse v0.1.6
   Compiling gcc v0.3.25
   Compiling winapi-build v0.1.1
   Compiling libc v0.2.7
   Compiling matches v0.1.2
   Compiling kernel32-sys v0.2.1
   Compiling rand v0.3.14
   Compiling time v0.1.34
   Compiling num_cpus v0.2.11
   Compiling log v0.3.5
   Compiling mime v0.0.11
   Compiling openssl-sys v0.6.7
   Compiling openssl v0.6.7
   Compiling uuid v0.1.18
   Compiling url v0.2.38
   Compiling cookie v0.1.21
   Compiling hyper v0.5.0 (file:///root/benchmarks/hyper.0.5.0)
time: 0.029; rss: 45MB	parsing
Lines of code:             9154
Pre-expansion node count:  45594
time: 0.009; rss: 45MB	configuration 1
time: 0.000; rss: 45MB	recursion limit
time: 0.000; rss: 45MB	gated macro checking
time: 0.000; rss: 45MB	crate injection
time: 0.004; rss: 50MB	macro loading
time: 0.000; rss: 50MB	plugin loading
time: 0.000; rss: 50MB	plugin registration
time: 0.190; rss: 60MB	expansion
time: 0.005; rss: 60MB	complete gated feature checking 1
time: 0.035; rss: 60MB	configuration 2
time: 0.000; rss: 60MB	gated configuration checking
time: 0.014; rss: 60MB	maybe building test harness
time: 0.011; rss: 60MB	prelude injection
time: 0.001; rss: 60MB	checking that all macro invocations are gone
time: 0.000; rss: 60MB	checking for inline asm in case the target doesn't support it
time: 0.002; rss: 60MB	complete gated feature checking 2
time: 0.001; rss: 60MB	const fn bodies and arguments
Post-expansion node count: 109258
time: 0.010; rss: 60MB	assigning node ids
time: 0.012; rss: 64MB	lowering ast -> hir
time: 0.004; rss: 66MB	indexing hir
time: 0.002; rss: 66MB	attribute checking
time: 0.006; rss: 66MB	early lint checks
time: 0.004; rss: 62MB	external crate/lib resolution
time: 0.001; rss: 62MB	language item collection
time: 0.025; rss: 83MB	resolution
time: 0.002; rss: 83MB	lifetime resolution
time: 0.000; rss: 83MB	looking for entry point
time: 0.000; rss: 83MB	looking for plugin registrar
time: 0.005; rss: 85MB	region resolution
time: 0.001; rss: 85MB	loop checking
time: 0.001; rss: 85MB	static item recursion checking
time: 0.012; rss: 89MB	type collecting
time: 0.000; rss: 89MB	variance inference
time: 0.039; rss: 106MB	coherence checking
time: 0.078; rss: 107MB	wf checking
time: 0.024; rss: 107MB	item-types checking
time: 0.474; rss: 130MB	item-bodies checking
time: 0.000; rss: 130MB	drop-impl checking
time: 0.036; rss: 132MB	const checking
time: 0.010; rss: 132MB	privacy checking
time: 0.001; rss: 132MB	stability index
time: 0.004; rss: 132MB	intrinsic checking
time: 0.002; rss: 132MB	effect checking
time: 0.012; rss: 132MB	match checking
time: 0.005; rss: 132MB	liveness checking
time: 0.032; rss: 132MB	rvalue checking
time: 0.059; rss: 135MB	MIR dump
time: 0.000; rss: 135MB	MIR passes
time: 0.064; rss: 135MB	borrow checking
time: 0.003; rss: 135MB	reachability checking
time: 0.006; rss: 135MB	death checking
time: 0.006; rss: 135MB	stability checking
time: 0.000; rss: 135MB	unused lib feature checking
time: 0.045; rss: 135MB	lint checking
time: 0.000; rss: 135MB	resolving dependency formats
time: 0.006; rss: 135MB	erasing regions from MIR
  time: 0.184; rss: 155MB	translation item collection
  time: 0.134; rss: 247MB	write metadata
time: 1.337; rss: 247MB	translation
  time: 0.098; rss: 168MB	llvm function passes [0]
  time: 0.047; rss: 169MB	llvm module passes [0]
  time: 1.649; rss: 174MB	codegen passes [0]
  time: 0.001; rss: 124MB	codegen passes [0]
time: 1.997; rss: 123MB	LLVM passes
time: 0.170; rss: 124MB	linking
done
