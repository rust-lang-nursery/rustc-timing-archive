commit 0ed951993fb5721a303ca5fa743543dd9f3f6b10
Merge: bd6a54d 7cd8a49
Author: bors <bors@rust-lang.org>
Date:   Mon Nov 14 18:12:26 2016 -0800

    Auto merge of #37775 - alexcrichton:try-fix-dox, r=brson
    
    rustbuild: Tweak default rule inclusion
    
    If a rule is flagged with `default(true)` then the pseudo-rule `default:foo`
    will include that. If a rule is also flagged with `.host(true)`, however, then
    the rule shouldn't be included for targets that aren't in the host array. This
    adds a filter to ensure we don't pull in host rules for targets by accident.
rustc: ./syntex-0.42.2-incr-clean
RUSTFLAGS="-Z incremental=incr" \
    cargo rustc -p syntex_syntax  -- \
    -Ztime-passes -Zinput-stats -Z incremental-info
   Compiling syntex_syntax v0.42.0
time: 0.131; rss: 65MB	parsing
Lines of code:             33687
Pre-expansion node count:  223115
time: 0.000; rss: 65MB	recursion limit
time: 0.000; rss: 65MB	crate injection
time: 0.000; rss: 65MB	plugin loading
time: 0.000; rss: 65MB	plugin registration
time: 0.315; rss: 136MB	expansion
time: 0.000; rss: 136MB	maybe building test harness
time: 0.006; rss: 136MB	maybe creating a macro crate
Post-expansion node count: 638863
time: 0.000; rss: 136MB	checking for inline asm in case the target doesn't support it
time: 0.014; rss: 136MB	complete gated feature checking
time: 0.023; rss: 136MB	early lint checks
time: 0.007; rss: 137MB	AST validation
time: 0.104; rss: 152MB	name resolution
time: 0.089; rss: 177MB	lowering ast -> hir
time: 0.022; rss: 185MB	indexing hir
time: 0.006; rss: 185MB	attribute checking
time: 0.005; rss: 144MB	language item collection
time: 0.011; rss: 144MB	lifetime resolution
time: 0.000; rss: 144MB	looking for entry point
time: 0.000; rss: 144MB	looking for plugin registrar
time: 0.082; rss: 163MB	region resolution
time: 0.005; rss: 163MB	loop checking
time: 0.005; rss: 163MB	static item recursion checking
time: 0.332; rss: 164MB	compute_incremental_hashes_map
time: 0.000; rss: 164MB	load_dep_graph
time: 0.050; rss: 163MB	type collecting
time: 0.001; rss: 163MB	variance inference
time: 0.018; rss: 166MB	coherence checking
time: 0.094; rss: 168MB	wf checking
time: 0.181; rss: 174MB	item-types checking
time: 3.487; rss: 218MB	item-bodies checking
time: 0.000; rss: 218MB	drop-impl checking
time: 0.286; rss: 236MB	const checking
time: 0.048; rss: 236MB	privacy checking
time: 0.006; rss: 236MB	stability index
time: 0.018; rss: 236MB	intrinsic checking
time: 0.015; rss: 236MB	effect checking
time: 0.047; rss: 236MB	match checking
time: 0.082; rss: 234MB	liveness checking
time: 0.190; rss: 234MB	rvalue checking
time: 0.596; rss: 407MB	MIR dump
  time: 0.060; rss: 413MB	SimplifyCfg
  time: 0.076; rss: 413MB	QualifyAndPromoteConstants
  time: 0.102; rss: 413MB	TypeckMir
  time: 0.005; rss: 413MB	SimplifyBranches
  time: 0.031; rss: 413MB	SimplifyCfg
time: 0.274; rss: 413MB	MIR cleanup and validation
time: 0.506; rss: 416MB	borrow checking
time: 0.025; rss: 417MB	reachability checking
time: 0.041; rss: 417MB	death checking
time: 0.036; rss: 419MB	stability checking
time: 0.000; rss: 419MB	unused lib feature checking
time: 0.206; rss: 419MB	lint checking
time: 0.000; rss: 419MB	resolving dependency formats
  time: 0.003; rss: 419MB	NoLandingPads
  time: 0.027; rss: 419MB	SimplifyCfg
  time: 0.075; rss: 425MB	EraseRegions
  time: 0.012; rss: 425MB	AddCallGuards
  time: 0.306; rss: 443MB	ElaborateDrops
  time: 0.003; rss: 443MB	NoLandingPads
  time: 0.053; rss: 443MB	SimplifyCfg
  time: 0.030; rss: 443MB	InstCombine
  time: 0.013; rss: 443MB	Deaggregator
  time: 0.003; rss: 443MB	CopyPropagation
  time: 0.036; rss: 444MB	SimplifyLocals
  time: 0.010; rss: 444MB	AddCallGuards
  time: 0.003; rss: 444MB	PreTrans
time: 0.575; rss: 444MB	MIR optimisations
  time: 0.078; rss: 452MB	write metadata
  time: 0.438; rss: 467MB	translation item collection
  time: 0.072; rss: 474MB	codegen unit partitioning
  time: 0.049; rss: 719MB	internalize symbols
time: 5.112; rss: 719MB	translation
time: 0.000; rss: 719MB	assert dep graph
time: 0.000; rss: 719MB	serialize dep graph
incremental: re-using 0 out of 1 modules
  time: 0.539; rss: 414MB	llvm function passes [0]
  time: 0.262; rss: 420MB	llvm module passes [0]
  time: 10.501; rss: 418MB	codegen passes [0]
  time: 0.000; rss: 418MB	codegen passes [0]
time: 12.190; rss: 418MB	LLVM passes
time: 0.000; rss: 418MB	serialize work products
time: 0.346; rss: 100MB	linking
done
