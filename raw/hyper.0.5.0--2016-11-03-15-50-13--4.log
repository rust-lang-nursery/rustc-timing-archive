commit ac919fcd9d4a958baf99b2f2ed5c3d38a2ebf9d0
Merge: f9f45c6 b4f910d
Author: bors <bors@rust-lang.org>
Date:   Wed Nov 2 22:58:01 2016 -0700

    Auto merge of #37541 - nikomatsakis:issue-37291, r=brson
    
    Use impl obligations as initial environment for specialization
    
    This corrects a small regression in specialization that crept in, I think as part of the refactoring to introduce arenas. I also made an experiment (in the last commit) to cleanup the code to be more aggressive about normalization. As the commit log notes, I am not 100% sure that this is correct, but it feels safer, and I think that at worst it yields *more* ICEs (as opposed to admitting faulty code). I'll schedule a crater run to check beyond the testbase.
    
    Fixes #37291.
    
    r? @aturon
rustc: ./hyper.0.5.0
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling hyper v0.5.0 (file:///root/benchmarks/hyper.0.5.0)
time: 0.026; rss: 49MB	parsing
Lines of code:             9003
Pre-expansion node count:  44129
time: 0.000; rss: 49MB	recursion limit
time: 0.000; rss: 49MB	crate injection
time: 0.000; rss: 49MB	plugin loading
time: 0.000; rss: 49MB	plugin registration
time: 0.091; rss: 87MB	expansion
time: 0.000; rss: 87MB	maybe building test harness
time: 0.001; rss: 87MB	maybe creating a macro crate
Post-expansion node count: 101823
time: 0.000; rss: 87MB	checking for inline asm in case the target doesn't support it
time: 0.002; rss: 87MB	complete gated feature checking
time: 0.003; rss: 87MB	early lint checks
time: 0.001; rss: 87MB	AST validation
time: 0.016; rss: 92MB	name resolution
time: 0.007; rss: 96MB	lowering ast -> hir
time: 0.001; rss: 98MB	indexing hir
time: 0.001; rss: 98MB	attribute checking
time: 0.001; rss: 91MB	language item collection
time: 0.001; rss: 91MB	lifetime resolution
time: 0.000; rss: 91MB	looking for entry point
time: 0.000; rss: 91MB	looking for plugin registrar
time: 0.005; rss: 95MB	region resolution
time: 0.001; rss: 95MB	loop checking
time: 0.000; rss: 95MB	static item recursion checking
time: 0.056; rss: 95MB	compute_incremental_hashes_map
time: 0.000; rss: 95MB	load_dep_graph
time: 0.015; rss: 97MB	type collecting
time: 0.000; rss: 97MB	variance inference
time: 0.027; rss: 100MB	coherence checking
time: 0.043; rss: 103MB	wf checking
time: 0.020; rss: 103MB	item-types checking
time: 0.322; rss: 113MB	item-bodies checking
time: 0.000; rss: 113MB	drop-impl checking
time: 0.029; rss: 113MB	const checking
time: 0.006; rss: 113MB	privacy checking
time: 0.001; rss: 113MB	stability index
time: 0.003; rss: 113MB	intrinsic checking
time: 0.002; rss: 113MB	effect checking
time: 0.008; rss: 113MB	match checking
time: 0.004; rss: 113MB	liveness checking
time: 0.021; rss: 113MB	rvalue checking
time: 0.048; rss: 131MB	MIR dump
  time: 0.006; rss: 131MB	SimplifyCfg
  time: 0.011; rss: 131MB	QualifyAndPromoteConstants
  time: 0.013; rss: 131MB	TypeckMir
  time: 0.001; rss: 131MB	SimplifyBranches
  time: 0.003; rss: 131MB	SimplifyCfg
time: 0.034; rss: 131MB	MIR passes
time: 0.054; rss: 131MB	borrow checking
time: 0.003; rss: 131MB	reachability checking
time: 0.004; rss: 131MB	death checking
time: 0.005; rss: 133MB	stability checking
time: 0.000; rss: 133MB	unused lib feature checking
time: 0.040; rss: 135MB	lint checking
time: 0.000; rss: 135MB	resolving dependency formats
  time: 0.001; rss: 135MB	NoLandingPads
  time: 0.003; rss: 135MB	SimplifyCfg
  time: 0.008; rss: 135MB	EraseRegions
  time: 0.001; rss: 135MB	AddCallGuards
  time: 0.022; rss: 135MB	ElaborateDrops
  time: 0.001; rss: 135MB	NoLandingPads
  time: 0.005; rss: 135MB	SimplifyCfg
  time: 0.003; rss: 135MB	InstCombine
  time: 0.003; rss: 135MB	Deaggregator
  time: 0.001; rss: 135MB	CopyPropagation
  time: 0.001; rss: 135MB	AddCallGuards
  time: 0.000; rss: 135MB	PreTrans
time: 0.049; rss: 135MB	Prepare MIR codegen passes
  time: 0.011; rss: 139MB	write metadata
  time: 0.117; rss: 147MB	translation item collection
  time: 0.015; rss: 149MB	codegen unit partitioning
  time: 0.013; rss: 203MB	internalize symbols
time: 1.003; rss: 203MB	translation
time: 0.000; rss: 203MB	assert dep graph
time: 0.000; rss: 203MB	serialize dep graph
  time: 0.084; rss: 148MB	llvm function passes [0]
  time: 0.042; rss: 148MB	llvm module passes [0]
  time: 1.619; rss: 151MB	codegen passes [0]
  time: 0.000; rss: 151MB	codegen passes [0]
time: 1.879; rss: 151MB	LLVM passes
time: 0.000; rss: 151MB	serialize work products
time: 0.067; rss: 94MB	linking
done
