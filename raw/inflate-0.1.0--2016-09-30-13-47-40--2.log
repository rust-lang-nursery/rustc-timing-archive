commit 954873055a998a06841ac19b39b1fe18a6641731
Merge: 1d64acd a84b550
Author: bors <bors@rust-lang.org>
Date:   Fri Sep 30 07:35:04 2016 -0700

    Auto merge of #36823 - durka:discriminant_value, r=nagisa
    
    add wrapper for discriminant_value, take 2
    
    [This is #34785 reopened, since @bors apparently gave up on that thread.]
    
    add wrapper for discriminant_value intrinsic
    
    Implementation of [RFC 1696](https://github.com/rust-lang/rfcs/blob/master/text/1696-discriminant.md).
    
    Wraps the `discriminant_value` intrinsic under the name `std::mem::discriminant`. In order to avoid prematurely leaking information about the implementation of enums, the return value is an opaque type, generic over the enum type, which implements Copy, Clone, PartialEq, Eq, Hash, and Debug (notably not PartialOrd). There is currently no way to get the value out excepting printing the debug representation.
    
    The wrapper is safe and can be stabilized soon as per discussion in #24263.
    
    cc @aturon
    r? @nagisa
rustc: ./inflate-0.1.0
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling inflate v0.1.0 (file:///root/benchmarks/inflate-0.1.0)
time: 0.004; rss: 43MB	parsing
Lines of code:             956
Pre-expansion node count:  4740
time: 0.000; rss: 43MB	recursion limit
time: 0.000; rss: 43MB	crate injection
time: 0.000; rss: 43MB	plugin loading
time: 0.000; rss: 43MB	plugin registration
time: 0.076; rss: 72MB	expansion
time: 0.000; rss: 72MB	maybe building test harness
time: 0.000; rss: 72MB	maybe creating a macro crate
Post-expansion node count: 55750
time: 0.000; rss: 72MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 72MB	complete gated feature checking
time: 0.002; rss: 72MB	early lint checks
time: 0.000; rss: 72MB	AST validation
time: 0.008; rss: 75MB	name resolution
time: 0.006; rss: 79MB	lowering ast -> hir
time: 0.001; rss: 79MB	indexing hir
time: 0.001; rss: 79MB	attribute checking
time: 0.001; rss: 74MB	language item collection
time: 0.001; rss: 74MB	lifetime resolution
time: 0.000; rss: 74MB	looking for entry point
time: 0.000; rss: 74MB	looking for plugin registrar
time: 0.003; rss: 76MB	region resolution
time: 0.000; rss: 76MB	loop checking
time: 0.000; rss: 76MB	static item recursion checking
time: 0.022; rss: 76MB	compute_incremental_hashes_map
time: 0.000; rss: 76MB	load_dep_graph
time: 0.002; rss: 78MB	type collecting
time: 0.000; rss: 78MB	variance inference
time: 0.010; rss: 79MB	coherence checking
time: 0.002; rss: 79MB	wf checking
time: 0.002; rss: 79MB	item-types checking
time: 2.384; rss: 92MB	item-bodies checking
time: 0.000; rss: 92MB	drop-impl checking
time: 0.017; rss: 93MB	const checking
time: 0.001; rss: 93MB	privacy checking
time: 0.000; rss: 93MB	stability index
time: 0.000; rss: 93MB	intrinsic checking
time: 0.001; rss: 93MB	effect checking
time: 0.003; rss: 93MB	match checking
time: 0.067; rss: 91MB	liveness checking
time: 0.013; rss: 91MB	rvalue checking
time: 0.036; rss: 111MB	MIR dump
  time: 0.007; rss: 111MB	SimplifyCfg
  time: 0.005; rss: 111MB	QualifyAndPromoteConstants
  time: 0.007; rss: 111MB	TypeckMir
  time: 0.000; rss: 111MB	SimplifyBranches
  time: 0.004; rss: 111MB	SimplifyCfg
time: 0.023; rss: 111MB	MIR passes
time: 0.203; rss: 112MB	borrow checking
time: 0.000; rss: 112MB	reachability checking
time: 0.003; rss: 112MB	death checking
time: 0.002; rss: 112MB	stability checking
time: 0.000; rss: 112MB	unused lib feature checking
time: 0.019; rss: 114MB	lint checking
time: 0.000; rss: 114MB	resolving dependency formats
  time: 0.000; rss: 114MB	NoLandingPads
  time: 0.002; rss: 114MB	SimplifyCfg
  time: 0.003; rss: 114MB	EraseRegions
  time: 0.001; rss: 114MB	AddCallGuards
  time: 0.124; rss: 115MB	ElaborateDrops
  time: 0.000; rss: 115MB	NoLandingPads
  time: 0.006; rss: 114MB	SimplifyCfg
  time: 0.003; rss: 114MB	InstCombine
  time: 0.000; rss: 114MB	Deaggregator
  time: 0.000; rss: 114MB	CopyPropagation
  time: 0.001; rss: 114MB	AddCallGuards
  time: 0.000; rss: 114MB	PreTrans
time: 0.139; rss: 114MB	Prepare MIR codegen passes
  time: 0.002; rss: 114MB	write metadata
  time: 0.011; rss: 114MB	translation item collection
  time: 0.001; rss: 114MB	codegen unit partitioning
  time: 0.001; rss: 127MB	internalize symbols
time: 0.158; rss: 111MB	translation
time: 0.000; rss: 111MB	assert dep graph
time: 0.000; rss: 111MB	serialize dep graph
  time: 0.027; rss: 88MB	llvm function passes [0]
  time: 0.005; rss: 89MB	llvm module passes [0]
  time: 0.671; rss: 95MB	codegen passes [0]
  time: 0.000; rss: 95MB	codegen passes [0]
time: 0.737; rss: 95MB	LLVM passes
time: 0.000; rss: 95MB	serialize work products
time: 0.046; rss: 82MB	linking
done
