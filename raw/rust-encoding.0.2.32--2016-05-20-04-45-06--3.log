commit d27bdafc3eaab2729d664f82b7d650782640f31a
Merge: cde0fa5 0d2c26c
Author: bors <bors@rust-lang.org>
Date:   Fri May 20 00:34:50 2016 -0700

    Auto merge of #33553 - alexcrichton:cdylibs, r=brson
    
    rustc: Add a new crate type, cdylib
    
    This commit is an implementation of [RFC 1510] which adds a new crate type,
    `cdylib`, to the compiler. This new crate type differs from the existing `dylib`
    crate type in a few key ways:
    
    * No metadata is present in the final artifact
    * Symbol visibility rules are the same as executables, that is only reachable
      `extern` functions are visible symbols
    * LTO is allowed
    * All libraries are always linked statically
    
    This commit is relatively simple by just plubming the compiler with another
    crate type which takes different branches here and there. The only major change
    is an implementation of the `Linker::export_symbols` function on Unix which now
    actually does something. This helps restrict the public symbols from a cdylib on
    Unix.
    
    With this PR a "hello world" `cdylib` is 7.2K while the same `dylib` is 2.4MB,
    which is some nice size savings!
    
    [RFC 1510]: https://github.com/rust-lang/rfcs/pull/1510
    
    Closes #33132
rustc: ./rust-encoding.0.2.32
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling encoding v0.2.32 (file:///root/benchmarks/rust-encoding.0.2.32)
time: 0.025; rss: 50MB	parsing
Lines of code:             6441
Pre-expansion node count:  30537
time: 0.006; rss: 56MB	configuration 1
time: 0.000; rss: 56MB	recursion limit
time: 0.000; rss: 56MB	crate injection
time: 0.019; rss: 89MB	macro loading
time: 0.000; rss: 89MB	plugin loading
time: 0.000; rss: 89MB	plugin registration
time: 0.044; rss: 92MB	expansion
time: 0.006; rss: 92MB	configuration 2
time: 0.000; rss: 92MB	gated configuration checking
time: 0.003; rss: 92MB	maybe building test harness
time: 0.003; rss: 92MB	prelude injection
time: 0.000; rss: 92MB	checking that all macro invocations are gone
time: 0.000; rss: 92MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 92MB	complete gated feature checking
Post-expansion node count: 41376
time: 0.003; rss: 92MB	assigning node ids
time: 0.001; rss: 92MB	collecting defs
time: 0.001; rss: 92MB	external crate/lib resolution
time: 0.002; rss: 92MB	early lint checks
time: 0.008; rss: 94MB	name resolution
time: 0.005; rss: 96MB	lowering ast -> hir
time: 0.000; rss: 96MB	indexing hir
time: 0.000; rss: 96MB	attribute checking
time: 0.000; rss: 95MB	language item collection
time: 0.000; rss: 95MB	lifetime resolution
time: 0.000; rss: 95MB	looking for entry point
time: 0.000; rss: 95MB	looking for plugin registrar
time: 0.002; rss: 97MB	region resolution
time: 0.000; rss: 97MB	loop checking
time: 0.000; rss: 97MB	static item recursion checking
time: 0.000; rss: 97MB	load_dep_graph
time: 0.005; rss: 99MB	type collecting
time: 0.000; rss: 99MB	variance inference
time: 0.021; rss: 103MB	coherence checking
time: 0.023; rss: 103MB	wf checking
time: 0.015; rss: 104MB	item-types checking
time: 0.223; rss: 111MB	item-bodies checking
time: 0.000; rss: 111MB	drop-impl checking
time: 0.013; rss: 111MB	const checking
time: 0.002; rss: 111MB	privacy checking
time: 0.000; rss: 111MB	stability index
time: 0.002; rss: 111MB	intrinsic checking
time: 0.000; rss: 111MB	effect checking
time: 0.007; rss: 111MB	match checking
time: 0.002; rss: 111MB	liveness checking
time: 0.008; rss: 111MB	rvalue checking
time: 0.023; rss: 117MB	MIR dump
time: 0.014; rss: 117MB	MIR passes
time: 0.025; rss: 117MB	borrow checking
time: 0.000; rss: 117MB	reachability checking
time: 0.002; rss: 117MB	death checking
time: 0.002; rss: 117MB	stability checking
time: 0.000; rss: 117MB	unused lib feature checking
time: 0.024; rss: 117MB	lint checking
time: 0.000; rss: 117MB	resolving dependency formats
time: 0.004; rss: 117MB	Prepare MIR codegen passes
  time: 0.029; rss: 120MB	translation item collection
  time: 0.001; rss: 120MB	codegen unit partitioning
  time: 0.058; rss: 155MB	write metadata
time: 0.353; rss: 155MB	translation
time: 0.000; rss: 155MB	assert dep graph
time: 0.000; rss: 155MB	serialize dep graph
  time: 0.027; rss: 120MB	llvm function passes [0]
  time: 0.049; rss: 123MB	llvm module passes [0]
  time: 0.593; rss: 127MB	codegen passes [0]
  time: 0.001; rss: 112MB	codegen passes [0]
time: 0.733; rss: 111MB	LLVM passes
time: 0.053; rss: 110MB	linking
done
