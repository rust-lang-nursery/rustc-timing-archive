commit 91b27ec9beb8455426da3efd26dfc9155058f5bd
Merge: 4406717 6dd3f61
Author: bors <bors@rust-lang.org>
Date:   Thu Jan 7 06:32:56 2016 +0000

    Auto merge of #30724 - nikomatsakis:feature-gate-defaulted-type-parameters, r=pnkfelix
    
    It was recently realized that we accept defaulted type parameters everywhere, without feature gate, even though the only place that we really *intended* to accept them were on types. This PR adds a lint warning unless the "type-parameter-defaults" feature is enabled. This should eventually become a hard error.
    
    This is a [breaking-change] in that new feature gates are required (or simply removing the defaults, which is probably a better choice as they have little effect at this time). Results of a [crater run][crater] suggest that approximately 5-15 crates are affected. I didn't do the measurement quite right so that run cannot distinguish "true" regressions from "non-root" regressions, but even the upper bound of 15 affected crates seems relatively minimal.
    
    [crater]: https://gist.github.com/nikomatsakis/760c6a67698bd24253bf
    
    cc @rust-lang/lang
    r? @pnkfelix
rustc: ./jld-day15-parser
cargo rustc -- -Ztime-passes -Zinput-stats
    Updating registry `https://github.com/rust-lang/crates.io-index`
   Compiling combine v1.2.0
   Compiling day15 v0.1.0 (file:///root/benchmarks/jld-day15-parser)
time: 0.001; rss: 24MB	parsing
Lines of code:             72
Pre-expansion node count:  673
time: 0.000; rss: 24MB	configuration 1
time: 0.000; rss: 24MB	recursion limit
time: 0.000; rss: 24MB	gated macro checking
time: 0.000; rss: 24MB	crate injection
time: 0.003; rss: 29MB	macro loading
time: 0.000; rss: 29MB	plugin loading
time: 0.000; rss: 29MB	plugin registration
time: 0.002; rss: 29MB	expansion
time: 0.000; rss: 29MB	complete gated feature checking 1
time: 0.000; rss: 29MB	configuration 2
time: 0.000; rss: 29MB	gated configuration checking
time: 0.000; rss: 29MB	maybe building test harness
time: 0.000; rss: 29MB	prelude injection
time: 0.000; rss: 29MB	checking that all macro invocations are gone
time: 0.000; rss: 29MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 29MB	complete gated feature checking 2
Post-expansion node count: 1176
time: 0.000; rss: 29MB	assigning node ids
time: 0.000; rss: 29MB	lowering ast -> hir
time: 0.000; rss: 29MB	indexing hir
time: 0.000; rss: 29MB	attribute checking
time: 0.000; rss: 29MB	early lint checks
time: 0.001; rss: 29MB	external crate/lib resolution
time: 0.000; rss: 31MB	language item collection
time: 0.002; rss: 38MB	resolution
time: 0.000; rss: 38MB	lifetime resolution
time: 0.000; rss: 38MB	looking for entry point
time: 0.000; rss: 38MB	looking for plugin registrar
time: 0.000; rss: 38MB	region resolution
time: 0.000; rss: 38MB	loop checking
time: 0.000; rss: 38MB	static item recursion checking
time: 0.001; rss: 40MB	type collecting
time: 0.000; rss: 40MB	variance inference
time: 0.006; rss: 47MB	coherence checking
time: 0.007; rss: 52MB	wf checking
time: 0.000; rss: 53MB	item-types checking
time: 1.265; rss: 87MB	item-bodies checking
time: 0.000; rss: 87MB	drop-impl checking
time: 0.001; rss: 87MB	const checking
time: 0.000; rss: 87MB	privacy checking
time: 0.000; rss: 87MB	stability index
time: 0.000; rss: 87MB	intrinsic checking
time: 0.000; rss: 87MB	effect checking
time: 0.000; rss: 87MB	match checking
time: 0.001; rss: 87MB	MIR dump
time: 0.000; rss: 88MB	liveness checking
time: 0.001; rss: 88MB	borrow checking
time: 0.002; rss: 88MB	rvalue checking
time: 0.000; rss: 88MB	reachability checking
time: 0.000; rss: 88MB	death checking
time: 0.000; rss: 88MB	stability checking
time: 0.000; rss: 88MB	unused lib feature checking
time: 0.003; rss: 86MB	lint checking
time: 0.001; rss: 86MB	resolving dependency formats
time: 0.000; rss: 86MB	erasing regions from MIR
  time: 0.000; rss: 145MB	write metadata
time: 16.546; rss: 145MB	translation
  time: 0.014; rss: 84MB	llvm function passes [0]
  time: 0.002; rss: 85MB	llvm module passes [0]
  time: 0.263; rss: 95MB	codegen passes [0]
  time: 0.000; rss: 93MB	codegen passes [0]
time: 0.289; rss: 93MB	LLVM passes
  time: 0.039; rss: 93MB	running linker
time: 0.040; rss: 93MB	linking
done
