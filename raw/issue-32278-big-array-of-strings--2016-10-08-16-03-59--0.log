commit bff06afbc5eb980cbfa2fa4f35e0c431828d3471
Merge: 4344f14 d17f0b0
Author: bors <bors@rust-lang.org>
Date:   Sat Oct 8 12:36:11 2016 -0700

    Auto merge of #37027 - alexcrichton:less-deps-in-bootstrap, r=japaric
    
    rustbuild: Optimize build times slightly
    
    As the entry point for building the Rust compiler, a good user experience hinges
    on this compiling quickly to get to the meat of the problem. To that end use
    `#[cfg]`-specific dependencies to avoid building Windows crates on Unix and drop
    the `regex` crate for now which was easily replacable with some string
    searching.
rustc: ./issue-32278-big-array-of-strings
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling issue-32278-big-array-of-strings v0.1.0 (file:///root/benchmarks/issue-32278-big-array-of-strings)
time: 0.113; rss: 62MB	parsing
Lines of code:             65577
Pre-expansion node count:  65552
time: 0.000; rss: 62MB	recursion limit
time: 0.000; rss: 62MB	crate injection
time: 0.000; rss: 62MB	plugin loading
time: 0.000; rss: 62MB	plugin registration
time: 0.027; rss: 79MB	expansion
time: 0.000; rss: 79MB	maybe building test harness
time: 0.000; rss: 79MB	maybe creating a macro crate
Post-expansion node count: 65565
time: 0.000; rss: 79MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 79MB	complete gated feature checking
time: 0.004; rss: 79MB	early lint checks
time: 0.000; rss: 83MB	AST validation
time: 0.003; rss: 83MB	name resolution
time: 0.007; rss: 100MB	lowering ast -> hir
time: 0.002; rss: 104MB	indexing hir
time: 0.001; rss: 104MB	attribute checking
time: 0.001; rss: 94MB	language item collection
time: 0.001; rss: 94MB	lifetime resolution
time: 0.000; rss: 94MB	looking for entry point
time: 0.000; rss: 94MB	looking for plugin registrar
time: 0.007; rss: 101MB	region resolution
time: 0.001; rss: 101MB	loop checking
time: 0.002; rss: 101MB	static item recursion checking
time: 0.020; rss: 101MB	compute_incremental_hashes_map
time: 0.000; rss: 101MB	load_dep_graph
time: 0.000; rss: 101MB	type collecting
time: 0.000; rss: 101MB	variance inference
time: 0.006; rss: 103MB	coherence checking
time: 0.001; rss: 103MB	wf checking
time: 0.619; rss: 114MB	item-types checking
time: 0.000; rss: 114MB	item-bodies checking
time: 0.000; rss: 114MB	drop-impl checking
time: 0.021; rss: 111MB	const checking
time: 0.002; rss: 111MB	privacy checking
time: 0.000; rss: 111MB	stability index
time: 0.000; rss: 111MB	intrinsic checking
time: 0.000; rss: 111MB	effect checking
time: 0.000; rss: 111MB	match checking
time: 0.001; rss: 111MB	liveness checking
time: 0.000; rss: 111MB	rvalue checking
time: 0.044; rss: 122MB	MIR dump
  time: 0.000; rss: 122MB	SimplifyCfg
  time: 0.001; rss: 122MB	QualifyAndPromoteConstants
  time: 0.001; rss: 122MB	TypeckMir
  time: 0.000; rss: 122MB	SimplifyBranches
  time: 0.000; rss: 122MB	SimplifyCfg
time: 0.002; rss: 122MB	MIR passes
time: 0.001; rss: 122MB	borrow checking
time: 0.000; rss: 122MB	reachability checking
time: 0.001; rss: 122MB	death checking
time: 0.001; rss: 122MB	stability checking
time: 0.000; rss: 122MB	unused lib feature checking
time: 0.025; rss: 122MB	lint checking
time: 0.001; rss: 123MB	resolving dependency formats
  time: 0.000; rss: 123MB	NoLandingPads
  time: 0.000; rss: 123MB	SimplifyCfg
  time: 0.001; rss: 123MB	EraseRegions
  time: 0.000; rss: 123MB	AddCallGuards
  time: 0.000; rss: 123MB	ElaborateDrops
  time: 0.000; rss: 123MB	NoLandingPads
  time: 0.000; rss: 123MB	SimplifyCfg
  time: 0.000; rss: 123MB	InstCombine
  time: 0.000; rss: 123MB	Deaggregator
  time: 0.000; rss: 123MB	CopyPropagation
  time: 0.000; rss: 123MB	AddCallGuards
  time: 0.000; rss: 123MB	PreTrans
time: 0.001; rss: 123MB	Prepare MIR codegen passes
  time: 0.000; rss: 123MB	write metadata
  time: 0.001; rss: 123MB	translation item collection
  time: 0.000; rss: 123MB	codegen unit partitioning
  time: 0.001; rss: 132MB	internalize symbols
time: 0.060; rss: 130MB	translation
time: 0.000; rss: 130MB	assert dep graph
time: 0.000; rss: 130MB	serialize dep graph
  time: 0.009; rss: 86MB	llvm function passes [0]
  time: 0.000; rss: 86MB	llvm module passes [0]
  time: 0.181; rss: 86MB	codegen passes [0]
  time: 0.000; rss: 86MB	codegen passes [0]
time: 0.191; rss: 86MB	LLVM passes
time: 0.000; rss: 86MB	serialize work products
  time: 0.157; rss: 74MB	running linker
time: 0.159; rss: 74MB	linking
done
