commit a277f9deb0bcccc096334447b0e57765110707c7
Merge: fd983d0 d394e75
Author: bors <bors@rust-lang.org>
Date:   Sat Nov 12 15:29:13 2016 -0800

    Auto merge of #37675 - arielb1:trans-closure, r=eddyb
    
    Translate closures through the collector
    
    Now that old trans is gone, there is no need for the hack of translating closures when they are instantiated. We can translate them like regular items.
    
    r? @eddyb
rustc: ./syntex-0.42.2
cargo rustc -p syntex_syntax  -- -Ztime-passes -Zinput-stats
   Compiling syntex_syntax v0.42.0
time: 0.093; rss: 70MB	parsing
Lines of code:             33687
Pre-expansion node count:  223115
time: 0.000; rss: 70MB	recursion limit
time: 0.000; rss: 70MB	crate injection
time: 0.000; rss: 70MB	plugin loading
time: 0.000; rss: 70MB	plugin registration
time: 0.235; rss: 143MB	expansion
time: 0.000; rss: 143MB	maybe building test harness
time: 0.006; rss: 143MB	maybe creating a macro crate
Post-expansion node count: 638863
time: 0.000; rss: 143MB	checking for inline asm in case the target doesn't support it
time: 0.013; rss: 143MB	complete gated feature checking
time: 0.023; rss: 143MB	early lint checks
time: 0.007; rss: 143MB	AST validation
time: 0.075; rss: 158MB	name resolution
time: 0.044; rss: 183MB	lowering ast -> hir
time: 0.008; rss: 194MB	indexing hir
time: 0.006; rss: 194MB	attribute checking
time: 0.005; rss: 150MB	language item collection
time: 0.010; rss: 150MB	lifetime resolution
time: 0.000; rss: 150MB	looking for entry point
time: 0.000; rss: 150MB	looking for plugin registrar
time: 0.040; rss: 171MB	region resolution
time: 0.005; rss: 171MB	loop checking
time: 0.004; rss: 171MB	static item recursion checking
time: 0.326; rss: 171MB	compute_incremental_hashes_map
time: 0.000; rss: 171MB	load_dep_graph
time: 0.049; rss: 170MB	type collecting
time: 0.001; rss: 170MB	variance inference
time: 0.018; rss: 174MB	coherence checking
time: 0.092; rss: 177MB	wf checking
time: 0.178; rss: 182MB	item-types checking
time: 3.279; rss: 233MB	item-bodies checking
time: 0.000; rss: 233MB	drop-impl checking
time: 0.212; rss: 254MB	const checking
time: 0.045; rss: 254MB	privacy checking
time: 0.005; rss: 254MB	stability index
time: 0.017; rss: 254MB	intrinsic checking
time: 0.014; rss: 254MB	effect checking
time: 0.045; rss: 254MB	match checking
time: 0.049; rss: 250MB	liveness checking
time: 0.179; rss: 250MB	rvalue checking
time: 0.379; rss: 437MB	MIR dump
  time: 0.057; rss: 438MB	SimplifyCfg
  time: 0.072; rss: 438MB	QualifyAndPromoteConstants
  time: 0.098; rss: 438MB	TypeckMir
  time: 0.004; rss: 438MB	SimplifyBranches
  time: 0.030; rss: 438MB	SimplifyCfg
time: 0.262; rss: 438MB	MIR cleanup and validation
time: 0.486; rss: 439MB	borrow checking
time: 0.019; rss: 439MB	reachability checking
time: 0.039; rss: 439MB	death checking
time: 0.030; rss: 441MB	stability checking
time: 0.000; rss: 441MB	unused lib feature checking
time: 0.195; rss: 441MB	lint checking
time: 0.000; rss: 441MB	resolving dependency formats
  time: 0.003; rss: 441MB	NoLandingPads
  time: 0.026; rss: 441MB	SimplifyCfg
  time: 0.060; rss: 448MB	EraseRegions
  time: 0.011; rss: 448MB	AddCallGuards
  time: 0.265; rss: 462MB	ElaborateDrops
  time: 0.003; rss: 462MB	NoLandingPads
  time: 0.052; rss: 462MB	SimplifyCfg
  time: 0.028; rss: 462MB	InstCombine
  time: 0.013; rss: 462MB	Deaggregator
  time: 0.002; rss: 462MB	CopyPropagation
  time: 0.034; rss: 462MB	SimplifyLocals
  time: 0.010; rss: 462MB	AddCallGuards
  time: 0.003; rss: 462MB	PreTrans
time: 0.509; rss: 462MB	MIR optimisations
  time: 0.059; rss: 474MB	write metadata
  time: 0.380; rss: 490MB	translation item collection
  time: 0.062; rss: 498MB	codegen unit partitioning
  time: 0.047; rss: 739MB	internalize symbols
time: 4.377; rss: 739MB	translation
time: 0.000; rss: 739MB	assert dep graph
time: 0.000; rss: 739MB	serialize dep graph
  time: 0.517; rss: 419MB	llvm function passes [0]
  time: 0.245; rss: 427MB	llvm module passes [0]
  time: 10.279; rss: 420MB	codegen passes [0]
  time: 0.000; rss: 420MB	codegen passes [0]
time: 11.790; rss: 420MB	LLVM passes
time: 0.000; rss: 420MB	serialize work products
time: 0.343; rss: 104MB	linking
done
