commit 493d999ffa44be6610441dabab80e18dda90015a
Merge: f6e125f fc4d0ec
Author: bors <bors@rust-lang.org>
Date:   Thu Mar 3 17:41:13 2016 +0000

    Auto merge of #32007 - nikomatsakis:compiletest-incremental, r=alexcrichton
    
    This PR extends compiletest to support **test revisions** and with a preliminary **incremental testing harness**. run-pass, compile-fail, and run-fail tests may be tagged with
    
    ```
    // revisions: a b c d
    ```
    
    This will cause the test to be re-run four times with `--cfg {a,b,c,d}` in turn. This means you can write very closely related things using `cfg`. You can also configure the headers/expected-errors by writing `//[foo] header: value` or `//[foo]~ ERROR bar`, where `foo` is the name of your revision. See the changes to `coherence-cow.rs` as a proof of concept.
    
    The main point of this work is to support the incremental testing harness. This PR contains an initial, unused version. The code that uses it will land later. The incremental testing harness compiles each revision in turn, and requires that the revisions have particular names (e.g., `rpass2`, `cfail3`), which tell it whether a particular revision is expected to compile or not.
    
    Two questions:
    
    - Is there compiletest documentation anywhere I can update?
    - Should I hold off on landing the incremental testing harness until I have the code to exercise it? (That will come in a separate PR, still fixing a few details)
    
    r? @alexcrichton
    cc @rust-lang/compiler <-- new testing capabilities
rustc: ./inflate-0.1.0
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling inflate v0.1.0 (file:///root/benchmarks/inflate-0.1.0)
time: 0.008; rss: 33MB	parsing
Lines of code:             956
Pre-expansion node count:  4761
time: 0.001; rss: 33MB	configuration 1
time: 0.000; rss: 33MB	recursion limit
time: 0.000; rss: 33MB	gated macro checking
time: 0.000; rss: 33MB	crate injection
time: 0.003; rss: 37MB	macro loading
time: 0.000; rss: 37MB	plugin loading
time: 0.000; rss: 37MB	plugin registration
time: 0.087; rss: 44MB	expansion
time: 0.001; rss: 44MB	complete gated feature checking 1
time: 0.009; rss: 44MB	configuration 2
time: 0.000; rss: 44MB	gated configuration checking
time: 0.004; rss: 44MB	maybe building test harness
time: 0.004; rss: 44MB	prelude injection
time: 0.000; rss: 44MB	checking that all macro invocations are gone
time: 0.000; rss: 44MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 44MB	complete gated feature checking 2
time: 0.000; rss: 44MB	const fn bodies and arguments
Post-expansion node count: 54798
time: 0.004; rss: 44MB	assigning node ids
time: 0.014; rss: 48MB	lowering ast -> hir
time: 0.002; rss: 49MB	indexing hir
time: 0.000; rss: 49MB	attribute checking
time: 0.004; rss: 49MB	early lint checks
time: 0.001; rss: 45MB	external crate/lib resolution
time: 0.001; rss: 45MB	language item collection
time: 0.009; rss: 51MB	resolution
time: 0.001; rss: 51MB	lifetime resolution
time: 0.000; rss: 51MB	looking for entry point
time: 0.000; rss: 51MB	looking for plugin registrar
time: 0.003; rss: 52MB	region resolution
time: 0.000; rss: 52MB	loop checking
time: 0.000; rss: 52MB	static item recursion checking
time: 0.001; rss: 53MB	type collecting
time: 0.000; rss: 53MB	variance inference
time: 0.010; rss: 66MB	coherence checking
time: 0.002; rss: 66MB	wf checking
time: 0.002; rss: 66MB	item-types checking
time: 2.563; rss: 91MB	item-bodies checking
time: 0.000; rss: 91MB	drop-impl checking
time: 0.014; rss: 92MB	const checking
time: 0.002; rss: 92MB	privacy checking
time: 0.000; rss: 92MB	stability index
time: 0.000; rss: 92MB	intrinsic checking
time: 0.001; rss: 92MB	effect checking
time: 0.003; rss: 92MB	match checking
time: 0.313; rss: 93MB	liveness checking
time: 0.009; rss: 92MB	rvalue checking
time: 0.037; rss: 100MB	MIR dump
time: 0.000; rss: 100MB	MIR passes
time: 0.209; rss: 99MB	borrow checking
time: 0.000; rss: 99MB	reachability checking
time: 0.004; rss: 99MB	death checking
time: 0.002; rss: 99MB	stability checking
time: 0.000; rss: 99MB	unused lib feature checking
time: 0.018; rss: 100MB	lint checking
time: 0.000; rss: 100MB	resolving dependency formats
time: 0.002; rss: 100MB	erasing regions from MIR
  time: 0.012; rss: 111MB	translation item collection
  time: 0.003; rss: 127MB	write metadata
time: 0.359; rss: 124MB	translation
  time: 0.028; rss: 94MB	llvm function passes [0]
  time: 0.005; rss: 94MB	llvm module passes [0]
  time: 0.496; rss: 101MB	codegen passes [0]
  time: 0.000; rss: 88MB	codegen passes [0]
time: 0.571; rss: 88MB	LLVM passes
time: 0.034; rss: 87MB	linking
done
