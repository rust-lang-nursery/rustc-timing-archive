commit 0f7c75b74fb7adc436eedc66c0032879293eeac6
Merge: 1c11ea3 6c2a456
Author: bors <bors@rust-lang.org>
Date:   Tue Nov 22 03:29:46 2016 -0600

    Auto merge of #37834 - bluss:peek-none, r=BurntSushi
    
    Make Peekable remember peeking a None
    
    Peekable should remember if a None has been seen in the `.peek()` method.
    It ensures that `.peek(); .peek();` or `.peek(); .next();` only advances the
    underlying iterator at most once. This does not by itself make the iterator
    fused.
    
    Thanks to @s3bk for the code in `fn peek()` itself.
    
    Fixes #37784
rustc: ./piston-image-0.10.3
cargo rustc  -- -Ztime-passes -Zinput-stats
   Compiling image v0.10.3 (file:///root/benchmarks/piston-image-0.10.3)
time: 0.048; rss: 52MB	parsing
Lines of code:             12000
Pre-expansion node count:  90152
time: 0.000; rss: 52MB	recursion limit
time: 0.000; rss: 52MB	crate injection
time: 0.000; rss: 52MB	plugin loading
time: 0.000; rss: 52MB	plugin registration
time: 0.086; rss: 92MB	expansion
time: 0.000; rss: 92MB	maybe building test harness
time: 0.001; rss: 92MB	maybe creating a macro crate
Post-expansion node count: 148881
time: 0.000; rss: 92MB	checking for inline asm in case the target doesn't support it
time: 0.002; rss: 92MB	complete gated feature checking
time: 0.005; rss: 92MB	early lint checks
time: 0.001; rss: 92MB	AST validation
time: 0.022; rss: 96MB	name resolution
time: 0.025; rss: 103MB	lowering ast -> hir
time: 0.006; rss: 105MB	indexing hir
time: 0.002; rss: 105MB	attribute checking
time: 0.001; rss: 95MB	language item collection
time: 0.003; rss: 95MB	lifetime resolution
time: 0.000; rss: 95MB	looking for entry point
time: 0.000; rss: 95MB	looking for plugin registrar
time: 0.018; rss: 100MB	region resolution
time: 0.001; rss: 100MB	loop checking
time: 0.001; rss: 100MB	static item recursion checking
time: 0.051; rss: 99MB	compute_incremental_hashes_map
time: 0.000; rss: 99MB	load_dep_graph
time: 0.016; rss: 102MB	type collecting
time: 0.000; rss: 102MB	variance inference
time: 0.000; rss: 102MB	impl wf inference
time: 0.014; rss: 104MB	coherence checking
time: 0.066; rss: 105MB	wf checking
time: 0.136; rss: 108MB	item-types checking
time: 0.791; rss: 119MB	item-bodies checking
time: 0.000; rss: 119MB	drop-impl checking
time: 0.061; rss: 123MB	const checking
time: 0.010; rss: 123MB	privacy checking
time: 0.001; rss: 123MB	stability index
time: 0.006; rss: 123MB	intrinsic checking
time: 0.003; rss: 123MB	effect checking
time: 0.014; rss: 123MB	match checking
time: 0.009; rss: 123MB	liveness checking
time: 0.041; rss: 123MB	rvalue checking
time: 0.146; rss: 161MB	MIR dump
  time: 0.012; rss: 163MB	SimplifyCfg
  time: 0.021; rss: 163MB	QualifyAndPromoteConstants
  time: 0.023; rss: 163MB	TypeckMir
  time: 0.001; rss: 163MB	SimplifyBranches
  time: 0.005; rss: 163MB	SimplifyCfg
time: 0.061; rss: 163MB	MIR cleanup and validation
time: 0.111; rss: 163MB	borrow checking
time: 0.003; rss: 163MB	reachability checking
time: 0.008; rss: 164MB	death checking
time: 0.007; rss: 164MB	stability checking
time: 0.000; rss: 164MB	unused lib feature checking
time: 0.063; rss: 164MB	lint checking
time: 0.000; rss: 164MB	resolving dependency formats
  time: 0.001; rss: 164MB	NoLandingPads
  time: 0.005; rss: 164MB	SimplifyCfg
  time: 0.011; rss: 165MB	EraseRegions
  time: 0.002; rss: 165MB	AddCallGuards
  time: 0.047; rss: 168MB	ElaborateDrops
  time: 0.001; rss: 168MB	NoLandingPads
  time: 0.009; rss: 168MB	SimplifyCfg
  time: 0.006; rss: 168MB	InstCombine
  time: 0.002; rss: 168MB	Deaggregator
  time: 0.001; rss: 168MB	CopyPropagation
  time: 0.008; rss: 168MB	SimplifyLocals
  time: 0.002; rss: 168MB	AddCallGuards
  time: 0.000; rss: 168MB	PreTrans
time: 0.093; rss: 168MB	MIR optimisations
  time: 0.016; rss: 170MB	write metadata
  time: 0.439; rss: 182MB	translation item collection
  time: 0.021; rss: 187MB	codegen unit partitioning
  time: 0.018; rss: 306MB	internalize symbols
time: 2.574; rss: 306MB	translation
time: 0.000; rss: 306MB	assert dep graph
time: 0.000; rss: 306MB	serialize dep graph
  time: 0.208; rss: 226MB	llvm function passes [0]
  time: 0.083; rss: 229MB	llvm module passes [0]
  time: 4.240; rss: 226MB	codegen passes [0]
  time: 0.000; rss: 226MB	codegen passes [0]
time: 4.920; rss: 226MB	LLVM passes
time: 0.000; rss: 226MB	serialize work products
time: 0.129; rss: 103MB	linking
done
