commit e804a3cf256106c097d44f6e0212cd183122da07
Merge: 271d048 06acf16
Author: bors <bors@rust-lang.org>
Date:   Thu Aug 4 03:01:37 2016 -0700

    Auto merge of #35168 - scottcarr:deaggregation, r=nikomatsakis
    
    [MIR] Deaggregate structs to enable further optimizations
    
    Currently, we generate MIR like:
    
    ```
    tmp0 = ...;
    tmp1 = ...;
    tmp3 = Foo { a: ..., b: ... };
    ```
    
    This PR implements "deaggregation," i.e.:
    
    ```
    tmp3.0 = ...
    tmp3.1 = ...
    ```
    
    Currently, the code only deaggregates structs, not enums.  My understanding is that we do not have MIR to set the discriminant of an enum.
rustc: ./hyper.0.5.0
cargo rustc -- -Ztime-passes -Zinput-stats
    Updating registry `https://github.com/rust-lang/crates.io-index`
   Compiling traitobject v0.0.1
   Compiling lazy_static v0.1.16
   Compiling typeable v0.1.2
   Compiling libc v0.2.14
   Compiling winapi v0.2.8
   Compiling pkg-config v0.3.8
   Compiling gcc v0.3.32
   Compiling bitflags v0.3.3
   Compiling rustc-serialize v0.3.19
   Compiling libc v0.1.12
   Compiling httparse v0.1.6
   Compiling matches v0.1.2
   Compiling winapi-build v0.1.1
   Compiling kernel32-sys v0.2.2
   Compiling unicase v0.1.0
   Compiling log v0.3.6
   Compiling mime v0.0.11
   Compiling num_cpus v0.2.13
   Compiling rand v0.3.14
   Compiling time v0.1.35
   Compiling openssl-sys v0.6.7
   Compiling openssl v0.6.7
   Compiling uuid v0.1.18
   Compiling url v0.2.38
   Compiling cookie v0.1.21
   Compiling hyper v0.5.0 (file:///root/benchmarks/hyper.0.5.0)
time: 0.032; rss: 56MB	parsing
Lines of code:             9154
Pre-expansion node count:  44838
time: 0.005; rss: 56MB	configuration
time: 0.000; rss: 56MB	recursion limit
time: 0.000; rss: 56MB	crate injection
time: 0.000; rss: 56MB	plugin loading
time: 0.000; rss: 56MB	plugin registration
time: 0.113; rss: 97MB	expansion
time: 0.000; rss: 97MB	maybe building test harness
time: 0.008; rss: 97MB	assigning node ids
Post-expansion node count: 101581
time: 0.000; rss: 97MB	checking for inline asm in case the target doesn't support it
time: 0.002; rss: 97MB	complete gated feature checking
time: 0.003; rss: 97MB	collecting defs
time: 0.010; rss: 108MB	external crate/lib resolution
time: 0.006; rss: 108MB	early lint checks
time: 0.001; rss: 108MB	AST validation
time: 0.019; rss: 112MB	name resolution
time: 0.009; rss: 120MB	lowering ast -> hir
time: 0.001; rss: 123MB	indexing hir
time: 0.001; rss: 123MB	attribute checking
time: 0.001; rss: 116MB	language item collection
time: 0.002; rss: 116MB	lifetime resolution
time: 0.000; rss: 116MB	looking for entry point
time: 0.000; rss: 116MB	looking for plugin registrar
time: 0.005; rss: 120MB	region resolution
time: 0.001; rss: 120MB	loop checking
time: 0.000; rss: 120MB	static item recursion checking
time: 0.000; rss: 120MB	load_dep_graph
time: 0.031; rss: 122MB	type collecting
time: 0.000; rss: 122MB	variance inference
time: 0.046; rss: 128MB	coherence checking
time: 0.096; rss: 131MB	wf checking
time: 0.036; rss: 131MB	item-types checking
time: 0.524; rss: 143MB	item-bodies checking
time: 0.000; rss: 143MB	drop-impl checking
time: 0.043; rss: 145MB	const checking
time: 0.006; rss: 145MB	privacy checking
time: 0.001; rss: 145MB	stability index
time: 0.006; rss: 145MB	intrinsic checking
time: 0.002; rss: 145MB	effect checking
time: 0.014; rss: 145MB	match checking
time: 0.005; rss: 145MB	liveness checking
time: 0.031; rss: 145MB	rvalue checking
time: 0.061; rss: 155MB	MIR dump
time: 0.044; rss: 155MB	MIR passes
time: 0.072; rss: 155MB	borrow checking
time: 0.003; rss: 155MB	reachability checking
time: 0.005; rss: 155MB	death checking
time: 0.005; rss: 155MB	stability checking
time: 0.000; rss: 155MB	unused lib feature checking
time: 0.049; rss: 155MB	lint checking
time: 0.000; rss: 155MB	resolving dependency formats
time: 0.092; rss: 157MB	Prepare MIR codegen passes
  time: 0.128; rss: 165MB	write metadata
  time: 0.187; rss: 169MB	translation item collection
  time: 0.021; rss: 171MB	codegen unit partitioning
  time: 0.036; rss: 290MB	internalize symbols
time: 1.564; rss: 290MB	translation
time: 0.000; rss: 290MB	assert dep graph
time: 0.000; rss: 290MB	serialize dep graph
  time: 0.088; rss: 175MB	llvm function passes [0]
  time: 0.046; rss: 174MB	llvm module passes [0]
  time: 1.589; rss: 179MB	codegen passes [0]
  time: 0.001; rss: 179MB	codegen passes [0]
time: 1.856; rss: 178MB	LLVM passes
time: 0.149; rss: 129MB	linking
done
