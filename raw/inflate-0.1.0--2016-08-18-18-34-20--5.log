commit 499484f56d336f4628a6fa016626beb3ef21ba81
Merge: 43c090e 37d974f
Author: bors <bors@rust-lang.org>
Date:   Thu Aug 18 08:54:10 2016 -0700

    Auto merge of #35684 - nikomatsakis:incr-comp-metadata-audit-35111, r=mw
    
    Restructure metadata encoder to track deps precisely
    
    This issue restructures meta-data encoding to track dependencies very precisely. It uses a cute technique I hope to spread elsewhere, where we can guard the data flowing into a new dep-graph task and ensure that it is not "leaking" information from the outside, which would result in missing edges. There are no tests because we don't know of any bugs in the old system, but it's clear that there was leaked data.
    
    The commit series is standalone, but the refactorings are kind of "windy". It's a good idea to read the comment in `src/librustc_metadata/index_builder.rs` to get a feeling for the overall strategy I was aiming at.
    
    In several cases, I wound up adding some extra hashtable lookups, I think primarily for looking up `AdtDef` instances. We could remove these by implementing `DepGraphRead` for an `AdtDef` and then having it register a read to the adt-defs table, I guess, but I doubt it is really noticeable.
    
    Eventually I think I'd like to extend this pattern to the dep-graph more generally, since it effectively guarantees that data cannot leak.
    
    Fixes #35111.
    
    r? @michaelwoerister
rustc: ./inflate-0.1.0
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling inflate v0.1.0 (file:///root/benchmarks/inflate-0.1.0)
time: 0.004; rss: 44MB	parsing
Lines of code:             956
Pre-expansion node count:  4740
time: 0.000; rss: 44MB	configuration
time: 0.000; rss: 44MB	recursion limit
time: 0.000; rss: 44MB	crate injection
time: 0.000; rss: 44MB	plugin loading
time: 0.000; rss: 44MB	plugin registration
time: 0.074; rss: 84MB	expansion
time: 0.000; rss: 84MB	maybe building test harness
time: 0.003; rss: 84MB	assigning node ids
Post-expansion node count: 55770
time: 0.000; rss: 84MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 84MB	complete gated feature checking
time: 0.005; rss: 84MB	collecting defs
time: 0.001; rss: 84MB	external crate/lib resolution
time: 0.002; rss: 84MB	early lint checks
time: 0.000; rss: 84MB	AST validation
time: 0.010; rss: 87MB	name resolution
time: 0.006; rss: 91MB	lowering ast -> hir
time: 0.001; rss: 93MB	indexing hir
time: 0.001; rss: 93MB	attribute checking
time: 0.001; rss: 90MB	language item collection
time: 0.001; rss: 90MB	lifetime resolution
time: 0.000; rss: 90MB	looking for entry point
time: 0.000; rss: 90MB	looking for plugin registrar
time: 0.004; rss: 91MB	region resolution
time: 0.000; rss: 91MB	loop checking
time: 0.000; rss: 91MB	static item recursion checking
time: 0.000; rss: 91MB	load_dep_graph
time: 0.001; rss: 92MB	type collecting
time: 0.000; rss: 92MB	variance inference
time: 0.009; rss: 94MB	coherence checking
time: 0.002; rss: 94MB	wf checking
time: 0.002; rss: 94MB	item-types checking
time: 2.631; rss: 106MB	item-bodies checking
time: 0.000; rss: 106MB	drop-impl checking
time: 0.016; rss: 106MB	const checking
time: 0.001; rss: 106MB	privacy checking
time: 0.000; rss: 106MB	stability index
time: 0.001; rss: 106MB	intrinsic checking
time: 0.001; rss: 106MB	effect checking
time: 0.004; rss: 106MB	match checking
time: 0.063; rss: 105MB	liveness checking
time: 0.011; rss: 105MB	rvalue checking
time: 0.038; rss: 128MB	MIR dump
time: 0.024; rss: 125MB	MIR passes
time: 0.201; rss: 127MB	borrow checking
time: 0.000; rss: 127MB	reachability checking
time: 0.003; rss: 127MB	death checking
time: 0.002; rss: 127MB	stability checking
time: 0.000; rss: 127MB	unused lib feature checking
time: 0.020; rss: 127MB	lint checking
time: 0.000; rss: 127MB	resolving dependency formats
time: 0.181; rss: 126MB	Prepare MIR codegen passes
  time: 0.003; rss: 127MB	write metadata
  time: 0.010; rss: 128MB	translation item collection
  time: 0.001; rss: 128MB	codegen unit partitioning
  time: 0.002; rss: 150MB	internalize symbols
time: 0.221; rss: 134MB	translation
time: 0.000; rss: 134MB	assert dep graph
time: 0.000; rss: 134MB	serialize dep graph
  time: 0.029; rss: 105MB	llvm function passes [0]
  time: 0.005; rss: 105MB	llvm module passes [0]
  time: 0.644; rss: 114MB	codegen passes [0]
  time: 0.000; rss: 114MB	codegen passes [0]
time: 0.713; rss: 114MB	LLVM passes
time: 0.000; rss: 114MB	serialize work products
time: 0.047; rss: 98MB	linking
done
