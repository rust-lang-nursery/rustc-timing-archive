commit 645dd013ac6b334ab5bf7a7240c2243f4bb590c9
Merge: 1930483 e078667
Author: bors <bors@rust-lang.org>
Date:   Sun Apr 24 17:04:49 2016 -0700

    Auto merge of #33085 - fitzgen:make-enumerate-example-more-clear, r=steveklabnik
    
    Make the `Iterator::enumerate` doc example more clear
    
    The example uses integers for the value being iterated over, but the indices
    added by `enumerate` are also integers, so I always end up double taking and
    thinking harder than I should when parsing the documentation. I also always
    forget which order the index and value are in the tuple so I frequently hit this
    stumbling block. This commit changes the documentation to iterate over
    characters so that it is immediately obvious which part of the tuple is the
    index and which is the value.
rustc: ./regex.0.1.30
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling regex v0.1.30 (file:///root/benchmarks/regex.0.1.30)
time: 0.058; rss: 63MB	parsing
Lines of code:             8558
Pre-expansion node count:  58217
time: 0.011; rss: 63MB	configuration 1
time: 0.000; rss: 63MB	recursion limit
time: 0.001; rss: 63MB	gated macro checking
time: 0.000; rss: 63MB	crate injection
time: 0.003; rss: 68MB	macro loading
time: 0.000; rss: 68MB	plugin loading
time: 0.000; rss: 68MB	plugin registration
time: 0.057; rss: 69MB	expansion
time: 0.001; rss: 69MB	complete gated feature checking 1
time: 0.013; rss: 69MB	configuration 2
time: 0.000; rss: 69MB	gated configuration checking
time: 0.006; rss: 69MB	maybe building test harness
time: 0.006; rss: 69MB	prelude injection
time: 0.001; rss: 69MB	checking that all macro invocations are gone
time: 0.000; rss: 69MB	checking for inline asm in case the target doesn't support it
time: 0.001; rss: 69MB	complete gated feature checking 2
time: 0.001; rss: 69MB	const fn bodies and arguments
Post-expansion node count: 68485
time: 0.006; rss: 69MB	assigning node ids
time: 0.001; rss: 69MB	collecting defs
time: 0.001; rss: 69MB	external crate/lib resolution
time: 0.009; rss: 78MB	lowering ast -> hir
time: 0.001; rss: 80MB	indexing hir
time: 0.001; rss: 80MB	attribute checking
time: 0.006; rss: 80MB	early lint checks
time: 0.001; rss: 73MB	language item collection
time: 0.008; rss: 83MB	name resolution
time: 0.001; rss: 83MB	lifetime resolution
time: 0.000; rss: 83MB	looking for entry point
time: 0.000; rss: 83MB	looking for plugin registrar
time: 0.005; rss: 87MB	region resolution
time: 0.001; rss: 87MB	loop checking
time: 0.001; rss: 87MB	static item recursion checking
time: 0.000; rss: 87MB	load_dep_graph
time: 0.007; rss: 97MB	type collecting
time: 0.000; rss: 97MB	variance inference
time: 0.024; rss: 108MB	coherence checking
time: 0.010; rss: 109MB	wf checking
time: 0.255; rss: 114MB	item-types checking
time: 0.188; rss: 128MB	item-bodies checking
time: 0.000; rss: 128MB	drop-impl checking
time: 0.024; rss: 128MB	const checking
time: 0.004; rss: 128MB	privacy checking
time: 0.001; rss: 128MB	stability index
time: 0.001; rss: 128MB	intrinsic checking
time: 0.001; rss: 128MB	effect checking
time: 0.003; rss: 128MB	match checking
time: 0.002; rss: 128MB	liveness checking
time: 0.007; rss: 128MB	rvalue checking
time: 0.015; rss: 129MB	MIR dump
time: 0.007; rss: 129MB	MIR passes
time: 0.019; rss: 129MB	borrow checking
time: 0.000; rss: 129MB	reachability checking
time: 0.003; rss: 129MB	death checking
time: 0.002; rss: 129MB	stability checking
time: 0.000; rss: 129MB	unused lib feature checking
time: 0.028; rss: 129MB	lint checking
time: 0.000; rss: 129MB	resolving dependency formats
time: 0.003; rss: 129MB	Prepare MIR codegen passes
  time: 0.056; rss: 138MB	translation item collection
  time: 0.001; rss: 138MB	codegen unit partitioning
  time: 0.129; rss: 187MB	write metadata
time: 0.620; rss: 187MB	translation
time: 0.000; rss: 187MB	assert dep graph
time: 0.000; rss: 187MB	serialize dep graph
  time: 0.036; rss: 124MB	llvm function passes [0]
  time: 0.017; rss: 125MB	llvm module passes [0]
  time: 0.613; rss: 129MB	codegen passes [0]
  time: 0.001; rss: 111MB	codegen passes [0]
time: 0.738; rss: 110MB	LLVM passes
time: 0.065; rss: 108MB	linking
done
