commit 38a959a543dfc70a67e64f7d369ed6c9e12fc806
Merge: 57f971b 74bb594
Author: bors <bors@rust-lang.org>
Date:   Tue Nov 8 02:06:45 2016 -0800

    Auto merge of #36843 - petrochenkov:dotstab, r=nikomatsakis
    
    Stabilize `..` in tuple (struct) patterns
    
    I'd like to nominate `..` in tuple and tuple struct patterns for stabilization.
    This feature is a relatively small extension to existing stable functionality and doesn't have known blockers.
    The feature first appeared in Rust 1.10 6 months ago.
    An example of use: https://github.com/rust-lang/rust/pull/36203
    
    Closes https://github.com/rust-lang/rust/issues/33627
    r? @nikomatsakis
rustc: ./syntex-0.42.2-incr-clean
RUSTFLAGS="-Z incremental=incr" \
    cargo rustc -p syntex_syntax -- -Ztime-passes -Zinput-stats -Z incremental-info
   Compiling syntex_syntax v0.42.0
time: 0.094; rss: 71MB	parsing
Lines of code:             33687
Pre-expansion node count:  224033
time: 0.000; rss: 71MB	recursion limit
time: 0.000; rss: 71MB	crate injection
time: 0.000; rss: 71MB	plugin loading
time: 0.000; rss: 71MB	plugin registration
time: 0.237; rss: 144MB	expansion
time: 0.000; rss: 144MB	maybe building test harness
time: 0.006; rss: 144MB	maybe creating a macro crate
Post-expansion node count: 641571
time: 0.000; rss: 144MB	checking for inline asm in case the target doesn't support it
time: 0.013; rss: 144MB	complete gated feature checking
time: 0.022; rss: 144MB	early lint checks
time: 0.007; rss: 144MB	AST validation
time: 0.084; rss: 158MB	name resolution
time: 0.045; rss: 183MB	lowering ast -> hir
time: 0.008; rss: 194MB	indexing hir
time: 0.006; rss: 194MB	attribute checking
time: 0.004; rss: 150MB	language item collection
time: 0.010; rss: 150MB	lifetime resolution
time: 0.000; rss: 150MB	looking for entry point
time: 0.000; rss: 150MB	looking for plugin registrar
time: 0.042; rss: 161MB	region resolution
time: 0.004; rss: 161MB	loop checking
time: 0.004; rss: 161MB	static item recursion checking
time: 0.328; rss: 162MB	compute_incremental_hashes_map
time: 0.000; rss: 162MB	load_dep_graph
time: 0.040; rss: 167MB	type collecting
time: 0.001; rss: 167MB	variance inference
time: 0.034; rss: 172MB	coherence checking
time: 0.097; rss: 175MB	wf checking
time: 0.197; rss: 180MB	item-types checking
time: 3.633; rss: 228MB	item-bodies checking
time: 0.000; rss: 228MB	drop-impl checking
time: 0.246; rss: 233MB	const checking
time: 0.047; rss: 234MB	privacy checking
time: 0.005; rss: 234MB	stability index
time: 0.020; rss: 234MB	intrinsic checking
time: 0.016; rss: 234MB	effect checking
time: 0.050; rss: 234MB	match checking
time: 0.052; rss: 227MB	liveness checking
time: 0.209; rss: 227MB	rvalue checking
time: 0.409; rss: 418MB	MIR dump
  time: 0.057; rss: 421MB	SimplifyCfg
  time: 0.077; rss: 421MB	QualifyAndPromoteConstants
  time: 0.107; rss: 422MB	TypeckMir
  time: 0.004; rss: 422MB	SimplifyBranches
  time: 0.031; rss: 422MB	SimplifyCfg
time: 0.275; rss: 422MB	MIR cleanup and validation
time: 0.546; rss: 423MB	borrow checking
time: 0.017; rss: 423MB	reachability checking
time: 0.041; rss: 423MB	death checking
time: 0.040; rss: 423MB	stability checking
time: 0.000; rss: 423MB	unused lib feature checking
time: 0.222; rss: 423MB	lint checking
time: 0.000; rss: 423MB	resolving dependency formats
  time: 0.003; rss: 423MB	NoLandingPads
  time: 0.026; rss: 423MB	SimplifyCfg
  time: 0.068; rss: 431MB	EraseRegions
  time: 0.011; rss: 431MB	AddCallGuards
  time: 0.282; rss: 449MB	ElaborateDrops
  time: 0.003; rss: 449MB	NoLandingPads
  time: 0.052; rss: 449MB	SimplifyCfg
  time: 0.030; rss: 449MB	InstCombine
  time: 0.013; rss: 449MB	Deaggregator
  time: 0.003; rss: 449MB	CopyPropagation
  time: 0.035; rss: 449MB	SimplifyLocals
  time: 0.010; rss: 449MB	AddCallGuards
  time: 0.003; rss: 449MB	PreTrans
time: 0.539; rss: 449MB	MIR optimisations
  time: 0.062; rss: 457MB	write metadata
  time: 0.427; rss: 467MB	translation item collection
  time: 0.057; rss: 478MB	codegen unit partitioning
  time: 0.048; rss: 726MB	internalize symbols
time: 4.876; rss: 726MB	translation
time: 0.000; rss: 726MB	assert dep graph
time: 0.000; rss: 726MB	serialize dep graph
incremental: re-using 0 out of 1 modules
  time: 0.535; rss: 417MB	llvm function passes [0]
  time: 0.261; rss: 426MB	llvm module passes [0]
  time: 10.464; rss: 421MB	codegen passes [0]
  time: 0.000; rss: 421MB	codegen passes [0]
time: 12.024; rss: 421MB	LLVM passes
time: 0.000; rss: 421MB	serialize work products
time: 0.344; rss: 105MB	linking
done
