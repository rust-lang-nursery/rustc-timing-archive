commit e804a3cf256106c097d44f6e0212cd183122da07
Merge: 271d048 06acf16
Author: bors <bors@rust-lang.org>
Date:   Thu Aug 4 03:01:37 2016 -0700

    Auto merge of #35168 - scottcarr:deaggregation, r=nikomatsakis
    
    [MIR] Deaggregate structs to enable further optimizations
    
    Currently, we generate MIR like:
    
    ```
    tmp0 = ...;
    tmp1 = ...;
    tmp3 = Foo { a: ..., b: ... };
    ```
    
    This PR implements "deaggregation," i.e.:
    
    ```
    tmp3.0 = ...
    tmp3.1 = ...
    ```
    
    Currently, the code only deaggregates structs, not enums.  My understanding is that we do not have MIR to set the discriminant of an enum.
rustc: ./jld-day15-parser
cargo rustc -- -Ztime-passes -Zinput-stats
    Updating registry `https://github.com/rust-lang/crates.io-index`
   Compiling combine v1.3.0
   Compiling day15 v0.1.0 (file:///root/benchmarks/jld-day15-parser)
time: 0.001; rss: 48MB	parsing
Lines of code:             72
Pre-expansion node count:  654
time: 0.000; rss: 48MB	configuration
time: 0.000; rss: 48MB	recursion limit
time: 0.000; rss: 48MB	crate injection
time: 0.000; rss: 48MB	plugin loading
time: 0.000; rss: 48MB	plugin registration
time: 0.019; rss: 84MB	expansion
time: 0.000; rss: 84MB	maybe building test harness
time: 0.000; rss: 84MB	assigning node ids
Post-expansion node count: 1155
time: 0.000; rss: 84MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 84MB	complete gated feature checking
time: 0.000; rss: 84MB	collecting defs
time: 0.004; rss: 88MB	external crate/lib resolution
time: 0.000; rss: 88MB	early lint checks
time: 0.000; rss: 88MB	AST validation
time: 0.001; rss: 88MB	name resolution
time: 0.000; rss: 88MB	lowering ast -> hir
time: 0.000; rss: 88MB	indexing hir
time: 0.000; rss: 88MB	attribute checking
time: 0.000; rss: 88MB	language item collection
time: 0.000; rss: 88MB	lifetime resolution
time: 0.000; rss: 88MB	looking for entry point
time: 0.000; rss: 88MB	looking for plugin registrar
time: 0.000; rss: 88MB	region resolution
time: 0.000; rss: 88MB	loop checking
time: 0.000; rss: 88MB	static item recursion checking
time: 0.000; rss: 88MB	load_dep_graph
time: 0.001; rss: 88MB	type collecting
time: 0.000; rss: 88MB	variance inference
time: 0.005; rss: 88MB	coherence checking
time: 0.007; rss: 88MB	wf checking
time: 0.000; rss: 88MB	item-types checking
time: 0.048; rss: 100MB	item-bodies checking
time: 0.000; rss: 100MB	drop-impl checking
time: 0.001; rss: 100MB	const checking
time: 0.000; rss: 100MB	privacy checking
time: 0.000; rss: 100MB	stability index
time: 0.000; rss: 100MB	intrinsic checking
time: 0.000; rss: 100MB	effect checking
time: 0.000; rss: 100MB	match checking
time: 0.000; rss: 100MB	liveness checking
time: 0.001; rss: 100MB	rvalue checking
time: 0.001; rss: 100MB	MIR dump
time: 0.001; rss: 100MB	MIR passes
time: 0.001; rss: 100MB	borrow checking
time: 0.000; rss: 100MB	reachability checking
time: 0.000; rss: 100MB	death checking
time: 0.000; rss: 100MB	stability checking
time: 0.000; rss: 100MB	unused lib feature checking
time: 0.004; rss: 100MB	lint checking
time: 0.002; rss: 100MB	resolving dependency formats
time: 0.002; rss: 100MB	Prepare MIR codegen passes
  time: 0.000; rss: 100MB	write metadata
  time: 0.623; rss: 106MB	translation item collection
  time: 0.004; rss: 106MB	codegen unit partitioning
  time: 0.007; rss: 131MB	internalize symbols
time: 3.063; rss: 131MB	translation
time: 0.000; rss: 131MB	assert dep graph
time: 0.000; rss: 131MB	serialize dep graph
  time: 0.013; rss: 108MB	llvm function passes [0]
  time: 0.001; rss: 108MB	llvm module passes [0]
  time: 0.269; rss: 113MB	codegen passes [0]
  time: 0.000; rss: 113MB	codegen passes [0]
time: 0.284; rss: 113MB	LLVM passes
  time: 0.117; rss: 108MB	running linker
time: 0.117; rss: 108MB	linking
done
