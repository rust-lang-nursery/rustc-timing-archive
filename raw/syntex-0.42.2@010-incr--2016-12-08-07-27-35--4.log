commit 816a34aca23f3ebd0fddf79ebdf96c9fae976f58
Merge: d9aae63 a1882ca
Author: bors <bors@rust-lang.org>
Date:   Thu Dec 8 07:05:19 2016 +0000

    Auto merge of #38146 - kali:master, r=alexcrichton
    
    fix objc ABI in std::env::args
    
    iOS use different calling convention for `objc_msgSend` depending on the platform. armv7 expect good old variadic arguments, but aarch64 wants "normal" convention: `objc_msgSend` has to be called mimicking the actual callee prototype.
    
    https://developer.apple.com/library/content/documentation/General/Conceptual/CocoaTouch64BitGuide/ConvertingYourAppto64-Bit/ConvertingYourAppto64-Bit.html#//apple_ref/doc/uid/TP40013501-CH3-SW26
    
    This currently breaks std::env:args() on aarch64 iOS devices. As far as I can tell, in the standard library, this is the only occurrence of ObjectiveC dispatching.
rustc: ./syntex-0.42.2@010-incr@010-incr
find . -name '*.rs' | xargs touch
RUSTFLAGS="-Z incremental=incr" \
    cargo rustc -p syntex_syntax  -- \
    -Ztime-passes -Zinput-stats -Z incremental-info
time: 0.092; rss: 75MB	parsing
Lines of code:             33687
Pre-expansion node count:  223115
time: 0.000; rss: 75MB	recursion limit
time: 0.000; rss: 75MB	crate injection
time: 0.000; rss: 75MB	plugin loading
time: 0.000; rss: 75MB	plugin registration
time: 0.241; rss: 151MB	expansion
time: 0.000; rss: 151MB	maybe building test harness
time: 0.006; rss: 151MB	maybe creating a macro crate
Post-expansion node count: 638863
time: 0.000; rss: 151MB	checking for inline asm in case the target doesn't support it
time: 0.012; rss: 151MB	complete gated feature checking
time: 0.023; rss: 151MB	early lint checks
time: 0.007; rss: 151MB	AST validation
time: 0.075; rss: 166MB	name resolution
time: 0.058; rss: 199MB	lowering ast -> hir
time: 0.011; rss: 192MB	indexing hir
time: 0.006; rss: 192MB	attribute checking
time: 0.002; rss: 153MB	language item collection
time: 0.011; rss: 156MB	lifetime resolution
time: 0.000; rss: 156MB	looking for entry point
time: 0.000; rss: 156MB	looking for plugin registrar
time: 0.046; rss: 176MB	region resolution
time: 0.008; rss: 176MB	loop checking
time: 0.002; rss: 176MB	static item recursion checking
time: 0.381; rss: 178MB	compute_incremental_hashes_map
time: 0.000; rss: 178MB	load_dep_graph
time: 0.009; rss: 178MB	stability index
time: 0.019; rss: 181MB	stability checking
time: 0.054; rss: 189MB	type collecting
time: 0.004; rss: 189MB	variance inference
time: 0.006; rss: 193MB	impl wf inference
time: 0.026; rss: 197MB	coherence checking
time: 0.088; rss: 199MB	wf checking
time: 0.196; rss: 208MB	item-types checking
time: 3.572; rss: 265MB	item-bodies checking
time: 0.000; rss: 265MB	drop-impl checking
time: 0.282; rss: 276MB	const checking
time: 0.073; rss: 277MB	privacy checking
time: 0.023; rss: 283MB	intrinsic checking
time: 0.018; rss: 283MB	effect checking
time: 0.066; rss: 283MB	match checking
time: 0.059; rss: 290MB	liveness checking
time: 0.171; rss: 292MB	rvalue checking
time: 0.361; rss: 481MB	MIR dump
  time: 0.057; rss: 483MB	SimplifyCfg
  time: 0.073; rss: 483MB	QualifyAndPromoteConstants
  time: 0.122; rss: 500MB	TypeckMir
  time: 0.004; rss: 500MB	SimplifyBranches
  time: 0.033; rss: 500MB	SimplifyCfg
time: 0.289; rss: 500MB	MIR cleanup and validation
time: 0.478; rss: 500MB	borrow checking
time: 0.024; rss: 500MB	reachability checking
time: 0.038; rss: 500MB	death checking
time: 0.000; rss: 500MB	unused lib feature checking
time: 0.181; rss: 500MB	lint checking
time: 0.000; rss: 500MB	resolving dependency formats
  time: 0.004; rss: 500MB	NoLandingPads
  time: 0.027; rss: 500MB	SimplifyCfg
  time: 0.064; rss: 509MB	EraseRegions
  time: 0.011; rss: 509MB	AddCallGuards
  time: 0.270; rss: 531MB	ElaborateDrops
  time: 0.004; rss: 531MB	NoLandingPads
  time: 0.054; rss: 529MB	SimplifyCfg
  time: 0.029; rss: 528MB	InstCombine
  time: 0.012; rss: 528MB	Deaggregator
  time: 0.003; rss: 528MB	CopyPropagation
  time: 0.035; rss: 528MB	SimplifyLocals
  time: 0.010; rss: 528MB	AddCallGuards
  time: 0.003; rss: 528MB	PreTrans
time: 0.525; rss: 528MB	MIR optimisations
  time: 0.064; rss: 536MB	write metadata
  time: 0.394; rss: 549MB	translation item collection
  time: 0.072; rss: 554MB	codegen unit partitioning
  time: 0.047; rss: 1456MB	internalize symbols
time: 11.859; rss: 1456MB	translation
time: 0.000; rss: 1456MB	assert dep graph
time: 1.409; rss: 1484MB	serialize dep graph
incremental: re-using 0 out of 50 modules
time: 0.001; rss: 1196MB	llvm function passes [1]
time: 0.000; rss: 1196MB	llvm module passes [1]
time: 0.001; rss: 1209MB	llvm function passes [0]
time: 0.000; rss: 1211MB	llvm module passes [0]
time: 0.002; rss: 1211MB	llvm function passes [2]
time: 0.000; rss: 1211MB	llvm module passes [2]
time: 0.002; rss: 1211MB	llvm function passes [6]
time: 0.000; rss: 1211MB	llvm module passes [6]
time: 0.003; rss: 1211MB	codegen passes [1]
time: 0.004; rss: 1211MB	llvm function passes [5]
time: 0.001; rss: 1213MB	llvm function passes [15]
time: 0.001; rss: 1218MB	llvm module passes [15]
time: 0.011; rss: 1222MB	llvm function passes [4]
time: 0.011; rss: 1222MB	llvm module passes [5]
time: 0.016; rss: 1222MB	llvm function passes [3]
time: 0.008; rss: 1228MB	llvm module passes [4]
time: 0.007; rss: 1234MB	llvm module passes [3]
time: 0.035; rss: 1243MB	codegen passes [0]
time: 0.017; rss: 1243MB	llvm function passes [16]
time: 0.031; rss: 1243MB	llvm function passes [25]
time: 0.000; rss: 1245MB	llvm function passes [10]
time: 0.000; rss: 1245MB	llvm module passes [10]
time: 0.035; rss: 1245MB	llvm function passes [14]
time: 0.009; rss: 1249MB	llvm module passes [25]
time: 0.008; rss: 1250MB	llvm module passes [14]
time: 0.020; rss: 1254MB	codegen passes [10]
time: 0.061; rss: 1256MB	codegen passes [2]
time: 0.000; rss: 1256MB	llvm function passes [2]
time: 0.000; rss: 1256MB	llvm module passes [2]
time: 0.034; rss: 1258MB	llvm module passes [16]
time: 0.058; rss: 1260MB	llvm function passes [31]
time: 0.010; rss: 1264MB	llvm module passes [31]
time: 0.092; rss: 1275MB	codegen passes [6]
time: 0.000; rss: 1275MB	llvm function passes [18]
time: 0.000; rss: 1275MB	llvm module passes [18]
time: 0.037; rss: 1275MB	codegen passes [2]
time: 0.001; rss: 1275MB	codegen passes [18]
time: 0.048; rss: 1280MB	llvm function passes [10]
time: 0.000; rss: 1280MB	llvm module passes [10]
time: 0.086; rss: 1288MB	llvm function passes [13]
time: 0.001; rss: 1288MB	llvm module passes [13]
time: 0.057; rss: 1287MB	llvm function passes [11]
time: 0.000; rss: 1287MB	llvm module passes [11]
time: 0.122; rss: 1287MB	codegen passes [15]
time: 0.092; rss: 1287MB	llvm function passes [12]
time: 0.119; rss: 1287MB	llvm function passes [26]
time: 0.127; rss: 1298MB	codegen passes [5]
time: 0.016; rss: 1298MB	llvm module passes [12]
time: 0.153; rss: 1298MB	llvm function passes [7]
time: 0.054; rss: 1298MB	llvm function passes [20]
time: 0.122; rss: 1298MB	llvm function passes [0]
time: 0.023; rss: 1298MB	llvm function passes [5]
time: 0.008; rss: 1302MB	llvm module passes [5]
time: 0.038; rss: 1306MB	llvm module passes [20]
time: 0.064; rss: 1306MB	llvm function passes [15]
time: 0.083; rss: 1306MB	codegen passes [10]
time: 0.071; rss: 1310MB	llvm module passes [26]
time: 0.058; rss: 1314MB	llvm module passes [0]
time: 0.091; rss: 1314MB	codegen passes [11]
time: 0.125; rss: 1316MB	llvm function passes [17]
time: 0.227; rss: 1316MB	llvm function passes [1]
time: 0.084; rss: 1316MB	llvm module passes [7]
time: 0.048; rss: 1320MB	llvm module passes [15]
time: 0.030; rss: 1322MB	llvm module passes [17]
time: 0.131; rss: 1333MB	codegen passes [13]
time: 0.000; rss: 1333MB	llvm function passes [13]
time: 0.000; rss: 1333MB	llvm module passes [13]
time: 0.149; rss: 1339MB	llvm function passes [22]
time: 0.000; rss: 1341MB	codegen passes [39]
time: 0.178; rss: 1353MB	llvm function passes [23]
time: 0.126; rss: 1359MB	llvm function passes [10]
time: 0.051; rss: 1353MB	llvm module passes [22]
time: 0.033; rss: 1355MB	llvm module passes [23]
time: 0.032; rss: 1358MB	llvm module passes [10]
time: 0.343; rss: 1358MB	llvm function passes [32]
time: 0.107; rss: 1358MB	llvm function passes [30]
time: 0.144; rss: 1361MB	llvm module passes [1]
time: 0.046; rss: 1363MB	codegen passes [13]
time: 0.097; rss: 1366MB	llvm function passes [27]
time: 0.282; rss: 1366MB	llvm function passes [19]
time: 0.034; rss: 1373MB	llvm module passes [30]
time: 0.142; rss: 1373MB	llvm function passes [34]
time: 0.316; rss: 1373MB	llvm function passes [6]
time: 0.029; rss: 1372MB	llvm module passes [27]
time: 0.032; rss: 1372MB	llvm module passes [19]
time: 0.025; rss: 1374MB	llvm module passes [34]
time: 0.341; rss: 1383MB	llvm function passes [21]
time: 0.359; rss: 1382MB	llvm function passes [18]
time: 0.189; rss: 1382MB	llvm function passes [38]
time: 0.165; rss: 1382MB	llvm function passes [28]
time: 0.024; rss: 1390MB	llvm module passes [28]
time: 0.058; rss: 1393MB	llvm module passes [18]
time: 0.066; rss: 1390MB	llvm module passes [38]
time: 0.229; rss: 1390MB	llvm function passes [37]
time: 0.176; rss: 1395MB	llvm module passes [32]
time: 0.088; rss: 1395MB	llvm module passes [21]
time: 0.330; rss: 1393MB	llvm function passes [11]
time: 0.029; rss: 1395MB	llvm module passes [37]
time: 0.397; rss: 1398MB	llvm function passes [24]
time: 0.350; rss: 1403MB	llvm function passes [8]
time: 0.362; rss: 1407MB	llvm function passes [35]
time: 0.230; rss: 1412MB	llvm module passes [6]
time: 0.396; rss: 1412MB	llvm function passes [29]
time: 0.690; rss: 1408MB	llvm function passes [33]
time: 0.124; rss: 1409MB	llvm module passes [8]
time: 0.157; rss: 1410MB	llvm module passes [24]
time: 0.239; rss: 1410MB	codegen passes [38]
time: 0.530; rss: 1414MB	llvm function passes [36]
time: 0.695; rss: 1414MB	llvm function passes [2]
time: 0.195; rss: 1416MB	codegen passes [37]
time: 0.729; rss: 1407MB	codegen passes [4]
time: 0.224; rss: 1408MB	llvm module passes [35]
time: 0.062; rss: 1410MB	llvm module passes [2]
time: 0.096; rss: 1416MB	llvm module passes [36]
time: 0.600; rss: 1418MB	codegen passes [5]
time: 0.364; rss: 1416MB	llvm module passes [11]
time: 0.410; rss: 1414MB	codegen passes [28]
time: 0.434; rss: 1411MB	llvm module passes [29]
time: 0.580; rss: 1444MB	llvm module passes [33]
time: 1.211; rss: 1461MB	codegen passes [3]
time: 1.321; rss: 1457MB	codegen passes [16]
time: 1.074; rss: 1456MB	codegen passes [15]
time: 1.215; rss: 1458MB	codegen passes [27]
time: 1.251; rss: 1457MB	codegen passes [31]
time: 1.506; rss: 1411MB	codegen passes [14]
time: 1.509; rss: 1427MB	codegen passes [30]
time: 1.842; rss: 1425MB	codegen passes [25]
time: 1.701; rss: 1420MB	codegen passes [23]
time: 1.610; rss: 1423MB	codegen passes [8]
time: 1.968; rss: 1426MB	codegen passes [10]
time: 2.214; rss: 1462MB	codegen passes [12]
time: 2.161; rss: 1512MB	codegen passes [6]
time: 2.656; rss: 1529MB	codegen passes [20]
time: 2.643; rss: 1535MB	codegen passes [34]
time: 2.678; rss: 1541MB	codegen passes [22]
time: 2.977; rss: 1583MB	codegen passes [19]
time: 3.175; rss: 1619MB	codegen passes [26]
time: 3.376; rss: 1600MB	codegen passes [17]
time: 3.425; rss: 1673MB	codegen passes [2]
time: 3.869; rss: 1670MB	codegen passes [0]
time: 3.300; rss: 1635MB	codegen passes [29]
time: 3.833; rss: 1702MB	codegen passes [21]
time: 4.162; rss: 1658MB	codegen passes [7]
time: 4.465; rss: 1614MB	codegen passes [18]
time: 3.909; rss: 1569MB	codegen passes [36]
time: 4.719; rss: 1547MB	codegen passes [35]
time: 4.230; rss: 1557MB	codegen passes [11]
time: 4.505; rss: 1508MB	codegen passes [32]
time: 4.840; rss: 1441MB	codegen passes [24]
time: 5.223; rss: 1393MB	codegen passes [1]
time: 5.118; rss: 1319MB	codegen passes [33]
time: 7.356; rss: 1318MB	LLVM passes
time: 0.000; rss: 1318MB	serialize work products
time: 1.054; rss: 289MB	linking
done
