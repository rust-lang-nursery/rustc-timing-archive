commit cd6a400175cc230008a5094a8bbb44a3794f0465
Merge: 4fdf2c4 24cfa1e
Author: bors <bors@rust-lang.org>
Date:   Mon May 16 14:41:50 2016 -0700

    Auto merge of #33588 - nikomatsakis:compiletest-ui, r=acrichto
    
    add UI testing framework
    
    This adds a framework for capturing and tracking the precise output of rustc, which allows us to check all manner of minor details with the output. It's pretty strict right now -- the output must match almost exactly -- and hence maybe a bit too strict. But I figure we can add wildcards or whatever later. There is also a script intended to make updating the references easy, though the script could make things a *bit* easier (in particular, it'd be nice if it would find the build directory for you automatically).
    
    One thing I was wondering about is the best way to test colors. Since windows doesn't embed those in the output stream, this test framework can't test colors on windows -- so I figure we can just write tests that are ignored on windows and which pass `--color=always` or whatever to rustc.
    
    cc @jonathandturner
    r? @alexcrichton
rustc: ./rust-encoding.0.2.32
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling encoding v0.2.32 (file:///root/benchmarks/rust-encoding.0.2.32)
time: 0.024; rss: 51MB	parsing
Lines of code:             6441
Pre-expansion node count:  30537
time: 0.005; rss: 51MB	configuration 1
time: 0.000; rss: 55MB	recursion limit
time: 0.000; rss: 55MB	crate injection
time: 0.004; rss: 61MB	macro loading
time: 0.000; rss: 61MB	plugin loading
time: 0.000; rss: 61MB	plugin registration
time: 0.044; rss: 61MB	expansion
time: 0.006; rss: 61MB	configuration 2
time: 0.000; rss: 61MB	gated configuration checking
time: 0.003; rss: 61MB	maybe building test harness
time: 0.003; rss: 61MB	prelude injection
time: 0.000; rss: 61MB	checking that all macro invocations are gone
time: 0.000; rss: 61MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 61MB	complete gated feature checking
Post-expansion node count: 41376
time: 0.003; rss: 61MB	assigning node ids
time: 0.001; rss: 61MB	collecting defs
time: 0.001; rss: 61MB	external crate/lib resolution
time: 0.002; rss: 61MB	early lint checks
time: 0.008; rss: 69MB	name resolution
time: 0.004; rss: 71MB	lowering ast -> hir
time: 0.000; rss: 71MB	indexing hir
time: 0.000; rss: 71MB	attribute checking
time: 0.000; rss: 73MB	language item collection
time: 0.000; rss: 73MB	lifetime resolution
time: 0.000; rss: 73MB	looking for entry point
time: 0.000; rss: 73MB	looking for plugin registrar
time: 0.002; rss: 75MB	region resolution
time: 0.000; rss: 75MB	loop checking
time: 0.000; rss: 75MB	static item recursion checking
time: 0.000; rss: 75MB	load_dep_graph
time: 0.005; rss: 78MB	type collecting
time: 0.000; rss: 78MB	variance inference
time: 0.022; rss: 96MB	coherence checking
time: 0.023; rss: 98MB	wf checking
time: 0.016; rss: 98MB	item-types checking
time: 0.239; rss: 106MB	item-bodies checking
time: 0.000; rss: 106MB	drop-impl checking
time: 0.013; rss: 106MB	const checking
time: 0.002; rss: 106MB	privacy checking
time: 0.000; rss: 106MB	stability index
time: 0.002; rss: 106MB	intrinsic checking
time: 0.000; rss: 106MB	effect checking
time: 0.007; rss: 106MB	match checking
time: 0.002; rss: 106MB	liveness checking
time: 0.008; rss: 106MB	rvalue checking
time: 0.023; rss: 112MB	MIR dump
time: 0.015; rss: 113MB	MIR passes
time: 0.025; rss: 113MB	borrow checking
time: 0.000; rss: 113MB	reachability checking
time: 0.002; rss: 113MB	death checking
time: 0.002; rss: 113MB	stability checking
time: 0.000; rss: 113MB	unused lib feature checking
time: 0.024; rss: 113MB	lint checking
time: 0.000; rss: 113MB	resolving dependency formats
time: 0.004; rss: 114MB	Prepare MIR codegen passes
  time: 0.028; rss: 118MB	translation item collection
  time: 0.001; rss: 118MB	codegen unit partitioning
  time: 0.058; rss: 150MB	write metadata
time: 0.354; rss: 150MB	translation
time: 0.000; rss: 150MB	assert dep graph
time: 0.000; rss: 150MB	serialize dep graph
  time: 0.026; rss: 116MB	llvm function passes [0]
  time: 0.050; rss: 120MB	llvm module passes [0]
  time: 0.595; rss: 125MB	codegen passes [0]
  time: 0.001; rss: 110MB	codegen passes [0]
time: 0.736; rss: 109MB	LLVM passes
time: 0.053; rss: 108MB	linking
done
