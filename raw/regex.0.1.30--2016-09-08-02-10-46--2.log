commit a5dbf8a0f8843c5466c3866cc2a288c0ef7051d2
Merge: 4a26286 a77b55d
Author: bors <bors@rust-lang.org>
Date:   Wed Sep 7 22:30:48 2016 -0700

    Auto merge of #36310 - jstnlef:remove-extraneous-not-equal-impl, r=sfackler
    
    Removing the extraneous not_equal implementation for slices
    
    Happened to stumble upon this one awhile back. Seemed a bit silly to have both the equals and not equals implementation when they're so similar.
rustc: ./regex.0.1.30
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling regex v0.1.30 (file:///root/benchmarks/regex.0.1.30)
time: 0.056; rss: 57MB	parsing
Lines of code:             8558
Pre-expansion node count:  58080
time: 0.000; rss: 57MB	recursion limit
time: 0.000; rss: 57MB	crate injection
time: 0.000; rss: 57MB	plugin loading
time: 0.000; rss: 57MB	plugin registration
time: 0.033; rss: 80MB	expansion
time: 0.000; rss: 80MB	maybe building test harness
time: 0.001; rss: 80MB	maybe creating a macro crate
time: 0.004; rss: 80MB	assigning node ids
Post-expansion node count: 68154
time: 0.000; rss: 80MB	checking for inline asm in case the target doesn't support it
time: 0.001; rss: 80MB	complete gated feature checking
time: 0.001; rss: 81MB	collecting defs
time: 0.001; rss: 81MB	external crate/lib resolution
time: 0.003; rss: 81MB	early lint checks
time: 0.001; rss: 81MB	AST validation
time: 0.006; rss: 82MB	name resolution
time: 0.009; rss: 92MB	lowering ast -> hir
time: 0.002; rss: 94MB	indexing hir
time: 0.001; rss: 94MB	attribute checking
time: 0.001; rss: 86MB	language item collection
time: 0.001; rss: 86MB	lifetime resolution
time: 0.000; rss: 86MB	looking for entry point
time: 0.000; rss: 86MB	looking for plugin registrar
time: 0.007; rss: 89MB	region resolution
time: 0.001; rss: 89MB	loop checking
time: 0.002; rss: 89MB	static item recursion checking
time: 0.022; rss: 90MB	compute_incremental_hashes_map
time: 0.000; rss: 90MB	load_dep_graph
time: 0.008; rss: 91MB	type collecting
time: 0.000; rss: 91MB	variance inference
time: 0.020; rss: 93MB	coherence checking
time: 0.009; rss: 94MB	wf checking
time: 0.253; rss: 103MB	item-types checking
time: 0.147; rss: 107MB	item-bodies checking
time: 0.000; rss: 107MB	drop-impl checking
time: 0.029; rss: 109MB	const checking
time: 0.004; rss: 109MB	privacy checking
time: 0.001; rss: 109MB	stability index
time: 0.002; rss: 109MB	intrinsic checking
time: 0.001; rss: 109MB	effect checking
time: 0.004; rss: 109MB	match checking
time: 0.002; rss: 109MB	liveness checking
time: 0.008; rss: 109MB	rvalue checking
time: 0.044; rss: 125MB	MIR dump
  time: 0.003; rss: 125MB	SimplifyCfg
  time: 0.005; rss: 125MB	QualifyAndPromoteConstants
  time: 0.011; rss: 125MB	TypeckMir
  time: 0.000; rss: 125MB	SimplifyBranches
  time: 0.002; rss: 125MB	SimplifyCfg
time: 0.021; rss: 125MB	MIR passes
time: 0.021; rss: 125MB	borrow checking
time: 0.000; rss: 125MB	reachability checking
time: 0.003; rss: 125MB	death checking
time: 0.002; rss: 125MB	stability checking
time: 0.000; rss: 125MB	unused lib feature checking
time: 0.027; rss: 125MB	lint checking
time: 0.000; rss: 125MB	resolving dependency formats
  time: 0.000; rss: 125MB	NoLandingPads
  time: 0.001; rss: 125MB	SimplifyCfg
  time: 0.004; rss: 125MB	EraseRegions
  time: 0.000; rss: 125MB	AddCallGuards
  time: 0.010; rss: 125MB	ElaborateDrops
  time: 0.000; rss: 125MB	NoLandingPads
  time: 0.002; rss: 125MB	SimplifyCfg
  time: 0.000; rss: 125MB	Deaggregator
  time: 0.000; rss: 125MB	AddCallGuards
  time: 0.000; rss: 125MB	PreTrans
time: 0.019; rss: 125MB	Prepare MIR codegen passes
  time: 0.168; rss: 136MB	write metadata
  time: 0.043; rss: 138MB	translation item collection
  time: 0.007; rss: 138MB	codegen unit partitioning
  time: 0.013; rss: 164MB	internalize symbols
time: 0.636; rss: 157MB	translation
time: 0.000; rss: 157MB	assert dep graph
time: 0.000; rss: 157MB	serialize dep graph
  time: 0.036; rss: 113MB	llvm function passes [0]
  time: 0.019; rss: 114MB	llvm module passes [0]
  time: 0.670; rss: 118MB	codegen passes [0]
  time: 0.001; rss: 118MB	codegen passes [0]
time: 0.783; rss: 118MB	LLVM passes
time: 0.000; rss: 118MB	serialize work products
time: 0.065; rss: 90MB	linking
done
