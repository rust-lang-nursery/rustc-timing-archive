commit 3fef221514ab31088f75d14516c851e68a70cf9e
Merge: 5f128ed bc3618e
Author: bors <bors@rust-lang.org>
Date:   Wed Dec 7 00:30:25 2016 +0000

    Auto merge of #38134 - bluss:iter-nth, r=aturon
    
    Remove Self: Sized from Iterator::nth
    
    It is an unnecessary restriction; nth neither needs self to be sized
    nor needs to be exempted from the trait object.
    
    It increases the utility of the nth method, because type specific
    implementations are available through `&mut I` or through an iterator
    trait object.
    
    It is a backwards compatible change due to the special cases of the
    `where Self: Sized` bound; it was already optional to include this bound
    in `Iterator` implementations.
rustc: ./hyper.0.5.0
cargo rustc  -- -Ztime-passes -Zinput-stats
time: 0.023; rss: 48MB	parsing
Lines of code:             9003
Pre-expansion node count:  44055
time: 0.000; rss: 48MB	recursion limit
time: 0.000; rss: 48MB	crate injection
time: 0.000; rss: 48MB	plugin loading
time: 0.000; rss: 48MB	plugin registration
time: 0.077; rss: 90MB	expansion
time: 0.000; rss: 90MB	maybe building test harness
time: 0.001; rss: 90MB	maybe creating a macro crate
Post-expansion node count: 101769
time: 0.000; rss: 90MB	checking for inline asm in case the target doesn't support it
time: 0.001; rss: 90MB	complete gated feature checking
time: 0.003; rss: 90MB	early lint checks
time: 0.001; rss: 90MB	AST validation
time: 0.014; rss: 94MB	name resolution
time: 0.009; rss: 98MB	lowering ast -> hir
time: 0.002; rss: 96MB	indexing hir
time: 0.001; rss: 96MB	attribute checking
time: 0.001; rss: 91MB	language item collection
time: 0.002; rss: 91MB	lifetime resolution
time: 0.000; rss: 91MB	looking for entry point
time: 0.000; rss: 91MB	looking for plugin registrar
time: 0.006; rss: 95MB	region resolution
time: 0.001; rss: 95MB	loop checking
time: 0.000; rss: 95MB	static item recursion checking
time: 0.052; rss: 96MB	compute_incremental_hashes_map
time: 0.000; rss: 96MB	load_dep_graph
time: 0.001; rss: 96MB	stability index
time: 0.003; rss: 96MB	stability checking
time: 0.013; rss: 98MB	type collecting
time: 0.000; rss: 98MB	variance inference
time: 0.001; rss: 98MB	impl wf inference
time: 0.014; rss: 99MB	coherence checking
time: 0.037; rss: 100MB	wf checking
time: 0.024; rss: 100MB	item-types checking
time: 0.295; rss: 109MB	item-bodies checking
time: 0.000; rss: 109MB	drop-impl checking
time: 0.029; rss: 112MB	const checking
time: 0.008; rss: 112MB	privacy checking
time: 0.003; rss: 112MB	intrinsic checking
time: 0.001; rss: 112MB	effect checking
time: 0.008; rss: 112MB	match checking
time: 0.004; rss: 113MB	liveness checking
time: 0.019; rss: 113MB	rvalue checking
time: 0.047; rss: 133MB	MIR dump
  time: 0.006; rss: 133MB	SimplifyCfg
  time: 0.012; rss: 135MB	QualifyAndPromoteConstants
  time: 0.014; rss: 135MB	TypeckMir
  time: 0.000; rss: 135MB	SimplifyBranches
  time: 0.003; rss: 135MB	SimplifyCfg
time: 0.041; rss: 135MB	MIR cleanup and validation
time: 0.049; rss: 135MB	borrow checking
time: 0.003; rss: 135MB	reachability checking
time: 0.004; rss: 135MB	death checking
time: 0.000; rss: 135MB	unused lib feature checking
time: 0.034; rss: 135MB	lint checking
time: 0.000; rss: 135MB	resolving dependency formats
  time: 0.000; rss: 135MB	NoLandingPads
  time: 0.003; rss: 135MB	SimplifyCfg
  time: 0.007; rss: 135MB	EraseRegions
  time: 0.001; rss: 135MB	AddCallGuards
  time: 0.021; rss: 138MB	ElaborateDrops
  time: 0.000; rss: 138MB	NoLandingPads
  time: 0.005; rss: 138MB	SimplifyCfg
  time: 0.003; rss: 138MB	InstCombine
  time: 0.003; rss: 138MB	Deaggregator
  time: 0.000; rss: 138MB	CopyPropagation
  time: 0.004; rss: 138MB	SimplifyLocals
  time: 0.001; rss: 138MB	AddCallGuards
  time: 0.000; rss: 138MB	PreTrans
time: 0.049; rss: 138MB	MIR optimisations
  time: 0.011; rss: 140MB	write metadata
  time: 0.121; rss: 154MB	translation item collection
  time: 0.013; rss: 158MB	codegen unit partitioning
  time: 0.013; rss: 213MB	internalize symbols
time: 0.993; rss: 213MB	translation
time: 0.000; rss: 213MB	assert dep graph
time: 0.000; rss: 213MB	serialize dep graph
  time: 0.086; rss: 153MB	llvm function passes [0]
  time: 0.047; rss: 155MB	llvm module passes [0]
  time: 1.652; rss: 154MB	codegen passes [0]
  time: 0.000; rss: 154MB	codegen passes [0]
time: 1.922; rss: 154MB	LLVM passes
time: 0.000; rss: 154MB	serialize work products
time: 0.070; rss: 102MB	linking
done
