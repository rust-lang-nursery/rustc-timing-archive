commit 528c6f3ed6a23a374dc5a40582d1bea2f2cfda65
Merge: 17a2be8 0a70944
Author: bors <bors@rust-lang.org>
Date:   Thu Aug 25 08:32:19 2016 -0700

    Auto merge of #35884 - habnabit:freebsd-arc4rand, r=alexcrichton
    
    Use arc4rand(9) on FreeBSD
    
    From rust-lang-nursery/rand#112:
    
    >After reading through #30691 it seems that there's general agreement that using OS-provided facilities for seeding rust userland processes is fine as long as it doesn't use too much from libc. FreeBSD's `arc4random_buf(3)` is not only a whole lot of libc code, but also not even currently exposed in the libc crate. Fortunately, the mechanism `arc4random_buf(3)` et al. use for getting entropy from the kernel ([`arc4rand(9)`](https://www.freebsd.org/cgi/man.cgi?query=arc4random&apropos=0&sektion=9&manpath=FreeBSD+10.3-RELEASE&arch=default&format=html)) is exposed via `sysctl(3)` with constants that are already in the libc crate.
    
    >I haven't found too much documentation on `KERN_ARND`â€”it's missing or only briefly described in most of the places that cover sysctl mibs. But, from digging through the kernel source, it appears that the sysctl used in this PR is very close to just calling `arc4rand(9)` directly (with `reseed` set to 0 and no way to change it).
    
    I expected [rand](/rust-lang-nursery/rand) to reply quicker, so I tried submitting it there first. It's been a few weeks with no comment, so I don't know the state of it, but maybe someone will see it here and have an opinion. This is basically the same patch. It pains me to duplicate the code but I guess it hasn't been factored out into just one place yet.
rustc: ./rust-encoding.0.2.32
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling encoding v0.2.32 (file:///root/benchmarks/rust-encoding.0.2.32)
time: 0.021; rss: 48MB	parsing
Lines of code:             6441
Pre-expansion node count:  30069
time: 0.002; rss: 48MB	configuration
time: 0.000; rss: 48MB	recursion limit
time: 0.000; rss: 48MB	crate injection
time: 0.000; rss: 48MB	plugin loading
time: 0.000; rss: 48MB	plugin registration
time: 0.039; rss: 71MB	expansion
time: 0.000; rss: 71MB	maybe building test harness
time: 0.002; rss: 71MB	assigning node ids
Post-expansion node count: 40757
time: 0.000; rss: 71MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 71MB	complete gated feature checking
time: 0.001; rss: 71MB	collecting defs
time: 0.001; rss: 71MB	external crate/lib resolution
time: 0.001; rss: 71MB	early lint checks
time: 0.000; rss: 71MB	AST validation
time: 0.005; rss: 73MB	name resolution
time: 0.004; rss: 76MB	lowering ast -> hir
time: 0.001; rss: 76MB	indexing hir
time: 0.000; rss: 76MB	attribute checking
time: 0.000; rss: 75MB	language item collection
time: 0.001; rss: 75MB	lifetime resolution
time: 0.000; rss: 75MB	looking for entry point
time: 0.000; rss: 75MB	looking for plugin registrar
time: 0.002; rss: 76MB	region resolution
time: 0.000; rss: 76MB	loop checking
time: 0.000; rss: 76MB	static item recursion checking
time: 0.005; rss: 77MB	compute_incremental_hashes_map
time: 0.000; rss: 77MB	load_dep_graph
time: 0.008; rss: 77MB	type collecting
time: 0.000; rss: 77MB	variance inference
time: 0.016; rss: 79MB	coherence checking
time: 0.017; rss: 79MB	wf checking
time: 0.012; rss: 82MB	item-types checking
time: 0.171; rss: 87MB	item-bodies checking
time: 0.000; rss: 87MB	drop-impl checking
time: 0.012; rss: 87MB	const checking
time: 0.002; rss: 87MB	privacy checking
time: 0.000; rss: 87MB	stability index
time: 0.002; rss: 87MB	intrinsic checking
time: 0.000; rss: 87MB	effect checking
time: 0.008; rss: 87MB	match checking
time: 0.001; rss: 87MB	liveness checking
time: 0.007; rss: 87MB	rvalue checking
time: 0.021; rss: 98MB	MIR dump
time: 0.015; rss: 98MB	MIR passes
time: 0.022; rss: 98MB	borrow checking
time: 0.000; rss: 98MB	reachability checking
time: 0.002; rss: 98MB	death checking
time: 0.002; rss: 99MB	stability checking
time: 0.000; rss: 99MB	unused lib feature checking
time: 0.021; rss: 99MB	lint checking
makefile:2: recipe for target 'all' failed
done
