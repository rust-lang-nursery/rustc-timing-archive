commit e96b9d2bb48b7a886a4d2b9df716265af5d15646
Merge: 713a360 67626e0
Author: bors <bors@rust-lang.org>
Date:   Fri Nov 4 17:48:07 2016 -0700

    Auto merge of #37422 - bluss:wrapping-offset, r=alexcrichton
    
    Add .wrapping_offset() methods
    
    .wrapping_offset() exposes the arith_offset intrinsic in the core
    module (as methods on raw pointers, next to offset). This is the
    first step in making it possible to stabilize the interface later.
    
    `arith_offset` is a useful tool for developing iterators for two
    reasons:
    1. `arith_offset` is used by the slice's iterator, the most important
       iterator in libcore, and it is natural that Rust users need the same
       power available to implement similar iterators.
    2. It is a good way to implement raw pointer iterations with step
       greater than one.
    
    The name seems to fit the style of methods like "wrapping_add".
rustc: ./syntex-0.42.2
cargo rustc -p syntex_syntax -- -Ztime-passes -Zinput-stats
   Compiling syntex_syntax v0.42.0
time: 0.109; rss: 75MB	parsing
Lines of code:             33687
Pre-expansion node count:  224033
time: 0.000; rss: 75MB	recursion limit
time: 0.000; rss: 75MB	crate injection
time: 0.000; rss: 75MB	plugin loading
time: 0.000; rss: 75MB	plugin registration
time: 0.261; rss: 148MB	expansion
time: 0.000; rss: 148MB	maybe building test harness
time: 0.006; rss: 148MB	maybe creating a macro crate
Post-expansion node count: 641571
time: 0.000; rss: 148MB	checking for inline asm in case the target doesn't support it
time: 0.013; rss: 148MB	complete gated feature checking
time: 0.024; rss: 148MB	early lint checks
time: 0.007; rss: 148MB	AST validation
time: 0.085; rss: 162MB	name resolution
time: 0.045; rss: 192MB	lowering ast -> hir
time: 0.008; rss: 200MB	indexing hir
time: 0.006; rss: 200MB	attribute checking
time: 0.005; rss: 155MB	language item collection
time: 0.010; rss: 155MB	lifetime resolution
time: 0.000; rss: 155MB	looking for entry point
time: 0.000; rss: 155MB	looking for plugin registrar
time: 0.043; rss: 165MB	region resolution
time: 0.005; rss: 165MB	loop checking
time: 0.005; rss: 165MB	static item recursion checking
time: 0.527; rss: 166MB	compute_incremental_hashes_map
time: 0.000; rss: 166MB	load_dep_graph
time: 0.041; rss: 172MB	type collecting
time: 0.001; rss: 172MB	variance inference
time: 0.034; rss: 178MB	coherence checking
time: 0.094; rss: 182MB	wf checking
time: 0.191; rss: 188MB	item-types checking
time: 3.599; rss: 231MB	item-bodies checking
time: 0.000; rss: 231MB	drop-impl checking
time: 0.243; rss: 233MB	const checking
time: 0.046; rss: 233MB	privacy checking
time: 0.006; rss: 233MB	stability index
time: 0.019; rss: 233MB	intrinsic checking
time: 0.016; rss: 233MB	effect checking
time: 0.048; rss: 233MB	match checking
time: 0.050; rss: 229MB	liveness checking
time: 0.206; rss: 229MB	rvalue checking
time: 0.401; rss: 420MB	MIR dump
  time: 0.056; rss: 421MB	SimplifyCfg
  time: 0.077; rss: 421MB	QualifyAndPromoteConstants
  time: 0.105; rss: 421MB	TypeckMir
  time: 0.004; rss: 421MB	SimplifyBranches
  time: 0.030; rss: 421MB	SimplifyCfg
time: 0.273; rss: 421MB	MIR cleanup and validation
time: 0.547; rss: 422MB	borrow checking
time: 0.021; rss: 422MB	reachability checking
time: 0.039; rss: 422MB	death checking
time: 0.039; rss: 424MB	stability checking
time: 0.000; rss: 424MB	unused lib feature checking
time: 0.223; rss: 424MB	lint checking
time: 0.000; rss: 424MB	resolving dependency formats
  time: 0.003; rss: 424MB	NoLandingPads
  time: 0.026; rss: 424MB	SimplifyCfg
  time: 0.067; rss: 431MB	EraseRegions
  time: 0.011; rss: 431MB	AddCallGuards
  time: 0.281; rss: 451MB	ElaborateDrops
  time: 0.003; rss: 451MB	NoLandingPads
  time: 0.052; rss: 451MB	SimplifyCfg
  time: 0.029; rss: 451MB	InstCombine
  time: 0.013; rss: 451MB	Deaggregator
  time: 0.002; rss: 451MB	CopyPropagation
  time: 0.035; rss: 451MB	SimplifyLocals
  time: 0.010; rss: 451MB	AddCallGuards
  time: 0.003; rss: 451MB	PreTrans
time: 0.536; rss: 451MB	MIR optimisations
  time: 0.062; rss: 458MB	write metadata
  time: 0.423; rss: 468MB	translation item collection
  time: 0.057; rss: 477MB	codegen unit partitioning
  time: 0.048; rss: 728MB	internalize symbols
time: 4.917; rss: 728MB	translation
time: 0.000; rss: 728MB	assert dep graph
time: 0.000; rss: 728MB	serialize dep graph
  time: 0.545; rss: 418MB	llvm function passes [0]
  time: 0.251; rss: 427MB	llvm module passes [0]
  time: 10.519; rss: 421MB	codegen passes [0]
  time: 0.000; rss: 421MB	codegen passes [0]
time: 12.105; rss: 421MB	LLVM passes
time: 0.000; rss: 421MB	serialize work products
time: 0.340; rss: 105MB	linking
done
