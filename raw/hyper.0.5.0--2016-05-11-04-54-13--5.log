commit c7ab8840c8cfcd62e9f7212371ed3e31ad2ae73a
Merge: 80ec1b9 42eb703
Author: bors <bors@rust-lang.org>
Date:   Tue May 10 23:40:09 2016 -0700

    Auto merge of #33425 - eddyb:rift, r=nikomatsakis
    
    Split the type context into a global and a local (inference-only) one.
    
    After this change, each `InferCtxt` creates its own local type interner for types with inference by-products.
    Most of the code which handles both a global and a local interner uses `'gcx` and `'tcx` for them.
    A reference to the type context in that situation (e.g. `infcx.tcx`) is `TyCtxt<'a, 'gcx, 'tcx>`.
    The global type context which used to be `&'a TyCtxt<'tcx>` is now `TyCtxt<'a, 'tcx, 'tcx>`.
    
    In order to minimize the number of extra lifetime parameters, many functions became methods.
    Where possible (some inherent impls), lifetime parameters were added on the impl, not each method.
    
    As inference by-products no longer escape their inference contexts, memory usage is lower.
    Example of `-Z time-passes` excerpt for `librustc`, stage1 (~100MB gains):
    Before "rustc: Split local type contexts interners from the global one.":
    ```
    time: 0.395; rss: 335MB item-types checking
    time: 15.392; rss: 472MB        item-bodies checking
    time: 0.000; rss: 472MB drop-impl checking
    time: 1.140; rss: 478MB const checking
    time: 0.139; rss: 478MB privacy checking
    time: 0.024; rss: 478MB stability index
    time: 0.072; rss: 478MB intrinsic checking
    time: 0.038; rss: 478MB effect checking
    time: 0.255; rss: 478MB match checking
    time: 0.128; rss: 484MB liveness checking
    time: 1.372; rss: 484MB rvalue checking
    time: 1.404; rss: 597MB MIR dump
    time: 0.809; rss: 599MB MIR passes
    ```
    After:
    ```
    time: 0.467; rss: 337MB item-types checking
    time: 17.443; rss: 395MB        item-bodies checking
    time: 0.000; rss: 395MB drop-impl checking
    time: 1.423; rss: 401MB const checking
    time: 0.141; rss: 401MB privacy checking
    time: 0.024; rss: 401MB stability index
    time: 0.116; rss: 401MB intrinsic checking
    time: 0.038; rss: 401MB effect checking
    time: 0.382; rss: 401MB match checking
    time: 0.132; rss: 407MB liveness checking
    time: 1.678; rss: 407MB rvalue checking
    time: 1.614; rss: 503MB MIR dump
    time: 0.957; rss: 512MB MIR passes
    ```
    
    **NOTE**: Functions changed to methods weren't re-indented to keep this PR easier to review.
    Once approved, the changes will be mechanically performed.
    However, indentation changes of function arguments are there - and I believe there's a way to hide whitespace-only changes in diffs on GitHub.
rustc: ./hyper.0.5.0
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling hyper v0.5.0 (file:///root/benchmarks/hyper.0.5.0)
time: 0.031; rss: 53MB	parsing
Lines of code:             9154
Pre-expansion node count:  45594
time: 0.008; rss: 53MB	configuration 1
time: 0.000; rss: 57MB	recursion limit
time: 0.000; rss: 57MB	crate injection
time: 0.005; rss: 61MB	macro loading
time: 0.000; rss: 61MB	plugin loading
time: 0.000; rss: 61MB	plugin registration
time: 0.190; rss: 70MB	expansion
time: 0.030; rss: 70MB	configuration 2
time: 0.000; rss: 70MB	gated configuration checking
time: 0.011; rss: 70MB	maybe building test harness
time: 0.008; rss: 70MB	prelude injection
time: 0.001; rss: 70MB	checking that all macro invocations are gone
time: 0.000; rss: 70MB	checking for inline asm in case the target doesn't support it
time: 0.002; rss: 70MB	complete gated feature checking
Post-expansion node count: 107141
time: 0.008; rss: 70MB	assigning node ids
time: 0.003; rss: 72MB	collecting defs
time: 0.005; rss: 76MB	external crate/lib resolution
time: 0.006; rss: 76MB	early lint checks
time: 0.026; rss: 94MB	name resolution
time: 0.010; rss: 101MB	lowering ast -> hir
time: 0.001; rss: 103MB	indexing hir
time: 0.001; rss: 103MB	attribute checking
time: 0.001; rss: 93MB	language item collection
time: 0.002; rss: 93MB	lifetime resolution
time: 0.000; rss: 93MB	looking for entry point
time: 0.000; rss: 93MB	looking for plugin registrar
time: 0.006; rss: 97MB	region resolution
time: 0.001; rss: 97MB	loop checking
time: 0.001; rss: 97MB	static item recursion checking
time: 0.000; rss: 97MB	load_dep_graph
time: 0.018; rss: 108MB	type collecting
time: 0.000; rss: 108MB	variance inference
time: 0.044; rss: 123MB	coherence checking
time: 0.093; rss: 124MB	wf checking
time: 0.037; rss: 124MB	item-types checking
time: 0.533; rss: 138MB	item-bodies checking
time: 0.000; rss: 138MB	drop-impl checking
time: 0.044; rss: 140MB	const checking
time: 0.007; rss: 140MB	privacy checking
time: 0.001; rss: 140MB	stability index
time: 0.006; rss: 140MB	intrinsic checking
time: 0.002; rss: 140MB	effect checking
time: 0.016; rss: 140MB	match checking
time: 0.005; rss: 140MB	liveness checking
time: 0.031; rss: 140MB	rvalue checking
time: 0.061; rss: 149MB	MIR dump
time: 0.041; rss: 149MB	MIR passes
time: 0.070; rss: 149MB	borrow checking
time: 0.003; rss: 149MB	reachability checking
time: 0.006; rss: 149MB	death checking
time: 0.006; rss: 149MB	stability checking
time: 0.000; rss: 149MB	unused lib feature checking
time: 0.052; rss: 149MB	lint checking
time: 0.000; rss: 149MB	resolving dependency formats
time: 0.012; rss: 151MB	Prepare MIR codegen passes
  time: 0.218; rss: 159MB	translation item collection
  time: 0.008; rss: 161MB	codegen unit partitioning
  time: 0.136; rss: 287MB	write metadata
time: 1.574; rss: 287MB	translation
time: 0.001; rss: 287MB	assert dep graph
time: 0.000; rss: 287MB	serialize dep graph
  time: 0.097; rss: 175MB	llvm function passes [0]
  time: 0.046; rss: 176MB	llvm module passes [0]
  time: 1.630; rss: 177MB	codegen passes [0]
  time: 0.001; rss: 131MB	codegen passes [0]
time: 1.974; rss: 131MB	LLVM passes
time: 0.173; rss: 129MB	linking
done
