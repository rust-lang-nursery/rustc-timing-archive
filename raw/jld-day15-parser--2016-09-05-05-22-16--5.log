commit 2dbf600d159a5c65b53419f1669834d1f81496a7
Merge: 86995dc 92aa7e4
Author: bors <bors@rust-lang.org>
Date:   Sun Sep 4 23:50:04 2016 -0700

    Auto merge of #36242 - semarie:local-rebuild, r=alexcrichton
    
    Use libraries from local-rust-root directory in configure when using …
    
    …--enable-local-rebuild
    
    When using --enable-local-rebuild configure options, the configure
    script will test rustc version. But when running it, it will not use the
    libraries in the local-rust-root directory.
    
    So use `LD_LIBRARY_PATH` environment variable to correct it.
    
    Under OpenBSD, we use `--enable-local-rebuild` for rebuilding rustc-1.11.0 using rustc-1.11.0. But as it is in use in -current (the developpment branch of OpenBSD), system libraries could easily have ABI/API changes. The (unofficial) bootstrap (rustc-1.11.0 used for building rustc-1.11.0) include several system libraries to permit it to run. The build system use libraries in stage0/lib directory. But the configure script doesn't.
    
    Due to my special use of `--enable-local-rebuild`, I dunno if this PR is suitable for inclusion. But it corrects a difference between build and configure use of the binary.
    
    r? @alexcrichton
rustc: ./jld-day15-parser
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling day15 v0.1.0 (file:///root/benchmarks/jld-day15-parser)
time: 0.001; rss: 42MB	parsing
Lines of code:             72
Pre-expansion node count:  654
time: 0.000; rss: 42MB	configuration
time: 0.000; rss: 42MB	recursion limit
time: 0.000; rss: 42MB	crate injection
time: 0.000; rss: 42MB	plugin loading
time: 0.000; rss: 42MB	plugin registration
time: 0.017; rss: 66MB	expansion
time: 0.000; rss: 66MB	maybe building test harness
time: 0.000; rss: 66MB	maybe creating a macro crate
time: 0.000; rss: 66MB	assigning node ids
Post-expansion node count: 1155
time: 0.000; rss: 66MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 66MB	complete gated feature checking
time: 0.000; rss: 66MB	collecting defs
time: 0.003; rss: 66MB	external crate/lib resolution
time: 0.000; rss: 66MB	early lint checks
time: 0.000; rss: 66MB	AST validation
time: 0.001; rss: 66MB	name resolution
time: 0.000; rss: 66MB	lowering ast -> hir
time: 0.000; rss: 66MB	indexing hir
time: 0.000; rss: 66MB	attribute checking
time: 0.000; rss: 66MB	language item collection
time: 0.000; rss: 66MB	lifetime resolution
time: 0.000; rss: 66MB	looking for entry point
time: 0.000; rss: 66MB	looking for plugin registrar
time: 0.000; rss: 66MB	region resolution
time: 0.000; rss: 66MB	loop checking
time: 0.000; rss: 66MB	static item recursion checking
time: 0.000; rss: 70MB	compute_incremental_hashes_map
time: 0.000; rss: 70MB	load_dep_graph
time: 0.001; rss: 70MB	type collecting
time: 0.000; rss: 70MB	variance inference
time: 0.004; rss: 70MB	coherence checking
time: 0.005; rss: 70MB	wf checking
time: 0.000; rss: 70MB	item-types checking
time: 0.032; rss: 74MB	item-bodies checking
time: 0.000; rss: 74MB	drop-impl checking
time: 0.001; rss: 74MB	const checking
time: 0.000; rss: 74MB	privacy checking
time: 0.000; rss: 74MB	stability index
time: 0.000; rss: 74MB	intrinsic checking
time: 0.000; rss: 74MB	effect checking
time: 0.000; rss: 74MB	match checking
time: 0.000; rss: 74MB	liveness checking
time: 0.000; rss: 74MB	rvalue checking
time: 0.001; rss: 74MB	MIR dump
time: 0.001; rss: 74MB	MIR passes
time: 0.001; rss: 74MB	borrow checking
time: 0.000; rss: 74MB	reachability checking
time: 0.000; rss: 74MB	death checking
time: 0.000; rss: 74MB	stability checking
time: 0.000; rss: 74MB	unused lib feature checking
time: 0.003; rss: 76MB	lint checking
time: 0.001; rss: 76MB	resolving dependency formats
time: 0.005; rss: 76MB	Prepare MIR codegen passes
  time: 0.000; rss: 76MB	write metadata
  time: 0.198; rss: 87MB	translation item collection
  time: 0.003; rss: 87MB	codegen unit partitioning
  time: 0.006; rss: 97MB	internalize symbols
time: 0.755; rss: 97MB	translation
time: 0.000; rss: 97MB	assert dep graph
time: 0.000; rss: 97MB	serialize dep graph
  time: 0.017; rss: 88MB	llvm function passes [0]
  time: 0.001; rss: 88MB	llvm module passes [0]
  time: 0.350; rss: 96MB	codegen passes [0]
  time: 0.000; rss: 96MB	codegen passes [0]
time: 0.369; rss: 95MB	LLVM passes
time: 0.000; rss: 95MB	serialize work products
  time: 0.121; rss: 85MB	running linker
time: 0.122; rss: 85MB	linking
done
