commit 08839965f96ea9947afe936f13a66a0f4f93db73
Merge: e96b9d2 d73c68c
Author: bors <bors@rust-lang.org>
Date:   Sat Nov 5 01:10:57 2016 -0700

    Auto merge of #37427 - nnethercote:opt-IchHasher, r=michaelwoerister
    
    Reduce the number of bytes hashed by IchHasher.
    
    IchHasher uses blake2b hashing, which is expensive, so the fewer bytes hashed
    the better. There are two big ways to reduce the number of bytes hashed.
    - Filenames in spans account for ~66% of all bytes (for builds with debuginfo).
      The vast majority of spans have the same filename for the start of the span
      and the end of the span, so hashing the filename just once in those cases is
      a big win.
    - u32 and u64 and usize values account for ~25%--33% of all bytes (for builds
      with debuginfo). The vast majority of these are small, i.e. fit in a u8, so
      shrinking them down before hashing is also a big win.
    
    This PR implements these two optimizations. I'm certain the first one is safe.
    I'm about 90% sure that the second one is safe.
    
    Here are measurements of the number of bytes hashed when doing
    debuginfo-enabled builds of stdlib and
    rustc-benchmarks/syntex-0.42.2-incr-clean.
    
    ```
                        stdlib   syntex-incr
                        ------   -----------
    original       156,781,386   255,095,596
    half-SawSpan   106,744,403   176,345,419
    short-ints      45,890,534   118,014,227
    no-SawSpan[*]    6,831,874    45,875,714
    
    [*] don't hash the SawSpan at all. Not part of this PR, just implemented for
        comparison's sake.
    ```
    
    For debug builds of syntex-0.42.2-incr-clean, the two changes give a 1--2%
    speed-up.
rustc: ./regex.0.1.30
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling regex v0.1.30 (file:///root/benchmarks/regex.0.1.30)
time: 0.050; rss: 57MB	parsing
Lines of code:             8558
Pre-expansion node count:  58080
time: 0.000; rss: 57MB	recursion limit
time: 0.000; rss: 57MB	crate injection
time: 0.000; rss: 57MB	plugin loading
time: 0.000; rss: 57MB	plugin registration
time: 0.032; rss: 82MB	expansion
time: 0.000; rss: 82MB	maybe building test harness
time: 0.001; rss: 82MB	maybe creating a macro crate
Post-expansion node count: 68134
time: 0.000; rss: 82MB	checking for inline asm in case the target doesn't support it
time: 0.001; rss: 82MB	complete gated feature checking
time: 0.004; rss: 82MB	early lint checks
time: 0.000; rss: 82MB	AST validation
time: 0.006; rss: 83MB	name resolution
time: 0.006; rss: 88MB	lowering ast -> hir
time: 0.001; rss: 89MB	indexing hir
time: 0.001; rss: 89MB	attribute checking
time: 0.001; rss: 80MB	language item collection
time: 0.001; rss: 80MB	lifetime resolution
time: 0.000; rss: 80MB	looking for entry point
time: 0.000; rss: 80MB	looking for plugin registrar
time: 0.006; rss: 84MB	region resolution
time: 0.000; rss: 84MB	loop checking
time: 0.001; rss: 84MB	static item recursion checking
time: 0.019; rss: 84MB	compute_incremental_hashes_map
time: 0.000; rss: 84MB	load_dep_graph
time: 0.006; rss: 85MB	type collecting
time: 0.000; rss: 85MB	variance inference
time: 0.017; rss: 88MB	coherence checking
time: 0.007; rss: 88MB	wf checking
time: 0.163; rss: 99MB	item-types checking
time: 0.128; rss: 101MB	item-bodies checking
time: 0.000; rss: 101MB	drop-impl checking
time: 0.025; rss: 103MB	const checking
time: 0.002; rss: 103MB	privacy checking
time: 0.000; rss: 103MB	stability index
time: 0.001; rss: 103MB	intrinsic checking
time: 0.001; rss: 103MB	effect checking
time: 0.002; rss: 103MB	match checking
time: 0.002; rss: 103MB	liveness checking
time: 0.007; rss: 103MB	rvalue checking
time: 0.042; rss: 118MB	MIR dump
  time: 0.003; rss: 118MB	SimplifyCfg
  time: 0.005; rss: 118MB	QualifyAndPromoteConstants
  time: 0.008; rss: 118MB	TypeckMir
  time: 0.000; rss: 118MB	SimplifyBranches
  time: 0.001; rss: 118MB	SimplifyCfg
time: 0.017; rss: 118MB	MIR cleanup and validation
time: 0.021; rss: 118MB	borrow checking
time: 0.000; rss: 118MB	reachability checking
time: 0.002; rss: 118MB	death checking
time: 0.002; rss: 118MB	stability checking
time: 0.000; rss: 118MB	unused lib feature checking
time: 0.023; rss: 118MB	lint checking
time: 0.000; rss: 118MB	resolving dependency formats
  time: 0.000; rss: 118MB	NoLandingPads
  time: 0.001; rss: 118MB	SimplifyCfg
  time: 0.004; rss: 118MB	EraseRegions
  time: 0.000; rss: 118MB	AddCallGuards
  time: 0.008; rss: 120MB	ElaborateDrops
  time: 0.000; rss: 120MB	NoLandingPads
  time: 0.002; rss: 120MB	SimplifyCfg
  time: 0.002; rss: 120MB	InstCombine
  time: 0.000; rss: 120MB	Deaggregator
  time: 0.000; rss: 120MB	CopyPropagation
  time: 0.002; rss: 120MB	SimplifyLocals
  time: 0.000; rss: 120MB	AddCallGuards
  time: 0.000; rss: 120MB	PreTrans
time: 0.021; rss: 120MB	MIR optimisations
  time: 0.018; rss: 124MB	write metadata
  time: 0.049; rss: 127MB	translation item collection
  time: 0.006; rss: 127MB	codegen unit partitioning
  time: 0.006; rss: 157MB	internalize symbols
time: 0.434; rss: 157MB	translation
time: 0.000; rss: 157MB	assert dep graph
time: 0.000; rss: 157MB	serialize dep graph
  time: 0.039; rss: 111MB	llvm function passes [0]
  time: 0.019; rss: 112MB	llvm module passes [0]
  time: 0.708; rss: 114MB	codegen passes [0]
  time: 0.000; rss: 114MB	codegen passes [0]
time: 0.826; rss: 113MB	LLVM passes
time: 0.000; rss: 113MB	serialize work products
time: 0.035; rss: 84MB	linking
done
