commit 49c36bf16f80a9d9d4e96172b1bc8cb7279de468
Merge: ac919fc 4752367
Author: bors <bors@rust-lang.org>
Date:   Thu Nov 3 22:58:55 2016 -0700

    Auto merge of #36306 - nagisa:mir-local-cleanup, r=eddyb
    
    A way to remove otherwise unused locals from MIR
    
    There is a certain amount of desire for a pass which cleans up the provably unused variables (no assignments or reads). There has been an implementation of such pass by @scottcarr, and another (two!) implementations by me in my own dataflow efforts.
    
    PR like https://github.com/rust-lang/rust/pull/35916 proves that this pass is useful even on its own, which is why I cherry-picked it out from my dataflow effort.
    
    @nikomatsakis previously expressed concerns over this pass not seeming to be very cheap to run and therefore unsuitable for regular cleanup duties. Turns out, regular cleanup of local declarations is not at all necessary, at least now, because majority of passes simply do not (or should not) care about them. Thatâ€™s why it is viable to only run this pass once (perhaps a few more times in the future?) per function, right before translation.
    
    r? @eddyb or @nikomatsakis
rustc: ./html5ever-2016-08-25
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling html5ever v0.5.4 (file:///root/benchmarks/html5ever-2016-08-25)
time: 0.028; rss: 51MB	parsing
Lines of code:             8210
Pre-expansion node count:  52238
time: 0.000; rss: 51MB	recursion limit
time: 0.000; rss: 51MB	crate injection
time: 0.000; rss: 51MB	plugin loading
time: 0.000; rss: 51MB	plugin registration
time: 0.476; rss: 106MB	expansion
time: 0.000; rss: 106MB	maybe building test harness
time: 0.002; rss: 106MB	maybe creating a macro crate
Post-expansion node count: 163524
time: 0.000; rss: 106MB	checking for inline asm in case the target doesn't support it
time: 0.003; rss: 106MB	complete gated feature checking
time: 0.009; rss: 106MB	early lint checks
time: 0.002; rss: 106MB	AST validation
time: 0.018; rss: 109MB	name resolution
time: 0.014; rss: 119MB	lowering ast -> hir
time: 0.003; rss: 123MB	indexing hir
time: 0.002; rss: 123MB	attribute checking
time: 0.001; rss: 100MB	language item collection
time: 0.002; rss: 100MB	lifetime resolution
time: 0.000; rss: 100MB	looking for entry point
time: 0.000; rss: 100MB	looking for plugin registrar
time: 0.015; rss: 103MB	region resolution
time: 0.001; rss: 103MB	loop checking
time: 0.002; rss: 103MB	static item recursion checking
time: 0.025; rss: 103MB	compute_incremental_hashes_map
time: 0.000; rss: 103MB	load_dep_graph
time: 0.009; rss: 105MB	type collecting
time: 0.000; rss: 105MB	variance inference
time: 0.022; rss: 107MB	coherence checking
time: 0.021; rss: 108MB	wf checking
time: 0.325; rss: 120MB	item-types checking
time: 0.474; rss: 130MB	item-bodies checking
time: 0.000; rss: 130MB	drop-impl checking
time: 0.069; rss: 132MB	const checking
time: 0.006; rss: 132MB	privacy checking
time: 0.001; rss: 132MB	stability index
time: 0.003; rss: 132MB	intrinsic checking
time: 0.002; rss: 132MB	effect checking
time: 0.015; rss: 132MB	match checking
time: 0.012; rss: 127MB	liveness checking
time: 0.025; rss: 127MB	rvalue checking
time: 0.115; rss: 178MB	MIR dump
  time: 0.009; rss: 167MB	SimplifyCfg
  time: 0.014; rss: 169MB	QualifyAndPromoteConstants
  time: 0.023; rss: 169MB	TypeckMir
  time: 0.000; rss: 169MB	SimplifyBranches
  time: 0.004; rss: 169MB	SimplifyCfg
time: 0.049; rss: 169MB	MIR cleanup and validation
time: 0.086; rss: 178MB	borrow checking
time: 0.003; rss: 178MB	reachability checking
time: 0.006; rss: 178MB	death checking
time: 0.008; rss: 178MB	stability checking
time: 0.000; rss: 178MB	unused lib feature checking
time: 0.060; rss: 178MB	lint checking
time: 0.000; rss: 178MB	resolving dependency formats
  time: 0.000; rss: 178MB	NoLandingPads
  time: 0.004; rss: 178MB	SimplifyCfg
  time: 0.009; rss: 178MB	EraseRegions
  time: 0.001; rss: 178MB	AddCallGuards
  time: 0.074; rss: 181MB	ElaborateDrops
  time: 0.000; rss: 181MB	NoLandingPads
  time: 0.006; rss: 178MB	SimplifyCfg
  time: 0.007; rss: 177MB	InstCombine
  time: 0.001; rss: 177MB	Deaggregator
  time: 0.000; rss: 177MB	CopyPropagation
  time: 0.007; rss: 175MB	SimplifyLocals
  time: 0.001; rss: 175MB	AddCallGuards
  time: 0.000; rss: 175MB	PreTrans
time: 0.113; rss: 175MB	MIR optimisations
  time: 0.011; rss: 176MB	write metadata
  time: 0.044; rss: 178MB	translation item collection
  time: 0.005; rss: 179MB	codegen unit partitioning
  time: 0.005; rss: 194MB	internalize symbols
time: 0.290; rss: 194MB	translation
time: 0.000; rss: 194MB	assert dep graph
time: 0.000; rss: 194MB	serialize dep graph
  time: 0.021; rss: 105MB	llvm function passes [0]
  time: 0.012; rss: 106MB	llvm module passes [0]
  time: 0.467; rss: 108MB	codegen passes [0]
  time: 0.000; rss: 108MB	codegen passes [0]
time: 0.539; rss: 108MB	LLVM passes
time: 0.000; rss: 108MB	serialize work products
time: 0.024; rss: 90MB	linking
done
