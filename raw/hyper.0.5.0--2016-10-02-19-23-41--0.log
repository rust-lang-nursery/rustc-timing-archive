commit 1cdc0fb11af12c04fb4b1984615f03b11a60decc
Merge: 8991ffc 9482bce
Author: bors <bors@rust-lang.org>
Date:   Sun Oct 2 14:13:27 2016 -0700

    Auto merge of #36904 - camlorn:field_offsets_refactor, r=eddyb
    
    Refactor layout to store offsets of fields, not offsets after fields
    
    This is the next PR moving us towards being able to reorder struct fields.
    
    The old code implicitly stored the offset of the first field.  This is inadequate because the first field may no longer be offset 0 in future.  This PR refactors `layout` to use a `offsets` vector instead of a `offset_after_field` vector.
rustc: ./hyper.0.5.0
cargo rustc -- -Ztime-passes -Zinput-stats
    Updating registry `https://github.com/rust-lang/crates.io-index`
   Compiling gcc v0.3.35
   Compiling rustc-serialize v0.3.19
   Compiling winapi v0.2.8
   Compiling libc v0.1.12
   Compiling unicase v0.1.0
   Compiling bitflags v0.3.3
   Compiling winapi-build v0.1.1
   Compiling pkg-config v0.3.8
   Compiling typeable v0.1.2
   Compiling lazy_static v0.1.16
   Compiling httparse v0.1.6
   Compiling log v0.3.6
   Compiling kernel32-sys v0.2.2
   Compiling libc v0.2.16
   Compiling traitobject v0.0.1
   Compiling matches v0.1.2
   Compiling mime v0.0.11
   Compiling time v0.1.35
   Compiling rand v0.3.14
   Compiling num_cpus v0.2.13
   Compiling openssl-sys v0.6.7
   Compiling openssl v0.6.7
   Compiling uuid v0.1.18
   Compiling url v0.2.38
   Compiling cookie v0.1.21
   Compiling hyper v0.5.0 (file:///root/benchmarks/hyper.0.5.0)
time: 0.026; rss: 50MB	parsing
Lines of code:             9003
Pre-expansion node count:  44129
time: 0.000; rss: 50MB	recursion limit
time: 0.000; rss: 50MB	crate injection
time: 0.000; rss: 50MB	plugin loading
time: 0.000; rss: 50MB	plugin registration
time: 0.100; rss: 87MB	expansion
time: 0.000; rss: 87MB	maybe building test harness
time: 0.001; rss: 87MB	maybe creating a macro crate
Post-expansion node count: 101371
time: 0.000; rss: 87MB	checking for inline asm in case the target doesn't support it
time: 0.002; rss: 87MB	complete gated feature checking
time: 0.003; rss: 87MB	early lint checks
time: 0.001; rss: 87MB	AST validation
time: 0.016; rss: 92MB	name resolution
time: 0.008; rss: 96MB	lowering ast -> hir
time: 0.002; rss: 98MB	indexing hir
time: 0.001; rss: 98MB	attribute checking
time: 0.001; rss: 91MB	language item collection
time: 0.001; rss: 91MB	lifetime resolution
time: 0.000; rss: 91MB	looking for entry point
time: 0.000; rss: 91MB	looking for plugin registrar
time: 0.006; rss: 96MB	region resolution
time: 0.001; rss: 96MB	loop checking
time: 0.001; rss: 96MB	static item recursion checking
time: 0.040; rss: 96MB	compute_incremental_hashes_map
time: 0.000; rss: 96MB	load_dep_graph
time: 0.023; rss: 97MB	type collecting
time: 0.000; rss: 97MB	variance inference
time: 0.032; rss: 102MB	coherence checking
time: 0.050; rss: 103MB	wf checking
time: 0.021; rss: 103MB	item-types checking
time: 0.353; rss: 113MB	item-bodies checking
time: 0.000; rss: 113MB	drop-impl checking
time: 0.033; rss: 115MB	const checking
time: 0.006; rss: 115MB	privacy checking
time: 0.001; rss: 115MB	stability index
time: 0.004; rss: 115MB	intrinsic checking
time: 0.002; rss: 115MB	effect checking
time: 0.009; rss: 115MB	match checking
time: 0.005; rss: 114MB	liveness checking
time: 0.024; rss: 114MB	rvalue checking
time: 0.048; rss: 132MB	MIR dump
  time: 0.006; rss: 133MB	SimplifyCfg
  time: 0.012; rss: 133MB	QualifyAndPromoteConstants
  time: 0.013; rss: 133MB	TypeckMir
  time: 0.001; rss: 133MB	SimplifyBranches
  time: 0.004; rss: 133MB	SimplifyCfg
time: 0.036; rss: 133MB	MIR passes
time: 0.060; rss: 133MB	borrow checking
time: 0.003; rss: 133MB	reachability checking
time: 0.005; rss: 133MB	death checking
time: 0.005; rss: 133MB	stability checking
time: 0.000; rss: 133MB	unused lib feature checking
time: 0.040; rss: 133MB	lint checking
time: 0.000; rss: 133MB	resolving dependency formats
  time: 0.001; rss: 133MB	NoLandingPads
  time: 0.003; rss: 133MB	SimplifyCfg
  time: 0.009; rss: 135MB	EraseRegions
  time: 0.001; rss: 135MB	AddCallGuards
  time: 0.050; rss: 137MB	ElaborateDrops
  time: 0.001; rss: 137MB	NoLandingPads
  time: 0.005; rss: 137MB	SimplifyCfg
  time: 0.003; rss: 137MB	InstCombine
  time: 0.003; rss: 137MB	Deaggregator
  time: 0.000; rss: 137MB	CopyPropagation
  time: 0.001; rss: 137MB	AddCallGuards
  time: 0.000; rss: 137MB	PreTrans
time: 0.077; rss: 137MB	Prepare MIR codegen passes
  time: 0.043; rss: 139MB	write metadata
  time: 0.143; rss: 147MB	translation item collection
  time: 0.019; rss: 149MB	codegen unit partitioning
  time: 0.017; rss: 201MB	internalize symbols
time: 1.100; rss: 190MB	translation
time: 0.000; rss: 190MB	assert dep graph
time: 0.000; rss: 190MB	serialize dep graph
  time: 0.086; rss: 145MB	llvm function passes [0]
  time: 0.042; rss: 150MB	llvm module passes [0]
  time: 1.619; rss: 153MB	codegen passes [0]
  time: 0.001; rss: 153MB	codegen passes [0]
time: 1.885; rss: 153MB	LLVM passes
time: 0.000; rss: 153MB	serialize work products
time: 0.139; rss: 94MB	linking
done
