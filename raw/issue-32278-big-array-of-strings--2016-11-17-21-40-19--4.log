commit 35e8924dc5d5cc248f33767ff35f7aeb797a71ec
Merge: c356537 c938007
Author: bors <bors@rust-lang.org>
Date:   Thu Nov 17 17:31:01 2016 -0800

    Auto merge of #37660 - nikomatsakis:incremental-36349, r=eddyb
    
    Separate impl items from the parent impl
    
    This change separates impl item bodies out of the impl itself. This gives incremental more resolution. In so doing, it refactors how the visitors work, and cleans up a bit of the collect/check logic (mostly by moving things out of collect that didn't really belong there, because they were just checking conditions).
    
    However, this is not as effective as I expected, for a kind of frustrating reason. In particular, when invoking `foo.bar()` you still wind up with dependencies on private items. The problem is that the method resolution code scans that list for methods with the name `bar` -- and this winds up touching *all* the methods, even private ones.
    
    I can imagine two obvious ways to fix this:
    
    - separating fn bodies from fn sigs (#35078, currently being pursued by @flodiebold)
    - a more aggressive model of incremental that @michaelwoerister has been advocating, in which we hash the intermediate results (e.g., the outputs of collect) so that we can see that the intermediate result hasn't changed, even if a particular impl item has changed.
    
    So all in all I'm not quite sure whether to land this or not. =) It still seems like it has to be a win in some cases, but not with the test cases we have just now. I can try to gin up some test cases, but I'm not sure if they will be totally realistic. On the other hand, some of the early refactorings to the visitor trait seem worthwhile to me regardless.
    
    cc #36349 -- well, this is basically a fix for that issue, I guess
    
    r? @michaelwoerister
    
    NB: Based atop of @eddyb's PR https://github.com/rust-lang/rust/pull/37402; don't land until that lands.
rustc: ./issue-32278-big-array-of-strings
cargo rustc  -- -Ztime-passes -Zinput-stats
   Compiling issue-32278-big-array-of-strings v0.1.0 (file:///root/benchmarks/issue-32278-big-array-of-strings)
time: 0.098; rss: 60MB	parsing
Lines of code:             65577
Pre-expansion node count:  65552
time: 0.000; rss: 60MB	recursion limit
time: 0.000; rss: 60MB	crate injection
time: 0.000; rss: 60MB	plugin loading
time: 0.000; rss: 60MB	plugin registration
time: 0.022; rss: 83MB	expansion
time: 0.000; rss: 83MB	maybe building test harness
time: 0.001; rss: 83MB	maybe creating a macro crate
Post-expansion node count: 65565
time: 0.000; rss: 83MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 83MB	complete gated feature checking
time: 0.005; rss: 83MB	early lint checks
time: 0.000; rss: 87MB	AST validation
time: 0.003; rss: 87MB	name resolution
time: 0.005; rss: 96MB	lowering ast -> hir
time: 0.001; rss: 100MB	indexing hir
time: 0.001; rss: 100MB	attribute checking
time: 0.000; rss: 88MB	language item collection
time: 0.000; rss: 88MB	lifetime resolution
time: 0.000; rss: 88MB	looking for entry point
time: 0.000; rss: 88MB	looking for plugin registrar
time: 0.005; rss: 95MB	region resolution
time: 0.000; rss: 95MB	loop checking
time: 0.001; rss: 95MB	static item recursion checking
time: 0.020; rss: 95MB	compute_incremental_hashes_map
time: 0.000; rss: 95MB	load_dep_graph
time: 0.000; rss: 95MB	type collecting
time: 0.000; rss: 95MB	variance inference
time: 0.000; rss: 95MB	impl wf inference
time: 0.004; rss: 97MB	coherence checking
time: 0.000; rss: 97MB	wf checking
time: 0.531; rss: 109MB	item-types checking
time: 0.000; rss: 109MB	item-bodies checking
time: 0.000; rss: 109MB	drop-impl checking
time: 0.022; rss: 108MB	const checking
time: 0.001; rss: 108MB	privacy checking
time: 0.000; rss: 108MB	stability index
time: 0.000; rss: 108MB	intrinsic checking
time: 0.000; rss: 108MB	effect checking
time: 0.000; rss: 108MB	match checking
time: 0.000; rss: 108MB	liveness checking
time: 0.000; rss: 108MB	rvalue checking
time: 0.033; rss: 116MB	MIR dump
  time: 0.000; rss: 116MB	SimplifyCfg
  time: 0.001; rss: 116MB	QualifyAndPromoteConstants
  time: 0.001; rss: 116MB	TypeckMir
  time: 0.000; rss: 116MB	SimplifyBranches
  time: 0.000; rss: 116MB	SimplifyCfg
time: 0.001; rss: 116MB	MIR cleanup and validation
time: 0.001; rss: 116MB	borrow checking
time: 0.000; rss: 116MB	reachability checking
time: 0.000; rss: 116MB	death checking
time: 0.000; rss: 116MB	stability checking
time: 0.000; rss: 116MB	unused lib feature checking
time: 0.023; rss: 116MB	lint checking
time: 0.001; rss: 116MB	resolving dependency formats
  time: 0.000; rss: 116MB	NoLandingPads
  time: 0.000; rss: 116MB	SimplifyCfg
  time: 0.001; rss: 116MB	EraseRegions
  time: 0.000; rss: 116MB	AddCallGuards
  time: 0.000; rss: 116MB	ElaborateDrops
  time: 0.000; rss: 116MB	NoLandingPads
  time: 0.000; rss: 116MB	SimplifyCfg
  time: 0.000; rss: 116MB	InstCombine
  time: 0.000; rss: 116MB	Deaggregator
  time: 0.000; rss: 116MB	CopyPropagation
  time: 0.000; rss: 116MB	SimplifyLocals
  time: 0.000; rss: 116MB	AddCallGuards
  time: 0.000; rss: 116MB	PreTrans
time: 0.001; rss: 116MB	MIR optimisations
  time: 0.000; rss: 116MB	write metadata
  time: 0.000; rss: 116MB	translation item collection
  time: 0.000; rss: 116MB	codegen unit partitioning
  time: 0.001; rss: 128MB	internalize symbols
time: 0.056; rss: 128MB	translation
time: 0.000; rss: 128MB	assert dep graph
time: 0.000; rss: 128MB	serialize dep graph
  time: 0.008; rss: 86MB	llvm function passes [0]
  time: 0.000; rss: 86MB	llvm module passes [0]
  time: 0.192; rss: 86MB	codegen passes [0]
  time: 0.000; rss: 86MB	codegen passes [0]
time: 0.202; rss: 86MB	LLVM passes
time: 0.000; rss: 86MB	serialize work products
  time: 0.158; rss: 76MB	running linker
time: 0.159; rss: 76MB	linking
done
