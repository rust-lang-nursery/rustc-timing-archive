commit 6572a463116a31efba8bfddb2e64ed659311b8a1
Merge: 6dc035e ee338c3
Author: bors <bors@rust-lang.org>
Date:   Sun Oct 16 04:22:21 2016 -0700

    Auto merge of #37129 - arielb1:erased-normal, r=eddyb
    
    normalize types every time HR regions are erased
    
    Associated type normalization is inhibited by higher-ranked regions.
    Therefore, every time we erase them, we must re-normalize.
    
    I was meaning to introduce this change some time ago, but we used
    to erase regions in generic context, which broke this terribly (because
    you can't always normalize in a generic context). That seems to be gone
    now.
    
    Ensure this by having a `erase_late_bound_regions_and_normalize`
    function.
    
    Fixes #37109 (the missing call was in mir::block).
    
    r? @eddyb
rustc: ./syntex-0.42.2-incr-clean
RUSTFLAGS="-Z incremental=incr" \
    cargo rustc -p syntex_syntax -- -Ztime-passes -Zinput-stats -Z incremental-info
   Compiling syntex_syntax v0.42.0
time: 0.156; rss: 70MB	parsing
Lines of code:             33687
Pre-expansion node count:  224033
time: 0.000; rss: 70MB	recursion limit
time: 0.000; rss: 70MB	crate injection
time: 0.000; rss: 70MB	plugin loading
time: 0.000; rss: 70MB	plugin registration
time: 0.367; rss: 140MB	expansion
time: 0.000; rss: 140MB	maybe building test harness
time: 0.007; rss: 140MB	maybe creating a macro crate
Post-expansion node count: 641571
time: 0.000; rss: 140MB	checking for inline asm in case the target doesn't support it
time: 0.013; rss: 140MB	complete gated feature checking
time: 0.023; rss: 140MB	early lint checks
time: 0.008; rss: 140MB	AST validation
time: 0.115; rss: 156MB	name resolution
time: 0.122; rss: 196MB	lowering ast -> hir
time: 0.024; rss: 204MB	indexing hir
time: 0.007; rss: 204MB	attribute checking
time: 0.006; rss: 156MB	language item collection
time: 0.012; rss: 156MB	lifetime resolution
time: 0.000; rss: 156MB	looking for entry point
time: 0.000; rss: 156MB	looking for plugin registrar
time: 0.062; rss: 167MB	region resolution
time: 0.006; rss: 167MB	loop checking
time: 0.006; rss: 167MB	static item recursion checking
time: 0.265; rss: 168MB	compute_incremental_hashes_map
time: 0.000; rss: 168MB	load_dep_graph
time: 0.044; rss: 174MB	type collecting
time: 0.001; rss: 174MB	variance inference
time: 0.042; rss: 177MB	coherence checking
time: 0.109; rss: 179MB	wf checking
time: 0.203; rss: 185MB	item-types checking
time: 4.089; rss: 230MB	item-bodies checking
time: 0.000; rss: 230MB	drop-impl checking
time: 0.284; rss: 235MB	const checking
time: 0.055; rss: 235MB	privacy checking
time: 0.007; rss: 235MB	stability index
time: 0.022; rss: 235MB	intrinsic checking
time: 0.019; rss: 235MB	effect checking
time: 0.059; rss: 235MB	match checking
time: 0.093; rss: 226MB	liveness checking
time: 0.233; rss: 226MB	rvalue checking
time: 0.651; rss: 402MB	MIR dump
  time: 0.063; rss: 409MB	SimplifyCfg
  time: 0.085; rss: 409MB	QualifyAndPromoteConstants
  time: 0.114; rss: 409MB	TypeckMir
  time: 0.005; rss: 409MB	SimplifyBranches
  time: 0.031; rss: 409MB	SimplifyCfg
time: 0.298; rss: 409MB	MIR passes
time: 0.594; rss: 412MB	borrow checking
time: 0.022; rss: 412MB	reachability checking
time: 0.046; rss: 412MB	death checking
time: 0.043; rss: 415MB	stability checking
time: 0.000; rss: 415MB	unused lib feature checking
time: 0.222; rss: 415MB	lint checking
time: 0.000; rss: 415MB	resolving dependency formats
  time: 0.003; rss: 415MB	NoLandingPads
  time: 0.028; rss: 415MB	SimplifyCfg
  time: 0.094; rss: 421MB	EraseRegions
  time: 0.012; rss: 421MB	AddCallGuards
  time: 0.332; rss: 442MB	ElaborateDrops
  time: 0.003; rss: 442MB	NoLandingPads
  time: 0.054; rss: 442MB	SimplifyCfg
  time: 0.031; rss: 442MB	InstCombine
  time: 0.011; rss: 442MB	Deaggregator
  time: 0.003; rss: 442MB	CopyPropagation
  time: 0.009; rss: 442MB	AddCallGuards
  time: 0.003; rss: 442MB	PreTrans
time: 0.583; rss: 442MB	Prepare MIR codegen passes
  time: 0.280; rss: 448MB	write metadata
  time: 0.481; rss: 459MB	translation item collection
  time: 0.065; rss: 466MB	codegen unit partitioning
  time: 0.054; rss: 712MB	internalize symbols
time: 5.695; rss: 592MB	translation
time: 0.000; rss: 592MB	assert dep graph
time: 0.000; rss: 592MB	serialize dep graph
incremental: re-using 0 out of 1 modules
  time: 0.514; rss: 405MB	llvm function passes [0]
  time: 0.245; rss: 414MB	llvm module passes [0]
  time: 10.101; rss: 410MB	codegen passes [0]
  time: 0.001; rss: 412MB	codegen passes [0]
time: 11.763; rss: 412MB	LLVM passes
time: 0.000; rss: 412MB	serialize work products
time: 0.664; rss: 103MB	linking
done
