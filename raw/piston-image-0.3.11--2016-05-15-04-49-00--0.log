commit 088d4178522d4e9464c6beac70b14724670ee735
Merge: dd0ef17 0eeb14e
Author: bors <bors@rust-lang.org>
Date:   Sat May 14 22:04:58 2016 -0700

    Auto merge of #33593 - dotdash:smart_derive, r=brson
    
    Improve derived implementations for enums with lots of fieldless variants
    
    A number of trait methods like PartialEq::eq or Hash::hash don't
    actually need a distinct arm for each variant, because the code within
    the arm only depends on the number and types of the fields in the
    variants. We can easily exploit this fact to create less and better
    code for enums with multiple variants that have no fields at all, the
    extreme case being C-like enums.
    
    For nickel.rs and its by now infamous 800 variant enum, this reduces
    optimized compile times by 25% and non-optimized compile times by 40%.
    Also peak memory usage is down by almost 40% (310MB down to 190MB).
    
    To be fair, most other crates don't benefit nearly as much, because
    they don't have as huge enums. The crates in the Rust distribution that
    I measured saw basically no change in compile times (I only tried
    optimized builds) and only 1-2% reduction in peak memory usage.
rustc: ./piston-image-0.3.11
cargo rustc -- -Ztime-passes -Zinput-stats
    Updating registry `https://github.com/rust-lang/crates.io-index`
   Compiling gcc v0.3.28
   Compiling byteorder v0.3.13
   Compiling num-traits v0.1.32
   Compiling bitflags v0.7.0
   Compiling glob v0.2.11
   Compiling color_quant v1.0.0
   Compiling rustc-serialize v0.3.19
   Compiling lzw v0.8.0
   Compiling libc v0.2.11
   Compiling rand v0.3.14
   Compiling miniz-sys v0.1.7
   Compiling flate2 v0.2.14
   Compiling num-integer v0.1.32
   Compiling num-iter v0.1.32
   Compiling gif v0.5.1
   Compiling num-bigint v0.1.32
   Compiling num-complex v0.1.32
   Compiling num-rational v0.1.32
   Compiling num v0.1.32
   Compiling enum_primitive v0.0.1
   Compiling png v0.3.1
makefile:2: recipe for target 'all' failed
done
