commit c80c31a502c838f9ec06f1003d7c61cf9de9d551
Merge: 2f8fd53 07ff914
Author: bors <bors@rust-lang.org>
Date:   Fri Dec 2 15:06:36 2016 +0000

    Auto merge of #38053 - eddyb:lazy-9, r=nikomatsakis
    
    [9/n] rustc: move type information out of AdtDef and TraitDef.
    
    _This is part of a series ([prev](https://github.com/rust-lang/rust/pull/37688) | [next]()) of patches designed to rework rustc into an out-of-order on-demand pipeline model for both better feature support (e.g. [MIR-based](https://github.com/solson/miri) early constant evaluation) and incremental execution of compiler passes (e.g. type-checking), with beneficial consequences to IDE support as well.
    If any motivation is unclear, please ask for additional PR description clarifications or code comments._
    
    <hr>
    
    Both `AdtDef` and `TraitDef` contained type information (field types, generics and predicates) which was required to create them, preventing their use before that type information exists, or in the case of field types, *mutation* was required, leading to a variance-magicking implementation of `ivar`s.
    
    This PR takes that information out and the resulting cleaner setup could even eventually end up merged with HIR, because, just like `AssociatedItem` before it, there's no dependency on types anymore.
    (With one exception, variant discriminants should probably be moved into their own map later.)
rustc: ./tuple-stress
cargo rustc  -- -Ztime-passes -Zinput-stats
time: 0.407; rss: 136MB	parsing
Lines of code:             65571
Pre-expansion node count:  393241
time: 0.000; rss: 136MB	recursion limit
time: 0.000; rss: 136MB	crate injection
time: 0.000; rss: 136MB	plugin loading
time: 0.000; rss: 136MB	plugin registration
time: 0.092; rss: 158MB	expansion
time: 0.000; rss: 158MB	maybe building test harness
time: 0.005; rss: 158MB	maybe creating a macro crate
Post-expansion node count: 393303
time: 0.000; rss: 158MB	checking for inline asm in case the target doesn't support it
time: 0.005; rss: 158MB	complete gated feature checking
time: 0.034; rss: 158MB	early lint checks
time: 0.005; rss: 158MB	AST validation
time: 0.011; rss: 158MB	name resolution
time: 0.031; rss: 201MB	lowering ast -> hir
time: 0.008; rss: 218MB	indexing hir
time: 0.005; rss: 218MB	attribute checking
time: 0.002; rss: 140MB	language item collection
time: 0.002; rss: 140MB	lifetime resolution
time: 0.000; rss: 140MB	looking for entry point
time: 0.000; rss: 140MB	looking for plugin registrar
time: 0.051; rss: 164MB	region resolution
time: 0.002; rss: 164MB	loop checking
time: 0.004; rss: 164MB	static item recursion checking
time: 0.207; rss: 164MB	compute_incremental_hashes_map
time: 0.000; rss: 164MB	load_dep_graph
time: 0.002; rss: 164MB	stability index
time: 0.002; rss: 164MB	stability checking
time: 0.002; rss: 164MB	type collecting
time: 0.000; rss: 164MB	variance inference
time: 0.000; rss: 164MB	impl wf inference
time: 0.003; rss: 166MB	coherence checking
time: 0.002; rss: 166MB	wf checking
time: 0.591; rss: 213MB	item-types checking
time: 0.003; rss: 214MB	item-bodies checking
time: 0.000; rss: 214MB	drop-impl checking
time: 0.173; rss: 214MB	const checking
time: 0.004; rss: 214MB	privacy checking
time: 0.002; rss: 214MB	intrinsic checking
time: 0.002; rss: 214MB	effect checking
time: 0.000; rss: 214MB	match checking
time: 0.002; rss: 214MB	liveness checking
time: 0.002; rss: 214MB	rvalue checking
time: 0.298; rss: 278MB	MIR dump
  time: 0.000; rss: 278MB	SimplifyCfg
  time: 0.012; rss: 278MB	QualifyAndPromoteConstants
  time: 0.036; rss: 278MB	TypeckMir
  time: 0.000; rss: 278MB	SimplifyBranches
  time: 0.000; rss: 278MB	SimplifyCfg
time: 0.048; rss: 278MB	MIR cleanup and validation
time: 0.004; rss: 278MB	borrow checking
time: 0.000; rss: 278MB	reachability checking
time: 0.004; rss: 278MB	death checking
time: 0.000; rss: 278MB	unused lib feature checking
time: 0.174; rss: 278MB	lint checking
time: 0.001; rss: 278MB	resolving dependency formats
  time: 0.000; rss: 278MB	NoLandingPads
  time: 0.000; rss: 278MB	SimplifyCfg
  time: 0.007; rss: 278MB	EraseRegions
  time: 0.000; rss: 278MB	AddCallGuards
  time: 0.000; rss: 278MB	ElaborateDrops
  time: 0.000; rss: 278MB	NoLandingPads
  time: 0.000; rss: 278MB	SimplifyCfg
  time: 0.006; rss: 278MB	InstCombine
  time: 0.000; rss: 278MB	Deaggregator
  time: 0.000; rss: 278MB	CopyPropagation
  time: 0.009; rss: 278MB	SimplifyLocals
  time: 0.000; rss: 278MB	AddCallGuards
  time: 0.000; rss: 278MB	PreTrans
time: 0.023; rss: 278MB	MIR optimisations
  time: 0.000; rss: 278MB	write metadata
  time: 0.006; rss: 279MB	translation item collection
  time: 0.000; rss: 279MB	codegen unit partitioning
  time: 0.000; rss: 305MB	internalize symbols
time: 0.275; rss: 305MB	translation
time: 0.000; rss: 305MB	assert dep graph
time: 0.000; rss: 305MB	serialize dep graph
  time: 0.024; rss: 127MB	llvm function passes [0]
  time: 0.000; rss: 127MB	llvm module passes [0]
  time: 0.319; rss: 127MB	codegen passes [0]
  time: 0.000; rss: 127MB	codegen passes [0]
time: 0.345; rss: 127MB	LLVM passes
time: 0.000; rss: 127MB	serialize work products
  time: 0.077; rss: 91MB	running linker
time: 0.078; rss: 91MB	linking
done
