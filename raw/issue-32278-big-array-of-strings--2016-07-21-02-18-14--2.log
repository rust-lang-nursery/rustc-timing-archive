commit e7c822cee29b5b939340c2cb0dfefa9a49742d77
Merge: 936bfea ee6011f
Author: bors <bors@rust-lang.org>
Date:   Wed Jul 20 19:02:00 2016 -0700

    Auto merge of #34873 - alexcrichton:down-with-compiler-rt-for-good, r=brson
    
    mk: Stop using cmake for compiler-rt
    
    The compiler-rt build system has been a never ending cause of pain for Rust
    unfortunately:
    
    * The build system is very difficult to invoke and configure to only build
      compiler-rt, especially across platforms.
    * The standard build system doesn't actually do what we want, not working for
      some of our platforms and requiring a significant number of patches on our end
      which are difficult to apply when updating compiler-rt.
    * Compiling compiler-rt requires LLVM to be compiled, which... is a big
      dependency! This also means that over time compiler-rt is not guaranteed to
      build against older versions of LLVM (or newer versions), and we often want to
      work with multiple versions of LLVM simultaneously.
    
    The makefiles and rustbuild already know how to compile C code, the code here is
    far from the *only* C code we're compiling. This patch jettisons all logic to
    work with compiler-rt's build system and just goes straight to the source. We
    just list all files manually (copied from compiler-rt's
    lib/builtins/CMakeLists.txt) and compile them into an archive.
    
    It's likely that this means we'll fail to pick up new files when we upgrade
    compiler-rt, but that seems like a much less significant cost to pay than what
    we're currently paying.
    
    cc #34400, first steps towards that
rustc: ./issue-32278-big-array-of-strings
/root/rust/x86_64-unknown-linux-gnu/stage2/bin/rustc big-array-of-strings.rs -Ztime-passes -Zinput-stats
time: 0.162; rss: 104MB	parsing
Lines of code:             65577
Pre-expansion node count:  65552
time: 0.013; rss: 104MB	configuration
time: 0.000; rss: 104MB	recursion limit
time: 0.000; rss: 104MB	crate injection
time: 0.000; rss: 104MB	plugin loading
time: 0.000; rss: 104MB	plugin registration
time: 0.028; rss: 139MB	expansion
time: 0.000; rss: 139MB	maybe building test harness
time: 0.006; rss: 139MB	assigning node ids
Post-expansion node count: 65565
time: 0.000; rss: 139MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 139MB	complete gated feature checking
time: 0.001; rss: 139MB	collecting defs
time: 0.003; rss: 139MB	external crate/lib resolution
time: 0.007; rss: 139MB	early lint checks
time: 0.001; rss: 139MB	AST validation
time: 0.002; rss: 139MB	name resolution
time: 0.008; rss: 158MB	lowering ast -> hir
time: 0.002; rss: 162MB	indexing hir
time: 0.001; rss: 162MB	attribute checking
time: 0.001; rss: 153MB	language item collection
time: 0.000; rss: 153MB	lifetime resolution
time: 0.000; rss: 153MB	looking for entry point
time: 0.000; rss: 153MB	looking for plugin registrar
time: 0.006; rss: 159MB	region resolution
time: 0.001; rss: 159MB	loop checking
time: 0.001; rss: 159MB	static item recursion checking
time: 0.000; rss: 159MB	load_dep_graph
time: 0.000; rss: 159MB	type collecting
time: 0.000; rss: 159MB	variance inference
time: 0.005; rss: 161MB	coherence checking
time: 0.001; rss: 161MB	wf checking
time: 0.981; rss: 177MB	item-types checking
time: 0.000; rss: 177MB	item-bodies checking
time: 0.000; rss: 177MB	drop-impl checking
time: 0.023; rss: 180MB	const checking
time: 0.002; rss: 180MB	privacy checking
time: 0.001; rss: 180MB	stability index
time: 0.001; rss: 180MB	intrinsic checking
time: 0.001; rss: 180MB	effect checking
time: 0.001; rss: 180MB	match checking
time: 0.001; rss: 180MB	liveness checking
time: 0.000; rss: 180MB	rvalue checking
time: 0.054; rss: 185MB	MIR dump
time: 0.002; rss: 185MB	MIR passes
time: 0.001; rss: 185MB	borrow checking
time: 0.000; rss: 185MB	reachability checking
time: 0.001; rss: 185MB	death checking
time: 0.001; rss: 185MB	stability checking
time: 0.000; rss: 185MB	unused lib feature checking
time: 0.027; rss: 186MB	lint checking
time: 0.001; rss: 186MB	resolving dependency formats
time: 0.001; rss: 186MB	Prepare MIR codegen passes
  time: 0.000; rss: 186MB	write metadata
  time: 0.001; rss: 187MB	translation item collection
  time: 0.000; rss: 187MB	codegen unit partitioning
time: 0.825; rss: 195MB	translation
time: 0.000; rss: 195MB	assert dep graph
time: 0.000; rss: 195MB	serialize dep graph
  time: 0.042; rss: 145MB	llvm function passes [0]
  time: 0.001; rss: 145MB	llvm module passes [0]
  time: 1.483; rss: 146MB	codegen passes [0]
  time: 0.001; rss: 146MB	codegen passes [0]
time: 1.533; rss: 146MB	LLVM passes
  time: 0.196; rss: 133MB	running linker
time: 0.197; rss: 133MB	linking
done
