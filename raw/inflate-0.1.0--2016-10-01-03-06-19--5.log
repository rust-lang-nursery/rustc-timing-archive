commit 8b00355119ba0473eae420049f96f5be91be1bab
Merge: bba3fca afa72b5
Author: bors <bors@rust-lang.org>
Date:   Fri Sep 30 19:00:36 2016 -0700

    Auto merge of #36339 - brson:emscripten-new, r=alexcrichton
    
    Working asmjs and wasm targets
    
    This patch set results in a working standard library for the asmjs-unknown-emscripten and wasm32-unknown-emscripten targets. It is based on the work of @badboy and @rschulman.
    
    It does a few things:
    
    - Updates LLVM with the emscripten [fastcomp](https://github.com/rust-lang/llvm/pull/50) patches, which include the pnacl IR legalizer and the asm.js backend. This patch is thought not to have any significant effect on existing targets.
    - Teaches rustbuild to correctly link C code with emscripten
    - Updates gcc-rs to work correctly with emscripten
    - Teaches rustbuild to run crate tests for emscripten with node
    - Modifies Thread::new to return an error on emscripten, to facilitate debugging a common failure mode
    - Modifies libtest to run in single-threaded mode for emscripten
    - Ignores a host of tests that don't work yet, mostly dealing with threads and I/O
    - Updates libc with wasm32 definitions (presently the same as asmjs)
    - Adds a wasm32-unknown-emscripten target that feeds the output of LLVM's asmjs backend through emcc to generate wasm
    
    Notes and caveats:
    
    - This is only known to work with `--enable-rustbuild`.
    - The wasm32 target can't be tested correctly yet because of issues in compiletest and limitations in node https://github.com/kripken/emscripten/issues/4542, but hello.rs does seem to work when run on node via the binaryen interpreter
    - This requires an up to date installation of the emscripten sdk from its incoming branch
    - Unwinding is very broken
    - When enabling the emscripten targets jemalloc is disabled for all targets, which results in test failures for the host
    
    Next steps are to fix the jemalloc issue, start building the two emscripten targets on the auto builders, then start producing nightlies.
    
    https://github.com/rust-lang/rust/issues/36317 tracks work on this.
    
    Fixes https://github.com/rust-lang/rust/issues/36515
    Fixes https://github.com/rust-lang/rust/issues/36515
    Fixes https://github.com/rust-lang/rust/issues/36356
rustc: ./inflate-0.1.0
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling inflate v0.1.0 (file:///root/benchmarks/inflate-0.1.0)
time: 0.004; rss: 43MB	parsing
Lines of code:             956
Pre-expansion node count:  4740
time: 0.000; rss: 43MB	recursion limit
time: 0.000; rss: 43MB	crate injection
time: 0.000; rss: 43MB	plugin loading
time: 0.000; rss: 43MB	plugin registration
time: 0.075; rss: 72MB	expansion
time: 0.000; rss: 72MB	maybe building test harness
time: 0.000; rss: 72MB	maybe creating a macro crate
Post-expansion node count: 55750
time: 0.000; rss: 72MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 72MB	complete gated feature checking
time: 0.002; rss: 72MB	early lint checks
time: 0.000; rss: 72MB	AST validation
time: 0.008; rss: 74MB	name resolution
time: 0.006; rss: 78MB	lowering ast -> hir
time: 0.001; rss: 78MB	indexing hir
time: 0.001; rss: 78MB	attribute checking
time: 0.000; rss: 74MB	language item collection
time: 0.001; rss: 74MB	lifetime resolution
time: 0.000; rss: 74MB	looking for entry point
time: 0.000; rss: 74MB	looking for plugin registrar
time: 0.003; rss: 76MB	region resolution
time: 0.000; rss: 76MB	loop checking
time: 0.000; rss: 76MB	static item recursion checking
time: 0.022; rss: 76MB	compute_incremental_hashes_map
time: 0.000; rss: 76MB	load_dep_graph
time: 0.002; rss: 77MB	type collecting
time: 0.000; rss: 77MB	variance inference
time: 0.009; rss: 78MB	coherence checking
time: 0.001; rss: 78MB	wf checking
time: 0.002; rss: 78MB	item-types checking
time: 2.363; rss: 92MB	item-bodies checking
time: 0.000; rss: 92MB	drop-impl checking
time: 0.017; rss: 92MB	const checking
time: 0.001; rss: 92MB	privacy checking
time: 0.000; rss: 92MB	stability index
time: 0.000; rss: 92MB	intrinsic checking
time: 0.001; rss: 92MB	effect checking
time: 0.003; rss: 92MB	match checking
time: 0.067; rss: 90MB	liveness checking
time: 0.013; rss: 90MB	rvalue checking
time: 0.036; rss: 113MB	MIR dump
  time: 0.007; rss: 111MB	SimplifyCfg
  time: 0.005; rss: 111MB	QualifyAndPromoteConstants
  time: 0.007; rss: 111MB	TypeckMir
  time: 0.000; rss: 111MB	SimplifyBranches
  time: 0.004; rss: 111MB	SimplifyCfg
time: 0.023; rss: 111MB	MIR passes
time: 0.221; rss: 109MB	borrow checking
time: 0.000; rss: 109MB	reachability checking
time: 0.004; rss: 109MB	death checking
time: 0.003; rss: 109MB	stability checking
time: 0.000; rss: 109MB	unused lib feature checking
time: 0.018; rss: 112MB	lint checking
time: 0.000; rss: 112MB	resolving dependency formats
  time: 0.000; rss: 112MB	NoLandingPads
  time: 0.002; rss: 112MB	SimplifyCfg
  time: 0.003; rss: 112MB	EraseRegions
  time: 0.001; rss: 112MB	AddCallGuards
  time: 0.124; rss: 115MB	ElaborateDrops
  time: 0.000; rss: 115MB	NoLandingPads
  time: 0.006; rss: 113MB	SimplifyCfg
  time: 0.003; rss: 113MB	InstCombine
  time: 0.000; rss: 113MB	Deaggregator
  time: 0.000; rss: 113MB	CopyPropagation
  time: 0.001; rss: 113MB	AddCallGuards
  time: 0.000; rss: 113MB	PreTrans
time: 0.140; rss: 113MB	Prepare MIR codegen passes
  time: 0.002; rss: 114MB	write metadata
  time: 0.011; rss: 114MB	translation item collection
  time: 0.001; rss: 114MB	codegen unit partitioning
  time: 0.001; rss: 127MB	internalize symbols
time: 0.167; rss: 111MB	translation
time: 0.000; rss: 111MB	assert dep graph
time: 0.000; rss: 111MB	serialize dep graph
  time: 0.026; rss: 88MB	llvm function passes [0]
  time: 0.005; rss: 89MB	llvm module passes [0]
  time: 0.660; rss: 95MB	codegen passes [0]
  time: 0.001; rss: 95MB	codegen passes [0]
time: 0.734; rss: 95MB	LLVM passes
time: 0.000; rss: 95MB	serialize work products
time: 0.046; rss: 82MB	linking
done
