commit 0491a231777735ba050c208ce621df93f863bf7c
Merge: 38a959a 651cf58
Author: bors <bors@rust-lang.org>
Date:   Tue Nov 8 12:13:45 2016 -0800

    Auto merge of #37192 - cristicbz:rust-rc-into-raw, r=brson
    
    Add `{into,from}_raw` to Rc and Arc
    
    These methods convert to and from a `*const T` for `Rc` and `Arc` similar to the way they work on `Box`. The only slight complication is that `from_raw` needs to offset the pointer back to find the beginning of the `RcBox`/`ArcInner`.
    
    I felt this is a fairly small addition, filling in a gap (when compared to `Box`) so it wouldn't need an RFC. The motivation is primarily for FFI.
    
    (I'll create an issue and update a PR with the issue number if reviewers agree with the change in principle **Edit: done #37197**)
    
    ~~Edit: This was initially `{into,from}_raw` but concerns were raised about the possible footgun if mixed with the methods of the same name of `Box`.~~
    
    Edit: This was went from `{into,from}_raw` to `{into,from}_inner_raw` then back to `{into,from}_raw` during review.
rustc: ./html5ever-2016-08-25
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling rustc-serialize v0.3.19
   Compiling serde v0.8.9
   Compiling void v1.0.2
   Compiling libc v0.2.16
   Compiling mac v0.0.2
   Compiling matches v0.1.2
   Compiling encoding_index_tests v0.1.4
   Compiling phf_shared v0.7.16
   Compiling unreachable v0.1.1
   Compiling utf-8 v0.6.0
   Compiling encoding-index-japanese v1.20141219.5
   Compiling encoding-index-tradchinese v1.20141219.5
   Compiling encoding-index-singlebyte v1.20141219.5
   Compiling encoding-index-simpchinese v1.20141219.5
   Compiling phf v0.7.16
   Compiling debug_unreachable v0.1.1
   Compiling encoding-index-korean v1.20141219.5
   Compiling log v0.3.6
   Compiling rand v0.3.14
   Compiling lazy_static v0.2.1
   Compiling futf v0.1.2
   Compiling encoding v0.2.33
   Compiling tendril v0.2.3
   Compiling phf_generator v0.7.16
   Compiling phf_codegen v0.7.16
   Compiling string_cache v0.2.29
   Compiling html5ever v0.5.4 (file:///root/benchmarks/html5ever-2016-08-25)
time: 0.023; rss: 48MB	parsing
Lines of code:             8210
Pre-expansion node count:  52238
time: 0.000; rss: 48MB	recursion limit
time: 0.000; rss: 48MB	crate injection
time: 0.000; rss: 48MB	plugin loading
time: 0.000; rss: 48MB	plugin registration
time: 0.697; rss: 102MB	expansion
time: 0.000; rss: 102MB	maybe building test harness
time: 0.002; rss: 102MB	maybe creating a macro crate
Post-expansion node count: 163524
time: 0.000; rss: 102MB	checking for inline asm in case the target doesn't support it
time: 0.003; rss: 102MB	complete gated feature checking
time: 0.008; rss: 102MB	early lint checks
time: 0.002; rss: 102MB	AST validation
time: 0.018; rss: 105MB	name resolution
time: 0.012; rss: 113MB	lowering ast -> hir
time: 0.002; rss: 117MB	indexing hir
time: 0.002; rss: 117MB	attribute checking
time: 0.001; rss: 97MB	language item collection
time: 0.002; rss: 97MB	lifetime resolution
time: 0.000; rss: 97MB	looking for entry point
time: 0.000; rss: 97MB	looking for plugin registrar
time: 0.013; rss: 106MB	region resolution
time: 0.001; rss: 106MB	loop checking
time: 0.001; rss: 106MB	static item recursion checking
time: 0.021; rss: 107MB	compute_incremental_hashes_map
time: 0.000; rss: 107MB	load_dep_graph
time: 0.008; rss: 108MB	type collecting
time: 0.000; rss: 108MB	variance inference
time: 0.022; rss: 112MB	coherence checking
time: 0.022; rss: 113MB	wf checking
time: 0.326; rss: 119MB	item-types checking
time: 0.477; rss: 134MB	item-bodies checking
time: 0.000; rss: 134MB	drop-impl checking
time: 0.069; rss: 138MB	const checking
time: 0.006; rss: 138MB	privacy checking
time: 0.001; rss: 138MB	stability index
time: 0.003; rss: 138MB	intrinsic checking
time: 0.002; rss: 138MB	effect checking
time: 0.015; rss: 138MB	match checking
time: 0.012; rss: 132MB	liveness checking
time: 0.025; rss: 132MB	rvalue checking
time: 0.118; rss: 181MB	MIR dump
  time: 0.009; rss: 178MB	SimplifyCfg
  time: 0.014; rss: 178MB	QualifyAndPromoteConstants
  time: 0.023; rss: 178MB	TypeckMir
  time: 0.000; rss: 178MB	SimplifyBranches
  time: 0.004; rss: 178MB	SimplifyCfg
time: 0.050; rss: 178MB	MIR cleanup and validation
time: 0.088; rss: 180MB	borrow checking
time: 0.003; rss: 180MB	reachability checking
time: 0.006; rss: 180MB	death checking
time: 0.008; rss: 180MB	stability checking
time: 0.000; rss: 180MB	unused lib feature checking
time: 0.065; rss: 181MB	lint checking
time: 0.000; rss: 181MB	resolving dependency formats
  time: 0.000; rss: 181MB	NoLandingPads
  time: 0.004; rss: 181MB	SimplifyCfg
  time: 0.010; rss: 181MB	EraseRegions
  time: 0.001; rss: 181MB	AddCallGuards
  time: 0.076; rss: 188MB	ElaborateDrops
  time: 0.000; rss: 188MB	NoLandingPads
  time: 0.007; rss: 183MB	SimplifyCfg
  time: 0.008; rss: 181MB	InstCombine
  time: 0.001; rss: 181MB	Deaggregator
  time: 0.000; rss: 181MB	CopyPropagation
  time: 0.007; rss: 181MB	SimplifyLocals
  time: 0.001; rss: 179MB	AddCallGuards
  time: 0.000; rss: 179MB	PreTrans
time: 0.115; rss: 179MB	MIR optimisations
  time: 0.011; rss: 180MB	write metadata
  time: 0.045; rss: 182MB	translation item collection
  time: 0.005; rss: 182MB	codegen unit partitioning
  time: 0.005; rss: 197MB	internalize symbols
time: 0.299; rss: 197MB	translation
time: 0.000; rss: 197MB	assert dep graph
time: 0.000; rss: 197MB	serialize dep graph
  time: 0.020; rss: 106MB	llvm function passes [0]
  time: 0.012; rss: 107MB	llvm module passes [0]
  time: 0.481; rss: 109MB	codegen passes [0]
  time: 0.000; rss: 109MB	codegen passes [0]
time: 0.552; rss: 109MB	LLVM passes
time: 0.000; rss: 109MB	serialize work products
time: 0.025; rss: 92MB	linking
done
