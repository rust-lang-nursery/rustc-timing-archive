commit 3fef221514ab31088f75d14516c851e68a70cf9e
Merge: 5f128ed bc3618e
Author: bors <bors@rust-lang.org>
Date:   Wed Dec 7 00:30:25 2016 +0000

    Auto merge of #38134 - bluss:iter-nth, r=aturon
    
    Remove Self: Sized from Iterator::nth
    
    It is an unnecessary restriction; nth neither needs self to be sized
    nor needs to be exempted from the trait object.
    
    It increases the utility of the nth method, because type specific
    implementations are available through `&mut I` or through an iterator
    trait object.
    
    It is a backwards compatible change due to the special cases of the
    `where Self: Sized` bound; it was already optional to include this bound
    in `Iterator` implementations.
rustc: ./tuple-stress
cargo rustc  -- -Ztime-passes -Zinput-stats
time: 0.409; rss: 135MB	parsing
Lines of code:             65571
Pre-expansion node count:  393241
time: 0.000; rss: 135MB	recursion limit
time: 0.000; rss: 135MB	crate injection
time: 0.000; rss: 135MB	plugin loading
time: 0.000; rss: 135MB	plugin registration
time: 0.093; rss: 157MB	expansion
time: 0.000; rss: 157MB	maybe building test harness
time: 0.005; rss: 157MB	maybe creating a macro crate
Post-expansion node count: 393303
time: 0.000; rss: 157MB	checking for inline asm in case the target doesn't support it
time: 0.005; rss: 157MB	complete gated feature checking
time: 0.033; rss: 157MB	early lint checks
time: 0.005; rss: 157MB	AST validation
time: 0.012; rss: 157MB	name resolution
time: 0.031; rss: 201MB	lowering ast -> hir
time: 0.008; rss: 217MB	indexing hir
time: 0.005; rss: 217MB	attribute checking
time: 0.002; rss: 140MB	language item collection
time: 0.002; rss: 140MB	lifetime resolution
time: 0.000; rss: 140MB	looking for entry point
time: 0.000; rss: 140MB	looking for plugin registrar
time: 0.050; rss: 163MB	region resolution
time: 0.002; rss: 163MB	loop checking
time: 0.004; rss: 163MB	static item recursion checking
time: 0.208; rss: 163MB	compute_incremental_hashes_map
time: 0.000; rss: 163MB	load_dep_graph
time: 0.002; rss: 163MB	stability index
time: 0.002; rss: 163MB	stability checking
time: 0.002; rss: 163MB	type collecting
time: 0.000; rss: 163MB	variance inference
time: 0.000; rss: 163MB	impl wf inference
time: 0.003; rss: 165MB	coherence checking
time: 0.002; rss: 165MB	wf checking
time: 0.585; rss: 208MB	item-types checking
time: 0.004; rss: 208MB	item-bodies checking
time: 0.000; rss: 208MB	drop-impl checking
time: 0.178; rss: 213MB	const checking
time: 0.004; rss: 213MB	privacy checking
time: 0.002; rss: 213MB	intrinsic checking
time: 0.002; rss: 213MB	effect checking
time: 0.000; rss: 213MB	match checking
time: 0.002; rss: 213MB	liveness checking
time: 0.002; rss: 213MB	rvalue checking
time: 0.296; rss: 275MB	MIR dump
  time: 0.000; rss: 275MB	SimplifyCfg
  time: 0.012; rss: 275MB	QualifyAndPromoteConstants
  time: 0.036; rss: 275MB	TypeckMir
  time: 0.000; rss: 275MB	SimplifyBranches
  time: 0.000; rss: 275MB	SimplifyCfg
time: 0.048; rss: 275MB	MIR cleanup and validation
time: 0.004; rss: 275MB	borrow checking
time: 0.000; rss: 275MB	reachability checking
time: 0.004; rss: 275MB	death checking
time: 0.000; rss: 275MB	unused lib feature checking
time: 0.198; rss: 275MB	lint checking
time: 0.001; rss: 275MB	resolving dependency formats
  time: 0.000; rss: 275MB	NoLandingPads
  time: 0.000; rss: 275MB	SimplifyCfg
  time: 0.007; rss: 275MB	EraseRegions
  time: 0.000; rss: 275MB	AddCallGuards
  time: 0.000; rss: 275MB	ElaborateDrops
  time: 0.000; rss: 275MB	NoLandingPads
  time: 0.000; rss: 275MB	SimplifyCfg
  time: 0.006; rss: 275MB	InstCombine
  time: 0.000; rss: 275MB	Deaggregator
  time: 0.000; rss: 275MB	CopyPropagation
  time: 0.009; rss: 275MB	SimplifyLocals
  time: 0.000; rss: 275MB	AddCallGuards
  time: 0.000; rss: 275MB	PreTrans
time: 0.023; rss: 275MB	MIR optimisations
  time: 0.000; rss: 275MB	write metadata
  time: 0.006; rss: 275MB	translation item collection
  time: 0.000; rss: 275MB	codegen unit partitioning
  time: 0.000; rss: 305MB	internalize symbols
time: 0.307; rss: 305MB	translation
time: 0.000; rss: 305MB	assert dep graph
time: 0.000; rss: 305MB	serialize dep graph
  time: 0.022; rss: 127MB	llvm function passes [0]
  time: 0.000; rss: 127MB	llvm module passes [0]
  time: 0.318; rss: 123MB	codegen passes [0]
  time: 0.000; rss: 123MB	codegen passes [0]
time: 0.342; rss: 123MB	LLVM passes
time: 0.000; rss: 123MB	serialize work products
  time: 0.079; rss: 92MB	running linker
time: 0.080; rss: 92MB	linking
done
