commit ddf011d7730594f4db36b01858b8c6733b07c084
Merge: 217f57c 75825fe
Author: bors <bors@rust-lang.org>
Date:   Thu Nov 24 08:26:36 2016 -0600

    Auto merge of #37770 - pnkfelix:print-type-sizes, r=arielb1
    
    Add debug flag `-Z print-type-sizes` for instrumention type/variant sizes
    
    Add debug flag `-Z print-type-sizes` for instrumention type/variant sizes
    
    This is meant to help with things like #36799 in a very local way; namely, once you have a hypothesis as to which types have a large population or are "too large", you can use `-Z print-type-sizes` to learn how large each type is, and how much each variant in an enum contributes to the size of that overall enum.
rustc: ./regex.0.1.30
cargo rustc  -- -Ztime-passes -Zinput-stats
   Compiling regex v0.1.30 (file:///root/benchmarks/regex.0.1.30)
time: 0.042; rss: 54MB	parsing
Lines of code:             8558
Pre-expansion node count:  58049
time: 0.000; rss: 55MB	recursion limit
time: 0.000; rss: 55MB	crate injection
time: 0.000; rss: 55MB	plugin loading
time: 0.000; rss: 55MB	plugin registration
time: 0.029; rss: 79MB	expansion
time: 0.000; rss: 79MB	maybe building test harness
time: 0.001; rss: 79MB	maybe creating a macro crate
Post-expansion node count: 68093
time: 0.000; rss: 79MB	checking for inline asm in case the target doesn't support it
time: 0.001; rss: 79MB	complete gated feature checking
time: 0.003; rss: 79MB	early lint checks
time: 0.000; rss: 79MB	AST validation
time: 0.005; rss: 79MB	name resolution
time: 0.005; rss: 83MB	lowering ast -> hir
time: 0.001; rss: 85MB	indexing hir
time: 0.001; rss: 85MB	attribute checking
time: 0.000; rss: 79MB	language item collection
time: 0.001; rss: 79MB	lifetime resolution
time: 0.000; rss: 79MB	looking for entry point
time: 0.000; rss: 79MB	looking for plugin registrar
time: 0.004; rss: 82MB	region resolution
time: 0.000; rss: 82MB	loop checking
time: 0.001; rss: 82MB	static item recursion checking
time: 0.018; rss: 83MB	compute_incremental_hashes_map
time: 0.000; rss: 83MB	load_dep_graph
time: 0.006; rss: 84MB	type collecting
time: 0.000; rss: 84MB	variance inference
time: 0.000; rss: 84MB	impl wf inference
time: 0.009; rss: 87MB	coherence checking
time: 0.006; rss: 87MB	wf checking
time: 0.150; rss: 98MB	item-types checking
time: 0.111; rss: 99MB	item-bodies checking
time: 0.000; rss: 99MB	drop-impl checking
time: 0.021; rss: 101MB	const checking
time: 0.002; rss: 101MB	privacy checking
time: 0.000; rss: 101MB	stability index
time: 0.001; rss: 101MB	intrinsic checking
time: 0.000; rss: 101MB	effect checking
time: 0.002; rss: 101MB	match checking
time: 0.001; rss: 101MB	liveness checking
time: 0.006; rss: 101MB	rvalue checking
time: 0.036; rss: 114MB	MIR dump
  time: 0.002; rss: 114MB	SimplifyCfg
  time: 0.005; rss: 114MB	QualifyAndPromoteConstants
  time: 0.008; rss: 114MB	TypeckMir
  time: 0.000; rss: 114MB	SimplifyBranches
  time: 0.001; rss: 114MB	SimplifyCfg
time: 0.017; rss: 114MB	MIR cleanup and validation
time: 0.018; rss: 114MB	borrow checking
time: 0.000; rss: 114MB	reachability checking
time: 0.002; rss: 114MB	death checking
time: 0.001; rss: 114MB	stability checking
time: 0.000; rss: 114MB	unused lib feature checking
time: 0.021; rss: 114MB	lint checking
time: 0.000; rss: 114MB	resolving dependency formats
  time: 0.000; rss: 114MB	NoLandingPads
  time: 0.001; rss: 114MB	SimplifyCfg
  time: 0.004; rss: 114MB	EraseRegions
  time: 0.000; rss: 114MB	AddCallGuards
  time: 0.007; rss: 116MB	ElaborateDrops
  time: 0.000; rss: 116MB	NoLandingPads
  time: 0.002; rss: 116MB	SimplifyCfg
  time: 0.002; rss: 116MB	InstCombine
  time: 0.000; rss: 116MB	Deaggregator
  time: 0.000; rss: 116MB	CopyPropagation
  time: 0.002; rss: 116MB	SimplifyLocals
  time: 0.000; rss: 116MB	AddCallGuards
  time: 0.000; rss: 116MB	PreTrans
time: 0.020; rss: 116MB	MIR optimisations
  time: 0.019; rss: 118MB	write metadata
  time: 0.042; rss: 121MB	translation item collection
  time: 0.005; rss: 123MB	codegen unit partitioning
  time: 0.005; rss: 150MB	internalize symbols
time: 0.406; rss: 150MB	translation
time: 0.000; rss: 150MB	assert dep graph
time: 0.000; rss: 150MB	serialize dep graph
  time: 0.036; rss: 113MB	llvm function passes [0]
  time: 0.019; rss: 115MB	llvm module passes [0]
  time: 0.697; rss: 116MB	codegen passes [0]
  time: 0.000; rss: 116MB	codegen passes [0]
time: 0.810; rss: 116MB	LLVM passes
time: 0.000; rss: 116MB	serialize work products
time: 0.034; rss: 87MB	linking
done
