commit 0491a231777735ba050c208ce621df93f863bf7c
Merge: 38a959a 651cf58
Author: bors <bors@rust-lang.org>
Date:   Tue Nov 8 12:13:45 2016 -0800

    Auto merge of #37192 - cristicbz:rust-rc-into-raw, r=brson
    
    Add `{into,from}_raw` to Rc and Arc
    
    These methods convert to and from a `*const T` for `Rc` and `Arc` similar to the way they work on `Box`. The only slight complication is that `from_raw` needs to offset the pointer back to find the beginning of the `RcBox`/`ArcInner`.
    
    I felt this is a fairly small addition, filling in a gap (when compared to `Box`) so it wouldn't need an RFC. The motivation is primarily for FFI.
    
    (I'll create an issue and update a PR with the issue number if reviewers agree with the change in principle **Edit: done #37197**)
    
    ~~Edit: This was initially `{into,from}_raw` but concerns were raised about the possible footgun if mixed with the methods of the same name of `Box`.~~
    
    Edit: This was went from `{into,from}_raw` to `{into,from}_inner_raw` then back to `{into,from}_raw` during review.
rustc: ./piston-image-0.10.3
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling image v0.10.3 (file:///root/benchmarks/piston-image-0.10.3)
time: 0.038; rss: 54MB	parsing
Lines of code:             12000
Pre-expansion node count:  90272
time: 0.000; rss: 54MB	recursion limit
time: 0.000; rss: 54MB	crate injection
time: 0.000; rss: 54MB	plugin loading
time: 0.000; rss: 54MB	plugin registration
time: 0.066; rss: 93MB	expansion
time: 0.000; rss: 93MB	maybe building test harness
time: 0.001; rss: 93MB	maybe creating a macro crate
Post-expansion node count: 148999
time: 0.000; rss: 93MB	checking for inline asm in case the target doesn't support it
time: 0.003; rss: 93MB	complete gated feature checking
time: 0.005; rss: 93MB	early lint checks
time: 0.001; rss: 93MB	AST validation
time: 0.021; rss: 97MB	name resolution
time: 0.012; rss: 106MB	lowering ast -> hir
time: 0.002; rss: 110MB	indexing hir
time: 0.001; rss: 110MB	attribute checking
time: 0.001; rss: 99MB	language item collection
time: 0.002; rss: 99MB	lifetime resolution
time: 0.000; rss: 99MB	looking for entry point
time: 0.000; rss: 99MB	looking for plugin registrar
time: 0.010; rss: 105MB	region resolution
time: 0.001; rss: 105MB	loop checking
time: 0.001; rss: 105MB	static item recursion checking
time: 0.051; rss: 105MB	compute_incremental_hashes_map
time: 0.000; rss: 105MB	load_dep_graph
time: 0.016; rss: 108MB	type collecting
time: 0.000; rss: 108MB	variance inference
time: 0.027; rss: 111MB	coherence checking
time: 0.077; rss: 112MB	wf checking
time: 0.147; rss: 117MB	item-types checking
time: 0.799; rss: 133MB	item-bodies checking
time: 0.000; rss: 133MB	drop-impl checking
time: 0.053; rss: 135MB	const checking
time: 0.008; rss: 135MB	privacy checking
time: 0.001; rss: 135MB	stability index
time: 0.007; rss: 135MB	intrinsic checking
time: 0.003; rss: 135MB	effect checking
time: 0.015; rss: 135MB	match checking
time: 0.010; rss: 134MB	liveness checking
time: 0.042; rss: 134MB	rvalue checking
time: 0.096; rss: 175MB	MIR dump
  time: 0.011; rss: 176MB	SimplifyCfg
  time: 0.021; rss: 176MB	QualifyAndPromoteConstants
  time: 0.023; rss: 176MB	TypeckMir
  time: 0.001; rss: 176MB	SimplifyBranches
  time: 0.005; rss: 176MB	SimplifyCfg
time: 0.061; rss: 176MB	MIR cleanup and validation
time: 0.116; rss: 176MB	borrow checking
time: 0.003; rss: 176MB	reachability checking
time: 0.008; rss: 176MB	death checking
time: 0.009; rss: 176MB	stability checking
time: 0.000; rss: 176MB	unused lib feature checking
time: 0.069; rss: 176MB	lint checking
time: 0.000; rss: 176MB	resolving dependency formats
  time: 0.001; rss: 176MB	NoLandingPads
  time: 0.005; rss: 176MB	SimplifyCfg
  time: 0.012; rss: 178MB	EraseRegions
  time: 0.002; rss: 178MB	AddCallGuards
  time: 0.044; rss: 183MB	ElaborateDrops
  time: 0.001; rss: 183MB	NoLandingPads
  time: 0.009; rss: 183MB	SimplifyCfg
  time: 0.006; rss: 183MB	InstCombine
  time: 0.002; rss: 183MB	Deaggregator
  time: 0.000; rss: 183MB	CopyPropagation
  time: 0.008; rss: 183MB	SimplifyLocals
  time: 0.002; rss: 183MB	AddCallGuards
  time: 0.000; rss: 183MB	PreTrans
time: 0.092; rss: 183MB	MIR optimisations
  time: 0.016; rss: 183MB	write metadata
  time: 0.455; rss: 195MB	translation item collection
  time: 0.027; rss: 199MB	codegen unit partitioning
  time: 0.023; rss: 319MB	internalize symbols
time: 2.681; rss: 319MB	translation
time: 0.000; rss: 319MB	assert dep graph
time: 0.000; rss: 319MB	serialize dep graph
  time: 0.211; rss: 228MB	llvm function passes [0]
  time: 0.082; rss: 231MB	llvm module passes [0]
  time: 4.245; rss: 231MB	codegen passes [0]
  time: 0.000; rss: 231MB	codegen passes [0]
time: 4.845; rss: 231MB	LLVM passes
time: 0.000; rss: 231MB	serialize work products
time: 0.129; rss: 100MB	linking
done
