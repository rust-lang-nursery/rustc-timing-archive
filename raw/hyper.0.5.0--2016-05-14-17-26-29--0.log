commit 8492b6aa4545e3e86f3b144c9a3834c31c612e38
Merge: 5029a60 915fa57
Author: bors <bors@rust-lang.org>
Date:   Sat May 14 11:56:58 2016 -0700

    Auto merge of #33579 - Amanieu:atomic_bool2, r=alexcrichton
    
    Make AtomicBool the same size as bool
    
    Reopening #32365
    
    This allows `AtomicBool` to be transmuted to a `bool`, which makes it more consistent with the other atomic types. Note that this now guarantees that the atomic type will always contain a valid `bool` value, which wasn't the case before (due to `fetch_nand`).
    
    r? @alexcrichton
rustc: ./hyper.0.5.0
cargo rustc -- -Ztime-passes -Zinput-stats
    Updating registry `https://github.com/rust-lang/crates.io-index`
   Compiling log v0.3.6
   Compiling matches v0.1.2
   Compiling pkg-config v0.3.8
   Compiling httparse v0.1.6
   Compiling unicase v0.1.0
   Compiling bitflags v0.3.3
   Compiling libc v0.2.11
   Compiling typeable v0.1.2
   Compiling winapi v0.2.7
   Compiling gcc v0.3.28
   Compiling libc v0.1.12
   Compiling winapi-build v0.1.1
   Compiling mime v0.0.11
   Compiling kernel32-sys v0.2.2
   Compiling traitobject v0.0.1
   Compiling lazy_static v0.1.16
   Compiling rustc-serialize v0.3.19
   Compiling openssl-sys v0.6.7
   Compiling rand v0.3.14
   Compiling num_cpus v0.2.12
   Compiling time v0.1.35
   Compiling openssl v0.6.7
   Compiling uuid v0.1.18
   Compiling url v0.2.38
   Compiling cookie v0.1.21
   Compiling hyper v0.5.0 (file:///root/benchmarks/hyper.0.5.0)
time: 0.040; rss: 53MB	parsing
Lines of code:             9154
Pre-expansion node count:  45594
time: 0.009; rss: 54MB	configuration 1
time: 0.000; rss: 54MB	recursion limit
time: 0.000; rss: 54MB	crate injection
time: 0.005; rss: 59MB	macro loading
time: 0.000; rss: 59MB	plugin loading
time: 0.000; rss: 59MB	plugin registration
time: 0.201; rss: 69MB	expansion
time: 0.029; rss: 69MB	configuration 2
time: 0.000; rss: 69MB	gated configuration checking
time: 0.011; rss: 69MB	maybe building test harness
time: 0.008; rss: 69MB	prelude injection
time: 0.001; rss: 69MB	checking that all macro invocations are gone
time: 0.000; rss: 69MB	checking for inline asm in case the target doesn't support it
time: 0.002; rss: 69MB	complete gated feature checking
Post-expansion node count: 107141
time: 0.008; rss: 69MB	assigning node ids
time: 0.006; rss: 71MB	collecting defs
time: 0.005; rss: 72MB	external crate/lib resolution
time: 0.006; rss: 72MB	early lint checks
time: 0.029; rss: 92MB	name resolution
time: 0.015; rss: 97MB	lowering ast -> hir
time: 0.003; rss: 98MB	indexing hir
time: 0.001; rss: 98MB	attribute checking
time: 0.001; rss: 89MB	language item collection
time: 0.002; rss: 89MB	lifetime resolution
time: 0.000; rss: 89MB	looking for entry point
time: 0.000; rss: 89MB	looking for plugin registrar
time: 0.012; rss: 92MB	region resolution
time: 0.001; rss: 92MB	loop checking
time: 0.001; rss: 92MB	static item recursion checking
time: 0.000; rss: 92MB	load_dep_graph
time: 0.018; rss: 103MB	type collecting
time: 0.000; rss: 103MB	variance inference
time: 0.048; rss: 118MB	coherence checking
time: 0.094; rss: 119MB	wf checking
time: 0.038; rss: 120MB	item-types checking
time: 0.550; rss: 130MB	item-bodies checking
time: 0.000; rss: 130MB	drop-impl checking
time: 0.047; rss: 133MB	const checking
time: 0.008; rss: 133MB	privacy checking
time: 0.001; rss: 133MB	stability index
time: 0.006; rss: 133MB	intrinsic checking
time: 0.002; rss: 133MB	effect checking
time: 0.016; rss: 133MB	match checking
time: 0.005; rss: 133MB	liveness checking
time: 0.032; rss: 133MB	rvalue checking
time: 0.071; rss: 141MB	MIR dump
time: 0.043; rss: 141MB	MIR passes
time: 0.077; rss: 141MB	borrow checking
time: 0.003; rss: 141MB	reachability checking
time: 0.006; rss: 141MB	death checking
time: 0.006; rss: 142MB	stability checking
time: 0.000; rss: 142MB	unused lib feature checking
time: 0.051; rss: 142MB	lint checking
time: 0.000; rss: 142MB	resolving dependency formats
time: 0.012; rss: 143MB	Prepare MIR codegen passes
  time: 0.235; rss: 151MB	translation item collection
  time: 0.010; rss: 152MB	codegen unit partitioning
  time: 0.140; rss: 276MB	write metadata
time: 1.869; rss: 276MB	translation
time: 0.001; rss: 276MB	assert dep graph
time: 0.000; rss: 276MB	serialize dep graph
  time: 0.097; rss: 168MB	llvm function passes [0]
  time: 0.050; rss: 171MB	llvm module passes [0]
  time: 1.646; rss: 173MB	codegen passes [0]
  time: 0.001; rss: 123MB	codegen passes [0]
time: 2.004; rss: 121MB	LLVM passes
time: 0.176; rss: 119MB	linking
done
