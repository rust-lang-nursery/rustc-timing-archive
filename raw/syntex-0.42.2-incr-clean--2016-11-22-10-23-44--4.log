commit 0f7c75b74fb7adc436eedc66c0032879293eeac6
Merge: 1c11ea3 6c2a456
Author: bors <bors@rust-lang.org>
Date:   Tue Nov 22 03:29:46 2016 -0600

    Auto merge of #37834 - bluss:peek-none, r=BurntSushi
    
    Make Peekable remember peeking a None
    
    Peekable should remember if a None has been seen in the `.peek()` method.
    It ensures that `.peek(); .peek();` or `.peek(); .next();` only advances the
    underlying iterator at most once. This does not by itself make the iterator
    fused.
    
    Thanks to @s3bk for the code in `fn peek()` itself.
    
    Fixes #37784
rustc: ./syntex-0.42.2-incr-clean
RUSTFLAGS="-Z incremental=incr" \
    cargo rustc -p syntex_syntax  -- \
    -Ztime-passes -Zinput-stats -Z incremental-info
   Compiling syntex_syntax v0.42.0
time: 0.091; rss: 71MB	parsing
Lines of code:             33687
Pre-expansion node count:  223115
time: 0.000; rss: 71MB	recursion limit
time: 0.000; rss: 71MB	crate injection
time: 0.000; rss: 71MB	plugin loading
time: 0.000; rss: 71MB	plugin registration
time: 0.236; rss: 144MB	expansion
time: 0.000; rss: 144MB	maybe building test harness
time: 0.006; rss: 144MB	maybe creating a macro crate
Post-expansion node count: 638863
time: 0.000; rss: 144MB	checking for inline asm in case the target doesn't support it
time: 0.012; rss: 144MB	complete gated feature checking
time: 0.022; rss: 144MB	early lint checks
time: 0.007; rss: 144MB	AST validation
time: 0.075; rss: 158MB	name resolution
time: 0.044; rss: 183MB	lowering ast -> hir
time: 0.010; rss: 194MB	indexing hir
time: 0.006; rss: 194MB	attribute checking
time: 0.004; rss: 149MB	language item collection
time: 0.010; rss: 149MB	lifetime resolution
time: 0.000; rss: 149MB	looking for entry point
time: 0.000; rss: 149MB	looking for plugin registrar
time: 0.076; rss: 168MB	region resolution
time: 0.005; rss: 168MB	loop checking
time: 0.004; rss: 168MB	static item recursion checking
time: 0.329; rss: 169MB	compute_incremental_hashes_map
time: 0.000; rss: 169MB	load_dep_graph
time: 0.046; rss: 173MB	type collecting
time: 0.001; rss: 173MB	variance inference
time: 0.002; rss: 174MB	impl wf inference
time: 0.018; rss: 176MB	coherence checking
time: 0.089; rss: 178MB	wf checking
time: 0.185; rss: 181MB	item-types checking
time: 6.308; rss: 223MB	item-bodies checking
time: 0.000; rss: 223MB	drop-impl checking
time: 0.277; rss: 242MB	const checking
time: 0.048; rss: 242MB	privacy checking
time: 0.006; rss: 242MB	stability index
time: 0.017; rss: 242MB	intrinsic checking
time: 0.014; rss: 242MB	effect checking
time: 0.046; rss: 242MB	match checking
time: 0.081; rss: 238MB	liveness checking
time: 0.183; rss: 238MB	rvalue checking
time: 0.570; rss: 411MB	MIR dump
  time: 0.059; rss: 417MB	SimplifyCfg
  time: 0.076; rss: 417MB	QualifyAndPromoteConstants
  time: 0.105; rss: 417MB	TypeckMir
  time: 0.004; rss: 417MB	SimplifyBranches
  time: 0.031; rss: 417MB	SimplifyCfg
time: 0.275; rss: 417MB	MIR cleanup and validation
time: 0.560; rss: 420MB	borrow checking
time: 0.025; rss: 421MB	reachability checking
time: 0.038; rss: 421MB	death checking
time: 0.034; rss: 422MB	stability checking
time: 0.000; rss: 422MB	unused lib feature checking
time: 0.201; rss: 422MB	lint checking
time: 0.000; rss: 422MB	resolving dependency formats
  time: 0.003; rss: 422MB	NoLandingPads
  time: 0.027; rss: 422MB	SimplifyCfg
  time: 0.073; rss: 428MB	EraseRegions
  time: 0.011; rss: 428MB	AddCallGuards
  time: 0.300; rss: 447MB	ElaborateDrops
  time: 0.003; rss: 447MB	NoLandingPads
  time: 0.053; rss: 447MB	SimplifyCfg
  time: 0.029; rss: 447MB	InstCombine
  time: 0.012; rss: 447MB	Deaggregator
  time: 0.002; rss: 447MB	CopyPropagation
  time: 0.035; rss: 447MB	SimplifyLocals
  time: 0.010; rss: 447MB	AddCallGuards
  time: 0.003; rss: 447MB	PreTrans
time: 0.562; rss: 447MB	MIR optimisations
  time: 0.077; rss: 456MB	write metadata
  time: 0.407; rss: 470MB	translation item collection
  time: 0.064; rss: 477MB	codegen unit partitioning
  time: 0.041; rss: 724MB	internalize symbols
time: 4.865; rss: 724MB	translation
time: 0.000; rss: 724MB	assert dep graph
time: 0.000; rss: 724MB	serialize dep graph
incremental: re-using 0 out of 1 modules
  time: 0.527; rss: 424MB	llvm function passes [0]
  time: 0.250; rss: 431MB	llvm module passes [0]
  time: 10.424; rss: 421MB	codegen passes [0]
  time: 0.000; rss: 421MB	codegen passes [0]
time: 12.072; rss: 421MB	LLVM passes
time: 0.000; rss: 421MB	serialize work products
time: 0.342; rss: 113MB	linking
done
