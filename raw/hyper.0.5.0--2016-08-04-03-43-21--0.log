commit 271d048523b6c1b0e773d9e5cc76bbb997cc180c
Merge: 40f3ee2 5c88efc
Author: bors <bors@rust-lang.org>
Date:   Wed Aug 3 22:56:33 2016 -0700

    Auto merge of #35015 - petrochenkov:forearg, r=nikomatsakis
    
    Properly enforce the "patterns aren't allowed in foreign functions" rule
    
    Cases like `arg @ PATTERN` or `mut arg` were missing.
    Apply the same rule to function pointer types.
    
    Closes https://github.com/rust-lang/rust/issues/35203
    [breaking-change], no breakage in sane code is expected though
    r? @nikomatsakis
    
    This is somewhat related to https://github.com/rust-lang/rfcs/pull/1685 (cc @matklad).
    The goal is to eventually support full pattern syntax where it makes sense (function body may present) and to support *only* the following forms - `TYPE`, `ident: TYPE`, `_: TYPE` - where patterns don't make sense (function body doesn't present), i.e. in foreign functions and function pointer types.
rustc: ./hyper.0.5.0
cargo rustc -- -Ztime-passes -Zinput-stats
    Updating registry `https://github.com/rust-lang/crates.io-index`
   Compiling httparse v0.1.6
   Compiling typeable v0.1.2
   Compiling lazy_static v0.1.16
   Compiling matches v0.1.2
   Compiling libc v0.1.12
   Compiling libc v0.2.14
   Compiling gcc v0.3.32
   Compiling winapi v0.2.8
   Compiling log v0.3.6
   Compiling rustc-serialize v0.3.19
   Compiling winapi-build v0.1.1
   Compiling kernel32-sys v0.2.2
   Compiling pkg-config v0.3.8
   Compiling bitflags v0.3.3
   Compiling unicase v0.1.0
   Compiling mime v0.0.11
   Compiling traitobject v0.0.1
   Compiling rand v0.3.14
   Compiling time v0.1.35
   Compiling num_cpus v0.2.13
   Compiling openssl-sys v0.6.7
   Compiling openssl v0.6.7
   Compiling uuid v0.1.18
   Compiling url v0.2.38
   Compiling cookie v0.1.21
   Compiling hyper v0.5.0 (file:///root/benchmarks/hyper.0.5.0)
time: 0.032; rss: 53MB	parsing
Lines of code:             9154
Pre-expansion node count:  44838
time: 0.005; rss: 57MB	configuration
time: 0.000; rss: 57MB	recursion limit
time: 0.000; rss: 57MB	crate injection
time: 0.000; rss: 57MB	plugin loading
time: 0.000; rss: 57MB	plugin registration
time: 0.115; rss: 97MB	expansion
time: 0.000; rss: 97MB	maybe building test harness
time: 0.008; rss: 97MB	assigning node ids
Post-expansion node count: 101581
time: 0.000; rss: 97MB	checking for inline asm in case the target doesn't support it
time: 0.002; rss: 97MB	complete gated feature checking
time: 0.003; rss: 97MB	collecting defs
time: 0.010; rss: 108MB	external crate/lib resolution
time: 0.006; rss: 108MB	early lint checks
time: 0.001; rss: 108MB	AST validation
time: 0.019; rss: 112MB	name resolution
time: 0.009; rss: 121MB	lowering ast -> hir
time: 0.001; rss: 123MB	indexing hir
time: 0.001; rss: 123MB	attribute checking
time: 0.001; rss: 116MB	language item collection
time: 0.002; rss: 116MB	lifetime resolution
time: 0.000; rss: 116MB	looking for entry point
time: 0.000; rss: 116MB	looking for plugin registrar
time: 0.005; rss: 120MB	region resolution
time: 0.001; rss: 120MB	loop checking
time: 0.000; rss: 120MB	static item recursion checking
time: 0.000; rss: 120MB	load_dep_graph
time: 0.031; rss: 123MB	type collecting
time: 0.000; rss: 123MB	variance inference
time: 0.045; rss: 129MB	coherence checking
time: 0.096; rss: 132MB	wf checking
time: 0.036; rss: 132MB	item-types checking
time: 0.522; rss: 143MB	item-bodies checking
time: 0.000; rss: 143MB	drop-impl checking
time: 0.043; rss: 145MB	const checking
time: 0.006; rss: 145MB	privacy checking
time: 0.001; rss: 145MB	stability index
time: 0.006; rss: 145MB	intrinsic checking
time: 0.002; rss: 145MB	effect checking
time: 0.014; rss: 145MB	match checking
time: 0.005; rss: 145MB	liveness checking
time: 0.031; rss: 145MB	rvalue checking
time: 0.060; rss: 155MB	MIR dump
time: 0.045; rss: 155MB	MIR passes
time: 0.070; rss: 155MB	borrow checking
time: 0.003; rss: 155MB	reachability checking
time: 0.005; rss: 155MB	death checking
time: 0.005; rss: 155MB	stability checking
time: 0.000; rss: 155MB	unused lib feature checking
time: 0.052; rss: 155MB	lint checking
time: 0.000; rss: 155MB	resolving dependency formats
time: 0.090; rss: 157MB	Prepare MIR codegen passes
  time: 0.127; rss: 163MB	write metadata
  time: 0.186; rss: 169MB	translation item collection
  time: 0.022; rss: 171MB	codegen unit partitioning
  time: 0.036; rss: 290MB	internalize symbols
time: 1.580; rss: 290MB	translation
time: 0.000; rss: 290MB	assert dep graph
time: 0.000; rss: 290MB	serialize dep graph
  time: 0.086; rss: 176MB	llvm function passes [0]
  time: 0.046; rss: 172MB	llvm module passes [0]
  time: 1.581; rss: 179MB	codegen passes [0]
  time: 0.001; rss: 179MB	codegen passes [0]
time: 1.845; rss: 179MB	LLVM passes
time: 0.147; rss: 129MB	linking
done
