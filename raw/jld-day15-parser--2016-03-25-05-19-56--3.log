commit f1578d37dc844ffeefcabc30960784082c3c54fa
Merge: 40deb27 091a007
Author: bors <bors@rust-lang.org>
Date:   Thu Mar 24 23:12:57 2016 -0700

    Auto merge of #32428 - nikomatsakis:scopes-in-mir, r=nagisa
    
    Scopes in mir
    
    This PR adds scopes to MIR. There is a tree of scopes (each represented by a `ScopeId`). Every statement, variable, and terminator now has an associated scope and span.  It also adds a `-Z dump-mir` switch one can use to conveniently examine the MIR as optimizations proceed.
    
    The intention is two-fold. First, to support MIR debug-info. This PR does not attempt to modify trans to make use of the scope information, however.
    
    Second, in a more temporary capacity, to support the goal of moving regionck and borowck into the MIR. To that end, the PR also constructs a "scope auxiliary" table storing the extent of each span (this is kept separate from the main MIR, since it contains node-ids) and the dom/post-dom of the region in the graph where the scope occurs. When we move to non-lexical lifetimes, I expect this auxiliary information to be discarded, but that is still some ways in the future (requires, at minimum, an RFC, and there are some thorny details to work out -- though I've got an in-progress draft).
    
    Right now, I'm just dropping this auxiliary information after it is constructed. I was debating for some time whether to add some sort of sanity tests, but decided to just open this PR instead, because I couldn't figure out what such a test would look like (and we don't have independent tests for this today beyond the regionck and borrowck tests).
    
    I'd prefer not to store the auxiliary data into any kind of "per-fn" map. Rather, I'd prefer that we do regionck/borrowck/whatever-else immediately after construction -- that is, we build the MIR for fn X and immediately thereafter do extended correctness checking on it. This will reduce peak memory usage and also ensure that the auxiliary data doesn't exist once optimizations begin. It also clarifies the transition point where static checks are complete and MIR can be more freely optimized.
    
    cc @rust-lang/compiler @nagisa
rustc: ./jld-day15-parser
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling day15 v0.1.0 (file:///root/benchmarks/jld-day15-parser)
time: 0.001; rss: 37MB	parsing
Lines of code:             72
Pre-expansion node count:  673
time: 0.000; rss: 37MB	configuration 1
time: 0.000; rss: 37MB	recursion limit
time: 0.000; rss: 37MB	gated macro checking
time: 0.000; rss: 37MB	crate injection
time: 0.003; rss: 40MB	macro loading
time: 0.000; rss: 40MB	plugin loading
time: 0.000; rss: 40MB	plugin registration
time: 0.002; rss: 40MB	expansion
time: 0.000; rss: 40MB	complete gated feature checking 1
time: 0.000; rss: 40MB	configuration 2
time: 0.000; rss: 40MB	gated configuration checking
time: 0.000; rss: 40MB	maybe building test harness
time: 0.000; rss: 40MB	prelude injection
time: 0.000; rss: 40MB	checking that all macro invocations are gone
time: 0.000; rss: 40MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 40MB	complete gated feature checking 2
time: 0.000; rss: 40MB	const fn bodies and arguments
Post-expansion node count: 1176
time: 0.000; rss: 40MB	assigning node ids
time: 0.000; rss: 40MB	lowering ast -> hir
time: 0.000; rss: 40MB	indexing hir
time: 0.000; rss: 40MB	attribute checking
time: 0.000; rss: 40MB	early lint checks
time: 0.001; rss: 44MB	external crate/lib resolution
time: 0.000; rss: 44MB	language item collection
time: 0.001; rss: 48MB	resolution
time: 0.000; rss: 48MB	lifetime resolution
time: 0.000; rss: 48MB	looking for entry point
time: 0.000; rss: 48MB	looking for plugin registrar
time: 0.000; rss: 48MB	region resolution
time: 0.000; rss: 48MB	loop checking
time: 0.000; rss: 48MB	static item recursion checking
time: 0.001; rss: 52MB	type collecting
time: 0.000; rss: 52MB	variance inference
time: 0.005; rss: 57MB	coherence checking
time: 0.007; rss: 64MB	wf checking
time: 0.000; rss: 64MB	item-types checking
time: 1.601; rss: 143MB	item-bodies checking
time: 0.000; rss: 143MB	drop-impl checking
time: 0.001; rss: 143MB	const checking
time: 0.000; rss: 143MB	privacy checking
time: 0.000; rss: 143MB	stability index
time: 0.000; rss: 143MB	intrinsic checking
time: 0.000; rss: 143MB	effect checking
time: 0.000; rss: 143MB	match checking
time: 0.000; rss: 143MB	liveness checking
time: 0.002; rss: 143MB	rvalue checking
time: 0.001; rss: 143MB	MIR dump
time: 0.000; rss: 143MB	MIR passes
time: 0.001; rss: 143MB	borrow checking
time: 0.000; rss: 143MB	reachability checking
time: 0.000; rss: 143MB	death checking
time: 0.000; rss: 143MB	stability checking
time: 0.000; rss: 143MB	unused lib feature checking
time: 0.004; rss: 145MB	lint checking
time: 0.001; rss: 145MB	resolving dependency formats
  time: 13.541; rss: 187MB	translation item collection
  time: 0.000; rss: 224MB	write metadata
time: 42.460; rss: 224MB	translation
  time: 0.014; rss: 98MB	llvm function passes [0]
  time: 0.001; rss: 98MB	llvm module passes [0]
  time: 0.273; rss: 104MB	codegen passes [0]
  time: 0.000; rss: 97MB	codegen passes [0]
time: 0.296; rss: 97MB	LLVM passes
  time: 0.108; rss: 97MB	running linker
time: 0.108; rss: 97MB	linking
done
