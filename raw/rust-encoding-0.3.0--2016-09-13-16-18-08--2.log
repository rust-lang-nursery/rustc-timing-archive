commit 2fd060815f9e9c4ae787cb1cd44df51aeb91fe6e
Merge: c87ba3f b778f7fa
Author: bors <bors@rust-lang.org>
Date:   Tue Sep 13 10:54:55 2016 -0700

    Auto merge of #36181 - seanmonstar:likely, r=nikomatsakis
    
    core: add likely and unlikely intrinsics
    
    I'm no good at reading assembly, but I have tried a stage1 compiler with this patch, and it does cause different asm output. Additionally, testing this compiler on my httparse crate with some `likely` usage added in to the branches does affect benchmarks. However, I'm sure a codegen test should be included, if anyone knows what it should look like.
    
    There isn't an entry in `librustc_trans/context.rs` in this diff, because it already exists (`llvm.expect.i1` is used for array indices).
    
    ----
    
    Even though this does affect httparse benchmarks, it doesn't seem to affect it the same way GCC's `__builtin_expect` affects picohttpparser. I was confused that the deviation on the benchmarks grew hugely when testing this, especially since I'm absolutely certain that the branchs where I added `likely` were always `true`. I chalk that up to GCC and LLVM handle branch prediction differently.
    
    cc #26179
rustc: ./rust-encoding-0.3.0
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling encoding v0.3.0-dev (file:///root/benchmarks/rust-encoding-0.3.0)
time: 0.021; rss: 49MB	parsing
Lines of code:             6066
Pre-expansion node count:  28489
time: 0.000; rss: 49MB	recursion limit
time: 0.000; rss: 49MB	crate injection
time: 0.000; rss: 49MB	plugin loading
time: 0.000; rss: 49MB	plugin registration
time: 0.040; rss: 74MB	expansion
time: 0.000; rss: 74MB	maybe building test harness
time: 0.000; rss: 74MB	maybe creating a macro crate
time: 0.002; rss: 74MB	assigning node ids
Post-expansion node count: 39145
time: 0.000; rss: 74MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 74MB	complete gated feature checking
time: 0.001; rss: 74MB	collecting defs
time: 0.001; rss: 76MB	external crate/lib resolution
time: 0.001; rss: 76MB	early lint checks
time: 0.000; rss: 76MB	AST validation
time: 0.004; rss: 79MB	name resolution
time: 0.004; rss: 82MB	lowering ast -> hir
time: 0.001; rss: 82MB	indexing hir
time: 0.000; rss: 82MB	attribute checking
time: 0.000; rss: 81MB	language item collection
time: 0.001; rss: 81MB	lifetime resolution
time: 0.000; rss: 81MB	looking for entry point
time: 0.000; rss: 81MB	looking for plugin registrar
time: 0.002; rss: 83MB	region resolution
time: 0.000; rss: 83MB	loop checking
time: 0.000; rss: 83MB	static item recursion checking
time: 0.015; rss: 83MB	compute_incremental_hashes_map
time: 0.000; rss: 83MB	load_dep_graph
time: 0.010; rss: 84MB	type collecting
time: 0.000; rss: 84MB	variance inference
time: 0.016; rss: 87MB	coherence checking
time: 0.014; rss: 87MB	wf checking
time: 0.011; rss: 87MB	item-types checking
time: 0.148; rss: 93MB	item-bodies checking
time: 0.000; rss: 93MB	drop-impl checking
time: 0.011; rss: 93MB	const checking
time: 0.001; rss: 93MB	privacy checking
time: 0.000; rss: 93MB	stability index
time: 0.002; rss: 93MB	intrinsic checking
time: 0.000; rss: 93MB	effect checking
time: 0.007; rss: 93MB	match checking
time: 0.001; rss: 93MB	liveness checking
time: 0.007; rss: 93MB	rvalue checking
time: 0.020; rss: 105MB	MIR dump
  time: 0.003; rss: 105MB	SimplifyCfg
  time: 0.004; rss: 105MB	QualifyAndPromoteConstants
  time: 0.005; rss: 105MB	TypeckMir
  time: 0.000; rss: 105MB	SimplifyBranches
  time: 0.001; rss: 105MB	SimplifyCfg
time: 0.013; rss: 105MB	MIR passes
time: 0.021; rss: 105MB	borrow checking
time: 0.000; rss: 105MB	reachability checking
time: 0.001; rss: 105MB	death checking
time: 0.002; rss: 105MB	stability checking
time: 0.000; rss: 105MB	unused lib feature checking
time: 0.017; rss: 105MB	lint checking
time: 0.000; rss: 105MB	resolving dependency formats
  time: 0.000; rss: 105MB	NoLandingPads
  time: 0.001; rss: 105MB	SimplifyCfg
  time: 0.003; rss: 105MB	EraseRegions
  time: 0.000; rss: 105MB	AddCallGuards
  time: 0.018; rss: 105MB	ElaborateDrops
  time: 0.000; rss: 105MB	NoLandingPads
  time: 0.002; rss: 105MB	SimplifyCfg
  time: 0.001; rss: 105MB	Deaggregator
  time: 0.000; rss: 105MB	AddCallGuards
  time: 0.000; rss: 105MB	PreTrans
time: 0.025; rss: 105MB	Prepare MIR codegen passes
  time: 0.021; rss: 105MB	write metadata
  time: 0.243; rss: 234MB	translation item collection
  time: 0.003; rss: 234MB	codegen unit partitioning
  time: 0.006; rss: 255MB	internalize symbols
time: 0.591; rss: 248MB	translation
time: 0.000; rss: 248MB	assert dep graph
time: 0.000; rss: 248MB	serialize dep graph
  time: 0.026; rss: 123MB	llvm function passes [0]
  time: 0.056; rss: 128MB	llvm module passes [0]
  time: 0.642; rss: 132MB	codegen passes [0]
  time: 0.001; rss: 132MB	codegen passes [0]
time: 0.783; rss: 132MB	LLVM passes
time: 0.000; rss: 132MB	serialize work products
time: 0.081; rss: 102MB	linking
done
