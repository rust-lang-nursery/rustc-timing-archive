commit b6b98eaa40d2c81890cbeb31258aadb238f07279
Merge: 8c2b0e6 fff9216
Author: bors <bors@rust-lang.org>
Date:   Sat Nov 12 22:36:49 2016 -0800

    Auto merge of #37728 - QuietMisdreavus:rustdoc-enum-struct, r=GuillaumeGomez
    
    rustdoc: fold fields for enum struct variants into a docblock
    
    Per discussion in #37500, this PR updates the enum rendering code to wrap variants with named struct fields in a `docblock` span that is hidden automatically upon load of the page. This gives struct variant fields a clean separation from other enum variants, giving a boost to the readability of such documentation. Preview output is available [on the issue page](https://github.com/rust-lang/rust/issues/37500#issuecomment-260069269), but for the sake of completeness I'll include the images here again.
    
    ![rustdoc struct enum variant 4 part 1](https://cloud.githubusercontent.com/assets/5217170/20231925/96160b7e-a82a-11e6-945b-bbba95c5e4bc.PNG)
    
    When you initially load the page, there's a line under variants with struct fields letting you know you can click to expand the listing.
    
    ![rustdoc struct enum variant 4 part 2](https://cloud.githubusercontent.com/assets/3050060/20232067/1dc63266-a866-11e6-9555-8fb1c8afdcec.png)
    
    If you click to expand, the header and table unfold into a nicely-indented listing.
    
    If you want to take a look in your own browser and screen size, [I've got this version hosted on my server](https://shiva.icesoldier.me/doctest/doctest/enum.OldTopicRemoval.html).
    
    Fixes #37500
    
    r? @GuillaumeGomez
rustc: ./regex.0.1.30
cargo rustc  -- -Ztime-passes -Zinput-stats
   Compiling regex v0.1.30 (file:///root/benchmarks/regex.0.1.30)
time: 0.042; rss: 54MB	parsing
Lines of code:             8558
Pre-expansion node count:  58049
time: 0.000; rss: 54MB	recursion limit
time: 0.000; rss: 54MB	crate injection
time: 0.000; rss: 54MB	plugin loading
time: 0.000; rss: 54MB	plugin registration
time: 0.028; rss: 79MB	expansion
time: 0.000; rss: 79MB	maybe building test harness
time: 0.001; rss: 79MB	maybe creating a macro crate
Post-expansion node count: 68093
time: 0.000; rss: 79MB	checking for inline asm in case the target doesn't support it
time: 0.001; rss: 79MB	complete gated feature checking
time: 0.003; rss: 79MB	early lint checks
time: 0.000; rss: 79MB	AST validation
time: 0.005; rss: 79MB	name resolution
time: 0.005; rss: 86MB	lowering ast -> hir
time: 0.001; rss: 88MB	indexing hir
time: 0.001; rss: 88MB	attribute checking
time: 0.001; rss: 79MB	language item collection
time: 0.001; rss: 79MB	lifetime resolution
time: 0.000; rss: 79MB	looking for entry point
time: 0.000; rss: 79MB	looking for plugin registrar
time: 0.004; rss: 83MB	region resolution
time: 0.000; rss: 83MB	loop checking
time: 0.001; rss: 83MB	static item recursion checking
time: 0.018; rss: 84MB	compute_incremental_hashes_map
time: 0.000; rss: 84MB	load_dep_graph
time: 0.007; rss: 84MB	type collecting
time: 0.000; rss: 84MB	variance inference
time: 0.010; rss: 86MB	coherence checking
time: 0.007; rss: 87MB	wf checking
time: 0.148; rss: 98MB	item-types checking
time: 0.106; rss: 99MB	item-bodies checking
time: 0.000; rss: 99MB	drop-impl checking
time: 0.022; rss: 101MB	const checking
time: 0.002; rss: 101MB	privacy checking
time: 0.000; rss: 101MB	stability index
time: 0.001; rss: 101MB	intrinsic checking
time: 0.000; rss: 101MB	effect checking
time: 0.002; rss: 101MB	match checking
time: 0.002; rss: 101MB	liveness checking
time: 0.006; rss: 101MB	rvalue checking
time: 0.040; rss: 114MB	MIR dump
  time: 0.003; rss: 114MB	SimplifyCfg
  time: 0.005; rss: 114MB	QualifyAndPromoteConstants
  time: 0.007; rss: 114MB	TypeckMir
  time: 0.000; rss: 114MB	SimplifyBranches
  time: 0.001; rss: 114MB	SimplifyCfg
time: 0.015; rss: 114MB	MIR cleanup and validation
time: 0.019; rss: 114MB	borrow checking
time: 0.000; rss: 114MB	reachability checking
time: 0.002; rss: 114MB	death checking
time: 0.001; rss: 114MB	stability checking
time: 0.000; rss: 114MB	unused lib feature checking
time: 0.022; rss: 114MB	lint checking
time: 0.000; rss: 114MB	resolving dependency formats
  time: 0.000; rss: 114MB	NoLandingPads
  time: 0.001; rss: 114MB	SimplifyCfg
  time: 0.003; rss: 114MB	EraseRegions
  time: 0.000; rss: 114MB	AddCallGuards
  time: 0.007; rss: 117MB	ElaborateDrops
  time: 0.000; rss: 117MB	NoLandingPads
  time: 0.002; rss: 117MB	SimplifyCfg
  time: 0.002; rss: 117MB	InstCombine
  time: 0.000; rss: 117MB	Deaggregator
  time: 0.000; rss: 117MB	CopyPropagation
  time: 0.002; rss: 117MB	SimplifyLocals
  time: 0.000; rss: 117MB	AddCallGuards
  time: 0.000; rss: 117MB	PreTrans
time: 0.019; rss: 117MB	MIR optimisations
  time: 0.019; rss: 121MB	write metadata
  time: 0.043; rss: 124MB	translation item collection
  time: 0.006; rss: 124MB	codegen unit partitioning
  time: 0.006; rss: 151MB	internalize symbols
time: 0.403; rss: 151MB	translation
time: 0.000; rss: 151MB	assert dep graph
time: 0.000; rss: 151MB	serialize dep graph
  time: 0.036; rss: 110MB	llvm function passes [0]
  time: 0.019; rss: 111MB	llvm module passes [0]
  time: 0.690; rss: 113MB	codegen passes [0]
  time: 0.000; rss: 113MB	codegen passes [0]
time: 0.804; rss: 113MB	LLVM passes
time: 0.000; rss: 113MB	serialize work products
time: 0.035; rss: 84MB	linking
done
