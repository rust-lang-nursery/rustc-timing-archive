commit 30857ae8f67676e32322cdbb6c606c319eacdd73
Merge: c8867f8 88b4646
Author: bors <bors@rust-lang.org>
Date:   Tue Nov 15 04:42:28 2016 -0800

    Auto merge of #37714 - alexcrichton:builtins-hidden, r=nikomatsakis
    
    rustc: Flag all builtins functions as hidden
    
    When compiling compiler-rt you typically compile with `-fvisibility=hidden`
    which to ensure that all symbols are hidden in shared objects and don't show up
    in symbol tables. This is important for these intrinsics being linked in every
    crate to ensure that we're not unnecessarily bloating the public ABI of Rust
    crates.
    
    This should help allow the compiler-builtins project with Rust-defined builtins
    start landing in-tree as well.
rustc: ./syntex-0.42.2
cargo rustc -p syntex_syntax  -- -Ztime-passes -Zinput-stats
   Compiling syntex_syntax v0.42.0
time: 0.092; rss: 71MB	parsing
Lines of code:             33687
Pre-expansion node count:  223115
time: 0.000; rss: 71MB	recursion limit
time: 0.000; rss: 71MB	crate injection
time: 0.000; rss: 71MB	plugin loading
time: 0.000; rss: 71MB	plugin registration
time: 0.232; rss: 146MB	expansion
time: 0.000; rss: 146MB	maybe building test harness
time: 0.006; rss: 146MB	maybe creating a macro crate
Post-expansion node count: 638863
time: 0.000; rss: 146MB	checking for inline asm in case the target doesn't support it
time: 0.013; rss: 146MB	complete gated feature checking
time: 0.023; rss: 146MB	early lint checks
time: 0.007; rss: 146MB	AST validation
time: 0.076; rss: 161MB	name resolution
time: 0.045; rss: 184MB	lowering ast -> hir
time: 0.008; rss: 195MB	indexing hir
time: 0.006; rss: 195MB	attribute checking
time: 0.004; rss: 151MB	language item collection
time: 0.010; rss: 151MB	lifetime resolution
time: 0.000; rss: 151MB	looking for entry point
time: 0.000; rss: 151MB	looking for plugin registrar
time: 0.040; rss: 172MB	region resolution
time: 0.005; rss: 172MB	loop checking
time: 0.004; rss: 172MB	static item recursion checking
time: 0.325; rss: 172MB	compute_incremental_hashes_map
time: 0.000; rss: 172MB	load_dep_graph
time: 0.049; rss: 171MB	type collecting
time: 0.001; rss: 171MB	variance inference
time: 0.018; rss: 174MB	coherence checking
time: 0.093; rss: 178MB	wf checking
time: 0.180; rss: 183MB	item-types checking
time: 3.304; rss: 233MB	item-bodies checking
time: 0.000; rss: 233MB	drop-impl checking
time: 0.216; rss: 254MB	const checking
time: 0.044; rss: 254MB	privacy checking
time: 0.005; rss: 254MB	stability index
time: 0.017; rss: 254MB	intrinsic checking
time: 0.014; rss: 254MB	effect checking
time: 0.045; rss: 254MB	match checking
time: 0.049; rss: 256MB	liveness checking
time: 0.177; rss: 256MB	rvalue checking
time: 0.374; rss: 438MB	MIR dump
  time: 0.056; rss: 440MB	SimplifyCfg
  time: 0.073; rss: 440MB	QualifyAndPromoteConstants
  time: 0.097; rss: 440MB	TypeckMir
  time: 0.004; rss: 440MB	SimplifyBranches
  time: 0.031; rss: 440MB	SimplifyCfg
time: 0.261; rss: 440MB	MIR cleanup and validation
time: 0.479; rss: 440MB	borrow checking
time: 0.025; rss: 440MB	reachability checking
time: 0.038; rss: 440MB	death checking
time: 0.030; rss: 442MB	stability checking
time: 0.000; rss: 442MB	unused lib feature checking
time: 0.193; rss: 442MB	lint checking
time: 0.000; rss: 442MB	resolving dependency formats
  time: 0.003; rss: 442MB	NoLandingPads
  time: 0.026; rss: 442MB	SimplifyCfg
  time: 0.061; rss: 451MB	EraseRegions
  time: 0.011; rss: 451MB	AddCallGuards
  time: 0.270; rss: 467MB	ElaborateDrops
  time: 0.003; rss: 467MB	NoLandingPads
  time: 0.052; rss: 467MB	SimplifyCfg
  time: 0.029; rss: 467MB	InstCombine
  time: 0.012; rss: 467MB	Deaggregator
  time: 0.002; rss: 467MB	CopyPropagation
  time: 0.034; rss: 467MB	SimplifyLocals
  time: 0.010; rss: 467MB	AddCallGuards
  time: 0.002; rss: 467MB	PreTrans
time: 0.516; rss: 467MB	MIR optimisations
  time: 0.061; rss: 476MB	write metadata
  time: 0.398; rss: 489MB	translation item collection
  time: 0.065; rss: 498MB	codegen unit partitioning
  time: 0.046; rss: 741MB	internalize symbols
time: 4.315; rss: 741MB	translation
time: 0.000; rss: 741MB	assert dep graph
time: 0.000; rss: 741MB	serialize dep graph
  time: 0.525; rss: 421MB	llvm function passes [0]
  time: 0.245; rss: 430MB	llvm module passes [0]
  time: 10.350; rss: 428MB	codegen passes [0]
  time: 0.000; rss: 428MB	codegen passes [0]
time: 11.868; rss: 428MB	LLVM passes
time: 0.000; rss: 428MB	serialize work products
time: 0.342; rss: 106MB	linking
done
