commit 98a3502da1456b209ff031604cabbbcb9d0eddf1
Merge: 5bfe107 a61d85b
Author: bors <bors@rust-lang.org>
Date:   Sat Oct 15 15:38:52 2016 -0700

    Auto merge of #37152 - arielb1:drop-cache, r=pnkfelix
    
    add a per-param-env cache to `impls_bound`
    
    There used to be only a global cache, which led to uncached calls to
    trait selection when there were type parameters.
    
    This causes a 20% decrease in borrow-checking time and an overall 0.5% performance increase during bootstrapping (as borrow-checking tends to be a tiny part of compilation time).
    
    Fixes #37106 (drop elaboration times are now ~half of borrow checking,
    so might still be worthy of optimization, but not critical).
    
    r? @pnkfelix
rustc: ./piston-image-0.10.3
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling image v0.10.3 (file:///root/benchmarks/piston-image-0.10.3)
time: 0.070; rss: 55MB	parsing
Lines of code:             12000
Pre-expansion node count:  90272
time: 0.000; rss: 55MB	recursion limit
time: 0.000; rss: 55MB	crate injection
time: 0.000; rss: 55MB	plugin loading
time: 0.000; rss: 55MB	plugin registration
time: 0.095; rss: 93MB	expansion
time: 0.000; rss: 93MB	maybe building test harness
time: 0.001; rss: 93MB	maybe creating a macro crate
Post-expansion node count: 148999
time: 0.000; rss: 93MB	checking for inline asm in case the target doesn't support it
time: 0.003; rss: 93MB	complete gated feature checking
time: 0.005; rss: 93MB	early lint checks
time: 0.001; rss: 93MB	AST validation
time: 0.029; rss: 97MB	name resolution
time: 0.033; rss: 108MB	lowering ast -> hir
time: 0.008; rss: 110MB	indexing hir
time: 0.002; rss: 110MB	attribute checking
time: 0.002; rss: 99MB	language item collection
time: 0.003; rss: 99MB	lifetime resolution
time: 0.000; rss: 99MB	looking for entry point
time: 0.000; rss: 99MB	looking for plugin registrar
time: 0.020; rss: 105MB	region resolution
time: 0.002; rss: 105MB	loop checking
time: 0.001; rss: 105MB	static item recursion checking
time: 0.055; rss: 105MB	compute_incremental_hashes_map
time: 0.000; rss: 105MB	load_dep_graph
time: 0.017; rss: 107MB	type collecting
time: 0.000; rss: 107MB	variance inference
time: 0.030; rss: 111MB	coherence checking
time: 0.093; rss: 112MB	wf checking
time: 0.156; rss: 117MB	item-types checking
time: 0.935; rss: 126MB	item-bodies checking
time: 0.000; rss: 126MB	drop-impl checking
time: 0.061; rss: 128MB	const checking
time: 0.011; rss: 128MB	privacy checking
time: 0.001; rss: 128MB	stability index
time: 0.008; rss: 128MB	intrinsic checking
time: 0.003; rss: 128MB	effect checking
time: 0.018; rss: 128MB	match checking
time: 0.011; rss: 128MB	liveness checking
time: 0.050; rss: 128MB	rvalue checking
time: 0.171; rss: 166MB	MIR dump
  time: 0.012; rss: 168MB	SimplifyCfg
  time: 0.022; rss: 168MB	QualifyAndPromoteConstants
  time: 0.025; rss: 168MB	TypeckMir
  time: 0.001; rss: 168MB	SimplifyBranches
  time: 0.005; rss: 168MB	SimplifyCfg
time: 0.064; rss: 168MB	MIR passes
time: 0.126; rss: 168MB	borrow checking
time: 0.004; rss: 169MB	reachability checking
time: 0.009; rss: 169MB	death checking
time: 0.014; rss: 170MB	stability checking
time: 0.000; rss: 170MB	unused lib feature checking
time: 0.075; rss: 170MB	lint checking
time: 0.000; rss: 170MB	resolving dependency formats
  time: 0.001; rss: 170MB	NoLandingPads
  time: 0.005; rss: 170MB	SimplifyCfg
  time: 0.013; rss: 170MB	EraseRegions
  time: 0.002; rss: 170MB	AddCallGuards
  time: 0.052; rss: 174MB	ElaborateDrops
  time: 0.001; rss: 174MB	NoLandingPads
  time: 0.009; rss: 174MB	SimplifyCfg
  time: 0.006; rss: 174MB	InstCombine
  time: 0.002; rss: 174MB	Deaggregator
  time: 0.001; rss: 174MB	CopyPropagation
  time: 0.002; rss: 174MB	AddCallGuards
  time: 0.000; rss: 174MB	PreTrans
time: 0.093; rss: 174MB	Prepare MIR codegen passes
  time: 0.078; rss: 178MB	write metadata
  time: 0.481; rss: 191MB	translation item collection
  time: 0.032; rss: 194MB	codegen unit partitioning
  time: 0.025; rss: 311MB	internalize symbols
time: 3.156; rss: 285MB	translation
time: 0.000; rss: 285MB	assert dep graph
time: 0.000; rss: 285MB	serialize dep graph
  time: 0.205; rss: 217MB	llvm function passes [0]
  time: 0.085; rss: 222MB	llvm module passes [0]
  time: 4.140; rss: 223MB	codegen passes [0]
  time: 0.001; rss: 224MB	codegen passes [0]
time: 4.831; rss: 224MB	LLVM passes
time: 0.000; rss: 224MB	serialize work products
time: 0.272; rss: 98MB	linking
done
