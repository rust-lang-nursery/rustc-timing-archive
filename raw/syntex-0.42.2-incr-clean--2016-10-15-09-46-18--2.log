commit 8e05e7ee3c19a5594b79d67c8390cef78970be7c
Merge: 030bc49 48b3dd1
Author: bors <bors@rust-lang.org>
Date:   Sat Oct 15 06:08:55 2016 -0700

    Auto merge of #37100 - dikaiosune:master, r=eddyb
    
    Change Substs to type alias for Slice<Kind> for interning
    
    This changes the definition of `librustc::ty::subst::Substs` to be a type alias to `Slice<Kind>`. `Substs` was already interned, but can now make use of the efficient `PartialEq` and `Hash` impls on `librustc::ty::Slice`.
    
    I'm working on collecting some timing data for this, will update when it's done.
    
    I chose to leave the impls on `Substs<'tcx>` even though it's now just a type alias to `Slice<Kind<'tcx>>` because it has the smallest footprint on other portions of the compiler which depend on its API. It turns out to be a pretty huge diff if you change where Substs's methods live :smile:. That said, I'm not necessarily sure it's the *best* implementation but it's probably the easiest/smallest to review.
    
    Many thanks to @eddyb for both suggesting this as a project for learning more about the compiler, and the tireless ~~handholding~~ mentorship he provided.
rustc: ./syntex-0.42.2-incr-clean
RUSTFLAGS="-Z incremental=incr" \
    cargo rustc -p syntex_syntax -- -Ztime-passes -Zinput-stats -Z incremental-info
   Compiling syntex_syntax v0.42.0
time: 0.109; rss: 75MB	parsing
Lines of code:             33687
Pre-expansion node count:  224033
time: 0.000; rss: 75MB	recursion limit
time: 0.000; rss: 75MB	crate injection
time: 0.000; rss: 75MB	plugin loading
time: 0.000; rss: 75MB	plugin registration
time: 0.272; rss: 148MB	expansion
time: 0.000; rss: 148MB	maybe building test harness
time: 0.006; rss: 148MB	maybe creating a macro crate
Post-expansion node count: 641571
time: 0.000; rss: 148MB	checking for inline asm in case the target doesn't support it
time: 0.013; rss: 148MB	complete gated feature checking
time: 0.024; rss: 148MB	early lint checks
time: 0.007; rss: 148MB	AST validation
time: 0.085; rss: 162MB	name resolution
time: 0.048; rss: 202MB	lowering ast -> hir
time: 0.009; rss: 211MB	indexing hir
time: 0.006; rss: 211MB	attribute checking
time: 0.005; rss: 162MB	language item collection
time: 0.011; rss: 161MB	lifetime resolution
time: 0.000; rss: 161MB	looking for entry point
time: 0.000; rss: 161MB	looking for plugin registrar
time: 0.043; rss: 172MB	region resolution
time: 0.006; rss: 172MB	loop checking
time: 0.006; rss: 172MB	static item recursion checking
time: 0.262; rss: 174MB	compute_incremental_hashes_map
time: 0.000; rss: 174MB	load_dep_graph
time: 0.043; rss: 180MB	type collecting
time: 0.001; rss: 180MB	variance inference
time: 0.037; rss: 182MB	coherence checking
time: 0.102; rss: 186MB	wf checking
time: 0.197; rss: 192MB	item-types checking
time: 3.964; rss: 240MB	item-bodies checking
time: 0.000; rss: 240MB	drop-impl checking
time: 0.308; rss: 244MB	const checking
time: 0.052; rss: 244MB	privacy checking
time: 0.007; rss: 244MB	stability index
time: 0.021; rss: 244MB	intrinsic checking
time: 0.018; rss: 244MB	effect checking
time: 0.056; rss: 244MB	match checking
time: 0.052; rss: 236MB	liveness checking
time: 0.279; rss: 236MB	rvalue checking
time: 0.418; rss: 426MB	MIR dump
  time: 0.057; rss: 427MB	SimplifyCfg
  time: 0.081; rss: 427MB	QualifyAndPromoteConstants
  time: 0.109; rss: 427MB	TypeckMir
  time: 0.004; rss: 427MB	SimplifyBranches
  time: 0.031; rss: 428MB	SimplifyCfg
time: 0.283; rss: 428MB	MIR passes
time: 0.677; rss: 428MB	borrow checking
time: 0.017; rss: 428MB	reachability checking
time: 0.043; rss: 428MB	death checking
time: 0.040; rss: 430MB	stability checking
time: 0.000; rss: 430MB	unused lib feature checking
time: 0.216; rss: 430MB	lint checking
time: 0.000; rss: 430MB	resolving dependency formats
  time: 0.003; rss: 430MB	NoLandingPads
  time: 0.026; rss: 430MB	SimplifyCfg
  time: 0.070; rss: 439MB	EraseRegions
  time: 0.011; rss: 439MB	AddCallGuards
  time: 1.078; rss: 458MB	ElaborateDrops
  time: 0.003; rss: 458MB	NoLandingPads
  time: 0.052; rss: 458MB	SimplifyCfg
  time: 0.029; rss: 458MB	InstCombine
  time: 0.011; rss: 458MB	Deaggregator
  time: 0.003; rss: 458MB	CopyPropagation
  time: 0.009; rss: 458MB	AddCallGuards
  time: 0.002; rss: 458MB	PreTrans
time: 1.297; rss: 458MB	Prepare MIR codegen passes
  time: 0.263; rss: 466MB	write metadata
  time: 0.447; rss: 477MB	translation item collection
  time: 0.061; rss: 486MB	codegen unit partitioning
  time: 0.051; rss: 730MB	internalize symbols
time: 5.033; rss: 609MB	translation
time: 0.000; rss: 609MB	assert dep graph
time: 0.000; rss: 609MB	serialize dep graph
incremental: re-using 0 out of 1 modules
  time: 0.513; rss: 410MB	llvm function passes [0]
  time: 0.242; rss: 418MB	llvm module passes [0]
  time: 9.985; rss: 417MB	codegen passes [0]
  time: 0.001; rss: 412MB	codegen passes [0]
time: 11.477; rss: 412MB	LLVM passes
time: 0.000; rss: 412MB	serialize work products
time: 0.664; rss: 107MB	linking
done
