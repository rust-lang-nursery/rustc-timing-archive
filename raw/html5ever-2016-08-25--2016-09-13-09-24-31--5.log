commit c87ba3f1222ba20d491e8ed76a04977283280742
Merge: 58450c0 f9a3408
Author: bors <bors@rust-lang.org>
Date:   Tue Sep 13 04:57:23 2016 -0700

    Auto merge of #36264 - matklad:zeroing-cstring, r=alexcrichton
    
    Zero first byte of CString on drop
    
    Hi! This is one more attempt to ameliorate `CString::new("...").unwrap().as_ptr()` problem (related RFC: https://github.com/rust-lang/rfcs/pull/1642).
    
    One of the biggest problems with this code is that it may actually work in practice, so the idea of this PR is to proactively break such invalid code.
    
    Looks like writing a `null` byte at the start of the CString should do the trick, and I think is an affordable cost: zeroing a single byte in `Drop` should be cheap enough compared to actual memory deallocation which would follow.
    
    I would actually prefer to do something like
    
    ```Rust
    impl Drop for CString {
        fn drop(&mut self) {
            let pattern = b"CTHULHU FHTAGN ";
            let bytes = self.inner[..self.inner.len() - 1];
            for (d, s) in bytes.iter_mut().zip(pattern.iter().cycle()) {
                *d = *s;
            }
        }
    }
    ```
    
    because Cthulhu error should be much easier to google, but unfortunately this would be too expensive in release builds, and we can't implement things `cfg(debug_assertions)` conditionally in stdlib.
    
    Not sure if the whole idea or my implementation (I've used ~~`transmute`~~ `mem::unitialized` to workaround move out of Drop thing) makes sense :)
rustc: ./html5ever-2016-08-25
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling html5ever v0.5.4 (file:///root/benchmarks/html5ever-2016-08-25)
time: 0.029; rss: 52MB	parsing
Lines of code:             8210
Pre-expansion node count:  52238
time: 0.000; rss: 52MB	recursion limit
time: 0.000; rss: 52MB	crate injection
time: 0.000; rss: 52MB	plugin loading
time: 0.000; rss: 52MB	plugin registration
time: 1.401; rss: 99MB	expansion
time: 0.000; rss: 99MB	maybe building test harness
time: 0.002; rss: 99MB	maybe creating a macro crate
time: 0.008; rss: 99MB	assigning node ids
Post-expansion node count: 164262
time: 0.000; rss: 99MB	checking for inline asm in case the target doesn't support it
time: 0.003; rss: 99MB	complete gated feature checking
time: 0.005; rss: 101MB	collecting defs
time: 0.006; rss: 103MB	external crate/lib resolution
time: 0.009; rss: 103MB	early lint checks
time: 0.002; rss: 103MB	AST validation
time: 0.019; rss: 107MB	name resolution
time: 0.016; rss: 124MB	lowering ast -> hir
time: 0.004; rss: 129MB	indexing hir
time: 0.002; rss: 129MB	attribute checking
time: 0.002; rss: 110MB	language item collection
time: 0.003; rss: 110MB	lifetime resolution
time: 0.000; rss: 110MB	looking for entry point
time: 0.000; rss: 110MB	looking for plugin registrar
time: 0.015; rss: 116MB	region resolution
time: 0.002; rss: 116MB	loop checking
time: 0.003; rss: 116MB	static item recursion checking
time: 0.023; rss: 117MB	compute_incremental_hashes_map
time: 0.000; rss: 117MB	load_dep_graph
time: 0.014; rss: 118MB	type collecting
time: 0.000; rss: 118MB	variance inference
time: 0.026; rss: 120MB	coherence checking
time: 0.027; rss: 121MB	wf checking
time: 0.364; rss: 129MB	item-types checking
time: 0.586; rss: 143MB	item-bodies checking
time: 0.000; rss: 143MB	drop-impl checking
time: 0.077; rss: 144MB	const checking
time: 0.009; rss: 144MB	privacy checking
time: 0.002; rss: 144MB	stability index
time: 0.005; rss: 144MB	intrinsic checking
time: 0.003; rss: 144MB	effect checking
time: 0.028; rss: 144MB	match checking
time: 0.013; rss: 139MB	liveness checking
time: 0.032; rss: 139MB	rvalue checking
time: 0.119; rss: 183MB	MIR dump
  time: 0.009; rss: 185MB	SimplifyCfg
  time: 0.015; rss: 185MB	QualifyAndPromoteConstants
  time: 0.027; rss: 185MB	TypeckMir
  time: 0.000; rss: 185MB	SimplifyBranches
  time: 0.005; rss: 185MB	SimplifyCfg
time: 0.056; rss: 185MB	MIR passes
time: 0.096; rss: 190MB	borrow checking
time: 0.003; rss: 190MB	reachability checking
time: 0.007; rss: 190MB	death checking
time: 0.009; rss: 190MB	stability checking
time: 0.000; rss: 190MB	unused lib feature checking
time: 0.065; rss: 190MB	lint checking
time: 0.000; rss: 190MB	resolving dependency formats
  time: 0.000; rss: 190MB	NoLandingPads
  time: 0.004; rss: 190MB	SimplifyCfg
  time: 0.010; rss: 190MB	EraseRegions
  time: 0.001; rss: 190MB	AddCallGuards
  time: 0.082; rss: 194MB	ElaborateDrops
  time: 0.000; rss: 194MB	NoLandingPads
  time: 0.007; rss: 192MB	SimplifyCfg
  time: 0.001; rss: 190MB	Deaggregator
  time: 0.001; rss: 190MB	AddCallGuards
  time: 0.000; rss: 190MB	PreTrans
time: 0.106; rss: 190MB	Prepare MIR codegen passes
  time: 0.060; rss: 190MB	write metadata
  time: 0.043; rss: 193MB	translation item collection
  time: 0.005; rss: 193MB	codegen unit partitioning
  time: 0.012; rss: 211MB	internalize symbols
time: 0.432; rss: 185MB	translation
time: 0.000; rss: 185MB	assert dep graph
time: 0.000; rss: 185MB	serialize dep graph
  time: 0.023; rss: 112MB	llvm function passes [0]
  time: 0.013; rss: 113MB	llvm module passes [0]
  time: 0.548; rss: 117MB	codegen passes [0]
  time: 0.001; rss: 117MB	codegen passes [0]
time: 0.629; rss: 117MB	LLVM passes
time: 0.000; rss: 117MB	serialize work products
time: 0.060; rss: 97MB	linking
done
