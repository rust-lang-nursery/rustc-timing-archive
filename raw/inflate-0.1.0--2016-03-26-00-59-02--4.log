commit 8d2d2be6c61c17da8027a72da91f87a0e2487f74
Merge: a1e29da 1ea93c2
Author: bors <bors@rust-lang.org>
Date:   Fri Mar 25 18:09:28 2016 -0700

    Auto merge of #32293 - nikomatsakis:incr-comp-def-path-munging, r=alexcrichton
    
    Revamp symbol names for impls (and make them deterministic, etc)
    
    This builds on @michaelwoerister's epic PR #31539 (note that his PR never landed, so I just incorporated it into this one). The main change here is that we remove the "name" from `DefPathData` for impls, since that name is synthetic and not sufficiently predictable for incr comp. However, just doing that would cause bad symbol names since those are based on the `DefPath`. Therefore, I introduce a new mechanism for getting symbol names (and also paths for user display) called `item_path`. This is kind of simplistic for now (based on strings) but I expect to expand it later to support richer types, hopefully generating C++-mangled names that gdb etc can understand. Along the way I cleaned up how we track the path that leads to an extern crate.
    
    There is still some cleanup left undone here. Notably, I didn't remove the impl names altogether -- that would probably make sense. I also didn't try to remove the `item_symbols` vector. Mostly I want to unblock my other incr. comp. work. =)
    
    r? @eddyb
    cc @eddyb @alexcrichton @michaelwoerister
rustc: ./inflate-0.1.0
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling inflate v0.1.0 (file:///root/benchmarks/inflate-0.1.0)
time: 0.004; rss: 39MB	parsing
Lines of code:             956
Pre-expansion node count:  4761
time: 0.001; rss: 39MB	configuration 1
time: 0.000; rss: 39MB	recursion limit
time: 0.000; rss: 39MB	gated macro checking
time: 0.000; rss: 39MB	crate injection
time: 0.003; rss: 42MB	macro loading
time: 0.000; rss: 42MB	plugin loading
time: 0.000; rss: 42MB	plugin registration
time: 0.080; rss: 50MB	expansion
time: 0.001; rss: 50MB	complete gated feature checking 1
time: 0.009; rss: 50MB	configuration 2
time: 0.000; rss: 50MB	gated configuration checking
time: 0.004; rss: 50MB	maybe building test harness
time: 0.004; rss: 50MB	prelude injection
time: 0.000; rss: 50MB	checking that all macro invocations are gone
time: 0.000; rss: 50MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 50MB	complete gated feature checking 2
time: 0.000; rss: 50MB	const fn bodies and arguments
Post-expansion node count: 54798
time: 0.004; rss: 50MB	assigning node ids
time: 0.009; rss: 56MB	lowering ast -> hir
time: 0.002; rss: 56MB	indexing hir
time: 0.001; rss: 56MB	attribute checking
time: 0.004; rss: 56MB	early lint checks
time: 0.001; rss: 53MB	external crate/lib resolution
time: 0.001; rss: 53MB	language item collection
time: 0.010; rss: 64MB	resolution
time: 0.001; rss: 64MB	lifetime resolution
time: 0.000; rss: 64MB	looking for entry point
time: 0.000; rss: 64MB	looking for plugin registrar
time: 0.003; rss: 64MB	region resolution
time: 0.000; rss: 64MB	loop checking
time: 0.000; rss: 64MB	static item recursion checking
time: 0.001; rss: 66MB	type collecting
time: 0.000; rss: 66MB	variance inference
time: 0.014; rss: 80MB	coherence checking
time: 0.002; rss: 80MB	wf checking
time: 0.002; rss: 80MB	item-types checking
time: 2.835; rss: 102MB	item-bodies checking
time: 0.000; rss: 102MB	drop-impl checking
time: 0.013; rss: 103MB	const checking
time: 0.002; rss: 103MB	privacy checking
time: 0.000; rss: 103MB	stability index
time: 0.000; rss: 103MB	intrinsic checking
time: 0.001; rss: 103MB	effect checking
time: 0.003; rss: 103MB	match checking
time: 0.065; rss: 103MB	liveness checking
time: 0.009; rss: 103MB	rvalue checking
time: 0.031; rss: 117MB	MIR dump
time: 0.015; rss: 116MB	MIR passes
time: 0.226; rss: 115MB	borrow checking
time: 0.000; rss: 115MB	reachability checking
time: 0.003; rss: 115MB	death checking
time: 0.002; rss: 115MB	stability checking
time: 0.000; rss: 115MB	unused lib feature checking
time: 0.018; rss: 116MB	lint checking
time: 0.000; rss: 116MB	resolving dependency formats
  time: 0.011; rss: 128MB	translation item collection
  time: 0.003; rss: 144MB	write metadata
time: 0.362; rss: 137MB	translation
  time: 0.026; rss: 100MB	llvm function passes [0]
  time: 0.005; rss: 101MB	llvm module passes [0]
  time: 0.496; rss: 107MB	codegen passes [0]
  time: 0.000; rss: 95MB	codegen passes [0]
time: 0.568; rss: 95MB	LLVM passes
time: 0.034; rss: 95MB	linking
done
