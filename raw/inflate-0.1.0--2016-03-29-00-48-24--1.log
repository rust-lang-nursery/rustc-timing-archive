commit a11129701c873d96fe0816e4c8b55510efebe96e
Merge: cad964a 221d0fb
Author: bors <bors@rust-lang.org>
Date:   Mon Mar 28 20:50:42 2016 -0700

    Auto merge of #32479 - eddyb:eof-not-even-twice, r=nikomatsakis
    
    Prevent bumping the parser past the EOF.
    
    Makes `Parser::bump` after EOF into an ICE, forcing callers to avoid repeated EOF bumps.
    This ICE is intended to break infinite loops where EOF wasn't stopping the loop.
    
    For example, the handling of EOF in `parse_trait_items`' recovery loop fixes #32446.
    But even without this specific fix, the ICE is triggered, which helps diagnosis and UX.
    
    This is a `[breaking-change]` for plugins authors who eagerly eat multiple EOFs.
    See https://github.com/docopt/docopt.rs/pull/171 for such an example and the necessary fix.
rustc: ./inflate-0.1.0
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling inflate v0.1.0 (file:///root/benchmarks/inflate-0.1.0)
time: 0.004; rss: 40MB	parsing
Lines of code:             956
Pre-expansion node count:  4761
time: 0.001; rss: 40MB	configuration 1
time: 0.000; rss: 40MB	recursion limit
time: 0.000; rss: 40MB	gated macro checking
time: 0.000; rss: 40MB	crate injection
time: 0.003; rss: 43MB	macro loading
time: 0.000; rss: 43MB	plugin loading
time: 0.000; rss: 43MB	plugin registration
time: 0.079; rss: 50MB	expansion
time: 0.001; rss: 50MB	complete gated feature checking 1
time: 0.009; rss: 50MB	configuration 2
time: 0.000; rss: 50MB	gated configuration checking
time: 0.004; rss: 50MB	maybe building test harness
time: 0.004; rss: 50MB	prelude injection
time: 0.000; rss: 50MB	checking that all macro invocations are gone
time: 0.000; rss: 50MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 50MB	complete gated feature checking 2
time: 0.000; rss: 50MB	const fn bodies and arguments
Post-expansion node count: 54798
time: 0.004; rss: 50MB	assigning node ids
time: 0.009; rss: 56MB	lowering ast -> hir
time: 0.002; rss: 56MB	indexing hir
time: 0.001; rss: 56MB	attribute checking
time: 0.004; rss: 56MB	early lint checks
time: 0.001; rss: 54MB	external crate/lib resolution
time: 0.001; rss: 54MB	language item collection
time: 0.010; rss: 64MB	resolution
time: 0.001; rss: 64MB	lifetime resolution
time: 0.000; rss: 64MB	looking for entry point
time: 0.000; rss: 64MB	looking for plugin registrar
time: 0.003; rss: 64MB	region resolution
time: 0.000; rss: 64MB	loop checking
time: 0.000; rss: 64MB	static item recursion checking
time: 0.001; rss: 66MB	type collecting
time: 0.000; rss: 66MB	variance inference
time: 0.015; rss: 80MB	coherence checking
time: 0.002; rss: 80MB	wf checking
time: 0.002; rss: 80MB	item-types checking
time: 2.869; rss: 103MB	item-bodies checking
time: 0.000; rss: 103MB	drop-impl checking
time: 0.013; rss: 104MB	const checking
time: 0.002; rss: 104MB	privacy checking
time: 0.000; rss: 104MB	stability index
time: 0.000; rss: 104MB	intrinsic checking
time: 0.001; rss: 104MB	effect checking
time: 0.003; rss: 104MB	match checking
time: 0.065; rss: 103MB	liveness checking
time: 0.009; rss: 103MB	rvalue checking
time: 0.032; rss: 118MB	MIR dump
time: 0.015; rss: 117MB	MIR passes
time: 0.201; rss: 116MB	borrow checking
time: 0.000; rss: 116MB	reachability checking
time: 0.003; rss: 116MB	death checking
time: 0.003; rss: 116MB	stability checking
time: 0.000; rss: 116MB	unused lib feature checking
time: 0.018; rss: 117MB	lint checking
time: 0.000; rss: 117MB	resolving dependency formats
  time: 0.011; rss: 128MB	translation item collection
  time: 0.003; rss: 145MB	write metadata
time: 0.371; rss: 137MB	translation
  time: 0.025; rss: 101MB	llvm function passes [0]
  time: 0.005; rss: 102MB	llvm module passes [0]
  time: 0.494; rss: 107MB	codegen passes [0]
  time: 0.000; rss: 95MB	codegen passes [0]
time: 0.565; rss: 95MB	LLVM passes
time: 0.034; rss: 95MB	linking
done
