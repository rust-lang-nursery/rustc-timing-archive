commit 1ec22171e6053c640293067418ea1901cb1c7df1
Merge: d91f8ab 3b0e27c
Author: bors <bors@rust-lang.org>
Date:   Sun May 8 00:31:40 2016 -0700

    Auto merge of #33130 - eddyb:mir-const, r=nikomatsakis
    
    Implement constant support in MIR.
    
    All of the intended features in `trans::consts` are now supported by `mir::constant`.
    The implementation is considered a temporary measure until `miri` replaces it.
    
    A `-Z orbit` bootstrap build will only translate LLVM IR from AST for `#[rustc_no_mir]` functions.
    
    Furthermore, almost all checks of constant expressions have been moved to MIR.
    In non-`const` functions, trees of temporaries are promoted, as per RFC 1414 (rvalue promotion).
    Promotion before MIR borrowck would allow reasoning about promoted values' lifetimes.
    
    The improved checking comes at the cost of four `[breaking-change]`s:
    * repeat counts must contain a constant expression, e.g.:
    `let arr = [0; { println!("foo"); 5 }];` used to be allowed (it behaved like `let arr = [0; 5];`)
    * dereference of a reference to a `static` cannot be used in another `static`, e.g.:
    `static X: [u8; 1] = [1]; static Y: u8 = (&X)[0];` was unintentionally allowed before
    * the type of a `static` *must* be `Sync`, irrespective of the initializer, e.g.
    `static FOO: *const T = &BAR;` worked as `&T` is `Sync`, but it shouldn't because `*const T` isn't
    * a `static` cannot wrap `UnsafeCell` around a type that *may* need drop, e.g.
    `static X: MakeSync<UnsafeCell<Option<String>>> = MakeSync(UnsafeCell::new(None));`
    was previously allowed based on the fact `None` alone doesn't need drop, but in `UnsafeCell`
    it can be later changed to `Some(String)` which *does* need dropping
    
    The drop restrictions are relaxed by RFC 1440 (#33156), which is implemented, but feature-gated.
    However, creating `UnsafeCell` from constants is unstable, so users can just enable the feature gate.
rustc: ./issue-32278-big-array-of-strings
/root/rust/x86_64-unknown-linux-gnu/stage2/bin/rustc big-array-of-strings.rs -Ztime-passes -Zinput-stats
time: 0.198; rss: 66MB	parsing
Lines of code:             65577
Pre-expansion node count:  65552
time: 0.011; rss: 66MB	configuration 1
time: 0.000; rss: 66MB	recursion limit
time: 0.000; rss: 66MB	crate injection
time: 0.004; rss: 70MB	macro loading
time: 0.000; rss: 70MB	plugin loading
time: 0.000; rss: 70MB	plugin registration
time: 0.043; rss: 76MB	expansion
time: 0.011; rss: 76MB	configuration 2
time: 0.000; rss: 76MB	gated configuration checking
time: 0.005; rss: 76MB	maybe building test harness
time: 0.005; rss: 76MB	prelude injection
time: 0.000; rss: 76MB	checking that all macro invocations are gone
time: 0.000; rss: 76MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 76MB	complete gated feature checking
Post-expansion node count: 65565
time: 0.006; rss: 76MB	assigning node ids
time: 0.001; rss: 76MB	collecting defs
time: 0.002; rss: 77MB	external crate/lib resolution
time: 0.009; rss: 89MB	lowering ast -> hir
time: 0.005; rss: 91MB	indexing hir
time: 0.001; rss: 91MB	attribute checking
time: 0.008; rss: 91MB	early lint checks
time: 0.001; rss: 79MB	language item collection
time: 0.002; rss: 82MB	name resolution
time: 0.001; rss: 82MB	lifetime resolution
time: 0.000; rss: 82MB	looking for entry point
time: 0.000; rss: 82MB	looking for plugin registrar
time: 0.010; rss: 88MB	region resolution
time: 0.001; rss: 88MB	loop checking
time: 0.002; rss: 88MB	static item recursion checking
time: 0.000; rss: 88MB	load_dep_graph
time: 0.000; rss: 88MB	type collecting
time: 0.000; rss: 88MB	variance inference
time: 0.006; rss: 97MB	coherence checking
time: 0.001; rss: 99MB	wf checking
time: 1.132; rss: 198MB	item-types checking
time: 0.000; rss: 198MB	item-bodies checking
time: 0.000; rss: 198MB	drop-impl checking
time: 0.019; rss: 199MB	const checking
time: 0.002; rss: 199MB	privacy checking
time: 0.000; rss: 199MB	stability index
time: 0.000; rss: 199MB	intrinsic checking
time: 0.000; rss: 199MB	effect checking
time: 0.000; rss: 199MB	match checking
time: 0.001; rss: 199MB	liveness checking
time: 0.000; rss: 199MB	rvalue checking
time: 0.058; rss: 206MB	MIR dump
time: 0.002; rss: 206MB	MIR passes
time: 0.001; rss: 206MB	borrow checking
time: 0.000; rss: 206MB	reachability checking
time: 0.001; rss: 206MB	death checking
time: 0.001; rss: 206MB	stability checking
time: 0.000; rss: 206MB	unused lib feature checking
time: 0.033; rss: 206MB	lint checking
time: 0.001; rss: 206MB	resolving dependency formats
time: 0.001; rss: 206MB	Prepare MIR codegen passes
  time: 0.001; rss: 206MB	translation item collection
  time: 0.000; rss: 206MB	codegen unit partitioning
  time: 0.000; rss: 212MB	write metadata
time: 0.087; rss: 212MB	translation
time: 0.000; rss: 212MB	assert dep graph
time: 0.000; rss: 212MB	serialize dep graph
  time: 0.004; rss: 86MB	llvm function passes [0]
  time: 0.000; rss: 86MB	llvm module passes [0]
  time: 0.170; rss: 89MB	codegen passes [0]
  time: 0.000; rss: 77MB	codegen passes [0]
time: 0.185; rss: 77MB	LLVM passes
  time: 0.197; rss: 77MB	running linker
time: 0.198; rss: 77MB	linking
done
