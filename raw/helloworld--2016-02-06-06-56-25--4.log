commit 35635aebab321ff2a4708aeb172351356ad63cf7
Merge: 5147c1f ee79bfa
Author: bors <bors@rust-lang.org>
Date:   Sat Feb 6 09:24:04 2016 +0000

    Auto merge of #31333 - lambda:31273-abort-on-stack-overflow, r=brson
    
    Abort on stack overflow instead of re-raising SIGSEGV
    
    We use guard pages that cause the process to abort to protect against
    undefined behavior in the event of stack overflow.  We have a handler
    that catches segfaults, prints out an error message if the segfault was
    due to a stack overflow, then unregisters itself and returns to allow
    the signal to be re-raised and kill the process.
    
    This caused some confusion, as it was unexpected that safe code would be
    able to cause a segfault, while it's easy to overflow the stack in safe
    code.  To avoid this confusion, when we detect a segfault in the guard
    page, abort instead of the previous behavior of re-raising SIGSEGV.
    
    To test this, we need to adapt the tests for segfault to actually check
    the exit status.  Doing so revealed that the existing test for segfault
    behavior was actually invalid; LLVM optimizes the explicit null pointer
    reference down to an illegal instruction, so the program aborts with
    SIGILL instead of SIGSEGV and the test didn't actually trigger the
    signal handler at all.  Use a C helper function to get a null pointer
    that LLVM can't optimize away, so we get our segfault instead.
    
    This is a [breaking-change] if anyone is relying on the exact signal
    raised to kill a process on stack overflow.
    
    Closes #31273
rustc: ./helloworld
/root/rust/x86_64-unknown-linux-gnu/stage2/bin/rustc hello.rs -Ztime-passes -Zinput-stats
time: 0.000; rss: 30MB	parsing
Lines of code:             3
Pre-expansion node count:  8
time: 0.000; rss: 34MB	configuration 1
time: 0.000; rss: 34MB	recursion limit
time: 0.000; rss: 34MB	gated macro checking
time: 0.000; rss: 34MB	crate injection
time: 0.002; rss: 37MB	macro loading
time: 0.000; rss: 37MB	plugin loading
time: 0.000; rss: 37MB	plugin registration
time: 0.001; rss: 37MB	expansion
time: 0.000; rss: 37MB	complete gated feature checking 1
time: 0.000; rss: 37MB	configuration 2
time: 0.000; rss: 37MB	gated configuration checking
time: 0.000; rss: 37MB	maybe building test harness
time: 0.000; rss: 37MB	prelude injection
time: 0.000; rss: 37MB	checking that all macro invocations are gone
time: 0.000; rss: 37MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 37MB	complete gated feature checking 2
Post-expansion node count: 68
time: 0.000; rss: 37MB	assigning node ids
time: 0.000; rss: 37MB	lowering ast -> hir
time: 0.000; rss: 37MB	indexing hir
time: 0.000; rss: 37MB	attribute checking
time: 0.000; rss: 37MB	early lint checks
time: 0.001; rss: 37MB	external crate/lib resolution
time: 0.000; rss: 41MB	language item collection
time: 0.001; rss: 45MB	resolution
time: 0.000; rss: 45MB	lifetime resolution
time: 0.000; rss: 45MB	looking for entry point
time: 0.000; rss: 45MB	looking for plugin registrar
time: 0.000; rss: 45MB	region resolution
time: 0.000; rss: 45MB	loop checking
time: 0.000; rss: 45MB	static item recursion checking
time: 0.000; rss: 45MB	type collecting
time: 0.000; rss: 45MB	variance inference
time: 0.005; rss: 54MB	coherence checking
time: 0.000; rss: 54MB	wf checking
time: 0.000; rss: 54MB	item-types checking
time: 0.000; rss: 54MB	item-bodies checking
time: 0.000; rss: 54MB	drop-impl checking
time: 0.000; rss: 54MB	const checking
time: 0.000; rss: 54MB	privacy checking
time: 0.000; rss: 54MB	stability index
time: 0.000; rss: 54MB	intrinsic checking
time: 0.000; rss: 54MB	effect checking
time: 0.000; rss: 54MB	match checking
time: 0.000; rss: 54MB	MIR dump
time: 0.000; rss: 54MB	liveness checking
time: 0.000; rss: 54MB	borrow checking
time: 0.000; rss: 54MB	rvalue checking
time: 0.000; rss: 54MB	reachability checking
time: 0.000; rss: 54MB	death checking
time: 0.000; rss: 54MB	stability checking
time: 0.000; rss: 54MB	unused lib feature checking
time: 0.000; rss: 54MB	lint checking
time: 0.001; rss: 54MB	resolving dependency formats
time: 0.000; rss: 54MB	erasing regions from MIR
  time: 0.000; rss: 64MB	write metadata
time: 0.003; rss: 64MB	translation
  time: 0.000; rss: 66MB	llvm function passes [0]
  time: 0.000; rss: 66MB	llvm module passes [0]
  time: 0.001; rss: 68MB	codegen passes [0]
  time: 0.000; rss: 68MB	codegen passes [0]
time: 0.002; rss: 68MB	LLVM passes
  time: 0.091; rss: 74MB	running linker
time: 0.091; rss: 74MB	linking
done
