commit 493d999ffa44be6610441dabab80e18dda90015a
Merge: f6e125f fc4d0ec
Author: bors <bors@rust-lang.org>
Date:   Thu Mar 3 17:41:13 2016 +0000

    Auto merge of #32007 - nikomatsakis:compiletest-incremental, r=alexcrichton
    
    This PR extends compiletest to support **test revisions** and with a preliminary **incremental testing harness**. run-pass, compile-fail, and run-fail tests may be tagged with
    
    ```
    // revisions: a b c d
    ```
    
    This will cause the test to be re-run four times with `--cfg {a,b,c,d}` in turn. This means you can write very closely related things using `cfg`. You can also configure the headers/expected-errors by writing `//[foo] header: value` or `//[foo]~ ERROR bar`, where `foo` is the name of your revision. See the changes to `coherence-cow.rs` as a proof of concept.
    
    The main point of this work is to support the incremental testing harness. This PR contains an initial, unused version. The code that uses it will land later. The incremental testing harness compiles each revision in turn, and requires that the revisions have particular names (e.g., `rpass2`, `cfail3`), which tell it whether a particular revision is expected to compile or not.
    
    Two questions:
    
    - Is there compiletest documentation anywhere I can update?
    - Should I hold off on landing the incremental testing harness until I have the code to exercise it? (That will come in a separate PR, still fixing a few details)
    
    r? @alexcrichton
    cc @rust-lang/compiler <-- new testing capabilities
rustc: ./regex.0.1.30
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling regex v0.1.30 (file:///root/benchmarks/regex.0.1.30)
time: 0.097; rss: 44MB	parsing
Lines of code:             8558
Pre-expansion node count:  58217
time: 0.011; rss: 44MB	configuration 1
time: 0.000; rss: 44MB	recursion limit
time: 0.001; rss: 44MB	gated macro checking
time: 0.000; rss: 44MB	crate injection
time: 0.003; rss: 48MB	macro loading
time: 0.000; rss: 48MB	plugin loading
time: 0.000; rss: 48MB	plugin registration
time: 0.059; rss: 51MB	expansion
time: 0.001; rss: 51MB	complete gated feature checking 1
time: 0.013; rss: 51MB	configuration 2
time: 0.000; rss: 51MB	gated configuration checking
time: 0.006; rss: 51MB	maybe building test harness
time: 0.006; rss: 51MB	prelude injection
time: 0.001; rss: 51MB	checking that all macro invocations are gone
time: 0.000; rss: 51MB	checking for inline asm in case the target doesn't support it
time: 0.001; rss: 51MB	complete gated feature checking 2
time: 0.001; rss: 51MB	const fn bodies and arguments
Post-expansion node count: 68727
time: 0.006; rss: 51MB	assigning node ids
time: 0.008; rss: 58MB	lowering ast -> hir
time: 0.004; rss: 60MB	indexing hir
time: 0.001; rss: 60MB	attribute checking
time: 0.007; rss: 60MB	early lint checks
time: 0.001; rss: 52MB	external crate/lib resolution
time: 0.001; rss: 52MB	language item collection
time: 0.008; rss: 60MB	resolution
time: 0.001; rss: 60MB	lifetime resolution
time: 0.000; rss: 60MB	looking for entry point
time: 0.000; rss: 60MB	looking for plugin registrar
time: 0.007; rss: 62MB	region resolution
time: 0.001; rss: 62MB	loop checking
time: 0.001; rss: 62MB	static item recursion checking
time: 0.003; rss: 65MB	type collecting
time: 0.000; rss: 65MB	variance inference
time: 0.022; rss: 81MB	coherence checking
time: 0.010; rss: 82MB	wf checking
time: 0.083; rss: 87MB	item-types checking
time: 0.200; rss: 98MB	item-bodies checking
time: 0.000; rss: 98MB	drop-impl checking
time: 0.026; rss: 99MB	const checking
time: 0.004; rss: 99MB	privacy checking
time: 0.000; rss: 99MB	stability index
time: 0.001; rss: 99MB	intrinsic checking
time: 0.001; rss: 99MB	effect checking
time: 0.003; rss: 99MB	match checking
time: 0.002; rss: 99MB	liveness checking
time: 0.007; rss: 99MB	rvalue checking
time: 0.019; rss: 100MB	MIR dump
time: 0.000; rss: 100MB	MIR passes
time: 0.019; rss: 101MB	borrow checking
time: 0.000; rss: 101MB	reachability checking
time: 0.002; rss: 101MB	death checking
time: 0.002; rss: 101MB	stability checking
time: 0.000; rss: 101MB	unused lib feature checking
time: 0.031; rss: 101MB	lint checking
time: 0.000; rss: 101MB	resolving dependency formats
time: 0.002; rss: 101MB	erasing regions from MIR
  time: 0.060; rss: 115MB	translation item collection
  time: 0.144; rss: 156MB	write metadata
time: 0.662; rss: 156MB	translation
  time: 0.036; rss: 110MB	llvm function passes [0]
  time: 0.017; rss: 110MB	llvm module passes [0]
  time: 0.607; rss: 115MB	codegen passes [0]
  time: 0.001; rss: 96MB	codegen passes [0]
time: 0.734; rss: 95MB	LLVM passes
time: 0.064; rss: 93MB	linking
done
