commit fe278a8a3218fd83d8bf21e82e2c0cc975d2fb64
Merge: 3b272bf 046c7f2
Author: bors <bors@rust-lang.org>
Date:   Tue Sep 6 20:06:34 2016 -0700

    Auto merge of #36252 - joshtriplett:union-field-never-used, r=sanxiyn
    
    Fix "field is never used" warning to take unions into account
    
    When compiling code containing a union with an unused field, rustc says
    "struct field is never used".
    
    Rather than saying "struct or union", or adding logic to determine the
    type of the item, just change the message to "field is never used",
    dropping the "struct".
    
    Update tests accordingly.
rustc: ./html5ever-2016-08-25
cargo rustc -- -Ztime-passes -Zinput-stats
    Updating registry `https://github.com/rust-lang/crates.io-index`
   Compiling rustc-serialize v0.3.19
   Compiling mac v0.0.2
   Compiling serde v0.8.7
   Compiling libc v0.2.15
   Compiling matches v0.1.2
   Compiling log v0.3.6
   Compiling encoding_index_tests v0.1.4
   Compiling void v1.0.2
   Compiling utf-8 v0.6.0
   Compiling unreachable v0.1.1
   Compiling lazy_static v0.2.1
   Compiling encoding-index-japanese v1.20141219.5
   Compiling debug_unreachable v0.1.1
   Compiling encoding-index-simpchinese v1.20141219.5
   Compiling encoding-index-tradchinese v1.20141219.5
   Compiling encoding-index-korean v1.20141219.5
   Compiling phf_shared v0.7.16
   Compiling phf v0.7.16
   Compiling encoding-index-singlebyte v1.20141219.5
   Compiling futf v0.1.2
   Compiling rand v0.3.14
   Compiling encoding v0.2.33
   Compiling phf_generator v0.7.16
   Compiling string_cache v0.2.27
   Compiling phf_codegen v0.7.16
   Compiling tendril v0.2.3
   Compiling html5ever v0.5.4 (file:///root/benchmarks/html5ever-2016-08-25)
time: 0.029; rss: 53MB	parsing
Lines of code:             8210
Pre-expansion node count:  52238
time: 0.003; rss: 53MB	configuration
time: 0.000; rss: 53MB	recursion limit
time: 0.000; rss: 53MB	crate injection
time: 0.000; rss: 53MB	plugin loading
time: 0.000; rss: 53MB	plugin registration
time: 1.441; rss: 100MB	expansion
time: 0.000; rss: 100MB	maybe building test harness
time: 0.002; rss: 100MB	maybe creating a macro crate
time: 0.008; rss: 100MB	assigning node ids
Post-expansion node count: 164262
time: 0.000; rss: 100MB	checking for inline asm in case the target doesn't support it
time: 0.003; rss: 100MB	complete gated feature checking
time: 0.005; rss: 102MB	collecting defs
time: 0.006; rss: 103MB	external crate/lib resolution
time: 0.009; rss: 103MB	early lint checks
time: 0.002; rss: 103MB	AST validation
time: 0.019; rss: 109MB	name resolution
time: 0.016; rss: 123MB	lowering ast -> hir
time: 0.004; rss: 127MB	indexing hir
time: 0.002; rss: 127MB	attribute checking
time: 0.002; rss: 108MB	language item collection
time: 0.003; rss: 108MB	lifetime resolution
time: 0.000; rss: 108MB	looking for entry point
time: 0.000; rss: 108MB	looking for plugin registrar
time: 0.016; rss: 114MB	region resolution
time: 0.002; rss: 114MB	loop checking
time: 0.003; rss: 114MB	static item recursion checking
time: 0.024; rss: 114MB	compute_incremental_hashes_map
time: 0.000; rss: 114MB	load_dep_graph
time: 0.014; rss: 115MB	type collecting
time: 0.000; rss: 115MB	variance inference
time: 0.027; rss: 119MB	coherence checking
time: 0.027; rss: 120MB	wf checking
time: 0.367; rss: 129MB	item-types checking
time: 0.593; rss: 144MB	item-bodies checking
time: 0.000; rss: 144MB	drop-impl checking
time: 0.078; rss: 146MB	const checking
time: 0.009; rss: 146MB	privacy checking
time: 0.002; rss: 146MB	stability index
time: 0.004; rss: 146MB	intrinsic checking
time: 0.003; rss: 146MB	effect checking
time: 0.028; rss: 146MB	match checking
time: 0.013; rss: 140MB	liveness checking
time: 0.032; rss: 140MB	rvalue checking
time: 0.124; rss: 184MB	MIR dump
time: 0.055; rss: 185MB	MIR passes
time: 0.096; rss: 189MB	borrow checking
time: 0.003; rss: 189MB	reachability checking
time: 0.007; rss: 189MB	death checking
time: 0.008; rss: 189MB	stability checking
time: 0.000; rss: 189MB	unused lib feature checking
time: 0.065; rss: 189MB	lint checking
time: 0.000; rss: 189MB	resolving dependency formats
time: 0.107; rss: 191MB	Prepare MIR codegen passes
  time: 0.060; rss: 191MB	write metadata
  time: 0.043; rss: 194MB	translation item collection
  time: 0.005; rss: 194MB	codegen unit partitioning
  time: 0.011; rss: 211MB	internalize symbols
time: 0.405; rss: 184MB	translation
time: 0.000; rss: 184MB	assert dep graph
time: 0.000; rss: 184MB	serialize dep graph
  time: 0.023; rss: 113MB	llvm function passes [0]
  time: 0.013; rss: 114MB	llvm module passes [0]
  time: 0.522; rss: 117MB	codegen passes [0]
  time: 0.001; rss: 117MB	codegen passes [0]
time: 0.602; rss: 117MB	LLVM passes
time: 0.000; rss: 117MB	serialize work products
time: 0.060; rss: 96MB	linking
done
