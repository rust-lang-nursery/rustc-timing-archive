commit e1d2bc2916b5b5840789d7e7fc89e4647063bfa0
Merge: f013914 e0b82d5
Author: bors <bors@rust-lang.org>
Date:   Tue Aug 9 10:00:54 2016 -0700

    Auto merge of #35166 - nikomatsakis:incr-comp-ice-34991-2, r=mw
    
    Address ICEs running w/ incremental compilation and building glium
    
    Fixes for various ICEs I encountered trying to build glium with incremental compilation enabled. Building glium now works. Of the 4 ICEs, I have test cases for 3 of them -- I didn't isolate a test for the last commit and kind of want to go do other things -- most notably, figuring out why incremental isn't saving much *effort*.
    
    But if it seems worthwhile and I can come back and try to narrow down the problem.
    
    r? @michaelwoerister
    
    Fixes #34991
    Fixes #32015
rustc: ./regex.0.1.30
cargo rustc -- -Ztime-passes -Zinput-stats
    Updating registry `https://github.com/rust-lang/crates.io-index`
   Compiling regex v0.1.30 (file:///root/benchmarks/regex.0.1.30)
time: 0.052; rss: 65MB	parsing
Lines of code:             8558
Pre-expansion node count:  58076
time: 0.005; rss: 65MB	configuration
time: 0.000; rss: 65MB	recursion limit
time: 0.000; rss: 65MB	crate injection
time: 0.000; rss: 65MB	plugin loading
time: 0.000; rss: 65MB	plugin registration
time: 0.029; rss: 100MB	expansion
time: 0.000; rss: 100MB	maybe building test harness
time: 0.004; rss: 100MB	assigning node ids
Post-expansion node count: 68148
time: 0.000; rss: 100MB	checking for inline asm in case the target doesn't support it
time: 0.001; rss: 100MB	complete gated feature checking
time: 0.001; rss: 101MB	collecting defs
time: 0.001; rss: 101MB	external crate/lib resolution
time: 0.003; rss: 101MB	early lint checks
time: 0.001; rss: 101MB	AST validation
time: 0.007; rss: 103MB	name resolution
time: 0.008; rss: 112MB	lowering ast -> hir
time: 0.002; rss: 114MB	indexing hir
time: 0.001; rss: 114MB	attribute checking
time: 0.001; rss: 104MB	language item collection
time: 0.001; rss: 104MB	lifetime resolution
time: 0.000; rss: 104MB	looking for entry point
time: 0.000; rss: 104MB	looking for plugin registrar
time: 0.005; rss: 109MB	region resolution
time: 0.001; rss: 109MB	loop checking
time: 0.001; rss: 109MB	static item recursion checking
time: 0.000; rss: 109MB	load_dep_graph
time: 0.008; rss: 110MB	type collecting
time: 0.000; rss: 110MB	variance inference
time: 0.025; rss: 114MB	coherence checking
time: 0.011; rss: 114MB	wf checking
time: 0.291; rss: 122MB	item-types checking
time: 0.184; rss: 127MB	item-bodies checking
time: 0.000; rss: 127MB	drop-impl checking
time: 0.026; rss: 129MB	const checking
time: 0.004; rss: 129MB	privacy checking
time: 0.001; rss: 129MB	stability index
time: 0.002; rss: 129MB	intrinsic checking
time: 0.001; rss: 129MB	effect checking
time: 0.004; rss: 129MB	match checking
time: 0.002; rss: 129MB	liveness checking
time: 0.008; rss: 129MB	rvalue checking
time: 0.039; rss: 140MB	MIR dump
time: 0.019; rss: 140MB	MIR passes
time: 0.021; rss: 140MB	borrow checking
time: 0.000; rss: 140MB	reachability checking
time: 0.002; rss: 140MB	death checking
time: 0.002; rss: 140MB	stability checking
time: 0.000; rss: 140MB	unused lib feature checking
time: 0.025; rss: 140MB	lint checking
time: 0.000; rss: 140MB	resolving dependency formats
time: 0.018; rss: 142MB	Prepare MIR codegen passes
  time: 0.170; rss: 154MB	write metadata
  time: 0.051; rss: 156MB	translation item collection
  time: 0.007; rss: 156MB	codegen unit partitioning
  time: 0.015; rss: 203MB	internalize symbols
time: 0.731; rss: 203MB	translation
time: 0.000; rss: 203MB	assert dep graph
time: 0.000; rss: 203MB	serialize dep graph
  time: 0.036; rss: 135MB	llvm function passes [0]
  time: 0.019; rss: 137MB	llvm module passes [0]
  time: 0.665; rss: 139MB	codegen passes [0]
  time: 0.001; rss: 139MB	codegen passes [0]
time: 0.777; rss: 139MB	LLVM passes
time: 0.000; rss: 139MB	serialize work products
time: 0.068; rss: 111MB	linking
done
