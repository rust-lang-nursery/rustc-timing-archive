commit fe5c439f695fd72b7be0d0f28ee8397b3256630c
Merge: 6998018 3205c51
Author: bors <bors@rust-lang.org>
Date:   Thu Jul 14 06:37:30 2016 -0700

    Auto merge of #34783 - Dridi:cdylib_usage, r=alexcrichton
    
    Mention the crate type cdylib in rustc's usage
    
    Hello,
    
    I just tried to build a `cdylib` with the latest stable release, I've been passively waiting for this for quite some time now. Tested successfully on my machine, although it doesn't appear in `rustc`'s usage it seems to work like a charm so far. :grinning:
    
    Thanks!
rustc: ./hyper.0.5.0
cargo rustc -- -Ztime-passes -Zinput-stats
    Updating registry `https://github.com/rust-lang/crates.io-index`
 Downloading gcc v0.3.31
   Compiling typeable v0.1.2
   Compiling bitflags v0.3.3
   Compiling matches v0.1.2
   Compiling libc v0.2.14
   Compiling rustc-serialize v0.3.19
   Compiling gcc v0.3.31
   Compiling log v0.3.6
   Compiling pkg-config v0.3.8
   Compiling httparse v0.1.6
   Compiling traitobject v0.0.1
   Compiling winapi v0.2.8
   Compiling libc v0.1.12
   Compiling lazy_static v0.1.16
   Compiling winapi-build v0.1.1
   Compiling unicase v0.1.0
   Compiling mime v0.0.11
   Compiling rand v0.3.14
   Compiling num_cpus v0.2.13
   Compiling kernel32-sys v0.2.2
   Compiling time v0.1.35
   Compiling openssl-sys v0.6.7
   Compiling openssl v0.6.7
   Compiling uuid v0.1.18
   Compiling url v0.2.38
   Compiling cookie v0.1.21
   Compiling hyper v0.5.0 (file:///root/benchmarks/hyper.0.5.0)
time: 0.032; rss: 88MB	parsing
Lines of code:             9154
Pre-expansion node count:  44838
time: 0.005; rss: 92MB	configuration
time: 0.000; rss: 92MB	recursion limit
time: 0.000; rss: 92MB	crate injection
time: 0.000; rss: 92MB	plugin loading
time: 0.000; rss: 92MB	plugin registration
time: 0.136; rss: 132MB	expansion
time: 0.000; rss: 132MB	maybe building test harness
time: 0.000; rss: 132MB	checking for inline asm in case the target doesn't support it
time: 0.003; rss: 132MB	complete gated feature checking
Post-expansion node count: 101581
time: 0.007; rss: 132MB	assigning node ids
time: 0.003; rss: 132MB	collecting defs
time: 0.011; rss: 143MB	external crate/lib resolution
time: 0.006; rss: 143MB	early lint checks
time: 0.001; rss: 143MB	AST validation
time: 0.019; rss: 147MB	name resolution
time: 0.009; rss: 156MB	lowering ast -> hir
time: 0.001; rss: 158MB	indexing hir
time: 0.001; rss: 158MB	attribute checking
time: 0.001; rss: 151MB	language item collection
time: 0.001; rss: 151MB	lifetime resolution
time: 0.000; rss: 151MB	looking for entry point
time: 0.000; rss: 151MB	looking for plugin registrar
time: 0.005; rss: 155MB	region resolution
time: 0.001; rss: 155MB	loop checking
time: 0.001; rss: 155MB	static item recursion checking
time: 0.000; rss: 155MB	load_dep_graph
time: 0.031; rss: 157MB	type collecting
time: 0.000; rss: 157MB	variance inference
time: 0.044; rss: 166MB	coherence checking
time: 0.098; rss: 167MB	wf checking
time: 0.036; rss: 167MB	item-types checking
time: 0.530; rss: 178MB	item-bodies checking
time: 0.000; rss: 178MB	drop-impl checking
time: 0.044; rss: 180MB	const checking
time: 0.006; rss: 180MB	privacy checking
time: 0.001; rss: 180MB	stability index
time: 0.006; rss: 180MB	intrinsic checking
time: 0.002; rss: 180MB	effect checking
time: 0.014; rss: 180MB	match checking
time: 0.005; rss: 180MB	liveness checking
time: 0.031; rss: 180MB	rvalue checking
time: 0.063; rss: 192MB	MIR dump
time: 0.045; rss: 192MB	MIR passes
time: 0.073; rss: 192MB	borrow checking
time: 0.003; rss: 192MB	reachability checking
time: 0.006; rss: 192MB	death checking
time: 0.006; rss: 192MB	stability checking
time: 0.000; rss: 192MB	unused lib feature checking
time: 0.051; rss: 192MB	lint checking
time: 0.000; rss: 192MB	resolving dependency formats
time: 0.094; rss: 194MB	Prepare MIR codegen passes
  time: 0.133; rss: 198MB	write metadata
  time: 0.189; rss: 203MB	translation item collection
  time: 0.021; rss: 207MB	codegen unit partitioning
time: 3.634; rss: 326MB	translation
time: 0.001; rss: 326MB	assert dep graph
time: 0.000; rss: 326MB	serialize dep graph
  time: 1.114; rss: 214MB	llvm function passes [0]
  time: 0.430; rss: 215MB	llvm module passes [0]
  time: 16.049; rss: 217MB	codegen passes [0]
  time: 0.002; rss: 217MB	codegen passes [0]
time: 18.696; rss: 215MB	LLVM passes
time: 0.151; rss: 164MB	linking
done
