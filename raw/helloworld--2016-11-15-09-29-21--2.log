commit 30857ae8f67676e32322cdbb6c606c319eacdd73
Merge: c8867f8 88b4646
Author: bors <bors@rust-lang.org>
Date:   Tue Nov 15 04:42:28 2016 -0800

    Auto merge of #37714 - alexcrichton:builtins-hidden, r=nikomatsakis
    
    rustc: Flag all builtins functions as hidden
    
    When compiling compiler-rt you typically compile with `-fvisibility=hidden`
    which to ensure that all symbols are hidden in shared objects and don't show up
    in symbol tables. This is important for these intrinsics being linked in every
    crate to ensure that we're not unnecessarily bloating the public ABI of Rust
    crates.
    
    This should help allow the compiler-builtins project with Rust-defined builtins
    start landing in-tree as well.
rustc: ./helloworld
cargo rustc  -- -Ztime-passes -Zinput-stats
   Compiling helloworld v0.1.0 (file:///root/benchmarks/helloworld)
time: 0.000; rss: 41MB	parsing
Lines of code:             3
Pre-expansion node count:  8
time: 0.000; rss: 41MB	recursion limit
time: 0.000; rss: 41MB	crate injection
time: 0.000; rss: 41MB	plugin loading
time: 0.000; rss: 41MB	plugin registration
time: 0.012; rss: 63MB	expansion
time: 0.000; rss: 63MB	maybe building test harness
time: 0.000; rss: 63MB	maybe creating a macro crate
Post-expansion node count: 68
time: 0.000; rss: 63MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 63MB	complete gated feature checking
time: 0.000; rss: 63MB	early lint checks
time: 0.000; rss: 63MB	AST validation
time: 0.002; rss: 63MB	name resolution
time: 0.000; rss: 67MB	lowering ast -> hir
time: 0.000; rss: 67MB	indexing hir
time: 0.000; rss: 67MB	attribute checking
time: 0.000; rss: 67MB	language item collection
time: 0.000; rss: 67MB	lifetime resolution
time: 0.000; rss: 67MB	looking for entry point
time: 0.000; rss: 67MB	looking for plugin registrar
time: 0.000; rss: 67MB	region resolution
time: 0.000; rss: 67MB	loop checking
time: 0.000; rss: 67MB	static item recursion checking
time: 0.000; rss: 67MB	compute_incremental_hashes_map
time: 0.000; rss: 67MB	load_dep_graph
time: 0.000; rss: 67MB	type collecting
time: 0.000; rss: 67MB	variance inference
time: 0.004; rss: 67MB	coherence checking
time: 0.000; rss: 67MB	wf checking
time: 0.000; rss: 67MB	item-types checking
time: 0.000; rss: 67MB	item-bodies checking
time: 0.000; rss: 67MB	drop-impl checking
time: 0.000; rss: 67MB	const checking
time: 0.000; rss: 67MB	privacy checking
time: 0.000; rss: 67MB	stability index
time: 0.000; rss: 67MB	intrinsic checking
time: 0.000; rss: 67MB	effect checking
time: 0.000; rss: 67MB	match checking
time: 0.000; rss: 67MB	liveness checking
time: 0.000; rss: 67MB	rvalue checking
time: 0.000; rss: 67MB	MIR dump
  time: 0.000; rss: 67MB	SimplifyCfg
  time: 0.000; rss: 67MB	QualifyAndPromoteConstants
  time: 0.000; rss: 67MB	TypeckMir
  time: 0.000; rss: 67MB	SimplifyBranches
  time: 0.000; rss: 67MB	SimplifyCfg
time: 0.000; rss: 67MB	MIR cleanup and validation
time: 0.000; rss: 67MB	borrow checking
time: 0.000; rss: 67MB	reachability checking
time: 0.000; rss: 67MB	death checking
time: 0.000; rss: 67MB	stability checking
time: 0.000; rss: 67MB	unused lib feature checking
time: 0.000; rss: 67MB	lint checking
time: 0.001; rss: 67MB	resolving dependency formats
  time: 0.000; rss: 67MB	NoLandingPads
  time: 0.000; rss: 67MB	SimplifyCfg
  time: 0.000; rss: 67MB	EraseRegions
  time: 0.000; rss: 67MB	AddCallGuards
  time: 0.000; rss: 67MB	ElaborateDrops
  time: 0.000; rss: 67MB	NoLandingPads
  time: 0.000; rss: 67MB	SimplifyCfg
  time: 0.000; rss: 67MB	InstCombine
  time: 0.000; rss: 67MB	Deaggregator
  time: 0.000; rss: 67MB	CopyPropagation
  time: 0.000; rss: 67MB	SimplifyLocals
  time: 0.000; rss: 67MB	AddCallGuards
  time: 0.000; rss: 67MB	PreTrans
time: 0.000; rss: 67MB	MIR optimisations
  time: 0.000; rss: 71MB	write metadata
  time: 0.000; rss: 71MB	translation item collection
  time: 0.000; rss: 71MB	codegen unit partitioning
  time: 0.000; rss: 74MB	internalize symbols
time: 0.003; rss: 74MB	translation
time: 0.000; rss: 74MB	assert dep graph
time: 0.000; rss: 74MB	serialize dep graph
  time: 0.000; rss: 74MB	llvm function passes [0]
  time: 0.000; rss: 74MB	llvm module passes [0]
  time: 0.002; rss: 74MB	codegen passes [0]
  time: 0.000; rss: 74MB	codegen passes [0]
time: 0.003; rss: 74MB	LLVM passes
time: 0.000; rss: 74MB	serialize work products
  time: 0.070; rss: 74MB	running linker
time: 0.071; rss: 74MB	linking
done
