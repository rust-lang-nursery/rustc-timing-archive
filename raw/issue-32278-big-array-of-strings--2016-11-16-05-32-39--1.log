commit d88d06448e1ad928d22cf0a511f1edae91b646d5
Merge: c19cb9c 6fe7786
Author: bors <bors@rust-lang.org>
Date:   Wed Nov 16 01:17:53 2016 -0800

    Auto merge of #37773 - ollie27:rustdoc_inline_glob, r=brson
    
    rustdoc: Fix some local inlining issues
    
    * Only inline public items when inlining glob imports.
    * Never inline while in a private module or a child of a private module.
    * Never inline impls. This allowed the removal of a workaround in the
    rendering code.
rustc: ./issue-32278-big-array-of-strings
cargo rustc  -- -Ztime-passes -Zinput-stats
   Compiling issue-32278-big-array-of-strings v0.1.0 (file:///root/benchmarks/issue-32278-big-array-of-strings)
time: 0.098; rss: 60MB	parsing
Lines of code:             65577
Pre-expansion node count:  65552
time: 0.000; rss: 60MB	recursion limit
time: 0.000; rss: 60MB	crate injection
time: 0.000; rss: 60MB	plugin loading
time: 0.000; rss: 60MB	plugin registration
time: 0.022; rss: 82MB	expansion
time: 0.000; rss: 82MB	maybe building test harness
time: 0.001; rss: 82MB	maybe creating a macro crate
Post-expansion node count: 65565
time: 0.000; rss: 82MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 82MB	complete gated feature checking
time: 0.005; rss: 82MB	early lint checks
time: 0.000; rss: 86MB	AST validation
time: 0.003; rss: 86MB	name resolution
time: 0.005; rss: 95MB	lowering ast -> hir
time: 0.001; rss: 99MB	indexing hir
time: 0.001; rss: 99MB	attribute checking
time: 0.000; rss: 88MB	language item collection
time: 0.000; rss: 88MB	lifetime resolution
time: 0.000; rss: 88MB	looking for entry point
time: 0.000; rss: 88MB	looking for plugin registrar
time: 0.005; rss: 94MB	region resolution
time: 0.000; rss: 94MB	loop checking
time: 0.001; rss: 94MB	static item recursion checking
time: 0.020; rss: 94MB	compute_incremental_hashes_map
time: 0.000; rss: 94MB	load_dep_graph
time: 0.000; rss: 94MB	type collecting
time: 0.000; rss: 94MB	variance inference
time: 0.004; rss: 96MB	coherence checking
time: 0.000; rss: 96MB	wf checking
time: 0.520; rss: 104MB	item-types checking
time: 0.000; rss: 104MB	item-bodies checking
time: 0.000; rss: 104MB	drop-impl checking
time: 0.022; rss: 108MB	const checking
time: 0.001; rss: 108MB	privacy checking
time: 0.000; rss: 108MB	stability index
time: 0.000; rss: 108MB	intrinsic checking
time: 0.000; rss: 108MB	effect checking
time: 0.000; rss: 108MB	match checking
time: 0.000; rss: 108MB	liveness checking
time: 0.000; rss: 108MB	rvalue checking
time: 0.032; rss: 116MB	MIR dump
  time: 0.000; rss: 116MB	SimplifyCfg
  time: 0.001; rss: 116MB	QualifyAndPromoteConstants
  time: 0.001; rss: 116MB	TypeckMir
  time: 0.000; rss: 116MB	SimplifyBranches
  time: 0.000; rss: 116MB	SimplifyCfg
time: 0.001; rss: 116MB	MIR cleanup and validation
time: 0.001; rss: 116MB	borrow checking
time: 0.000; rss: 116MB	reachability checking
time: 0.000; rss: 116MB	death checking
time: 0.000; rss: 116MB	stability checking
time: 0.000; rss: 116MB	unused lib feature checking
time: 0.022; rss: 116MB	lint checking
time: 0.001; rss: 116MB	resolving dependency formats
  time: 0.000; rss: 116MB	NoLandingPads
  time: 0.000; rss: 116MB	SimplifyCfg
  time: 0.001; rss: 116MB	EraseRegions
  time: 0.000; rss: 116MB	AddCallGuards
  time: 0.000; rss: 116MB	ElaborateDrops
  time: 0.000; rss: 116MB	NoLandingPads
  time: 0.000; rss: 116MB	SimplifyCfg
  time: 0.000; rss: 116MB	InstCombine
  time: 0.000; rss: 116MB	Deaggregator
  time: 0.000; rss: 116MB	CopyPropagation
  time: 0.000; rss: 116MB	SimplifyLocals
  time: 0.000; rss: 116MB	AddCallGuards
  time: 0.000; rss: 116MB	PreTrans
time: 0.001; rss: 116MB	MIR optimisations
  time: 0.000; rss: 117MB	write metadata
  time: 0.001; rss: 117MB	translation item collection
  time: 0.000; rss: 117MB	codegen unit partitioning
  time: 0.001; rss: 128MB	internalize symbols
time: 0.058; rss: 128MB	translation
time: 0.000; rss: 128MB	assert dep graph
time: 0.000; rss: 128MB	serialize dep graph
  time: 0.009; rss: 86MB	llvm function passes [0]
  time: 0.000; rss: 86MB	llvm module passes [0]
  time: 0.193; rss: 85MB	codegen passes [0]
  time: 0.000; rss: 85MB	codegen passes [0]
time: 0.203; rss: 85MB	LLVM passes
time: 0.000; rss: 85MB	serialize work products
  time: 0.151; rss: 75MB	running linker
time: 0.152; rss: 75MB	linking
done
