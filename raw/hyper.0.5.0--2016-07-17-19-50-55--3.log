commit 34f35ed29c8acdbe1e3c172786fc41d6f4fb6090
Merge: 6aba7be f66da5e
Author: bors <bors@rust-lang.org>
Date:   Sun Jul 17 09:07:50 2016 -0700

    Auto merge of #34871 - petrochenkov:inherent, r=jseyfried
    
    Do not resolve inherent static methods from other crates prematurely
    
    Under some specific circumstances paths like `Type::method` can be resolved early in rustc_resolve instead of type checker. `Type` must be defined in another crate, it should be an enum or a trait object (i.e. a type that acts as a "module" in resolve), and `method` should be an inherent static method.
    As a result, such paths don't go through `resolve_ufcs`, may be resolved incorrectly and break some invariants in type checker. This patch removes special treatment of such methods.
    
    The removed code was introduced in https://github.com/rust-lang/rust/commit/2bd46e767c0fe5b6188df61cb9daf8f2e65a3ed0 to fix a problem that no longer exists.
    
    r? @jseyfried
rustc: ./hyper.0.5.0
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling hyper v0.5.0 (file:///root/benchmarks/hyper.0.5.0)
time: 0.032; rss: 89MB	parsing
Lines of code:             9154
Pre-expansion node count:  44838
time: 0.005; rss: 93MB	configuration
time: 0.000; rss: 93MB	recursion limit
time: 0.000; rss: 93MB	crate injection
time: 0.000; rss: 93MB	plugin loading
time: 0.000; rss: 93MB	plugin registration
time: 0.117; rss: 133MB	expansion
time: 0.000; rss: 133MB	maybe building test harness
time: 0.008; rss: 133MB	assigning node ids
Post-expansion node count: 101581
time: 0.000; rss: 133MB	checking for inline asm in case the target doesn't support it
time: 0.002; rss: 133MB	complete gated feature checking
time: 0.003; rss: 133MB	collecting defs
time: 0.011; rss: 144MB	external crate/lib resolution
time: 0.006; rss: 144MB	early lint checks
time: 0.001; rss: 144MB	AST validation
time: 0.019; rss: 149MB	name resolution
time: 0.010; rss: 157MB	lowering ast -> hir
time: 0.001; rss: 159MB	indexing hir
time: 0.001; rss: 159MB	attribute checking
time: 0.001; rss: 153MB	language item collection
time: 0.002; rss: 153MB	lifetime resolution
time: 0.000; rss: 153MB	looking for entry point
time: 0.000; rss: 153MB	looking for plugin registrar
time: 0.005; rss: 156MB	region resolution
time: 0.001; rss: 156MB	loop checking
time: 0.000; rss: 156MB	static item recursion checking
time: 0.000; rss: 156MB	load_dep_graph
time: 0.031; rss: 158MB	type collecting
time: 0.000; rss: 158MB	variance inference
time: 0.044; rss: 166MB	coherence checking
time: 0.099; rss: 167MB	wf checking
time: 0.037; rss: 168MB	item-types checking
time: 0.534; rss: 179MB	item-bodies checking
time: 0.000; rss: 179MB	drop-impl checking
time: 0.044; rss: 181MB	const checking
time: 0.006; rss: 181MB	privacy checking
time: 0.001; rss: 181MB	stability index
time: 0.006; rss: 181MB	intrinsic checking
time: 0.002; rss: 181MB	effect checking
time: 0.015; rss: 181MB	match checking
time: 0.005; rss: 181MB	liveness checking
time: 0.031; rss: 181MB	rvalue checking
time: 0.062; rss: 192MB	MIR dump
time: 0.044; rss: 192MB	MIR passes
time: 0.073; rss: 192MB	borrow checking
time: 0.003; rss: 192MB	reachability checking
time: 0.005; rss: 192MB	death checking
time: 0.006; rss: 192MB	stability checking
time: 0.000; rss: 192MB	unused lib feature checking
time: 0.052; rss: 192MB	lint checking
time: 0.000; rss: 192MB	resolving dependency formats
time: 0.092; rss: 196MB	Prepare MIR codegen passes
  time: 0.131; rss: 199MB	write metadata
  time: 0.192; rss: 204MB	translation item collection
  time: 0.021; rss: 208MB	codegen unit partitioning
time: 3.669; rss: 326MB	translation
time: 0.001; rss: 326MB	assert dep graph
time: 0.000; rss: 326MB	serialize dep graph
  time: 1.142; rss: 214MB	llvm function passes [0]
  time: 0.431; rss: 215MB	llvm module passes [0]
  time: 16.190; rss: 214MB	codegen passes [0]
  time: 0.002; rss: 214MB	codegen passes [0]
time: 18.877; rss: 214MB	LLVM passes
time: 0.151; rss: 164MB	linking
done
