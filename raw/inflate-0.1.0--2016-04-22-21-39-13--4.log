commit 66ff163081685aa48bc59033eb5280052963a750
Merge: af000a7 241a3e4
Author: bors <bors@rust-lang.org>
Date:   Fri Apr 22 17:54:30 2016 -0700

    Auto merge of #32466 - jooert:btree_append, r=apasel422
    
    Implement `append` for b-trees.
    
    I have finally found time to revive #26227, this time only with an `append` implementation.
    
    The algorithm implemented here is linear in the size of the two b-trees. It firsts creates
    a `MergeIter` from the two b-trees and then builds a new b-tree by pushing
    key-value pairs from the `MergeIter` into nodes at the right heights.
    
    Three functions for stealing have been added to the implementation of `Handle` as
    well as a getter for the height of a `NodeRef`.
    
    The docs have been updated with performance information about `BTreeMap::append` and
    the remark about B has been removed now that it is the same for all instances of `BTreeMap`.
    
    cc @gereeter @Gankro @apasel422
rustc: ./inflate-0.1.0
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling inflate v0.1.0 (file:///root/benchmarks/inflate-0.1.0)
time: 0.004; rss: 46MB	parsing
Lines of code:             956
Pre-expansion node count:  4761
time: 0.001; rss: 46MB	configuration 1
time: 0.000; rss: 46MB	recursion limit
time: 0.000; rss: 46MB	gated macro checking
time: 0.000; rss: 46MB	crate injection
time: 0.003; rss: 52MB	macro loading
time: 0.000; rss: 52MB	plugin loading
time: 0.000; rss: 52MB	plugin registration
time: 0.082; rss: 60MB	expansion
time: 0.001; rss: 60MB	complete gated feature checking 1
time: 0.009; rss: 60MB	configuration 2
time: 0.000; rss: 60MB	gated configuration checking
time: 0.004; rss: 60MB	maybe building test harness
time: 0.004; rss: 60MB	prelude injection
time: 0.000; rss: 60MB	checking that all macro invocations are gone
time: 0.000; rss: 60MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 60MB	complete gated feature checking 2
time: 0.000; rss: 60MB	const fn bodies and arguments
Post-expansion node count: 54798
time: 0.004; rss: 60MB	assigning node ids
time: 0.004; rss: 62MB	collecting defs
time: 0.001; rss: 62MB	external crate/lib resolution
time: 0.009; rss: 66MB	lowering ast -> hir
time: 0.001; rss: 66MB	indexing hir
time: 0.001; rss: 66MB	attribute checking
time: 0.003; rss: 66MB	early lint checks
time: 0.001; rss: 64MB	language item collection
time: 0.010; rss: 74MB	name resolution
time: 0.001; rss: 74MB	lifetime resolution
time: 0.000; rss: 74MB	looking for entry point
time: 0.000; rss: 74MB	looking for plugin registrar
time: 0.003; rss: 74MB	region resolution
time: 0.000; rss: 74MB	loop checking
time: 0.000; rss: 74MB	static item recursion checking
time: 0.000; rss: 74MB	load_dep_graph
time: 0.001; rss: 74MB	type collecting
time: 0.000; rss: 74MB	variance inference
time: 0.010; rss: 87MB	coherence checking
time: 0.002; rss: 91MB	wf checking
time: 0.002; rss: 91MB	item-types checking
time: 2.723; rss: 113MB	item-bodies checking
time: 0.000; rss: 113MB	drop-impl checking
time: 0.013; rss: 113MB	const checking
time: 0.001; rss: 113MB	privacy checking
time: 0.000; rss: 113MB	stability index
time: 0.000; rss: 113MB	intrinsic checking
time: 0.001; rss: 113MB	effect checking
time: 0.003; rss: 113MB	match checking
time: 0.065; rss: 113MB	liveness checking
time: 0.009; rss: 113MB	rvalue checking
time: 0.034; rss: 129MB	MIR dump
time: 0.013; rss: 125MB	MIR passes
time: 0.205; rss: 127MB	borrow checking
time: 0.000; rss: 127MB	reachability checking
time: 0.003; rss: 127MB	death checking
time: 0.002; rss: 127MB	stability checking
time: 0.000; rss: 127MB	unused lib feature checking
time: 0.022; rss: 125MB	lint checking
time: 0.000; rss: 125MB	resolving dependency formats
time: 0.006; rss: 127MB	Prepare MIR codegen passes
  time: 0.011; rss: 132MB	translation item collection
  time: 0.000; rss: 132MB	codegen unit partitioning
  time: 0.003; rss: 149MB	write metadata
time: 0.360; rss: 140MB	translation
time: 0.000; rss: 140MB	assert dep graph
time: 0.000; rss: 140MB	serialize dep graph
  time: 0.027; rss: 105MB	llvm function passes [0]
  time: 0.004; rss: 105MB	llvm module passes [0]
  time: 0.496; rss: 110MB	codegen passes [0]
  time: 0.000; rss: 100MB	codegen passes [0]
time: 0.568; rss: 99MB	LLVM passes
time: 0.033; rss: 99MB	linking
done
