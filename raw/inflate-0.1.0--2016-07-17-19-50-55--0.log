commit 34f35ed29c8acdbe1e3c172786fc41d6f4fb6090
Merge: 6aba7be f66da5e
Author: bors <bors@rust-lang.org>
Date:   Sun Jul 17 09:07:50 2016 -0700

    Auto merge of #34871 - petrochenkov:inherent, r=jseyfried
    
    Do not resolve inherent static methods from other crates prematurely
    
    Under some specific circumstances paths like `Type::method` can be resolved early in rustc_resolve instead of type checker. `Type` must be defined in another crate, it should be an enum or a trait object (i.e. a type that acts as a "module" in resolve), and `method` should be an inherent static method.
    As a result, such paths don't go through `resolve_ufcs`, may be resolved incorrectly and break some invariants in type checker. This patch removes special treatment of such methods.
    
    The removed code was introduced in https://github.com/rust-lang/rust/commit/2bd46e767c0fe5b6188df61cb9daf8f2e65a3ed0 to fix a problem that no longer exists.
    
    r? @jseyfried
rustc: ./inflate-0.1.0
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling inflate v0.1.0 (file:///root/benchmarks/inflate-0.1.0)
time: 0.004; rss: 82MB	parsing
Lines of code:             956
Pre-expansion node count:  4738
time: 0.001; rss: 86MB	configuration
time: 0.000; rss: 86MB	recursion limit
time: 0.000; rss: 86MB	crate injection
time: 0.000; rss: 86MB	plugin loading
time: 0.000; rss: 86MB	plugin registration
time: 0.093; rss: 125MB	expansion
time: 0.000; rss: 125MB	maybe building test harness
time: 0.004; rss: 125MB	assigning node ids
Post-expansion node count: 55769
time: 0.000; rss: 125MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 125MB	complete gated feature checking
time: 0.005; rss: 125MB	collecting defs
time: 0.001; rss: 125MB	external crate/lib resolution
time: 0.003; rss: 125MB	early lint checks
time: 0.000; rss: 125MB	AST validation
time: 0.011; rss: 127MB	name resolution
time: 0.006; rss: 132MB	lowering ast -> hir
time: 0.001; rss: 134MB	indexing hir
time: 0.001; rss: 134MB	attribute checking
time: 0.001; rss: 131MB	language item collection
time: 0.001; rss: 131MB	lifetime resolution
time: 0.000; rss: 131MB	looking for entry point
time: 0.000; rss: 131MB	looking for plugin registrar
time: 0.003; rss: 134MB	region resolution
time: 0.000; rss: 134MB	loop checking
time: 0.000; rss: 134MB	static item recursion checking
time: 0.000; rss: 134MB	load_dep_graph
time: 0.002; rss: 136MB	type collecting
time: 0.000; rss: 136MB	variance inference
time: 0.010; rss: 137MB	coherence checking
time: 0.002; rss: 137MB	wf checking
time: 0.002; rss: 137MB	item-types checking
time: 3.620; rss: 153MB	item-bodies checking
time: 0.000; rss: 153MB	drop-impl checking
time: 0.016; rss: 150MB	const checking
time: 0.001; rss: 150MB	privacy checking
time: 0.000; rss: 150MB	stability index
time: 0.001; rss: 150MB	intrinsic checking
time: 0.001; rss: 150MB	effect checking
time: 0.005; rss: 150MB	match checking
time: 0.069; rss: 150MB	liveness checking
time: 0.011; rss: 150MB	rvalue checking
time: 0.040; rss: 164MB	MIR dump
time: 0.023; rss: 163MB	MIR passes
time: 0.215; rss: 162MB	borrow checking
time: 0.000; rss: 162MB	reachability checking
time: 0.003; rss: 162MB	death checking
time: 0.002; rss: 162MB	stability checking
time: 0.000; rss: 162MB	unused lib feature checking
time: 0.020; rss: 164MB	lint checking
time: 0.000; rss: 164MB	resolving dependency formats
time: 0.125; rss: 162MB	Prepare MIR codegen passes
  time: 0.003; rss: 163MB	write metadata
  time: 0.010; rss: 164MB	translation item collection
  time: 0.001; rss: 165MB	codegen unit partitioning
time: 0.827; rss: 179MB	translation
time: 0.000; rss: 179MB	assert dep graph
time: 0.000; rss: 179MB	serialize dep graph
  time: 0.303; rss: 147MB	llvm function passes [0]
  time: 0.075; rss: 148MB	llvm module passes [0]
  time: 4.606; rss: 150MB	codegen passes [0]
  time: 0.001; rss: 150MB	codegen passes [0]
time: 5.228; rss: 150MB	LLVM passes
time: 0.034; rss: 139MB	linking
done
