commit 8aeb15acc73311ea4308e74a166ba3c0b261c810
Merge: 497d67d 90ce504
Author: bors <bors@rust-lang.org>
Date:   Thu Sep 1 19:03:27 2016 -0700

    Auto merge of #35894 - jseyfried:new_import_semantics, r=nrc
    
    Implement RFC 1560 behind `#![feature(item_like_imports)]`
    
    This implements https://github.com/rust-lang/rfcs/pull/1560 (cc #35120) behind the `item_like_imports` feature gate.
    
    The [RFC text](https://github.com/rust-lang/rfcs/blob/master/text/1560-name-resolution.md#changes-to-name-resolution-rules) describes the changes to name resolution enabled by `#![feature(item_like_imports)` in detail. To summarize,
     - Items and named imports shadow glob imports.
     - Multiple globs can import the same name if the name is unused or the imports are shadowed.
     - Multiple globs can import the same name if the imports are of the same item (following re-exports).
      - The visibility of such a name is the maximum visibility of the imports.
      - Equivalently, adding a glob import will never reduce the visibility of a name, nor will removing one increase it.
     - Non-prelude private imports can be used wherever we currently allow private items to be used.
      - Prelude-imported names are unaffected, i.e. they continue to be usable only in lexical scopes.
     - Globs import all visible names, not just public names.
      - Equivalently, glob importing from an ancestor module imports all of the ancestor's names, and glob importing from other modules is unchanged.
    
    r? @nrc
rustc: ./issue-32278-big-array-of-strings
/root/rust/x86_64-unknown-linux-gnu/stage2/bin/rustc big-array-of-strings.rs -Ztime-passes -Zinput-stats
time: 0.142; rss: 63MB	parsing
Lines of code:             65577
Pre-expansion node count:  65552
time: 0.005; rss: 63MB	configuration
time: 0.000; rss: 63MB	recursion limit
time: 0.000; rss: 63MB	crate injection
time: 0.000; rss: 63MB	plugin loading
time: 0.000; rss: 63MB	plugin registration
time: 0.024; rss: 86MB	expansion
time: 0.000; rss: 86MB	maybe building test harness
time: 0.004; rss: 86MB	assigning node ids
Post-expansion node count: 65565
time: 0.000; rss: 86MB	checking for inline asm in case the target doesn't support it
time: 0.001; rss: 86MB	complete gated feature checking
time: 0.001; rss: 86MB	collecting defs
time: 0.003; rss: 86MB	external crate/lib resolution
time: 0.005; rss: 86MB	early lint checks
time: 0.000; rss: 86MB	AST validation
time: 0.002; rss: 86MB	name resolution
time: 0.008; rss: 104MB	lowering ast -> hir
time: 0.003; rss: 109MB	indexing hir
time: 0.001; rss: 109MB	attribute checking
time: 0.001; rss: 99MB	language item collection
time: 0.001; rss: 99MB	lifetime resolution
time: 0.000; rss: 99MB	looking for entry point
time: 0.000; rss: 99MB	looking for plugin registrar
time: 0.011; rss: 105MB	region resolution
time: 0.001; rss: 105MB	loop checking
time: 0.002; rss: 105MB	static item recursion checking
time: 0.009; rss: 105MB	compute_incremental_hashes_map
time: 0.000; rss: 105MB	load_dep_graph
time: 0.000; rss: 105MB	type collecting
time: 0.000; rss: 105MB	variance inference
time: 0.005; rss: 107MB	coherence checking
time: 0.001; rss: 107MB	wf checking
time: 0.728; rss: 118MB	item-types checking
time: 0.000; rss: 118MB	item-bodies checking
time: 0.000; rss: 118MB	drop-impl checking
time: 0.028; rss: 115MB	const checking
time: 0.002; rss: 115MB	privacy checking
time: 0.001; rss: 115MB	stability index
time: 0.001; rss: 115MB	intrinsic checking
time: 0.000; rss: 115MB	effect checking
time: 0.000; rss: 115MB	match checking
time: 0.001; rss: 115MB	liveness checking
time: 0.000; rss: 115MB	rvalue checking
time: 0.049; rss: 126MB	MIR dump
time: 0.002; rss: 126MB	MIR passes
time: 0.001; rss: 126MB	borrow checking
time: 0.000; rss: 126MB	reachability checking
time: 0.001; rss: 126MB	death checking
time: 0.001; rss: 126MB	stability checking
time: 0.000; rss: 126MB	unused lib feature checking
time: 0.029; rss: 127MB	lint checking
time: 0.001; rss: 127MB	resolving dependency formats
time: 0.001; rss: 127MB	Prepare MIR codegen passes
  time: 0.000; rss: 127MB	write metadata
  time: 0.001; rss: 127MB	translation item collection
  time: 0.000; rss: 127MB	codegen unit partitioning
  time: 0.001; rss: 136MB	internalize symbols
time: 0.065; rss: 134MB	translation
time: 0.000; rss: 134MB	assert dep graph
time: 0.000; rss: 134MB	serialize dep graph
  time: 0.009; rss: 91MB	llvm function passes [0]
  time: 0.000; rss: 91MB	llvm module passes [0]
  time: 0.194; rss: 92MB	codegen passes [0]
  time: 0.000; rss: 92MB	codegen passes [0]
time: 0.204; rss: 92MB	LLVM passes
time: 0.000; rss: 92MB	serialize work products
  time: 0.185; rss: 79MB	running linker
time: 0.186; rss: 79MB	linking
done
