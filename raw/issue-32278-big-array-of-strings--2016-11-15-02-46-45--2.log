commit 0ed951993fb5721a303ca5fa743543dd9f3f6b10
Merge: bd6a54d 7cd8a49
Author: bors <bors@rust-lang.org>
Date:   Mon Nov 14 18:12:26 2016 -0800

    Auto merge of #37775 - alexcrichton:try-fix-dox, r=brson
    
    rustbuild: Tweak default rule inclusion
    
    If a rule is flagged with `default(true)` then the pseudo-rule `default:foo`
    will include that. If a rule is also flagged with `.host(true)`, however, then
    the rule shouldn't be included for targets that aren't in the host array. This
    adds a filter to ensure we don't pull in host rules for targets by accident.
rustc: ./issue-32278-big-array-of-strings
cargo rustc  -- -Ztime-passes -Zinput-stats
   Compiling issue-32278-big-array-of-strings v0.1.0 (file:///root/benchmarks/issue-32278-big-array-of-strings)
time: 0.139; rss: 52MB	parsing
Lines of code:             65577
Pre-expansion node count:  65552
time: 0.000; rss: 52MB	recursion limit
time: 0.000; rss: 52MB	crate injection
time: 0.000; rss: 52MB	plugin loading
time: 0.000; rss: 52MB	plugin registration
time: 0.023; rss: 78MB	expansion
time: 0.000; rss: 78MB	maybe building test harness
time: 0.000; rss: 78MB	maybe creating a macro crate
Post-expansion node count: 65565
time: 0.000; rss: 78MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 78MB	complete gated feature checking
time: 0.005; rss: 78MB	early lint checks
time: 0.000; rss: 78MB	AST validation
time: 0.003; rss: 78MB	name resolution
time: 0.017; rss: 87MB	lowering ast -> hir
time: 0.006; rss: 90MB	indexing hir
time: 0.000; rss: 90MB	attribute checking
time: 0.000; rss: 78MB	language item collection
time: 0.000; rss: 78MB	lifetime resolution
time: 0.000; rss: 78MB	looking for entry point
time: 0.000; rss: 78MB	looking for plugin registrar
time: 0.015; rss: 83MB	region resolution
time: 0.000; rss: 83MB	loop checking
time: 0.001; rss: 83MB	static item recursion checking
time: 0.020; rss: 84MB	compute_incremental_hashes_map
time: 0.000; rss: 84MB	load_dep_graph
time: 0.000; rss: 84MB	type collecting
time: 0.000; rss: 84MB	variance inference
time: 0.004; rss: 86MB	coherence checking
time: 0.000; rss: 86MB	wf checking
time: 0.813; rss: 93MB	item-types checking
time: 0.000; rss: 93MB	item-bodies checking
time: 0.000; rss: 93MB	drop-impl checking
time: 0.027; rss: 97MB	const checking
time: 0.001; rss: 97MB	privacy checking
time: 0.000; rss: 97MB	stability index
time: 0.000; rss: 97MB	intrinsic checking
time: 0.000; rss: 97MB	effect checking
time: 0.000; rss: 97MB	match checking
time: 0.000; rss: 97MB	liveness checking
time: 0.000; rss: 97MB	rvalue checking
time: 0.045; rss: 100MB	MIR dump
  time: 0.000; rss: 100MB	SimplifyCfg
  time: 0.001; rss: 100MB	QualifyAndPromoteConstants
  time: 0.001; rss: 100MB	TypeckMir
  time: 0.000; rss: 100MB	SimplifyBranches
  time: 0.000; rss: 100MB	SimplifyCfg
time: 0.002; rss: 100MB	MIR cleanup and validation
time: 0.001; rss: 100MB	borrow checking
time: 0.000; rss: 100MB	reachability checking
time: 0.001; rss: 100MB	death checking
time: 0.000; rss: 100MB	stability checking
time: 0.000; rss: 100MB	unused lib feature checking
time: 0.024; rss: 100MB	lint checking
time: 0.001; rss: 100MB	resolving dependency formats
  time: 0.000; rss: 100MB	NoLandingPads
  time: 0.000; rss: 100MB	SimplifyCfg
  time: 0.001; rss: 100MB	EraseRegions
  time: 0.000; rss: 100MB	AddCallGuards
  time: 0.000; rss: 100MB	ElaborateDrops
  time: 0.000; rss: 100MB	NoLandingPads
  time: 0.000; rss: 100MB	SimplifyCfg
  time: 0.000; rss: 100MB	InstCombine
  time: 0.000; rss: 100MB	Deaggregator
  time: 0.000; rss: 100MB	CopyPropagation
  time: 0.000; rss: 100MB	SimplifyLocals
  time: 0.000; rss: 100MB	AddCallGuards
  time: 0.000; rss: 100MB	PreTrans
time: 0.001; rss: 100MB	MIR optimisations
  time: 0.000; rss: 101MB	write metadata
  time: 0.001; rss: 101MB	translation item collection
  time: 0.000; rss: 101MB	codegen unit partitioning
  time: 0.001; rss: 113MB	internalize symbols
time: 0.060; rss: 113MB	translation
time: 0.000; rss: 113MB	assert dep graph
time: 0.000; rss: 113MB	serialize dep graph
  time: 0.009; rss: 79MB	llvm function passes [0]
  time: 0.000; rss: 79MB	llvm module passes [0]
  time: 0.212; rss: 79MB	codegen passes [0]
  time: 0.000; rss: 79MB	codegen passes [0]
time: 0.222; rss: 79MB	LLVM passes
time: 0.000; rss: 79MB	serialize work products
  time: 0.151; rss: 70MB	running linker
time: 0.152; rss: 70MB	linking
done
