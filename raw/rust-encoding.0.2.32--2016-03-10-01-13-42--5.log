commit bcda58f49133921abd091d7f800732fe2c4e5a98
Merge: 0b9995b 3855fa9
Author: bors <bors@rust-lang.org>
Date:   Wed Mar 9 20:16:20 2016 -0800

    Auto merge of #31710 - eddyb:reify, r=nikomatsakis
    
    Distinguish fn item types to allow reification from nothing to fn pointers.
    
    The first commit is a rebase of #26284, except for files that have moved since.
    
    This is a [breaking-change], due to:
    * each FFI function has a distinct type, like all other functions currently do
    * all generic parameters on functions are recorded in their item types, e.g.:
    `size_of::<u8>` & `size_of::<i8>`'s types differ despite their identical signature.
    * function items are zero-sized, which will stop transmutes from working on them
    
    The first two cases are handled in most cases with the new coerce-unify logic,
    which will combine incompatible function item types into function pointers,
    at the outer-most level of if-else chains, match arms and array literals.
    
    The last case is specially handled during type-checking such that transmutes
    from a function item type to a pointer or integer type will continue to work for
    another release cycle, but are being linted against. To get rid of warnings and
    ensure your code will continue to compile, cast to a pointer before transmuting.
rustc: ./rust-encoding.0.2.32
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling encoding v0.2.32 (file:///root/benchmarks/rust-encoding.0.2.32)
time: 0.023; rss: 42MB	parsing
Lines of code:             6441
Pre-expansion node count:  30335
time: 0.006; rss: 42MB	configuration 1
time: 0.000; rss: 42MB	recursion limit
time: 0.000; rss: 42MB	gated macro checking
time: 0.000; rss: 42MB	crate injection
time: 0.003; rss: 45MB	macro loading
time: 0.000; rss: 45MB	plugin loading
time: 0.000; rss: 45MB	plugin registration
time: 0.044; rss: 48MB	expansion
time: 0.001; rss: 48MB	complete gated feature checking 1
time: 0.007; rss: 48MB	configuration 2
time: 0.000; rss: 48MB	gated configuration checking
time: 0.004; rss: 48MB	maybe building test harness
time: 0.003; rss: 48MB	prelude injection
time: 0.000; rss: 48MB	checking that all macro invocations are gone
time: 0.000; rss: 48MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 48MB	complete gated feature checking 2
time: 0.000; rss: 48MB	const fn bodies and arguments
Post-expansion node count: 41783
time: 0.003; rss: 48MB	assigning node ids
time: 0.004; rss: 51MB	lowering ast -> hir
time: 0.001; rss: 53MB	indexing hir
time: 0.001; rss: 53MB	attribute checking
time: 0.002; rss: 53MB	early lint checks
time: 0.001; rss: 53MB	external crate/lib resolution
time: 0.000; rss: 53MB	language item collection
time: 0.008; rss: 62MB	resolution
time: 0.000; rss: 62MB	lifetime resolution
time: 0.000; rss: 62MB	looking for entry point
time: 0.000; rss: 62MB	looking for plugin registrar
time: 0.002; rss: 64MB	region resolution
time: 0.000; rss: 64MB	loop checking
time: 0.000; rss: 64MB	static item recursion checking
time: 0.005; rss: 66MB	type collecting
time: 0.000; rss: 66MB	variance inference
time: 0.020; rss: 81MB	coherence checking
time: 0.018; rss: 81MB	wf checking
time: 0.012; rss: 82MB	item-types checking
time: 0.179; rss: 94MB	item-bodies checking
time: 0.000; rss: 94MB	drop-impl checking
time: 0.010; rss: 94MB	const checking
time: 0.002; rss: 94MB	privacy checking
time: 0.000; rss: 94MB	stability index
time: 0.001; rss: 94MB	intrinsic checking
time: 0.000; rss: 94MB	effect checking
time: 0.006; rss: 94MB	match checking
time: 0.002; rss: 94MB	liveness checking
time: 0.006; rss: 94MB	rvalue checking
time: 0.021; rss: 98MB	MIR dump
time: 0.000; rss: 98MB	MIR passes
time: 0.021; rss: 98MB	borrow checking
time: 0.000; rss: 98MB	reachability checking
time: 0.002; rss: 98MB	death checking
time: 0.002; rss: 98MB	stability checking
time: 0.000; rss: 98MB	unused lib feature checking
time: 0.018; rss: 98MB	lint checking
time: 0.000; rss: 98MB	resolving dependency formats
time: 0.002; rss: 98MB	erasing regions from MIR
  time: 0.024; rss: 108MB	translation item collection
  time: 0.057; rss: 146MB	write metadata
time: 0.316; rss: 146MB	translation
  time: 0.026; rss: 108MB	llvm function passes [0]
  time: 0.047; rss: 112MB	llvm module passes [0]
  time: 0.562; rss: 117MB	codegen passes [0]
  time: 0.001; rss: 102MB	codegen passes [0]
time: 0.703; rss: 101MB	LLVM passes
time: 0.052; rss: 99MB	linking
done
