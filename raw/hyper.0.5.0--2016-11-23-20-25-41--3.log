commit 1e45b63052ae19c206a347d7fdfcdd97929f57d3
Merge: d5814b0 f4c68d2
Author: bors <bors@rust-lang.org>
Date:   Wed Nov 23 17:48:44 2016 -0600

    Auto merge of #37931 - eddyb:meta-version, r=jseyfried
    
    rustc_metadata: don't break the version check when CrateRoot changes.
    
    In #36551 I made `rustc_version` a field of `CrateRoot`, but despite it being the first field, one could still break the version check by changing `CrateRoot` so older compilers couldn't fully decode it (e.g. #37463).
    
    This PR fixes #37803 by moving the version string back at the beginning of metadata, right after the 32-bit big-endian absolute position of `CrateRoot`, and by incrementing `METADATA_VERSION`.
rustc: ./hyper.0.5.0
cargo rustc  -- -Ztime-passes -Zinput-stats
   Compiling hyper v0.5.0 (file:///root/benchmarks/hyper.0.5.0)
time: 0.023; rss: 48MB	parsing
Lines of code:             9003
Pre-expansion node count:  44055
time: 0.000; rss: 48MB	recursion limit
time: 0.000; rss: 48MB	crate injection
time: 0.000; rss: 48MB	plugin loading
time: 0.000; rss: 48MB	plugin registration
time: 0.078; rss: 88MB	expansion
time: 0.000; rss: 88MB	maybe building test harness
time: 0.001; rss: 88MB	maybe creating a macro crate
Post-expansion node count: 101769
time: 0.000; rss: 88MB	checking for inline asm in case the target doesn't support it
time: 0.001; rss: 88MB	complete gated feature checking
time: 0.003; rss: 88MB	early lint checks
time: 0.001; rss: 88MB	AST validation
time: 0.014; rss: 92MB	name resolution
time: 0.008; rss: 96MB	lowering ast -> hir
time: 0.001; rss: 96MB	indexing hir
time: 0.001; rss: 96MB	attribute checking
time: 0.001; rss: 92MB	language item collection
time: 0.002; rss: 92MB	lifetime resolution
time: 0.000; rss: 92MB	looking for entry point
time: 0.000; rss: 92MB	looking for plugin registrar
time: 0.006; rss: 96MB	region resolution
time: 0.001; rss: 96MB	loop checking
time: 0.001; rss: 96MB	static item recursion checking
time: 0.040; rss: 95MB	compute_incremental_hashes_map
time: 0.000; rss: 95MB	load_dep_graph
time: 0.015; rss: 97MB	type collecting
time: 0.000; rss: 97MB	variance inference
time: 0.001; rss: 97MB	impl wf inference
time: 0.015; rss: 98MB	coherence checking
time: 0.038; rss: 101MB	wf checking
time: 0.024; rss: 102MB	item-types checking
time: 0.454; rss: 111MB	item-bodies checking
time: 0.000; rss: 111MB	drop-impl checking
time: 0.031; rss: 113MB	const checking
time: 0.006; rss: 113MB	privacy checking
time: 0.001; rss: 113MB	stability index
time: 0.003; rss: 113MB	intrinsic checking
time: 0.001; rss: 113MB	effect checking
time: 0.007; rss: 113MB	match checking
time: 0.004; rss: 114MB	liveness checking
time: 0.020; rss: 114MB	rvalue checking
time: 0.046; rss: 135MB	MIR dump
  time: 0.006; rss: 135MB	SimplifyCfg
  time: 0.011; rss: 137MB	QualifyAndPromoteConstants
  time: 0.013; rss: 137MB	TypeckMir
  time: 0.000; rss: 137MB	SimplifyBranches
  time: 0.003; rss: 137MB	SimplifyCfg
time: 0.034; rss: 137MB	MIR cleanup and validation
time: 0.053; rss: 137MB	borrow checking
time: 0.003; rss: 137MB	reachability checking
time: 0.004; rss: 137MB	death checking
time: 0.004; rss: 137MB	stability checking
time: 0.000; rss: 137MB	unused lib feature checking
time: 0.037; rss: 137MB	lint checking
time: 0.000; rss: 137MB	resolving dependency formats
  time: 0.000; rss: 137MB	NoLandingPads
  time: 0.003; rss: 137MB	SimplifyCfg
  time: 0.007; rss: 137MB	EraseRegions
  time: 0.001; rss: 137MB	AddCallGuards
  time: 0.021; rss: 140MB	ElaborateDrops
  time: 0.000; rss: 140MB	NoLandingPads
  time: 0.005; rss: 140MB	SimplifyCfg
  time: 0.003; rss: 140MB	InstCombine
  time: 0.003; rss: 140MB	Deaggregator
  time: 0.000; rss: 140MB	CopyPropagation
  time: 0.003; rss: 140MB	SimplifyLocals
  time: 0.001; rss: 140MB	AddCallGuards
  time: 0.000; rss: 140MB	PreTrans
time: 0.048; rss: 140MB	MIR optimisations
  time: 0.011; rss: 142MB	write metadata
  time: 0.116; rss: 150MB	translation item collection
  time: 0.013; rss: 152MB	codegen unit partitioning
  time: 0.011; rss: 204MB	internalize symbols
time: 0.909; rss: 204MB	translation
time: 0.000; rss: 204MB	assert dep graph
time: 0.000; rss: 204MB	serialize dep graph
  time: 0.083; rss: 152MB	llvm function passes [0]
  time: 0.041; rss: 154MB	llvm module passes [0]
  time: 1.633; rss: 153MB	codegen passes [0]
  time: 0.000; rss: 153MB	codegen passes [0]
time: 1.892; rss: 153MB	LLVM passes
time: 0.000; rss: 153MB	serialize work products
time: 0.069; rss: 101MB	linking
done
