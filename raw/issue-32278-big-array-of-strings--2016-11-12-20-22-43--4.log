commit a277f9deb0bcccc096334447b0e57765110707c7
Merge: fd983d0 d394e75
Author: bors <bors@rust-lang.org>
Date:   Sat Nov 12 15:29:13 2016 -0800

    Auto merge of #37675 - arielb1:trans-closure, r=eddyb
    
    Translate closures through the collector
    
    Now that old trans is gone, there is no need for the hack of translating closures when they are instantiated. We can translate them like regular items.
    
    r? @eddyb
rustc: ./issue-32278-big-array-of-strings
cargo rustc  -- -Ztime-passes -Zinput-stats
   Compiling issue-32278-big-array-of-strings v0.1.0 (file:///root/benchmarks/issue-32278-big-array-of-strings)
time: 0.100; rss: 60MB	parsing
Lines of code:             65577
Pre-expansion node count:  65552
time: 0.000; rss: 60MB	recursion limit
time: 0.000; rss: 60MB	crate injection
time: 0.000; rss: 60MB	plugin loading
time: 0.000; rss: 60MB	plugin registration
time: 0.022; rss: 82MB	expansion
time: 0.000; rss: 82MB	maybe building test harness
time: 0.001; rss: 82MB	maybe creating a macro crate
Post-expansion node count: 65565
time: 0.000; rss: 82MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 82MB	complete gated feature checking
time: 0.005; rss: 82MB	early lint checks
time: 0.000; rss: 82MB	AST validation
time: 0.003; rss: 86MB	name resolution
time: 0.005; rss: 95MB	lowering ast -> hir
time: 0.001; rss: 99MB	indexing hir
time: 0.000; rss: 99MB	attribute checking
time: 0.000; rss: 88MB	language item collection
time: 0.000; rss: 88MB	lifetime resolution
time: 0.000; rss: 88MB	looking for entry point
time: 0.000; rss: 88MB	looking for plugin registrar
time: 0.007; rss: 94MB	region resolution
time: 0.000; rss: 94MB	loop checking
time: 0.001; rss: 94MB	static item recursion checking
time: 0.020; rss: 94MB	compute_incremental_hashes_map
time: 0.000; rss: 94MB	load_dep_graph
time: 0.000; rss: 94MB	type collecting
time: 0.000; rss: 94MB	variance inference
time: 0.004; rss: 96MB	coherence checking
time: 0.000; rss: 96MB	wf checking
time: 0.513; rss: 104MB	item-types checking
time: 0.000; rss: 104MB	item-bodies checking
time: 0.000; rss: 104MB	drop-impl checking
time: 0.022; rss: 108MB	const checking
time: 0.001; rss: 108MB	privacy checking
time: 0.000; rss: 108MB	stability index
time: 0.000; rss: 108MB	intrinsic checking
time: 0.000; rss: 108MB	effect checking
time: 0.000; rss: 108MB	match checking
time: 0.000; rss: 108MB	liveness checking
time: 0.000; rss: 108MB	rvalue checking
time: 0.042; rss: 112MB	MIR dump
  time: 0.000; rss: 112MB	SimplifyCfg
  time: 0.001; rss: 112MB	QualifyAndPromoteConstants
  time: 0.001; rss: 112MB	TypeckMir
  time: 0.000; rss: 112MB	SimplifyBranches
  time: 0.000; rss: 112MB	SimplifyCfg
time: 0.001; rss: 112MB	MIR cleanup and validation
time: 0.001; rss: 112MB	borrow checking
time: 0.000; rss: 112MB	reachability checking
time: 0.000; rss: 112MB	death checking
time: 0.000; rss: 112MB	stability checking
time: 0.000; rss: 112MB	unused lib feature checking
time: 0.023; rss: 112MB	lint checking
time: 0.001; rss: 112MB	resolving dependency formats
  time: 0.000; rss: 112MB	NoLandingPads
  time: 0.000; rss: 112MB	SimplifyCfg
  time: 0.001; rss: 112MB	EraseRegions
  time: 0.000; rss: 112MB	AddCallGuards
  time: 0.000; rss: 112MB	ElaborateDrops
  time: 0.000; rss: 112MB	NoLandingPads
  time: 0.000; rss: 112MB	SimplifyCfg
  time: 0.000; rss: 112MB	InstCombine
  time: 0.000; rss: 112MB	Deaggregator
  time: 0.000; rss: 112MB	CopyPropagation
  time: 0.000; rss: 112MB	SimplifyLocals
  time: 0.000; rss: 112MB	AddCallGuards
  time: 0.000; rss: 112MB	PreTrans
time: 0.001; rss: 112MB	MIR optimisations
  time: 0.000; rss: 113MB	write metadata
  time: 0.001; rss: 113MB	translation item collection
  time: 0.000; rss: 113MB	codegen unit partitioning
  time: 0.001; rss: 125MB	internalize symbols
time: 0.051; rss: 125MB	translation
time: 0.000; rss: 125MB	assert dep graph
time: 0.000; rss: 125MB	serialize dep graph
  time: 0.008; rss: 86MB	llvm function passes [0]
  time: 0.000; rss: 86MB	llvm module passes [0]
  time: 0.172; rss: 86MB	codegen passes [0]
  time: 0.000; rss: 86MB	codegen passes [0]
time: 0.181; rss: 86MB	LLVM passes
time: 0.000; rss: 86MB	serialize work products
  time: 0.152; rss: 75MB	running linker
time: 0.153; rss: 75MB	linking
done
