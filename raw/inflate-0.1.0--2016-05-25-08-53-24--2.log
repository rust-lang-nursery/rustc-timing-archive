commit 5229e0efb34f924346febcfe158973486dabdf83
Merge: 487de42 a619901
Author: bors <bors@rust-lang.org>
Date:   Wed May 25 02:33:29 2016 -0700

    Auto merge of #33602 - eddyb:no-trans--check, r=michaelwoerister
    
    Save metadata even with -Z no-trans (e.g. for multi-crate cargo check).
    
    Removes the item symbol map in metadata, as we can now generate them in a deterministic manner.
    The `-Z no-trans` change lets the LLVM passes and linking run, but with just metadata and no code.
    It fails while trying to link a binary because there's no `main` function, which is correct but not good UX.
    
    There's also no way to easily throw away all of the artifacts to rebuild with actual code generation.
    We might want `cargo check` to do that using cargo-internal information and then it would just work.
    
    cc @alexcrichton @nikomatsakis @Aatch @michaelwoerister
rustc: ./inflate-0.1.0
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling inflate v0.1.0 (file:///root/benchmarks/inflate-0.1.0)
time: 0.004; rss: 47MB	parsing
Lines of code:             956
Pre-expansion node count:  4772
time: 0.001; rss: 47MB	configuration 1
time: 0.000; rss: 47MB	recursion limit
time: 0.000; rss: 47MB	crate injection
time: 0.019; rss: 84MB	macro loading
time: 0.000; rss: 84MB	plugin loading
time: 0.000; rss: 84MB	plugin registration
time: 0.085; rss: 92MB	expansion
time: 0.010; rss: 92MB	configuration 2
time: 0.000; rss: 92MB	gated configuration checking
time: 0.004; rss: 92MB	maybe building test harness
time: 0.004; rss: 92MB	prelude injection
time: 0.000; rss: 92MB	checking that all macro invocations are gone
time: 0.000; rss: 92MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 92MB	complete gated feature checking
Post-expansion node count: 54809
time: 0.004; rss: 92MB	assigning node ids
time: 0.005; rss: 92MB	collecting defs
time: 0.001; rss: 92MB	external crate/lib resolution
time: 0.003; rss: 92MB	early lint checks
time: 0.013; rss: 94MB	name resolution
time: 0.008; rss: 98MB	lowering ast -> hir
time: 0.001; rss: 98MB	indexing hir
time: 0.001; rss: 98MB	attribute checking
time: 0.001; rss: 96MB	language item collection
time: 0.001; rss: 96MB	lifetime resolution
time: 0.000; rss: 96MB	looking for entry point
time: 0.000; rss: 96MB	looking for plugin registrar
time: 0.003; rss: 98MB	region resolution
time: 0.000; rss: 98MB	loop checking
time: 0.000; rss: 98MB	static item recursion checking
time: 0.000; rss: 98MB	load_dep_graph
time: 0.001; rss: 98MB	type collecting
time: 0.000; rss: 98MB	variance inference
time: 0.010; rss: 101MB	coherence checking
time: 0.002; rss: 101MB	wf checking
time: 0.002; rss: 101MB	item-types checking
time: 3.373; rss: 115MB	item-bodies checking
time: 0.000; rss: 115MB	drop-impl checking
time: 0.015; rss: 115MB	const checking
time: 0.001; rss: 115MB	privacy checking
time: 0.000; rss: 115MB	stability index
time: 0.001; rss: 115MB	intrinsic checking
time: 0.001; rss: 115MB	effect checking
time: 0.005; rss: 115MB	match checking
time: 0.061; rss: 113MB	liveness checking
time: 0.011; rss: 113MB	rvalue checking
time: 0.037; rss: 126MB	MIR dump
time: 0.017; rss: 121MB	MIR passes
time: 0.202; rss: 122MB	borrow checking
time: 0.000; rss: 122MB	reachability checking
time: 0.003; rss: 122MB	death checking
time: 0.002; rss: 122MB	stability checking
time: 0.000; rss: 122MB	unused lib feature checking
time: 0.021; rss: 124MB	lint checking
time: 0.000; rss: 124MB	resolving dependency formats
time: 0.005; rss: 125MB	Prepare MIR codegen passes
  time: 0.003; rss: 126MB	write metadata
  time: 0.012; rss: 128MB	translation item collection
  time: 0.000; rss: 128MB	codegen unit partitioning
time: 0.393; rss: 140MB	translation
time: 0.000; rss: 140MB	assert dep graph
time: 0.000; rss: 140MB	serialize dep graph
  time: 0.026; rss: 110MB	llvm function passes [0]
  time: 0.005; rss: 110MB	llvm module passes [0]
  time: 0.496; rss: 116MB	codegen passes [0]
  time: 0.000; rss: 104MB	codegen passes [0]
time: 0.569; rss: 104MB	LLVM passes
time: 0.034; rss: 104MB	linking
done
