commit 1ec80f65fbc5b16e2b9238ee9888ca242bbb7c5e
Merge: 764ef92 8169fa2
Author: bors <bors@rust-lang.org>
Date:   Thu May 19 16:22:50 2016 -0700

    Auto merge of #33103 - ranma42:escape-unicode-last, r=alexcrichton
    
    Implement `last` for `EscapeUnicode`
    
    The implementation is quite trivial as the last character is always `'{'`.
    As a side-effect it also improves the implementation of `last` for `EscapeUnicode`.
    
    Part of #24214, split from #31049.
    
    Maybe this (and the other changes that I will split from #31049) should wait for a test like `ed_iterator_specializations` to be added. Would it be sufficient to do the same for each possible escape length?
rustc: ./issue-32278-big-array-of-strings
/root/rust/x86_64-unknown-linux-gnu/stage2/bin/rustc big-array-of-strings.rs -Ztime-passes -Zinput-stats
time: 0.152; rss: 68MB	parsing
Lines of code:             65577
Pre-expansion node count:  65552
time: 0.012; rss: 68MB	configuration 1
time: 0.000; rss: 68MB	recursion limit
time: 0.000; rss: 68MB	crate injection
time: 0.020; rss: 101MB	macro loading
time: 0.000; rss: 101MB	plugin loading
time: 0.000; rss: 101MB	plugin registration
time: 0.042; rss: 108MB	expansion
time: 0.011; rss: 108MB	configuration 2
time: 0.000; rss: 108MB	gated configuration checking
time: 0.006; rss: 108MB	maybe building test harness
time: 0.005; rss: 108MB	prelude injection
time: 0.001; rss: 108MB	checking that all macro invocations are gone
time: 0.000; rss: 108MB	checking for inline asm in case the target doesn't support it
time: 0.001; rss: 108MB	complete gated feature checking
Post-expansion node count: 65565
time: 0.006; rss: 108MB	assigning node ids
time: 0.001; rss: 108MB	collecting defs
time: 0.004; rss: 109MB	external crate/lib resolution
time: 0.008; rss: 109MB	early lint checks
time: 0.002; rss: 109MB	name resolution
time: 0.009; rss: 123MB	lowering ast -> hir
time: 0.002; rss: 123MB	indexing hir
time: 0.001; rss: 123MB	attribute checking
time: 0.001; rss: 109MB	language item collection
time: 0.001; rss: 109MB	lifetime resolution
time: 0.000; rss: 109MB	looking for entry point
time: 0.000; rss: 109MB	looking for plugin registrar
time: 0.007; rss: 118MB	region resolution
time: 0.001; rss: 118MB	loop checking
time: 0.002; rss: 118MB	static item recursion checking
time: 0.000; rss: 118MB	load_dep_graph
time: 0.000; rss: 118MB	type collecting
time: 0.000; rss: 118MB	variance inference
time: 0.005; rss: 120MB	coherence checking
time: 0.001; rss: 120MB	wf checking
time: 0.875; rss: 137MB	item-types checking
time: 0.000; rss: 137MB	item-bodies checking
time: 0.000; rss: 137MB	drop-impl checking
time: 0.022; rss: 135MB	const checking
time: 0.002; rss: 135MB	privacy checking
time: 0.001; rss: 135MB	stability index
time: 0.000; rss: 135MB	intrinsic checking
time: 0.000; rss: 135MB	effect checking
time: 0.000; rss: 135MB	match checking
time: 0.001; rss: 135MB	liveness checking
time: 0.000; rss: 135MB	rvalue checking
time: 0.057; rss: 147MB	MIR dump
time: 0.002; rss: 147MB	MIR passes
time: 0.001; rss: 147MB	borrow checking
time: 0.000; rss: 147MB	reachability checking
time: 0.001; rss: 147MB	death checking
time: 0.001; rss: 147MB	stability checking
time: 0.000; rss: 147MB	unused lib feature checking
time: 0.030; rss: 147MB	lint checking
time: 0.001; rss: 147MB	resolving dependency formats
time: 0.001; rss: 147MB	Prepare MIR codegen passes
  time: 0.001; rss: 148MB	translation item collection
  time: 0.000; rss: 148MB	codegen unit partitioning
  time: 0.000; rss: 164MB	write metadata
time: 0.086; rss: 149MB	translation
time: 0.000; rss: 149MB	assert dep graph
time: 0.000; rss: 149MB	serialize dep graph
  time: 0.003; rss: 106MB	llvm function passes [0]
  time: 0.000; rss: 106MB	llvm module passes [0]
  time: 0.163; rss: 109MB	codegen passes [0]
  time: 0.000; rss: 96MB	codegen passes [0]
time: 0.178; rss: 96MB	LLVM passes
  time: 0.185; rss: 96MB	running linker
time: 0.186; rss: 96MB	linking
done
