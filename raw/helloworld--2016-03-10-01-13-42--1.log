commit bcda58f49133921abd091d7f800732fe2c4e5a98
Merge: 0b9995b 3855fa9
Author: bors <bors@rust-lang.org>
Date:   Wed Mar 9 20:16:20 2016 -0800

    Auto merge of #31710 - eddyb:reify, r=nikomatsakis
    
    Distinguish fn item types to allow reification from nothing to fn pointers.
    
    The first commit is a rebase of #26284, except for files that have moved since.
    
    This is a [breaking-change], due to:
    * each FFI function has a distinct type, like all other functions currently do
    * all generic parameters on functions are recorded in their item types, e.g.:
    `size_of::<u8>` & `size_of::<i8>`'s types differ despite their identical signature.
    * function items are zero-sized, which will stop transmutes from working on them
    
    The first two cases are handled in most cases with the new coerce-unify logic,
    which will combine incompatible function item types into function pointers,
    at the outer-most level of if-else chains, match arms and array literals.
    
    The last case is specially handled during type-checking such that transmutes
    from a function item type to a pointer or integer type will continue to work for
    another release cycle, but are being linted against. To get rid of warnings and
    ensure your code will continue to compile, cast to a pointer before transmuting.
rustc: ./helloworld
/root/rust/x86_64-unknown-linux-gnu/stage2/bin/rustc hello.rs -Ztime-passes -Zinput-stats
time: 0.000; rss: 32MB	parsing
Lines of code:             3
Pre-expansion node count:  8
time: 0.000; rss: 36MB	configuration 1
time: 0.000; rss: 36MB	recursion limit
time: 0.000; rss: 36MB	gated macro checking
time: 0.000; rss: 36MB	crate injection
time: 0.003; rss: 39MB	macro loading
time: 0.000; rss: 39MB	plugin loading
time: 0.000; rss: 39MB	plugin registration
time: 0.001; rss: 39MB	expansion
time: 0.000; rss: 39MB	complete gated feature checking 1
time: 0.000; rss: 39MB	configuration 2
time: 0.000; rss: 39MB	gated configuration checking
time: 0.000; rss: 39MB	maybe building test harness
time: 0.000; rss: 39MB	prelude injection
time: 0.000; rss: 39MB	checking that all macro invocations are gone
time: 0.000; rss: 39MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 39MB	complete gated feature checking 2
time: 0.000; rss: 39MB	const fn bodies and arguments
Post-expansion node count: 68
time: 0.000; rss: 39MB	assigning node ids
time: 0.000; rss: 39MB	lowering ast -> hir
time: 0.000; rss: 39MB	indexing hir
time: 0.000; rss: 39MB	attribute checking
time: 0.000; rss: 39MB	early lint checks
time: 0.001; rss: 39MB	external crate/lib resolution
time: 0.000; rss: 39MB	language item collection
time: 0.001; rss: 48MB	resolution
time: 0.000; rss: 48MB	lifetime resolution
time: 0.000; rss: 48MB	looking for entry point
time: 0.000; rss: 48MB	looking for plugin registrar
time: 0.000; rss: 48MB	region resolution
time: 0.000; rss: 48MB	loop checking
time: 0.000; rss: 48MB	static item recursion checking
time: 0.000; rss: 48MB	type collecting
time: 0.000; rss: 48MB	variance inference
time: 0.005; rss: 56MB	coherence checking
time: 0.000; rss: 56MB	wf checking
time: 0.000; rss: 56MB	item-types checking
time: 0.000; rss: 56MB	item-bodies checking
time: 0.000; rss: 56MB	drop-impl checking
time: 0.000; rss: 56MB	const checking
time: 0.000; rss: 56MB	privacy checking
time: 0.000; rss: 56MB	stability index
time: 0.000; rss: 56MB	intrinsic checking
time: 0.000; rss: 56MB	effect checking
time: 0.000; rss: 56MB	match checking
time: 0.000; rss: 56MB	liveness checking
time: 0.000; rss: 56MB	rvalue checking
time: 0.000; rss: 56MB	MIR dump
time: 0.000; rss: 56MB	MIR passes
time: 0.000; rss: 56MB	borrow checking
time: 0.000; rss: 56MB	reachability checking
time: 0.000; rss: 56MB	death checking
time: 0.000; rss: 56MB	stability checking
time: 0.000; rss: 56MB	unused lib feature checking
time: 0.000; rss: 56MB	lint checking
time: 0.001; rss: 56MB	resolving dependency formats
time: 0.000; rss: 56MB	erasing regions from MIR
  time: 0.000; rss: 69MB	translation item collection
  time: 0.000; rss: 69MB	write metadata
time: 0.003; rss: 69MB	translation
  time: 0.000; rss: 69MB	llvm function passes [0]
  time: 0.000; rss: 69MB	llvm module passes [0]
  time: 0.001; rss: 73MB	codegen passes [0]
  time: 0.000; rss: 73MB	codegen passes [0]
time: 0.002; rss: 73MB	LLVM passes
  time: 0.095; rss: 73MB	running linker
time: 0.095; rss: 73MB	linking
done
