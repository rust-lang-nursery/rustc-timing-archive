commit 7312e0a16328e6227d7fc593176a1fd12fea4342
Merge: dc1f442 e281509
Author: bors <bors@rust-lang.org>
Date:   Wed Jan 6 09:00:57 2016 +0000

    Auto merge of #30692 - michaelwoerister:mir-overloaded-fn-calls, r=nikomatsakis
    
    So far, calls going through `Fn::call`, `FnMut::call_mut`, or `FnOnce::call_once` have not been translated properly into MIR:
    The call `f(a, b, c)` where `f: Fn(T1, T2, T3)` would end up in MIR as:
    ```
    call `f` with arguments  `a`, `b`, `c`
    ```
    What we really want is:
    ```
    call `Fn::call` with arguments  `f`, `a`, `b`, `c`
    ```
    This PR transforms these kinds of overloaded calls during `HIR -> HAIR` translation.
    
    What's still a bit funky is that the `Fn` traits expect arguments to be tupled but due to special handling type-checking and trans, we do not actually tuple arguments and everything still checks out fine. So, after this PR we end up with MIR containing calls where function signature and arguments seemingly don't match:
    ```
    call Fn::call(&self, args: (T1, T2, T3)) with arguments `f`, `a`, `b`, `c`
    ```
    instead of
    ```
    call Fn::call(&self, args: (T1, T2, T3)) with arguments `f`, (`a`, `b`, `c`)  //  <- args tupled!
    ```
    It would be nice if the call traits could go without special handling in MIR and later on.
rustc: ./helloworld
/root/rust/x86_64-unknown-linux-gnu/stage2/bin/rustc hello.rs -Ztime-passes -Zinput-stats
time: 0.000; rss: 26MB	parsing
Lines of code:             3
Pre-expansion node count:  8
time: 0.000; rss: 30MB	configuration 1
time: 0.000; rss: 30MB	recursion limit
time: 0.000; rss: 30MB	gated macro checking
time: 0.000; rss: 30MB	crate injection
time: 0.003; rss: 32MB	macro loading
time: 0.000; rss: 32MB	plugin loading
time: 0.000; rss: 32MB	plugin registration
time: 0.001; rss: 32MB	expansion
time: 0.000; rss: 32MB	complete gated feature checking 1
time: 0.000; rss: 32MB	configuration 2
time: 0.000; rss: 32MB	gated configuration checking
time: 0.000; rss: 32MB	maybe building test harness
time: 0.000; rss: 32MB	prelude injection
time: 0.000; rss: 32MB	checking that all macro invocations are gone
time: 0.000; rss: 32MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 32MB	complete gated feature checking 2
Post-expansion node count: 68
time: 0.000; rss: 32MB	assigning node ids
time: 0.000; rss: 32MB	lowering ast -> hir
time: 0.000; rss: 32MB	indexing hir
time: 0.000; rss: 32MB	attribute checking
time: 0.000; rss: 32MB	early lint checks
time: 0.001; rss: 32MB	external crate/lib resolution
time: 0.000; rss: 37MB	language item collection
time: 0.001; rss: 41MB	resolution
time: 0.000; rss: 41MB	lifetime resolution
time: 0.000; rss: 41MB	looking for entry point
time: 0.000; rss: 41MB	looking for plugin registrar
time: 0.000; rss: 41MB	region resolution
time: 0.000; rss: 41MB	loop checking
time: 0.000; rss: 41MB	static item recursion checking
time: 0.000; rss: 41MB	type collecting
time: 0.000; rss: 41MB	variance inference
time: 0.005; rss: 45MB	coherence checking
time: 0.000; rss: 50MB	wf checking
time: 0.000; rss: 50MB	item-types checking
time: 0.000; rss: 50MB	item-bodies checking
time: 0.000; rss: 50MB	drop-impl checking
time: 0.000; rss: 50MB	const checking
time: 0.000; rss: 50MB	privacy checking
time: 0.000; rss: 50MB	stability index
time: 0.000; rss: 50MB	intrinsic checking
time: 0.000; rss: 50MB	effect checking
time: 0.000; rss: 50MB	match checking
time: 0.000; rss: 50MB	MIR dump
time: 0.000; rss: 50MB	liveness checking
time: 0.000; rss: 50MB	borrow checking
time: 0.000; rss: 50MB	rvalue checking
time: 0.000; rss: 50MB	reachability checking
time: 0.000; rss: 50MB	death checking
time: 0.000; rss: 50MB	stability checking
time: 0.000; rss: 50MB	unused lib feature checking
time: 0.000; rss: 50MB	lint checking
time: 0.001; rss: 50MB	resolving dependency formats
time: 0.000; rss: 50MB	erasing regions from MIR
  time: 0.000; rss: 60MB	write metadata
time: 0.003; rss: 60MB	translation
  time: 0.000; rss: 62MB	llvm function passes [0]
  time: 0.000; rss: 62MB	llvm module passes [0]
  time: 0.001; rss: 63MB	codegen passes [0]
  time: 0.000; rss: 63MB	codegen passes [0]
time: 0.002; rss: 63MB	LLVM passes
  time: 0.031; rss: 69MB	running linker
time: 0.031; rss: 69MB	linking
done
