commit 753ea76336be2def223335c63d7b20188651a8c6
Merge: 3543a0f 6a4bb35
Author: bors <bors@rust-lang.org>
Date:   Tue Oct 18 01:49:13 2016 -0700

    Auto merge of #37083 - nnethercote:uleb128, r=eddyb
    
    Inline read_{un,}signed_leb128 and opaque::Decoder functions.
    
    `read_unsigned_leb128` is hot within rustc because it's heavily used
    during the reading of crate metadata. This commit tweaks its signature
    (and that of `read_signed_leb128`, for consistency) so it can increment
    the buffer index directly instead of maintaining its own copy, the
    change in which is then used by the caller to advance the index.
    
    This reduces the instruction count (as measured by Cachegrind) for some
    benchmarks a bit, e.g. hyper-0.5.0 by 0.7%.
rustc: ./syntex-0.42.2
cargo rustc -p syntex_syntax -- -Ztime-passes -Zinput-stats
   Compiling syntex_syntax v0.42.0
time: 0.109; rss: 75MB	parsing
Lines of code:             33687
Pre-expansion node count:  224033
time: 0.000; rss: 75MB	recursion limit
time: 0.000; rss: 75MB	crate injection
time: 0.000; rss: 75MB	plugin loading
time: 0.000; rss: 75MB	plugin registration
time: 0.274; rss: 147MB	expansion
time: 0.000; rss: 147MB	maybe building test harness
time: 0.006; rss: 147MB	maybe creating a macro crate
Post-expansion node count: 641571
time: 0.000; rss: 147MB	checking for inline asm in case the target doesn't support it
time: 0.013; rss: 147MB	complete gated feature checking
time: 0.023; rss: 147MB	early lint checks
time: 0.007; rss: 147MB	AST validation
time: 0.084; rss: 162MB	name resolution
time: 0.050; rss: 202MB	lowering ast -> hir
time: 0.010; rss: 212MB	indexing hir
time: 0.007; rss: 212MB	attribute checking
time: 0.006; rss: 164MB	language item collection
time: 0.012; rss: 164MB	lifetime resolution
time: 0.000; rss: 164MB	looking for entry point
time: 0.000; rss: 164MB	looking for plugin registrar
time: 0.045; rss: 174MB	region resolution
time: 0.006; rss: 174MB	loop checking
time: 0.006; rss: 174MB	static item recursion checking
time: 0.262; rss: 176MB	compute_incremental_hashes_map
time: 0.000; rss: 176MB	load_dep_graph
time: 0.041; rss: 181MB	type collecting
time: 0.001; rss: 181MB	variance inference
time: 0.034; rss: 183MB	coherence checking
time: 0.104; rss: 187MB	wf checking
time: 0.192; rss: 193MB	item-types checking
time: 3.899; rss: 244MB	item-bodies checking
time: 0.000; rss: 244MB	drop-impl checking
time: 0.255; rss: 248MB	const checking
time: 0.054; rss: 248MB	privacy checking
time: 0.007; rss: 248MB	stability index
time: 0.022; rss: 248MB	intrinsic checking
time: 0.018; rss: 248MB	effect checking
time: 0.057; rss: 248MB	match checking
time: 0.053; rss: 239MB	liveness checking
time: 0.217; rss: 239MB	rvalue checking
time: 0.405; rss: 429MB	MIR dump
  time: 0.059; rss: 430MB	SimplifyCfg
  time: 0.080; rss: 431MB	QualifyAndPromoteConstants
  time: 0.110; rss: 431MB	TypeckMir
  time: 0.004; rss: 431MB	SimplifyBranches
  time: 0.032; rss: 431MB	SimplifyCfg
time: 0.286; rss: 431MB	MIR passes
time: 0.564; rss: 431MB	borrow checking
time: 0.022; rss: 431MB	reachability checking
time: 0.044; rss: 431MB	death checking
time: 0.042; rss: 433MB	stability checking
time: 0.000; rss: 433MB	unused lib feature checking
time: 0.212; rss: 433MB	lint checking
time: 0.000; rss: 433MB	resolving dependency formats
  time: 0.003; rss: 433MB	NoLandingPads
  time: 0.027; rss: 433MB	SimplifyCfg
  time: 0.070; rss: 441MB	EraseRegions
  time: 0.011; rss: 441MB	AddCallGuards
  time: 0.291; rss: 460MB	ElaborateDrops
  time: 0.003; rss: 460MB	NoLandingPads
  time: 0.056; rss: 460MB	SimplifyCfg
  time: 0.030; rss: 460MB	InstCombine
  time: 0.011; rss: 460MB	Deaggregator
  time: 0.003; rss: 460MB	CopyPropagation
  time: 0.009; rss: 460MB	AddCallGuards
  time: 0.003; rss: 460MB	PreTrans
time: 0.516; rss: 460MB	Prepare MIR codegen passes
  time: 0.262; rss: 469MB	write metadata
  time: 0.429; rss: 478MB	translation item collection
  time: 0.056; rss: 485MB	codegen unit partitioning
  time: 0.047; rss: 730MB	internalize symbols
time: 5.035; rss: 609MB	translation
time: 0.000; rss: 609MB	assert dep graph
time: 0.000; rss: 609MB	serialize dep graph
  time: 0.507; rss: 411MB	llvm function passes [0]
  time: 0.252; rss: 418MB	llvm module passes [0]
  time: 10.019; rss: 419MB	codegen passes [0]
  time: 0.001; rss: 421MB	codegen passes [0]
time: 11.523; rss: 421MB	LLVM passes
time: 0.000; rss: 421MB	serialize work products
time: 0.665; rss: 107MB	linking
done
