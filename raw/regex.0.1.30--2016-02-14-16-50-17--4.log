commit a888333ea6acad7e289fa3f0f9e6c1058aa2a011
Merge: 9b367d9 e3b414d
Author: bors <bors@rust-lang.org>
Date:   Sun Feb 14 21:24:45 2016 +0000

    Auto merge of #31460 - alexcrichton:supafast-rustc, r=brson
    
    Looking at some profiles of rustc recently, these seemed like two pretty easy wins we could get in terms of performance on the table.
rustc: ./regex.0.1.30
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling regex v0.1.30 (file:///root/benchmarks/regex.0.1.30)
time: 0.081; rss: 48MB	parsing
Lines of code:             8558
Pre-expansion node count:  58217
time: 0.011; rss: 48MB	configuration 1
time: 0.000; rss: 48MB	recursion limit
time: 0.001; rss: 48MB	gated macro checking
time: 0.000; rss: 48MB	crate injection
time: 0.003; rss: 52MB	macro loading
time: 0.000; rss: 52MB	plugin loading
time: 0.000; rss: 52MB	plugin registration
time: 0.060; rss: 54MB	expansion
time: 0.001; rss: 54MB	complete gated feature checking 1
time: 0.014; rss: 54MB	configuration 2
time: 0.000; rss: 54MB	gated configuration checking
time: 0.006; rss: 54MB	maybe building test harness
time: 0.006; rss: 55MB	prelude injection
time: 0.001; rss: 55MB	checking that all macro invocations are gone
time: 0.000; rss: 55MB	checking for inline asm in case the target doesn't support it
time: 0.001; rss: 55MB	complete gated feature checking 2
time: 0.001; rss: 55MB	const fn bodies and arguments
Post-expansion node count: 68727
time: 0.007; rss: 55MB	assigning node ids
time: 0.008; rss: 62MB	lowering ast -> hir
time: 0.003; rss: 64MB	indexing hir
time: 0.000; rss: 64MB	attribute checking
time: 0.007; rss: 64MB	early lint checks
time: 0.001; rss: 56MB	external crate/lib resolution
time: 0.001; rss: 56MB	language item collection
time: 0.008; rss: 63MB	resolution
time: 0.001; rss: 63MB	lifetime resolution
time: 0.000; rss: 63MB	looking for entry point
time: 0.000; rss: 63MB	looking for plugin registrar
time: 0.009; rss: 66MB	region resolution
time: 0.001; rss: 66MB	loop checking
time: 0.001; rss: 66MB	static item recursion checking
time: 0.003; rss: 69MB	type collecting
time: 0.000; rss: 69MB	variance inference
time: 0.022; rss: 84MB	coherence checking
time: 0.010; rss: 85MB	wf checking
time: 0.085; rss: 91MB	item-types checking
time: 0.207; rss: 102MB	item-bodies checking
time: 0.000; rss: 102MB	drop-impl checking
time: 0.030; rss: 103MB	const checking
time: 0.005; rss: 103MB	privacy checking
time: 0.001; rss: 103MB	stability index
time: 0.001; rss: 103MB	intrinsic checking
time: 0.001; rss: 103MB	effect checking
time: 0.003; rss: 103MB	match checking
time: 0.016; rss: 104MB	MIR dump
time: 0.000; rss: 104MB	MIR passes
time: 0.002; rss: 104MB	liveness checking
time: 0.020; rss: 104MB	borrow checking
time: 0.006; rss: 104MB	rvalue checking
time: 0.000; rss: 104MB	reachability checking
time: 0.002; rss: 104MB	death checking
time: 0.002; rss: 104MB	stability checking
time: 0.000; rss: 104MB	unused lib feature checking
time: 0.029; rss: 104MB	lint checking
time: 0.000; rss: 104MB	resolving dependency formats
time: 0.002; rss: 104MB	erasing regions from MIR
  time: 0.065; rss: 119MB	translation item collection
  time: 0.142; rss: 162MB	write metadata
time: 0.682; rss: 162MB	translation
  time: 0.037; rss: 114MB	llvm function passes [0]
  time: 0.018; rss: 115MB	llvm module passes [0]
  time: 0.624; rss: 120MB	codegen passes [0]
  time: 0.001; rss: 99MB	codegen passes [0]
time: 0.758; rss: 98MB	LLVM passes
time: 0.067; rss: 97MB	linking
done
