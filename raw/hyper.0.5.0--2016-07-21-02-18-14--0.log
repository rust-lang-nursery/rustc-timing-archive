commit e7c822cee29b5b939340c2cb0dfefa9a49742d77
Merge: 936bfea ee6011f
Author: bors <bors@rust-lang.org>
Date:   Wed Jul 20 19:02:00 2016 -0700

    Auto merge of #34873 - alexcrichton:down-with-compiler-rt-for-good, r=brson
    
    mk: Stop using cmake for compiler-rt
    
    The compiler-rt build system has been a never ending cause of pain for Rust
    unfortunately:
    
    * The build system is very difficult to invoke and configure to only build
      compiler-rt, especially across platforms.
    * The standard build system doesn't actually do what we want, not working for
      some of our platforms and requiring a significant number of patches on our end
      which are difficult to apply when updating compiler-rt.
    * Compiling compiler-rt requires LLVM to be compiled, which... is a big
      dependency! This also means that over time compiler-rt is not guaranteed to
      build against older versions of LLVM (or newer versions), and we often want to
      work with multiple versions of LLVM simultaneously.
    
    The makefiles and rustbuild already know how to compile C code, the code here is
    far from the *only* C code we're compiling. This patch jettisons all logic to
    work with compiler-rt's build system and just goes straight to the source. We
    just list all files manually (copied from compiler-rt's
    lib/builtins/CMakeLists.txt) and compile them into an archive.
    
    It's likely that this means we'll fail to pick up new files when we upgrade
    compiler-rt, but that seems like a much less significant cost to pay than what
    we're currently paying.
    
    cc #34400, first steps towards that
rustc: ./hyper.0.5.0
cargo rustc -- -Ztime-passes -Zinput-stats
    Updating registry `https://github.com/rust-lang/crates.io-index`
   Compiling lazy_static v0.1.16
   Compiling rustc-serialize v0.3.19
   Compiling matches v0.1.2
   Compiling bitflags v0.3.3
   Compiling libc v0.2.14
   Compiling winapi v0.2.8
   Compiling pkg-config v0.3.8
   Compiling log v0.3.6
   Compiling gcc v0.3.32
   Compiling unicase v0.1.0
   Compiling httparse v0.1.6
   Compiling winapi-build v0.1.1
   Compiling traitobject v0.0.1
   Compiling typeable v0.1.2
   Compiling libc v0.1.12
   Compiling mime v0.0.11
   Compiling kernel32-sys v0.2.2
   Compiling num_cpus v0.2.13
   Compiling rand v0.3.14
   Compiling time v0.1.35
   Compiling openssl-sys v0.6.7
   Compiling openssl v0.6.7
   Compiling uuid v0.1.18
   Compiling url v0.2.38
   Compiling cookie v0.1.21
   Compiling hyper v0.5.0 (file:///root/benchmarks/hyper.0.5.0)
time: 0.032; rss: 88MB	parsing
Lines of code:             9154
Pre-expansion node count:  44838
time: 0.005; rss: 92MB	configuration
time: 0.000; rss: 92MB	recursion limit
time: 0.000; rss: 92MB	crate injection
time: 0.000; rss: 92MB	plugin loading
time: 0.000; rss: 92MB	plugin registration
time: 0.123; rss: 131MB	expansion
time: 0.000; rss: 131MB	maybe building test harness
time: 0.008; rss: 131MB	assigning node ids
Post-expansion node count: 101581
time: 0.000; rss: 131MB	checking for inline asm in case the target doesn't support it
time: 0.002; rss: 131MB	complete gated feature checking
time: 0.003; rss: 133MB	collecting defs
time: 0.013; rss: 141MB	external crate/lib resolution
time: 0.006; rss: 141MB	early lint checks
time: 0.001; rss: 141MB	AST validation
time: 0.021; rss: 147MB	name resolution
time: 0.020; rss: 155MB	lowering ast -> hir
time: 0.003; rss: 157MB	indexing hir
time: 0.001; rss: 157MB	attribute checking
time: 0.001; rss: 150MB	language item collection
time: 0.002; rss: 150MB	lifetime resolution
time: 0.000; rss: 150MB	looking for entry point
time: 0.000; rss: 150MB	looking for plugin registrar
time: 0.011; rss: 153MB	region resolution
time: 0.001; rss: 153MB	loop checking
time: 0.001; rss: 153MB	static item recursion checking
time: 0.000; rss: 153MB	load_dep_graph
time: 0.031; rss: 155MB	type collecting
time: 0.000; rss: 155MB	variance inference
time: 0.047; rss: 163MB	coherence checking
time: 0.101; rss: 164MB	wf checking
time: 0.037; rss: 165MB	item-types checking
time: 0.556; rss: 174MB	item-bodies checking
time: 0.000; rss: 174MB	drop-impl checking
time: 0.049; rss: 177MB	const checking
time: 0.008; rss: 177MB	privacy checking
time: 0.001; rss: 177MB	stability index
time: 0.006; rss: 177MB	intrinsic checking
time: 0.002; rss: 177MB	effect checking
time: 0.015; rss: 177MB	match checking
time: 0.005; rss: 177MB	liveness checking
time: 0.032; rss: 177MB	rvalue checking
time: 0.083; rss: 188MB	MIR dump
time: 0.046; rss: 188MB	MIR passes
time: 0.075; rss: 188MB	borrow checking
time: 0.003; rss: 188MB	reachability checking
time: 0.006; rss: 188MB	death checking
time: 0.006; rss: 189MB	stability checking
time: 0.000; rss: 189MB	unused lib feature checking
time: 0.050; rss: 189MB	lint checking
time: 0.000; rss: 189MB	resolving dependency formats
time: 0.097; rss: 191MB	Prepare MIR codegen passes
  time: 0.143; rss: 196MB	write metadata
  time: 0.196; rss: 202MB	translation item collection
  time: 0.021; rss: 204MB	codegen unit partitioning
time: 3.933; rss: 322MB	translation
time: 0.001; rss: 322MB	assert dep graph
time: 0.000; rss: 322MB	serialize dep graph
  time: 1.111; rss: 211MB	llvm function passes [0]
  time: 0.430; rss: 213MB	llvm module passes [0]
  time: 16.030; rss: 214MB	codegen passes [0]
  time: 0.002; rss: 214MB	codegen passes [0]
time: 18.680; rss: 214MB	LLVM passes
time: 0.154; rss: 164MB	linking
done
