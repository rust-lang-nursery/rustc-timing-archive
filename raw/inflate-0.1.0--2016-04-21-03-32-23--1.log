commit 6e036082091bc253debeb22606a661af211610ff
Merge: 95545e7 d1180af
Author: bors <bors@rust-lang.org>
Date:   Wed Apr 20 21:25:26 2016 -0700

    Auto merge of #33030 - nagisa:mir-unrequire-end-block, r=nikomatsakis
    
    MIR: Do not require END_BLOCK to always exist
    
    Basically, all this does, is removing restriction for END_BLOCK to exist past the first invocation of RemoveDeadBlocks pass. This way for functions whose CFG does not reach the `END_BLOCK` end up not containing the block.
    
    As far as the implementation goes, I’m not entirely satisfied with the `BasicBlock::end_block`. I had hoped to make `new` a `const fn` and then just have a `const END_BLOCK` private to mir::build, but it turns out that constant functions don’t yet support conditionals nor a way to assert.
rustc: ./inflate-0.1.0
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling inflate v0.1.0 (file:///root/benchmarks/inflate-0.1.0)
time: 0.004; rss: 46MB	parsing
Lines of code:             956
Pre-expansion node count:  4761
time: 0.001; rss: 50MB	configuration 1
time: 0.000; rss: 50MB	recursion limit
time: 0.000; rss: 50MB	gated macro checking
time: 0.000; rss: 50MB	crate injection
time: 0.003; rss: 53MB	macro loading
time: 0.000; rss: 53MB	plugin loading
time: 0.000; rss: 53MB	plugin registration
time: 0.083; rss: 60MB	expansion
time: 0.001; rss: 60MB	complete gated feature checking 1
time: 0.009; rss: 60MB	configuration 2
time: 0.000; rss: 60MB	gated configuration checking
time: 0.004; rss: 60MB	maybe building test harness
time: 0.004; rss: 60MB	prelude injection
time: 0.000; rss: 60MB	checking that all macro invocations are gone
time: 0.000; rss: 60MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 60MB	complete gated feature checking 2
time: 0.000; rss: 60MB	const fn bodies and arguments
Post-expansion node count: 54798
time: 0.004; rss: 60MB	assigning node ids
time: 0.009; rss: 66MB	lowering ast -> hir
time: 0.002; rss: 66MB	indexing hir
time: 0.001; rss: 66MB	attribute checking
time: 0.003; rss: 66MB	early lint checks
time: 0.001; rss: 64MB	external crate/lib resolution
time: 0.001; rss: 64MB	language item collection
time: 0.009; rss: 74MB	resolution
time: 0.001; rss: 74MB	lifetime resolution
time: 0.000; rss: 74MB	looking for entry point
time: 0.000; rss: 74MB	looking for plugin registrar
time: 0.003; rss: 74MB	region resolution
time: 0.000; rss: 74MB	loop checking
time: 0.001; rss: 74MB	static item recursion checking
time: 0.000; rss: 74MB	load_dep_graph
time: 0.001; rss: 77MB	type collecting
time: 0.000; rss: 77MB	variance inference
time: 0.010; rss: 89MB	coherence checking
time: 0.002; rss: 89MB	wf checking
time: 0.002; rss: 89MB	item-types checking
time: 2.744; rss: 113MB	item-bodies checking
time: 0.000; rss: 113MB	drop-impl checking
time: 0.013; rss: 114MB	const checking
time: 0.001; rss: 114MB	privacy checking
time: 0.000; rss: 114MB	stability index
time: 0.000; rss: 114MB	intrinsic checking
time: 0.001; rss: 114MB	effect checking
time: 0.003; rss: 114MB	match checking
time: 0.065; rss: 114MB	liveness checking
time: 0.009; rss: 114MB	rvalue checking
time: 0.034; rss: 129MB	MIR dump
time: 0.013; rss: 126MB	MIR passes
time: 0.227; rss: 128MB	borrow checking
time: 0.000; rss: 128MB	reachability checking
time: 0.003; rss: 128MB	death checking
time: 0.002; rss: 128MB	stability checking
time: 0.000; rss: 128MB	unused lib feature checking
time: 0.023; rss: 128MB	lint checking
time: 0.000; rss: 128MB	resolving dependency formats
time: 0.005; rss: 126MB	Prepare MIR codegen passes
  time: 0.011; rss: 131MB	translation item collection
  time: 0.000; rss: 131MB	codegen unit partitioning
  time: 0.003; rss: 151MB	write metadata
time: 0.364; rss: 143MB	translation
time: 0.000; rss: 143MB	assert dep graph
time: 0.000; rss: 143MB	serialize dep graph
  time: 0.026; rss: 105MB	llvm function passes [0]
  time: 0.004; rss: 105MB	llvm module passes [0]
  time: 0.497; rss: 110MB	codegen passes [0]
  time: 0.000; rss: 99MB	codegen passes [0]
time: 0.568; rss: 99MB	LLVM passes
time: 0.033; rss: 99MB	linking
done
