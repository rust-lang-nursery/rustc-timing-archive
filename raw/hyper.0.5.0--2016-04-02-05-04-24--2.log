commit f2285bdaf57e9cb56120902ae4b3b0a26d761f31
Merge: 211c35a e1d2eda
Author: bors <bors@rust-lang.org>
Date:   Sat Apr 2 01:47:59 2016 -0700

    Auto merge of #32549 - respeccing:rust_backtrace_disabled, r=alexcrichton
    
    allow RUST_BACKTRACE=0 to act as if unset
    
    **UPDATE:** `RUST_BACKTRACE=0` to act as if the env. var is unset! (now `0` is what `disabled` was for, below)
    
    When RUST_BACKTRACE is set to "disabled" then this acts as if the env. var is unset. So, either make sure `RUST_BACKTRACE` is not set OR set it to `disabled` to achieve the same effect.
    
    Sample usage:
    
    ```bash
    $ rustc -o /tmp/a.out -- <(echo 'fn main(){ panic!() }') && RUST_BACKTRACE=disabled /tmp/a.out
    !! executing '/home/zazdxscf/build/1nonpkgs/rust/rust//x86_64-unknown-linux-gnu/stage2/bin//rustc' with args: '-o /tmp/a.out -- /dev/fd/63'
    thread '<main>' panicked at 'explicit panic', /dev/fd/63:1
    note: Run with `RUST_BACKTRACE=1` for a backtrace.
    
    $ rustc -o /tmp/a.out -- <(echo 'fn main(){ panic!() }') && RUST_BACKTRACE=1 /tmp/a.out
    !! executing '/home/zazdxscf/build/1nonpkgs/rust/rust//x86_64-unknown-linux-gnu/stage2/bin//rustc' with args: '-o /tmp/a.out -- /dev/fd/63'
    thread '<main>' panicked at 'explicit panic', /dev/fd/63:1
    stack backtrace:
       1:     0x55709e8148c0 - sys::backtrace::tracing::imp::write::h140f24a0cfc189b98Ru
       2:     0x55709e816a5b - panicking::default_hook::_$u7b$$u7b$closure$u7d$$u7d$::closure.45165
       3:     0x55709e8166e8 - panicking::default_hook::hed419823688cb82aXoA
       4:     0x55709e810fff - sys_common::unwind::begin_unwind_inner::hbb9642f6e212d56fmHt
       5:     0x55709e810513 - sys_common::unwind::begin_unwind::h16232867470678019594
       6:     0x55709e810489 - main::hb524f9576270962feaa
       7:     0x55709e816314 - sys_common::unwind::try::try_fn::h1274188004693518534
       8:     0x55709e813dfb - __rust_try
       9:     0x55709e815dab - rt::lang_start::h712b1cd650781872ahA
      10:     0x55709e810679 - main
      11:     0x7efd1026859f - __libc_start_main
      12:     0x55709e810348 - _start
      13:                0x0 - <unknown>
    ```
    
    Some programs(eg. [vim's syntactic](https://github.com/scrooloose/syntastic) used by [rust.vim](https://github.com/rust-lang/rust.vim)) cannot unset the env. var RUST_BACKTRACE if it's already set(eg. in .bashrc) but [they can set it to some value](https://github.com/respeccing/gentooskyline/blob/cb5533e1598f871d3fdf7c3d8248ce767b5b9360/system/Z575/OSes/gentoo/on_baremetal/filesystem_now/gentoo/home/zazdxscf/build/1nonpkgs/rust.vim/upd#L17), and I needed to ensure the env. var is unset in order to avoid this issue: https://github.com/rust-lang/rust/issues/29293
    
    **EDIT:** Sample usage 2:
    
    ```bash
    $ export RUST_BACKTRACE=1
    
    $ rustc -o /tmp/a.out -- <(echo 'fn main(){ panic!() }') && /tmp/a.out
    !! executing '/home/zazdxscf/build/1nonpkgs/rust/rust//x86_64-unknown-linux-gnu/stage2/bin//rustc' with args: '-o /tmp/a.out -- /dev/fd/63'
    thread '<main>' panicked at 'explicit panic', /dev/fd/63:1
    stack backtrace:
       1:     0x55c2696738c0 - sys::backtrace::tracing::imp::write::h140f24a0cfc189b98Ru
       2:     0x55c269675a5b - panicking::default_hook::_$u7b$$u7b$closure$u7d$$u7d$::closure.45165
       3:     0x55c2696756e8 - panicking::default_hook::hed419823688cb82aXoA
       4:     0x55c26966ffff - sys_common::unwind::begin_unwind_inner::hbb9642f6e212d56fmHt
       5:     0x55c26966f513 - sys_common::unwind::begin_unwind::h16023941661074805588
       6:     0x55c26966f489 - main::hb524f9576270962feaa
       7:     0x55c269675314 - sys_common::unwind::try::try_fn::h1274188004693518534
       8:     0x55c269672dfb - __rust_try
       9:     0x55c269674dab - rt::lang_start::h712b1cd650781872ahA
      10:     0x55c26966f679 - main
      11:     0x7f593d58459f - __libc_start_main
      12:     0x55c26966f348 - _start
      13:                0x0 - <unknown>
    
    $ rustc -o /tmp/a.out -- <(echo 'fn main(){ panic!() }') && RUST_BACKTRACE=disabled /tmp/a.out
    !! executing '/home/zazdxscf/build/1nonpkgs/rust/rust//x86_64-unknown-linux-gnu/stage2/bin//rustc' with args: '-o /tmp/a.out -- /dev/fd/63'
    thread '<main>' panicked at 'explicit panic', /dev/fd/63:1
    note: Run with `RUST_BACKTRACE=1` for a backtrace.
    
    ```
rustc: ./hyper.0.5.0
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling hyper v0.5.0 (file:///root/benchmarks/hyper.0.5.0)
time: 0.031; rss: 46MB	parsing
Lines of code:             9154
Pre-expansion node count:  45594
time: 0.009; rss: 46MB	configuration 1
time: 0.000; rss: 46MB	recursion limit
time: 0.000; rss: 46MB	gated macro checking
time: 0.000; rss: 46MB	crate injection
time: 0.004; rss: 51MB	macro loading
time: 0.000; rss: 51MB	plugin loading
time: 0.000; rss: 51MB	plugin registration
time: 0.191; rss: 60MB	expansion
time: 0.005; rss: 60MB	complete gated feature checking 1
time: 0.033; rss: 60MB	configuration 2
time: 0.000; rss: 60MB	gated configuration checking
time: 0.013; rss: 60MB	maybe building test harness
time: 0.011; rss: 60MB	prelude injection
time: 0.001; rss: 60MB	checking that all macro invocations are gone
time: 0.000; rss: 60MB	checking for inline asm in case the target doesn't support it
time: 0.002; rss: 60MB	complete gated feature checking 2
time: 0.001; rss: 60MB	const fn bodies and arguments
Post-expansion node count: 107125
time: 0.010; rss: 60MB	assigning node ids
time: 0.011; rss: 66MB	lowering ast -> hir
time: 0.004; rss: 69MB	indexing hir
time: 0.001; rss: 69MB	attribute checking
time: 0.006; rss: 69MB	early lint checks
time: 0.004; rss: 66MB	external crate/lib resolution
time: 0.001; rss: 66MB	language item collection
time: 0.024; rss: 84MB	resolution
time: 0.002; rss: 84MB	lifetime resolution
time: 0.000; rss: 84MB	looking for entry point
time: 0.000; rss: 84MB	looking for plugin registrar
time: 0.006; rss: 86MB	region resolution
time: 0.001; rss: 86MB	loop checking
time: 0.001; rss: 86MB	static item recursion checking
time: 0.019; rss: 95MB	type collecting
time: 0.000; rss: 95MB	variance inference
time: 0.539; rss: 113MB	coherence checking
time: 0.080; rss: 113MB	wf checking
time: 0.030; rss: 116MB	item-types checking
time: 0.508; rss: 135MB	item-bodies checking
time: 0.000; rss: 135MB	drop-impl checking
time: 0.038; rss: 137MB	const checking
time: 0.009; rss: 137MB	privacy checking
time: 0.001; rss: 137MB	stability index
time: 0.004; rss: 137MB	intrinsic checking
time: 0.002; rss: 137MB	effect checking
time: 0.012; rss: 137MB	match checking
time: 0.005; rss: 137MB	liveness checking
time: 0.033; rss: 137MB	rvalue checking
time: 0.047; rss: 145MB	MIR dump
time: 0.028; rss: 145MB	MIR passes
time: 0.065; rss: 145MB	borrow checking
time: 0.003; rss: 145MB	reachability checking
time: 0.006; rss: 145MB	death checking
time: 0.006; rss: 145MB	stability checking
time: 0.000; rss: 145MB	unused lib feature checking
time: 0.047; rss: 145MB	lint checking
time: 0.000; rss: 145MB	resolving dependency formats
  time: 0.185; rss: 158MB	translation item collection
  time: 0.137; rss: 288MB	write metadata
time: 1.454; rss: 288MB	translation
  time: 0.096; rss: 168MB	llvm function passes [0]
  time: 0.047; rss: 170MB	llvm module passes [0]
  time: 1.631; rss: 174MB	codegen passes [0]
  time: 0.001; rss: 122MB	codegen passes [0]
time: 1.972; rss: 122MB	LLVM passes
time: 0.169; rss: 120MB	linking
done
