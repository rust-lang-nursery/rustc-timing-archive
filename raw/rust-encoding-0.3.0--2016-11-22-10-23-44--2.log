commit 0f7c75b74fb7adc436eedc66c0032879293eeac6
Merge: 1c11ea3 6c2a456
Author: bors <bors@rust-lang.org>
Date:   Tue Nov 22 03:29:46 2016 -0600

    Auto merge of #37834 - bluss:peek-none, r=BurntSushi
    
    Make Peekable remember peeking a None
    
    Peekable should remember if a None has been seen in the `.peek()` method.
    It ensures that `.peek(); .peek();` or `.peek(); .next();` only advances the
    underlying iterator at most once. This does not by itself make the iterator
    fused.
    
    Thanks to @s3bk for the code in `fn peek()` itself.
    
    Fixes #37784
rustc: ./rust-encoding-0.3.0
cargo rustc  -- -Ztime-passes -Zinput-stats
   Compiling encoding v0.3.0-dev (file:///root/benchmarks/rust-encoding-0.3.0)
time: 0.017; rss: 45MB	parsing
Lines of code:             5757
Pre-expansion node count:  26523
time: 0.000; rss: 45MB	recursion limit
time: 0.000; rss: 45MB	crate injection
time: 0.000; rss: 45MB	plugin loading
time: 0.000; rss: 45MB	plugin registration
time: 0.032; rss: 75MB	expansion
time: 0.000; rss: 75MB	maybe building test harness
time: 0.000; rss: 75MB	maybe creating a macro crate
Post-expansion node count: 37888
time: 0.000; rss: 75MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 75MB	complete gated feature checking
time: 0.001; rss: 75MB	early lint checks
time: 0.000; rss: 75MB	AST validation
time: 0.004; rss: 75MB	name resolution
time: 0.003; rss: 77MB	lowering ast -> hir
time: 0.001; rss: 78MB	indexing hir
time: 0.000; rss: 78MB	attribute checking
time: 0.000; rss: 77MB	language item collection
time: 0.000; rss: 77MB	lifetime resolution
time: 0.000; rss: 77MB	looking for entry point
time: 0.000; rss: 77MB	looking for plugin registrar
time: 0.002; rss: 79MB	region resolution
time: 0.000; rss: 79MB	loop checking
time: 0.000; rss: 79MB	static item recursion checking
time: 0.014; rss: 79MB	compute_incremental_hashes_map
time: 0.000; rss: 79MB	load_dep_graph
time: 0.008; rss: 81MB	type collecting
time: 0.000; rss: 81MB	variance inference
time: 0.000; rss: 81MB	impl wf inference
time: 0.008; rss: 81MB	coherence checking
time: 0.010; rss: 81MB	wf checking
time: 0.010; rss: 81MB	item-types checking
time: 0.115; rss: 86MB	item-bodies checking
time: 0.000; rss: 86MB	drop-impl checking
time: 0.008; rss: 86MB	const checking
time: 0.001; rss: 86MB	privacy checking
time: 0.000; rss: 86MB	stability index
time: 0.001; rss: 86MB	intrinsic checking
time: 0.000; rss: 86MB	effect checking
time: 0.004; rss: 86MB	match checking
time: 0.001; rss: 86MB	liveness checking
time: 0.005; rss: 86MB	rvalue checking
time: 0.017; rss: 94MB	MIR dump
  time: 0.002; rss: 94MB	SimplifyCfg
  time: 0.003; rss: 94MB	QualifyAndPromoteConstants
  time: 0.004; rss: 94MB	TypeckMir
  time: 0.000; rss: 94MB	SimplifyBranches
  time: 0.001; rss: 94MB	SimplifyCfg
time: 0.011; rss: 94MB	MIR cleanup and validation
time: 0.017; rss: 94MB	borrow checking
time: 0.000; rss: 94MB	reachability checking
time: 0.001; rss: 94MB	death checking
time: 0.001; rss: 94MB	stability checking
time: 0.000; rss: 94MB	unused lib feature checking
time: 0.013; rss: 94MB	lint checking
time: 0.000; rss: 94MB	resolving dependency formats
  time: 0.000; rss: 94MB	NoLandingPads
  time: 0.001; rss: 94MB	SimplifyCfg
  time: 0.002; rss: 94MB	EraseRegions
  time: 0.000; rss: 94MB	AddCallGuards
  time: 0.022; rss: 96MB	ElaborateDrops
  time: 0.000; rss: 96MB	NoLandingPads
  time: 0.002; rss: 96MB	SimplifyCfg
  time: 0.001; rss: 96MB	InstCombine
  time: 0.001; rss: 96MB	Deaggregator
  time: 0.000; rss: 96MB	CopyPropagation
  time: 0.001; rss: 96MB	SimplifyLocals
  time: 0.000; rss: 96MB	AddCallGuards
  time: 0.000; rss: 96MB	PreTrans
time: 0.032; rss: 96MB	MIR optimisations
  time: 0.004; rss: 96MB	write metadata
  time: 0.136; rss: 180MB	translation item collection
  time: 0.002; rss: 180MB	codegen unit partitioning
  time: 0.002; rss: 203MB	internalize symbols
time: 0.388; rss: 203MB	translation
time: 0.000; rss: 203MB	assert dep graph
time: 0.000; rss: 203MB	serialize dep graph
  time: 0.024; rss: 117MB	llvm function passes [0]
  time: 0.055; rss: 122MB	llvm module passes [0]
  time: 0.627; rss: 127MB	codegen passes [0]
  time: 0.000; rss: 127MB	codegen passes [0]
time: 0.760; rss: 127MB	LLVM passes
time: 0.000; rss: 127MB	serialize work products
time: 0.039; rss: 97MB	linking
done
