commit 4b71f8d1417423d933dfd4f74d5d4d167b85f77e
Merge: 7c27cce bc6daea
Author: bors <bors@rust-lang.org>
Date:   Tue Apr 12 22:21:23 2016 -0700

    Auto merge of #32814 - jseyfried:improve_duplicate_glob_detection, r=nikomatsakis
    
    resolve: Improve duplicate glob detection
    
    This fixes a bug introduced in #31726 in which we erroneously allow multiple imports of the same item under some circumstances.
    
    More specifically, we erroneously allow a module that is in a cycle of glob re-exports to have other re-exports (besides the glob from the cycle).
    For example,
    ```rust
    pub fn f() {}
    mod foo {
        pub use f; // (1) This defines `foo::f`.
        pub use bar::*; // (3) This also defines `foo::f`, which should be a duplicate error but is currently allowed.
    }
    mod bar {
        pub use foo::*; // (2) This defines `bar::f`.
    }
    ```
    
    A module in a glob re-export cycle can still have `pub` items after this PR. For example,
    ```rust
    mod foo {
        pub fn f() {}; // (1) This defines `foo::f`.
        pub use bar::*; // (3) This is not a duplicate error since items shadow glob-imported re-exports (cf #31337).
    }
    mod bar {
        pub use foo::*; // (2) This defines `bar::f`.
    }
    ```
    r? @nikomatsakis
rustc: ./regex.0.1.30
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling regex v0.1.30 (file:///root/benchmarks/regex.0.1.30)
time: 0.091; rss: 45MB	parsing
Lines of code:             8558
Pre-expansion node count:  58217
time: 0.011; rss: 45MB	configuration 1
time: 0.000; rss: 45MB	recursion limit
time: 0.001; rss: 45MB	gated macro checking
time: 0.000; rss: 45MB	crate injection
time: 0.003; rss: 49MB	macro loading
time: 0.000; rss: 49MB	plugin loading
time: 0.000; rss: 49MB	plugin registration
time: 0.058; rss: 53MB	expansion
time: 0.001; rss: 53MB	complete gated feature checking 1
time: 0.013; rss: 53MB	configuration 2
time: 0.000; rss: 53MB	gated configuration checking
time: 0.006; rss: 53MB	maybe building test harness
time: 0.006; rss: 53MB	prelude injection
time: 0.001; rss: 53MB	checking that all macro invocations are gone
time: 0.000; rss: 53MB	checking for inline asm in case the target doesn't support it
time: 0.001; rss: 53MB	complete gated feature checking 2
time: 0.001; rss: 53MB	const fn bodies and arguments
Post-expansion node count: 68485
time: 0.006; rss: 53MB	assigning node ids
time: 0.012; rss: 62MB	lowering ast -> hir
time: 0.005; rss: 64MB	indexing hir
time: 0.001; rss: 64MB	attribute checking
time: 0.007; rss: 64MB	early lint checks
time: 0.001; rss: 56MB	external crate/lib resolution
time: 0.001; rss: 56MB	language item collection
time: 0.010; rss: 67MB	resolution
time: 0.001; rss: 67MB	lifetime resolution
time: 0.000; rss: 67MB	looking for entry point
time: 0.000; rss: 67MB	looking for plugin registrar
time: 0.009; rss: 70MB	region resolution
time: 0.001; rss: 70MB	loop checking
time: 0.001; rss: 70MB	static item recursion checking
time: 0.000; rss: 70MB	load_dep_graph
time: 0.007; rss: 80MB	type collecting
time: 0.000; rss: 80MB	variance inference
time: 0.024; rss: 91MB	coherence checking
time: 0.010; rss: 91MB	wf checking
time: 0.256; rss: 95MB	item-types checking
time: 0.205; rss: 106MB	item-bodies checking
time: 0.000; rss: 106MB	drop-impl checking
time: 0.027; rss: 107MB	const checking
time: 0.004; rss: 107MB	privacy checking
time: 0.001; rss: 107MB	stability index
time: 0.001; rss: 107MB	intrinsic checking
time: 0.001; rss: 107MB	effect checking
time: 0.003; rss: 107MB	match checking
time: 0.002; rss: 107MB	liveness checking
time: 0.007; rss: 107MB	rvalue checking
time: 0.023; rss: 110MB	MIR dump
time: 0.007; rss: 110MB	MIR passes
time: 0.020; rss: 110MB	borrow checking
time: 0.000; rss: 110MB	reachability checking
time: 0.003; rss: 110MB	death checking
time: 0.003; rss: 110MB	stability checking
time: 0.000; rss: 110MB	unused lib feature checking
time: 0.029; rss: 110MB	lint checking
time: 0.000; rss: 110MB	resolving dependency formats
time: 0.004; rss: 111MB	Prepare MIR codegen passes
  time: 0.063; rss: 126MB	translation item collection
  time: 0.141; rss: 177MB	write metadata
time: 0.724; rss: 177MB	translation
time: 0.000; rss: 177MB	assert dep graph
time: 0.000; rss: 177MB	serialize dep graph
  time: 0.036; rss: 116MB	llvm function passes [0]
  time: 0.017; rss: 117MB	llvm module passes [0]
  time: 0.608; rss: 122MB	codegen passes [0]
  time: 0.001; rss: 102MB	codegen passes [0]
time: 0.736; rss: 100MB	LLVM passes
time: 0.067; rss: 99MB	linking
done
