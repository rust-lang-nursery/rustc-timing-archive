commit 0ed951993fb5721a303ca5fa743543dd9f3f6b10
Merge: bd6a54d 7cd8a49
Author: bors <bors@rust-lang.org>
Date:   Mon Nov 14 18:12:26 2016 -0800

    Auto merge of #37775 - alexcrichton:try-fix-dox, r=brson
    
    rustbuild: Tweak default rule inclusion
    
    If a rule is flagged with `default(true)` then the pseudo-rule `default:foo`
    will include that. If a rule is also flagged with `.host(true)`, however, then
    the rule shouldn't be included for targets that aren't in the host array. This
    adds a filter to ensure we don't pull in host rules for targets by accident.
rustc: ./inflate-0.1.0
cargo rustc  -- -Ztime-passes -Zinput-stats
   Compiling inflate v0.1.0 (file:///root/benchmarks/inflate-0.1.0)
time: 0.006; rss: 36MB	parsing
Lines of code:             956
Pre-expansion node count:  4736
time: 0.000; rss: 36MB	recursion limit
time: 0.000; rss: 36MB	crate injection
time: 0.000; rss: 36MB	plugin loading
time: 0.000; rss: 36MB	plugin registration
time: 0.072; rss: 65MB	expansion
time: 0.000; rss: 65MB	maybe building test harness
time: 0.000; rss: 65MB	maybe creating a macro crate
Post-expansion node count: 55748
time: 0.000; rss: 65MB	checking for inline asm in case the target doesn't support it
time: 0.001; rss: 65MB	complete gated feature checking
time: 0.002; rss: 65MB	early lint checks
time: 0.000; rss: 65MB	AST validation
time: 0.011; rss: 67MB	name resolution
time: 0.007; rss: 70MB	lowering ast -> hir
time: 0.001; rss: 70MB	indexing hir
time: 0.000; rss: 70MB	attribute checking
time: 0.000; rss: 67MB	language item collection
time: 0.001; rss: 67MB	lifetime resolution
time: 0.000; rss: 67MB	looking for entry point
time: 0.000; rss: 67MB	looking for plugin registrar
time: 0.004; rss: 68MB	region resolution
time: 0.000; rss: 68MB	loop checking
time: 0.000; rss: 68MB	static item recursion checking
time: 0.019; rss: 68MB	compute_incremental_hashes_map
time: 0.000; rss: 68MB	load_dep_graph
time: 0.002; rss: 70MB	type collecting
time: 0.000; rss: 70MB	variance inference
time: 0.009; rss: 71MB	coherence checking
time: 0.001; rss: 71MB	wf checking
time: 0.001; rss: 71MB	item-types checking
time: 1.675; rss: 80MB	item-bodies checking
time: 0.000; rss: 80MB	drop-impl checking
time: 0.014; rss: 80MB	const checking
time: 0.001; rss: 80MB	privacy checking
time: 0.000; rss: 80MB	stability index
time: 0.000; rss: 80MB	intrinsic checking
time: 0.000; rss: 80MB	effect checking
time: 0.002; rss: 80MB	match checking
time: 0.294; rss: 79MB	liveness checking
time: 0.011; rss: 79MB	rvalue checking
time: 0.038; rss: 99MB	MIR dump
  time: 0.007; rss: 99MB	SimplifyCfg
  time: 0.005; rss: 99MB	QualifyAndPromoteConstants
  time: 0.006; rss: 99MB	TypeckMir
  time: 0.000; rss: 99MB	SimplifyBranches
  time: 0.002; rss: 99MB	SimplifyCfg
time: 0.020; rss: 99MB	MIR cleanup and validation
time: 0.202; rss: 101MB	borrow checking
time: 0.000; rss: 101MB	reachability checking
time: 0.003; rss: 101MB	death checking
time: 0.002; rss: 101MB	stability checking
time: 0.000; rss: 101MB	unused lib feature checking
time: 0.016; rss: 102MB	lint checking
time: 0.000; rss: 102MB	resolving dependency formats
  time: 0.000; rss: 102MB	NoLandingPads
  time: 0.002; rss: 102MB	SimplifyCfg
  time: 0.003; rss: 102MB	EraseRegions
  time: 0.001; rss: 102MB	AddCallGuards
  time: 0.239; rss: 104MB	ElaborateDrops
  time: 0.000; rss: 104MB	NoLandingPads
  time: 0.006; rss: 103MB	SimplifyCfg
  time: 0.003; rss: 103MB	InstCombine
  time: 0.000; rss: 103MB	Deaggregator
  time: 0.000; rss: 103MB	CopyPropagation
  time: 0.003; rss: 103MB	SimplifyLocals
  time: 0.001; rss: 103MB	AddCallGuards
  time: 0.000; rss: 103MB	PreTrans
time: 0.257; rss: 103MB	MIR optimisations
  time: 0.001; rss: 104MB	write metadata
  time: 0.008; rss: 104MB	translation item collection
  time: 0.001; rss: 104MB	codegen unit partitioning
  time: 0.001; rss: 117MB	internalize symbols
time: 0.144; rss: 117MB	translation
time: 0.000; rss: 117MB	assert dep graph
time: 0.000; rss: 117MB	serialize dep graph
  time: 0.029; rss: 84MB	llvm function passes [0]
  time: 0.005; rss: 85MB	llvm module passes [0]
  time: 0.669; rss: 89MB	codegen passes [0]
  time: 0.000; rss: 89MB	codegen passes [0]
time: 0.739; rss: 89MB	LLVM passes
time: 0.000; rss: 89MB	serialize work products
time: 0.019; rss: 77MB	linking
done
