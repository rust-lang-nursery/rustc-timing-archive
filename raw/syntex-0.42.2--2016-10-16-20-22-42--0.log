commit 6572a463116a31efba8bfddb2e64ed659311b8a1
Merge: 6dc035e ee338c3
Author: bors <bors@rust-lang.org>
Date:   Sun Oct 16 04:22:21 2016 -0700

    Auto merge of #37129 - arielb1:erased-normal, r=eddyb
    
    normalize types every time HR regions are erased
    
    Associated type normalization is inhibited by higher-ranked regions.
    Therefore, every time we erase them, we must re-normalize.
    
    I was meaning to introduce this change some time ago, but we used
    to erase regions in generic context, which broke this terribly (because
    you can't always normalize in a generic context). That seems to be gone
    now.
    
    Ensure this by having a `erase_late_bound_regions_and_normalize`
    function.
    
    Fixes #37109 (the missing call was in mir::block).
    
    r? @eddyb
rustc: ./syntex-0.42.2
cargo rustc -p syntex_syntax -- -Ztime-passes -Zinput-stats
   Compiling winapi v0.2.8
   Compiling log v0.3.6
   Compiling bitflags v0.5.0
   Compiling winapi-build v0.1.1
   Compiling rustc-serialize v0.3.19
   Compiling libc v0.2.15
   Compiling unicode-xid v0.0.3
   Compiling kernel32-sys v0.2.2
   Compiling term v0.4.4
   Compiling syntex_pos v0.42.0
   Compiling syntex_errors v0.42.0
   Compiling syntex_syntax v0.42.0
time: 0.156; rss: 68MB	parsing
Lines of code:             33687
Pre-expansion node count:  224033
time: 0.000; rss: 68MB	recursion limit
time: 0.000; rss: 68MB	crate injection
time: 0.000; rss: 68MB	plugin loading
time: 0.000; rss: 68MB	plugin registration
time: 0.363; rss: 138MB	expansion
time: 0.000; rss: 138MB	maybe building test harness
time: 0.007; rss: 138MB	maybe creating a macro crate
Post-expansion node count: 641571
time: 0.000; rss: 138MB	checking for inline asm in case the target doesn't support it
time: 0.013; rss: 138MB	complete gated feature checking
time: 0.023; rss: 138MB	early lint checks
time: 0.008; rss: 138MB	AST validation
time: 0.114; rss: 154MB	name resolution
time: 0.122; rss: 193MB	lowering ast -> hir
time: 0.025; rss: 201MB	indexing hir
time: 0.007; rss: 201MB	attribute checking
time: 0.006; rss: 154MB	language item collection
time: 0.012; rss: 154MB	lifetime resolution
time: 0.000; rss: 154MB	looking for entry point
time: 0.000; rss: 154MB	looking for plugin registrar
time: 0.061; rss: 164MB	region resolution
time: 0.006; rss: 164MB	loop checking
time: 0.006; rss: 164MB	static item recursion checking
time: 0.265; rss: 166MB	compute_incremental_hashes_map
time: 0.000; rss: 166MB	load_dep_graph
time: 0.045; rss: 171MB	type collecting
time: 0.001; rss: 171MB	variance inference
time: 0.038; rss: 174MB	coherence checking
time: 0.108; rss: 176MB	wf checking
time: 0.207; rss: 181MB	item-types checking
time: 4.070; rss: 227MB	item-bodies checking
time: 0.000; rss: 227MB	drop-impl checking
time: 0.273; rss: 229MB	const checking
time: 0.055; rss: 229MB	privacy checking
time: 0.007; rss: 229MB	stability index
time: 0.022; rss: 229MB	intrinsic checking
time: 0.019; rss: 229MB	effect checking
time: 0.059; rss: 229MB	match checking
time: 0.093; rss: 225MB	liveness checking
time: 0.233; rss: 225MB	rvalue checking
time: 0.657; rss: 401MB	MIR dump
  time: 0.066; rss: 407MB	SimplifyCfg
  time: 0.084; rss: 407MB	QualifyAndPromoteConstants
  time: 0.115; rss: 407MB	TypeckMir
  time: 0.005; rss: 407MB	SimplifyBranches
  time: 0.035; rss: 407MB	SimplifyCfg
time: 0.304; rss: 407MB	MIR passes
time: 0.590; rss: 410MB	borrow checking
time: 0.022; rss: 410MB	reachability checking
time: 0.046; rss: 410MB	death checking
time: 0.048; rss: 413MB	stability checking
time: 0.000; rss: 413MB	unused lib feature checking
time: 0.229; rss: 413MB	lint checking
time: 0.000; rss: 413MB	resolving dependency formats
  time: 0.003; rss: 413MB	NoLandingPads
  time: 0.030; rss: 413MB	SimplifyCfg
  time: 0.091; rss: 420MB	EraseRegions
  time: 0.012; rss: 420MB	AddCallGuards
  time: 0.334; rss: 441MB	ElaborateDrops
  time: 0.003; rss: 441MB	NoLandingPads
  time: 0.062; rss: 441MB	SimplifyCfg
  time: 0.031; rss: 440MB	InstCombine
  time: 0.012; rss: 440MB	Deaggregator
  time: 0.003; rss: 440MB	CopyPropagation
  time: 0.010; rss: 440MB	AddCallGuards
  time: 0.003; rss: 440MB	PreTrans
time: 0.594; rss: 440MB	Prepare MIR codegen passes
  time: 0.281; rss: 446MB	write metadata
  time: 0.480; rss: 459MB	translation item collection
  time: 0.064; rss: 465MB	codegen unit partitioning
  time: 0.054; rss: 710MB	internalize symbols
time: 5.686; rss: 591MB	translation
time: 0.000; rss: 591MB	assert dep graph
time: 0.000; rss: 591MB	serialize dep graph
  time: 0.513; rss: 401MB	llvm function passes [0]
  time: 0.248; rss: 410MB	llvm module passes [0]
  time: 10.124; rss: 409MB	codegen passes [0]
  time: 0.001; rss: 410MB	codegen passes [0]
time: 11.794; rss: 410MB	LLVM passes
time: 0.000; rss: 410MB	serialize work products
time: 0.664; rss: 101MB	linking
done
