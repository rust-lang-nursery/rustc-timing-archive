commit 8d2d2be6c61c17da8027a72da91f87a0e2487f74
Merge: a1e29da 1ea93c2
Author: bors <bors@rust-lang.org>
Date:   Fri Mar 25 18:09:28 2016 -0700

    Auto merge of #32293 - nikomatsakis:incr-comp-def-path-munging, r=alexcrichton
    
    Revamp symbol names for impls (and make them deterministic, etc)
    
    This builds on @michaelwoerister's epic PR #31539 (note that his PR never landed, so I just incorporated it into this one). The main change here is that we remove the "name" from `DefPathData` for impls, since that name is synthetic and not sufficiently predictable for incr comp. However, just doing that would cause bad symbol names since those are based on the `DefPath`. Therefore, I introduce a new mechanism for getting symbol names (and also paths for user display) called `item_path`. This is kind of simplistic for now (based on strings) but I expect to expand it later to support richer types, hopefully generating C++-mangled names that gdb etc can understand. Along the way I cleaned up how we track the path that leads to an extern crate.
    
    There is still some cleanup left undone here. Notably, I didn't remove the impl names altogether -- that would probably make sense. I also didn't try to remove the `item_symbols` vector. Mostly I want to unblock my other incr. comp. work. =)
    
    r? @eddyb
    cc @eddyb @alexcrichton @michaelwoerister
rustc: ./issue-32278-big-array-of-strings
/root/rust/x86_64-unknown-linux-gnu/stage2/bin/rustc big-array-of-strings.rs -Ztime-passes -Zinput-stats
time: 0.149; rss: 57MB	parsing
Lines of code:             65577
Pre-expansion node count:  65552
time: 0.012; rss: 57MB	configuration 1
time: 0.000; rss: 57MB	recursion limit
time: 0.001; rss: 57MB	gated macro checking
time: 0.000; rss: 57MB	crate injection
time: 0.004; rss: 60MB	macro loading
time: 0.000; rss: 60MB	plugin loading
time: 0.000; rss: 60MB	plugin registration
time: 0.042; rss: 66MB	expansion
time: 0.001; rss: 66MB	complete gated feature checking 1
time: 0.011; rss: 66MB	configuration 2
time: 0.000; rss: 66MB	gated configuration checking
time: 0.005; rss: 66MB	maybe building test harness
time: 0.005; rss: 66MB	prelude injection
time: 0.001; rss: 66MB	checking that all macro invocations are gone
time: 0.000; rss: 66MB	checking for inline asm in case the target doesn't support it
time: 0.001; rss: 66MB	complete gated feature checking 2
time: 0.001; rss: 66MB	const fn bodies and arguments
Post-expansion node count: 65565
time: 0.006; rss: 66MB	assigning node ids
time: 0.010; rss: 79MB	lowering ast -> hir
time: 0.002; rss: 81MB	indexing hir
time: 0.001; rss: 81MB	attribute checking
time: 0.009; rss: 81MB	early lint checks
time: 0.001; rss: 68MB	external crate/lib resolution
time: 0.001; rss: 68MB	language item collection
time: 0.002; rss: 71MB	resolution
time: 0.001; rss: 71MB	lifetime resolution
time: 0.000; rss: 71MB	looking for entry point
time: 0.000; rss: 71MB	looking for plugin registrar
time: 0.007; rss: 78MB	region resolution
time: 0.001; rss: 78MB	loop checking
time: 0.001; rss: 78MB	static item recursion checking
time: 0.000; rss: 78MB	type collecting
time: 0.000; rss: 78MB	variance inference
time: 0.005; rss: 85MB	coherence checking
time: 0.001; rss: 88MB	wf checking
time: 0.781; rss: 192MB	item-types checking
time: 0.000; rss: 192MB	item-bodies checking
time: 0.000; rss: 192MB	drop-impl checking
time: 0.019; rss: 193MB	const checking
time: 0.003; rss: 193MB	privacy checking
time: 0.001; rss: 193MB	stability index
time: 0.001; rss: 193MB	intrinsic checking
time: 0.001; rss: 193MB	effect checking
time: 0.001; rss: 193MB	match checking
time: 0.001; rss: 193MB	liveness checking
time: 0.001; rss: 193MB	rvalue checking
time: 0.001; rss: 193MB	MIR dump
time: 0.000; rss: 193MB	MIR passes
time: 0.001; rss: 193MB	borrow checking
time: 0.000; rss: 193MB	reachability checking
time: 0.001; rss: 193MB	death checking
time: 0.001; rss: 193MB	stability checking
time: 0.000; rss: 193MB	unused lib feature checking
time: 0.032; rss: 193MB	lint checking
time: 0.001; rss: 193MB	resolving dependency formats
  time: 0.001; rss: 203MB	translation item collection
  time: 0.000; rss: 208MB	write metadata
time: 0.085; rss: 208MB	translation
  time: 0.003; rss: 83MB	llvm function passes [0]
  time: 0.000; rss: 83MB	llvm module passes [0]
  time: 0.165; rss: 84MB	codegen passes [0]
  time: 0.000; rss: 74MB	codegen passes [0]
time: 0.180; rss: 74MB	LLVM passes
  time: 0.189; rss: 74MB	running linker
time: 0.190; rss: 74MB	linking
done
