commit fef6c64a8020c357dda902593f1065864564c079
Merge: 576229f e8441b6
Author: bors <bors@rust-lang.org>
Date:   Fri Apr 15 18:13:59 2016 -0700

    Auto merge of #32779 - michaelwoerister:partitioning, r=nikomatsakis
    
    Add initial version of codegen unit partitioning for incremental compilation.
    
    The task of the partitioning module is to take the complete set of translation items of a crate and produce a set of codegen units from it, where a codegen unit is a named set of (translation-item, linkage) pairs. That is, this module decides which translation item appears in which codegen units with which linkage.
    
    This version only handles the case of partitioning for incremental compilation, not the regular N-codegen units case. In the future the regular case should be handled too, maybe even doing a bit more analysis to intelligently figure out a good partitioning.
    
    One thing that could be improved is the syntax of the codegen unit tests. Right now they still use the compile-fail error specification infrastructure, so everything has to be on one line. Would be nice to be able to format things in a more readable way.
rustc: ./hyper.0.5.0
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling hyper v0.5.0 (file:///root/benchmarks/hyper.0.5.0)
time: 0.029; rss: 49MB	parsing
Lines of code:             9154
Pre-expansion node count:  45594
time: 0.008; rss: 49MB	configuration 1
time: 0.000; rss: 49MB	recursion limit
time: 0.000; rss: 49MB	gated macro checking
time: 0.000; rss: 49MB	crate injection
time: 0.004; rss: 54MB	macro loading
time: 0.000; rss: 54MB	plugin loading
time: 0.000; rss: 54MB	plugin registration
time: 0.187; rss: 63MB	expansion
time: 0.005; rss: 63MB	complete gated feature checking 1
time: 0.030; rss: 63MB	configuration 2
time: 0.000; rss: 63MB	gated configuration checking
time: 0.011; rss: 63MB	maybe building test harness
time: 0.008; rss: 63MB	prelude injection
time: 0.001; rss: 63MB	checking that all macro invocations are gone
time: 0.000; rss: 63MB	checking for inline asm in case the target doesn't support it
time: 0.002; rss: 63MB	complete gated feature checking 2
time: 0.001; rss: 63MB	const fn bodies and arguments
Post-expansion node count: 107125
time: 0.008; rss: 63MB	assigning node ids
time: 0.011; rss: 67MB	lowering ast -> hir
time: 0.004; rss: 71MB	indexing hir
time: 0.001; rss: 71MB	attribute checking
time: 0.006; rss: 71MB	early lint checks
time: 0.004; rss: 69MB	external crate/lib resolution
time: 0.001; rss: 69MB	language item collection
time: 0.024; rss: 85MB	resolution
time: 0.002; rss: 85MB	lifetime resolution
time: 0.000; rss: 85MB	looking for entry point
time: 0.000; rss: 85MB	looking for plugin registrar
time: 0.005; rss: 88MB	region resolution
time: 0.001; rss: 88MB	loop checking
time: 0.001; rss: 88MB	static item recursion checking
time: 0.000; rss: 88MB	load_dep_graph
time: 0.018; rss: 98MB	type collecting
time: 0.000; rss: 98MB	variance inference
time: 0.042; rss: 114MB	coherence checking
time: 0.073; rss: 114MB	wf checking
time: 0.028; rss: 115MB	item-types checking
time: 0.467; rss: 136MB	item-bodies checking
time: 0.000; rss: 136MB	drop-impl checking
time: 0.036; rss: 138MB	const checking
time: 0.007; rss: 138MB	privacy checking
time: 0.001; rss: 138MB	stability index
time: 0.004; rss: 138MB	intrinsic checking
time: 0.002; rss: 138MB	effect checking
time: 0.012; rss: 138MB	match checking
time: 0.005; rss: 138MB	liveness checking
time: 0.032; rss: 138MB	rvalue checking
time: 0.048; rss: 145MB	MIR dump
time: 0.022; rss: 145MB	MIR passes
time: 0.064; rss: 145MB	borrow checking
time: 0.003; rss: 145MB	reachability checking
time: 0.006; rss: 145MB	death checking
time: 0.005; rss: 145MB	stability checking
time: 0.000; rss: 145MB	unused lib feature checking
time: 0.047; rss: 145MB	lint checking
time: 0.000; rss: 145MB	resolving dependency formats
time: 0.010; rss: 148MB	Prepare MIR codegen passes
  time: 0.178; rss: 171MB	translation item collection
  time: 0.007; rss: 173MB	codegen unit partitioning
  time: 0.137; rss: 295MB	write metadata
time: 1.458; rss: 295MB	translation
time: 0.001; rss: 295MB	assert dep graph
time: 0.000; rss: 295MB	serialize dep graph
  time: 0.098; rss: 172MB	llvm function passes [0]
  time: 0.046; rss: 174MB	llvm module passes [0]
  time: 1.630; rss: 178MB	codegen passes [0]
  time: 0.001; rss: 126MB	codegen passes [0]
time: 1.972; rss: 124MB	LLVM passes
time: 0.174; rss: 122MB	linking
done
