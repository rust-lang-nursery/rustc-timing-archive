commit 57ef015132ec09345b88d2ec20a9d9809b5d3dfc
Merge: 1ccada6 eb67f49
Author: bors <bors@rust-lang.org>
Date:   Mon May 23 13:31:59 2016 -0700

    Auto merge of #33664 - huonw:abs_sub, r=alexcrichton
    
    Deprecate {f32,f64}::abs_sub.
    
    The abs_sub name is misleading: the function actually computes the
    positive difference (`fdim` in C), not the `(x - y).abs()` that *many* people expect
    from the name.
    
    This function can be replaced with just `(x - y).max(0.0)`, mirroring
    the `abs` version, but this behaves differently with NAN: `NAN.max(0.0)
    == 0.0`, while `NAN.positive_diff(0.0) == NAN`. People who absolutely
    need that behaviour can use the C function directly and/or talk to the libs
    team (we haven't encountered a concrete use-case for this functionality).
    
    Closes #30315.
rustc: ./rust-encoding.0.2.32
cargo rustc -- -Ztime-passes -Zinput-stats
    Updating registry `https://github.com/rust-lang/crates.io-index`
   Compiling encoding_index_tests v0.1.4 (file:///root/benchmarks/rust-encoding.0.2.32)
   Compiling encoding-index-simpchinese v1.20141219.5 (file:///root/benchmarks/rust-encoding.0.2.32)
   Compiling encoding-index-tradchinese v1.20141219.5 (file:///root/benchmarks/rust-encoding.0.2.32)
   Compiling encoding-index-singlebyte v1.20141219.5 (file:///root/benchmarks/rust-encoding.0.2.32)
   Compiling encoding-index-korean v1.20141219.5 (file:///root/benchmarks/rust-encoding.0.2.32)
   Compiling encoding-index-japanese v1.20141219.5 (file:///root/benchmarks/rust-encoding.0.2.32)
   Compiling encoding v0.2.32 (file:///root/benchmarks/rust-encoding.0.2.32)
time: 0.024; rss: 51MB	parsing
Lines of code:             6441
Pre-expansion node count:  30537
time: 0.006; rss: 57MB	configuration 1
time: 0.000; rss: 57MB	recursion limit
time: 0.000; rss: 57MB	crate injection
time: 0.019; rss: 89MB	macro loading
time: 0.000; rss: 89MB	plugin loading
time: 0.000; rss: 89MB	plugin registration
time: 0.044; rss: 92MB	expansion
time: 0.006; rss: 92MB	configuration 2
time: 0.000; rss: 92MB	gated configuration checking
time: 0.003; rss: 92MB	maybe building test harness
time: 0.003; rss: 92MB	prelude injection
time: 0.000; rss: 92MB	checking that all macro invocations are gone
time: 0.000; rss: 92MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 92MB	complete gated feature checking
Post-expansion node count: 41376
time: 0.003; rss: 92MB	assigning node ids
time: 0.001; rss: 93MB	collecting defs
time: 0.001; rss: 93MB	external crate/lib resolution
time: 0.002; rss: 93MB	early lint checks
time: 0.007; rss: 93MB	name resolution
time: 0.005; rss: 95MB	lowering ast -> hir
time: 0.000; rss: 95MB	indexing hir
time: 0.000; rss: 95MB	attribute checking
time: 0.000; rss: 96MB	language item collection
time: 0.000; rss: 96MB	lifetime resolution
time: 0.000; rss: 96MB	looking for entry point
time: 0.000; rss: 96MB	looking for plugin registrar
time: 0.002; rss: 97MB	region resolution
time: 0.000; rss: 97MB	loop checking
time: 0.000; rss: 97MB	static item recursion checking
time: 0.000; rss: 97MB	load_dep_graph
time: 0.005; rss: 99MB	type collecting
time: 0.000; rss: 99MB	variance inference
time: 0.022; rss: 103MB	coherence checking
time: 0.022; rss: 104MB	wf checking
time: 0.014; rss: 104MB	item-types checking
time: 0.215; rss: 111MB	item-bodies checking
time: 0.000; rss: 111MB	drop-impl checking
time: 0.013; rss: 111MB	const checking
time: 0.002; rss: 111MB	privacy checking
time: 0.000; rss: 111MB	stability index
time: 0.002; rss: 111MB	intrinsic checking
time: 0.000; rss: 111MB	effect checking
time: 0.008; rss: 111MB	match checking
time: 0.002; rss: 111MB	liveness checking
time: 0.007; rss: 111MB	rvalue checking
time: 0.022; rss: 117MB	MIR dump
time: 0.014; rss: 117MB	MIR passes
time: 0.023; rss: 117MB	borrow checking
time: 0.000; rss: 117MB	reachability checking
time: 0.002; rss: 117MB	death checking
time: 0.002; rss: 117MB	stability checking
time: 0.000; rss: 117MB	unused lib feature checking
time: 0.024; rss: 117MB	lint checking
time: 0.000; rss: 117MB	resolving dependency formats
time: 0.003; rss: 117MB	Prepare MIR codegen passes
  time: 0.029; rss: 121MB	translation item collection
  time: 0.001; rss: 121MB	codegen unit partitioning
  time: 0.058; rss: 155MB	write metadata
time: 0.356; rss: 155MB	translation
time: 0.000; rss: 155MB	assert dep graph
time: 0.000; rss: 155MB	serialize dep graph
  time: 0.026; rss: 120MB	llvm function passes [0]
  time: 0.051; rss: 124MB	llvm module passes [0]
  time: 0.578; rss: 129MB	codegen passes [0]
  time: 0.001; rss: 114MB	codegen passes [0]
time: 0.719; rss: 113MB	LLVM passes
time: 0.054; rss: 111MB	linking
done
