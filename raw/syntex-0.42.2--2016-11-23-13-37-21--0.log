commit d515586465522c615f8ae6c5d61deedea61126e1
Merge: 127a83d 2121118
Author: bors <bors@rust-lang.org>
Date:   Wed Nov 23 11:16:22 2016 -0600

    Auto merge of #36449 - canndrew:expand_is_uninhabited, r=eddyb
    
    Expand is_uninhabited
    
    This allows code such as this to compile:
    
    ``` rust
    let x: ! = ...;
    match x {};
    
    let y: (u32, !) = ...;
    match y {};
    ```
    
    @eddyb You were worried about making this change. Do you have any idea about what could break? Are there any special tests that need to be written for it?
rustc: ./syntex-0.42.2
cargo rustc -p syntex_syntax  -- -Ztime-passes -Zinput-stats
   Compiling libc v0.2.15
   Compiling winapi-build v0.1.1
   Compiling unicode-xid v0.0.3
   Compiling winapi v0.2.8
   Compiling bitflags v0.5.0
   Compiling log v0.3.6
   Compiling rustc-serialize v0.3.19
   Compiling kernel32-sys v0.2.2
   Compiling term v0.4.4
   Compiling syntex_pos v0.42.0
   Compiling syntex_errors v0.42.0
   Compiling syntex_syntax v0.42.0
time: 0.090; rss: 71MB	parsing
Lines of code:             33687
Pre-expansion node count:  223115
time: 0.000; rss: 71MB	recursion limit
time: 0.000; rss: 71MB	crate injection
time: 0.000; rss: 71MB	plugin loading
time: 0.000; rss: 71MB	plugin registration
time: 0.237; rss: 146MB	expansion
time: 0.000; rss: 146MB	maybe building test harness
time: 0.006; rss: 146MB	maybe creating a macro crate
Post-expansion node count: 638863
time: 0.000; rss: 146MB	checking for inline asm in case the target doesn't support it
time: 0.012; rss: 146MB	complete gated feature checking
time: 0.022; rss: 146MB	early lint checks
time: 0.007; rss: 146MB	AST validation
time: 0.077; rss: 160MB	name resolution
time: 0.044; rss: 183MB	lowering ast -> hir
time: 0.008; rss: 194MB	indexing hir
time: 0.006; rss: 194MB	attribute checking
time: 0.004; rss: 149MB	language item collection
time: 0.011; rss: 149MB	lifetime resolution
time: 0.000; rss: 149MB	looking for entry point
time: 0.000; rss: 149MB	looking for plugin registrar
time: 0.042; rss: 169MB	region resolution
time: 0.005; rss: 169MB	loop checking
time: 0.004; rss: 169MB	static item recursion checking
time: 0.327; rss: 169MB	compute_incremental_hashes_map
time: 0.000; rss: 169MB	load_dep_graph
time: 0.047; rss: 167MB	type collecting
time: 0.001; rss: 167MB	variance inference
time: 0.002; rss: 168MB	impl wf inference
time: 0.018; rss: 171MB	coherence checking
time: 0.089; rss: 175MB	wf checking
time: 0.181; rss: 180MB	item-types checking
time: 6.157; rss: 230MB	item-bodies checking
time: 0.000; rss: 230MB	drop-impl checking
time: 0.217; rss: 251MB	const checking
time: 0.048; rss: 251MB	privacy checking
time: 0.006; rss: 251MB	stability index
time: 0.018; rss: 251MB	intrinsic checking
time: 0.014; rss: 251MB	effect checking
time: 0.046; rss: 251MB	match checking
time: 0.050; rss: 247MB	liveness checking
time: 0.174; rss: 247MB	rvalue checking
time: 0.360; rss: 437MB	MIR dump
  time: 0.056; rss: 438MB	SimplifyCfg
  time: 0.073; rss: 438MB	QualifyAndPromoteConstants
  time: 0.102; rss: 438MB	TypeckMir
  time: 0.004; rss: 438MB	SimplifyBranches
  time: 0.030; rss: 438MB	SimplifyCfg
time: 0.266; rss: 438MB	MIR cleanup and validation
time: 0.538; rss: 438MB	borrow checking
time: 0.025; rss: 438MB	reachability checking
time: 0.039; rss: 438MB	death checking
time: 0.031; rss: 441MB	stability checking
time: 0.000; rss: 441MB	unused lib feature checking
time: 0.197; rss: 441MB	lint checking
time: 0.000; rss: 441MB	resolving dependency formats
  time: 0.003; rss: 441MB	NoLandingPads
  time: 0.026; rss: 441MB	SimplifyCfg
  time: 0.061; rss: 449MB	EraseRegions
  time: 0.011; rss: 449MB	AddCallGuards
  time: 0.268; rss: 465MB	ElaborateDrops
  time: 0.003; rss: 465MB	NoLandingPads
  time: 0.051; rss: 465MB	SimplifyCfg
  time: 0.028; rss: 465MB	InstCombine
  time: 0.012; rss: 465MB	Deaggregator
  time: 0.002; rss: 465MB	CopyPropagation
  time: 0.034; rss: 465MB	SimplifyLocals
  time: 0.009; rss: 465MB	AddCallGuards
  time: 0.002; rss: 465MB	PreTrans
time: 0.511; rss: 465MB	MIR optimisations
  time: 0.061; rss: 473MB	write metadata
  time: 0.379; rss: 485MB	translation item collection
  time: 0.057; rss: 498MB	codegen unit partitioning
  time: 0.040; rss: 738MB	internalize symbols
time: 4.386; rss: 738MB	translation
time: 0.000; rss: 738MB	assert dep graph
time: 0.000; rss: 738MB	serialize dep graph
  time: 0.517; rss: 426MB	llvm function passes [0]
  time: 0.258; rss: 433MB	llvm module passes [0]
  time: 10.407; rss: 430MB	codegen passes [0]
  time: 0.000; rss: 430MB	codegen passes [0]
time: 11.950; rss: 430MB	LLVM passes
time: 0.000; rss: 430MB	serialize work products
time: 0.337; rss: 115MB	linking
done
