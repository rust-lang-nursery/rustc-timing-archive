commit 195dbfa0980715ce6eb4b8baa1aa22bea15be69a
Merge: 49be16e e5ffade
Author: bors <bors@rust-lang.org>
Date:   Fri Oct 7 22:51:04 2016 -0700

    Auto merge of #37014 - nnethercote:avoid-pat_to_string, r=arielb1
    
    Avoid some `pat_to_string` calls.
    
    `ty_of_method_or_bare_fn` currently calls `pat_to_string` even when it
    doesn't need to. Fixing this avoids hundreds of large allocations (e.g.
    171,600 bytes, in `mk_printer`) in several of rustc-benchmarks.
rustc: ./syntex-0.42.2
cargo rustc -p syntex_syntax -- -Ztime-passes -Zinput-stats
   Compiling syntex_syntax v0.42.0
time: 0.108; rss: 76MB	parsing
Lines of code:             33687
Pre-expansion node count:  224033
time: 0.000; rss: 76MB	recursion limit
time: 0.000; rss: 76MB	crate injection
time: 0.000; rss: 76MB	plugin loading
time: 0.000; rss: 76MB	plugin registration
time: 0.272; rss: 146MB	expansion
time: 0.000; rss: 146MB	maybe building test harness
time: 0.007; rss: 146MB	maybe creating a macro crate
Post-expansion node count: 641571
time: 0.000; rss: 146MB	checking for inline asm in case the target doesn't support it
time: 0.014; rss: 146MB	complete gated feature checking
time: 0.024; rss: 146MB	early lint checks
time: 0.008; rss: 146MB	AST validation
time: 0.085; rss: 160MB	name resolution
time: 0.051; rss: 202MB	lowering ast -> hir
time: 0.009; rss: 211MB	indexing hir
time: 0.007; rss: 211MB	attribute checking
time: 0.006; rss: 161MB	language item collection
time: 0.012; rss: 161MB	lifetime resolution
time: 0.000; rss: 161MB	looking for entry point
time: 0.000; rss: 161MB	looking for plugin registrar
time: 0.045; rss: 173MB	region resolution
time: 0.006; rss: 173MB	loop checking
time: 0.006; rss: 173MB	static item recursion checking
time: 0.264; rss: 174MB	compute_incremental_hashes_map
time: 0.000; rss: 174MB	load_dep_graph
time: 0.043; rss: 174MB	type collecting
time: 0.001; rss: 174MB	variance inference
time: 0.039; rss: 177MB	coherence checking
time: 0.099; rss: 180MB	wf checking
time: 0.190; rss: 185MB	item-types checking
time: 3.954; rss: 240MB	item-bodies checking
time: 0.000; rss: 240MB	drop-impl checking
time: 0.314; rss: 241MB	const checking
time: 0.056; rss: 241MB	privacy checking
time: 0.007; rss: 241MB	stability index
time: 0.022; rss: 241MB	intrinsic checking
time: 0.019; rss: 241MB	effect checking
time: 0.058; rss: 241MB	match checking
time: 0.055; rss: 236MB	liveness checking
time: 0.288; rss: 236MB	rvalue checking
time: 0.417; rss: 426MB	MIR dump
  time: 0.057; rss: 429MB	SimplifyCfg
  time: 0.086; rss: 429MB	QualifyAndPromoteConstants
  time: 0.110; rss: 429MB	TypeckMir
  time: 0.004; rss: 429MB	SimplifyBranches
  time: 0.031; rss: 429MB	SimplifyCfg
time: 0.289; rss: 429MB	MIR passes
time: 0.688; rss: 429MB	borrow checking
time: 0.022; rss: 429MB	reachability checking
time: 0.046; rss: 429MB	death checking
time: 0.043; rss: 429MB	stability checking
time: 0.000; rss: 429MB	unused lib feature checking
time: 0.218; rss: 429MB	lint checking
time: 0.000; rss: 429MB	resolving dependency formats
  time: 0.003; rss: 429MB	NoLandingPads
  time: 0.027; rss: 429MB	SimplifyCfg
  time: 0.073; rss: 442MB	EraseRegions
  time: 0.011; rss: 442MB	AddCallGuards
  time: 1.044; rss: 457MB	ElaborateDrops
  time: 0.003; rss: 457MB	NoLandingPads
  time: 0.052; rss: 457MB	SimplifyCfg
  time: 0.030; rss: 457MB	InstCombine
  time: 0.012; rss: 457MB	Deaggregator
  time: 0.003; rss: 457MB	CopyPropagation
  time: 0.009; rss: 457MB	AddCallGuards
  time: 0.003; rss: 457MB	PreTrans
time: 1.270; rss: 457MB	Prepare MIR codegen passes
  time: 0.264; rss: 465MB	write metadata
  time: 0.472; rss: 475MB	translation item collection
  time: 0.068; rss: 479MB	codegen unit partitioning
  time: 0.058; rss: 724MB	internalize symbols
time: 5.220; rss: 603MB	translation
time: 0.000; rss: 603MB	assert dep graph
time: 0.000; rss: 603MB	serialize dep graph
  time: 0.513; rss: 411MB	llvm function passes [0]
  time: 0.257; rss: 419MB	llvm module passes [0]
  time: 10.088; rss: 420MB	codegen passes [0]
  time: 0.001; rss: 420MB	codegen passes [0]
time: 11.620; rss: 420MB	LLVM passes
time: 0.000; rss: 420MB	serialize work products
time: 0.656; rss: 107MB	linking
done
