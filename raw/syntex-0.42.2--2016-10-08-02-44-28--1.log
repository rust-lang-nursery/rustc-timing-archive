commit 195dbfa0980715ce6eb4b8baa1aa22bea15be69a
Merge: 49be16e e5ffade
Author: bors <bors@rust-lang.org>
Date:   Fri Oct 7 22:51:04 2016 -0700

    Auto merge of #37014 - nnethercote:avoid-pat_to_string, r=arielb1
    
    Avoid some `pat_to_string` calls.
    
    `ty_of_method_or_bare_fn` currently calls `pat_to_string` even when it
    doesn't need to. Fixing this avoids hundreds of large allocations (e.g.
    171,600 bytes, in `mk_printer`) in several of rustc-benchmarks.
rustc: ./syntex-0.42.2
cargo rustc -p syntex_syntax -- -Ztime-passes -Zinput-stats
   Compiling syntex_syntax v0.42.0
time: 0.109; rss: 75MB	parsing
Lines of code:             33687
Pre-expansion node count:  224033
time: 0.000; rss: 75MB	recursion limit
time: 0.000; rss: 75MB	crate injection
time: 0.000; rss: 75MB	plugin loading
time: 0.000; rss: 75MB	plugin registration
time: 0.280; rss: 145MB	expansion
time: 0.000; rss: 145MB	maybe building test harness
time: 0.007; rss: 145MB	maybe creating a macro crate
Post-expansion node count: 641571
time: 0.000; rss: 145MB	checking for inline asm in case the target doesn't support it
time: 0.015; rss: 145MB	complete gated feature checking
time: 0.026; rss: 145MB	early lint checks
time: 0.009; rss: 145MB	AST validation
time: 0.088; rss: 160MB	name resolution
time: 0.057; rss: 201MB	lowering ast -> hir
time: 0.011; rss: 210MB	indexing hir
time: 0.007; rss: 210MB	attribute checking
time: 0.007; rss: 160MB	language item collection
time: 0.014; rss: 160MB	lifetime resolution
time: 0.000; rss: 160MB	looking for entry point
time: 0.000; rss: 160MB	looking for plugin registrar
time: 0.049; rss: 172MB	region resolution
time: 0.007; rss: 172MB	loop checking
time: 0.007; rss: 172MB	static item recursion checking
time: 0.270; rss: 173MB	compute_incremental_hashes_map
time: 0.000; rss: 173MB	load_dep_graph
time: 0.045; rss: 173MB	type collecting
time: 0.001; rss: 173MB	variance inference
time: 0.040; rss: 176MB	coherence checking
time: 0.104; rss: 179MB	wf checking
time: 0.194; rss: 184MB	item-types checking
time: 3.943; rss: 239MB	item-bodies checking
time: 0.000; rss: 239MB	drop-impl checking
time: 0.310; rss: 240MB	const checking
time: 0.054; rss: 240MB	privacy checking
time: 0.007; rss: 240MB	stability index
time: 0.021; rss: 240MB	intrinsic checking
time: 0.018; rss: 240MB	effect checking
time: 0.056; rss: 240MB	match checking
time: 0.054; rss: 235MB	liveness checking
time: 0.285; rss: 235MB	rvalue checking
time: 0.411; rss: 425MB	MIR dump
  time: 0.057; rss: 428MB	SimplifyCfg
  time: 0.082; rss: 428MB	QualifyAndPromoteConstants
  time: 0.110; rss: 428MB	TypeckMir
  time: 0.004; rss: 428MB	SimplifyBranches
  time: 0.031; rss: 428MB	SimplifyCfg
time: 0.284; rss: 428MB	MIR passes
time: 0.690; rss: 428MB	borrow checking
time: 0.022; rss: 428MB	reachability checking
time: 0.045; rss: 428MB	death checking
time: 0.041; rss: 428MB	stability checking
time: 0.000; rss: 428MB	unused lib feature checking
time: 0.216; rss: 428MB	lint checking
time: 0.000; rss: 428MB	resolving dependency formats
  time: 0.003; rss: 428MB	NoLandingPads
  time: 0.026; rss: 428MB	SimplifyCfg
  time: 0.072; rss: 441MB	EraseRegions
  time: 0.011; rss: 441MB	AddCallGuards
  time: 1.042; rss: 456MB	ElaborateDrops
  time: 0.003; rss: 456MB	NoLandingPads
  time: 0.052; rss: 456MB	SimplifyCfg
  time: 0.030; rss: 456MB	InstCombine
  time: 0.012; rss: 456MB	Deaggregator
  time: 0.003; rss: 456MB	CopyPropagation
  time: 0.009; rss: 456MB	AddCallGuards
  time: 0.003; rss: 456MB	PreTrans
time: 1.266; rss: 456MB	Prepare MIR codegen passes
  time: 0.262; rss: 464MB	write metadata
  time: 0.471; rss: 472MB	translation item collection
  time: 0.069; rss: 480MB	codegen unit partitioning
  time: 0.058; rss: 725MB	internalize symbols
time: 5.022; rss: 603MB	translation
time: 0.000; rss: 603MB	assert dep graph
time: 0.000; rss: 603MB	serialize dep graph
  time: 0.510; rss: 410MB	llvm function passes [0]
  time: 0.242; rss: 418MB	llvm module passes [0]
  time: 10.023; rss: 412MB	codegen passes [0]
  time: 0.001; rss: 414MB	codegen passes [0]
time: 11.507; rss: 414MB	LLVM passes
time: 0.000; rss: 414MB	serialize work products
time: 0.653; rss: 107MB	linking
done
