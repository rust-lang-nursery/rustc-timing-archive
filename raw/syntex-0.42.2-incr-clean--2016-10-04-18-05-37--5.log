commit 1a4192804518199623fb88bf43bde69d6b0203cb
Merge: a5dac7a 4625642
Author: bors <bors@rust-lang.org>
Date:   Tue Oct 4 13:23:09 2016 -0700

    Auto merge of #36933 - alexcrichton:less-neon-again, r=eddyb
    
    rustc: Try again to disable NEON on armv7 linux
    
    This is a follow-up to #35814 which apparently didn't disable it hard enough. It
    looks like LLVM's default armv7 target enables NEON so we'd otherwise have to
    pass `-neon`, but we're already enabling armv7 with `+v7` supposedly, so let's
    try just telling LLVM that the armv7 target is arm and then enable features
    selectively.
    
    Closes #36913
rustc: ./syntex-0.42.2-incr-clean
RUSTFLAGS="-Z incremental=incr" \
    cargo rustc -p syntex_syntax -- -Ztime-passes -Zinput-stats -Z incremental-info
   Compiling syntex_syntax v0.42.0
time: 0.108; rss: 75MB	parsing
Lines of code:             33687
Pre-expansion node count:  224033
time: 0.000; rss: 75MB	recursion limit
time: 0.000; rss: 75MB	crate injection
time: 0.000; rss: 75MB	plugin loading
time: 0.000; rss: 75MB	plugin registration
time: 0.273; rss: 146MB	expansion
time: 0.000; rss: 146MB	maybe building test harness
time: 0.007; rss: 146MB	maybe creating a macro crate
Post-expansion node count: 641571
time: 0.000; rss: 146MB	checking for inline asm in case the target doesn't support it
time: 0.014; rss: 146MB	complete gated feature checking
time: 0.023; rss: 146MB	early lint checks
time: 0.008; rss: 146MB	AST validation
time: 0.085; rss: 161MB	name resolution
time: 0.051; rss: 201MB	lowering ast -> hir
time: 0.010; rss: 210MB	indexing hir
time: 0.007; rss: 210MB	attribute checking
time: 0.006; rss: 160MB	language item collection
time: 0.013; rss: 160MB	lifetime resolution
time: 0.000; rss: 160MB	looking for entry point
time: 0.000; rss: 160MB	looking for plugin registrar
time: 0.047; rss: 171MB	region resolution
time: 0.006; rss: 171MB	loop checking
time: 0.006; rss: 171MB	static item recursion checking
time: 0.262; rss: 173MB	compute_incremental_hashes_map
time: 0.000; rss: 173MB	load_dep_graph
time: 0.079; rss: 175MB	type collecting
time: 0.001; rss: 175MB	variance inference
time: 0.038; rss: 177MB	coherence checking
time: 0.100; rss: 180MB	wf checking
time: 0.193; rss: 186MB	item-types checking
time: 3.952; rss: 241MB	item-bodies checking
time: 0.000; rss: 241MB	drop-impl checking
time: 0.315; rss: 243MB	const checking
time: 0.058; rss: 243MB	privacy checking
time: 0.008; rss: 243MB	stability index
time: 0.023; rss: 243MB	intrinsic checking
time: 0.019; rss: 243MB	effect checking
time: 0.060; rss: 243MB	match checking
time: 0.057; rss: 237MB	liveness checking
time: 0.287; rss: 237MB	rvalue checking
time: 0.415; rss: 425MB	MIR dump
  time: 0.057; rss: 428MB	SimplifyCfg
  time: 0.082; rss: 428MB	QualifyAndPromoteConstants
  time: 0.112; rss: 428MB	TypeckMir
  time: 0.004; rss: 428MB	SimplifyBranches
  time: 0.037; rss: 428MB	SimplifyCfg
time: 0.293; rss: 428MB	MIR passes
time: 0.689; rss: 429MB	borrow checking
time: 0.022; rss: 429MB	reachability checking
time: 0.046; rss: 429MB	death checking
time: 0.044; rss: 429MB	stability checking
time: 0.000; rss: 429MB	unused lib feature checking
time: 0.220; rss: 429MB	lint checking
time: 0.000; rss: 429MB	resolving dependency formats
  time: 0.003; rss: 429MB	NoLandingPads
  time: 0.027; rss: 429MB	SimplifyCfg
  time: 0.073; rss: 442MB	EraseRegions
  time: 0.011; rss: 442MB	AddCallGuards
  time: 1.051; rss: 458MB	ElaborateDrops
  time: 0.003; rss: 458MB	NoLandingPads
  time: 0.052; rss: 459MB	SimplifyCfg
  time: 0.030; rss: 458MB	InstCombine
  time: 0.012; rss: 458MB	Deaggregator
  time: 0.003; rss: 458MB	CopyPropagation
  time: 0.009; rss: 458MB	AddCallGuards
  time: 0.003; rss: 458MB	PreTrans
time: 1.277; rss: 458MB	Prepare MIR codegen passes
  time: 0.266; rss: 464MB	write metadata
  time: 0.476; rss: 476MB	translation item collection
  time: 0.067; rss: 481MB	codegen unit partitioning
  time: 0.058; rss: 728MB	internalize symbols
time: 5.282; rss: 605MB	translation
time: 0.000; rss: 605MB	assert dep graph
time: 0.000; rss: 605MB	serialize dep graph
incremental: re-using 0 out of 1 modules
  time: 0.511; rss: 414MB	llvm function passes [0]
  time: 0.254; rss: 422MB	llvm module passes [0]
  time: 10.124; rss: 416MB	codegen passes [0]
  time: 0.002; rss: 417MB	codegen passes [0]
time: 11.633; rss: 417MB	LLVM passes
time: 0.000; rss: 417MB	serialize work products
time: 0.658; rss: 107MB	linking
done
