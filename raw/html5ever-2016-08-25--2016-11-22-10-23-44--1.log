commit 0f7c75b74fb7adc436eedc66c0032879293eeac6
Merge: 1c11ea3 6c2a456
Author: bors <bors@rust-lang.org>
Date:   Tue Nov 22 03:29:46 2016 -0600

    Auto merge of #37834 - bluss:peek-none, r=BurntSushi
    
    Make Peekable remember peeking a None
    
    Peekable should remember if a None has been seen in the `.peek()` method.
    It ensures that `.peek(); .peek();` or `.peek(); .next();` only advances the
    underlying iterator at most once. This does not by itself make the iterator
    fused.
    
    Thanks to @s3bk for the code in `fn peek()` itself.
    
    Fixes #37784
rustc: ./html5ever-2016-08-25
cargo rustc  -- -Ztime-passes -Zinput-stats
   Compiling html5ever v0.5.4 (file:///root/benchmarks/html5ever-2016-08-25)
time: 0.023; rss: 50MB	parsing
Lines of code:             8210
Pre-expansion node count:  52140
time: 0.000; rss: 50MB	recursion limit
time: 0.000; rss: 50MB	crate injection
time: 0.000; rss: 50MB	plugin loading
time: 0.000; rss: 50MB	plugin registration
time: 0.672; rss: 100MB	expansion
time: 0.000; rss: 100MB	maybe building test harness
time: 0.002; rss: 100MB	maybe creating a macro crate
Post-expansion node count: 163412
time: 0.000; rss: 100MB	checking for inline asm in case the target doesn't support it
time: 0.002; rss: 100MB	complete gated feature checking
time: 0.008; rss: 100MB	early lint checks
time: 0.002; rss: 100MB	AST validation
time: 0.017; rss: 104MB	name resolution
time: 0.020; rss: 111MB	lowering ast -> hir
time: 0.009; rss: 114MB	indexing hir
time: 0.002; rss: 114MB	attribute checking
time: 0.001; rss: 95MB	language item collection
time: 0.002; rss: 95MB	lifetime resolution
time: 0.000; rss: 95MB	looking for entry point
time: 0.000; rss: 95MB	looking for plugin registrar
time: 0.019; rss: 103MB	region resolution
time: 0.001; rss: 103MB	loop checking
time: 0.001; rss: 103MB	static item recursion checking
time: 0.020; rss: 103MB	compute_incremental_hashes_map
time: 0.000; rss: 103MB	load_dep_graph
time: 0.009; rss: 105MB	type collecting
time: 0.000; rss: 105MB	variance inference
time: 0.000; rss: 105MB	impl wf inference
time: 0.011; rss: 107MB	coherence checking
time: 0.020; rss: 108MB	wf checking
time: 0.344; rss: 114MB	item-types checking
time: 0.460; rss: 124MB	item-bodies checking
time: 0.000; rss: 124MB	drop-impl checking
time: 0.061; rss: 131MB	const checking
time: 0.006; rss: 131MB	privacy checking
time: 0.001; rss: 131MB	stability index
time: 0.002; rss: 131MB	intrinsic checking
time: 0.002; rss: 131MB	effect checking
time: 0.014; rss: 131MB	match checking
time: 0.035; rss: 127MB	liveness checking
time: 0.023; rss: 127MB	rvalue checking
time: 0.105; rss: 165MB	MIR dump
  time: 0.008; rss: 166MB	SimplifyCfg
  time: 0.014; rss: 167MB	QualifyAndPromoteConstants
  time: 0.022; rss: 167MB	TypeckMir
  time: 0.000; rss: 167MB	SimplifyBranches
  time: 0.004; rss: 167MB	SimplifyCfg
time: 0.048; rss: 167MB	MIR cleanup and validation
time: 0.081; rss: 173MB	borrow checking
time: 0.002; rss: 173MB	reachability checking
time: 0.005; rss: 173MB	death checking
time: 0.006; rss: 173MB	stability checking
time: 0.000; rss: 173MB	unused lib feature checking
time: 0.056; rss: 174MB	lint checking
time: 0.000; rss: 174MB	resolving dependency formats
  time: 0.000; rss: 174MB	NoLandingPads
  time: 0.004; rss: 174MB	SimplifyCfg
  time: 0.009; rss: 174MB	EraseRegions
  time: 0.001; rss: 174MB	AddCallGuards
  time: 0.076; rss: 178MB	ElaborateDrops
  time: 0.000; rss: 178MB	NoLandingPads
  time: 0.007; rss: 175MB	SimplifyCfg
  time: 0.007; rss: 173MB	InstCombine
  time: 0.001; rss: 173MB	Deaggregator
  time: 0.000; rss: 173MB	CopyPropagation
  time: 0.007; rss: 172MB	SimplifyLocals
  time: 0.001; rss: 172MB	AddCallGuards
  time: 0.000; rss: 172MB	PreTrans
time: 0.113; rss: 172MB	MIR optimisations
  time: 0.011; rss: 173MB	write metadata
  time: 0.038; rss: 175MB	translation item collection
  time: 0.004; rss: 175MB	codegen unit partitioning
  time: 0.005; rss: 188MB	internalize symbols
time: 0.270; rss: 188MB	translation
time: 0.000; rss: 188MB	assert dep graph
time: 0.000; rss: 188MB	serialize dep graph
  time: 0.021; rss: 108MB	llvm function passes [0]
  time: 0.012; rss: 110MB	llvm module passes [0]
  time: 0.483; rss: 112MB	codegen passes [0]
  time: 0.000; rss: 112MB	codegen passes [0]
time: 0.557; rss: 112MB	LLVM passes
time: 0.000; rss: 112MB	serialize work products
time: 0.025; rss: 95MB	linking
done
