commit 1ca1de6b26ec4740e3f0e8bead7002589024bd14
Merge: 70598e0 f5c7752
Author: bors <bors@rust-lang.org>
Date:   Sat Sep 3 17:41:08 2016 -0700

    Auto merge of #36124 - eddyb:fast-array-init, r=alexcrichton
    
    Fix optimization regressions for operations on [x; n]-initialized arrays.
    
    Fixes #35662 by using `!=` instead of `<` as the stop condition for `[x; n]` initialization loops.
    Also included is https://github.com/eddyb/llvm/commit/cc2009f02d3b9a3c05be939978212e832310b3d6, a hack to run the GVN pass twice, another time after InstCombine.
    This hack results in removal of redundant `memset` and `memcpy` calls (from loops over arrays).
    
    cc @nrc Can we get performance numbers on this? Not sure if it regresses anything else.
rustc: ./issue-32062-equality-relations-complexity
/root/rust/x86_64-unknown-linux-gnu/stage2/bin/rustc issue-32062.rs -Ztime-passes -Zinput-stats
time: 0.000; rss: 42MB	parsing
Lines of code:             60
Pre-expansion node count:  582
time: 0.000; rss: 42MB	configuration
time: 0.000; rss: 42MB	recursion limit
time: 0.000; rss: 42MB	crate injection
time: 0.000; rss: 42MB	plugin loading
time: 0.000; rss: 42MB	plugin registration
time: 0.018; rss: 66MB	expansion
time: 0.000; rss: 66MB	maybe building test harness
time: 0.000; rss: 66MB	maybe creating a macro crate
time: 0.000; rss: 66MB	assigning node ids
Post-expansion node count: 595
time: 0.000; rss: 66MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 66MB	complete gated feature checking
time: 0.000; rss: 66MB	collecting defs
time: 0.002; rss: 66MB	external crate/lib resolution
time: 0.000; rss: 66MB	early lint checks
time: 0.000; rss: 66MB	AST validation
time: 0.000; rss: 66MB	name resolution
time: 0.000; rss: 66MB	lowering ast -> hir
time: 0.000; rss: 66MB	indexing hir
time: 0.000; rss: 66MB	attribute checking
time: 0.000; rss: 66MB	language item collection
time: 0.000; rss: 66MB	lifetime resolution
time: 0.000; rss: 66MB	looking for entry point
time: 0.000; rss: 66MB	looking for plugin registrar
time: 0.000; rss: 66MB	region resolution
time: 0.000; rss: 66MB	loop checking
time: 0.000; rss: 66MB	static item recursion checking
time: 0.000; rss: 66MB	compute_incremental_hashes_map
time: 0.000; rss: 66MB	load_dep_graph
time: 0.001; rss: 70MB	type collecting
time: 0.000; rss: 70MB	variance inference
time: 0.004; rss: 70MB	coherence checking
time: 0.005; rss: 70MB	wf checking
time: 0.000; rss: 70MB	item-types checking
time: 0.022; rss: 72MB	item-bodies checking
time: 0.000; rss: 72MB	drop-impl checking
time: 0.001; rss: 72MB	const checking
time: 0.000; rss: 72MB	privacy checking
time: 0.000; rss: 72MB	stability index
time: 0.000; rss: 72MB	intrinsic checking
time: 0.000; rss: 72MB	effect checking
time: 0.000; rss: 72MB	match checking
time: 0.000; rss: 72MB	liveness checking
time: 0.001; rss: 72MB	rvalue checking
time: 0.001; rss: 72MB	MIR dump
time: 0.000; rss: 72MB	MIR passes
time: 0.001; rss: 72MB	borrow checking
time: 0.000; rss: 72MB	reachability checking
time: 0.000; rss: 72MB	death checking
time: 0.000; rss: 72MB	stability checking
time: 0.000; rss: 72MB	unused lib feature checking
time: 0.000; rss: 72MB	lint checking
time: 0.001; rss: 72MB	resolving dependency formats
time: 0.004; rss: 72MB	Prepare MIR codegen passes
  time: 0.000; rss: 72MB	write metadata
  time: 0.041; rss: 72MB	translation item collection
  time: 0.000; rss: 72MB	codegen unit partitioning
  time: 0.000; rss: 72MB	internalize symbols
time: 0.092; rss: 72MB	translation
time: 0.000; rss: 72MB	assert dep graph
time: 0.000; rss: 72MB	serialize dep graph
  time: 0.000; rss: 76MB	llvm function passes [0]
  time: 0.000; rss: 76MB	llvm module passes [0]
  time: 0.009; rss: 81MB	codegen passes [0]
  time: 0.000; rss: 81MB	codegen passes [0]
time: 0.010; rss: 81MB	LLVM passes
time: 0.000; rss: 81MB	serialize work products
  time: 0.108; rss: 81MB	running linker
time: 0.109; rss: 81MB	linking
done
