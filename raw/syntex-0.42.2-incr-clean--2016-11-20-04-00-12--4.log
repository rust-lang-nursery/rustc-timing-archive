commit e5ed0a5d78be74238af31631e7ecf311eb661586
Merge: 7c535c6 36f2af1
Author: bors <bors@rust-lang.org>
Date:   Sat Nov 19 23:39:25 2016 -0600

    Auto merge of #37842 - nikomatsakis:incremental-test, r=mw
    
    Add tests for incremental reuse scenarios
    
    These are microbenchmarks checking that we achieve the expected reuse in the scenarios covered by incremental beta.
    
    r? @michaelwoerister
rustc: ./syntex-0.42.2-incr-clean
RUSTFLAGS="-Z incremental=incr" \
    cargo rustc -p syntex_syntax  -- \
    -Ztime-passes -Zinput-stats -Z incremental-info
   Compiling syntex_syntax v0.42.0
time: 0.129; rss: 67MB	parsing
Lines of code:             33687
Pre-expansion node count:  223115
time: 0.000; rss: 67MB	recursion limit
time: 0.000; rss: 67MB	crate injection
time: 0.000; rss: 67MB	plugin loading
time: 0.000; rss: 67MB	plugin registration
time: 0.327; rss: 139MB	expansion
time: 0.000; rss: 139MB	maybe building test harness
time: 0.006; rss: 139MB	maybe creating a macro crate
Post-expansion node count: 638863
time: 0.000; rss: 139MB	checking for inline asm in case the target doesn't support it
time: 0.014; rss: 139MB	complete gated feature checking
time: 0.024; rss: 139MB	early lint checks
time: 0.007; rss: 139MB	AST validation
time: 0.105; rss: 155MB	name resolution
time: 0.088; rss: 179MB	lowering ast -> hir
time: 0.020; rss: 187MB	indexing hir
time: 0.006; rss: 187MB	attribute checking
time: 0.005; rss: 145MB	language item collection
time: 0.011; rss: 145MB	lifetime resolution
time: 0.000; rss: 145MB	looking for entry point
time: 0.000; rss: 145MB	looking for plugin registrar
time: 0.079; rss: 165MB	region resolution
time: 0.005; rss: 165MB	loop checking
time: 0.005; rss: 165MB	static item recursion checking
time: 0.333; rss: 166MB	compute_incremental_hashes_map
time: 0.000; rss: 166MB	load_dep_graph
time: 0.050; rss: 164MB	type collecting
time: 0.002; rss: 164MB	variance inference
time: 0.002; rss: 164MB	impl wf inference
time: 0.019; rss: 168MB	coherence checking
time: 0.089; rss: 170MB	wf checking
time: 0.182; rss: 175MB	item-types checking
time: 6.694; rss: 220MB	item-bodies checking
time: 0.000; rss: 220MB	drop-impl checking
time: 0.279; rss: 241MB	const checking
time: 0.050; rss: 241MB	privacy checking
time: 0.006; rss: 241MB	stability index
time: 0.018; rss: 241MB	intrinsic checking
time: 0.015; rss: 241MB	effect checking
time: 0.046; rss: 241MB	match checking
time: 0.069; rss: 241MB	liveness checking
time: 0.186; rss: 241MB	rvalue checking
time: 0.584; rss: 409MB	MIR dump
  time: 0.059; rss: 415MB	SimplifyCfg
  time: 0.075; rss: 415MB	QualifyAndPromoteConstants
  time: 0.109; rss: 415MB	TypeckMir
  time: 0.004; rss: 415MB	SimplifyBranches
  time: 0.031; rss: 415MB	SimplifyCfg
time: 0.279; rss: 415MB	MIR cleanup and validation
time: 0.566; rss: 419MB	borrow checking
time: 0.020; rss: 419MB	reachability checking
time: 0.040; rss: 419MB	death checking
time: 0.036; rss: 421MB	stability checking
time: 0.000; rss: 421MB	unused lib feature checking
time: 0.207; rss: 421MB	lint checking
time: 0.000; rss: 421MB	resolving dependency formats
  time: 0.003; rss: 421MB	NoLandingPads
  time: 0.026; rss: 421MB	SimplifyCfg
  time: 0.077; rss: 428MB	EraseRegions
  time: 0.011; rss: 428MB	AddCallGuards
  time: 0.302; rss: 447MB	ElaborateDrops
  time: 0.003; rss: 447MB	NoLandingPads
  time: 0.053; rss: 447MB	SimplifyCfg
  time: 0.030; rss: 447MB	InstCombine
  time: 0.013; rss: 447MB	Deaggregator
  time: 0.002; rss: 447MB	CopyPropagation
  time: 0.035; rss: 448MB	SimplifyLocals
  time: 0.010; rss: 448MB	AddCallGuards
  time: 0.003; rss: 448MB	PreTrans
time: 0.569; rss: 448MB	MIR optimisations
  time: 0.082; rss: 456MB	write metadata
  time: 0.426; rss: 469MB	translation item collection
  time: 0.072; rss: 474MB	codegen unit partitioning
  time: 0.049; rss: 721MB	internalize symbols
time: 4.971; rss: 721MB	translation
time: 0.000; rss: 721MB	assert dep graph
time: 0.000; rss: 721MB	serialize dep graph
incremental: re-using 0 out of 1 modules
  time: 0.532; rss: 414MB	llvm function passes [0]
  time: 0.257; rss: 423MB	llvm module passes [0]
  time: 10.380; rss: 413MB	codegen passes [0]
  time: 0.000; rss: 413MB	codegen passes [0]
time: 12.053; rss: 413MB	LLVM passes
time: 0.000; rss: 413MB	serialize work products
time: 0.347; rss: 102MB	linking
done
