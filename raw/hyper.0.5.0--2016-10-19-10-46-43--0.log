commit cfc9b5185bbf5ab04a2736347bfa7fd9ab70c1e7
Merge: a41505f 8b0c292
Author: bors <bors@rust-lang.org>
Date:   Wed Oct 19 06:33:10 2016 -0700

    Auto merge of #37213 - jseyfried:refactor_crate_var, r=nrc
    
    macros: improve `$crate`
    
    This PR refactors the implementation of `$crate` so that
     - `$crate` is only allowed at the start of a path (like `super`),
     - we can make `$crate` work with inter-crate re-exports (groundwork for macro modularization), and
     - we can support importing macros from an extern crate that is not declared at the crate root (also groundwork for macro modularization).
    
    This is a [breaking-change]. For example, the following would break:
    ```rust
    fn foo() {}
    macro_rules! m { () => {
        $crate foo $crate () $crate $crate;
        //^ Today, `$crate` is allowed just about anywhere in unexported macros.
    } }
    fn main() {
        m!();
    }
    ```
    r? @nrc
rustc: ./hyper.0.5.0
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling winapi v0.2.8
   Compiling log v0.3.6
   Compiling pkg-config v0.3.8
   Compiling lazy_static v0.1.16
   Compiling httparse v0.1.6
   Compiling rustc-serialize v0.3.19
   Compiling bitflags v0.3.3
   Compiling typeable v0.1.2
   Compiling libc v0.2.16
   Compiling libc v0.1.12
   Compiling gcc v0.3.35
   Compiling mime v0.0.11
   Compiling matches v0.1.2
   Compiling traitobject v0.0.1
   Compiling winapi-build v0.1.1
   Compiling unicase v0.1.0
   Compiling kernel32-sys v0.2.2
   Compiling num_cpus v0.2.13
   Compiling time v0.1.35
   Compiling rand v0.3.14
   Compiling openssl-sys v0.6.7
   Compiling openssl v0.6.7
   Compiling uuid v0.1.18
   Compiling url v0.2.38
   Compiling cookie v0.1.21
   Compiling hyper v0.5.0 (file:///root/benchmarks/hyper.0.5.0)
time: 0.170; rss: 50MB	parsing
Lines of code:             9003
Pre-expansion node count:  44129
time: 0.000; rss: 50MB	recursion limit
time: 0.000; rss: 50MB	crate injection
time: 0.000; rss: 50MB	plugin loading
time: 0.000; rss: 50MB	plugin registration
time: 0.126; rss: 87MB	expansion
time: 0.000; rss: 87MB	maybe building test harness
time: 0.001; rss: 87MB	maybe creating a macro crate
Post-expansion node count: 101823
time: 0.000; rss: 87MB	checking for inline asm in case the target doesn't support it
time: 0.002; rss: 87MB	complete gated feature checking
time: 0.003; rss: 87MB	early lint checks
time: 0.001; rss: 87MB	AST validation
time: 0.017; rss: 92MB	name resolution
time: 0.008; rss: 98MB	lowering ast -> hir
time: 0.001; rss: 98MB	indexing hir
time: 0.001; rss: 98MB	attribute checking
time: 0.001; rss: 92MB	language item collection
time: 0.002; rss: 92MB	lifetime resolution
time: 0.000; rss: 92MB	looking for entry point
time: 0.000; rss: 92MB	looking for plugin registrar
time: 0.006; rss: 96MB	region resolution
time: 0.001; rss: 96MB	loop checking
time: 0.001; rss: 96MB	static item recursion checking
time: 0.058; rss: 97MB	compute_incremental_hashes_map
time: 0.000; rss: 97MB	load_dep_graph
time: 0.015; rss: 97MB	type collecting
time: 0.000; rss: 97MB	variance inference
time: 0.029; rss: 102MB	coherence checking
time: 0.044; rss: 103MB	wf checking
time: 0.020; rss: 103MB	item-types checking
time: 0.340; rss: 114MB	item-bodies checking
time: 0.000; rss: 114MB	drop-impl checking
time: 0.030; rss: 114MB	const checking
time: 0.008; rss: 114MB	privacy checking
time: 0.001; rss: 114MB	stability index
time: 0.003; rss: 114MB	intrinsic checking
time: 0.002; rss: 114MB	effect checking
time: 0.009; rss: 114MB	match checking
time: 0.004; rss: 114MB	liveness checking
time: 0.022; rss: 114MB	rvalue checking
time: 0.048; rss: 132MB	MIR dump
  time: 0.006; rss: 132MB	SimplifyCfg
  time: 0.011; rss: 132MB	QualifyAndPromoteConstants
  time: 0.013; rss: 132MB	TypeckMir
  time: 0.001; rss: 132MB	SimplifyBranches
  time: 0.003; rss: 132MB	SimplifyCfg
time: 0.035; rss: 132MB	MIR passes
time: 0.056; rss: 133MB	borrow checking
time: 0.003; rss: 133MB	reachability checking
time: 0.005; rss: 133MB	death checking
time: 0.006; rss: 135MB	stability checking
time: 0.000; rss: 135MB	unused lib feature checking
time: 0.040; rss: 137MB	lint checking
time: 0.000; rss: 137MB	resolving dependency formats
  time: 0.001; rss: 137MB	NoLandingPads
  time: 0.003; rss: 137MB	SimplifyCfg
  time: 0.009; rss: 137MB	EraseRegions
  time: 0.001; rss: 137MB	AddCallGuards
  time: 0.022; rss: 139MB	ElaborateDrops
  time: 0.001; rss: 139MB	NoLandingPads
  time: 0.005; rss: 139MB	SimplifyCfg
  time: 0.003; rss: 139MB	InstCombine
  time: 0.003; rss: 139MB	Deaggregator
  time: 0.001; rss: 139MB	CopyPropagation
  time: 0.001; rss: 139MB	AddCallGuards
  time: 0.000; rss: 139MB	PreTrans
time: 0.049; rss: 139MB	Prepare MIR codegen passes
  time: 0.012; rss: 141MB	write metadata
  time: 0.125; rss: 148MB	translation item collection
  time: 0.015; rss: 150MB	codegen unit partitioning
  time: 0.013; rss: 205MB	internalize symbols
time: 1.011; rss: 194MB	translation
time: 0.000; rss: 194MB	assert dep graph
time: 0.000; rss: 194MB	serialize dep graph
  time: 0.084; rss: 148MB	llvm function passes [0]
  time: 0.041; rss: 149MB	llvm module passes [0]
  time: 1.604; rss: 152MB	codegen passes [0]
  time: 0.000; rss: 152MB	codegen passes [0]
time: 1.869; rss: 152MB	LLVM passes
time: 0.000; rss: 152MB	serialize work products
time: 0.138; rss: 94MB	linking
done
