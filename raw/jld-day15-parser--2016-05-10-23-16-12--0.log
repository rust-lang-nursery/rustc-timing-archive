commit 6dbb0e86aec11050480beb76eade6fb805010ba7
Merge: 04308ce fef8276
Author: bors <bors@rust-lang.org>
Date:   Tue May 10 14:36:46 2016 -0700

    Auto merge of #33319 - birkenfeld:issue31424, r=jseyfried
    
    borrowck: do not suggest to change "&mut self" to "&mut mut self"
    
    Matching the snippet string might not be the cleanest, but matching
    the AST node instead seems to end in a lot of nested `if let`s, so I
    don't know what's better.
    
    Of course it's entirely possible that there is another API altogether
    that I just don't know of?
    
    Fixes #31424.
rustc: ./jld-day15-parser
cargo rustc -- -Ztime-passes -Zinput-stats
    Updating registry `https://github.com/rust-lang/crates.io-index`
   Compiling combine v1.3.0
   Compiling day15 v0.1.0 (file:///root/benchmarks/jld-day15-parser)
time: 0.001; rss: 45MB	parsing
Lines of code:             72
Pre-expansion node count:  673
time: 0.000; rss: 45MB	configuration 1
time: 0.000; rss: 45MB	recursion limit
time: 0.000; rss: 45MB	crate injection
time: 0.003; rss: 51MB	macro loading
time: 0.000; rss: 51MB	plugin loading
time: 0.000; rss: 51MB	plugin registration
time: 0.002; rss: 51MB	expansion
time: 0.000; rss: 51MB	configuration 2
time: 0.000; rss: 51MB	gated configuration checking
time: 0.000; rss: 51MB	maybe building test harness
time: 0.000; rss: 51MB	prelude injection
time: 0.000; rss: 51MB	checking that all macro invocations are gone
time: 0.000; rss: 51MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 51MB	complete gated feature checking
Post-expansion node count: 1176
time: 0.000; rss: 51MB	assigning node ids
time: 0.000; rss: 51MB	collecting defs
time: 0.004; rss: 55MB	external crate/lib resolution
time: 0.000; rss: 55MB	early lint checks
time: 0.001; rss: 59MB	name resolution
time: 0.000; rss: 59MB	lowering ast -> hir
time: 0.000; rss: 59MB	indexing hir
time: 0.000; rss: 59MB	attribute checking
time: 0.000; rss: 59MB	language item collection
time: 0.000; rss: 59MB	lifetime resolution
time: 0.000; rss: 59MB	looking for entry point
time: 0.000; rss: 59MB	looking for plugin registrar
time: 0.000; rss: 59MB	region resolution
time: 0.000; rss: 59MB	loop checking
time: 0.000; rss: 59MB	static item recursion checking
time: 0.000; rss: 59MB	load_dep_graph
time: 0.001; rss: 64MB	type collecting
time: 0.000; rss: 64MB	variance inference
time: 0.005; rss: 74MB	coherence checking
time: 0.007; rss: 78MB	wf checking
time: 0.000; rss: 78MB	item-types checking
time: 1.474; rss: 150MB	item-bodies checking
time: 0.000; rss: 150MB	drop-impl checking
time: 0.001; rss: 150MB	const checking
time: 0.000; rss: 150MB	privacy checking
time: 0.000; rss: 150MB	stability index
time: 0.000; rss: 150MB	intrinsic checking
time: 0.000; rss: 150MB	effect checking
time: 0.000; rss: 150MB	match checking
time: 0.000; rss: 150MB	liveness checking
time: 0.000; rss: 150MB	rvalue checking
time: 0.001; rss: 151MB	MIR dump
time: 0.001; rss: 151MB	MIR passes
time: 0.001; rss: 151MB	borrow checking
time: 0.000; rss: 151MB	reachability checking
time: 0.000; rss: 151MB	death checking
time: 0.000; rss: 151MB	stability checking
time: 0.000; rss: 151MB	unused lib feature checking
time: 0.004; rss: 153MB	lint checking
time: 0.002; rss: 153MB	resolving dependency formats
time: 0.000; rss: 153MB	Prepare MIR codegen passes
  time: 12.266; rss: 183MB	translation item collection
  time: 0.001; rss: 184MB	codegen unit partitioning
  time: 0.000; rss: 225MB	write metadata
time: 38.911; rss: 225MB	translation
time: 0.000; rss: 225MB	assert dep graph
time: 0.000; rss: 225MB	serialize dep graph
  time: 0.014; rss: 106MB	llvm function passes [0]
  time: 0.001; rss: 106MB	llvm module passes [0]
  time: 0.274; rss: 112MB	codegen passes [0]
  time: 0.000; rss: 106MB	codegen passes [0]
time: 0.297; rss: 106MB	LLVM passes
  time: 0.122; rss: 105MB	running linker
time: 0.122; rss: 105MB	linking
done
