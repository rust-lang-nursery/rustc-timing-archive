commit 8f552181895921a377ab8c235340ea3d80ec7fc0
Merge: 897199a 9249e6a
Author: bors <bors@rust-lang.org>
Date:   Tue Apr 26 14:54:37 2016 -0700

    Auto merge of #31414 - durka:clone-copy, r=alexcrichton
    
    special-case #[derive(Copy, Clone)] with a shallow clone
    
    If a type is Copy then its Clone implementation can be a no-op. Currently `#[derive(Clone)]` generates a deep clone anyway. This can lead to lots of code bloat.
    
    This PR detects the case where Copy and Clone are both being derived (the general case of "is this type Copy" can't be determined by a syntax extension) and generates the shallow Clone impl. Right now this can only be done if there are no type parameters (see https://github.com/rust-lang/rust/issues/31085#issuecomment-178988663), but this restriction can be removed after specialization.
    
    Fixes #31085.
rustc: ./rust-encoding.0.2.32
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling encoding v0.2.32 (file:///root/benchmarks/rust-encoding.0.2.32)
time: 0.033; rss: 54MB	parsing
Lines of code:             6441
Pre-expansion node count:  30335
time: 0.006; rss: 55MB	configuration 1
time: 0.000; rss: 55MB	recursion limit
time: 0.000; rss: 55MB	gated macro checking
time: 0.000; rss: 55MB	crate injection
time: 0.003; rss: 57MB	macro loading
time: 0.000; rss: 57MB	plugin loading
time: 0.000; rss: 57MB	plugin registration
time: 0.044; rss: 60MB	expansion
time: 0.001; rss: 60MB	complete gated feature checking 1
time: 0.006; rss: 60MB	configuration 2
time: 0.000; rss: 60MB	gated configuration checking
time: 0.003; rss: 60MB	maybe building test harness
time: 0.003; rss: 60MB	prelude injection
time: 0.000; rss: 60MB	checking that all macro invocations are gone
time: 0.000; rss: 60MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 60MB	complete gated feature checking 2
time: 0.000; rss: 60MB	const fn bodies and arguments
Post-expansion node count: 41656
time: 0.003; rss: 60MB	assigning node ids
time: 0.002; rss: 62MB	collecting defs
time: 0.001; rss: 62MB	external crate/lib resolution
time: 0.005; rss: 64MB	lowering ast -> hir
time: 0.002; rss: 65MB	indexing hir
time: 0.000; rss: 65MB	attribute checking
time: 0.002; rss: 65MB	early lint checks
time: 0.000; rss: 64MB	language item collection
time: 0.008; rss: 73MB	name resolution
time: 0.001; rss: 73MB	lifetime resolution
time: 0.000; rss: 73MB	looking for entry point
time: 0.000; rss: 73MB	looking for plugin registrar
time: 0.003; rss: 74MB	region resolution
time: 0.000; rss: 74MB	loop checking
time: 0.000; rss: 74MB	static item recursion checking
time: 0.000; rss: 74MB	load_dep_graph
time: 0.004; rss: 77MB	type collecting
time: 0.000; rss: 77MB	variance inference
time: 0.022; rss: 93MB	coherence checking
time: 0.017; rss: 94MB	wf checking
time: 0.015; rss: 94MB	item-types checking
time: 0.205; rss: 104MB	item-bodies checking
time: 0.000; rss: 104MB	drop-impl checking
time: 0.011; rss: 105MB	const checking
time: 0.003; rss: 105MB	privacy checking
time: 0.000; rss: 105MB	stability index
time: 0.001; rss: 105MB	intrinsic checking
time: 0.000; rss: 105MB	effect checking
time: 0.006; rss: 105MB	match checking
time: 0.002; rss: 105MB	liveness checking
time: 0.006; rss: 105MB	rvalue checking
time: 0.031; rss: 112MB	MIR dump
time: 0.008; rss: 112MB	MIR passes
time: 0.022; rss: 112MB	borrow checking
time: 0.000; rss: 112MB	reachability checking
time: 0.002; rss: 112MB	death checking
time: 0.002; rss: 112MB	stability checking
time: 0.000; rss: 112MB	unused lib feature checking
time: 0.023; rss: 112MB	lint checking
time: 0.000; rss: 112MB	resolving dependency formats
time: 0.004; rss: 113MB	Prepare MIR codegen passes
  time: 0.027; rss: 118MB	translation item collection
  time: 0.002; rss: 118MB	codegen unit partitioning
  time: 0.060; rss: 150MB	write metadata
time: 0.396; rss: 150MB	translation
time: 0.000; rss: 150MB	assert dep graph
time: 0.000; rss: 150MB	serialize dep graph
  time: 0.027; rss: 115MB	llvm function passes [0]
  time: 0.052; rss: 119MB	llvm module passes [0]
  time: 0.575; rss: 123MB	codegen passes [0]
  time: 0.001; rss: 107MB	codegen passes [0]
time: 0.723; rss: 107MB	LLVM passes
time: 0.054; rss: 105MB	linking
done
