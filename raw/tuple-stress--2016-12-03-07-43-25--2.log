commit 9a101d8987ea66795db6623f42788db856e7efc8
Merge: 24175e8 5c0eb6e
Author: bors <bors@rust-lang.org>
Date:   Sat Dec 3 11:04:01 2016 +0000

    Auto merge of #38059 - arielb1:no-mere-overflow, r=nikomatsakis
    
    evaluate obligations in LIFO order during closure projection
    
    This is an annoying gotcha with the projection cache's handling of
    nested obligations.
    
    Nested projection obligations enter the issue in this case:
    ```
    DEBUG:rustc::traits::project: AssociatedTypeNormalizer: depth=3
    normalized
    <std::iter::Map<std::ops::Range<i32>,
    [closure@not-a-recursion-error.rs:5:30: 5:53]> as
    std::iter::IntoIterator>::Item to _#7t with 12 add'l obligations
    ```
    
    Here the normalization result is the result of the nested impl
    `<[closure@not-a-recursion-error.rs:5:30: 5:53] as FnMut(i32)>::Output`,
    which is an additional obligation that is a part of "add'l obligations".
    
    By itself, this is proper behaviour - the additional obligation is
    returned, and the RFC 447 rules ensure that it is processed before the
    output `#_7t` is used in any way.
    
    However, the projection cache breaks this - it caches the
    `<std::iter::Map<std::ops::Range<i32>,[closure@not-a-recursion-error.rs:5:30:
    5:53]> as std::iter::IntoIterator>::Item = #_7t` resolution. Now
    everybody else that attempts to look up the projection will just get
    `#_7t` *without* any additional obligations. This obviously causes all
    sorts of trouble (here a spurious `EvaluatedToAmbig` results in
    specializations not being discarded
    [here](https://github.com/rust-lang/rust/blob/9ca50bd4d50b55456e88a8c3ad8fcc9798f57522/src/librustc/traits/select.rs#L1705)).
    
    The compiler works even with this projection cache gotcha because in most
    cases during "one-pass evaluation". we tend to process obligations in LIFO
    order - after an obligation is added to the cache, we process its nested
    obligations before we do anything else (and if we have a cycle, we handle
    it specifically) - which makes sure the inference variables are resolved
    before they are used.
    
    That "LIFO" order That was not done when projecting out of a closure, so
    let's just fix that for the time being.
    
    Fixes #38033.
    
    Beta-nominating because regression.
    
    r? @nikomatsakis
rustc: ./tuple-stress
cargo rustc  -- -Ztime-passes -Zinput-stats
time: 0.409; rss: 135MB	parsing
Lines of code:             65571
Pre-expansion node count:  393241
time: 0.000; rss: 135MB	recursion limit
time: 0.000; rss: 135MB	crate injection
time: 0.000; rss: 135MB	plugin loading
time: 0.000; rss: 135MB	plugin registration
time: 0.093; rss: 158MB	expansion
time: 0.000; rss: 158MB	maybe building test harness
time: 0.005; rss: 158MB	maybe creating a macro crate
Post-expansion node count: 393303
time: 0.000; rss: 158MB	checking for inline asm in case the target doesn't support it
time: 0.005; rss: 158MB	complete gated feature checking
time: 0.034; rss: 158MB	early lint checks
time: 0.005; rss: 158MB	AST validation
time: 0.012; rss: 158MB	name resolution
time: 0.031; rss: 201MB	lowering ast -> hir
time: 0.008; rss: 217MB	indexing hir
time: 0.005; rss: 217MB	attribute checking
time: 0.002; rss: 140MB	language item collection
time: 0.002; rss: 140MB	lifetime resolution
time: 0.000; rss: 140MB	looking for entry point
time: 0.000; rss: 140MB	looking for plugin registrar
time: 0.052; rss: 164MB	region resolution
time: 0.002; rss: 164MB	loop checking
time: 0.004; rss: 164MB	static item recursion checking
time: 0.211; rss: 164MB	compute_incremental_hashes_map
time: 0.000; rss: 164MB	load_dep_graph
time: 0.002; rss: 164MB	stability index
time: 0.002; rss: 164MB	stability checking
time: 0.002; rss: 164MB	type collecting
time: 0.000; rss: 164MB	variance inference
time: 0.000; rss: 164MB	impl wf inference
time: 0.003; rss: 166MB	coherence checking
time: 0.002; rss: 166MB	wf checking
time: 0.604; rss: 213MB	item-types checking
time: 0.004; rss: 213MB	item-bodies checking
time: 0.000; rss: 213MB	drop-impl checking
time: 0.182; rss: 213MB	const checking
time: 0.004; rss: 213MB	privacy checking
time: 0.002; rss: 213MB	intrinsic checking
time: 0.002; rss: 213MB	effect checking
time: 0.000; rss: 213MB	match checking
time: 0.003; rss: 213MB	liveness checking
time: 0.002; rss: 213MB	rvalue checking
time: 0.299; rss: 277MB	MIR dump
  time: 0.000; rss: 277MB	SimplifyCfg
  time: 0.012; rss: 277MB	QualifyAndPromoteConstants
  time: 0.037; rss: 277MB	TypeckMir
  time: 0.000; rss: 277MB	SimplifyBranches
  time: 0.000; rss: 277MB	SimplifyCfg
time: 0.049; rss: 277MB	MIR cleanup and validation
time: 0.004; rss: 277MB	borrow checking
time: 0.000; rss: 277MB	reachability checking
time: 0.004; rss: 277MB	death checking
time: 0.000; rss: 277MB	unused lib feature checking
time: 0.175; rss: 277MB	lint checking
time: 0.001; rss: 277MB	resolving dependency formats
  time: 0.000; rss: 277MB	NoLandingPads
  time: 0.000; rss: 277MB	SimplifyCfg
  time: 0.007; rss: 277MB	EraseRegions
  time: 0.000; rss: 277MB	AddCallGuards
  time: 0.000; rss: 277MB	ElaborateDrops
  time: 0.000; rss: 277MB	NoLandingPads
  time: 0.000; rss: 277MB	SimplifyCfg
  time: 0.007; rss: 277MB	InstCombine
  time: 0.000; rss: 277MB	Deaggregator
  time: 0.000; rss: 277MB	CopyPropagation
  time: 0.009; rss: 277MB	SimplifyLocals
  time: 0.000; rss: 277MB	AddCallGuards
  time: 0.000; rss: 277MB	PreTrans
time: 0.023; rss: 277MB	MIR optimisations
  time: 0.000; rss: 277MB	write metadata
  time: 0.006; rss: 279MB	translation item collection
  time: 0.000; rss: 279MB	codegen unit partitioning
  time: 0.000; rss: 305MB	internalize symbols
time: 0.273; rss: 305MB	translation
time: 0.000; rss: 305MB	assert dep graph
time: 0.000; rss: 305MB	serialize dep graph
  time: 0.022; rss: 127MB	llvm function passes [0]
  time: 0.000; rss: 127MB	llvm module passes [0]
  time: 0.323; rss: 126MB	codegen passes [0]
  time: 0.000; rss: 126MB	codegen passes [0]
time: 0.347; rss: 126MB	LLVM passes
time: 0.000; rss: 126MB	serialize work products
  time: 0.079; rss: 91MB	running linker
time: 0.080; rss: 91MB	linking
done
