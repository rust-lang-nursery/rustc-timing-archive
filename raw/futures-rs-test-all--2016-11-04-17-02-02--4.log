commit 81601cd3a393d1cb8ca82eb1b2270d24c5d7724f
Merge: ccfc38f f0e6b90
Author: bors <bors@rust-lang.org>
Date:   Fri Nov 4 10:40:30 2016 -0700

    Auto merge of #37306 - bluss:trusted-len, r=alexcrichton
    
    Add Iterator trait TrustedLen to enable better FromIterator / Extend
    
    This trait attempts to improve FromIterator / Extend code by enabling it to trust the iterator to produce an exact number of elements, which means that reallocation needs to happen only once and is moved out of the loop.
    
    `TrustedLen` differs from `ExactSizeIterator` in that it attempts to include _more_ iterators by allowing for the case that the iterator's len does not fit in `usize`. Consumers must check for this case (for example they could panic, since they can't allocate a collection of that size).
    
    For example, chain can be TrustedLen and all numerical ranges can be TrustedLen. All they need to do is to report an exact size if it fits in `usize`, and `None` as the upper bound otherwise.
    
    The trait describes its contract like this:
    
    ```
    An iterator that reports an accurate length using size_hint.
    
    The iterator reports a size hint where it is either exact
    (lower bound is equal to upper bound), or the upper bound is `None`.
    The upper bound must only be `None` if the actual iterator length is
    larger than `usize::MAX`.
    
    The iterator must produce exactly the number of elements it reported.
    
    This trait must only be implemented when the contract is upheld.
    Consumers of this trait must inspect `.size_hint()`â€™s upper bound.
    ```
    
    Fixes #37232
rustc: ./futures-rs-test-all
cargo rustc --test all -- -Ztime-passes -Zinput-stats
   Compiling futures v0.1.0 (file:///root/benchmarks/futures-rs-test-all)
time: 0.003; rss: 43MB	parsing
Lines of code:             412
Pre-expansion node count:  5522
time: 0.000; rss: 43MB	recursion limit
time: 0.000; rss: 43MB	crate injection
time: 0.000; rss: 43MB	plugin loading
time: 0.000; rss: 43MB	plugin registration
time: 0.022; rss: 69MB	expansion
time: 0.001; rss: 69MB	maybe building test harness
time: 0.000; rss: 69MB	maybe creating a macro crate
Post-expansion node count: 10623
time: 0.000; rss: 69MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 69MB	complete gated feature checking
time: 0.000; rss: 69MB	early lint checks
time: 0.000; rss: 69MB	AST validation
time: 0.003; rss: 69MB	name resolution
time: 0.001; rss: 69MB	lowering ast -> hir
time: 0.000; rss: 69MB	indexing hir
time: 0.000; rss: 69MB	attribute checking
time: 0.000; rss: 69MB	language item collection
time: 0.000; rss: 69MB	lifetime resolution
time: 0.000; rss: 69MB	looking for entry point
time: 0.000; rss: 69MB	looking for plugin registrar
time: 0.001; rss: 69MB	region resolution
time: 0.000; rss: 69MB	loop checking
time: 0.000; rss: 69MB	static item recursion checking
time: 0.005; rss: 69MB	compute_incremental_hashes_map
time: 0.000; rss: 69MB	load_dep_graph
time: 0.005; rss: 69MB	type collecting
time: 0.000; rss: 69MB	variance inference
time: 0.003; rss: 69MB	coherence checking
time: 0.012; rss: 74MB	wf checking
time: 0.002; rss: 74MB	item-types checking
time: 0.126; rss: 80MB	item-bodies checking
time: 0.000; rss: 80MB	drop-impl checking
time: 0.004; rss: 80MB	const checking
time: 0.000; rss: 80MB	privacy checking
time: 0.000; rss: 80MB	stability index
time: 0.000; rss: 80MB	intrinsic checking
time: 0.000; rss: 80MB	effect checking
time: 0.001; rss: 80MB	match checking
time: 0.001; rss: 80MB	liveness checking
time: 0.003; rss: 80MB	rvalue checking
time: 0.007; rss: 81MB	MIR dump
  time: 0.001; rss: 81MB	SimplifyCfg
  time: 0.001; rss: 81MB	QualifyAndPromoteConstants
  time: 0.002; rss: 81MB	TypeckMir
  time: 0.000; rss: 81MB	SimplifyBranches
  time: 0.001; rss: 81MB	SimplifyCfg
time: 0.005; rss: 81MB	MIR cleanup and validation
time: 0.007; rss: 81MB	borrow checking
time: 0.000; rss: 81MB	reachability checking
time: 0.000; rss: 81MB	death checking
time: 0.001; rss: 81MB	stability checking
time: 0.000; rss: 81MB	unused lib feature checking
time: 0.003; rss: 81MB	lint checking
time: 0.001; rss: 81MB	resolving dependency formats
  time: 0.000; rss: 81MB	NoLandingPads
  time: 0.000; rss: 81MB	SimplifyCfg
  time: 0.001; rss: 81MB	EraseRegions
  time: 0.000; rss: 81MB	AddCallGuards
  time: 0.005; rss: 84MB	ElaborateDrops
  time: 0.000; rss: 84MB	NoLandingPads
  time: 0.001; rss: 84MB	SimplifyCfg
  time: 0.000; rss: 84MB	InstCombine
  time: 0.000; rss: 84MB	Deaggregator
  time: 0.000; rss: 84MB	CopyPropagation
  time: 0.000; rss: 84MB	SimplifyLocals
  time: 0.000; rss: 84MB	AddCallGuards
  time: 0.000; rss: 84MB	PreTrans
time: 0.009; rss: 84MB	MIR optimisations
  time: 0.000; rss: 85MB	write metadata
  time: 0.164; rss: 93MB	translation item collection
  time: 0.019; rss: 93MB	codegen unit partitioning
  time: 0.017; rss: 147MB	internalize symbols
time: 1.216; rss: 147MB	translation
time: 0.000; rss: 147MB	assert dep graph
time: 0.000; rss: 147MB	serialize dep graph
  time: 0.084; rss: 133MB	llvm function passes [0]
  time: 0.026; rss: 134MB	llvm module passes [0]
  time: 1.796; rss: 138MB	codegen passes [0]
  time: 0.000; rss: 133MB	codegen passes [0]
time: 1.908; rss: 133MB	LLVM passes
time: 0.000; rss: 133MB	serialize work products
  time: 0.163; rss: 82MB	running linker
time: 0.165; rss: 82MB	linking
done
