commit 49c36bf16f80a9d9d4e96172b1bc8cb7279de468
Merge: ac919fc 4752367
Author: bors <bors@rust-lang.org>
Date:   Thu Nov 3 22:58:55 2016 -0700

    Auto merge of #36306 - nagisa:mir-local-cleanup, r=eddyb
    
    A way to remove otherwise unused locals from MIR
    
    There is a certain amount of desire for a pass which cleans up the provably unused variables (no assignments or reads). There has been an implementation of such pass by @scottcarr, and another (two!) implementations by me in my own dataflow efforts.
    
    PR like https://github.com/rust-lang/rust/pull/35916 proves that this pass is useful even on its own, which is why I cherry-picked it out from my dataflow effort.
    
    @nikomatsakis previously expressed concerns over this pass not seeming to be very cheap to run and therefore unsuitable for regular cleanup duties. Turns out, regular cleanup of local declarations is not at all necessary, at least now, because majority of passes simply do not (or should not) care about them. Thatâ€™s why it is viable to only run this pass once (perhaps a few more times in the future?) per function, right before translation.
    
    r? @eddyb or @nikomatsakis
rustc: ./piston-image-0.10.3
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling rustc-serialize v0.3.19
   Compiling inflate v0.1.1
   Compiling bitflags v0.7.0
   Compiling num-traits v0.1.35
   Compiling lzw v0.10.0
   Compiling gcc v0.3.35
   Compiling color_quant v1.0.0
   Compiling byteorder v0.5.3
   Compiling scoped_threadpool v0.1.7
   Compiling glob v0.2.11
   Compiling libc v0.2.16
   Compiling gif v0.9.0
   Compiling num-integer v0.1.32
   Compiling num-iter v0.1.32
   Compiling num_cpus v0.2.13
   Compiling rand v0.3.14
   Compiling miniz-sys v0.1.7
   Compiling num v0.1.35
   Compiling enum_primitive v0.1.0
   Compiling flate2 v0.2.14
   Compiling deque v0.3.1
   Compiling rayon v0.4.2
   Compiling num-bigint v0.1.35
   Compiling png v0.5.2
   Compiling jpeg-decoder v0.1.6
   Compiling num-rational v0.1.35
   Compiling image v0.10.3 (file:///root/benchmarks/piston-image-0.10.3)
time: 0.044; rss: 56MB	parsing
Lines of code:             12000
Pre-expansion node count:  90272
time: 0.000; rss: 56MB	recursion limit
time: 0.000; rss: 56MB	crate injection
time: 0.000; rss: 56MB	plugin loading
time: 0.000; rss: 56MB	plugin registration
time: 0.070; rss: 94MB	expansion
time: 0.000; rss: 94MB	maybe building test harness
time: 0.001; rss: 94MB	maybe creating a macro crate
Post-expansion node count: 148999
time: 0.000; rss: 94MB	checking for inline asm in case the target doesn't support it
time: 0.003; rss: 94MB	complete gated feature checking
time: 0.005; rss: 94MB	early lint checks
time: 0.001; rss: 94MB	AST validation
time: 0.020; rss: 98MB	name resolution
time: 0.012; rss: 105MB	lowering ast -> hir
time: 0.002; rss: 109MB	indexing hir
time: 0.002; rss: 109MB	attribute checking
time: 0.001; rss: 97MB	language item collection
time: 0.002; rss: 97MB	lifetime resolution
time: 0.000; rss: 97MB	looking for entry point
time: 0.000; rss: 97MB	looking for plugin registrar
time: 0.010; rss: 103MB	region resolution
time: 0.001; rss: 103MB	loop checking
time: 0.001; rss: 103MB	static item recursion checking
time: 0.077; rss: 102MB	compute_incremental_hashes_map
time: 0.000; rss: 102MB	load_dep_graph
time: 0.016; rss: 105MB	type collecting
time: 0.000; rss: 105MB	variance inference
time: 0.025; rss: 108MB	coherence checking
time: 0.073; rss: 110MB	wf checking
time: 0.134; rss: 117MB	item-types checking
time: 0.781; rss: 129MB	item-bodies checking
time: 0.000; rss: 129MB	drop-impl checking
time: 0.052; rss: 129MB	const checking
time: 0.009; rss: 129MB	privacy checking
time: 0.001; rss: 129MB	stability index
time: 0.007; rss: 129MB	intrinsic checking
time: 0.003; rss: 129MB	effect checking
time: 0.015; rss: 129MB	match checking
time: 0.010; rss: 130MB	liveness checking
time: 0.042; rss: 129MB	rvalue checking
time: 0.096; rss: 172MB	MIR dump
  time: 0.011; rss: 173MB	SimplifyCfg
  time: 0.020; rss: 173MB	QualifyAndPromoteConstants
  time: 0.022; rss: 173MB	TypeckMir
  time: 0.001; rss: 173MB	SimplifyBranches
  time: 0.005; rss: 173MB	SimplifyCfg
time: 0.059; rss: 173MB	MIR cleanup and validation
time: 0.115; rss: 173MB	borrow checking
time: 0.003; rss: 173MB	reachability checking
time: 0.008; rss: 173MB	death checking
time: 0.009; rss: 175MB	stability checking
time: 0.000; rss: 175MB	unused lib feature checking
time: 0.066; rss: 175MB	lint checking
time: 0.000; rss: 175MB	resolving dependency formats
  time: 0.001; rss: 175MB	NoLandingPads
  time: 0.005; rss: 175MB	SimplifyCfg
  time: 0.012; rss: 175MB	EraseRegions
  time: 0.002; rss: 175MB	AddCallGuards
  time: 0.043; rss: 179MB	ElaborateDrops
  time: 0.001; rss: 179MB	NoLandingPads
  time: 0.009; rss: 179MB	SimplifyCfg
  time: 0.006; rss: 179MB	InstCombine
  time: 0.002; rss: 179MB	Deaggregator
  time: 0.000; rss: 179MB	CopyPropagation
  time: 0.007; rss: 179MB	SimplifyLocals
  time: 0.002; rss: 179MB	AddCallGuards
  time: 0.000; rss: 179MB	PreTrans
time: 0.089; rss: 179MB	MIR optimisations
  time: 0.015; rss: 180MB	write metadata
  time: 0.372; rss: 194MB	translation item collection
  time: 0.025; rss: 196MB	codegen unit partitioning
  time: 0.022; rss: 316MB	internalize symbols
time: 2.519; rss: 316MB	translation
time: 0.000; rss: 316MB	assert dep graph
time: 0.000; rss: 316MB	serialize dep graph
  time: 0.206; rss: 224MB	llvm function passes [0]
  time: 0.083; rss: 227MB	llvm module passes [0]
  time: 4.142; rss: 231MB	codegen passes [0]
  time: 0.000; rss: 231MB	codegen passes [0]
time: 4.736; rss: 231MB	LLVM passes
time: 0.000; rss: 231MB	serialize work products
time: 0.139; rss: 98MB	linking
done
