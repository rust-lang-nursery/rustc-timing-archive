commit bed32d83fcd1337e962a58fd04fae6b8503e3283
Merge: 28c9fda 552eda7
Author: bors <bors@rust-lang.org>
Date:   Tue Apr 12 04:17:36 2016 -0700

    Auto merge of #32804 - alexcrichton:stabilize-1.9, r=brson
    
    std: Stabilize APIs for the 1.9 release
    
    This commit applies all stabilizations, renamings, and deprecations that the
    library team has decided on for the upcoming 1.9 release. All tracking issues
    have gone through a cycle-long "final comment period" and the specific APIs
    stabilized/deprecated are:
    
    Stable
    
    * `std::panic`
    * `std::panic::catch_unwind` (renamed from `recover`)
    * `std::panic::resume_unwind` (renamed from `propagate`)
    * `std::panic::AssertUnwindSafe` (renamed from `AssertRecoverSafe`)
    * `std::panic::UnwindSafe` (renamed from `RecoverSafe`)
    * `str::is_char_boundary`
    * `<*const T>::as_ref`
    * `<*mut T>::as_ref`
    * `<*mut T>::as_mut`
    * `AsciiExt::make_ascii_uppercase`
    * `AsciiExt::make_ascii_lowercase`
    * `char::decode_utf16`
    * `char::DecodeUtf16`
    * `char::DecodeUtf16Error`
    * `char::DecodeUtf16Error::unpaired_surrogate`
    * `BTreeSet::take`
    * `BTreeSet::replace`
    * `BTreeSet::get`
    * `HashSet::take`
    * `HashSet::replace`
    * `HashSet::get`
    * `OsString::with_capacity`
    * `OsString::clear`
    * `OsString::capacity`
    * `OsString::reserve`
    * `OsString::reserve_exact`
    * `OsStr::is_empty`
    * `OsStr::len`
    * `std::os::unix::thread`
    * `RawPthread`
    * `JoinHandleExt`
    * `JoinHandleExt::as_pthread_t`
    * `JoinHandleExt::into_pthread_t`
    * `HashSet::hasher`
    * `HashMap::hasher`
    * `CommandExt::exec`
    * `File::try_clone`
    * `SocketAddr::set_ip`
    * `SocketAddr::set_port`
    * `SocketAddrV4::set_ip`
    * `SocketAddrV4::set_port`
    * `SocketAddrV6::set_ip`
    * `SocketAddrV6::set_port`
    * `SocketAddrV6::set_flowinfo`
    * `SocketAddrV6::set_scope_id`
    * `<[T]>::copy_from_slice`
    * `ptr::read_volatile`
    * `ptr::write_volatile`
    * The `#[deprecated]` attribute
    * `OpenOptions::create_new`
    
    Deprecated
    
    * `std::raw::Slice` - use raw parts of `slice` module instead
    * `std::raw::Repr` - use raw parts of `slice` module instead
    * `str::char_range_at` - use slicing plus `chars()` plus `len_utf8`
    * `str::char_range_at_reverse` - use slicing plus `chars().rev()` plus `len_utf8`
    * `str::char_at` - use slicing plus `chars()`
    * `str::char_at_reverse` - use slicing plus `chars().rev()`
    * `str::slice_shift_char` - use `chars()` plus `Chars::as_str`
    * `CommandExt::session_leader` - use `before_exec` instead.
    
    Closes #27719
    cc #27751 (deprecating the `Slice` bits)
    Closes #27754
    Closes #27780
    Closes #27809
    Closes #27811
    Closes #27830
    Closes #28050
    Closes #29453
    Closes #29791
    Closes #29935
    Closes #30014
    Closes #30752
    Closes #31262
    cc #31398 (still need to deal with `before_exec`)
    Closes #31405
    Closes #31572
    Closes #31755
    Closes #31756
rustc: ./jld-day15-parser
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling day15 v0.1.0 (file:///root/benchmarks/jld-day15-parser)
time: 0.001; rss: 35MB	parsing
Lines of code:             72
Pre-expansion node count:  673
time: 0.000; rss: 39MB	configuration 1
time: 0.000; rss: 39MB	recursion limit
time: 0.000; rss: 39MB	gated macro checking
time: 0.000; rss: 39MB	crate injection
time: 0.003; rss: 42MB	macro loading
time: 0.000; rss: 42MB	plugin loading
time: 0.000; rss: 42MB	plugin registration
time: 0.002; rss: 42MB	expansion
time: 0.000; rss: 42MB	complete gated feature checking 1
time: 0.000; rss: 42MB	configuration 2
time: 0.000; rss: 42MB	gated configuration checking
time: 0.000; rss: 42MB	maybe building test harness
time: 0.000; rss: 42MB	prelude injection
time: 0.000; rss: 42MB	checking that all macro invocations are gone
time: 0.000; rss: 42MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 42MB	complete gated feature checking 2
time: 0.000; rss: 42MB	const fn bodies and arguments
Post-expansion node count: 1176
time: 0.000; rss: 42MB	assigning node ids
time: 0.000; rss: 42MB	lowering ast -> hir
time: 0.000; rss: 46MB	indexing hir
time: 0.000; rss: 46MB	attribute checking
time: 0.000; rss: 46MB	early lint checks
time: 0.001; rss: 46MB	external crate/lib resolution
time: 0.000; rss: 46MB	language item collection
time: 0.001; rss: 51MB	resolution
time: 0.000; rss: 51MB	lifetime resolution
time: 0.000; rss: 51MB	looking for entry point
time: 0.000; rss: 51MB	looking for plugin registrar
time: 0.000; rss: 51MB	region resolution
time: 0.000; rss: 51MB	loop checking
time: 0.000; rss: 51MB	static item recursion checking
time: 0.000; rss: 51MB	load_dep_graph
time: 0.001; rss: 55MB	type collecting
time: 0.000; rss: 55MB	variance inference
time: 0.005; rss: 59MB	coherence checking
time: 0.007; rss: 67MB	wf checking
time: 0.000; rss: 67MB	item-types checking
time: 1.651; rss: 140MB	item-bodies checking
time: 0.000; rss: 140MB	drop-impl checking
time: 0.001; rss: 140MB	const checking
time: 0.000; rss: 140MB	privacy checking
time: 0.000; rss: 140MB	stability index
time: 0.000; rss: 140MB	intrinsic checking
time: 0.000; rss: 140MB	effect checking
time: 0.000; rss: 140MB	match checking
time: 0.000; rss: 140MB	liveness checking
time: 0.002; rss: 140MB	rvalue checking
time: 0.001; rss: 141MB	MIR dump
time: 0.000; rss: 141MB	MIR passes
time: 0.001; rss: 141MB	borrow checking
time: 0.000; rss: 141MB	reachability checking
time: 0.000; rss: 141MB	death checking
time: 0.000; rss: 141MB	stability checking
time: 0.000; rss: 141MB	unused lib feature checking
time: 0.004; rss: 143MB	lint checking
time: 0.001; rss: 143MB	resolving dependency formats
time: 0.000; rss: 144MB	Prepare MIR codegen passes
  time: 12.942; rss: 186MB	translation item collection
  time: 0.000; rss: 228MB	write metadata
time: 40.451; rss: 228MB	translation
time: 0.000; rss: 228MB	assert dep graph
time: 0.000; rss: 228MB	serialize dep graph
  time: 0.014; rss: 104MB	llvm function passes [0]
  time: 0.001; rss: 104MB	llvm module passes [0]
  time: 0.272; rss: 109MB	codegen passes [0]
  time: 0.000; rss: 103MB	codegen passes [0]
time: 0.295; rss: 102MB	LLVM passes
  time: 0.113; rss: 102MB	running linker
time: 0.113; rss: 102MB	linking
done
