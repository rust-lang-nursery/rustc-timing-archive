commit 38a959a543dfc70a67e64f7d369ed6c9e12fc806
Merge: 57f971b 74bb594
Author: bors <bors@rust-lang.org>
Date:   Tue Nov 8 02:06:45 2016 -0800

    Auto merge of #36843 - petrochenkov:dotstab, r=nikomatsakis
    
    Stabilize `..` in tuple (struct) patterns
    
    I'd like to nominate `..` in tuple and tuple struct patterns for stabilization.
    This feature is a relatively small extension to existing stable functionality and doesn't have known blockers.
    The feature first appeared in Rust 1.10 6 months ago.
    An example of use: https://github.com/rust-lang/rust/pull/36203
    
    Closes https://github.com/rust-lang/rust/issues/33627
    r? @nikomatsakis
rustc: ./inflate-0.1.0
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling inflate v0.1.0 (file:///root/benchmarks/inflate-0.1.0)
time: 0.003; rss: 43MB	parsing
Lines of code:             956
Pre-expansion node count:  4740
time: 0.000; rss: 43MB	recursion limit
time: 0.000; rss: 43MB	crate injection
time: 0.000; rss: 43MB	plugin loading
time: 0.000; rss: 43MB	plugin registration
time: 0.058; rss: 72MB	expansion
time: 0.000; rss: 72MB	maybe building test harness
time: 0.000; rss: 72MB	maybe creating a macro crate
Post-expansion node count: 55750
time: 0.000; rss: 72MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 72MB	complete gated feature checking
time: 0.002; rss: 72MB	early lint checks
time: 0.000; rss: 72MB	AST validation
time: 0.008; rss: 74MB	name resolution
time: 0.004; rss: 76MB	lowering ast -> hir
time: 0.001; rss: 78MB	indexing hir
time: 0.001; rss: 78MB	attribute checking
time: 0.000; rss: 74MB	language item collection
time: 0.001; rss: 74MB	lifetime resolution
time: 0.000; rss: 74MB	looking for entry point
time: 0.000; rss: 74MB	looking for plugin registrar
time: 0.003; rss: 75MB	region resolution
time: 0.000; rss: 75MB	loop checking
time: 0.000; rss: 75MB	static item recursion checking
time: 0.019; rss: 75MB	compute_incremental_hashes_map
time: 0.000; rss: 75MB	load_dep_graph
time: 0.001; rss: 76MB	type collecting
time: 0.000; rss: 76MB	variance inference
time: 0.008; rss: 78MB	coherence checking
time: 0.001; rss: 78MB	wf checking
time: 0.001; rss: 78MB	item-types checking
time: 1.693; rss: 93MB	item-bodies checking
time: 0.000; rss: 93MB	drop-impl checking
time: 0.016; rss: 90MB	const checking
time: 0.001; rss: 90MB	privacy checking
time: 0.000; rss: 90MB	stability index
time: 0.000; rss: 90MB	intrinsic checking
time: 0.000; rss: 90MB	effect checking
time: 0.002; rss: 90MB	match checking
time: 0.065; rss: 90MB	liveness checking
time: 0.012; rss: 90MB	rvalue checking
time: 0.039; rss: 112MB	MIR dump
  time: 0.007; rss: 111MB	SimplifyCfg
  time: 0.005; rss: 111MB	QualifyAndPromoteConstants
  time: 0.006; rss: 111MB	TypeckMir
  time: 0.000; rss: 111MB	SimplifyBranches
  time: 0.002; rss: 111MB	SimplifyCfg
time: 0.020; rss: 111MB	MIR cleanup and validation
time: 0.200; rss: 109MB	borrow checking
time: 0.000; rss: 109MB	reachability checking
time: 0.003; rss: 109MB	death checking
time: 0.002; rss: 109MB	stability checking
time: 0.000; rss: 109MB	unused lib feature checking
time: 0.017; rss: 112MB	lint checking
time: 0.000; rss: 112MB	resolving dependency formats
  time: 0.000; rss: 112MB	NoLandingPads
  time: 0.002; rss: 112MB	SimplifyCfg
  time: 0.003; rss: 112MB	EraseRegions
  time: 0.001; rss: 112MB	AddCallGuards
  time: 0.198; rss: 114MB	ElaborateDrops
  time: 0.000; rss: 114MB	NoLandingPads
  time: 0.006; rss: 113MB	SimplifyCfg
  time: 0.003; rss: 113MB	InstCombine
  time: 0.000; rss: 113MB	Deaggregator
  time: 0.000; rss: 113MB	CopyPropagation
  time: 0.003; rss: 113MB	SimplifyLocals
  time: 0.001; rss: 113MB	AddCallGuards
  time: 0.000; rss: 113MB	PreTrans
time: 0.217; rss: 113MB	MIR optimisations
  time: 0.001; rss: 113MB	write metadata
  time: 0.009; rss: 114MB	translation item collection
  time: 0.001; rss: 114MB	codegen unit partitioning
  time: 0.001; rss: 128MB	internalize symbols
time: 0.151; rss: 128MB	translation
time: 0.000; rss: 128MB	assert dep graph
time: 0.000; rss: 128MB	serialize dep graph
  time: 0.029; rss: 89MB	llvm function passes [0]
  time: 0.005; rss: 90MB	llvm module passes [0]
  time: 0.673; rss: 94MB	codegen passes [0]
  time: 0.000; rss: 93MB	codegen passes [0]
time: 0.741; rss: 93MB	LLVM passes
time: 0.000; rss: 93MB	serialize work products
time: 0.019; rss: 83MB	linking
done
