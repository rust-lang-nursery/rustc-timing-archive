commit da7f8c540b47c5bb063356bf5ad05a6a49ed0ff1
Merge: 54c133d 8d5b523
Author: bors <bors@rust-lang.org>
Date:   Mon Oct 17 00:31:25 2016 -0700

    Auto merge of #37153 - michaelwoerister:spread-arg-debuginfo, r=eddyb
    
    debuginfo: Handle spread_arg case in MIR-trans in a more stable way.
    
    Use `VariableAccess::DirectVariable` instead of `VariableAccess::IndirectVariable` in order not to make LLVM's SROA angry. This is a step towards fixing #36774 and #35547. At least, I can build Cargo with optimizations + debuginfo again.
    
    r? @eddyb
rustc: ./inflate-0.1.0
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling inflate v0.1.0 (file:///root/benchmarks/inflate-0.1.0)
time: 0.004; rss: 43MB	parsing
Lines of code:             956
Pre-expansion node count:  4740
time: 0.000; rss: 43MB	recursion limit
time: 0.000; rss: 43MB	crate injection
time: 0.000; rss: 43MB	plugin loading
time: 0.000; rss: 43MB	plugin registration
time: 0.076; rss: 71MB	expansion
time: 0.000; rss: 71MB	maybe building test harness
time: 0.000; rss: 71MB	maybe creating a macro crate
Post-expansion node count: 55750
time: 0.000; rss: 71MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 71MB	complete gated feature checking
time: 0.002; rss: 71MB	early lint checks
time: 0.000; rss: 71MB	AST validation
time: 0.008; rss: 73MB	name resolution
time: 0.005; rss: 77MB	lowering ast -> hir
time: 0.001; rss: 79MB	indexing hir
time: 0.001; rss: 79MB	attribute checking
time: 0.000; rss: 76MB	language item collection
time: 0.001; rss: 76MB	lifetime resolution
time: 0.000; rss: 76MB	looking for entry point
time: 0.000; rss: 76MB	looking for plugin registrar
time: 0.003; rss: 76MB	region resolution
time: 0.000; rss: 76MB	loop checking
time: 0.000; rss: 76MB	static item recursion checking
time: 0.021; rss: 77MB	compute_incremental_hashes_map
time: 0.000; rss: 77MB	load_dep_graph
time: 0.001; rss: 77MB	type collecting
time: 0.000; rss: 77MB	variance inference
time: 0.009; rss: 79MB	coherence checking
time: 0.001; rss: 79MB	wf checking
time: 0.002; rss: 80MB	item-types checking
time: 2.429; rss: 93MB	item-bodies checking
time: 0.000; rss: 93MB	drop-impl checking
time: 0.017; rss: 94MB	const checking
time: 0.001; rss: 94MB	privacy checking
time: 0.000; rss: 94MB	stability index
time: 0.000; rss: 94MB	intrinsic checking
time: 0.001; rss: 94MB	effect checking
time: 0.003; rss: 94MB	match checking
time: 0.067; rss: 92MB	liveness checking
time: 0.013; rss: 92MB	rvalue checking
time: 0.037; rss: 112MB	MIR dump
  time: 0.008; rss: 111MB	SimplifyCfg
  time: 0.005; rss: 111MB	QualifyAndPromoteConstants
  time: 0.007; rss: 111MB	TypeckMir
  time: 0.000; rss: 111MB	SimplifyBranches
  time: 0.003; rss: 111MB	SimplifyCfg
time: 0.023; rss: 111MB	MIR passes
time: 0.221; rss: 113MB	borrow checking
time: 0.000; rss: 113MB	reachability checking
time: 0.003; rss: 113MB	death checking
time: 0.002; rss: 114MB	stability checking
time: 0.000; rss: 114MB	unused lib feature checking
time: 0.018; rss: 114MB	lint checking
time: 0.000; rss: 114MB	resolving dependency formats
  time: 0.000; rss: 114MB	NoLandingPads
  time: 0.003; rss: 114MB	SimplifyCfg
  time: 0.003; rss: 114MB	EraseRegions
  time: 0.001; rss: 114MB	AddCallGuards
  time: 0.199; rss: 114MB	ElaborateDrops
  time: 0.000; rss: 114MB	NoLandingPads
  time: 0.007; rss: 115MB	SimplifyCfg
  time: 0.003; rss: 115MB	InstCombine
  time: 0.000; rss: 115MB	Deaggregator
  time: 0.000; rss: 115MB	CopyPropagation
  time: 0.001; rss: 115MB	AddCallGuards
  time: 0.000; rss: 115MB	PreTrans
time: 0.216; rss: 115MB	Prepare MIR codegen passes
  time: 0.002; rss: 115MB	write metadata
  time: 0.010; rss: 115MB	translation item collection
  time: 0.001; rss: 115MB	codegen unit partitioning
  time: 0.001; rss: 129MB	internalize symbols
time: 0.164; rss: 112MB	translation
time: 0.000; rss: 112MB	assert dep graph
time: 0.000; rss: 112MB	serialize dep graph
  time: 0.029; rss: 89MB	llvm function passes [0]
  time: 0.005; rss: 89MB	llvm module passes [0]
  time: 0.666; rss: 93MB	codegen passes [0]
  time: 0.000; rss: 93MB	codegen passes [0]
time: 0.745; rss: 93MB	LLVM passes
time: 0.000; rss: 93MB	serialize work products
time: 0.046; rss: 82MB	linking
done
