commit 1cf592fa40ca4104b59b867817881ca056f408ad
Merge: 4f9812a 4ac3001
Author: bors <bors@rust-lang.org>
Date:   Wed Sep 21 19:17:24 2016 -0700

    Auto merge of #36551 - eddyb:meta-games, r=nikomatsakis
    
    Refactor away RBML from rustc_metadata.
    
    RBML and `ty{en,de}code` have had their long-overdue purge. Summary of changes:
    * Metadata is now a tree encoded in post-order and with relative backward references pointing to children nodes. With auto-deriving and type safety, this makes maintenance and adding new information to metadata painless and bug-free by default. It's also more compact and cache-friendly (cache misses should be proportional to the depth of the node being accessed, not the number of siblings as in EBML/RBML).
    * Metadata sizes have been reduced, for `libcore` it went down 16% (`8.38MB` -> `7.05MB`) and for `libstd` 14% (`3.53MB` -> `3.03MB`), while encoding more or less the same information
    * Specialization is used in the bundled `libserialize` (crates.io `rustc_serialize` remains unaffected) to customize the encoding (and more importantly, decoding) of various types, most notably those interned in the `TyCtxt`. Some of this abuses a soundness hole pending a fix (cc @aturon), but when that fix arrives, we'll move to macros 1.1 `#[derive]` and custom `TyCtxt`-aware serialization traits.
    * Enumerating children of modules from other crates is now orthogonal to describing those items via `Def` - this is a step towards bridging crate-local HIR and cross-crate metadata
    * `CrateNum` has been moved to `rustc` and both it and `NodeId` are now newtypes instead of `u32` aliases, for specializing their decoding. This is `[syntax-breaking]` (cc @Manishearth ).
    
    cc @rust-lang/compiler
rustc: ./jld-day15-parser
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling combine v1.3.0
   Compiling day15 v0.1.0 (file:///root/benchmarks/jld-day15-parser)
time: 0.001; rss: 42MB	parsing
Lines of code:             72
Pre-expansion node count:  654
time: 0.000; rss: 42MB	recursion limit
time: 0.000; rss: 42MB	crate injection
time: 0.000; rss: 42MB	plugin loading
time: 0.000; rss: 42MB	plugin registration
time: 0.018; rss: 66MB	expansion
time: 0.000; rss: 66MB	maybe building test harness
time: 0.000; rss: 66MB	maybe creating a macro crate
time: 0.000; rss: 66MB	assigning node ids
Post-expansion node count: 1155
time: 0.000; rss: 66MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 66MB	complete gated feature checking
time: 0.000; rss: 66MB	collecting defs
time: 0.003; rss: 66MB	external crate/lib resolution
time: 0.000; rss: 66MB	early lint checks
time: 0.000; rss: 66MB	AST validation
time: 0.001; rss: 66MB	name resolution
time: 0.000; rss: 66MB	lowering ast -> hir
time: 0.000; rss: 66MB	indexing hir
time: 0.000; rss: 66MB	attribute checking
time: 0.000; rss: 66MB	language item collection
time: 0.000; rss: 66MB	lifetime resolution
time: 0.000; rss: 66MB	looking for entry point
time: 0.000; rss: 66MB	looking for plugin registrar
time: 0.000; rss: 66MB	region resolution
time: 0.000; rss: 66MB	loop checking
time: 0.000; rss: 66MB	static item recursion checking
time: 0.000; rss: 70MB	compute_incremental_hashes_map
time: 0.000; rss: 70MB	load_dep_graph
time: 0.001; rss: 70MB	type collecting
time: 0.000; rss: 70MB	variance inference
time: 0.005; rss: 70MB	coherence checking
time: 0.005; rss: 70MB	wf checking
time: 0.000; rss: 70MB	item-types checking
time: 0.033; rss: 77MB	item-bodies checking
time: 0.000; rss: 77MB	drop-impl checking
time: 0.001; rss: 77MB	const checking
time: 0.000; rss: 77MB	privacy checking
time: 0.000; rss: 77MB	stability index
time: 0.000; rss: 77MB	intrinsic checking
time: 0.000; rss: 77MB	effect checking
time: 0.000; rss: 77MB	match checking
time: 0.000; rss: 77MB	liveness checking
time: 0.000; rss: 77MB	rvalue checking
time: 0.001; rss: 77MB	MIR dump
  time: 0.000; rss: 77MB	SimplifyCfg
  time: 0.000; rss: 77MB	QualifyAndPromoteConstants
  time: 0.000; rss: 77MB	TypeckMir
  time: 0.000; rss: 77MB	SimplifyBranches
  time: 0.000; rss: 77MB	SimplifyCfg
time: 0.001; rss: 77MB	MIR passes
time: 0.001; rss: 77MB	borrow checking
time: 0.000; rss: 77MB	reachability checking
time: 0.000; rss: 77MB	death checking
time: 0.000; rss: 77MB	stability checking
time: 0.000; rss: 77MB	unused lib feature checking
time: 0.003; rss: 77MB	lint checking
time: 0.001; rss: 77MB	resolving dependency formats
  time: 0.000; rss: 77MB	NoLandingPads
  time: 0.000; rss: 77MB	SimplifyCfg
  time: 0.000; rss: 77MB	EraseRegions
  time: 0.000; rss: 77MB	AddCallGuards
  time: 0.001; rss: 81MB	ElaborateDrops
  time: 0.000; rss: 81MB	NoLandingPads
  time: 0.000; rss: 81MB	SimplifyCfg
  time: 0.003; rss: 81MB	Deaggregator
  time: 0.000; rss: 81MB	AddCallGuards
  time: 0.000; rss: 81MB	PreTrans
time: 0.005; rss: 81MB	Prepare MIR codegen passes
  time: 0.000; rss: 81MB	write metadata
  time: 0.198; rss: 87MB	translation item collection
  time: 0.003; rss: 87MB	codegen unit partitioning
  time: 0.006; rss: 98MB	internalize symbols
time: 0.759; rss: 98MB	translation
time: 0.000; rss: 98MB	assert dep graph
time: 0.000; rss: 98MB	serialize dep graph
  time: 0.017; rss: 89MB	llvm function passes [0]
  time: 0.002; rss: 89MB	llvm module passes [0]
  time: 0.350; rss: 96MB	codegen passes [0]
  time: 0.000; rss: 96MB	codegen passes [0]
time: 0.370; rss: 96MB	LLVM passes
time: 0.000; rss: 96MB	serialize work products
  time: 0.119; rss: 86MB	running linker
time: 0.120; rss: 86MB	linking
done
