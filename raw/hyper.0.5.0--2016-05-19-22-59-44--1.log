commit 1ec80f65fbc5b16e2b9238ee9888ca242bbb7c5e
Merge: 764ef92 8169fa2
Author: bors <bors@rust-lang.org>
Date:   Thu May 19 16:22:50 2016 -0700

    Auto merge of #33103 - ranma42:escape-unicode-last, r=alexcrichton
    
    Implement `last` for `EscapeUnicode`
    
    The implementation is quite trivial as the last character is always `'{'`.
    As a side-effect it also improves the implementation of `last` for `EscapeUnicode`.
    
    Part of #24214, split from #31049.
    
    Maybe this (and the other changes that I will split from #31049) should wait for a test like `ed_iterator_specializations` to be added. Would it be sufficient to do the same for each possible escape length?
rustc: ./hyper.0.5.0
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling hyper v0.5.0 (file:///root/benchmarks/hyper.0.5.0)
time: 0.031; rss: 53MB	parsing
Lines of code:             9154
Pre-expansion node count:  45851
time: 0.008; rss: 57MB	configuration 1
time: 0.000; rss: 57MB	recursion limit
time: 0.000; rss: 57MB	crate injection
time: 0.020; rss: 94MB	macro loading
time: 0.000; rss: 94MB	plugin loading
time: 0.000; rss: 94MB	plugin registration
time: 0.187; rss: 102MB	expansion
time: 0.029; rss: 102MB	configuration 2
time: 0.000; rss: 102MB	gated configuration checking
time: 0.011; rss: 102MB	maybe building test harness
time: 0.008; rss: 102MB	prelude injection
time: 0.001; rss: 102MB	checking that all macro invocations are gone
time: 0.000; rss: 102MB	checking for inline asm in case the target doesn't support it
time: 0.002; rss: 102MB	complete gated feature checking
Post-expansion node count: 103616
time: 0.008; rss: 102MB	assigning node ids
time: 0.003; rss: 104MB	collecting defs
time: 0.010; rss: 113MB	external crate/lib resolution
time: 0.006; rss: 113MB	early lint checks
time: 0.024; rss: 120MB	name resolution
time: 0.010; rss: 126MB	lowering ast -> hir
time: 0.002; rss: 128MB	indexing hir
time: 0.001; rss: 128MB	attribute checking
time: 0.001; rss: 119MB	language item collection
time: 0.002; rss: 119MB	lifetime resolution
time: 0.000; rss: 119MB	looking for entry point
time: 0.000; rss: 119MB	looking for plugin registrar
time: 0.006; rss: 122MB	region resolution
time: 0.001; rss: 122MB	loop checking
time: 0.001; rss: 122MB	static item recursion checking
time: 0.000; rss: 122MB	load_dep_graph
time: 0.018; rss: 125MB	type collecting
time: 0.000; rss: 125MB	variance inference
time: 0.044; rss: 131MB	coherence checking
time: 0.091; rss: 132MB	wf checking
time: 0.035; rss: 132MB	item-types checking
time: 0.512; rss: 142MB	item-bodies checking
time: 0.000; rss: 142MB	drop-impl checking
time: 0.043; rss: 144MB	const checking
time: 0.008; rss: 144MB	privacy checking
time: 0.001; rss: 144MB	stability index
time: 0.006; rss: 144MB	intrinsic checking
time: 0.002; rss: 144MB	effect checking
time: 0.014; rss: 144MB	match checking
time: 0.005; rss: 144MB	liveness checking
time: 0.030; rss: 144MB	rvalue checking
time: 0.059; rss: 155MB	MIR dump
time: 0.040; rss: 155MB	MIR passes
time: 0.070; rss: 155MB	borrow checking
time: 0.002; rss: 155MB	reachability checking
time: 0.005; rss: 155MB	death checking
time: 0.005; rss: 155MB	stability checking
time: 0.000; rss: 155MB	unused lib feature checking
time: 0.050; rss: 155MB	lint checking
time: 0.000; rss: 155MB	resolving dependency formats
time: 0.011; rss: 155MB	Prepare MIR codegen passes
  time: 0.282; rss: 163MB	translation item collection
  time: 0.008; rss: 165MB	codegen unit partitioning
  time: 0.131; rss: 291MB	write metadata
time: 1.704; rss: 291MB	translation
time: 0.001; rss: 291MB	assert dep graph
time: 0.000; rss: 291MB	serialize dep graph
  time: 0.097; rss: 179MB	llvm function passes [0]
  time: 0.049; rss: 182MB	llvm module passes [0]
  time: 1.623; rss: 185MB	codegen passes [0]
  time: 0.001; rss: 136MB	codegen passes [0]
time: 1.967; rss: 136MB	LLVM passes
time: 0.175; rss: 134MB	linking
done
