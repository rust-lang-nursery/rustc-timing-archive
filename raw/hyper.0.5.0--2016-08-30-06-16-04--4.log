commit 71ee82a8aa0c02fc2c73e84f40bdb55512d10938
Merge: addb753 02f081c
Author: bors <bors@rust-lang.org>
Date:   Tue Aug 30 00:36:19 2016 -0700

    Auto merge of #36066 - jseyfried:rollup, r=Manishearth
    
    Batch up libsyntax breaking changes
    
    Batch of the following syntax-[breaking-change] changes:
     - #35591: Add a field `span: Span` to `ast::Generics`.
     - #35618: Remove variant `Mod` of `ast::PathListItemKind` and refactor the remaining variant `ast::PathListKind::Ident` to a struct `ast::PathListKind_`.
     - #35480: Change uses of `Constness` in the AST to `Spanned<Constness>`.
      - c.f. `MethodSig`, `ItemKind`
     - #35728: Refactor `cx.pat_enum()` into `cx.pat_tuple_struct()` and `cx.pat_path()`.
     - #35850: Generalize the elements of lists in attributes from `MetaItem` to a new type `NestedMetaItem` that can represent a `MetaItem` or a literal.
     - #35917: Remove traits `AttrMetaMethods`, `AttributeMethods`, and `AttrNestedMetaItemMethods`.
      - Besides removing imports of these traits, this won't cause fallout.
     - Add a variant `Union` to `ItemKind` to future proof for `union` (c.f. #36016).
     - Remove inherent methods `attrs` and `fold_attrs` of `Annotatable`.
      - Use methods `attrs` and `map_attrs` of `HasAttrs` instead.
    
    r? @Manishearth
rustc: ./hyper.0.5.0
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling hyper v0.5.0 (file:///root/benchmarks/hyper.0.5.0)
time: 0.029; rss: 50MB	parsing
Lines of code:             9154
Pre-expansion node count:  44873
time: 0.003; rss: 50MB	configuration
time: 0.000; rss: 50MB	recursion limit
time: 0.000; rss: 50MB	crate injection
time: 0.000; rss: 50MB	plugin loading
time: 0.000; rss: 50MB	plugin registration
time: 0.092; rss: 79MB	expansion
time: 0.000; rss: 79MB	maybe building test harness
time: 0.005; rss: 79MB	assigning node ids
Post-expansion node count: 101610
time: 0.000; rss: 79MB	checking for inline asm in case the target doesn't support it
time: 0.002; rss: 79MB	complete gated feature checking
time: 0.003; rss: 81MB	collecting defs
time: 0.009; rss: 87MB	external crate/lib resolution
time: 0.004; rss: 87MB	early lint checks
time: 0.001; rss: 87MB	AST validation
time: 0.017; rss: 95MB	name resolution
time: 0.008; rss: 99MB	lowering ast -> hir
time: 0.002; rss: 101MB	indexing hir
time: 0.001; rss: 101MB	attribute checking
time: 0.001; rss: 95MB	language item collection
time: 0.002; rss: 95MB	lifetime resolution
time: 0.000; rss: 95MB	looking for entry point
time: 0.000; rss: 95MB	looking for plugin registrar
time: 0.006; rss: 99MB	region resolution
time: 0.001; rss: 99MB	loop checking
time: 0.000; rss: 99MB	static item recursion checking
time: 0.012; rss: 99MB	compute_incremental_hashes_map
time: 0.000; rss: 99MB	load_dep_graph
time: 0.022; rss: 102MB	type collecting
time: 0.000; rss: 102MB	variance inference
time: 0.034; rss: 104MB	coherence checking
time: 0.058; rss: 105MB	wf checking
time: 0.027; rss: 108MB	item-types checking
time: 0.361; rss: 118MB	item-bodies checking
time: 0.000; rss: 118MB	drop-impl checking
time: 0.038; rss: 120MB	const checking
time: 0.007; rss: 120MB	privacy checking
time: 0.001; rss: 120MB	stability index
time: 0.005; rss: 120MB	intrinsic checking
time: 0.002; rss: 120MB	effect checking
time: 0.013; rss: 120MB	match checking
time: 0.005; rss: 121MB	liveness checking
time: 0.027; rss: 121MB	rvalue checking
time: 0.052; rss: 136MB	MIR dump
time: 0.041; rss: 136MB	MIR passes
time: 0.062; rss: 136MB	borrow checking
time: 0.003; rss: 136MB	reachability checking
time: 0.005; rss: 139MB	death checking
time: 0.005; rss: 139MB	stability checking
time: 0.000; rss: 139MB	unused lib feature checking
time: 0.040; rss: 139MB	lint checking
time: 0.000; rss: 139MB	resolving dependency formats
time: 0.077; rss: 141MB	Prepare MIR codegen passes
  time: 0.054; rss: 146MB	write metadata
  time: 0.131; rss: 150MB	translation item collection
  time: 0.018; rss: 152MB	codegen unit partitioning
  time: 0.031; rss: 218MB	internalize symbols
time: 1.424; rss: 208MB	translation
time: 0.000; rss: 208MB	assert dep graph
time: 0.000; rss: 208MB	serialize dep graph
  time: 0.103; rss: 157MB	llvm function passes [0]
  time: 0.048; rss: 160MB	llvm module passes [0]
  time: 1.843; rss: 165MB	codegen passes [0]
  time: 0.001; rss: 164MB	codegen passes [0]
time: 2.176; rss: 164MB	LLVM passes
time: 0.000; rss: 164MB	serialize work products
time: 0.155; rss: 98MB	linking
done
