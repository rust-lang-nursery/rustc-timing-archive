commit be8bd82268a229be6de90dd241c9d6dc64d48b8c
Merge: 2940eb5 7cd8912
Author: bors <bors@rust-lang.org>
Date:   Tue Jun 14 07:49:56 2016 -0700

    Auto merge of #34234 - GuillaumeGomez:bad_inlining, r=steveklabnik
    
    Fix invalid inlining
    
    r? @steveklabnik
    
    So to put a context. @nox found an issue on the generated doc:
    
    ![screenshot from 2016-06-11 19-53-38](https://cloud.githubusercontent.com/assets/3050060/15987898/f7341de0-303b-11e6-9cd7-f2a6df423ee7.png)
    
    So as you can see, the two variants are on the same where they shouldn't. I found out that the issue is also on structs:
    
    ![screenshot from 2016-06-11 19-53-31](https://cloud.githubusercontent.com/assets/3050060/15987900/0f66c5de-303c-11e6-90fc-5e49d11b6903.png)
    
    And so such is the result of the PR:
    
    ![screenshot from 2016-06-12 01-15-21](https://cloud.githubusercontent.com/assets/3050060/15987904/19d9183c-303c-11e6-91c1-7c3f1163fbb0.png)
    ![screenshot from 2016-06-12 01-15-24](https://cloud.githubusercontent.com/assets/3050060/15987905/1b5d2db0-303c-11e6-8f43-9a8ad2371007.png)
rustc: ./issue-32278-big-array-of-strings
/root/rust/x86_64-unknown-linux-gnu/stage2/bin/rustc big-array-of-strings.rs -Ztime-passes -Zinput-stats
time: 0.149; rss: 68MB	parsing
Lines of code:             65577
Pre-expansion node count:  65552
time: 0.011; rss: 68MB	configuration 1
time: 0.000; rss: 68MB	recursion limit
time: 0.000; rss: 68MB	crate injection
time: 0.000; rss: 68MB	plugin loading
time: 0.000; rss: 68MB	plugin registration
time: 0.047; rss: 103MB	expansion
time: 0.000; rss: 103MB	gated configuration checking
time: 0.000; rss: 103MB	maybe building test harness
time: 0.000; rss: 103MB	checking for inline asm in case the target doesn't support it
time: 0.001; rss: 103MB	complete gated feature checking
Post-expansion node count: 65565
time: 0.007; rss: 103MB	assigning node ids
time: 0.001; rss: 103MB	collecting defs
time: 0.004; rss: 103MB	external crate/lib resolution
time: 0.008; rss: 103MB	early lint checks
time: 0.001; rss: 103MB	AST validation
time: 0.002; rss: 103MB	name resolution
time: 0.010; rss: 120MB	lowering ast -> hir
time: 0.002; rss: 122MB	indexing hir
time: 0.001; rss: 122MB	attribute checking
time: 0.001; rss: 113MB	language item collection
time: 0.001; rss: 113MB	lifetime resolution
time: 0.000; rss: 113MB	looking for entry point
time: 0.000; rss: 113MB	looking for plugin registrar
time: 0.007; rss: 121MB	region resolution
time: 0.001; rss: 121MB	loop checking
time: 0.002; rss: 121MB	static item recursion checking
time: 0.000; rss: 121MB	load_dep_graph
time: 0.000; rss: 121MB	type collecting
time: 0.000; rss: 121MB	variance inference
time: 0.005; rss: 123MB	coherence checking
time: 0.001; rss: 123MB	wf checking
time: 0.974; rss: 140MB	item-types checking
time: 0.000; rss: 140MB	item-bodies checking
time: 0.000; rss: 140MB	drop-impl checking
time: 0.019; rss: 143MB	const checking
time: 0.002; rss: 143MB	privacy checking
time: 0.001; rss: 143MB	stability index
time: 0.000; rss: 143MB	intrinsic checking
time: 0.000; rss: 143MB	effect checking
time: 0.000; rss: 143MB	match checking
time: 0.001; rss: 143MB	liveness checking
time: 0.000; rss: 143MB	rvalue checking
time: 0.053; rss: 143MB	MIR dump
time: 0.002; rss: 143MB	MIR passes
time: 0.001; rss: 143MB	borrow checking
time: 0.000; rss: 143MB	reachability checking
time: 0.001; rss: 143MB	death checking
time: 0.001; rss: 143MB	stability checking
time: 0.000; rss: 143MB	unused lib feature checking
time: 0.030; rss: 143MB	lint checking
time: 0.001; rss: 143MB	resolving dependency formats
time: 0.001; rss: 143MB	Prepare MIR codegen passes
  time: 0.000; rss: 144MB	write metadata
  time: 0.001; rss: 144MB	translation item collection
  time: 0.000; rss: 144MB	codegen unit partitioning
time: 0.089; rss: 158MB	translation
time: 0.000; rss: 158MB	assert dep graph
time: 0.000; rss: 158MB	serialize dep graph
  time: 0.003; rss: 106MB	llvm function passes [0]
  time: 0.000; rss: 106MB	llvm module passes [0]
  time: 0.161; rss: 108MB	codegen passes [0]
  time: 0.000; rss: 95MB	codegen passes [0]
time: 0.177; rss: 95MB	LLVM passes
  time: 0.189; rss: 95MB	running linker
time: 0.190; rss: 95MB	linking
done
