commit d2bc30b03fa4bf5425d080710f681f36f58f1706
Merge: 49c36bf 99234bb
Author: bors <bors@rust-lang.org>
Date:   Fri Nov 4 03:38:18 2016 -0700

    Auto merge of #37037 - Mark-Simulacrum:stack-error, r=alexcrichton
    
    Add conversions from `io:ErrorKind` to `io::Error`
    
    Filing to help with discussion around the possibility of doing this.
    
    Current changes are clearly backwards incompatible, but I think adding a new function (with a bikeshed on naming) like `Error::new_str` should be possible (or some other way of specializing the string error message case) to fix #36658.
rustc: ./html5ever-2016-08-25
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling mac v0.0.2
   Compiling encoding_index_tests v0.1.4
   Compiling serde v0.8.9
   Compiling void v1.0.2
   Compiling phf_shared v0.7.16
   Compiling libc v0.2.16
   Compiling matches v0.1.2
   Compiling log v0.3.6
   Compiling lazy_static v0.2.1
   Compiling encoding-index-tradchinese v1.20141219.5
   Compiling utf-8 v0.6.0
   Compiling encoding-index-korean v1.20141219.5
   Compiling unreachable v0.1.1
   Compiling encoding-index-singlebyte v1.20141219.5
   Compiling debug_unreachable v0.1.1
   Compiling encoding-index-japanese v1.20141219.5
   Compiling futf v0.1.2
   Compiling phf v0.7.16
   Compiling encoding-index-simpchinese v1.20141219.5
   Compiling rustc-serialize v0.3.19
   Compiling rand v0.3.14
   Compiling encoding v0.2.33
   Compiling phf_generator v0.7.16
   Compiling string_cache v0.2.29
   Compiling phf_codegen v0.7.16
   Compiling tendril v0.2.3
   Compiling html5ever v0.5.4 (file:///root/benchmarks/html5ever-2016-08-25)
time: 0.028; rss: 52MB	parsing
Lines of code:             8210
Pre-expansion node count:  52238
time: 0.000; rss: 52MB	recursion limit
time: 0.000; rss: 52MB	crate injection
time: 0.000; rss: 52MB	plugin loading
time: 0.000; rss: 52MB	plugin registration
time: 0.478; rss: 106MB	expansion
time: 0.000; rss: 106MB	maybe building test harness
time: 0.002; rss: 106MB	maybe creating a macro crate
Post-expansion node count: 163524
time: 0.000; rss: 106MB	checking for inline asm in case the target doesn't support it
time: 0.003; rss: 106MB	complete gated feature checking
time: 0.009; rss: 106MB	early lint checks
time: 0.002; rss: 106MB	AST validation
time: 0.018; rss: 109MB	name resolution
time: 0.014; rss: 119MB	lowering ast -> hir
time: 0.003; rss: 123MB	indexing hir
time: 0.002; rss: 123MB	attribute checking
time: 0.001; rss: 97MB	language item collection
time: 0.002; rss: 97MB	lifetime resolution
time: 0.000; rss: 97MB	looking for entry point
time: 0.000; rss: 97MB	looking for plugin registrar
time: 0.014; rss: 104MB	region resolution
time: 0.001; rss: 104MB	loop checking
time: 0.001; rss: 104MB	static item recursion checking
time: 0.026; rss: 104MB	compute_incremental_hashes_map
time: 0.000; rss: 104MB	load_dep_graph
time: 0.009; rss: 106MB	type collecting
time: 0.000; rss: 106MB	variance inference
time: 0.022; rss: 108MB	coherence checking
time: 0.022; rss: 109MB	wf checking
time: 0.323; rss: 117MB	item-types checking
time: 0.471; rss: 130MB	item-bodies checking
time: 0.000; rss: 130MB	drop-impl checking
time: 0.067; rss: 132MB	const checking
time: 0.007; rss: 132MB	privacy checking
time: 0.001; rss: 132MB	stability index
time: 0.003; rss: 132MB	intrinsic checking
time: 0.002; rss: 132MB	effect checking
time: 0.015; rss: 132MB	match checking
time: 0.012; rss: 128MB	liveness checking
time: 0.025; rss: 128MB	rvalue checking
time: 0.115; rss: 179MB	MIR dump
  time: 0.009; rss: 167MB	SimplifyCfg
  time: 0.014; rss: 169MB	QualifyAndPromoteConstants
  time: 0.023; rss: 169MB	TypeckMir
  time: 0.000; rss: 169MB	SimplifyBranches
  time: 0.004; rss: 169MB	SimplifyCfg
time: 0.050; rss: 169MB	MIR cleanup and validation
time: 0.089; rss: 178MB	borrow checking
time: 0.003; rss: 178MB	reachability checking
time: 0.006; rss: 178MB	death checking
time: 0.007; rss: 178MB	stability checking
time: 0.000; rss: 178MB	unused lib feature checking
time: 0.059; rss: 178MB	lint checking
time: 0.000; rss: 178MB	resolving dependency formats
  time: 0.000; rss: 178MB	NoLandingPads
  time: 0.004; rss: 178MB	SimplifyCfg
  time: 0.010; rss: 179MB	EraseRegions
  time: 0.001; rss: 179MB	AddCallGuards
  time: 0.076; rss: 181MB	ElaborateDrops
  time: 0.000; rss: 181MB	NoLandingPads
  time: 0.007; rss: 180MB	SimplifyCfg
  time: 0.008; rss: 177MB	InstCombine
  time: 0.001; rss: 177MB	Deaggregator
  time: 0.000; rss: 177MB	CopyPropagation
  time: 0.007; rss: 175MB	SimplifyLocals
  time: 0.001; rss: 175MB	AddCallGuards
  time: 0.000; rss: 175MB	PreTrans
time: 0.129; rss: 175MB	MIR optimisations
  time: 0.011; rss: 176MB	write metadata
  time: 0.044; rss: 178MB	translation item collection
  time: 0.005; rss: 179MB	codegen unit partitioning
  time: 0.005; rss: 194MB	internalize symbols
time: 0.287; rss: 194MB	translation
time: 0.000; rss: 194MB	assert dep graph
time: 0.000; rss: 194MB	serialize dep graph
  time: 0.020; rss: 103MB	llvm function passes [0]
  time: 0.012; rss: 103MB	llvm module passes [0]
  time: 0.459; rss: 108MB	codegen passes [0]
  time: 0.000; rss: 108MB	codegen passes [0]
time: 0.530; rss: 108MB	LLVM passes
time: 0.000; rss: 108MB	serialize work products
time: 0.025; rss: 91MB	linking
done
