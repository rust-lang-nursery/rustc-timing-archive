commit 1a4192804518199623fb88bf43bde69d6b0203cb
Merge: a5dac7a 4625642
Author: bors <bors@rust-lang.org>
Date:   Tue Oct 4 13:23:09 2016 -0700

    Auto merge of #36933 - alexcrichton:less-neon-again, r=eddyb
    
    rustc: Try again to disable NEON on armv7 linux
    
    This is a follow-up to #35814 which apparently didn't disable it hard enough. It
    looks like LLVM's default armv7 target enables NEON so we'd otherwise have to
    pass `-neon`, but we're already enabling armv7 with `+v7` supposedly, so let's
    try just telling LLVM that the armv7 target is arm and then enable features
    selectively.
    
    Closes #36913
rustc: ./syntex-0.42.2-incr-clean
RUSTFLAGS="-Z incremental=incr" \
    cargo rustc -p syntex_syntax -- -Ztime-passes -Zinput-stats -Z incremental-info
   Compiling syntex_syntax v0.42.0
time: 0.107; rss: 75MB	parsing
Lines of code:             33687
Pre-expansion node count:  224033
time: 0.000; rss: 75MB	recursion limit
time: 0.000; rss: 75MB	crate injection
time: 0.000; rss: 75MB	plugin loading
time: 0.000; rss: 75MB	plugin registration
time: 0.273; rss: 147MB	expansion
time: 0.000; rss: 147MB	maybe building test harness
time: 0.007; rss: 147MB	maybe creating a macro crate
Post-expansion node count: 641571
time: 0.000; rss: 147MB	checking for inline asm in case the target doesn't support it
time: 0.013; rss: 147MB	complete gated feature checking
time: 0.023; rss: 147MB	early lint checks
time: 0.008; rss: 147MB	AST validation
time: 0.084; rss: 162MB	name resolution
time: 0.050; rss: 203MB	lowering ast -> hir
time: 0.009; rss: 211MB	indexing hir
time: 0.007; rss: 211MB	attribute checking
time: 0.006; rss: 161MB	language item collection
time: 0.013; rss: 161MB	lifetime resolution
time: 0.000; rss: 161MB	looking for entry point
time: 0.000; rss: 161MB	looking for plugin registrar
time: 0.045; rss: 172MB	region resolution
time: 0.006; rss: 172MB	loop checking
time: 0.006; rss: 172MB	static item recursion checking
time: 0.261; rss: 173MB	compute_incremental_hashes_map
time: 0.000; rss: 173MB	load_dep_graph
time: 0.079; rss: 175MB	type collecting
time: 0.001; rss: 175MB	variance inference
time: 0.038; rss: 178MB	coherence checking
time: 0.098; rss: 180MB	wf checking
time: 0.191; rss: 187MB	item-types checking
time: 3.921; rss: 242MB	item-bodies checking
time: 0.000; rss: 242MB	drop-impl checking
time: 0.313; rss: 243MB	const checking
time: 0.057; rss: 243MB	privacy checking
time: 0.008; rss: 243MB	stability index
time: 0.023; rss: 243MB	intrinsic checking
time: 0.019; rss: 243MB	effect checking
time: 0.060; rss: 243MB	match checking
time: 0.058; rss: 237MB	liveness checking
time: 0.285; rss: 237MB	rvalue checking
time: 0.424; rss: 426MB	MIR dump
  time: 0.057; rss: 429MB	SimplifyCfg
  time: 0.083; rss: 429MB	QualifyAndPromoteConstants
  time: 0.110; rss: 429MB	TypeckMir
  time: 0.004; rss: 429MB	SimplifyBranches
  time: 0.037; rss: 429MB	SimplifyCfg
time: 0.292; rss: 429MB	MIR passes
time: 0.687; rss: 429MB	borrow checking
time: 0.022; rss: 429MB	reachability checking
time: 0.046; rss: 429MB	death checking
time: 0.043; rss: 429MB	stability checking
time: 0.000; rss: 429MB	unused lib feature checking
time: 0.226; rss: 429MB	lint checking
time: 0.000; rss: 429MB	resolving dependency formats
  time: 0.003; rss: 429MB	NoLandingPads
  time: 0.027; rss: 429MB	SimplifyCfg
  time: 0.073; rss: 442MB	EraseRegions
  time: 0.011; rss: 442MB	AddCallGuards
  time: 1.051; rss: 457MB	ElaborateDrops
  time: 0.003; rss: 457MB	NoLandingPads
  time: 0.052; rss: 457MB	SimplifyCfg
  time: 0.030; rss: 457MB	InstCombine
  time: 0.012; rss: 457MB	Deaggregator
  time: 0.003; rss: 457MB	CopyPropagation
  time: 0.009; rss: 457MB	AddCallGuards
  time: 0.003; rss: 457MB	PreTrans
time: 1.276; rss: 457MB	Prepare MIR codegen passes
  time: 0.265; rss: 466MB	write metadata
  time: 0.469; rss: 473MB	translation item collection
  time: 0.066; rss: 482MB	codegen unit partitioning
  time: 0.057; rss: 730MB	internalize symbols
time: 5.123; rss: 608MB	translation
time: 0.000; rss: 608MB	assert dep graph
time: 0.000; rss: 608MB	serialize dep graph
incremental: re-using 0 out of 1 modules
  time: 0.516; rss: 414MB	llvm function passes [0]
  time: 0.257; rss: 421MB	llvm module passes [0]
  time: 10.131; rss: 421MB	codegen passes [0]
  time: 0.001; rss: 423MB	codegen passes [0]
time: 11.656; rss: 423MB	LLVM passes
time: 0.000; rss: 423MB	serialize work products
time: 0.664; rss: 108MB	linking
done
