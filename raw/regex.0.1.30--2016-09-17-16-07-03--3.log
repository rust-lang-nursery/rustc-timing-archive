commit fb62f4d544c954d355716dca8beb55726036721e
Merge: cde61ba af1a3ff
Author: bors <bors@rust-lang.org>
Date:   Sat Sep 17 08:23:44 2016 -0700

    Auto merge of #36490 - bluss:zip-slightly-despecialized-edition, r=alexcrichton
    
    Remove data structure specialization for .zip() iterator
    
    Go back on half the specialization, the part that changed the Zip
    struct's fields themselves depending on the types of the iterators.
    
    Previous PR: #33090
    
    This means that the Zip iterator will always carry two usize fields,
    which are sometimes unused. If a whole for loop using a .zip() iterator is
    inlined, these are simply removed and have no effect.
    
    The same improvement for Zip of for example slice iterators remain, and
    they still optimize well. However, like when the specialization of zip
    was merged, the compiler is still very sensistive to the exact context.
    
    For example this code only autovectorizes if the function is used, not
    if the code in zip_sum_i32 is inserted inline where it was called:
    
    ```rust
    fn zip_sum_i32(xs: &[i32], ys: &[i32]) -> i32 {
        let mut s = 0;
        for (&x, &y) in xs.iter().zip(ys) {
            s += x * y;
        }
        s
    }
    
    fn zipdot_i32_default_zip(b: &mut test::Bencher)
    {
        let xs = vec![1; 1024];
        let ys = vec![1; 1024];
    
        b.iter(|| {
            zip_sum_i32(&xs, &ys)
        })
    }
    ```
    
    Include a test that checks that `Zip<T, U>` is covariant w.r.t. T and U.
    
    Fixes #35727
rustc: ./regex.0.1.30
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling regex v0.1.30 (file:///root/benchmarks/regex.0.1.30)
time: 0.052; rss: 57MB	parsing
Lines of code:             8558
Pre-expansion node count:  58080
time: 0.000; rss: 57MB	recursion limit
time: 0.000; rss: 57MB	crate injection
time: 0.000; rss: 57MB	plugin loading
time: 0.000; rss: 57MB	plugin registration
time: 0.032; rss: 79MB	expansion
time: 0.000; rss: 79MB	maybe building test harness
time: 0.001; rss: 79MB	maybe creating a macro crate
time: 0.003; rss: 80MB	assigning node ids
Post-expansion node count: 68154
time: 0.000; rss: 80MB	checking for inline asm in case the target doesn't support it
time: 0.001; rss: 80MB	complete gated feature checking
time: 0.001; rss: 80MB	collecting defs
time: 0.001; rss: 80MB	external crate/lib resolution
time: 0.004; rss: 80MB	early lint checks
time: 0.001; rss: 80MB	AST validation
time: 0.006; rss: 81MB	name resolution
time: 0.008; rss: 92MB	lowering ast -> hir
time: 0.002; rss: 94MB	indexing hir
time: 0.001; rss: 94MB	attribute checking
time: 0.001; rss: 84MB	language item collection
time: 0.001; rss: 84MB	lifetime resolution
time: 0.000; rss: 84MB	looking for entry point
time: 0.000; rss: 84MB	looking for plugin registrar
time: 0.006; rss: 89MB	region resolution
time: 0.001; rss: 89MB	loop checking
time: 0.001; rss: 89MB	static item recursion checking
time: 0.022; rss: 90MB	compute_incremental_hashes_map
time: 0.000; rss: 90MB	load_dep_graph
time: 0.008; rss: 90MB	type collecting
time: 0.000; rss: 90MB	variance inference
time: 0.019; rss: 93MB	coherence checking
time: 0.009; rss: 93MB	wf checking
time: 0.250; rss: 105MB	item-types checking
time: 0.145; rss: 111MB	item-bodies checking
time: 0.000; rss: 111MB	drop-impl checking
time: 0.027; rss: 111MB	const checking
time: 0.003; rss: 111MB	privacy checking
time: 0.001; rss: 111MB	stability index
time: 0.002; rss: 111MB	intrinsic checking
time: 0.001; rss: 111MB	effect checking
time: 0.004; rss: 111MB	match checking
time: 0.002; rss: 111MB	liveness checking
time: 0.008; rss: 111MB	rvalue checking
time: 0.042; rss: 125MB	MIR dump
  time: 0.003; rss: 125MB	SimplifyCfg
  time: 0.005; rss: 125MB	QualifyAndPromoteConstants
  time: 0.011; rss: 125MB	TypeckMir
  time: 0.000; rss: 125MB	SimplifyBranches
  time: 0.002; rss: 125MB	SimplifyCfg
time: 0.020; rss: 125MB	MIR passes
time: 0.021; rss: 125MB	borrow checking
time: 0.000; rss: 125MB	reachability checking
time: 0.002; rss: 125MB	death checking
time: 0.002; rss: 125MB	stability checking
time: 0.000; rss: 125MB	unused lib feature checking
time: 0.025; rss: 125MB	lint checking
time: 0.000; rss: 125MB	resolving dependency formats
  time: 0.000; rss: 125MB	NoLandingPads
  time: 0.001; rss: 125MB	SimplifyCfg
  time: 0.004; rss: 125MB	EraseRegions
  time: 0.000; rss: 125MB	AddCallGuards
  time: 0.010; rss: 125MB	ElaborateDrops
  time: 0.000; rss: 125MB	NoLandingPads
  time: 0.002; rss: 125MB	SimplifyCfg
  time: 0.000; rss: 125MB	Deaggregator
  time: 0.000; rss: 125MB	AddCallGuards
  time: 0.000; rss: 125MB	PreTrans
time: 0.018; rss: 125MB	Prepare MIR codegen passes
  time: 0.161; rss: 136MB	write metadata
  time: 0.042; rss: 137MB	translation item collection
  time: 0.007; rss: 139MB	codegen unit partitioning
  time: 0.014; rss: 165MB	internalize symbols
time: 0.651; rss: 159MB	translation
time: 0.000; rss: 159MB	assert dep graph
time: 0.000; rss: 159MB	serialize dep graph
  time: 0.036; rss: 113MB	llvm function passes [0]
  time: 0.019; rss: 114MB	llvm module passes [0]
  time: 0.673; rss: 117MB	codegen passes [0]
  time: 0.001; rss: 118MB	codegen passes [0]
time: 0.788; rss: 117MB	LLVM passes
time: 0.000; rss: 117MB	serialize work products
time: 0.066; rss: 90MB	linking
done
