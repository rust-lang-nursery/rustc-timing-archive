commit 0491a231777735ba050c208ce621df93f863bf7c
Merge: 38a959a 651cf58
Author: bors <bors@rust-lang.org>
Date:   Tue Nov 8 12:13:45 2016 -0800

    Auto merge of #37192 - cristicbz:rust-rc-into-raw, r=brson
    
    Add `{into,from}_raw` to Rc and Arc
    
    These methods convert to and from a `*const T` for `Rc` and `Arc` similar to the way they work on `Box`. The only slight complication is that `from_raw` needs to offset the pointer back to find the beginning of the `RcBox`/`ArcInner`.
    
    I felt this is a fairly small addition, filling in a gap (when compared to `Box`) so it wouldn't need an RFC. The motivation is primarily for FFI.
    
    (I'll create an issue and update a PR with the issue number if reviewers agree with the change in principle **Edit: done #37197**)
    
    ~~Edit: This was initially `{into,from}_raw` but concerns were raised about the possible footgun if mixed with the methods of the same name of `Box`.~~
    
    Edit: This was went from `{into,from}_raw` to `{into,from}_inner_raw` then back to `{into,from}_raw` during review.
rustc: ./syntex-0.42.2
cargo rustc -p syntex_syntax -- -Ztime-passes -Zinput-stats
   Compiling syntex_syntax v0.42.0
time: 0.093; rss: 71MB	parsing
Lines of code:             33687
Pre-expansion node count:  224033
time: 0.000; rss: 71MB	recursion limit
time: 0.000; rss: 71MB	crate injection
time: 0.000; rss: 71MB	plugin loading
time: 0.000; rss: 71MB	plugin registration
time: 0.236; rss: 144MB	expansion
time: 0.000; rss: 144MB	maybe building test harness
time: 0.006; rss: 144MB	maybe creating a macro crate
Post-expansion node count: 641571
time: 0.000; rss: 144MB	checking for inline asm in case the target doesn't support it
time: 0.012; rss: 144MB	complete gated feature checking
time: 0.022; rss: 144MB	early lint checks
time: 0.007; rss: 144MB	AST validation
time: 0.084; rss: 158MB	name resolution
time: 0.044; rss: 183MB	lowering ast -> hir
time: 0.008; rss: 194MB	indexing hir
time: 0.006; rss: 194MB	attribute checking
time: 0.004; rss: 150MB	language item collection
time: 0.010; rss: 150MB	lifetime resolution
time: 0.000; rss: 150MB	looking for entry point
time: 0.000; rss: 150MB	looking for plugin registrar
time: 0.042; rss: 161MB	region resolution
time: 0.004; rss: 161MB	loop checking
time: 0.004; rss: 161MB	static item recursion checking
time: 0.328; rss: 162MB	compute_incremental_hashes_map
time: 0.000; rss: 162MB	load_dep_graph
time: 0.040; rss: 167MB	type collecting
time: 0.001; rss: 167MB	variance inference
time: 0.035; rss: 172MB	coherence checking
time: 0.097; rss: 175MB	wf checking
time: 0.195; rss: 181MB	item-types checking
time: 3.605; rss: 230MB	item-bodies checking
time: 0.000; rss: 230MB	drop-impl checking
time: 0.242; rss: 234MB	const checking
time: 0.046; rss: 234MB	privacy checking
time: 0.005; rss: 234MB	stability index
time: 0.019; rss: 234MB	intrinsic checking
time: 0.015; rss: 234MB	effect checking
time: 0.048; rss: 234MB	match checking
time: 0.051; rss: 227MB	liveness checking
time: 0.203; rss: 227MB	rvalue checking
time: 0.408; rss: 418MB	MIR dump
  time: 0.057; rss: 422MB	SimplifyCfg
  time: 0.075; rss: 422MB	QualifyAndPromoteConstants
  time: 0.110; rss: 422MB	TypeckMir
  time: 0.004; rss: 422MB	SimplifyBranches
  time: 0.031; rss: 422MB	SimplifyCfg
time: 0.277; rss: 422MB	MIR cleanup and validation
time: 0.540; rss: 422MB	borrow checking
time: 0.017; rss: 422MB	reachability checking
time: 0.039; rss: 422MB	death checking
time: 0.039; rss: 422MB	stability checking
time: 0.000; rss: 422MB	unused lib feature checking
time: 0.220; rss: 422MB	lint checking
time: 0.000; rss: 422MB	resolving dependency formats
  time: 0.003; rss: 422MB	NoLandingPads
  time: 0.027; rss: 422MB	SimplifyCfg
  time: 0.067; rss: 431MB	EraseRegions
  time: 0.011; rss: 431MB	AddCallGuards
  time: 0.280; rss: 450MB	ElaborateDrops
  time: 0.003; rss: 450MB	NoLandingPads
  time: 0.052; rss: 450MB	SimplifyCfg
  time: 0.029; rss: 450MB	InstCombine
  time: 0.013; rss: 450MB	Deaggregator
  time: 0.002; rss: 450MB	CopyPropagation
  time: 0.035; rss: 450MB	SimplifyLocals
  time: 0.010; rss: 450MB	AddCallGuards
  time: 0.003; rss: 450MB	PreTrans
time: 0.535; rss: 450MB	MIR optimisations
  time: 0.061; rss: 458MB	write metadata
  time: 0.421; rss: 468MB	translation item collection
  time: 0.056; rss: 478MB	codegen unit partitioning
  time: 0.047; rss: 726MB	internalize symbols
time: 4.791; rss: 726MB	translation
time: 0.000; rss: 726MB	assert dep graph
time: 0.000; rss: 726MB	serialize dep graph
  time: 0.529; rss: 419MB	llvm function passes [0]
  time: 0.247; rss: 429MB	llvm module passes [0]
  time: 10.401; rss: 421MB	codegen passes [0]
  time: 0.000; rss: 421MB	codegen passes [0]
time: 11.933; rss: 421MB	LLVM passes
time: 0.000; rss: 421MB	serialize work products
time: 0.338; rss: 105MB	linking
done
