commit d128e6bc74ce750ab94dffa422a77e740eba877a
Merge: 100b309 5928be1
Author: bors <bors@rust-lang.org>
Date:   Fri Sep 2 21:02:41 2016 -0700

    Auto merge of #35856 - phimuemue:master, r=brson
    
    Introduce max_by/min_by on iterators
    
    See https://github.com/rust-lang/rfcs/issues/1722 for reference.
    
    It seems that there is `min`, `max` (simple computation of min/max), `min_by_key`, `max_by_key` (min/max by comparing mapped values) but no `min_by` and `max_by` (min/max according to comparison function). However, e.g. on vectors or slices there is `sort`, `sort_by_key` and `sort_by`.
rustc: ./hyper.0.5.0
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling hyper v0.5.0 (file:///root/benchmarks/hyper.0.5.0)
time: 0.028; rss: 51MB	parsing
Lines of code:             9154
Pre-expansion node count:  44873
time: 0.003; rss: 51MB	configuration
time: 0.000; rss: 51MB	recursion limit
time: 0.000; rss: 51MB	crate injection
time: 0.000; rss: 51MB	plugin loading
time: 0.000; rss: 51MB	plugin registration
time: 0.092; rss: 79MB	expansion
time: 0.000; rss: 79MB	maybe building test harness
time: 0.005; rss: 79MB	assigning node ids
Post-expansion node count: 101610
time: 0.000; rss: 79MB	checking for inline asm in case the target doesn't support it
time: 0.002; rss: 79MB	complete gated feature checking
time: 0.003; rss: 81MB	collecting defs
time: 0.009; rss: 87MB	external crate/lib resolution
time: 0.003; rss: 87MB	early lint checks
time: 0.001; rss: 87MB	AST validation
time: 0.015; rss: 95MB	name resolution
time: 0.008; rss: 100MB	lowering ast -> hir
time: 0.002; rss: 102MB	indexing hir
time: 0.001; rss: 102MB	attribute checking
time: 0.001; rss: 95MB	language item collection
time: 0.002; rss: 95MB	lifetime resolution
time: 0.000; rss: 95MB	looking for entry point
time: 0.000; rss: 95MB	looking for plugin registrar
time: 0.006; rss: 99MB	region resolution
time: 0.001; rss: 99MB	loop checking
time: 0.001; rss: 99MB	static item recursion checking
time: 0.013; rss: 100MB	compute_incremental_hashes_map
time: 0.000; rss: 100MB	load_dep_graph
time: 0.022; rss: 100MB	type collecting
time: 0.000; rss: 100MB	variance inference
time: 0.035; rss: 104MB	coherence checking
time: 0.056; rss: 108MB	wf checking
time: 0.029; rss: 108MB	item-types checking
time: 0.361; rss: 120MB	item-bodies checking
time: 0.000; rss: 120MB	drop-impl checking
time: 0.037; rss: 122MB	const checking
time: 0.006; rss: 122MB	privacy checking
time: 0.001; rss: 122MB	stability index
time: 0.005; rss: 122MB	intrinsic checking
time: 0.002; rss: 122MB	effect checking
time: 0.013; rss: 122MB	match checking
time: 0.005; rss: 122MB	liveness checking
time: 0.027; rss: 122MB	rvalue checking
time: 0.054; rss: 137MB	MIR dump
time: 0.041; rss: 139MB	MIR passes
time: 0.061; rss: 139MB	borrow checking
time: 0.003; rss: 139MB	reachability checking
time: 0.005; rss: 139MB	death checking
time: 0.005; rss: 139MB	stability checking
time: 0.000; rss: 139MB	unused lib feature checking
time: 0.040; rss: 139MB	lint checking
time: 0.000; rss: 139MB	resolving dependency formats
time: 0.076; rss: 141MB	Prepare MIR codegen passes
  time: 0.055; rss: 146MB	write metadata
  time: 0.113; rss: 151MB	translation item collection
  time: 0.018; rss: 153MB	codegen unit partitioning
  time: 0.031; rss: 218MB	internalize symbols
time: 1.318; rss: 208MB	translation
time: 0.000; rss: 208MB	assert dep graph
time: 0.000; rss: 208MB	serialize dep graph
  time: 0.100; rss: 159MB	llvm function passes [0]
  time: 0.047; rss: 160MB	llvm module passes [0]
  time: 1.838; rss: 163MB	codegen passes [0]
  time: 0.001; rss: 164MB	codegen passes [0]
time: 2.149; rss: 164MB	LLVM passes
time: 0.000; rss: 164MB	serialize work products
time: 0.155; rss: 99MB	linking
done
