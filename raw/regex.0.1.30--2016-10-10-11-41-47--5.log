commit 6d620843f62b6cf3182528ffcaa877eba461bfbb
Merge: a7bfb1a 032bffa
Author: bors <bors@rust-lang.org>
Date:   Mon Oct 10 04:04:51 2016 -0700

    Auto merge of #36341 - sagebind:thread_id, r=alexcrichton
    
    Add ThreadId for comparing threads
    
    This adds the capability to store and compare threads with the current calling thread via a new struct, `std::thread::ThreadId`. Addresses the need outlined in issue #21507.
    
    This avoids the need to add any special checks to the existing thread structs and does not rely on the system to provide an identifier for a thread, since it seems that this approach is unreliable and undesirable. Instead, this simply uses a lazily-created, thread-local `usize` whose value is copied from a global atomic counter. The code should be simple enough that it should be as much reliable as the `#[thread_local]` attribute it uses (however much that is).
    
    `ThreadId`s can be compared directly for equality and have copy semantics.
    
    Also see these other attempts:
    - rust-lang/rust#29457
    - rust-lang/rust#29448
    - rust-lang/rust#29447
    
    And this in the RFC repo: rust-lang/rfcs#1435
rustc: ./regex.0.1.30
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling regex v0.1.30 (file:///root/benchmarks/regex.0.1.30)
time: 0.050; rss: 55MB	parsing
Lines of code:             8558
Pre-expansion node count:  58080
time: 0.000; rss: 55MB	recursion limit
time: 0.000; rss: 55MB	crate injection
time: 0.000; rss: 55MB	plugin loading
time: 0.000; rss: 55MB	plugin registration
time: 0.032; rss: 77MB	expansion
time: 0.000; rss: 77MB	maybe building test harness
time: 0.001; rss: 77MB	maybe creating a macro crate
Post-expansion node count: 68134
time: 0.000; rss: 77MB	checking for inline asm in case the target doesn't support it
time: 0.001; rss: 77MB	complete gated feature checking
time: 0.004; rss: 77MB	early lint checks
time: 0.001; rss: 77MB	AST validation
time: 0.006; rss: 78MB	name resolution
time: 0.008; rss: 88MB	lowering ast -> hir
time: 0.002; rss: 91MB	indexing hir
time: 0.001; rss: 91MB	attribute checking
time: 0.001; rss: 82MB	language item collection
time: 0.001; rss: 82MB	lifetime resolution
time: 0.000; rss: 82MB	looking for entry point
time: 0.000; rss: 82MB	looking for plugin registrar
time: 0.006; rss: 84MB	region resolution
time: 0.001; rss: 84MB	loop checking
time: 0.001; rss: 84MB	static item recursion checking
time: 0.021; rss: 85MB	compute_incremental_hashes_map
time: 0.000; rss: 85MB	load_dep_graph
time: 0.007; rss: 86MB	type collecting
time: 0.000; rss: 86MB	variance inference
time: 0.019; rss: 88MB	coherence checking
time: 0.007; rss: 88MB	wf checking
time: 0.174; rss: 101MB	item-types checking
time: 0.136; rss: 103MB	item-bodies checking
time: 0.000; rss: 103MB	drop-impl checking
time: 0.026; rss: 103MB	const checking
time: 0.003; rss: 103MB	privacy checking
time: 0.000; rss: 103MB	stability index
time: 0.001; rss: 103MB	intrinsic checking
time: 0.001; rss: 103MB	effect checking
time: 0.003; rss: 103MB	match checking
time: 0.002; rss: 103MB	liveness checking
time: 0.008; rss: 103MB	rvalue checking
time: 0.041; rss: 119MB	MIR dump
  time: 0.003; rss: 119MB	SimplifyCfg
  time: 0.005; rss: 119MB	QualifyAndPromoteConstants
  time: 0.009; rss: 119MB	TypeckMir
  time: 0.000; rss: 119MB	SimplifyBranches
  time: 0.001; rss: 119MB	SimplifyCfg
time: 0.018; rss: 119MB	MIR passes
time: 0.021; rss: 119MB	borrow checking
time: 0.000; rss: 119MB	reachability checking
time: 0.002; rss: 119MB	death checking
time: 0.003; rss: 119MB	stability checking
time: 0.000; rss: 119MB	unused lib feature checking
time: 0.024; rss: 119MB	lint checking
time: 0.000; rss: 119MB	resolving dependency formats
  time: 0.000; rss: 119MB	NoLandingPads
  time: 0.001; rss: 119MB	SimplifyCfg
  time: 0.004; rss: 119MB	EraseRegions
  time: 0.000; rss: 119MB	AddCallGuards
  time: 0.008; rss: 121MB	ElaborateDrops
  time: 0.000; rss: 121MB	NoLandingPads
  time: 0.002; rss: 121MB	SimplifyCfg
  time: 0.002; rss: 121MB	InstCombine
  time: 0.000; rss: 121MB	Deaggregator
  time: 0.000; rss: 121MB	CopyPropagation
  time: 0.000; rss: 121MB	AddCallGuards
  time: 0.000; rss: 121MB	PreTrans
time: 0.019; rss: 121MB	Prepare MIR codegen passes
  time: 0.116; rss: 126MB	write metadata
  time: 0.053; rss: 128MB	translation item collection
  time: 0.008; rss: 130MB	codegen unit partitioning
  time: 0.007; rss: 156MB	internalize symbols
time: 0.557; rss: 148MB	translation
time: 0.000; rss: 148MB	assert dep graph
time: 0.000; rss: 148MB	serialize dep graph
  time: 0.037; rss: 107MB	llvm function passes [0]
  time: 0.018; rss: 109MB	llvm module passes [0]
  time: 0.677; rss: 111MB	codegen passes [0]
  time: 0.001; rss: 111MB	codegen passes [0]
time: 0.791; rss: 111MB	LLVM passes
time: 0.000; rss: 111MB	serialize work products
time: 0.067; rss: 84MB	linking
done
