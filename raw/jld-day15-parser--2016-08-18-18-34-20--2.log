commit 499484f56d336f4628a6fa016626beb3ef21ba81
Merge: 43c090e 37d974f
Author: bors <bors@rust-lang.org>
Date:   Thu Aug 18 08:54:10 2016 -0700

    Auto merge of #35684 - nikomatsakis:incr-comp-metadata-audit-35111, r=mw
    
    Restructure metadata encoder to track deps precisely
    
    This issue restructures meta-data encoding to track dependencies very precisely. It uses a cute technique I hope to spread elsewhere, where we can guard the data flowing into a new dep-graph task and ensure that it is not "leaking" information from the outside, which would result in missing edges. There are no tests because we don't know of any bugs in the old system, but it's clear that there was leaked data.
    
    The commit series is standalone, but the refactorings are kind of "windy". It's a good idea to read the comment in `src/librustc_metadata/index_builder.rs` to get a feeling for the overall strategy I was aiming at.
    
    In several cases, I wound up adding some extra hashtable lookups, I think primarily for looking up `AdtDef` instances. We could remove these by implementing `DepGraphRead` for an `AdtDef` and then having it register a read to the adt-defs table, I guess, but I doubt it is really noticeable.
    
    Eventually I think I'd like to extend this pattern to the dep-graph more generally, since it effectively guarantees that data cannot leak.
    
    Fixes #35111.
    
    r? @michaelwoerister
rustc: ./jld-day15-parser
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling day15 v0.1.0 (file:///root/benchmarks/jld-day15-parser)
time: 0.000; rss: 42MB	parsing
Lines of code:             72
Pre-expansion node count:  654
time: 0.000; rss: 42MB	configuration
time: 0.000; rss: 42MB	recursion limit
time: 0.000; rss: 42MB	crate injection
time: 0.000; rss: 42MB	plugin loading
time: 0.000; rss: 42MB	plugin registration
time: 0.018; rss: 78MB	expansion
time: 0.000; rss: 78MB	maybe building test harness
time: 0.000; rss: 78MB	assigning node ids
Post-expansion node count: 1155
time: 0.000; rss: 78MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 78MB	complete gated feature checking
time: 0.000; rss: 78MB	collecting defs
time: 0.003; rss: 83MB	external crate/lib resolution
time: 0.000; rss: 83MB	early lint checks
time: 0.000; rss: 83MB	AST validation
time: 0.001; rss: 83MB	name resolution
time: 0.000; rss: 83MB	lowering ast -> hir
time: 0.000; rss: 83MB	indexing hir
time: 0.000; rss: 83MB	attribute checking
time: 0.000; rss: 83MB	language item collection
time: 0.000; rss: 83MB	lifetime resolution
time: 0.000; rss: 83MB	looking for entry point
time: 0.000; rss: 83MB	looking for plugin registrar
time: 0.000; rss: 83MB	region resolution
time: 0.000; rss: 83MB	loop checking
time: 0.000; rss: 83MB	static item recursion checking
time: 0.000; rss: 83MB	load_dep_graph
time: 0.001; rss: 83MB	type collecting
time: 0.000; rss: 83MB	variance inference
time: 0.005; rss: 83MB	coherence checking
time: 0.005; rss: 83MB	wf checking
time: 0.000; rss: 83MB	item-types checking
time: 0.036; rss: 89MB	item-bodies checking
time: 0.000; rss: 89MB	drop-impl checking
time: 0.001; rss: 89MB	const checking
time: 0.000; rss: 89MB	privacy checking
time: 0.000; rss: 89MB	stability index
time: 0.000; rss: 89MB	intrinsic checking
time: 0.000; rss: 89MB	effect checking
time: 0.000; rss: 93MB	match checking
time: 0.000; rss: 93MB	liveness checking
time: 0.000; rss: 93MB	rvalue checking
time: 0.001; rss: 93MB	MIR dump
time: 0.001; rss: 93MB	MIR passes
time: 0.001; rss: 93MB	borrow checking
time: 0.000; rss: 93MB	reachability checking
time: 0.000; rss: 93MB	death checking
time: 0.000; rss: 93MB	stability checking
time: 0.000; rss: 93MB	unused lib feature checking
time: 0.003; rss: 93MB	lint checking
time: 0.001; rss: 93MB	resolving dependency formats
time: 0.005; rss: 93MB	Prepare MIR codegen passes
  time: 0.000; rss: 93MB	write metadata
  time: 0.450; rss: 99MB	translation item collection
  time: 0.003; rss: 99MB	codegen unit partitioning
  time: 0.007; rss: 125MB	internalize symbols
time: 3.307; rss: 125MB	translation
time: 0.000; rss: 125MB	assert dep graph
time: 0.000; rss: 125MB	serialize dep graph
  time: 0.017; rss: 105MB	llvm function passes [0]
  time: 0.001; rss: 105MB	llvm module passes [0]
  time: 0.347; rss: 112MB	codegen passes [0]
  time: 0.000; rss: 111MB	codegen passes [0]
time: 0.366; rss: 111MB	LLVM passes
time: 0.000; rss: 111MB	serialize work products
  time: 0.117; rss: 100MB	running linker
time: 0.119; rss: 100MB	linking
done
