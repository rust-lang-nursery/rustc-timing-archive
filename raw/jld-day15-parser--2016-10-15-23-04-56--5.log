commit 98a3502da1456b209ff031604cabbbcb9d0eddf1
Merge: 5bfe107 a61d85b
Author: bors <bors@rust-lang.org>
Date:   Sat Oct 15 15:38:52 2016 -0700

    Auto merge of #37152 - arielb1:drop-cache, r=pnkfelix
    
    add a per-param-env cache to `impls_bound`
    
    There used to be only a global cache, which led to uncached calls to
    trait selection when there were type parameters.
    
    This causes a 20% decrease in borrow-checking time and an overall 0.5% performance increase during bootstrapping (as borrow-checking tends to be a tiny part of compilation time).
    
    Fixes #37106 (drop elaboration times are now ~half of borrow checking,
    so might still be worthy of optimization, but not critical).
    
    r? @pnkfelix
rustc: ./jld-day15-parser
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling day15 v0.1.0 (file:///root/benchmarks/jld-day15-parser)
time: 0.001; rss: 36MB	parsing
Lines of code:             72
Pre-expansion node count:  654
time: 0.000; rss: 37MB	recursion limit
time: 0.000; rss: 37MB	crate injection
time: 0.000; rss: 37MB	plugin loading
time: 0.000; rss: 37MB	plugin registration
time: 0.025; rss: 61MB	expansion
time: 0.000; rss: 61MB	maybe building test harness
time: 0.000; rss: 61MB	maybe creating a macro crate
Post-expansion node count: 1155
time: 0.000; rss: 61MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 61MB	complete gated feature checking
time: 0.000; rss: 61MB	early lint checks
time: 0.000; rss: 61MB	AST validation
time: 0.003; rss: 62MB	name resolution
time: 0.000; rss: 62MB	lowering ast -> hir
time: 0.000; rss: 62MB	indexing hir
time: 0.000; rss: 62MB	attribute checking
time: 0.000; rss: 62MB	language item collection
time: 0.000; rss: 62MB	lifetime resolution
time: 0.000; rss: 62MB	looking for entry point
time: 0.000; rss: 62MB	looking for plugin registrar
time: 0.000; rss: 62MB	region resolution
time: 0.000; rss: 62MB	loop checking
time: 0.000; rss: 62MB	static item recursion checking
time: 0.000; rss: 62MB	compute_incremental_hashes_map
time: 0.000; rss: 62MB	load_dep_graph
time: 0.001; rss: 64MB	type collecting
time: 0.000; rss: 64MB	variance inference
time: 0.008; rss: 65MB	coherence checking
time: 0.005; rss: 66MB	wf checking
time: 0.000; rss: 66MB	item-types checking
time: 0.033; rss: 69MB	item-bodies checking
time: 0.000; rss: 69MB	drop-impl checking
time: 0.001; rss: 69MB	const checking
time: 0.000; rss: 69MB	privacy checking
time: 0.000; rss: 69MB	stability index
time: 0.000; rss: 69MB	intrinsic checking
time: 0.000; rss: 69MB	effect checking
time: 0.000; rss: 69MB	match checking
time: 0.000; rss: 69MB	liveness checking
time: 0.000; rss: 69MB	rvalue checking
time: 0.001; rss: 70MB	MIR dump
  time: 0.000; rss: 70MB	SimplifyCfg
  time: 0.000; rss: 70MB	QualifyAndPromoteConstants
  time: 0.000; rss: 70MB	TypeckMir
  time: 0.000; rss: 70MB	SimplifyBranches
  time: 0.000; rss: 70MB	SimplifyCfg
time: 0.001; rss: 70MB	MIR passes
time: 0.001; rss: 70MB	borrow checking
time: 0.000; rss: 70MB	reachability checking
time: 0.000; rss: 70MB	death checking
time: 0.000; rss: 70MB	stability checking
time: 0.000; rss: 70MB	unused lib feature checking
time: 0.005; rss: 71MB	lint checking
time: 0.001; rss: 71MB	resolving dependency formats
  time: 0.000; rss: 71MB	NoLandingPads
  time: 0.000; rss: 71MB	SimplifyCfg
  time: 0.000; rss: 71MB	EraseRegions
  time: 0.000; rss: 71MB	AddCallGuards
  time: 0.001; rss: 71MB	ElaborateDrops
  time: 0.000; rss: 71MB	NoLandingPads
  time: 0.000; rss: 71MB	SimplifyCfg
  time: 0.000; rss: 71MB	InstCombine
  time: 0.003; rss: 71MB	Deaggregator
  time: 0.000; rss: 71MB	CopyPropagation
  time: 0.000; rss: 71MB	AddCallGuards
  time: 0.000; rss: 71MB	PreTrans
time: 0.004; rss: 71MB	Prepare MIR codegen passes
  time: 0.000; rss: 71MB	write metadata
  time: 0.160; rss: 79MB	translation item collection
  time: 0.003; rss: 79MB	codegen unit partitioning
  time: 0.003; rss: 90MB	internalize symbols
time: 0.714; rss: 90MB	translation
time: 0.000; rss: 90MB	assert dep graph
time: 0.000; rss: 90MB	serialize dep graph
  time: 0.019; rss: 82MB	llvm function passes [0]
  time: 0.002; rss: 82MB	llvm module passes [0]
  time: 0.359; rss: 88MB	codegen passes [0]
  time: 0.000; rss: 87MB	codegen passes [0]
time: 0.381; rss: 87MB	LLVM passes
time: 0.000; rss: 87MB	serialize work products
  time: 0.085; rss: 78MB	running linker
time: 0.086; rss: 78MB	linking
done
