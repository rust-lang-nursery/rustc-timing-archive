commit 49d3fd3b38cd838b241858baaaa6162666badba1
Merge: ac635aa c722a1e
Author: bors <bors@rust-lang.org>
Date:   Fri Nov 18 19:21:47 2016 -0800

    Auto merge of #37787 - michaelwoerister:macro-def-ich, r=nikomatsakis
    
    ICH: Handle MacroDef HIR instances.
    
    As of recently, `hir::MacroDef` instances are exported in crate metadata, which means we also store their ICH when doing incremental compilation. Even though exported macro definitions should not (yet) interact with incremental compilation, the ICH is also used for the general purpose crate hash, where macros should be included.
    
    This PR implements ICH computation for `MacroDef`. In theory, the ICH of these MacroDefs is less stable than that of other HIR items, since I opted to just call the compiler-generated `Hash::hash()` for `Token::Interpolated` variants. `Token::Interpolated` contains AST data structures and it would have been a lot of effort to expand ICH computation to the AST too. Since quasi-quoting is rarely used *and* it would only make a difference if incremental compilation was extended to macros, the simpler implementation seemed like a good idea.
    
    This fixes the problem reported in https://github.com/rust-lang/rust/issues/37756. The test still fails because of broken codegen-unit support though.
    
    r? @nikomatsakis
rustc: ./syntex-0.42.2
cargo rustc -p syntex_syntax  -- -Ztime-passes -Zinput-stats
   Compiling syntex_syntax v0.42.0
time: 0.092; rss: 70MB	parsing
Lines of code:             33687
Pre-expansion node count:  223115
time: 0.000; rss: 70MB	recursion limit
time: 0.000; rss: 70MB	crate injection
time: 0.000; rss: 70MB	plugin loading
time: 0.000; rss: 70MB	plugin registration
time: 0.233; rss: 146MB	expansion
time: 0.000; rss: 146MB	maybe building test harness
time: 0.006; rss: 146MB	maybe creating a macro crate
Post-expansion node count: 638863
time: 0.000; rss: 146MB	checking for inline asm in case the target doesn't support it
time: 0.013; rss: 146MB	complete gated feature checking
time: 0.023; rss: 146MB	early lint checks
time: 0.007; rss: 146MB	AST validation
time: 0.076; rss: 160MB	name resolution
time: 0.044; rss: 186MB	lowering ast -> hir
time: 0.008; rss: 196MB	indexing hir
time: 0.006; rss: 196MB	attribute checking
time: 0.005; rss: 152MB	language item collection
time: 0.011; rss: 152MB	lifetime resolution
time: 0.000; rss: 152MB	looking for entry point
time: 0.000; rss: 152MB	looking for plugin registrar
time: 0.041; rss: 172MB	region resolution
time: 0.005; rss: 172MB	loop checking
time: 0.005; rss: 172MB	static item recursion checking
time: 0.328; rss: 172MB	compute_incremental_hashes_map
time: 0.000; rss: 172MB	load_dep_graph
time: 0.046; rss: 177MB	type collecting
time: 0.001; rss: 177MB	variance inference
time: 0.002; rss: 177MB	impl wf inference
time: 0.018; rss: 178MB	coherence checking
time: 0.087; rss: 180MB	wf checking
time: 0.179; rss: 182MB	item-types checking
time: 6.087; rss: 233MB	item-bodies checking
time: 0.000; rss: 233MB	drop-impl checking
time: 0.215; rss: 254MB	const checking
time: 0.048; rss: 254MB	privacy checking
time: 0.006; rss: 254MB	stability index
time: 0.017; rss: 254MB	intrinsic checking
time: 0.014; rss: 254MB	effect checking
time: 0.044; rss: 254MB	match checking
time: 0.049; rss: 246MB	liveness checking
time: 0.178; rss: 246MB	rvalue checking
time: 0.356; rss: 437MB	MIR dump
  time: 0.057; rss: 439MB	SimplifyCfg
  time: 0.072; rss: 439MB	QualifyAndPromoteConstants
  time: 0.103; rss: 439MB	TypeckMir
  time: 0.004; rss: 439MB	SimplifyBranches
  time: 0.030; rss: 439MB	SimplifyCfg
time: 0.266; rss: 439MB	MIR cleanup and validation
time: 0.545; rss: 440MB	borrow checking
time: 0.020; rss: 440MB	reachability checking
time: 0.039; rss: 440MB	death checking
time: 0.031; rss: 443MB	stability checking
time: 0.000; rss: 443MB	unused lib feature checking
time: 0.195; rss: 443MB	lint checking
time: 0.000; rss: 443MB	resolving dependency formats
  time: 0.003; rss: 443MB	NoLandingPads
  time: 0.026; rss: 443MB	SimplifyCfg
  time: 0.061; rss: 451MB	EraseRegions
  time: 0.011; rss: 451MB	AddCallGuards
  time: 0.272; rss: 466MB	ElaborateDrops
  time: 0.003; rss: 466MB	NoLandingPads
  time: 0.052; rss: 467MB	SimplifyCfg
  time: 0.028; rss: 467MB	InstCombine
  time: 0.012; rss: 467MB	Deaggregator
  time: 0.002; rss: 467MB	CopyPropagation
  time: 0.034; rss: 467MB	SimplifyLocals
  time: 0.010; rss: 467MB	AddCallGuards
  time: 0.002; rss: 467MB	PreTrans
time: 0.515; rss: 467MB	MIR optimisations
  time: 0.061; rss: 477MB	write metadata
  time: 0.400; rss: 489MB	translation item collection
  time: 0.068; rss: 498MB	codegen unit partitioning
  time: 0.047; rss: 741MB	internalize symbols
time: 4.515; rss: 741MB	translation
time: 0.000; rss: 741MB	assert dep graph
time: 0.000; rss: 741MB	serialize dep graph
  time: 0.525; rss: 419MB	llvm function passes [0]
  time: 0.246; rss: 428MB	llvm module passes [0]
  time: 10.308; rss: 421MB	codegen passes [0]
  time: 0.000; rss: 421MB	codegen passes [0]
time: 11.852; rss: 421MB	LLVM passes
time: 0.000; rss: 421MB	serialize work products
time: 0.342; rss: 105MB	linking
done
