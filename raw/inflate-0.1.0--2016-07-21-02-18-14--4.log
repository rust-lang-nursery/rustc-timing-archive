commit e7c822cee29b5b939340c2cb0dfefa9a49742d77
Merge: 936bfea ee6011f
Author: bors <bors@rust-lang.org>
Date:   Wed Jul 20 19:02:00 2016 -0700

    Auto merge of #34873 - alexcrichton:down-with-compiler-rt-for-good, r=brson
    
    mk: Stop using cmake for compiler-rt
    
    The compiler-rt build system has been a never ending cause of pain for Rust
    unfortunately:
    
    * The build system is very difficult to invoke and configure to only build
      compiler-rt, especially across platforms.
    * The standard build system doesn't actually do what we want, not working for
      some of our platforms and requiring a significant number of patches on our end
      which are difficult to apply when updating compiler-rt.
    * Compiling compiler-rt requires LLVM to be compiled, which... is a big
      dependency! This also means that over time compiler-rt is not guaranteed to
      build against older versions of LLVM (or newer versions), and we often want to
      work with multiple versions of LLVM simultaneously.
    
    The makefiles and rustbuild already know how to compile C code, the code here is
    far from the *only* C code we're compiling. This patch jettisons all logic to
    work with compiler-rt's build system and just goes straight to the source. We
    just list all files manually (copied from compiler-rt's
    lib/builtins/CMakeLists.txt) and compile them into an archive.
    
    It's likely that this means we'll fail to pick up new files when we upgrade
    compiler-rt, but that seems like a much less significant cost to pay than what
    we're currently paying.
    
    cc #34400, first steps towards that
rustc: ./inflate-0.1.0
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling inflate v0.1.0 (file:///root/benchmarks/inflate-0.1.0)
time: 0.004; rss: 82MB	parsing
Lines of code:             956
Pre-expansion node count:  4738
time: 0.001; rss: 86MB	configuration
time: 0.000; rss: 86MB	recursion limit
time: 0.000; rss: 86MB	crate injection
time: 0.000; rss: 86MB	plugin loading
time: 0.000; rss: 86MB	plugin registration
time: 0.093; rss: 126MB	expansion
time: 0.000; rss: 126MB	maybe building test harness
time: 0.004; rss: 126MB	assigning node ids
Post-expansion node count: 55769
time: 0.000; rss: 126MB	checking for inline asm in case the target doesn't support it
time: 0.001; rss: 126MB	complete gated feature checking
time: 0.005; rss: 126MB	collecting defs
time: 0.001; rss: 126MB	external crate/lib resolution
time: 0.003; rss: 126MB	early lint checks
time: 0.000; rss: 126MB	AST validation
time: 0.010; rss: 128MB	name resolution
time: 0.006; rss: 132MB	lowering ast -> hir
time: 0.001; rss: 134MB	indexing hir
time: 0.000; rss: 134MB	attribute checking
time: 0.001; rss: 132MB	language item collection
time: 0.001; rss: 132MB	lifetime resolution
time: 0.000; rss: 132MB	looking for entry point
time: 0.000; rss: 132MB	looking for plugin registrar
time: 0.004; rss: 133MB	region resolution
time: 0.000; rss: 133MB	loop checking
time: 0.000; rss: 133MB	static item recursion checking
time: 0.000; rss: 133MB	load_dep_graph
time: 0.002; rss: 134MB	type collecting
time: 0.000; rss: 134MB	variance inference
time: 0.011; rss: 136MB	coherence checking
time: 0.002; rss: 136MB	wf checking
time: 0.003; rss: 136MB	item-types checking
time: 3.607; rss: 154MB	item-bodies checking
time: 0.000; rss: 154MB	drop-impl checking
time: 0.016; rss: 154MB	const checking
time: 0.001; rss: 154MB	privacy checking
time: 0.000; rss: 154MB	stability index
time: 0.001; rss: 154MB	intrinsic checking
time: 0.001; rss: 154MB	effect checking
time: 0.005; rss: 154MB	match checking
time: 0.070; rss: 152MB	liveness checking
time: 0.011; rss: 152MB	rvalue checking
time: 0.040; rss: 165MB	MIR dump
time: 0.023; rss: 164MB	MIR passes
time: 0.201; rss: 164MB	borrow checking
time: 0.000; rss: 164MB	reachability checking
time: 0.003; rss: 164MB	death checking
time: 0.002; rss: 164MB	stability checking
time: 0.000; rss: 164MB	unused lib feature checking
time: 0.021; rss: 166MB	lint checking
time: 0.000; rss: 166MB	resolving dependency formats
time: 0.124; rss: 163MB	Prepare MIR codegen passes
  time: 0.003; rss: 164MB	write metadata
  time: 0.010; rss: 165MB	translation item collection
  time: 0.001; rss: 166MB	codegen unit partitioning
time: 0.824; rss: 183MB	translation
time: 0.000; rss: 183MB	assert dep graph
time: 0.000; rss: 183MB	serialize dep graph
  time: 0.298; rss: 148MB	llvm function passes [0]
  time: 0.076; rss: 149MB	llvm module passes [0]
  time: 4.600; rss: 152MB	codegen passes [0]
  time: 0.001; rss: 152MB	codegen passes [0]
time: 5.221; rss: 152MB	LLVM passes
time: 0.034; rss: 140MB	linking
done
