commit 7660bdf70ae0c6a434dd12cfdeb8250ce77c69c7
Merge: c717cfa aaf32aa
Author: bors <bors@rust-lang.org>
Date:   Thu Sep 29 20:25:45 2016 -0700

    Auto merge of #36557 - sfackler:fix-hashdos-docs, r=alexcrichton
    
    Clean up hasher discussion on HashMap
    
    * We never want to make guarantees about protecting against attacks.
    * "True randomness" is not the right terminology to be using in this
        context.
    * There is significantly more nuance to the performance of SipHash than
        "somewhat slow".
    
    r? @steveklabnik
    
    Follow up to discussion on #35371
rustc: ./syntex-0.42.2-incr-clean
RUSTFLAGS="-Z incremental=incr" \
    cargo rustc -p syntex_syntax -- -Ztime-passes -Zinput-stats -Z incremental-info
   Compiling syntex_syntax v0.42.0
time: 0.107; rss: 75MB	parsing
Lines of code:             33687
Pre-expansion node count:  224033
time: 0.000; rss: 75MB	recursion limit
time: 0.000; rss: 75MB	crate injection
time: 0.000; rss: 75MB	plugin loading
time: 0.000; rss: 75MB	plugin registration
time: 0.272; rss: 145MB	expansion
time: 0.000; rss: 145MB	maybe building test harness
time: 0.007; rss: 145MB	maybe creating a macro crate
Post-expansion node count: 641571
time: 0.000; rss: 145MB	checking for inline asm in case the target doesn't support it
time: 0.013; rss: 145MB	complete gated feature checking
time: 0.024; rss: 145MB	early lint checks
time: 0.008; rss: 145MB	AST validation
time: 0.085; rss: 160MB	name resolution
time: 0.050; rss: 202MB	lowering ast -> hir
time: 0.009; rss: 210MB	indexing hir
time: 0.007; rss: 210MB	attribute checking
time: 0.006; rss: 160MB	language item collection
time: 0.013; rss: 160MB	lifetime resolution
time: 0.000; rss: 160MB	looking for entry point
time: 0.000; rss: 160MB	looking for plugin registrar
time: 0.045; rss: 172MB	region resolution
time: 0.006; rss: 172MB	loop checking
time: 0.006; rss: 172MB	static item recursion checking
time: 0.295; rss: 173MB	compute_incremental_hashes_map
time: 0.000; rss: 173MB	load_dep_graph
time: 0.079; rss: 174MB	type collecting
time: 0.001; rss: 174MB	variance inference
time: 0.040; rss: 178MB	coherence checking
time: 0.103; rss: 181MB	wf checking
time: 0.197; rss: 185MB	item-types checking
time: 3.953; rss: 242MB	item-bodies checking
time: 0.000; rss: 242MB	drop-impl checking
time: 0.321; rss: 243MB	const checking
time: 0.058; rss: 243MB	privacy checking
time: 0.008; rss: 243MB	stability index
time: 0.023; rss: 243MB	intrinsic checking
time: 0.019; rss: 243MB	effect checking
time: 0.060; rss: 243MB	match checking
time: 0.056; rss: 238MB	liveness checking
time: 0.290; rss: 238MB	rvalue checking
time: 0.417; rss: 425MB	MIR dump
  time: 0.058; rss: 428MB	SimplifyCfg
  time: 0.084; rss: 428MB	QualifyAndPromoteConstants
  time: 0.110; rss: 428MB	TypeckMir
  time: 0.005; rss: 428MB	SimplifyBranches
  time: 0.037; rss: 428MB	SimplifyCfg
time: 0.294; rss: 428MB	MIR passes
time: 0.706; rss: 429MB	borrow checking
time: 0.018; rss: 429MB	reachability checking
time: 0.047; rss: 429MB	death checking
time: 0.043; rss: 429MB	stability checking
time: 0.000; rss: 429MB	unused lib feature checking
time: 0.220; rss: 429MB	lint checking
time: 0.000; rss: 429MB	resolving dependency formats
  time: 0.003; rss: 429MB	NoLandingPads
  time: 0.027; rss: 429MB	SimplifyCfg
  time: 0.074; rss: 442MB	EraseRegions
  time: 0.011; rss: 442MB	AddCallGuards
  time: 1.102; rss: 458MB	ElaborateDrops
  time: 0.003; rss: 458MB	NoLandingPads
  time: 0.054; rss: 459MB	SimplifyCfg
  time: 0.030; rss: 458MB	InstCombine
  time: 0.012; rss: 458MB	Deaggregator
  time: 0.003; rss: 458MB	CopyPropagation
  time: 0.009; rss: 458MB	AddCallGuards
  time: 0.003; rss: 458MB	PreTrans
time: 1.344; rss: 458MB	Prepare MIR codegen passes
  time: 0.264; rss: 464MB	write metadata
  time: 0.476; rss: 474MB	translation item collection
  time: 0.066; rss: 478MB	codegen unit partitioning
  time: 0.057; rss: 727MB	internalize symbols
time: 5.173; rss: 605MB	translation
time: 0.000; rss: 605MB	assert dep graph
time: 0.000; rss: 605MB	serialize dep graph
incremental: re-using 0 out of 1 modules
  time: 0.510; rss: 414MB	llvm function passes [0]
  time: 0.244; rss: 422MB	llvm module passes [0]
  time: 10.069; rss: 415MB	codegen passes [0]
  time: 0.001; rss: 417MB	codegen passes [0]
time: 11.557; rss: 417MB	LLVM passes
time: 0.000; rss: 417MB	serialize work products
time: 0.659; rss: 107MB	linking
done
