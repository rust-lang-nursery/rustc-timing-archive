commit b1da18fe9be180ecfcfb1691c4eb669c496996f5
Merge: fb025b4 f324037
Author: bors <bors@rust-lang.org>
Date:   Sat Nov 19 08:08:26 2016 -0800

    Auto merge of #37822 - cuviper:llvm-link-shared, r=alexcrichton
    
    rustbuild: allow dynamically linking LLVM
    
    The makefiles and `mklldeps.py` called `llvm-config --shared-mode` to
    find out if LLVM defaulted to shared or static libraries, and just went
    with that.  But under rustbuild, `librustc_llvm/build.rs` was assuming
    that LLVM should be static, and even forcing `--link-static` for 3.9+.
    
    Now that build script also uses `--shared-mode` to learn the default,
    which should work better for pre-3.9 configured for dynamic linking, as
    it wasn't possible back then to choose differently via `llvm-config`.
    
    Further, the configure script now has a new `--enable-llvm-link-shared`
    option, which allows one to manually override `--link-shared` on 3.9+
    instead of forcing static.
    
    Update: There are now four static/shared scenarios that can happen
    for the supported LLVM versions:
    
    - 3.9+: By default use `llvm-config --link-static`
    - 3.9+ and `--enable-llvm-link-shared`: Use `--link-shared` instead.
    - 3.8: Use `llvm-config --shared-mode` and go with its answer.
    - 3.7: Just assume static, maintaining the status quo.
rustc: ./rust-encoding-0.3.0
cargo rustc  -- -Ztime-passes -Zinput-stats
   Compiling encoding v0.3.0-dev (file:///root/benchmarks/rust-encoding-0.3.0)
time: 0.021; rss: 43MB	parsing
Lines of code:             5757
Pre-expansion node count:  26523
time: 0.000; rss: 43MB	recursion limit
time: 0.000; rss: 43MB	crate injection
time: 0.000; rss: 43MB	plugin loading
time: 0.000; rss: 43MB	plugin registration
time: 0.037; rss: 70MB	expansion
time: 0.000; rss: 70MB	maybe building test harness
time: 0.000; rss: 70MB	maybe creating a macro crate
Post-expansion node count: 37888
time: 0.000; rss: 70MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 70MB	complete gated feature checking
time: 0.001; rss: 70MB	early lint checks
time: 0.000; rss: 70MB	AST validation
time: 0.004; rss: 70MB	name resolution
time: 0.006; rss: 72MB	lowering ast -> hir
time: 0.000; rss: 73MB	indexing hir
time: 0.000; rss: 73MB	attribute checking
time: 0.000; rss: 72MB	language item collection
time: 0.001; rss: 72MB	lifetime resolution
time: 0.000; rss: 72MB	looking for entry point
time: 0.000; rss: 72MB	looking for plugin registrar
time: 0.005; rss: 73MB	region resolution
time: 0.000; rss: 73MB	loop checking
time: 0.000; rss: 73MB	static item recursion checking
time: 0.013; rss: 74MB	compute_incremental_hashes_map
time: 0.000; rss: 74MB	load_dep_graph
time: 0.008; rss: 76MB	type collecting
time: 0.000; rss: 76MB	variance inference
time: 0.000; rss: 76MB	impl wf inference
time: 0.008; rss: 76MB	coherence checking
time: 0.010; rss: 77MB	wf checking
time: 0.010; rss: 77MB	item-types checking
time: 0.122; rss: 81MB	item-bodies checking
time: 0.000; rss: 81MB	drop-impl checking
time: 0.008; rss: 81MB	const checking
time: 0.002; rss: 81MB	privacy checking
time: 0.000; rss: 81MB	stability index
time: 0.001; rss: 81MB	intrinsic checking
time: 0.000; rss: 81MB	effect checking
time: 0.004; rss: 81MB	match checking
time: 0.001; rss: 81MB	liveness checking
time: 0.005; rss: 81MB	rvalue checking
time: 0.025; rss: 89MB	MIR dump
  time: 0.002; rss: 89MB	SimplifyCfg
  time: 0.003; rss: 89MB	QualifyAndPromoteConstants
  time: 0.004; rss: 89MB	TypeckMir
  time: 0.000; rss: 89MB	SimplifyBranches
  time: 0.001; rss: 89MB	SimplifyCfg
time: 0.012; rss: 89MB	MIR cleanup and validation
time: 0.018; rss: 89MB	borrow checking
time: 0.000; rss: 89MB	reachability checking
time: 0.001; rss: 89MB	death checking
time: 0.001; rss: 90MB	stability checking
time: 0.000; rss: 90MB	unused lib feature checking
time: 0.014; rss: 90MB	lint checking
time: 0.000; rss: 90MB	resolving dependency formats
  time: 0.000; rss: 90MB	NoLandingPads
  time: 0.001; rss: 90MB	SimplifyCfg
  time: 0.002; rss: 90MB	EraseRegions
  time: 0.000; rss: 90MB	AddCallGuards
  time: 0.025; rss: 91MB	ElaborateDrops
  time: 0.000; rss: 91MB	NoLandingPads
  time: 0.002; rss: 91MB	SimplifyCfg
  time: 0.001; rss: 91MB	InstCombine
  time: 0.001; rss: 91MB	Deaggregator
  time: 0.000; rss: 91MB	CopyPropagation
  time: 0.001; rss: 91MB	SimplifyLocals
  time: 0.000; rss: 91MB	AddCallGuards
  time: 0.000; rss: 91MB	PreTrans
time: 0.035; rss: 91MB	MIR optimisations
  time: 0.004; rss: 91MB	write metadata
  time: 0.265; rss: 170MB	translation item collection
  time: 0.003; rss: 171MB	codegen unit partitioning
  time: 0.003; rss: 193MB	internalize symbols
time: 0.570; rss: 193MB	translation
time: 0.000; rss: 193MB	assert dep graph
time: 0.000; rss: 193MB	serialize dep graph
  time: 0.025; rss: 105MB	llvm function passes [0]
  time: 0.057; rss: 114MB	llvm module passes [0]
  time: 0.627; rss: 120MB	codegen passes [0]
  time: 0.000; rss: 119MB	codegen passes [0]
time: 0.764; rss: 119MB	LLVM passes
time: 0.000; rss: 119MB	serialize work products
time: 0.040; rss: 90MB	linking
done
