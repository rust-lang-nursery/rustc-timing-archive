commit d00c2454157713e77729989c715b96ee31c6b278
Merge: eaf71f8 a65b201
Author: bors <bors@rust-lang.org>
Date:   Fri Aug 26 03:29:45 2016 -0700

    Auto merge of #35975 - jonathandturner:error_buffering, r=alexcrichton
    
    Buffer unix and lock windows to prevent message interleaving
    
    When cargo does a build on multiple processes, multiple crates may error at the same time.  If this happens, currently you'll see interleaving of the error messages, which makes for an unreadable message.
    
    Example:
    
    ```
        --> --> src/bin/multithread-unix.rs:16:35src/bin/singlethread.rs:16:24
    
          ||
    
    1616  | |     Server::new(&addr).workers(8).    Server::new(&addr).serveserve(|r: Request| {(|r: Request| {
    
          | |                                                          ^^^^^^^^^^ expected struct `std::io::Error`, found () expected struct `std::io::Error`, found ()
    
          ||
    
          = = notenote: expected type `std::io::Error`: expected type `std::io::Error`
    
          = = notenote:    found type `()`:    found type `()`
    
          = = notenote: required because of the requirements on the impl of `futures_minihttp::Service<futures_minihttp::Request, futures_minihttp::Response>` for `[closure@src/bin/multithread-unix.rs:16:41: 22:6]`: required because of the requirements on the impl of `futures_minihttp::Service<futures_minihttp::Request, futures_minihttp::Response>` for `[closure@src/bin/singlethread.rs:16:30: 22:6]`
    
    error: aborting due to previous error
    
    error: aborting due to previous error
    ```
    
    This patch uses two techniques to prevent this interleaving.  On Unix systems, since they use the text-based ANSI protocol for coloring, we can safely buffer up whole messages before we emit.  This PR does this buffering, and emits the whole message at once.
    
    On Windows, term must use the Windows terminal API to color the output.  This disallows us from using the same buffering technique.  Instead, here we grab a Windows mutex (thanks to @alexcrichton for the lock code).  This lock only works in Windows and will hold a mutex for the duration of a message output.
    
    r? @nikomatsakis
rustc: ./jld-day15-parser
cargo rustc -- -Ztime-passes -Zinput-stats
    Updating registry `https://github.com/rust-lang/crates.io-index`
   Compiling combine v1.3.0
   Compiling day15 v0.1.0 (file:///root/benchmarks/jld-day15-parser)
time: 0.001; rss: 42MB	parsing
Lines of code:             72
Pre-expansion node count:  654
time: 0.000; rss: 42MB	configuration
time: 0.000; rss: 42MB	recursion limit
time: 0.000; rss: 42MB	crate injection
time: 0.000; rss: 42MB	plugin loading
time: 0.000; rss: 42MB	plugin registration
time: 0.017; rss: 64MB	expansion
time: 0.000; rss: 64MB	maybe building test harness
time: 0.000; rss: 64MB	assigning node ids
Post-expansion node count: 1155
time: 0.000; rss: 64MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 64MB	complete gated feature checking
time: 0.000; rss: 64MB	collecting defs
time: 0.003; rss: 64MB	external crate/lib resolution
time: 0.000; rss: 64MB	early lint checks
time: 0.000; rss: 64MB	AST validation
time: 0.001; rss: 64MB	name resolution
time: 0.000; rss: 64MB	lowering ast -> hir
time: 0.000; rss: 64MB	indexing hir
time: 0.000; rss: 64MB	attribute checking
time: 0.000; rss: 64MB	language item collection
time: 0.000; rss: 64MB	lifetime resolution
time: 0.000; rss: 64MB	looking for entry point
time: 0.000; rss: 64MB	looking for plugin registrar
time: 0.000; rss: 64MB	region resolution
time: 0.000; rss: 64MB	loop checking
time: 0.000; rss: 64MB	static item recursion checking
time: 0.000; rss: 68MB	compute_incremental_hashes_map
time: 0.000; rss: 68MB	load_dep_graph
time: 0.001; rss: 68MB	type collecting
time: 0.000; rss: 68MB	variance inference
time: 0.004; rss: 68MB	coherence checking
time: 0.005; rss: 68MB	wf checking
time: 0.000; rss: 68MB	item-types checking
time: 0.034; rss: 74MB	item-bodies checking
time: 0.000; rss: 74MB	drop-impl checking
time: 0.001; rss: 74MB	const checking
time: 0.000; rss: 74MB	privacy checking
time: 0.000; rss: 74MB	stability index
time: 0.000; rss: 74MB	intrinsic checking
time: 0.000; rss: 74MB	effect checking
time: 0.000; rss: 74MB	match checking
time: 0.000; rss: 74MB	liveness checking
time: 0.000; rss: 74MB	rvalue checking
time: 0.001; rss: 74MB	MIR dump
time: 0.001; rss: 74MB	MIR passes
time: 0.001; rss: 74MB	borrow checking
time: 0.000; rss: 74MB	reachability checking
time: 0.000; rss: 74MB	death checking
time: 0.000; rss: 74MB	stability checking
time: 0.000; rss: 74MB	unused lib feature checking
time: 0.003; rss: 74MB	lint checking
time: 0.001; rss: 74MB	resolving dependency formats
time: 0.005; rss: 74MB	Prepare MIR codegen passes
  time: 0.000; rss: 74MB	write metadata
  time: 0.426; rss: 85MB	translation item collection
  time: 0.003; rss: 85MB	codegen unit partitioning
  time: 0.006; rss: 97MB	internalize symbols
time: 3.112; rss: 97MB	translation
time: 0.000; rss: 97MB	assert dep graph
time: 0.000; rss: 97MB	serialize dep graph
  time: 0.017; rss: 88MB	llvm function passes [0]
  time: 0.001; rss: 88MB	llvm module passes [0]
  time: 0.348; rss: 94MB	codegen passes [0]
  time: 0.000; rss: 93MB	codegen passes [0]
time: 0.368; rss: 93MB	LLVM passes
time: 0.000; rss: 93MB	serialize work products
  time: 0.121; rss: 83MB	running linker
time: 0.122; rss: 83MB	linking
done
