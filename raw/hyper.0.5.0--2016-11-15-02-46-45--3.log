commit 0ed951993fb5721a303ca5fa743543dd9f3f6b10
Merge: bd6a54d 7cd8a49
Author: bors <bors@rust-lang.org>
Date:   Mon Nov 14 18:12:26 2016 -0800

    Auto merge of #37775 - alexcrichton:try-fix-dox, r=brson
    
    rustbuild: Tweak default rule inclusion
    
    If a rule is flagged with `default(true)` then the pseudo-rule `default:foo`
    will include that. If a rule is also flagged with `.host(true)`, however, then
    the rule shouldn't be included for targets that aren't in the host array. This
    adds a filter to ensure we don't pull in host rules for targets by accident.
rustc: ./hyper.0.5.0
cargo rustc  -- -Ztime-passes -Zinput-stats
   Compiling hyper v0.5.0 (file:///root/benchmarks/hyper.0.5.0)
time: 0.033; rss: 41MB	parsing
Lines of code:             9003
Pre-expansion node count:  44055
time: 0.000; rss: 41MB	recursion limit
time: 0.000; rss: 41MB	crate injection
time: 0.000; rss: 41MB	plugin loading
time: 0.000; rss: 41MB	plugin registration
time: 0.090; rss: 79MB	expansion
time: 0.000; rss: 79MB	maybe building test harness
time: 0.001; rss: 79MB	maybe creating a macro crate
Post-expansion node count: 101769
time: 0.000; rss: 79MB	checking for inline asm in case the target doesn't support it
time: 0.002; rss: 79MB	complete gated feature checking
time: 0.003; rss: 79MB	early lint checks
time: 0.001; rss: 79MB	AST validation
time: 0.020; rss: 84MB	name resolution
time: 0.014; rss: 87MB	lowering ast -> hir
time: 0.001; rss: 88MB	indexing hir
time: 0.001; rss: 88MB	attribute checking
time: 0.001; rss: 84MB	language item collection
time: 0.002; rss: 84MB	lifetime resolution
time: 0.000; rss: 84MB	looking for entry point
time: 0.000; rss: 84MB	looking for plugin registrar
time: 0.011; rss: 86MB	region resolution
time: 0.001; rss: 86MB	loop checking
time: 0.001; rss: 86MB	static item recursion checking
time: 0.038; rss: 87MB	compute_incremental_hashes_map
time: 0.000; rss: 87MB	load_dep_graph
time: 0.015; rss: 89MB	type collecting
time: 0.000; rss: 89MB	variance inference
time: 0.015; rss: 90MB	coherence checking
time: 0.041; rss: 91MB	wf checking
time: 0.028; rss: 92MB	item-types checking
time: 0.310; rss: 100MB	item-bodies checking
time: 0.000; rss: 100MB	drop-impl checking
time: 0.050; rss: 102MB	const checking
time: 0.007; rss: 102MB	privacy checking
time: 0.001; rss: 102MB	stability index
time: 0.003; rss: 102MB	intrinsic checking
time: 0.001; rss: 102MB	effect checking
time: 0.007; rss: 102MB	match checking
time: 0.004; rss: 103MB	liveness checking
time: 0.020; rss: 103MB	rvalue checking
time: 0.062; rss: 123MB	MIR dump
  time: 0.007; rss: 123MB	SimplifyCfg
  time: 0.015; rss: 125MB	QualifyAndPromoteConstants
  time: 0.012; rss: 125MB	TypeckMir
  time: 0.001; rss: 125MB	SimplifyBranches
  time: 0.003; rss: 125MB	SimplifyCfg
time: 0.047; rss: 125MB	MIR cleanup and validation
time: 0.052; rss: 125MB	borrow checking
time: 0.003; rss: 125MB	reachability checking
time: 0.005; rss: 126MB	death checking
time: 0.004; rss: 126MB	stability checking
time: 0.000; rss: 126MB	unused lib feature checking
time: 0.039; rss: 126MB	lint checking
time: 0.000; rss: 126MB	resolving dependency formats
  time: 0.000; rss: 126MB	NoLandingPads
  time: 0.003; rss: 126MB	SimplifyCfg
  time: 0.008; rss: 127MB	EraseRegions
  time: 0.001; rss: 127MB	AddCallGuards
  time: 0.024; rss: 128MB	ElaborateDrops
  time: 0.001; rss: 128MB	NoLandingPads
  time: 0.005; rss: 128MB	SimplifyCfg
  time: 0.003; rss: 128MB	InstCombine
  time: 0.003; rss: 128MB	Deaggregator
  time: 0.000; rss: 128MB	CopyPropagation
  time: 0.004; rss: 128MB	SimplifyLocals
  time: 0.001; rss: 128MB	AddCallGuards
  time: 0.000; rss: 128MB	PreTrans
time: 0.055; rss: 128MB	MIR optimisations
  time: 0.017; rss: 131MB	write metadata
  time: 0.134; rss: 137MB	translation item collection
  time: 0.016; rss: 140MB	codegen unit partitioning
  time: 0.015; rss: 193MB	internalize symbols
time: 1.071; rss: 193MB	translation
time: 0.000; rss: 193MB	assert dep graph
time: 0.000; rss: 193MB	serialize dep graph
  time: 0.087; rss: 141MB	llvm function passes [0]
  time: 0.042; rss: 144MB	llvm module passes [0]
  time: 1.634; rss: 146MB	codegen passes [0]
  time: 0.000; rss: 146MB	codegen passes [0]
time: 1.927; rss: 145MB	LLVM passes
time: 0.000; rss: 145MB	serialize work products
time: 0.070; rss: 88MB	linking
done
