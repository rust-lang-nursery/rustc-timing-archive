commit 49d3fd3b38cd838b241858baaaa6162666badba1
Merge: ac635aa c722a1e
Author: bors <bors@rust-lang.org>
Date:   Fri Nov 18 19:21:47 2016 -0800

    Auto merge of #37787 - michaelwoerister:macro-def-ich, r=nikomatsakis
    
    ICH: Handle MacroDef HIR instances.
    
    As of recently, `hir::MacroDef` instances are exported in crate metadata, which means we also store their ICH when doing incremental compilation. Even though exported macro definitions should not (yet) interact with incremental compilation, the ICH is also used for the general purpose crate hash, where macros should be included.
    
    This PR implements ICH computation for `MacroDef`. In theory, the ICH of these MacroDefs is less stable than that of other HIR items, since I opted to just call the compiler-generated `Hash::hash()` for `Token::Interpolated` variants. `Token::Interpolated` contains AST data structures and it would have been a lot of effort to expand ICH computation to the AST too. Since quasi-quoting is rarely used *and* it would only make a difference if incremental compilation was extended to macros, the simpler implementation seemed like a good idea.
    
    This fixes the problem reported in https://github.com/rust-lang/rust/issues/37756. The test still fails because of broken codegen-unit support though.
    
    r? @nikomatsakis
rustc: ./inflate-0.1.0
cargo rustc  -- -Ztime-passes -Zinput-stats
   Compiling inflate v0.1.0 (file:///root/benchmarks/inflate-0.1.0)
time: 0.003; rss: 43MB	parsing
Lines of code:             956
Pre-expansion node count:  4736
time: 0.000; rss: 43MB	recursion limit
time: 0.000; rss: 43MB	crate injection
time: 0.000; rss: 43MB	plugin loading
time: 0.000; rss: 43MB	plugin registration
time: 0.057; rss: 73MB	expansion
time: 0.000; rss: 73MB	maybe building test harness
time: 0.000; rss: 73MB	maybe creating a macro crate
Post-expansion node count: 55748
time: 0.000; rss: 73MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 73MB	complete gated feature checking
time: 0.002; rss: 73MB	early lint checks
time: 0.000; rss: 73MB	AST validation
time: 0.008; rss: 75MB	name resolution
time: 0.004; rss: 77MB	lowering ast -> hir
time: 0.001; rss: 79MB	indexing hir
time: 0.001; rss: 79MB	attribute checking
time: 0.000; rss: 75MB	language item collection
time: 0.000; rss: 75MB	lifetime resolution
time: 0.000; rss: 75MB	looking for entry point
time: 0.000; rss: 75MB	looking for plugin registrar
time: 0.003; rss: 76MB	region resolution
time: 0.000; rss: 76MB	loop checking
time: 0.000; rss: 76MB	static item recursion checking
time: 0.018; rss: 76MB	compute_incremental_hashes_map
time: 0.000; rss: 76MB	load_dep_graph
time: 0.001; rss: 76MB	type collecting
time: 0.000; rss: 76MB	variance inference
time: 0.000; rss: 76MB	impl wf inference
time: 0.006; rss: 80MB	coherence checking
time: 0.001; rss: 80MB	wf checking
time: 0.001; rss: 80MB	item-types checking
time: 1.658; rss: 85MB	item-bodies checking
time: 0.000; rss: 85MB	drop-impl checking
time: 0.015; rss: 86MB	const checking
time: 0.001; rss: 86MB	privacy checking
time: 0.000; rss: 86MB	stability index
time: 0.000; rss: 86MB	intrinsic checking
time: 0.000; rss: 86MB	effect checking
time: 0.002; rss: 86MB	match checking
time: 0.065; rss: 86MB	liveness checking
time: 0.011; rss: 86MB	rvalue checking
time: 0.034; rss: 104MB	MIR dump
  time: 0.007; rss: 105MB	SimplifyCfg
  time: 0.005; rss: 105MB	QualifyAndPromoteConstants
  time: 0.007; rss: 105MB	TypeckMir
  time: 0.000; rss: 105MB	SimplifyBranches
  time: 0.002; rss: 105MB	SimplifyCfg
time: 0.021; rss: 105MB	MIR cleanup and validation
time: 0.212; rss: 108MB	borrow checking
time: 0.000; rss: 108MB	reachability checking
time: 0.003; rss: 108MB	death checking
time: 0.002; rss: 108MB	stability checking
time: 0.000; rss: 108MB	unused lib feature checking
time: 0.016; rss: 109MB	lint checking
time: 0.000; rss: 109MB	resolving dependency formats
  time: 0.000; rss: 109MB	NoLandingPads
  time: 0.002; rss: 109MB	SimplifyCfg
  time: 0.003; rss: 109MB	EraseRegions
  time: 0.001; rss: 109MB	AddCallGuards
  time: 0.222; rss: 112MB	ElaborateDrops
  time: 0.000; rss: 112MB	NoLandingPads
  time: 0.006; rss: 110MB	SimplifyCfg
  time: 0.003; rss: 110MB	InstCombine
  time: 0.000; rss: 110MB	Deaggregator
  time: 0.000; rss: 110MB	CopyPropagation
  time: 0.003; rss: 110MB	SimplifyLocals
  time: 0.001; rss: 110MB	AddCallGuards
  time: 0.000; rss: 110MB	PreTrans
time: 0.241; rss: 110MB	MIR optimisations
  time: 0.001; rss: 110MB	write metadata
  time: 0.008; rss: 111MB	translation item collection
  time: 0.001; rss: 111MB	codegen unit partitioning
  time: 0.001; rss: 123MB	internalize symbols
time: 0.150; rss: 123MB	translation
time: 0.000; rss: 123MB	assert dep graph
time: 0.000; rss: 123MB	serialize dep graph
  time: 0.029; rss: 90MB	llvm function passes [0]
  time: 0.005; rss: 91MB	llvm module passes [0]
  time: 0.667; rss: 97MB	codegen passes [0]
  time: 0.000; rss: 97MB	codegen passes [0]
time: 0.737; rss: 97MB	LLVM passes
time: 0.000; rss: 97MB	serialize work products
time: 0.019; rss: 82MB	linking
done
