commit a4f781e47710d8c938130446bf4cd5e9be2231d2
Merge: 9330006 bcbc9e5
Author: bors <bors@rust-lang.org>
Date:   Tue Apr 12 10:12:55 2016 -0700

    Auto merge of #31963 - barosl:rename-doc, r=alexcrichton
    
    Describe more platform-specific behaviors of `std::fs::rename`
    
    I did some tests myself regarding the situation when both `from` and `to` exist, and the results were:
    
    On Linux:
    
    `from` | `to` | Result
    ---- | ---- | ----
    Directory | Directory | Ok
    Directory | File | Error
    File | Directory | Error
    File | File | Ok
    
    On Windows:
    
    `from` | `to` | Result
    ---- | ---- | ----
    Directory | Directory | Error
    Directory | File | Ok
    File | Directory | Error
    File | File | Ok
    
    This is a bit against the official MSDN documentation, which says "(`MOVEFILE_REPLACE_EXISTING`) cannot be used if `lpNewFileName` or `lpExistingFileName` names a directory." As evidenced above, `lpExistingFileName` *can* be a directory.
    
    I also mentioned the atomicity of the operation.
    
    Fixes #31301.
rustc: ./regex.0.1.30
cargo rustc -- -Ztime-passes -Zinput-stats
    Updating registry `https://github.com/rust-lang/crates.io-index`
   Compiling regex v0.1.30 (file:///root/benchmarks/regex.0.1.30)
time: 0.089; rss: 51MB	parsing
Lines of code:             8558
Pre-expansion node count:  58217
time: 0.011; rss: 51MB	configuration 1
time: 0.000; rss: 51MB	recursion limit
time: 0.001; rss: 51MB	gated macro checking
time: 0.000; rss: 51MB	crate injection
time: 0.003; rss: 54MB	macro loading
time: 0.000; rss: 54MB	plugin loading
time: 0.000; rss: 54MB	plugin registration
time: 0.057; rss: 58MB	expansion
time: 0.001; rss: 58MB	complete gated feature checking 1
time: 0.013; rss: 58MB	configuration 2
time: 0.000; rss: 58MB	gated configuration checking
time: 0.006; rss: 58MB	maybe building test harness
time: 0.006; rss: 58MB	prelude injection
time: 0.001; rss: 58MB	checking that all macro invocations are gone
time: 0.000; rss: 58MB	checking for inline asm in case the target doesn't support it
time: 0.001; rss: 58MB	complete gated feature checking 2
time: 0.001; rss: 58MB	const fn bodies and arguments
Post-expansion node count: 68485
time: 0.006; rss: 58MB	assigning node ids
time: 0.012; rss: 68MB	lowering ast -> hir
time: 0.005; rss: 70MB	indexing hir
time: 0.001; rss: 70MB	attribute checking
time: 0.007; rss: 70MB	early lint checks
time: 0.001; rss: 62MB	external crate/lib resolution
time: 0.001; rss: 62MB	language item collection
time: 0.010; rss: 72MB	resolution
time: 0.001; rss: 72MB	lifetime resolution
time: 0.000; rss: 72MB	looking for entry point
time: 0.000; rss: 72MB	looking for plugin registrar
time: 0.009; rss: 75MB	region resolution
time: 0.001; rss: 75MB	loop checking
time: 0.001; rss: 75MB	static item recursion checking
time: 0.000; rss: 75MB	load_dep_graph
time: 0.007; rss: 85MB	type collecting
time: 0.000; rss: 85MB	variance inference
time: 0.024; rss: 95MB	coherence checking
time: 0.010; rss: 96MB	wf checking
time: 0.259; rss: 100MB	item-types checking
time: 0.210; rss: 110MB	item-bodies checking
time: 0.000; rss: 110MB	drop-impl checking
time: 0.027; rss: 112MB	const checking
time: 0.004; rss: 112MB	privacy checking
time: 0.001; rss: 112MB	stability index
time: 0.001; rss: 112MB	intrinsic checking
time: 0.001; rss: 112MB	effect checking
time: 0.003; rss: 112MB	match checking
time: 0.002; rss: 112MB	liveness checking
time: 0.007; rss: 112MB	rvalue checking
time: 0.022; rss: 115MB	MIR dump
time: 0.007; rss: 115MB	MIR passes
time: 0.020; rss: 115MB	borrow checking
time: 0.000; rss: 115MB	reachability checking
time: 0.003; rss: 115MB	death checking
time: 0.003; rss: 115MB	stability checking
time: 0.000; rss: 115MB	unused lib feature checking
time: 0.029; rss: 115MB	lint checking
time: 0.000; rss: 115MB	resolving dependency formats
time: 0.004; rss: 116MB	Prepare MIR codegen passes
  time: 0.062; rss: 131MB	translation item collection
  time: 0.143; rss: 182MB	write metadata
time: 0.719; rss: 182MB	translation
time: 0.000; rss: 182MB	assert dep graph
time: 0.000; rss: 182MB	serialize dep graph
  time: 0.036; rss: 121MB	llvm function passes [0]
  time: 0.017; rss: 122MB	llvm module passes [0]
  time: 0.604; rss: 126MB	codegen passes [0]
  time: 0.001; rss: 108MB	codegen passes [0]
time: 0.731; rss: 106MB	LLVM passes
time: 0.064; rss: 105MB	linking
done
