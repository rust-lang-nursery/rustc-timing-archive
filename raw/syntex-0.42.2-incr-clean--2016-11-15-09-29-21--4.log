commit 30857ae8f67676e32322cdbb6c606c319eacdd73
Merge: c8867f8 88b4646
Author: bors <bors@rust-lang.org>
Date:   Tue Nov 15 04:42:28 2016 -0800

    Auto merge of #37714 - alexcrichton:builtins-hidden, r=nikomatsakis
    
    rustc: Flag all builtins functions as hidden
    
    When compiling compiler-rt you typically compile with `-fvisibility=hidden`
    which to ensure that all symbols are hidden in shared objects and don't show up
    in symbol tables. This is important for these intrinsics being linked in every
    crate to ensure that we're not unnecessarily bloating the public ABI of Rust
    crates.
    
    This should help allow the compiler-builtins project with Rust-defined builtins
    start landing in-tree as well.
rustc: ./syntex-0.42.2-incr-clean
RUSTFLAGS="-Z incremental=incr" \
    cargo rustc -p syntex_syntax  -- \
    -Ztime-passes -Zinput-stats -Z incremental-info
   Compiling syntex_syntax v0.42.0
time: 0.092; rss: 70MB	parsing
Lines of code:             33687
Pre-expansion node count:  223115
time: 0.000; rss: 70MB	recursion limit
time: 0.000; rss: 70MB	crate injection
time: 0.000; rss: 70MB	plugin loading
time: 0.000; rss: 70MB	plugin registration
time: 0.236; rss: 144MB	expansion
time: 0.000; rss: 144MB	maybe building test harness
time: 0.006; rss: 144MB	maybe creating a macro crate
Post-expansion node count: 638863
time: 0.000; rss: 144MB	checking for inline asm in case the target doesn't support it
time: 0.013; rss: 144MB	complete gated feature checking
time: 0.023; rss: 144MB	early lint checks
time: 0.007; rss: 144MB	AST validation
time: 0.077; rss: 158MB	name resolution
time: 0.045; rss: 184MB	lowering ast -> hir
time: 0.008; rss: 194MB	indexing hir
time: 0.006; rss: 194MB	attribute checking
time: 0.005; rss: 151MB	language item collection
time: 0.010; rss: 151MB	lifetime resolution
time: 0.000; rss: 151MB	looking for entry point
time: 0.000; rss: 151MB	looking for plugin registrar
time: 0.041; rss: 172MB	region resolution
time: 0.005; rss: 172MB	loop checking
time: 0.005; rss: 172MB	static item recursion checking
time: 0.328; rss: 172MB	compute_incremental_hashes_map
time: 0.000; rss: 172MB	load_dep_graph
time: 0.048; rss: 176MB	type collecting
time: 0.001; rss: 176MB	variance inference
time: 0.018; rss: 178MB	coherence checking
time: 0.097; rss: 179MB	wf checking
time: 0.182; rss: 183MB	item-types checking
time: 3.360; rss: 233MB	item-bodies checking
time: 0.000; rss: 233MB	drop-impl checking
time: 0.219; rss: 253MB	const checking
time: 0.045; rss: 253MB	privacy checking
time: 0.005; rss: 253MB	stability index
time: 0.018; rss: 253MB	intrinsic checking
time: 0.014; rss: 253MB	effect checking
time: 0.045; rss: 253MB	match checking
time: 0.049; rss: 239MB	liveness checking
time: 0.180; rss: 239MB	rvalue checking
time: 0.379; rss: 436MB	MIR dump
  time: 0.057; rss: 438MB	SimplifyCfg
  time: 0.073; rss: 438MB	QualifyAndPromoteConstants
  time: 0.097; rss: 438MB	TypeckMir
  time: 0.004; rss: 438MB	SimplifyBranches
  time: 0.030; rss: 438MB	SimplifyCfg
time: 0.262; rss: 438MB	MIR cleanup and validation
time: 0.487; rss: 439MB	borrow checking
time: 0.025; rss: 439MB	reachability checking
time: 0.039; rss: 439MB	death checking
time: 0.031; rss: 443MB	stability checking
time: 0.000; rss: 443MB	unused lib feature checking
time: 0.196; rss: 443MB	lint checking
time: 0.000; rss: 443MB	resolving dependency formats
  time: 0.003; rss: 443MB	NoLandingPads
  time: 0.027; rss: 443MB	SimplifyCfg
  time: 0.062; rss: 449MB	EraseRegions
  time: 0.011; rss: 449MB	AddCallGuards
  time: 0.274; rss: 466MB	ElaborateDrops
  time: 0.003; rss: 466MB	NoLandingPads
  time: 0.053; rss: 466MB	SimplifyCfg
  time: 0.029; rss: 466MB	InstCombine
  time: 0.013; rss: 466MB	Deaggregator
  time: 0.002; rss: 466MB	CopyPropagation
  time: 0.034; rss: 466MB	SimplifyLocals
  time: 0.010; rss: 466MB	AddCallGuards
  time: 0.003; rss: 466MB	PreTrans
time: 0.524; rss: 466MB	MIR optimisations
  time: 0.061; rss: 475MB	write metadata
  time: 0.405; rss: 491MB	translation item collection
  time: 0.065; rss: 501MB	codegen unit partitioning
  time: 0.046; rss: 739MB	internalize symbols
time: 4.510; rss: 739MB	translation
time: 0.000; rss: 739MB	assert dep graph
time: 0.000; rss: 739MB	serialize dep graph
incremental: re-using 0 out of 1 modules
  time: 0.526; rss: 421MB	llvm function passes [0]
  time: 0.250; rss: 426MB	llvm module passes [0]
  time: 10.566; rss: 421MB	codegen passes [0]
  time: 0.000; rss: 421MB	codegen passes [0]
time: 12.130; rss: 421MB	LLVM passes
time: 0.000; rss: 421MB	serialize work products
time: 0.348; rss: 105MB	linking
done
