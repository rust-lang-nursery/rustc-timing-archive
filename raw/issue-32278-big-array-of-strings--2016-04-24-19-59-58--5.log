commit 645dd013ac6b334ab5bf7a7240c2243f4bb590c9
Merge: 1930483 e078667
Author: bors <bors@rust-lang.org>
Date:   Sun Apr 24 17:04:49 2016 -0700

    Auto merge of #33085 - fitzgen:make-enumerate-example-more-clear, r=steveklabnik
    
    Make the `Iterator::enumerate` doc example more clear
    
    The example uses integers for the value being iterated over, but the indices
    added by `enumerate` are also integers, so I always end up double taking and
    thinking harder than I should when parsing the documentation. I also always
    forget which order the index and value are in the tuple so I frequently hit this
    stumbling block. This commit changes the documentation to iterate over
    characters so that it is immediately obvious which part of the tuple is the
    index and which is the value.
rustc: ./issue-32278-big-array-of-strings
/root/rust/x86_64-unknown-linux-gnu/stage2/bin/rustc big-array-of-strings.rs -Ztime-passes -Zinput-stats
time: 0.147; rss: 68MB	parsing
Lines of code:             65577
Pre-expansion node count:  65552
time: 0.011; rss: 68MB	configuration 1
time: 0.000; rss: 68MB	recursion limit
time: 0.001; rss: 68MB	gated macro checking
time: 0.000; rss: 68MB	crate injection
time: 0.004; rss: 73MB	macro loading
time: 0.000; rss: 73MB	plugin loading
time: 0.000; rss: 73MB	plugin registration
time: 0.042; rss: 77MB	expansion
time: 0.001; rss: 77MB	complete gated feature checking 1
time: 0.011; rss: 77MB	configuration 2
time: 0.000; rss: 77MB	gated configuration checking
time: 0.006; rss: 77MB	maybe building test harness
time: 0.005; rss: 77MB	prelude injection
time: 0.001; rss: 77MB	checking that all macro invocations are gone
time: 0.000; rss: 77MB	checking for inline asm in case the target doesn't support it
time: 0.001; rss: 77MB	complete gated feature checking 2
time: 0.001; rss: 77MB	const fn bodies and arguments
Post-expansion node count: 65565
time: 0.006; rss: 77MB	assigning node ids
time: 0.001; rss: 77MB	collecting defs
time: 0.002; rss: 78MB	external crate/lib resolution
time: 0.009; rss: 91MB	lowering ast -> hir
time: 0.002; rss: 93MB	indexing hir
time: 0.001; rss: 93MB	attribute checking
time: 0.008; rss: 93MB	early lint checks
time: 0.001; rss: 80MB	language item collection
time: 0.002; rss: 83MB	name resolution
time: 0.001; rss: 83MB	lifetime resolution
time: 0.000; rss: 83MB	looking for entry point
time: 0.000; rss: 83MB	looking for plugin registrar
time: 0.007; rss: 91MB	region resolution
time: 0.001; rss: 91MB	loop checking
time: 0.001; rss: 91MB	static item recursion checking
time: 0.000; rss: 91MB	load_dep_graph
time: 0.000; rss: 91MB	type collecting
time: 0.000; rss: 91MB	variance inference
time: 0.006; rss: 100MB	coherence checking
time: 0.001; rss: 100MB	wf checking
time: 0.825; rss: 197MB	item-types checking
time: 0.000; rss: 197MB	item-bodies checking
time: 0.000; rss: 197MB	drop-impl checking
time: 0.019; rss: 199MB	const checking
time: 0.003; rss: 199MB	privacy checking
time: 0.001; rss: 199MB	stability index
time: 0.001; rss: 199MB	intrinsic checking
time: 0.001; rss: 199MB	effect checking
time: 0.001; rss: 199MB	match checking
time: 0.001; rss: 199MB	liveness checking
time: 0.001; rss: 199MB	rvalue checking
time: 0.001; rss: 199MB	MIR dump
time: 0.000; rss: 199MB	MIR passes
time: 0.001; rss: 199MB	borrow checking
time: 0.000; rss: 199MB	reachability checking
time: 0.001; rss: 199MB	death checking
time: 0.001; rss: 199MB	stability checking
time: 0.000; rss: 199MB	unused lib feature checking
time: 0.029; rss: 199MB	lint checking
time: 0.001; rss: 199MB	resolving dependency formats
time: 0.000; rss: 199MB	Prepare MIR codegen passes
  time: 0.001; rss: 200MB	translation item collection
  time: 0.000; rss: 200MB	codegen unit partitioning
  time: 0.000; rss: 205MB	write metadata
time: 0.084; rss: 205MB	translation
time: 0.000; rss: 205MB	assert dep graph
time: 0.000; rss: 205MB	serialize dep graph
  time: 0.003; rss: 89MB	llvm function passes [0]
  time: 0.000; rss: 89MB	llvm module passes [0]
  time: 0.161; rss: 90MB	codegen passes [0]
  time: 0.000; rss: 79MB	codegen passes [0]
time: 0.176; rss: 79MB	LLVM passes
  time: 0.180; rss: 79MB	running linker
time: 0.181; rss: 79MB	linking
done
