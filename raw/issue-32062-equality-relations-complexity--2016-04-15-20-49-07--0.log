commit fef6c64a8020c357dda902593f1065864564c079
Merge: 576229f e8441b6
Author: bors <bors@rust-lang.org>
Date:   Fri Apr 15 18:13:59 2016 -0700

    Auto merge of #32779 - michaelwoerister:partitioning, r=nikomatsakis
    
    Add initial version of codegen unit partitioning for incremental compilation.
    
    The task of the partitioning module is to take the complete set of translation items of a crate and produce a set of codegen units from it, where a codegen unit is a named set of (translation-item, linkage) pairs. That is, this module decides which translation item appears in which codegen units with which linkage.
    
    This version only handles the case of partitioning for incremental compilation, not the regular N-codegen units case. In the future the regular case should be handled too, maybe even doing a bit more analysis to intelligently figure out a good partitioning.
    
    One thing that could be improved is the syntax of the codegen unit tests. Right now they still use the compile-fail error specification infrastructure, so everything has to be on one line. Would be nice to be able to format things in a more readable way.
rustc: ./issue-32062-equality-relations-complexity
/root/rust/x86_64-unknown-linux-gnu/stage2/bin/rustc issue-32062.rs -Ztime-passes -Zinput-stats
time: 0.001; rss: 36MB	parsing
Lines of code:             60
Pre-expansion node count:  586
time: 0.000; rss: 40MB	configuration 1
time: 0.000; rss: 40MB	recursion limit
time: 0.000; rss: 40MB	gated macro checking
time: 0.000; rss: 40MB	crate injection
time: 0.003; rss: 43MB	macro loading
time: 0.000; rss: 43MB	plugin loading
time: 0.000; rss: 43MB	plugin registration
time: 0.001; rss: 43MB	expansion
time: 0.000; rss: 43MB	complete gated feature checking 1
time: 0.000; rss: 43MB	configuration 2
time: 0.000; rss: 43MB	gated configuration checking
time: 0.000; rss: 43MB	maybe building test harness
time: 0.000; rss: 43MB	prelude injection
time: 0.000; rss: 43MB	checking that all macro invocations are gone
time: 0.000; rss: 43MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 43MB	complete gated feature checking 2
time: 0.000; rss: 43MB	const fn bodies and arguments
Post-expansion node count: 599
time: 0.000; rss: 43MB	assigning node ids
time: 0.000; rss: 43MB	lowering ast -> hir
time: 0.000; rss: 43MB	indexing hir
time: 0.000; rss: 43MB	attribute checking
time: 0.000; rss: 43MB	early lint checks
time: 0.001; rss: 43MB	external crate/lib resolution
time: 0.000; rss: 43MB	language item collection
time: 0.000; rss: 47MB	resolution
time: 0.000; rss: 47MB	lifetime resolution
time: 0.000; rss: 47MB	looking for entry point
time: 0.000; rss: 47MB	looking for plugin registrar
time: 0.000; rss: 47MB	region resolution
time: 0.000; rss: 47MB	loop checking
time: 0.000; rss: 47MB	static item recursion checking
time: 0.000; rss: 47MB	load_dep_graph
time: 0.001; rss: 51MB	type collecting
time: 0.000; rss: 51MB	variance inference
time: 0.005; rss: 60MB	coherence checking
time: 0.007; rss: 63MB	wf checking
time: 0.000; rss: 63MB	item-types checking
time: 1.765; rss: 108MB	item-bodies checking
time: 0.000; rss: 108MB	drop-impl checking
time: 0.001; rss: 108MB	const checking
time: 0.000; rss: 108MB	privacy checking
time: 0.000; rss: 108MB	stability index
time: 0.000; rss: 108MB	intrinsic checking
time: 0.000; rss: 108MB	effect checking
time: 0.000; rss: 108MB	match checking
time: 0.000; rss: 108MB	liveness checking
time: 0.002; rss: 108MB	rvalue checking
time: 0.001; rss: 108MB	MIR dump
time: 0.000; rss: 108MB	MIR passes
time: 0.001; rss: 108MB	borrow checking
time: 0.000; rss: 108MB	reachability checking
time: 0.000; rss: 108MB	death checking
time: 0.000; rss: 108MB	stability checking
time: 0.000; rss: 108MB	unused lib feature checking
time: 0.000; rss: 108MB	lint checking
time: 0.001; rss: 108MB	resolving dependency formats
time: 0.000; rss: 108MB	Prepare MIR codegen passes
  time: 0.091; rss: 122MB	translation item collection
  time: 0.000; rss: 122MB	codegen unit partitioning
  time: 0.000; rss: 128MB	write metadata
time: 0.452; rss: 128MB	translation
time: 0.000; rss: 128MB	assert dep graph
time: 0.000; rss: 128MB	serialize dep graph
  time: 0.000; rss: 84MB	llvm function passes [0]
  time: 0.000; rss: 84MB	llvm module passes [0]
  time: 0.005; rss: 89MB	codegen passes [0]
  time: 0.000; rss: 89MB	codegen passes [0]
time: 0.006; rss: 89MB	LLVM passes
  time: 0.101; rss: 89MB	running linker
time: 0.101; rss: 89MB	linking
done
