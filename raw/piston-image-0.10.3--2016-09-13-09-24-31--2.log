commit c87ba3f1222ba20d491e8ed76a04977283280742
Merge: 58450c0 f9a3408
Author: bors <bors@rust-lang.org>
Date:   Tue Sep 13 04:57:23 2016 -0700

    Auto merge of #36264 - matklad:zeroing-cstring, r=alexcrichton
    
    Zero first byte of CString on drop
    
    Hi! This is one more attempt to ameliorate `CString::new("...").unwrap().as_ptr()` problem (related RFC: https://github.com/rust-lang/rfcs/pull/1642).
    
    One of the biggest problems with this code is that it may actually work in practice, so the idea of this PR is to proactively break such invalid code.
    
    Looks like writing a `null` byte at the start of the CString should do the trick, and I think is an affordable cost: zeroing a single byte in `Drop` should be cheap enough compared to actual memory deallocation which would follow.
    
    I would actually prefer to do something like
    
    ```Rust
    impl Drop for CString {
        fn drop(&mut self) {
            let pattern = b"CTHULHU FHTAGN ";
            let bytes = self.inner[..self.inner.len() - 1];
            for (d, s) in bytes.iter_mut().zip(pattern.iter().cycle()) {
                *d = *s;
            }
        }
    }
    ```
    
    because Cthulhu error should be much easier to google, but unfortunately this would be too expensive in release builds, and we can't implement things `cfg(debug_assertions)` conditionally in stdlib.
    
    Not sure if the whole idea or my implementation (I've used ~~`transmute`~~ `mem::unitialized` to workaround move out of Drop thing) makes sense :)
rustc: ./piston-image-0.10.3
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling image v0.10.3 (file:///root/benchmarks/piston-image-0.10.3)
time: 0.046; rss: 58MB	parsing
Lines of code:             12000
Pre-expansion node count:  90272
time: 0.000; rss: 58MB	recursion limit
time: 0.000; rss: 58MB	crate injection
time: 0.000; rss: 58MB	plugin loading
time: 0.000; rss: 58MB	plugin registration
time: 0.067; rss: 88MB	expansion
time: 0.000; rss: 88MB	maybe building test harness
time: 0.002; rss: 88MB	maybe creating a macro crate
time: 0.007; rss: 88MB	assigning node ids
Post-expansion node count: 149551
time: 0.000; rss: 88MB	checking for inline asm in case the target doesn't support it
time: 0.003; rss: 88MB	complete gated feature checking
time: 0.004; rss: 88MB	collecting defs
time: 0.011; rss: 92MB	external crate/lib resolution
time: 0.006; rss: 92MB	early lint checks
time: 0.002; rss: 97MB	AST validation
time: 0.022; rss: 101MB	name resolution
time: 0.013; rss: 111MB	lowering ast -> hir
time: 0.003; rss: 116MB	indexing hir
time: 0.002; rss: 116MB	attribute checking
time: 0.002; rss: 106MB	language item collection
time: 0.003; rss: 106MB	lifetime resolution
time: 0.000; rss: 106MB	looking for entry point
time: 0.000; rss: 106MB	looking for plugin registrar
time: 0.011; rss: 111MB	region resolution
time: 0.002; rss: 111MB	loop checking
time: 0.001; rss: 111MB	static item recursion checking
time: 0.058; rss: 111MB	compute_incremental_hashes_map
time: 0.000; rss: 111MB	load_dep_graph
time: 0.024; rss: 113MB	type collecting
time: 0.000; rss: 113MB	variance inference
time: 0.031; rss: 116MB	coherence checking
time: 0.097; rss: 117MB	wf checking
time: 0.218; rss: 125MB	item-types checking
time: 0.932; rss: 138MB	item-bodies checking
time: 0.000; rss: 138MB	drop-impl checking
time: 0.071; rss: 138MB	const checking
time: 0.011; rss: 138MB	privacy checking
time: 0.001; rss: 138MB	stability index
time: 0.009; rss: 138MB	intrinsic checking
time: 0.003; rss: 138MB	effect checking
time: 0.025; rss: 138MB	match checking
time: 0.011; rss: 138MB	liveness checking
time: 0.068; rss: 138MB	rvalue checking
time: 0.111; rss: 180MB	MIR dump
  time: 0.012; rss: 180MB	SimplifyCfg
  time: 0.025; rss: 181MB	QualifyAndPromoteConstants
  time: 0.027; rss: 181MB	TypeckMir
  time: 0.001; rss: 181MB	SimplifyBranches
  time: 0.007; rss: 181MB	SimplifyCfg
time: 0.072; rss: 181MB	MIR passes
time: 0.142; rss: 181MB	borrow checking
time: 0.004; rss: 181MB	reachability checking
time: 0.008; rss: 181MB	death checking
time: 0.009; rss: 181MB	stability checking
time: 0.000; rss: 181MB	unused lib feature checking
time: 0.075; rss: 181MB	lint checking
time: 0.000; rss: 181MB	resolving dependency formats
  time: 0.001; rss: 181MB	NoLandingPads
  time: 0.005; rss: 181MB	SimplifyCfg
  time: 0.012; rss: 183MB	EraseRegions
  time: 0.002; rss: 183MB	AddCallGuards
  time: 0.133; rss: 187MB	ElaborateDrops
  time: 0.001; rss: 187MB	NoLandingPads
  time: 0.009; rss: 187MB	SimplifyCfg
  time: 0.002; rss: 187MB	Deaggregator
  time: 0.002; rss: 187MB	AddCallGuards
  time: 0.000; rss: 187MB	PreTrans
time: 0.167; rss: 187MB	Prepare MIR codegen passes
  time: 0.081; rss: 189MB	write metadata
  time: 0.536; rss: 199MB	translation item collection
  time: 0.028; rss: 203MB	codegen unit partitioning
  time: 0.052; rss: 328MB	internalize symbols
time: 3.476; rss: 301MB	translation
time: 0.000; rss: 301MB	assert dep graph
time: 0.000; rss: 301MB	serialize dep graph
  time: 0.205; rss: 229MB	llvm function passes [0]
  time: 0.082; rss: 233MB	llvm module passes [0]
  time: 3.994; rss: 234MB	codegen passes [0]
  time: 0.001; rss: 235MB	codegen passes [0]
time: 4.582; rss: 235MB	LLVM passes
time: 0.000; rss: 235MB	serialize work products
time: 0.255; rss: 105MB	linking
done
