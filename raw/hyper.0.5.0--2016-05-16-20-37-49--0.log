commit cd6a400175cc230008a5094a8bbb44a3794f0465
Merge: 4fdf2c4 24cfa1e
Author: bors <bors@rust-lang.org>
Date:   Mon May 16 14:41:50 2016 -0700

    Auto merge of #33588 - nikomatsakis:compiletest-ui, r=acrichto
    
    add UI testing framework
    
    This adds a framework for capturing and tracking the precise output of rustc, which allows us to check all manner of minor details with the output. It's pretty strict right now -- the output must match almost exactly -- and hence maybe a bit too strict. But I figure we can add wildcards or whatever later. There is also a script intended to make updating the references easy, though the script could make things a *bit* easier (in particular, it'd be nice if it would find the build directory for you automatically).
    
    One thing I was wondering about is the best way to test colors. Since windows doesn't embed those in the output stream, this test framework can't test colors on windows -- so I figure we can just write tests that are ignored on windows and which pass `--color=always` or whatever to rustc.
    
    cc @jonathandturner
    r? @alexcrichton
rustc: ./hyper.0.5.0
cargo rustc -- -Ztime-passes -Zinput-stats
    Updating registry `https://github.com/rust-lang/crates.io-index`
   Compiling httparse v0.1.6
   Compiling typeable v0.1.2
   Compiling winapi v0.2.7
   Compiling rustc-serialize v0.3.19
   Compiling lazy_static v0.1.16
   Compiling pkg-config v0.3.8
   Compiling winapi-build v0.1.1
   Compiling traitobject v0.0.1
   Compiling libc v0.1.12
   Compiling matches v0.1.2
   Compiling unicase v0.1.0
   Compiling libc v0.2.11
   Compiling bitflags v0.3.3
   Compiling log v0.3.6
   Compiling kernel32-sys v0.2.2
   Compiling gcc v0.3.28
   Compiling mime v0.0.11
   Compiling rand v0.3.14
   Compiling num_cpus v0.2.12
   Compiling time v0.1.35
   Compiling openssl-sys v0.6.7
   Compiling openssl v0.6.7
   Compiling uuid v0.1.18
   Compiling url v0.2.38
   Compiling cookie v0.1.21
   Compiling hyper v0.5.0 (file:///root/benchmarks/hyper.0.5.0)
time: 0.032; rss: 53MB	parsing
Lines of code:             9154
Pre-expansion node count:  45851
time: 0.008; rss: 57MB	configuration 1
time: 0.000; rss: 57MB	recursion limit
time: 0.000; rss: 57MB	crate injection
time: 0.005; rss: 61MB	macro loading
time: 0.000; rss: 61MB	plugin loading
time: 0.000; rss: 61MB	plugin registration
time: 0.192; rss: 71MB	expansion
time: 0.031; rss: 71MB	configuration 2
time: 0.000; rss: 71MB	gated configuration checking
time: 0.011; rss: 71MB	maybe building test harness
time: 0.008; rss: 71MB	prelude injection
time: 0.001; rss: 71MB	checking that all macro invocations are gone
time: 0.000; rss: 71MB	checking for inline asm in case the target doesn't support it
time: 0.002; rss: 71MB	complete gated feature checking
Post-expansion node count: 103616
time: 0.008; rss: 71MB	assigning node ids
time: 0.003; rss: 73MB	collecting defs
time: 0.005; rss: 76MB	external crate/lib resolution
time: 0.006; rss: 76MB	early lint checks
time: 0.025; rss: 92MB	name resolution
time: 0.011; rss: 99MB	lowering ast -> hir
time: 0.002; rss: 101MB	indexing hir
time: 0.001; rss: 101MB	attribute checking
time: 0.001; rss: 93MB	language item collection
time: 0.002; rss: 93MB	lifetime resolution
time: 0.000; rss: 93MB	looking for entry point
time: 0.000; rss: 93MB	looking for plugin registrar
time: 0.006; rss: 97MB	region resolution
time: 0.001; rss: 97MB	loop checking
time: 0.001; rss: 97MB	static item recursion checking
time: 0.000; rss: 97MB	load_dep_graph
time: 0.018; rss: 106MB	type collecting
time: 0.000; rss: 106MB	variance inference
time: 0.045; rss: 121MB	coherence checking
time: 0.094; rss: 122MB	wf checking
time: 0.038; rss: 123MB	item-types checking
time: 0.529; rss: 135MB	item-bodies checking
time: 0.000; rss: 135MB	drop-impl checking
time: 0.043; rss: 137MB	const checking
time: 0.007; rss: 137MB	privacy checking
time: 0.001; rss: 137MB	stability index
time: 0.006; rss: 137MB	intrinsic checking
time: 0.002; rss: 137MB	effect checking
time: 0.015; rss: 137MB	match checking
time: 0.005; rss: 137MB	liveness checking
time: 0.030; rss: 137MB	rvalue checking
time: 0.060; rss: 145MB	MIR dump
time: 0.040; rss: 146MB	MIR passes
time: 0.071; rss: 146MB	borrow checking
time: 0.003; rss: 146MB	reachability checking
time: 0.007; rss: 146MB	death checking
time: 0.006; rss: 146MB	stability checking
time: 0.000; rss: 146MB	unused lib feature checking
time: 0.050; rss: 146MB	lint checking
time: 0.000; rss: 146MB	resolving dependency formats
time: 0.011; rss: 148MB	Prepare MIR codegen passes
  time: 0.220; rss: 154MB	translation item collection
  time: 0.008; rss: 154MB	codegen unit partitioning
  time: 0.131; rss: 284MB	write metadata
time: 1.570; rss: 284MB	translation
time: 0.001; rss: 284MB	assert dep graph
time: 0.000; rss: 284MB	serialize dep graph
  time: 0.095; rss: 169MB	llvm function passes [0]
  time: 0.051; rss: 174MB	llvm module passes [0]
  time: 1.609; rss: 179MB	codegen passes [0]
  time: 0.001; rss: 125MB	codegen passes [0]
time: 1.959; rss: 124MB	LLVM passes
time: 0.176; rss: 122MB	linking
done
