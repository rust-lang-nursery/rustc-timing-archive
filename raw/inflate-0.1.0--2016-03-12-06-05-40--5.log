commit 1a019dc86de1459809f776b869e36f8e71a7665a
Merge: f1d6f12 6265b6b
Author: bors <bors@rust-lang.org>
Date:   Fri Mar 11 20:57:39 2016 -0800

    Auto merge of #31925 - aturon:inherent-overlap, r=nikomatsakis
    
    Forbid items with the same name from appearing in overlapping inherent impl blocks
    
    For example, the following is now correctly illegal:
    
    ```rust
    struct Foo;
    
    impl Foo {
        fn id() {}
    }
    
    impl Foo {
        fn id() {}
    }
    ```
    
    "Overlapping" here is determined the same way it is for traits (and in fact shares the same code path): roughly, there must be some way of substituting any generic types to unify the impls, such that none of the `where` clauses are provably unsatisfiable under such a unification.
    
    Along the way, this PR also introduces an `ImplHeader` abstraction (the first commit) that makes it easier to work with impls abstractly (without caring whether they are trait or inherent impl blocks); see the first commit.
    
    Closes #22889
    r? @nikomatsakis
rustc: ./inflate-0.1.0
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling inflate v0.1.0 (file:///root/benchmarks/inflate-0.1.0)
time: 0.004; rss: 38MB	parsing
Lines of code:             956
Pre-expansion node count:  4761
time: 0.001; rss: 38MB	configuration 1
time: 0.000; rss: 38MB	recursion limit
time: 0.000; rss: 38MB	gated macro checking
time: 0.000; rss: 38MB	crate injection
time: 0.003; rss: 41MB	macro loading
time: 0.000; rss: 41MB	plugin loading
time: 0.000; rss: 41MB	plugin registration
time: 0.079; rss: 48MB	expansion
time: 0.001; rss: 48MB	complete gated feature checking 1
time: 0.009; rss: 48MB	configuration 2
time: 0.000; rss: 48MB	gated configuration checking
time: 0.004; rss: 48MB	maybe building test harness
time: 0.004; rss: 48MB	prelude injection
time: 0.000; rss: 48MB	checking that all macro invocations are gone
time: 0.000; rss: 48MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 48MB	complete gated feature checking 2
time: 0.000; rss: 48MB	const fn bodies and arguments
Post-expansion node count: 54798
time: 0.004; rss: 48MB	assigning node ids
time: 0.008; rss: 53MB	lowering ast -> hir
time: 0.002; rss: 55MB	indexing hir
time: 0.001; rss: 55MB	attribute checking
time: 0.004; rss: 55MB	early lint checks
time: 0.001; rss: 52MB	external crate/lib resolution
time: 0.001; rss: 52MB	language item collection
time: 0.010; rss: 61MB	resolution
time: 0.000; rss: 61MB	lifetime resolution
time: 0.000; rss: 61MB	looking for entry point
time: 0.000; rss: 61MB	looking for plugin registrar
time: 0.003; rss: 63MB	region resolution
time: 0.000; rss: 63MB	loop checking
time: 0.000; rss: 63MB	static item recursion checking
time: 0.001; rss: 63MB	type collecting
time: 0.000; rss: 63MB	variance inference
time: 0.010; rss: 78MB	coherence checking
time: 0.002; rss: 78MB	wf checking
time: 0.002; rss: 78MB	item-types checking
time: 2.613; rss: 99MB	item-bodies checking
time: 0.000; rss: 99MB	drop-impl checking
time: 0.012; rss: 100MB	const checking
time: 0.002; rss: 100MB	privacy checking
time: 0.000; rss: 100MB	stability index
time: 0.000; rss: 100MB	intrinsic checking
time: 0.000; rss: 100MB	effect checking
time: 0.003; rss: 100MB	match checking
time: 0.064; rss: 100MB	liveness checking
time: 0.009; rss: 100MB	rvalue checking
time: 0.036; rss: 113MB	MIR dump
time: 0.000; rss: 113MB	MIR passes
time: 0.204; rss: 112MB	borrow checking
time: 0.000; rss: 112MB	reachability checking
time: 0.003; rss: 112MB	death checking
time: 0.002; rss: 112MB	stability checking
time: 0.000; rss: 112MB	unused lib feature checking
time: 0.018; rss: 112MB	lint checking
time: 0.000; rss: 112MB	resolving dependency formats
time: 0.002; rss: 112MB	erasing regions from MIR
  time: 0.012; rss: 124MB	translation item collection
  time: 0.003; rss: 140MB	write metadata
time: 0.377; rss: 134MB	translation
  time: 0.025; rss: 99MB	llvm function passes [0]
  time: 0.005; rss: 100MB	llvm module passes [0]
  time: 0.490; rss: 104MB	codegen passes [0]
  time: 0.000; rss: 94MB	codegen passes [0]
time: 0.561; rss: 94MB	LLVM passes
time: 0.034; rss: 93MB	linking
done
