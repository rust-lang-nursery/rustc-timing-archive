commit d7a71687ef1a9fa5665944608d5bad58d98a9684
Merge: dcfb8d7 c5d74be
Author: bors <bors@rust-lang.org>
Date:   Thu Mar 24 14:22:26 2016 -0700

    Auto merge of #32346 - nikomatsakis:no-erased-regions, r=eddyb
    
    Remove `ErasedRegions` from substs
    
    This commit removes the `ErasedRegions` enum from `Substs`. Instead, in trans, we just generate a vector of `ReStatic` of suitable length. The goal is both general cleanup and to help pave the way for a glorious future where erasure is used in type check.
    
    r? @eddyb
    
    One concern: might be nice to do some profiling. Not sure the best way to do that. Perhaps I'll investigate running nrc's test suite locally.
rustc: ./issue-32278-big-array-of-strings
/root/rust/x86_64-unknown-linux-gnu/stage2/bin/rustc big-array-of-strings.rs -Ztime-passes -Zinput-stats
time: 0.149; rss: 57MB	parsing
Lines of code:             65577
Pre-expansion node count:  65552
time: 0.011; rss: 57MB	configuration 1
time: 0.000; rss: 57MB	recursion limit
time: 0.001; rss: 57MB	gated macro checking
time: 0.000; rss: 57MB	crate injection
time: 0.003; rss: 60MB	macro loading
time: 0.000; rss: 60MB	plugin loading
time: 0.000; rss: 60MB	plugin registration
time: 0.041; rss: 65MB	expansion
time: 0.001; rss: 65MB	complete gated feature checking 1
time: 0.011; rss: 65MB	configuration 2
time: 0.000; rss: 65MB	gated configuration checking
time: 0.005; rss: 65MB	maybe building test harness
time: 0.005; rss: 65MB	prelude injection
time: 0.000; rss: 65MB	checking that all macro invocations are gone
time: 0.000; rss: 65MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 65MB	complete gated feature checking 2
time: 0.001; rss: 65MB	const fn bodies and arguments
Post-expansion node count: 65565
time: 0.006; rss: 65MB	assigning node ids
time: 0.009; rss: 79MB	lowering ast -> hir
time: 0.002; rss: 81MB	indexing hir
time: 0.001; rss: 81MB	attribute checking
time: 0.009; rss: 81MB	early lint checks
time: 0.001; rss: 68MB	external crate/lib resolution
time: 0.001; rss: 68MB	language item collection
time: 0.002; rss: 71MB	resolution
time: 0.001; rss: 71MB	lifetime resolution
time: 0.000; rss: 71MB	looking for entry point
time: 0.000; rss: 71MB	looking for plugin registrar
time: 0.008; rss: 78MB	region resolution
time: 0.001; rss: 78MB	loop checking
time: 0.002; rss: 78MB	static item recursion checking
time: 0.000; rss: 78MB	type collecting
time: 0.000; rss: 78MB	variance inference
time: 0.006; rss: 87MB	coherence checking
time: 0.001; rss: 87MB	wf checking
time: 0.806; rss: 188MB	item-types checking
time: 0.000; rss: 188MB	item-bodies checking
time: 0.000; rss: 188MB	drop-impl checking
time: 0.018; rss: 190MB	const checking
time: 0.003; rss: 190MB	privacy checking
time: 0.001; rss: 190MB	stability index
time: 0.001; rss: 190MB	intrinsic checking
time: 0.001; rss: 190MB	effect checking
time: 0.001; rss: 190MB	match checking
time: 0.001; rss: 190MB	liveness checking
time: 0.001; rss: 190MB	rvalue checking
time: 0.001; rss: 190MB	MIR dump
time: 0.000; rss: 190MB	MIR passes
time: 0.001; rss: 190MB	borrow checking
time: 0.000; rss: 190MB	reachability checking
time: 0.001; rss: 190MB	death checking
time: 0.001; rss: 190MB	stability checking
time: 0.000; rss: 190MB	unused lib feature checking
time: 0.030; rss: 190MB	lint checking
time: 0.001; rss: 190MB	resolving dependency formats
  time: 0.001; rss: 196MB	translation item collection
  time: 0.000; rss: 204MB	write metadata
time: 0.085; rss: 204MB	translation
  time: 0.004; rss: 81MB	llvm function passes [0]
  time: 0.000; rss: 81MB	llvm module passes [0]
  time: 0.162; rss: 84MB	codegen passes [0]
  time: 0.000; rss: 72MB	codegen passes [0]
time: 0.178; rss: 72MB	LLVM passes
  time: 0.178; rss: 72MB	running linker
time: 0.179; rss: 72MB	linking
done
