commit 0f7c75b74fb7adc436eedc66c0032879293eeac6
Merge: 1c11ea3 6c2a456
Author: bors <bors@rust-lang.org>
Date:   Tue Nov 22 03:29:46 2016 -0600

    Auto merge of #37834 - bluss:peek-none, r=BurntSushi
    
    Make Peekable remember peeking a None
    
    Peekable should remember if a None has been seen in the `.peek()` method.
    It ensures that `.peek(); .peek();` or `.peek(); .next();` only advances the
    underlying iterator at most once. This does not by itself make the iterator
    fused.
    
    Thanks to @s3bk for the code in `fn peek()` itself.
    
    Fixes #37784
rustc: ./syntex-0.42.2
cargo rustc -p syntex_syntax  -- -Ztime-passes -Zinput-stats
   Compiling syntex_syntax v0.42.0
time: 0.091; rss: 71MB	parsing
Lines of code:             33687
Pre-expansion node count:  223115
time: 0.000; rss: 71MB	recursion limit
time: 0.000; rss: 71MB	crate injection
time: 0.000; rss: 71MB	plugin loading
time: 0.000; rss: 71MB	plugin registration
time: 0.246; rss: 146MB	expansion
time: 0.000; rss: 146MB	maybe building test harness
time: 0.007; rss: 146MB	maybe creating a macro crate
Post-expansion node count: 638863
time: 0.000; rss: 146MB	checking for inline asm in case the target doesn't support it
time: 0.013; rss: 146MB	complete gated feature checking
time: 0.024; rss: 146MB	early lint checks
time: 0.008; rss: 146MB	AST validation
time: 0.083; rss: 161MB	name resolution
time: 0.053; rss: 183MB	lowering ast -> hir
time: 0.023; rss: 191MB	indexing hir
time: 0.006; rss: 191MB	attribute checking
time: 0.004; rss: 147MB	language item collection
time: 0.010; rss: 147MB	lifetime resolution
time: 0.000; rss: 147MB	looking for entry point
time: 0.000; rss: 147MB	looking for plugin registrar
time: 0.080; rss: 166MB	region resolution
time: 0.005; rss: 166MB	loop checking
time: 0.004; rss: 166MB	static item recursion checking
time: 0.331; rss: 167MB	compute_incremental_hashes_map
time: 0.000; rss: 167MB	load_dep_graph
time: 0.048; rss: 166MB	type collecting
time: 0.002; rss: 166MB	variance inference
time: 0.002; rss: 166MB	impl wf inference
time: 0.018; rss: 169MB	coherence checking
time: 0.088; rss: 172MB	wf checking
time: 0.183; rss: 177MB	item-types checking
time: 6.633; rss: 221MB	item-bodies checking
time: 0.000; rss: 221MB	drop-impl checking
time: 0.277; rss: 242MB	const checking
time: 0.048; rss: 242MB	privacy checking
time: 0.006; rss: 242MB	stability index
time: 0.017; rss: 242MB	intrinsic checking
time: 0.015; rss: 242MB	effect checking
time: 0.046; rss: 242MB	match checking
time: 0.081; rss: 238MB	liveness checking
time: 0.184; rss: 238MB	rvalue checking
time: 0.584; rss: 410MB	MIR dump
  time: 0.060; rss: 417MB	SimplifyCfg
  time: 0.075; rss: 417MB	QualifyAndPromoteConstants
  time: 0.106; rss: 417MB	TypeckMir
  time: 0.004; rss: 417MB	SimplifyBranches
  time: 0.031; rss: 417MB	SimplifyCfg
time: 0.277; rss: 417MB	MIR cleanup and validation
time: 0.567; rss: 420MB	borrow checking
time: 0.025; rss: 420MB	reachability checking
time: 0.039; rss: 420MB	death checking
time: 0.035; rss: 422MB	stability checking
time: 0.000; rss: 422MB	unused lib feature checking
time: 0.201; rss: 422MB	lint checking
time: 0.000; rss: 422MB	resolving dependency formats
  time: 0.003; rss: 422MB	NoLandingPads
  time: 0.026; rss: 422MB	SimplifyCfg
  time: 0.077; rss: 428MB	EraseRegions
  time: 0.011; rss: 428MB	AddCallGuards
  time: 0.302; rss: 448MB	ElaborateDrops
  time: 0.003; rss: 448MB	NoLandingPads
  time: 0.054; rss: 448MB	SimplifyCfg
  time: 0.029; rss: 448MB	InstCombine
  time: 0.012; rss: 448MB	Deaggregator
  time: 0.002; rss: 448MB	CopyPropagation
  time: 0.035; rss: 448MB	SimplifyLocals
  time: 0.010; rss: 448MB	AddCallGuards
  time: 0.003; rss: 448MB	PreTrans
time: 0.579; rss: 448MB	MIR optimisations
  time: 0.078; rss: 456MB	write metadata
  time: 0.401; rss: 468MB	translation item collection
  time: 0.066; rss: 478MB	codegen unit partitioning
  time: 0.041; rss: 723MB	internalize symbols
time: 4.929; rss: 723MB	translation
time: 0.000; rss: 723MB	assert dep graph
time: 0.000; rss: 723MB	serialize dep graph
  time: 0.527; rss: 423MB	llvm function passes [0]
  time: 0.251; rss: 430MB	llvm module passes [0]
  time: 10.458; rss: 429MB	codegen passes [0]
  time: 0.000; rss: 429MB	codegen passes [0]
time: 12.096; rss: 429MB	LLVM passes
time: 0.000; rss: 429MB	serialize work products
time: 0.349; rss: 113MB	linking
done
