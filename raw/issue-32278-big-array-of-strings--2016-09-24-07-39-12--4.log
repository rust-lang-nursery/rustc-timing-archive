commit bdad70213b32454837c0ed16dbbac3954325feea
Merge: 41e3aee 2e02803
Author: bors <bors@rust-lang.org>
Date:   Sat Sep 24 02:03:18 2016 -0700

    Auto merge of #36685 - brson:rev-string-from, r=sfackler
    
    Revert "implement `From<Vec<char>>` and `From<&'a [char]>` for `String`"
    
    This reverts commit ac73335f2f5421c914fa3900567696cc6dc73d8d.
    
    This is a revert of https://github.com/rust-lang/rust/pull/35054, which resulted in at least 7 known regressions, reported [here](https://internals.rust-lang.org/t/regression-report-stable-2016-08-16-vs-beta-2016-09-21/4119) and [here](https://github.com/rust-lang/rust/issues/36352), which will hit stable next week.
    
    I think this breakage was somewhat unanticipated, and we did not realize so many crates were broken until this week, so reverting is the conservative thing to do until we figure out how not to cause so much breakage. I've run crater on the revert and did not find any new breakage from the revert.
    
    Fixes https://github.com/rust-lang/rust/issues/36352
    
    cc @pwoolcoc @rust-lang/libs
rustc: ./issue-32278-big-array-of-strings
/root/rust/x86_64-unknown-linux-gnu/stage2/bin/rustc big-array-of-strings.rs -Ztime-passes -Zinput-stats
time: 0.116; rss: 63MB	parsing
Lines of code:             65577
Pre-expansion node count:  65552
time: 0.000; rss: 63MB	recursion limit
time: 0.000; rss: 63MB	crate injection
time: 0.000; rss: 63MB	plugin loading
time: 0.000; rss: 63MB	plugin registration
time: 0.028; rss: 85MB	expansion
time: 0.000; rss: 85MB	maybe building test harness
time: 0.001; rss: 85MB	maybe creating a macro crate
time: 0.003; rss: 89MB	assigning node ids
Post-expansion node count: 65565
time: 0.000; rss: 89MB	checking for inline asm in case the target doesn't support it
time: 0.001; rss: 89MB	complete gated feature checking
time: 0.001; rss: 89MB	collecting defs
time: 0.003; rss: 89MB	external crate/lib resolution
time: 0.004; rss: 89MB	early lint checks
time: 0.001; rss: 89MB	AST validation
time: 0.002; rss: 89MB	name resolution
time: 0.008; rss: 104MB	lowering ast -> hir
time: 0.003; rss: 109MB	indexing hir
time: 0.001; rss: 109MB	attribute checking
time: 0.001; rss: 99MB	language item collection
time: 0.001; rss: 99MB	lifetime resolution
time: 0.000; rss: 99MB	looking for entry point
time: 0.000; rss: 99MB	looking for plugin registrar
time: 0.010; rss: 105MB	region resolution
time: 0.001; rss: 105MB	loop checking
time: 0.002; rss: 105MB	static item recursion checking
time: 0.007; rss: 105MB	compute_incremental_hashes_map
time: 0.000; rss: 105MB	load_dep_graph
time: 0.000; rss: 105MB	type collecting
time: 0.000; rss: 105MB	variance inference
time: 0.005; rss: 107MB	coherence checking
time: 0.001; rss: 107MB	wf checking
time: 0.687; rss: 114MB	item-types checking
time: 0.000; rss: 114MB	item-bodies checking
time: 0.000; rss: 114MB	drop-impl checking
time: 0.023; rss: 117MB	const checking
time: 0.002; rss: 117MB	privacy checking
time: 0.001; rss: 117MB	stability index
time: 0.000; rss: 117MB	intrinsic checking
time: 0.000; rss: 117MB	effect checking
time: 0.000; rss: 117MB	match checking
time: 0.001; rss: 117MB	liveness checking
time: 0.000; rss: 117MB	rvalue checking
time: 0.045; rss: 127MB	MIR dump
  time: 0.000; rss: 127MB	SimplifyCfg
  time: 0.001; rss: 127MB	QualifyAndPromoteConstants
  time: 0.001; rss: 127MB	TypeckMir
  time: 0.000; rss: 127MB	SimplifyBranches
  time: 0.000; rss: 127MB	SimplifyCfg
time: 0.002; rss: 127MB	MIR passes
time: 0.001; rss: 127MB	borrow checking
time: 0.000; rss: 127MB	reachability checking
time: 0.001; rss: 127MB	death checking
time: 0.001; rss: 127MB	stability checking
time: 0.000; rss: 127MB	unused lib feature checking
time: 0.028; rss: 127MB	lint checking
time: 0.001; rss: 127MB	resolving dependency formats
  time: 0.000; rss: 127MB	NoLandingPads
  time: 0.000; rss: 127MB	SimplifyCfg
  time: 0.001; rss: 127MB	EraseRegions
  time: 0.000; rss: 127MB	AddCallGuards
  time: 0.000; rss: 127MB	ElaborateDrops
  time: 0.000; rss: 127MB	NoLandingPads
  time: 0.000; rss: 127MB	SimplifyCfg
  time: 0.000; rss: 127MB	Deaggregator
  time: 0.000; rss: 127MB	AddCallGuards
  time: 0.000; rss: 127MB	PreTrans
time: 0.001; rss: 127MB	Prepare MIR codegen passes
  time: 0.000; rss: 127MB	write metadata
  time: 0.001; rss: 127MB	translation item collection
  time: 0.000; rss: 127MB	codegen unit partitioning
  time: 0.001; rss: 136MB	internalize symbols
time: 0.065; rss: 134MB	translation
time: 0.000; rss: 134MB	assert dep graph
time: 0.000; rss: 134MB	serialize dep graph
  time: 0.009; rss: 91MB	llvm function passes [0]
  time: 0.000; rss: 91MB	llvm module passes [0]
  time: 0.176; rss: 89MB	codegen passes [0]
  time: 0.000; rss: 89MB	codegen passes [0]
time: 0.186; rss: 89MB	LLVM passes
time: 0.000; rss: 89MB	serialize work products
  time: 0.192; rss: 79MB	running linker
time: 0.193; rss: 79MB	linking
done
