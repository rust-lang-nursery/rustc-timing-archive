commit 1df64450ecf9d2c458b5789ef823203fcdbd60a9
Merge: 3781956 ce3cecf
Author: bors <bors@rust-lang.org>
Date:   Thu Sep 8 19:15:50 2016 -0700

    Auto merge of #36321 - uweigand:enum-abi, r=eddyb
    
    Follow target ABI sign-/zero-extension rules for enum types
    
    While attempting to port Rust to s390x, I ran into an ABI violation
    (that caused rust_eh_personality to be miscompiled, breaking unwinding).
    The problem is that this function returns an enum type, which is
    supposed to be sign-extended according to the s390x ABI.  However,
    common code would ignore target sign-/zero-extension rules for any
    types that do not satisfy is_integral(), which includes enums.
    
    For the general case of Rust enum types, which map to structure types
    with a discriminant, that seems correct.  However, in the special case
    of simple enums that map directly to C enum types (i.e. LLVM integers),
    this is incorrect; we must follow the target extension rules for those.
    
    Signed-off-by: Ulrich Weigand <ulrich.weigand@de.ibm.com>
rustc: ./rust-encoding-0.3.0
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling encoding v0.3.0-dev (file:///root/benchmarks/rust-encoding-0.3.0)
time: 0.021; rss: 49MB	parsing
Lines of code:             6066
Pre-expansion node count:  28489
time: 0.000; rss: 49MB	recursion limit
time: 0.000; rss: 49MB	crate injection
time: 0.000; rss: 49MB	plugin loading
time: 0.000; rss: 49MB	plugin registration
time: 0.039; rss: 74MB	expansion
time: 0.000; rss: 74MB	maybe building test harness
time: 0.000; rss: 74MB	maybe creating a macro crate
time: 0.002; rss: 74MB	assigning node ids
Post-expansion node count: 39145
time: 0.000; rss: 74MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 74MB	complete gated feature checking
time: 0.001; rss: 74MB	collecting defs
time: 0.001; rss: 75MB	external crate/lib resolution
time: 0.001; rss: 75MB	early lint checks
time: 0.000; rss: 75MB	AST validation
time: 0.004; rss: 78MB	name resolution
time: 0.004; rss: 82MB	lowering ast -> hir
time: 0.001; rss: 82MB	indexing hir
time: 0.000; rss: 82MB	attribute checking
time: 0.000; rss: 81MB	language item collection
time: 0.001; rss: 81MB	lifetime resolution
time: 0.000; rss: 81MB	looking for entry point
time: 0.000; rss: 81MB	looking for plugin registrar
time: 0.002; rss: 83MB	region resolution
time: 0.000; rss: 83MB	loop checking
time: 0.000; rss: 83MB	static item recursion checking
time: 0.014; rss: 84MB	compute_incremental_hashes_map
time: 0.000; rss: 84MB	load_dep_graph
time: 0.010; rss: 84MB	type collecting
time: 0.000; rss: 84MB	variance inference
time: 0.016; rss: 88MB	coherence checking
time: 0.013; rss: 88MB	wf checking
time: 0.011; rss: 89MB	item-types checking
time: 0.148; rss: 93MB	item-bodies checking
time: 0.000; rss: 93MB	drop-impl checking
time: 0.011; rss: 93MB	const checking
time: 0.001; rss: 93MB	privacy checking
time: 0.000; rss: 93MB	stability index
time: 0.002; rss: 93MB	intrinsic checking
time: 0.000; rss: 93MB	effect checking
time: 0.007; rss: 93MB	match checking
time: 0.001; rss: 93MB	liveness checking
time: 0.007; rss: 93MB	rvalue checking
time: 0.020; rss: 105MB	MIR dump
  time: 0.003; rss: 105MB	SimplifyCfg
  time: 0.004; rss: 105MB	QualifyAndPromoteConstants
  time: 0.005; rss: 105MB	TypeckMir
  time: 0.000; rss: 105MB	SimplifyBranches
  time: 0.001; rss: 105MB	SimplifyCfg
time: 0.013; rss: 105MB	MIR passes
time: 0.021; rss: 105MB	borrow checking
time: 0.000; rss: 105MB	reachability checking
time: 0.001; rss: 105MB	death checking
time: 0.002; rss: 105MB	stability checking
time: 0.000; rss: 105MB	unused lib feature checking
time: 0.017; rss: 105MB	lint checking
time: 0.000; rss: 105MB	resolving dependency formats
  time: 0.000; rss: 105MB	NoLandingPads
  time: 0.001; rss: 105MB	SimplifyCfg
  time: 0.003; rss: 105MB	EraseRegions
  time: 0.000; rss: 105MB	AddCallGuards
  time: 0.018; rss: 105MB	ElaborateDrops
  time: 0.000; rss: 105MB	NoLandingPads
  time: 0.002; rss: 105MB	SimplifyCfg
  time: 0.001; rss: 105MB	Deaggregator
  time: 0.000; rss: 105MB	AddCallGuards
  time: 0.000; rss: 105MB	PreTrans
time: 0.026; rss: 105MB	Prepare MIR codegen passes
  time: 0.021; rss: 105MB	write metadata
  time: 0.248; rss: 234MB	translation item collection
  time: 0.002; rss: 234MB	codegen unit partitioning
  time: 0.005; rss: 255MB	internalize symbols
time: 0.594; rss: 249MB	translation
time: 0.000; rss: 249MB	assert dep graph
time: 0.000; rss: 249MB	serialize dep graph
  time: 0.026; rss: 123MB	llvm function passes [0]
  time: 0.057; rss: 128MB	llvm module passes [0]
  time: 0.643; rss: 132MB	codegen passes [0]
  time: 0.001; rss: 132MB	codegen passes [0]
time: 0.784; rss: 132MB	LLVM passes
time: 0.000; rss: 132MB	serialize work products
time: 0.081; rss: 101MB	linking
done
