commit 493d999ffa44be6610441dabab80e18dda90015a
Merge: f6e125f fc4d0ec
Author: bors <bors@rust-lang.org>
Date:   Thu Mar 3 17:41:13 2016 +0000

    Auto merge of #32007 - nikomatsakis:compiletest-incremental, r=alexcrichton
    
    This PR extends compiletest to support **test revisions** and with a preliminary **incremental testing harness**. run-pass, compile-fail, and run-fail tests may be tagged with
    
    ```
    // revisions: a b c d
    ```
    
    This will cause the test to be re-run four times with `--cfg {a,b,c,d}` in turn. This means you can write very closely related things using `cfg`. You can also configure the headers/expected-errors by writing `//[foo] header: value` or `//[foo]~ ERROR bar`, where `foo` is the name of your revision. See the changes to `coherence-cow.rs` as a proof of concept.
    
    The main point of this work is to support the incremental testing harness. This PR contains an initial, unused version. The code that uses it will land later. The incremental testing harness compiles each revision in turn, and requires that the revisions have particular names (e.g., `rpass2`, `cfail3`), which tell it whether a particular revision is expected to compile or not.
    
    Two questions:
    
    - Is there compiletest documentation anywhere I can update?
    - Should I hold off on landing the incremental testing harness until I have the code to exercise it? (That will come in a separate PR, still fixing a few details)
    
    r? @alexcrichton
    cc @rust-lang/compiler <-- new testing capabilities
rustc: ./hyper.0.5.0
cargo rustc -- -Ztime-passes -Zinput-stats
    Updating registry `https://github.com/rust-lang/crates.io-index`
   Compiling httparse v0.1.6
   Compiling matches v0.1.2
   Compiling libc v0.2.7
   Compiling unicase v0.1.0
   Compiling rustc-serialize v0.3.18
   Compiling lazy_static v0.1.15
   Compiling libc v0.1.12
   Compiling winapi-build v0.1.1
   Compiling typeable v0.1.2
   Compiling winapi v0.2.5
   Compiling bitflags v0.3.3
   Compiling pkg-config v0.3.7
   Compiling traitobject v0.0.1
   Compiling gcc v0.3.25
   Compiling kernel32-sys v0.2.1
   Compiling log v0.3.5
   Compiling rand v0.3.14
   Compiling time v0.1.34
   Compiling num_cpus v0.2.11
   Compiling mime v0.0.11
   Compiling openssl-sys v0.6.7
   Compiling openssl v0.6.7
   Compiling uuid v0.1.18
   Compiling url v0.2.38
   Compiling cookie v0.1.21
   Compiling hyper v0.5.0 (file:///root/benchmarks/hyper.0.5.0)
time: 0.044; rss: 37MB	parsing
Lines of code:             9154
Pre-expansion node count:  45594
time: 0.010; rss: 38MB	configuration 1
time: 0.000; rss: 38MB	recursion limit
time: 0.000; rss: 38MB	gated macro checking
time: 0.000; rss: 38MB	crate injection
time: 0.005; rss: 44MB	macro loading
time: 0.000; rss: 44MB	plugin loading
time: 0.000; rss: 44MB	plugin registration
time: 0.198; rss: 53MB	expansion
time: 0.005; rss: 53MB	complete gated feature checking 1
time: 0.034; rss: 53MB	configuration 2
time: 0.000; rss: 53MB	gated configuration checking
time: 0.013; rss: 53MB	maybe building test harness
time: 0.011; rss: 53MB	prelude injection
time: 0.001; rss: 53MB	checking that all macro invocations are gone
time: 0.000; rss: 53MB	checking for inline asm in case the target doesn't support it
time: 0.002; rss: 53MB	complete gated feature checking 2
time: 0.001; rss: 53MB	const fn bodies and arguments
Post-expansion node count: 109258
time: 0.010; rss: 53MB	assigning node ids
time: 0.018; rss: 58MB	lowering ast -> hir
time: 0.008; rss: 60MB	indexing hir
time: 0.002; rss: 60MB	attribute checking
time: 0.007; rss: 60MB	early lint checks
time: 0.004; rss: 55MB	external crate/lib resolution
time: 0.001; rss: 55MB	language item collection
time: 0.028; rss: 72MB	resolution
time: 0.002; rss: 72MB	lifetime resolution
time: 0.000; rss: 72MB	looking for entry point
time: 0.000; rss: 72MB	looking for plugin registrar
time: 0.008; rss: 75MB	region resolution
time: 0.001; rss: 75MB	loop checking
time: 0.001; rss: 75MB	static item recursion checking
time: 0.013; rss: 80MB	type collecting
time: 0.000; rss: 80MB	variance inference
time: 0.041; rss: 97MB	coherence checking
time: 0.077; rss: 98MB	wf checking
time: 0.027; rss: 98MB	item-types checking
time: 0.500; rss: 117MB	item-bodies checking
time: 0.000; rss: 117MB	drop-impl checking
time: 0.042; rss: 119MB	const checking
time: 0.010; rss: 119MB	privacy checking
time: 0.001; rss: 119MB	stability index
time: 0.004; rss: 119MB	intrinsic checking
time: 0.002; rss: 119MB	effect checking
time: 0.012; rss: 119MB	match checking
time: 0.005; rss: 119MB	liveness checking
time: 0.033; rss: 119MB	rvalue checking
time: 0.065; rss: 122MB	MIR dump
time: 0.000; rss: 122MB	MIR passes
time: 0.070; rss: 123MB	borrow checking
time: 0.004; rss: 123MB	reachability checking
time: 0.006; rss: 123MB	death checking
time: 0.006; rss: 123MB	stability checking
time: 0.000; rss: 123MB	unused lib feature checking
time: 0.047; rss: 123MB	lint checking
time: 0.000; rss: 123MB	resolving dependency formats
time: 0.007; rss: 124MB	erasing regions from MIR
  time: 0.205; rss: 144MB	translation item collection
  time: 0.141; rss: 233MB	write metadata
time: 1.554; rss: 233MB	translation
  time: 0.097; rss: 159MB	llvm function passes [0]
  time: 0.048; rss: 160MB	llvm module passes [0]
  time: 1.631; rss: 165MB	codegen passes [0]
  time: 0.001; rss: 117MB	codegen passes [0]
time: 1.979; rss: 116MB	LLVM passes
time: 0.169; rss: 115MB	linking
done
