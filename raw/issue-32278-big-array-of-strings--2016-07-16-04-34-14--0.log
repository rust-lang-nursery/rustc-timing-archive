commit dc8212ff200dc54113a87b3a7033879133fdfff0
Merge: c4788c2 bbff336
Author: bors <bors@rust-lang.org>
Date:   Sat Jul 16 01:19:16 2016 -0700

    Auto merge of #34779 - infinity0:master, r=alexcrichton
    
    If local-rust is the same as the current version, then force a local-rebuild
    
    In Debian, we would like the option to build/rebuild the current release from
    *either* the current or previous stable release. So we use enable-local-rust
    instead of enable-local-rebuild, and read the bootstrap key dynamically from
    whatever is installed locally.
    
    In general, it does not make much sense to allow enable-local-rust without also
    setting the bootstrap key, since the build would fail otherwise.
    
    (The way I detect "the bootstrap key of [the local] rustc installation" is a bit hacky, suggestions welcome.)
rustc: ./issue-32278-big-array-of-strings
/root/rust/x86_64-unknown-linux-gnu/stage2/bin/rustc big-array-of-strings.rs -Ztime-passes -Zinput-stats
time: 0.164; rss: 104MB	parsing
Lines of code:             65577
Pre-expansion node count:  65552
time: 0.013; rss: 104MB	configuration
time: 0.000; rss: 104MB	recursion limit
time: 0.000; rss: 104MB	crate injection
time: 0.000; rss: 104MB	plugin loading
time: 0.000; rss: 104MB	plugin registration
time: 0.028; rss: 139MB	expansion
time: 0.000; rss: 139MB	maybe building test harness
time: 0.006; rss: 139MB	assigning node ids
Post-expansion node count: 65565
time: 0.000; rss: 139MB	checking for inline asm in case the target doesn't support it
time: 0.001; rss: 139MB	complete gated feature checking
time: 0.001; rss: 139MB	collecting defs
time: 0.003; rss: 139MB	external crate/lib resolution
time: 0.007; rss: 139MB	early lint checks
time: 0.001; rss: 139MB	AST validation
time: 0.002; rss: 139MB	name resolution
time: 0.008; rss: 158MB	lowering ast -> hir
time: 0.002; rss: 162MB	indexing hir
time: 0.001; rss: 162MB	attribute checking
time: 0.001; rss: 152MB	language item collection
time: 0.001; rss: 152MB	lifetime resolution
time: 0.000; rss: 152MB	looking for entry point
time: 0.000; rss: 152MB	looking for plugin registrar
time: 0.007; rss: 158MB	region resolution
time: 0.001; rss: 159MB	loop checking
time: 0.001; rss: 159MB	static item recursion checking
time: 0.000; rss: 159MB	load_dep_graph
time: 0.000; rss: 159MB	type collecting
time: 0.000; rss: 159MB	variance inference
time: 0.005; rss: 161MB	coherence checking
time: 0.001; rss: 161MB	wf checking
time: 0.968; rss: 176MB	item-types checking
time: 0.000; rss: 176MB	item-bodies checking
time: 0.000; rss: 176MB	drop-impl checking
time: 0.021; rss: 180MB	const checking
time: 0.002; rss: 180MB	privacy checking
time: 0.001; rss: 180MB	stability index
time: 0.001; rss: 180MB	intrinsic checking
time: 0.000; rss: 180MB	effect checking
time: 0.000; rss: 180MB	match checking
time: 0.001; rss: 180MB	liveness checking
time: 0.000; rss: 180MB	rvalue checking
time: 0.054; rss: 185MB	MIR dump
time: 0.002; rss: 185MB	MIR passes
time: 0.001; rss: 185MB	borrow checking
time: 0.000; rss: 185MB	reachability checking
time: 0.001; rss: 185MB	death checking
time: 0.001; rss: 185MB	stability checking
time: 0.000; rss: 185MB	unused lib feature checking
time: 0.026; rss: 185MB	lint checking
time: 0.001; rss: 185MB	resolving dependency formats
time: 0.001; rss: 185MB	Prepare MIR codegen passes
  time: 0.000; rss: 186MB	write metadata
  time: 0.001; rss: 186MB	translation item collection
  time: 0.000; rss: 186MB	codegen unit partitioning
time: 0.832; rss: 195MB	translation
time: 0.000; rss: 195MB	assert dep graph
time: 0.000; rss: 195MB	serialize dep graph
  time: 0.043; rss: 145MB	llvm function passes [0]
  time: 0.001; rss: 145MB	llvm module passes [0]
  time: 1.472; rss: 146MB	codegen passes [0]
  time: 0.001; rss: 146MB	codegen passes [0]
time: 1.523; rss: 146MB	LLVM passes
  time: 0.203; rss: 131MB	running linker
time: 0.204; rss: 131MB	linking
done
