commit fb62f4d544c954d355716dca8beb55726036721e
Merge: cde61ba af1a3ff
Author: bors <bors@rust-lang.org>
Date:   Sat Sep 17 08:23:44 2016 -0700

    Auto merge of #36490 - bluss:zip-slightly-despecialized-edition, r=alexcrichton
    
    Remove data structure specialization for .zip() iterator
    
    Go back on half the specialization, the part that changed the Zip
    struct's fields themselves depending on the types of the iterators.
    
    Previous PR: #33090
    
    This means that the Zip iterator will always carry two usize fields,
    which are sometimes unused. If a whole for loop using a .zip() iterator is
    inlined, these are simply removed and have no effect.
    
    The same improvement for Zip of for example slice iterators remain, and
    they still optimize well. However, like when the specialization of zip
    was merged, the compiler is still very sensistive to the exact context.
    
    For example this code only autovectorizes if the function is used, not
    if the code in zip_sum_i32 is inserted inline where it was called:
    
    ```rust
    fn zip_sum_i32(xs: &[i32], ys: &[i32]) -> i32 {
        let mut s = 0;
        for (&x, &y) in xs.iter().zip(ys) {
            s += x * y;
        }
        s
    }
    
    fn zipdot_i32_default_zip(b: &mut test::Bencher)
    {
        let xs = vec![1; 1024];
        let ys = vec![1; 1024];
    
        b.iter(|| {
            zip_sum_i32(&xs, &ys)
        })
    }
    ```
    
    Include a test that checks that `Zip<T, U>` is covariant w.r.t. T and U.
    
    Fixes #35727
rustc: ./helloworld
/root/rust/x86_64-unknown-linux-gnu/stage2/bin/rustc hello.rs -Ztime-passes -Zinput-stats
time: 0.000; rss: 42MB	parsing
Lines of code:             3
Pre-expansion node count:  8
time: 0.000; rss: 42MB	recursion limit
time: 0.000; rss: 42MB	crate injection
time: 0.000; rss: 42MB	plugin loading
time: 0.000; rss: 42MB	plugin registration
time: 0.017; rss: 66MB	expansion
time: 0.000; rss: 66MB	maybe building test harness
time: 0.000; rss: 66MB	maybe creating a macro crate
time: 0.000; rss: 66MB	assigning node ids
Post-expansion node count: 68
time: 0.000; rss: 66MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 66MB	complete gated feature checking
time: 0.000; rss: 66MB	collecting defs
time: 0.002; rss: 66MB	external crate/lib resolution
time: 0.000; rss: 66MB	early lint checks
time: 0.000; rss: 66MB	AST validation
time: 0.000; rss: 66MB	name resolution
time: 0.000; rss: 66MB	lowering ast -> hir
time: 0.000; rss: 66MB	indexing hir
time: 0.000; rss: 66MB	attribute checking
time: 0.000; rss: 66MB	language item collection
time: 0.000; rss: 66MB	lifetime resolution
time: 0.000; rss: 66MB	looking for entry point
time: 0.000; rss: 66MB	looking for plugin registrar
time: 0.000; rss: 66MB	region resolution
time: 0.000; rss: 66MB	loop checking
time: 0.000; rss: 66MB	static item recursion checking
time: 0.000; rss: 66MB	compute_incremental_hashes_map
time: 0.000; rss: 66MB	load_dep_graph
time: 0.000; rss: 70MB	type collecting
time: 0.000; rss: 70MB	variance inference
time: 0.004; rss: 70MB	coherence checking
time: 0.000; rss: 70MB	wf checking
time: 0.000; rss: 70MB	item-types checking
time: 0.000; rss: 70MB	item-bodies checking
time: 0.000; rss: 70MB	drop-impl checking
time: 0.000; rss: 70MB	const checking
time: 0.000; rss: 70MB	privacy checking
time: 0.000; rss: 70MB	stability index
time: 0.000; rss: 70MB	intrinsic checking
time: 0.000; rss: 70MB	effect checking
time: 0.000; rss: 70MB	match checking
time: 0.000; rss: 70MB	liveness checking
time: 0.000; rss: 70MB	rvalue checking
time: 0.000; rss: 70MB	MIR dump
  time: 0.000; rss: 70MB	SimplifyCfg
  time: 0.000; rss: 70MB	QualifyAndPromoteConstants
  time: 0.000; rss: 70MB	TypeckMir
  time: 0.000; rss: 70MB	SimplifyBranches
  time: 0.000; rss: 70MB	SimplifyCfg
time: 0.001; rss: 70MB	MIR passes
time: 0.000; rss: 70MB	borrow checking
time: 0.000; rss: 70MB	reachability checking
time: 0.000; rss: 70MB	death checking
time: 0.000; rss: 70MB	stability checking
time: 0.000; rss: 70MB	unused lib feature checking
time: 0.000; rss: 70MB	lint checking
time: 0.001; rss: 70MB	resolving dependency formats
  time: 0.000; rss: 70MB	NoLandingPads
  time: 0.000; rss: 70MB	SimplifyCfg
  time: 0.000; rss: 70MB	EraseRegions
  time: 0.000; rss: 70MB	AddCallGuards
  time: 0.000; rss: 70MB	ElaborateDrops
  time: 0.000; rss: 70MB	NoLandingPads
  time: 0.000; rss: 70MB	SimplifyCfg
  time: 0.000; rss: 70MB	Deaggregator
  time: 0.000; rss: 70MB	AddCallGuards
  time: 0.000; rss: 70MB	PreTrans
time: 0.000; rss: 70MB	Prepare MIR codegen passes
  time: 0.000; rss: 70MB	write metadata
  time: 0.001; rss: 70MB	translation item collection
  time: 0.000; rss: 70MB	codegen unit partitioning
  time: 0.000; rss: 75MB	internalize symbols
time: 0.008; rss: 75MB	translation
time: 0.000; rss: 75MB	assert dep graph
time: 0.000; rss: 75MB	serialize dep graph
  time: 0.000; rss: 75MB	llvm function passes [0]
  time: 0.000; rss: 75MB	llvm module passes [0]
  time: 0.002; rss: 75MB	codegen passes [0]
  time: 0.000; rss: 75MB	codegen passes [0]
time: 0.002; rss: 75MB	LLVM passes
time: 0.000; rss: 75MB	serialize work products
  time: 0.106; rss: 75MB	running linker
time: 0.107; rss: 75MB	linking
done
