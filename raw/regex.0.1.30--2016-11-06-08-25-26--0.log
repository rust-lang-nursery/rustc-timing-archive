commit 161f2623bd078017dfc9a06bd3417b36f6a58de9
Merge: 3fc8304 434c314
Author: bors <bors@rust-lang.org>
Date:   Sun Nov 6 02:28:58 2016 -0800

    Auto merge of #37386 - johnthagen:Self-reference-example, r=GuillaumeGomez
    
    Add example using Self to reference
    
    When I first came across `Self` I had a hard time finding references to it in the docs (and it's also been asked about on [StackOverflow](http://stackoverflow.com/questions/32304595/whats-the-difference-between-self-and-self).
    
    I hope this example provides someone who comes across it for the first time a little more help.  If there is a better way to show an example actually using `Self`, I'm happy to modify this.  It was just the simplest place to start I could see.
rustc: ./regex.0.1.30
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling regex v0.1.30 (file:///root/benchmarks/regex.0.1.30)
time: 0.041; rss: 54MB	parsing
Lines of code:             8558
Pre-expansion node count:  58080
time: 0.000; rss: 54MB	recursion limit
time: 0.000; rss: 54MB	crate injection
time: 0.000; rss: 54MB	plugin loading
time: 0.000; rss: 54MB	plugin registration
time: 0.029; rss: 78MB	expansion
time: 0.000; rss: 78MB	maybe building test harness
time: 0.001; rss: 78MB	maybe creating a macro crate
Post-expansion node count: 68134
time: 0.000; rss: 78MB	checking for inline asm in case the target doesn't support it
time: 0.001; rss: 78MB	complete gated feature checking
time: 0.003; rss: 78MB	early lint checks
time: 0.000; rss: 78MB	AST validation
time: 0.005; rss: 78MB	name resolution
time: 0.005; rss: 85MB	lowering ast -> hir
time: 0.001; rss: 87MB	indexing hir
time: 0.001; rss: 87MB	attribute checking
time: 0.001; rss: 78MB	language item collection
time: 0.001; rss: 78MB	lifetime resolution
time: 0.000; rss: 78MB	looking for entry point
time: 0.000; rss: 78MB	looking for plugin registrar
time: 0.006; rss: 82MB	region resolution
time: 0.000; rss: 82MB	loop checking
time: 0.001; rss: 82MB	static item recursion checking
time: 0.018; rss: 82MB	compute_incremental_hashes_map
time: 0.000; rss: 82MB	load_dep_graph
time: 0.006; rss: 84MB	type collecting
time: 0.000; rss: 84MB	variance inference
time: 0.017; rss: 86MB	coherence checking
time: 0.007; rss: 86MB	wf checking
time: 0.165; rss: 99MB	item-types checking
time: 0.128; rss: 101MB	item-bodies checking
time: 0.000; rss: 101MB	drop-impl checking
time: 0.025; rss: 104MB	const checking
time: 0.002; rss: 104MB	privacy checking
time: 0.000; rss: 104MB	stability index
time: 0.001; rss: 104MB	intrinsic checking
time: 0.001; rss: 104MB	effect checking
time: 0.002; rss: 104MB	match checking
time: 0.002; rss: 104MB	liveness checking
time: 0.007; rss: 104MB	rvalue checking
time: 0.042; rss: 117MB	MIR dump
  time: 0.003; rss: 117MB	SimplifyCfg
  time: 0.005; rss: 117MB	QualifyAndPromoteConstants
  time: 0.009; rss: 117MB	TypeckMir
  time: 0.000; rss: 117MB	SimplifyBranches
  time: 0.001; rss: 117MB	SimplifyCfg
time: 0.017; rss: 117MB	MIR cleanup and validation
time: 0.020; rss: 117MB	borrow checking
time: 0.000; rss: 117MB	reachability checking
time: 0.002; rss: 117MB	death checking
time: 0.002; rss: 117MB	stability checking
time: 0.000; rss: 117MB	unused lib feature checking
time: 0.023; rss: 117MB	lint checking
time: 0.000; rss: 117MB	resolving dependency formats
  time: 0.000; rss: 117MB	NoLandingPads
  time: 0.001; rss: 117MB	SimplifyCfg
  time: 0.004; rss: 117MB	EraseRegions
  time: 0.000; rss: 117MB	AddCallGuards
  time: 0.008; rss: 120MB	ElaborateDrops
  time: 0.000; rss: 120MB	NoLandingPads
  time: 0.002; rss: 120MB	SimplifyCfg
  time: 0.002; rss: 120MB	InstCombine
  time: 0.000; rss: 120MB	Deaggregator
  time: 0.000; rss: 120MB	CopyPropagation
  time: 0.002; rss: 120MB	SimplifyLocals
  time: 0.000; rss: 120MB	AddCallGuards
  time: 0.000; rss: 120MB	PreTrans
time: 0.021; rss: 120MB	MIR optimisations
  time: 0.021; rss: 124MB	write metadata
  time: 0.049; rss: 126MB	translation item collection
  time: 0.006; rss: 126MB	codegen unit partitioning
  time: 0.006; rss: 157MB	internalize symbols
time: 0.441; rss: 157MB	translation
time: 0.000; rss: 157MB	assert dep graph
time: 0.000; rss: 157MB	serialize dep graph
  time: 0.038; rss: 111MB	llvm function passes [0]
  time: 0.019; rss: 112MB	llvm module passes [0]
  time: 0.708; rss: 114MB	codegen passes [0]
  time: 0.000; rss: 114MB	codegen passes [0]
time: 0.824; rss: 113MB	LLVM passes
time: 0.000; rss: 113MB	serialize work products
time: 0.034; rss: 84MB	linking
done
