commit 9dc9f340ccf37bccdd6aec0e0f44238d22fa6d7f
Merge: d4037fc 1b3a588
Author: bors <bors@rust-lang.org>
Date:   Fri Sep 16 19:52:53 2016 -0700

    Auto merge of #36468 - michaelwoerister:collect-vtable-drop-glue, r=eddyb
    
    trans: Let the collector find drop-glue for all vtables, not just VTableImpl.
    
    This fixes #36260. So far, the collector has only recorded drop-glue for insertion into a vtable if the vtable was for an impl. But there's actually no reason why it shouldn't do just the same for closure vtables, afaict.
    
    r? @eddyb
    cc @rust-lang/compiler
rustc: ./html5ever-2016-08-25
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling html5ever v0.5.4 (file:///root/benchmarks/html5ever-2016-08-25)
time: 0.029; rss: 52MB	parsing
Lines of code:             8210
Pre-expansion node count:  52238
time: 0.000; rss: 52MB	recursion limit
time: 0.000; rss: 52MB	crate injection
time: 0.000; rss: 52MB	plugin loading
time: 0.000; rss: 52MB	plugin registration
time: 1.164; rss: 100MB	expansion
time: 0.000; rss: 100MB	maybe building test harness
time: 0.002; rss: 100MB	maybe creating a macro crate
time: 0.008; rss: 100MB	assigning node ids
Post-expansion node count: 164262
time: 0.000; rss: 100MB	checking for inline asm in case the target doesn't support it
time: 0.003; rss: 100MB	complete gated feature checking
time: 0.005; rss: 101MB	collecting defs
time: 0.006; rss: 103MB	external crate/lib resolution
time: 0.009; rss: 103MB	early lint checks
time: 0.002; rss: 103MB	AST validation
time: 0.019; rss: 107MB	name resolution
time: 0.017; rss: 124MB	lowering ast -> hir
time: 0.004; rss: 129MB	indexing hir
time: 0.002; rss: 129MB	attribute checking
time: 0.002; rss: 110MB	language item collection
time: 0.003; rss: 110MB	lifetime resolution
time: 0.000; rss: 110MB	looking for entry point
time: 0.000; rss: 110MB	looking for plugin registrar
time: 0.015; rss: 115MB	region resolution
time: 0.002; rss: 115MB	loop checking
time: 0.003; rss: 115MB	static item recursion checking
time: 0.023; rss: 116MB	compute_incremental_hashes_map
time: 0.000; rss: 116MB	load_dep_graph
time: 0.014; rss: 116MB	type collecting
time: 0.000; rss: 116MB	variance inference
time: 0.027; rss: 120MB	coherence checking
time: 0.027; rss: 121MB	wf checking
time: 0.366; rss: 130MB	item-types checking
time: 0.587; rss: 144MB	item-bodies checking
time: 0.000; rss: 144MB	drop-impl checking
time: 0.076; rss: 146MB	const checking
time: 0.009; rss: 146MB	privacy checking
time: 0.002; rss: 146MB	stability index
time: 0.004; rss: 146MB	intrinsic checking
time: 0.003; rss: 146MB	effect checking
time: 0.027; rss: 146MB	match checking
time: 0.013; rss: 140MB	liveness checking
time: 0.031; rss: 140MB	rvalue checking
time: 0.119; rss: 184MB	MIR dump
  time: 0.009; rss: 186MB	SimplifyCfg
  time: 0.015; rss: 186MB	QualifyAndPromoteConstants
  time: 0.027; rss: 186MB	TypeckMir
  time: 0.000; rss: 186MB	SimplifyBranches
  time: 0.005; rss: 187MB	SimplifyCfg
time: 0.056; rss: 187MB	MIR passes
time: 0.095; rss: 190MB	borrow checking
time: 0.003; rss: 190MB	reachability checking
time: 0.007; rss: 190MB	death checking
time: 0.008; rss: 190MB	stability checking
time: 0.000; rss: 190MB	unused lib feature checking
time: 0.064; rss: 190MB	lint checking
time: 0.000; rss: 190MB	resolving dependency formats
  time: 0.000; rss: 190MB	NoLandingPads
  time: 0.004; rss: 190MB	SimplifyCfg
  time: 0.010; rss: 190MB	EraseRegions
  time: 0.001; rss: 190MB	AddCallGuards
  time: 0.082; rss: 195MB	ElaborateDrops
  time: 0.000; rss: 195MB	NoLandingPads
  time: 0.007; rss: 193MB	SimplifyCfg
  time: 0.001; rss: 191MB	Deaggregator
  time: 0.001; rss: 191MB	AddCallGuards
  time: 0.000; rss: 191MB	PreTrans
time: 0.107; rss: 191MB	Prepare MIR codegen passes
  time: 0.060; rss: 191MB	write metadata
  time: 0.042; rss: 194MB	translation item collection
  time: 0.005; rss: 194MB	codegen unit partitioning
  time: 0.011; rss: 211MB	internalize symbols
time: 0.426; rss: 185MB	translation
time: 0.000; rss: 185MB	assert dep graph
time: 0.000; rss: 185MB	serialize dep graph
  time: 0.024; rss: 113MB	llvm function passes [0]
  time: 0.013; rss: 113MB	llvm module passes [0]
  time: 0.524; rss: 117MB	codegen passes [0]
  time: 0.001; rss: 117MB	codegen passes [0]
time: 0.605; rss: 117MB	LLVM passes
time: 0.000; rss: 117MB	serialize work products
time: 0.062; rss: 97MB	linking
done
