commit 1cdc0fb11af12c04fb4b1984615f03b11a60decc
Merge: 8991ffc 9482bce
Author: bors <bors@rust-lang.org>
Date:   Sun Oct 2 14:13:27 2016 -0700

    Auto merge of #36904 - camlorn:field_offsets_refactor, r=eddyb
    
    Refactor layout to store offsets of fields, not offsets after fields
    
    This is the next PR moving us towards being able to reorder struct fields.
    
    The old code implicitly stored the offset of the first field.  This is inadequate because the first field may no longer be offset 0 in future.  This PR refactors `layout` to use a `offsets` vector instead of a `offset_after_field` vector.
rustc: ./syntex-0.42.2
cargo rustc -p syntex_syntax -- -Ztime-passes -Zinput-stats
   Compiling syntex_syntax v0.42.0
time: 0.108; rss: 75MB	parsing
Lines of code:             33687
Pre-expansion node count:  224033
time: 0.000; rss: 75MB	recursion limit
time: 0.000; rss: 75MB	crate injection
time: 0.000; rss: 75MB	plugin loading
time: 0.000; rss: 75MB	plugin registration
time: 0.272; rss: 146MB	expansion
time: 0.000; rss: 146MB	maybe building test harness
time: 0.007; rss: 146MB	maybe creating a macro crate
Post-expansion node count: 641571
time: 0.000; rss: 146MB	checking for inline asm in case the target doesn't support it
time: 0.014; rss: 146MB	complete gated feature checking
time: 0.023; rss: 146MB	early lint checks
time: 0.008; rss: 146MB	AST validation
time: 0.085; rss: 161MB	name resolution
time: 0.050; rss: 202MB	lowering ast -> hir
time: 0.009; rss: 210MB	indexing hir
time: 0.007; rss: 210MB	attribute checking
time: 0.006; rss: 161MB	language item collection
time: 0.013; rss: 161MB	lifetime resolution
time: 0.000; rss: 161MB	looking for entry point
time: 0.000; rss: 161MB	looking for plugin registrar
time: 0.045; rss: 172MB	region resolution
time: 0.006; rss: 172MB	loop checking
time: 0.006; rss: 172MB	static item recursion checking
time: 0.295; rss: 174MB	compute_incremental_hashes_map
time: 0.000; rss: 174MB	load_dep_graph
time: 0.080; rss: 173MB	type collecting
time: 0.001; rss: 173MB	variance inference
time: 0.039; rss: 177MB	coherence checking
time: 0.102; rss: 179MB	wf checking
time: 0.197; rss: 184MB	item-types checking
time: 4.024; rss: 242MB	item-bodies checking
time: 0.000; rss: 242MB	drop-impl checking
time: 0.319; rss: 242MB	const checking
time: 0.057; rss: 242MB	privacy checking
time: 0.008; rss: 242MB	stability index
time: 0.023; rss: 242MB	intrinsic checking
time: 0.019; rss: 242MB	effect checking
time: 0.059; rss: 242MB	match checking
time: 0.055; rss: 235MB	liveness checking
time: 0.288; rss: 235MB	rvalue checking
time: 0.426; rss: 426MB	MIR dump
  time: 0.057; rss: 429MB	SimplifyCfg
  time: 0.084; rss: 429MB	QualifyAndPromoteConstants
  time: 0.111; rss: 429MB	TypeckMir
  time: 0.004; rss: 429MB	SimplifyBranches
  time: 0.037; rss: 430MB	SimplifyCfg
time: 0.293; rss: 430MB	MIR passes
time: 0.688; rss: 430MB	borrow checking
time: 0.018; rss: 430MB	reachability checking
time: 0.046; rss: 430MB	death checking
time: 0.043; rss: 430MB	stability checking
time: 0.000; rss: 430MB	unused lib feature checking
time: 0.217; rss: 430MB	lint checking
time: 0.000; rss: 430MB	resolving dependency formats
  time: 0.003; rss: 430MB	NoLandingPads
  time: 0.027; rss: 430MB	SimplifyCfg
  time: 0.073; rss: 442MB	EraseRegions
  time: 0.011; rss: 442MB	AddCallGuards
  time: 1.083; rss: 459MB	ElaborateDrops
  time: 0.003; rss: 459MB	NoLandingPads
  time: 0.052; rss: 459MB	SimplifyCfg
  time: 0.030; rss: 459MB	InstCombine
  time: 0.012; rss: 459MB	Deaggregator
  time: 0.003; rss: 459MB	CopyPropagation
  time: 0.009; rss: 459MB	AddCallGuards
  time: 0.003; rss: 459MB	PreTrans
time: 1.309; rss: 459MB	Prepare MIR codegen passes
  time: 0.265; rss: 466MB	write metadata
  time: 0.477; rss: 476MB	translation item collection
  time: 0.068; rss: 479MB	codegen unit partitioning
  time: 0.058; rss: 728MB	internalize symbols
time: 5.151; rss: 606MB	translation
time: 0.000; rss: 606MB	assert dep graph
time: 0.000; rss: 606MB	serialize dep graph
  time: 0.505; rss: 415MB	llvm function passes [0]
  time: 0.259; rss: 419MB	llvm module passes [0]
  time: 10.147; rss: 413MB	codegen passes [0]
  time: 0.001; rss: 415MB	codegen passes [0]
time: 11.671; rss: 415MB	LLVM passes
time: 0.000; rss: 415MB	serialize work products
time: 0.666; rss: 107MB	linking
done
