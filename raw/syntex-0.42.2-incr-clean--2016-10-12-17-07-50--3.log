commit 9cb01365eed598811aef847a8ee414dab576f3c8
Merge: acb50e3 d9e6430
Author: bors <bors@rust-lang.org>
Date:   Wed Oct 12 11:28:53 2016 -0700

    Auto merge of #36762 - achanda:sockaddr_type, r=alexcrichton
    
    Add two functions to check type of SockAddr
    
    These can be used to determine the type of the underlying IP
    address
    
    r? @alexcrichton
rustc: ./syntex-0.42.2-incr-clean
RUSTFLAGS="-Z incremental=incr" \
    cargo rustc -p syntex_syntax -- -Ztime-passes -Zinput-stats -Z incremental-info
   Compiling syntex_syntax v0.42.0
time: 0.107; rss: 75MB	parsing
Lines of code:             33687
Pre-expansion node count:  224033
time: 0.000; rss: 75MB	recursion limit
time: 0.000; rss: 75MB	crate injection
time: 0.000; rss: 75MB	plugin loading
time: 0.000; rss: 75MB	plugin registration
time: 0.273; rss: 145MB	expansion
time: 0.000; rss: 145MB	maybe building test harness
time: 0.006; rss: 145MB	maybe creating a macro crate
Post-expansion node count: 641571
time: 0.000; rss: 145MB	checking for inline asm in case the target doesn't support it
time: 0.013; rss: 145MB	complete gated feature checking
time: 0.024; rss: 145MB	early lint checks
time: 0.007; rss: 145MB	AST validation
time: 0.084; rss: 162MB	name resolution
time: 0.049; rss: 202MB	lowering ast -> hir
time: 0.009; rss: 211MB	indexing hir
time: 0.006; rss: 211MB	attribute checking
time: 0.006; rss: 161MB	language item collection
time: 0.012; rss: 161MB	lifetime resolution
time: 0.000; rss: 161MB	looking for entry point
time: 0.000; rss: 161MB	looking for plugin registrar
time: 0.044; rss: 172MB	region resolution
time: 0.006; rss: 172MB	loop checking
time: 0.006; rss: 172MB	static item recursion checking
time: 0.263; rss: 174MB	compute_incremental_hashes_map
time: 0.000; rss: 174MB	load_dep_graph
time: 0.042; rss: 179MB	type collecting
time: 0.001; rss: 179MB	variance inference
time: 0.039; rss: 183MB	coherence checking
time: 0.101; rss: 185MB	wf checking
time: 0.193; rss: 190MB	item-types checking
time: 3.986; rss: 241MB	item-bodies checking
time: 0.000; rss: 241MB	drop-impl checking
time: 0.310; rss: 241MB	const checking
time: 0.054; rss: 241MB	privacy checking
time: 0.007; rss: 241MB	stability index
time: 0.021; rss: 241MB	intrinsic checking
time: 0.018; rss: 241MB	effect checking
time: 0.056; rss: 241MB	match checking
time: 0.055; rss: 237MB	liveness checking
time: 0.282; rss: 237MB	rvalue checking
time: 0.415; rss: 426MB	MIR dump
  time: 0.057; rss: 429MB	SimplifyCfg
  time: 0.081; rss: 429MB	QualifyAndPromoteConstants
  time: 0.110; rss: 429MB	TypeckMir
  time: 0.004; rss: 429MB	SimplifyBranches
  time: 0.032; rss: 429MB	SimplifyCfg
time: 0.285; rss: 429MB	MIR passes
time: 0.684; rss: 429MB	borrow checking
time: 0.022; rss: 429MB	reachability checking
time: 0.045; rss: 429MB	death checking
time: 0.042; rss: 429MB	stability checking
time: 0.000; rss: 429MB	unused lib feature checking
time: 0.217; rss: 429MB	lint checking
time: 0.000; rss: 429MB	resolving dependency formats
  time: 0.003; rss: 429MB	NoLandingPads
  time: 0.027; rss: 429MB	SimplifyCfg
  time: 0.071; rss: 442MB	EraseRegions
  time: 0.011; rss: 442MB	AddCallGuards
  time: 1.032; rss: 457MB	ElaborateDrops
  time: 0.003; rss: 457MB	NoLandingPads
  time: 0.052; rss: 457MB	SimplifyCfg
  time: 0.030; rss: 457MB	InstCombine
  time: 0.012; rss: 457MB	Deaggregator
  time: 0.003; rss: 457MB	CopyPropagation
  time: 0.009; rss: 457MB	AddCallGuards
  time: 0.003; rss: 457MB	PreTrans
time: 1.256; rss: 457MB	Prepare MIR codegen passes
  time: 0.263; rss: 465MB	write metadata
  time: 0.462; rss: 472MB	translation item collection
  time: 0.068; rss: 481MB	codegen unit partitioning
  time: 0.058; rss: 726MB	internalize symbols
time: 5.103; rss: 604MB	translation
time: 0.000; rss: 604MB	assert dep graph
time: 0.000; rss: 604MB	serialize dep graph
incremental: re-using 0 out of 1 modules
  time: 0.517; rss: 409MB	llvm function passes [0]
  time: 0.244; rss: 416MB	llvm module passes [0]
  time: 10.051; rss: 419MB	codegen passes [0]
  time: 0.001; rss: 414MB	codegen passes [0]
time: 11.550; rss: 414MB	LLVM passes
time: 0.000; rss: 414MB	serialize work products
time: 0.656; rss: 107MB	linking
done
