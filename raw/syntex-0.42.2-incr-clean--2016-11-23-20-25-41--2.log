commit 1e45b63052ae19c206a347d7fdfcdd97929f57d3
Merge: d5814b0 f4c68d2
Author: bors <bors@rust-lang.org>
Date:   Wed Nov 23 17:48:44 2016 -0600

    Auto merge of #37931 - eddyb:meta-version, r=jseyfried
    
    rustc_metadata: don't break the version check when CrateRoot changes.
    
    In #36551 I made `rustc_version` a field of `CrateRoot`, but despite it being the first field, one could still break the version check by changing `CrateRoot` so older compilers couldn't fully decode it (e.g. #37463).
    
    This PR fixes #37803 by moving the version string back at the beginning of metadata, right after the 32-bit big-endian absolute position of `CrateRoot`, and by incrementing `METADATA_VERSION`.
rustc: ./syntex-0.42.2-incr-clean
RUSTFLAGS="-Z incremental=incr" \
    cargo rustc -p syntex_syntax  -- \
    -Ztime-passes -Zinput-stats -Z incremental-info
   Compiling syntex_syntax v0.42.0
time: 0.092; rss: 72MB	parsing
Lines of code:             33687
Pre-expansion node count:  223115
time: 0.000; rss: 72MB	recursion limit
time: 0.000; rss: 72MB	crate injection
time: 0.000; rss: 72MB	plugin loading
time: 0.000; rss: 72MB	plugin registration
time: 0.239; rss: 144MB	expansion
time: 0.000; rss: 144MB	maybe building test harness
time: 0.006; rss: 144MB	maybe creating a macro crate
Post-expansion node count: 638863
time: 0.000; rss: 144MB	checking for inline asm in case the target doesn't support it
time: 0.012; rss: 144MB	complete gated feature checking
time: 0.022; rss: 144MB	early lint checks
time: 0.007; rss: 144MB	AST validation
time: 0.076; rss: 159MB	name resolution
time: 0.044; rss: 184MB	lowering ast -> hir
time: 0.008; rss: 195MB	indexing hir
time: 0.006; rss: 195MB	attribute checking
time: 0.004; rss: 150MB	language item collection
time: 0.010; rss: 150MB	lifetime resolution
time: 0.000; rss: 150MB	looking for entry point
time: 0.000; rss: 150MB	looking for plugin registrar
time: 0.041; rss: 170MB	region resolution
time: 0.005; rss: 170MB	loop checking
time: 0.004; rss: 170MB	static item recursion checking
time: 0.328; rss: 171MB	compute_incremental_hashes_map
time: 0.000; rss: 171MB	load_dep_graph
time: 0.045; rss: 175MB	type collecting
time: 0.001; rss: 175MB	variance inference
time: 0.002; rss: 175MB	impl wf inference
time: 0.018; rss: 177MB	coherence checking
time: 0.087; rss: 179MB	wf checking
time: 0.181; rss: 182MB	item-types checking
time: 6.138; rss: 233MB	item-bodies checking
time: 0.000; rss: 233MB	drop-impl checking
time: 0.213; rss: 254MB	const checking
time: 0.047; rss: 254MB	privacy checking
time: 0.006; rss: 254MB	stability index
time: 0.017; rss: 254MB	intrinsic checking
time: 0.014; rss: 254MB	effect checking
time: 0.045; rss: 254MB	match checking
time: 0.048; rss: 254MB	liveness checking
time: 0.174; rss: 254MB	rvalue checking
time: 0.359; rss: 437MB	MIR dump
  time: 0.057; rss: 439MB	SimplifyCfg
  time: 0.071; rss: 439MB	QualifyAndPromoteConstants
  time: 0.105; rss: 439MB	TypeckMir
  time: 0.004; rss: 439MB	SimplifyBranches
  time: 0.031; rss: 439MB	SimplifyCfg
time: 0.268; rss: 439MB	MIR cleanup and validation
time: 0.539; rss: 439MB	borrow checking
time: 0.025; rss: 439MB	reachability checking
time: 0.038; rss: 439MB	death checking
time: 0.030; rss: 441MB	stability checking
time: 0.000; rss: 441MB	unused lib feature checking
time: 0.195; rss: 441MB	lint checking
time: 0.000; rss: 441MB	resolving dependency formats
  time: 0.003; rss: 441MB	NoLandingPads
  time: 0.027; rss: 441MB	SimplifyCfg
  time: 0.061; rss: 450MB	EraseRegions
  time: 0.011; rss: 450MB	AddCallGuards
  time: 0.268; rss: 463MB	ElaborateDrops
  time: 0.003; rss: 463MB	NoLandingPads
  time: 0.051; rss: 463MB	SimplifyCfg
  time: 0.028; rss: 463MB	InstCombine
  time: 0.012; rss: 463MB	Deaggregator
  time: 0.002; rss: 463MB	CopyPropagation
  time: 0.034; rss: 463MB	SimplifyLocals
  time: 0.009; rss: 463MB	AddCallGuards
  time: 0.002; rss: 463MB	PreTrans
time: 0.512; rss: 463MB	MIR optimisations
  time: 0.061; rss: 475MB	write metadata
  time: 0.378; rss: 486MB	translation item collection
  time: 0.058; rss: 499MB	codegen unit partitioning
  time: 0.040; rss: 740MB	internalize symbols
time: 4.298; rss: 740MB	translation
time: 0.000; rss: 740MB	assert dep graph
time: 0.000; rss: 740MB	serialize dep graph
incremental: re-using 0 out of 1 modules
  time: 0.523; rss: 428MB	llvm function passes [0]
  time: 0.248; rss: 434MB	llvm module passes [0]
  time: 10.396; rss: 426MB	codegen passes [0]
  time: 0.000; rss: 426MB	codegen passes [0]
time: 11.925; rss: 426MB	LLVM passes
time: 0.000; rss: 426MB	serialize work products
time: 0.335; rss: 116MB	linking
done
