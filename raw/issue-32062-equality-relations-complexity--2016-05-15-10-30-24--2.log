commit b3583193531c124e36aa1813cf5f8b8e667d016c
Merge: 1a26d23 04baf25
Author: bors <bors@rust-lang.org>
Date:   Sun May 15 05:26:50 2016 -0700

    Auto merge of #33612 - royalstream:royalstream-enc-enum-ptr, r=michaelwoerister
    
    gdb Pretty Print: generic encoded was failing on reference/pointer types
    
    If you debug this program using **gdb**
    ```rust
    fn main() {
        let x = 10;
        let y = Some(&x);
        // additional code
    }
    ```
    And you try to print **y**'s value from the debugger, you get the following:
    ```
    (gdb) print y
    Python Exception <class 'gdb.error'> Cannot convert value to int.:
    $1 = {RUST$ENCODED$ENUM$0$None = Some = {0x7fff5fbff97c}}
    ```
    What happens is that inside **debugger_pretty_printers_common.py** the method `is_null_variant` doesn't have any special handling for pointer values so it ends up calling `.as_integer()` on `discriminant_val` (which holds a pointer) and fails.
    
    Considering it needs to handle pointers and return _true_ when the pointer is _null_, I modified the `.as_integer()` method in **gdb_rust_pretty_printing.py** to take pointers into consideration.
    
    After this modification **gdb** prints **y** like this:
    ```
    (gdb) print y
    $1 = Some = {0x7fff5fbff97c}
    ```
    Now, it would be nice to print something useful (instead of a pointer address) but the pretty printer doesn't currently handle references/pointers so that's a completely different subject.
rustc: ./issue-32062-equality-relations-complexity
/root/rust/x86_64-unknown-linux-gnu/stage2/bin/rustc issue-32062.rs -Ztime-passes -Zinput-stats
time: 0.000; rss: 45MB	parsing
Lines of code:             60
Pre-expansion node count:  586
time: 0.000; rss: 45MB	configuration 1
time: 0.000; rss: 45MB	recursion limit
time: 0.000; rss: 45MB	crate injection
time: 0.003; rss: 51MB	macro loading
time: 0.000; rss: 51MB	plugin loading
time: 0.000; rss: 51MB	plugin registration
time: 0.001; rss: 51MB	expansion
time: 0.000; rss: 51MB	configuration 2
time: 0.000; rss: 51MB	gated configuration checking
time: 0.000; rss: 51MB	maybe building test harness
time: 0.000; rss: 51MB	prelude injection
time: 0.000; rss: 51MB	checking that all macro invocations are gone
time: 0.000; rss: 51MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 51MB	complete gated feature checking
Post-expansion node count: 599
time: 0.000; rss: 51MB	assigning node ids
time: 0.000; rss: 51MB	collecting defs
time: 0.003; rss: 51MB	external crate/lib resolution
time: 0.000; rss: 51MB	early lint checks
time: 0.000; rss: 55MB	name resolution
time: 0.000; rss: 55MB	lowering ast -> hir
time: 0.000; rss: 55MB	indexing hir
time: 0.000; rss: 55MB	attribute checking
time: 0.000; rss: 55MB	language item collection
time: 0.000; rss: 55MB	lifetime resolution
time: 0.000; rss: 55MB	looking for entry point
time: 0.000; rss: 55MB	looking for plugin registrar
time: 0.000; rss: 55MB	region resolution
time: 0.000; rss: 55MB	loop checking
time: 0.000; rss: 55MB	static item recursion checking
time: 0.000; rss: 59MB	load_dep_graph
time: 0.001; rss: 59MB	type collecting
time: 0.000; rss: 59MB	variance inference
time: 0.005; rss: 71MB	coherence checking
time: 0.008; rss: 71MB	wf checking
time: 0.000; rss: 71MB	item-types checking
time: 1.898; rss: 84MB	item-bodies checking
time: 0.000; rss: 84MB	drop-impl checking
time: 0.001; rss: 84MB	const checking
time: 0.000; rss: 84MB	privacy checking
time: 0.000; rss: 84MB	stability index
time: 0.000; rss: 84MB	intrinsic checking
time: 0.000; rss: 84MB	effect checking
time: 0.000; rss: 84MB	match checking
time: 0.000; rss: 84MB	liveness checking
time: 0.001; rss: 84MB	rvalue checking
time: 0.001; rss: 84MB	MIR dump
time: 0.000; rss: 84MB	MIR passes
time: 0.002; rss: 84MB	borrow checking
time: 0.000; rss: 84MB	reachability checking
time: 0.000; rss: 84MB	death checking
time: 0.000; rss: 84MB	stability checking
time: 0.000; rss: 84MB	unused lib feature checking
time: 0.000; rss: 84MB	lint checking
time: 0.001; rss: 84MB	resolving dependency formats
time: 0.000; rss: 84MB	Prepare MIR codegen passes
  time: 0.135; rss: 89MB	translation item collection
  time: 0.000; rss: 89MB	codegen unit partitioning
  time: 0.000; rss: 95MB	write metadata
time: 0.671; rss: 95MB	translation
time: 0.000; rss: 95MB	assert dep graph
time: 0.000; rss: 95MB	serialize dep graph
  time: 0.000; rss: 87MB	llvm function passes [0]
  time: 0.000; rss: 87MB	llvm module passes [0]
  time: 0.005; rss: 92MB	codegen passes [0]
  time: 0.000; rss: 92MB	codegen passes [0]
time: 0.006; rss: 92MB	LLVM passes
  time: 0.105; rss: 92MB	running linker
time: 0.105; rss: 92MB	linking
done
