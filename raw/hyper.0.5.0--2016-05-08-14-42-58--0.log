commit ebe6da34ffc72a701f4189ef7be5ab2c1cb6e8c9
Merge: cae42a4 ca03b81
Author: bors <bors@rust-lang.org>
Date:   Sun May 8 09:13:19 2016 -0700

    Auto merge of #33414 - Nercury:master, r=alexcrichton
    
    Add armv7-linux-androideabi target
    
    This PR adds `armv7-linux-androideabi` target that matches `armeabi-v7a` Android ABI, ~~downscales `arm-linux-androideabi` target to match `armeabi` Android ABI~~ (TBD later if needed).
    
    This should allow us to get the best performance from every [Android ABI level](http://developer.android.com/ndk/guides/abis.html).
    
    Currently existing target `arm-linux-androideabi` started gaining features out of the supported range of [android `armeabi`](http://developer.android.com/ndk/guides/abis.html). While android compiler does not use a different target for later supported `armv7` architecture, it has distinct ABI name `armeabi-v7a`. We decided to add rust target `armv7-linux-androideabi` to match it.
    
    Note that `NEON`, `VFPv3-D32`, and `ThumbEE` instruction sets are not added, because not all android devices are guaranteed to support all or some of these, and [their availability should be checked at runtime](http://developer.android.com/ndk/guides/abis.html#v7a).
    
    ~~This reduces performance of existing `arm-linux-androideabi` and may make it _much_ slower (we are talking more than order of magnitude in some random ad-hoc fp benchmark that I did).~~
    
    Part of #33278.
rustc: ./hyper.0.5.0
cargo rustc -- -Ztime-passes -Zinput-stats
    Updating registry `https://github.com/rust-lang/crates.io-index`
   Compiling traitobject v0.0.1
   Compiling log v0.3.6
   Compiling gcc v0.3.28
   Compiling matches v0.1.2
   Compiling rustc-serialize v0.3.19
   Compiling winapi v0.2.6
   Compiling httparse v0.1.6
   Compiling winapi-build v0.1.1
   Compiling typeable v0.1.2
   Compiling unicase v0.1.0
   Compiling lazy_static v0.1.16
   Compiling libc v0.2.11
   Compiling bitflags v0.3.3
   Compiling kernel32-sys v0.2.2
   Compiling libc v0.1.12
   Compiling pkg-config v0.3.8
   Compiling mime v0.0.11
   Compiling openssl-sys v0.6.7
   Compiling rand v0.3.14
   Compiling time v0.1.35
   Compiling num_cpus v0.2.11
   Compiling openssl v0.6.7
   Compiling uuid v0.1.18
   Compiling url v0.2.38
   Compiling cookie v0.1.21
   Compiling hyper v0.5.0 (file:///root/benchmarks/hyper.0.5.0)
time: 0.041; rss: 49MB	parsing
Lines of code:             9154
Pre-expansion node count:  45594
time: 0.009; rss: 50MB	configuration 1
time: 0.000; rss: 50MB	recursion limit
time: 0.000; rss: 50MB	crate injection
time: 0.005; rss: 55MB	macro loading
time: 0.000; rss: 55MB	plugin loading
time: 0.000; rss: 55MB	plugin registration
time: 0.203; rss: 65MB	expansion
time: 0.029; rss: 65MB	configuration 2
time: 0.000; rss: 65MB	gated configuration checking
time: 0.011; rss: 65MB	maybe building test harness
time: 0.008; rss: 65MB	prelude injection
time: 0.001; rss: 65MB	checking that all macro invocations are gone
time: 0.000; rss: 65MB	checking for inline asm in case the target doesn't support it
time: 0.002; rss: 65MB	complete gated feature checking
Post-expansion node count: 107138
time: 0.008; rss: 65MB	assigning node ids
time: 0.006; rss: 67MB	collecting defs
time: 0.005; rss: 69MB	external crate/lib resolution
time: 0.018; rss: 74MB	lowering ast -> hir
time: 0.005; rss: 76MB	indexing hir
time: 0.001; rss: 76MB	attribute checking
time: 0.007; rss: 76MB	early lint checks
time: 0.001; rss: 69MB	language item collection
time: 0.028; rss: 86MB	name resolution
time: 0.002; rss: 86MB	lifetime resolution
time: 0.000; rss: 86MB	looking for entry point
time: 0.000; rss: 86MB	looking for plugin registrar
time: 0.008; rss: 89MB	region resolution
time: 0.001; rss: 89MB	loop checking
time: 0.001; rss: 89MB	static item recursion checking
time: 0.000; rss: 89MB	load_dep_graph
time: 0.018; rss: 99MB	type collecting
time: 0.000; rss: 99MB	variance inference
time: 0.046; rss: 113MB	coherence checking
time: 0.081; rss: 115MB	wf checking
time: 0.029; rss: 115MB	item-types checking
time: 0.506; rss: 133MB	item-bodies checking
time: 0.000; rss: 133MB	drop-impl checking
time: 0.041; rss: 135MB	const checking
time: 0.010; rss: 135MB	privacy checking
time: 0.001; rss: 135MB	stability index
time: 0.004; rss: 135MB	intrinsic checking
time: 0.002; rss: 135MB	effect checking
time: 0.012; rss: 135MB	match checking
time: 0.005; rss: 135MB	liveness checking
time: 0.025; rss: 135MB	rvalue checking
time: 0.065; rss: 143MB	MIR dump
time: 0.037; rss: 143MB	MIR passes
time: 0.065; rss: 144MB	borrow checking
time: 0.003; rss: 144MB	reachability checking
time: 0.007; rss: 144MB	death checking
time: 0.006; rss: 144MB	stability checking
time: 0.000; rss: 144MB	unused lib feature checking
time: 0.049; rss: 144MB	lint checking
time: 0.000; rss: 144MB	resolving dependency formats
time: 0.016; rss: 145MB	Prepare MIR codegen passes
  time: 0.204; rss: 158MB	translation item collection
  time: 0.008; rss: 158MB	codegen unit partitioning
  time: 0.140; rss: 280MB	write metadata
time: 1.794; rss: 280MB	translation
time: 0.001; rss: 280MB	assert dep graph
time: 0.000; rss: 280MB	serialize dep graph
  time: 0.099; rss: 165MB	llvm function passes [0]
  time: 0.048; rss: 167MB	llvm module passes [0]
  time: 1.639; rss: 171MB	codegen passes [0]
  time: 0.001; rss: 121MB	codegen passes [0]
time: 1.996; rss: 121MB	LLVM passes
time: 0.176; rss: 119MB	linking
done
