commit dd6e8d45e183861d44ed91a99f0a50403b2776a3
Merge: 57ef015 0ca7d3d
Author: bors <bors@rust-lang.org>
Date:   Mon May 23 20:02:23 2016 -0700

    Auto merge of #33787 - cuviper:local-rebuild, r=alexcrichton
    
    Add --enable-local-rebuild to bootstrap from the current release
    
    In Linux distributions, it is often necessary to rebuild packages for cases like applying new patches or linking against new system libraries.  In this scenario, the rustc in the distro build environment may already match the current release that we're trying to rebuild.  Thus we don't want to use the prior release's bootstrap key, nor `--cfg stage0` for the prior unstable features.
    
    The new `configure --enable-local-rebuild` option specifies that we are rebuilding from the current release.  The current bootstrap key is used for the local rustc, and current stage1 features are also assumed.  Both the makefiles and rustbuild support this configuration.
    
    Fixes #29556
    r? @alexcrichton
rustc: ./inflate-0.1.0
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling inflate v0.1.0 (file:///root/benchmarks/inflate-0.1.0)
time: 0.004; rss: 47MB	parsing
Lines of code:             956
Pre-expansion node count:  4772
time: 0.001; rss: 47MB	configuration 1
time: 0.000; rss: 47MB	recursion limit
time: 0.000; rss: 47MB	crate injection
time: 0.018; rss: 84MB	macro loading
time: 0.000; rss: 84MB	plugin loading
time: 0.000; rss: 84MB	plugin registration
time: 0.084; rss: 92MB	expansion
time: 0.009; rss: 92MB	configuration 2
time: 0.000; rss: 92MB	gated configuration checking
time: 0.004; rss: 92MB	maybe building test harness
time: 0.004; rss: 92MB	prelude injection
time: 0.000; rss: 92MB	checking that all macro invocations are gone
time: 0.000; rss: 92MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 92MB	complete gated feature checking
Post-expansion node count: 54809
time: 0.004; rss: 92MB	assigning node ids
time: 0.004; rss: 92MB	collecting defs
time: 0.001; rss: 92MB	external crate/lib resolution
time: 0.003; rss: 92MB	early lint checks
time: 0.012; rss: 95MB	name resolution
time: 0.008; rss: 99MB	lowering ast -> hir
time: 0.001; rss: 99MB	indexing hir
time: 0.001; rss: 99MB	attribute checking
time: 0.001; rss: 96MB	language item collection
time: 0.001; rss: 96MB	lifetime resolution
time: 0.000; rss: 96MB	looking for entry point
time: 0.000; rss: 96MB	looking for plugin registrar
time: 0.003; rss: 99MB	region resolution
time: 0.000; rss: 99MB	loop checking
time: 0.000; rss: 99MB	static item recursion checking
time: 0.000; rss: 99MB	load_dep_graph
time: 0.001; rss: 99MB	type collecting
time: 0.000; rss: 99MB	variance inference
time: 0.010; rss: 102MB	coherence checking
time: 0.002; rss: 102MB	wf checking
time: 0.002; rss: 102MB	item-types checking
time: 3.263; rss: 115MB	item-bodies checking
time: 0.000; rss: 115MB	drop-impl checking
time: 0.015; rss: 115MB	const checking
time: 0.001; rss: 115MB	privacy checking
time: 0.000; rss: 115MB	stability index
time: 0.000; rss: 115MB	intrinsic checking
time: 0.001; rss: 115MB	effect checking
time: 0.005; rss: 115MB	match checking
time: 0.061; rss: 113MB	liveness checking
time: 0.011; rss: 113MB	rvalue checking
time: 0.036; rss: 126MB	MIR dump
time: 0.016; rss: 121MB	MIR passes
time: 0.228; rss: 123MB	borrow checking
time: 0.000; rss: 123MB	reachability checking
time: 0.003; rss: 123MB	death checking
time: 0.002; rss: 123MB	stability checking
time: 0.000; rss: 123MB	unused lib feature checking
time: 0.023; rss: 125MB	lint checking
time: 0.000; rss: 125MB	resolving dependency formats
time: 0.005; rss: 125MB	Prepare MIR codegen passes
  time: 0.012; rss: 129MB	translation item collection
  time: 0.000; rss: 129MB	codegen unit partitioning
  time: 0.003; rss: 148MB	write metadata
time: 0.417; rss: 142MB	translation
time: 0.000; rss: 142MB	assert dep graph
time: 0.000; rss: 142MB	serialize dep graph
  time: 0.025; rss: 110MB	llvm function passes [0]
  time: 0.005; rss: 111MB	llvm module passes [0]
  time: 0.493; rss: 116MB	codegen passes [0]
  time: 0.000; rss: 105MB	codegen passes [0]
time: 0.565; rss: 104MB	LLVM passes
time: 0.034; rss: 104MB	linking
done
