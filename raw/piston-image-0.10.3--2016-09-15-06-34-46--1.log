commit e2c64d16906dbb29763d6cbf022164a09247ef9f
Merge: 16ff9e2 7bd25a3
Author: bors <bors@rust-lang.org>
Date:   Thu Sep 15 02:43:01 2016 -0700

    Auto merge of #36372 - sfackler:sum-prod-overflow, r=alexcrichton
    
    Inherit overflow checks for sum and product
    
    We have previously documented the fact that these will panic on overflow, but I think this behavior is what people actually want/expect. `#[rustc_inherit_overflow_checks]` didn't exist when we discussed these for stabilization.
    
    r? @alexcrichton
    
    Closes #35807
rustc: ./piston-image-0.10.3
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling image v0.10.3 (file:///root/benchmarks/piston-image-0.10.3)
time: 0.046; rss: 58MB	parsing
Lines of code:             12000
Pre-expansion node count:  90272
time: 0.000; rss: 59MB	recursion limit
time: 0.000; rss: 59MB	crate injection
time: 0.000; rss: 59MB	plugin loading
time: 0.000; rss: 59MB	plugin registration
time: 0.067; rss: 88MB	expansion
time: 0.000; rss: 88MB	maybe building test harness
time: 0.002; rss: 88MB	maybe creating a macro crate
time: 0.007; rss: 88MB	assigning node ids
Post-expansion node count: 149551
time: 0.000; rss: 88MB	checking for inline asm in case the target doesn't support it
time: 0.002; rss: 88MB	complete gated feature checking
time: 0.004; rss: 88MB	collecting defs
time: 0.011; rss: 97MB	external crate/lib resolution
time: 0.006; rss: 97MB	early lint checks
time: 0.002; rss: 97MB	AST validation
time: 0.021; rss: 102MB	name resolution
time: 0.013; rss: 112MB	lowering ast -> hir
time: 0.003; rss: 116MB	indexing hir
time: 0.002; rss: 116MB	attribute checking
time: 0.002; rss: 106MB	language item collection
time: 0.003; rss: 106MB	lifetime resolution
time: 0.000; rss: 106MB	looking for entry point
time: 0.000; rss: 106MB	looking for plugin registrar
time: 0.011; rss: 112MB	region resolution
time: 0.002; rss: 112MB	loop checking
time: 0.001; rss: 112MB	static item recursion checking
time: 0.058; rss: 112MB	compute_incremental_hashes_map
time: 0.000; rss: 112MB	load_dep_graph
time: 0.024; rss: 113MB	type collecting
time: 0.000; rss: 113MB	variance inference
time: 0.031; rss: 117MB	coherence checking
time: 0.098; rss: 118MB	wf checking
time: 0.217; rss: 126MB	item-types checking
time: 0.936; rss: 138MB	item-bodies checking
time: 0.000; rss: 138MB	drop-impl checking
time: 0.071; rss: 138MB	const checking
time: 0.011; rss: 138MB	privacy checking
time: 0.001; rss: 138MB	stability index
time: 0.009; rss: 138MB	intrinsic checking
time: 0.003; rss: 138MB	effect checking
time: 0.024; rss: 138MB	match checking
time: 0.011; rss: 138MB	liveness checking
time: 0.068; rss: 138MB	rvalue checking
time: 0.111; rss: 181MB	MIR dump
  time: 0.012; rss: 181MB	SimplifyCfg
  time: 0.025; rss: 181MB	QualifyAndPromoteConstants
  time: 0.028; rss: 181MB	TypeckMir
  time: 0.001; rss: 181MB	SimplifyBranches
  time: 0.007; rss: 181MB	SimplifyCfg
time: 0.072; rss: 181MB	MIR passes
time: 0.142; rss: 181MB	borrow checking
time: 0.004; rss: 181MB	reachability checking
time: 0.008; rss: 181MB	death checking
time: 0.010; rss: 181MB	stability checking
time: 0.000; rss: 181MB	unused lib feature checking
time: 0.074; rss: 181MB	lint checking
time: 0.000; rss: 181MB	resolving dependency formats
  time: 0.001; rss: 181MB	NoLandingPads
  time: 0.005; rss: 181MB	SimplifyCfg
  time: 0.012; rss: 185MB	EraseRegions
  time: 0.002; rss: 185MB	AddCallGuards
  time: 0.132; rss: 187MB	ElaborateDrops
  time: 0.001; rss: 187MB	NoLandingPads
  time: 0.009; rss: 187MB	SimplifyCfg
  time: 0.002; rss: 187MB	Deaggregator
  time: 0.002; rss: 187MB	AddCallGuards
  time: 0.000; rss: 187MB	PreTrans
time: 0.166; rss: 187MB	Prepare MIR codegen passes
  time: 0.081; rss: 189MB	write metadata
  time: 0.527; rss: 199MB	translation item collection
  time: 0.029; rss: 204MB	codegen unit partitioning
  time: 0.052; rss: 328MB	internalize symbols
time: 3.475; rss: 302MB	translation
time: 0.000; rss: 302MB	assert dep graph
time: 0.000; rss: 302MB	serialize dep graph
  time: 0.201; rss: 225MB	llvm function passes [0]
  time: 0.082; rss: 230MB	llvm module passes [0]
  time: 4.004; rss: 236MB	codegen passes [0]
  time: 0.001; rss: 236MB	codegen passes [0]
time: 4.587; rss: 236MB	LLVM passes
time: 0.000; rss: 236MB	serialize work products
time: 0.349; rss: 106MB	linking
done
