commit 49d3fd3b38cd838b241858baaaa6162666badba1
Merge: ac635aa c722a1e
Author: bors <bors@rust-lang.org>
Date:   Fri Nov 18 19:21:47 2016 -0800

    Auto merge of #37787 - michaelwoerister:macro-def-ich, r=nikomatsakis
    
    ICH: Handle MacroDef HIR instances.
    
    As of recently, `hir::MacroDef` instances are exported in crate metadata, which means we also store their ICH when doing incremental compilation. Even though exported macro definitions should not (yet) interact with incremental compilation, the ICH is also used for the general purpose crate hash, where macros should be included.
    
    This PR implements ICH computation for `MacroDef`. In theory, the ICH of these MacroDefs is less stable than that of other HIR items, since I opted to just call the compiler-generated `Hash::hash()` for `Token::Interpolated` variants. `Token::Interpolated` contains AST data structures and it would have been a lot of effort to expand ICH computation to the AST too. Since quasi-quoting is rarely used *and* it would only make a difference if incremental compilation was extended to macros, the simpler implementation seemed like a good idea.
    
    This fixes the problem reported in https://github.com/rust-lang/rust/issues/37756. The test still fails because of broken codegen-unit support though.
    
    r? @nikomatsakis
rustc: ./piston-image-0.10.3
cargo rustc  -- -Ztime-passes -Zinput-stats
   Compiling image v0.10.3 (file:///root/benchmarks/piston-image-0.10.3)
time: 0.037; rss: 54MB	parsing
Lines of code:             12000
Pre-expansion node count:  90152
time: 0.000; rss: 54MB	recursion limit
time: 0.000; rss: 54MB	crate injection
time: 0.000; rss: 54MB	plugin loading
time: 0.000; rss: 54MB	plugin registration
time: 0.066; rss: 95MB	expansion
time: 0.000; rss: 95MB	maybe building test harness
time: 0.001; rss: 95MB	maybe creating a macro crate
Post-expansion node count: 148881
time: 0.000; rss: 95MB	checking for inline asm in case the target doesn't support it
time: 0.003; rss: 95MB	complete gated feature checking
time: 0.005; rss: 95MB	early lint checks
time: 0.001; rss: 95MB	AST validation
time: 0.018; rss: 99MB	name resolution
time: 0.012; rss: 105MB	lowering ast -> hir
time: 0.002; rss: 109MB	indexing hir
time: 0.001; rss: 109MB	attribute checking
time: 0.001; rss: 99MB	language item collection
time: 0.002; rss: 99MB	lifetime resolution
time: 0.000; rss: 99MB	looking for entry point
time: 0.000; rss: 99MB	looking for plugin registrar
time: 0.009; rss: 105MB	region resolution
time: 0.001; rss: 105MB	loop checking
time: 0.001; rss: 105MB	static item recursion checking
time: 0.050; rss: 105MB	compute_incremental_hashes_map
time: 0.000; rss: 105MB	load_dep_graph
time: 0.016; rss: 107MB	type collecting
time: 0.000; rss: 107MB	variance inference
time: 0.000; rss: 107MB	impl wf inference
time: 0.014; rss: 109MB	coherence checking
time: 0.067; rss: 109MB	wf checking
time: 0.134; rss: 112MB	item-types checking
time: 0.768; rss: 121MB	item-bodies checking
time: 0.000; rss: 121MB	drop-impl checking
time: 0.048; rss: 127MB	const checking
time: 0.009; rss: 127MB	privacy checking
time: 0.001; rss: 127MB	stability index
time: 0.006; rss: 127MB	intrinsic checking
time: 0.003; rss: 127MB	effect checking
time: 0.013; rss: 127MB	match checking
time: 0.009; rss: 127MB	liveness checking
time: 0.039; rss: 127MB	rvalue checking
time: 0.087; rss: 168MB	MIR dump
  time: 0.011; rss: 168MB	SimplifyCfg
  time: 0.020; rss: 168MB	QualifyAndPromoteConstants
  time: 0.023; rss: 168MB	TypeckMir
  time: 0.001; rss: 168MB	SimplifyBranches
  time: 0.005; rss: 168MB	SimplifyCfg
time: 0.059; rss: 168MB	MIR cleanup and validation
time: 0.107; rss: 168MB	borrow checking
time: 0.003; rss: 168MB	reachability checking
time: 0.008; rss: 168MB	death checking
time: 0.007; rss: 170MB	stability checking
time: 0.000; rss: 170MB	unused lib feature checking
time: 0.062; rss: 170MB	lint checking
time: 0.000; rss: 170MB	resolving dependency formats
  time: 0.001; rss: 170MB	NoLandingPads
  time: 0.005; rss: 170MB	SimplifyCfg
  time: 0.010; rss: 170MB	EraseRegions
  time: 0.002; rss: 170MB	AddCallGuards
  time: 0.042; rss: 172MB	ElaborateDrops
  time: 0.001; rss: 172MB	NoLandingPads
  time: 0.009; rss: 172MB	SimplifyCfg
  time: 0.006; rss: 172MB	InstCombine
  time: 0.002; rss: 172MB	Deaggregator
  time: 0.000; rss: 172MB	CopyPropagation
  time: 0.007; rss: 172MB	SimplifyLocals
  time: 0.002; rss: 172MB	AddCallGuards
  time: 0.000; rss: 172MB	PreTrans
time: 0.086; rss: 172MB	MIR optimisations
  time: 0.016; rss: 174MB	write metadata
  time: 0.424; rss: 187MB	translation item collection
  time: 0.025; rss: 191MB	codegen unit partitioning
  time: 0.022; rss: 312MB	internalize symbols
time: 2.358; rss: 312MB	translation
time: 0.000; rss: 312MB	assert dep graph
time: 0.000; rss: 312MB	serialize dep graph
  time: 0.206; rss: 224MB	llvm function passes [0]
  time: 0.080; rss: 227MB	llvm module passes [0]
  time: 4.184; rss: 227MB	codegen passes [0]
  time: 0.000; rss: 227MB	codegen passes [0]
time: 4.775; rss: 227MB	LLVM passes
time: 0.000; rss: 227MB	serialize work products
time: 0.128; rss: 98MB	linking
done
