commit 1a4192804518199623fb88bf43bde69d6b0203cb
Merge: a5dac7a 4625642
Author: bors <bors@rust-lang.org>
Date:   Tue Oct 4 13:23:09 2016 -0700

    Auto merge of #36933 - alexcrichton:less-neon-again, r=eddyb
    
    rustc: Try again to disable NEON on armv7 linux
    
    This is a follow-up to #35814 which apparently didn't disable it hard enough. It
    looks like LLVM's default armv7 target enables NEON so we'd otherwise have to
    pass `-neon`, but we're already enabling armv7 with `+v7` supposedly, so let's
    try just telling LLVM that the armv7 target is arm and then enable features
    selectively.
    
    Closes #36913
rustc: ./syntex-0.42.2-incr-clean
RUSTFLAGS="-Z incremental=incr" \
    cargo rustc -p syntex_syntax -- -Ztime-passes -Zinput-stats -Z incremental-info
   Compiling bitflags v0.5.0
   Compiling rustc-serialize v0.3.19
   Compiling winapi-build v0.1.1
   Compiling winapi v0.2.8
   Compiling libc v0.2.15
   Compiling log v0.3.6
   Compiling unicode-xid v0.0.3
   Compiling kernel32-sys v0.2.2
   Compiling term v0.4.4
   Compiling syntex_pos v0.42.0
   Compiling syntex_errors v0.42.0
   Compiling syntex_syntax v0.42.0
time: 0.107; rss: 76MB	parsing
Lines of code:             33687
Pre-expansion node count:  224033
time: 0.000; rss: 76MB	recursion limit
time: 0.000; rss: 76MB	crate injection
time: 0.000; rss: 76MB	plugin loading
time: 0.000; rss: 76MB	plugin registration
time: 0.274; rss: 148MB	expansion
time: 0.000; rss: 148MB	maybe building test harness
time: 0.006; rss: 148MB	maybe creating a macro crate
Post-expansion node count: 641571
time: 0.000; rss: 148MB	checking for inline asm in case the target doesn't support it
time: 0.013; rss: 148MB	complete gated feature checking
time: 0.023; rss: 148MB	early lint checks
time: 0.007; rss: 148MB	AST validation
time: 0.083; rss: 162MB	name resolution
time: 0.049; rss: 202MB	lowering ast -> hir
time: 0.009; rss: 212MB	indexing hir
time: 0.006; rss: 212MB	attribute checking
time: 0.006; rss: 161MB	language item collection
time: 0.012; rss: 161MB	lifetime resolution
time: 0.000; rss: 161MB	looking for entry point
time: 0.000; rss: 161MB	looking for plugin registrar
time: 0.044; rss: 173MB	region resolution
time: 0.006; rss: 173MB	loop checking
time: 0.006; rss: 173MB	static item recursion checking
time: 0.261; rss: 174MB	compute_incremental_hashes_map
time: 0.000; rss: 174MB	load_dep_graph
time: 0.079; rss: 176MB	type collecting
time: 0.001; rss: 176MB	variance inference
time: 0.038; rss: 179MB	coherence checking
time: 0.100; rss: 182MB	wf checking
time: 0.194; rss: 188MB	item-types checking
time: 3.942; rss: 240MB	item-bodies checking
time: 0.000; rss: 240MB	drop-impl checking
time: 0.311; rss: 240MB	const checking
time: 0.055; rss: 240MB	privacy checking
time: 0.007; rss: 240MB	stability index
time: 0.022; rss: 240MB	intrinsic checking
time: 0.019; rss: 240MB	effect checking
time: 0.057; rss: 240MB	match checking
time: 0.055; rss: 236MB	liveness checking
time: 0.283; rss: 236MB	rvalue checking
time: 0.425; rss: 426MB	MIR dump
  time: 0.057; rss: 428MB	SimplifyCfg
  time: 0.083; rss: 428MB	QualifyAndPromoteConstants
  time: 0.111; rss: 428MB	TypeckMir
  time: 0.004; rss: 428MB	SimplifyBranches
  time: 0.037; rss: 428MB	SimplifyCfg
time: 0.292; rss: 428MB	MIR passes
time: 0.691; rss: 428MB	borrow checking
time: 0.022; rss: 428MB	reachability checking
time: 0.045; rss: 428MB	death checking
time: 0.042; rss: 431MB	stability checking
time: 0.000; rss: 431MB	unused lib feature checking
time: 0.218; rss: 431MB	lint checking
time: 0.000; rss: 431MB	resolving dependency formats
  time: 0.003; rss: 431MB	NoLandingPads
  time: 0.028; rss: 431MB	SimplifyCfg
  time: 0.071; rss: 439MB	EraseRegions
  time: 0.011; rss: 439MB	AddCallGuards
  time: 1.048; rss: 457MB	ElaborateDrops
  time: 0.003; rss: 457MB	NoLandingPads
  time: 0.052; rss: 458MB	SimplifyCfg
  time: 0.029; rss: 458MB	InstCombine
  time: 0.012; rss: 458MB	Deaggregator
  time: 0.003; rss: 458MB	CopyPropagation
  time: 0.009; rss: 458MB	AddCallGuards
  time: 0.003; rss: 458MB	PreTrans
time: 1.273; rss: 458MB	Prepare MIR codegen passes
  time: 0.264; rss: 465MB	write metadata
  time: 0.469; rss: 475MB	translation item collection
  time: 0.068; rss: 479MB	codegen unit partitioning
  time: 0.058; rss: 726MB	internalize symbols
time: 5.169; rss: 604MB	translation
time: 0.000; rss: 604MB	assert dep graph
time: 0.000; rss: 604MB	serialize dep graph
incremental: re-using 0 out of 1 modules
  time: 0.523; rss: 413MB	llvm function passes [0]
  time: 0.245; rss: 421MB	llvm module passes [0]
  time: 10.105; rss: 422MB	codegen passes [0]
  time: 0.001; rss: 422MB	codegen passes [0]
time: 11.602; rss: 422MB	LLVM passes
time: 0.000; rss: 422MB	serialize work products
time: 0.655; rss: 107MB	linking
done
