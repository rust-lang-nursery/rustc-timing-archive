commit 9a7913786c2e1923e30faf7c6eb680546259653c
Merge: 5ba9402 5b224ec
Author: bors <bors@rust-lang.org>
Date:   Mon Feb 15 11:07:02 2016 +0000

    Auto merge of #31653 - tomaka:emscripten-abi, r=eddyb
    
    Needs a correct review because I'm not too confident with how this works.
    All tests related to the C ABI are now passing.
    
    References:
    - https://github.com/kripken/emscripten-fastcomp-clang/blob/dbe68fecd03d6f646bd075963c3cc0e7130e5767/lib/CodeGen/TargetInfo.cpp#L479-L489
    - https://github.com/kripken/emscripten-fastcomp-clang/blob/dbe68fecd03d6f646bd075963c3cc0e7130e5767/lib/CodeGen/TargetInfo.cpp#L466-L477
    
    The `classifyArgumentType` function has two different paths depending on `RAA == CGCXXABI::RAA_DirectInMemory`, but I don't really know what's the corresponding option in Rust.
    
    cc @brson @eddyb
rustc: ./piston-image-0.3.11
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling image v0.3.11 (file:///root/benchmarks/piston-image-0.3.11)
time: 0.046; rss: 49MB	parsing
Lines of code:             10676
Pre-expansion node count:  84646
time: 0.016; rss: 49MB	configuration 1
time: 0.000; rss: 49MB	recursion limit
time: 0.001; rss: 49MB	gated macro checking
time: 0.000; rss: 49MB	crate injection
time: 0.005; rss: 53MB	macro loading
time: 0.000; rss: 53MB	plugin loading
time: 0.000; rss: 53MB	plugin registration
time: 0.119; rss: 57MB	expansion
time: 0.003; rss: 57MB	complete gated feature checking 1
time: 0.026; rss: 57MB	configuration 2
time: 0.000; rss: 57MB	gated configuration checking
time: 0.013; rss: 57MB	maybe building test harness
time: 0.012; rss: 57MB	prelude injection
time: 0.001; rss: 57MB	checking that all macro invocations are gone
time: 0.000; rss: 57MB	checking for inline asm in case the target doesn't support it
time: 0.003; rss: 57MB	complete gated feature checking 2
time: 0.001; rss: 57MB	const fn bodies and arguments
Post-expansion node count: 144338
time: 0.012; rss: 57MB	assigning node ids
time: 0.019; rss: 68MB	lowering ast -> hir
time: 0.005; rss: 71MB	indexing hir
time: 0.000; rss: 71MB	attribute checking
time: 0.012; rss: 71MB	early lint checks
time: 0.003; rss: 63MB	external crate/lib resolution
time: 0.001; rss: 63MB	language item collection
time: 0.028; rss: 80MB	resolution
time: 0.002; rss: 80MB	lifetime resolution
time: 0.000; rss: 80MB	looking for entry point
time: 0.000; rss: 80MB	looking for plugin registrar
time: 0.010; rss: 87MB	region resolution
time: 0.001; rss: 87MB	loop checking
time: 0.001; rss: 87MB	static item recursion checking
time: 0.010; rss: 91MB	type collecting
time: 0.000; rss: 91MB	variance inference
time: 0.030; rss: 107MB	coherence checking
time: 0.148; rss: 110MB	wf checking
time: 0.047; rss: 113MB	item-types checking
time: 1.566; rss: 141MB	item-bodies checking
time: 0.000; rss: 141MB	drop-impl checking
time: 0.067; rss: 141MB	const checking
time: 0.012; rss: 141MB	privacy checking
time: 0.001; rss: 141MB	stability index
time: 0.009; rss: 141MB	intrinsic checking
time: 0.003; rss: 141MB	effect checking
time: 0.024; rss: 141MB	match checking
time: 0.093; rss: 151MB	MIR dump
time: 0.000; rss: 151MB	MIR passes
time: 0.011; rss: 151MB	liveness checking
time: 0.145; rss: 151MB	borrow checking
time: 0.072; rss: 151MB	rvalue checking
time: 0.003; rss: 151MB	reachability checking
time: 0.009; rss: 151MB	death checking
time: 0.009; rss: 153MB	stability checking
time: 0.000; rss: 153MB	unused lib feature checking
time: 0.083; rss: 153MB	lint checking
time: 0.000; rss: 153MB	resolving dependency formats
time: 0.008; rss: 153MB	erasing regions from MIR
  time: 1.219; rss: 173MB	translation item collection
  time: 0.213; rss: 259MB	write metadata
time: 3.540; rss: 259MB	translation
  time: 0.094; rss: 163MB	llvm function passes [0]
  time: 0.040; rss: 164MB	llvm module passes [0]
  time: 1.678; rss: 168MB	codegen passes [0]
  time: 0.001; rss: 119MB	codegen passes [0]
time: 2.000; rss: 118MB	LLVM passes
time: 0.151; rss: 118MB	linking
done
