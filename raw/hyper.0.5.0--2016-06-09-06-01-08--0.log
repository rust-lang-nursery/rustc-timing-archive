commit 24526cc3cc53cecb6e73275ae96b4e698b305931
Merge: dc77c5e 970e15d
Author: bors <bors@rust-lang.org>
Date:   Thu Jun 9 01:35:26 2016 -0700

    Auto merge of #34108 - jseyfried:refactor_prelude_injection, r=nrc
    
    Refactor away the prelude injection fold
    
    Instead, just inject `#[prelude_import] use [core|std]::prelude::v1::*;` at the crate root while injecting `extern crate [core|std];` and process `#[no_implicit_prelude]` attributes in `resolve`.
    
    r? @nrc
rustc: ./hyper.0.5.0
cargo rustc -- -Ztime-passes -Zinput-stats
    Updating registry `https://github.com/rust-lang/crates.io-index`
   Compiling bitflags v0.3.3
   Compiling winapi v0.2.7
   Compiling unicase v0.1.0
   Compiling rustc-serialize v0.3.19
   Compiling winapi-build v0.1.1
   Compiling pkg-config v0.3.8
   Compiling libc v0.2.11
   Compiling gcc v0.3.28
   Compiling libc v0.1.12
   Compiling traitobject v0.0.1
   Compiling httparse v0.1.6
   Compiling log v0.3.6
   Compiling typeable v0.1.2
   Compiling lazy_static v0.1.16
   Compiling matches v0.1.2
   Compiling kernel32-sys v0.2.2
   Compiling mime v0.0.11
   Compiling rand v0.3.14
   Compiling num_cpus v0.2.12
   Compiling time v0.1.35
   Compiling openssl-sys v0.6.7
   Compiling openssl v0.6.7
   Compiling uuid v0.1.18
   Compiling url v0.2.38
   Compiling cookie v0.1.21
   Compiling hyper v0.5.0 (file:///root/benchmarks/hyper.0.5.0)
time: 0.030; rss: 52MB	parsing
Lines of code:             9154
Pre-expansion node count:  44646
time: 0.005; rss: 52MB	configuration 1
time: 0.000; rss: 56MB	recursion limit
time: 0.000; rss: 56MB	crate injection
time: 0.000; rss: 56MB	plugin loading
time: 0.000; rss: 56MB	plugin registration
time: 0.268; rss: 103MB	expansion
time: 0.000; rss: 103MB	gated configuration checking
time: 0.012; rss: 101MB	maybe building test harness
time: 0.000; rss: 101MB	checking for inline asm in case the target doesn't support it
time: 0.003; rss: 101MB	complete gated feature checking
Post-expansion node count: 100536
time: 0.008; rss: 101MB	assigning node ids
time: 0.004; rss: 103MB	collecting defs
time: 0.011; rss: 114MB	external crate/lib resolution
time: 0.006; rss: 114MB	early lint checks
time: 0.001; rss: 114MB	AST validation
time: 0.026; rss: 120MB	name resolution
time: 0.011; rss: 124MB	lowering ast -> hir
time: 0.002; rss: 126MB	indexing hir
time: 0.002; rss: 126MB	attribute checking
time: 0.001; rss: 117MB	language item collection
time: 0.002; rss: 117MB	lifetime resolution
time: 0.000; rss: 117MB	looking for entry point
time: 0.000; rss: 117MB	looking for plugin registrar
time: 0.005; rss: 120MB	region resolution
time: 0.001; rss: 120MB	loop checking
time: 0.001; rss: 120MB	static item recursion checking
time: 0.000; rss: 120MB	load_dep_graph
time: 0.032; rss: 122MB	type collecting
time: 0.000; rss: 122MB	variance inference
time: 0.044; rss: 130MB	coherence checking
time: 0.094; rss: 131MB	wf checking
time: 0.035; rss: 131MB	item-types checking
time: 0.517; rss: 145MB	item-bodies checking
time: 0.000; rss: 145MB	drop-impl checking
time: 0.044; rss: 148MB	const checking
time: 0.007; rss: 148MB	privacy checking
time: 0.001; rss: 148MB	stability index
time: 0.006; rss: 148MB	intrinsic checking
time: 0.002; rss: 148MB	effect checking
time: 0.014; rss: 148MB	match checking
time: 0.005; rss: 148MB	liveness checking
time: 0.031; rss: 148MB	rvalue checking
time: 0.059; rss: 156MB	MIR dump
time: 0.043; rss: 156MB	MIR passes
time: 0.072; rss: 156MB	borrow checking
time: 0.003; rss: 156MB	reachability checking
time: 0.006; rss: 156MB	death checking
time: 0.006; rss: 156MB	stability checking
time: 0.000; rss: 156MB	unused lib feature checking
time: 0.048; rss: 156MB	lint checking
time: 0.000; rss: 156MB	resolving dependency formats
time: 0.092; rss: 158MB	Prepare MIR codegen passes
  time: 0.127; rss: 164MB	write metadata
  time: 0.178; rss: 169MB	translation item collection
  time: 0.007; rss: 169MB	codegen unit partitioning
time: 1.606; rss: 288MB	translation
time: 0.001; rss: 288MB	assert dep graph
time: 0.000; rss: 288MB	serialize dep graph
  time: 0.094; rss: 178MB	llvm function passes [0]
  time: 0.048; rss: 180MB	llvm module passes [0]
  time: 1.634; rss: 181MB	codegen passes [0]
  time: 0.001; rss: 134MB	codegen passes [0]
time: 1.976; rss: 134MB	LLVM passes
time: 0.171; rss: 131MB	linking
done
