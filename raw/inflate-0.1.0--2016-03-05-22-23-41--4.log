commit 45f0ce71c19d8da081714dc917f11a8cc02d15be
Merge: 52e0bda d908ff1
Author: bors <bors@rust-lang.org>
Date:   Sun Mar 6 02:29:34 2016 +0000

    Auto merge of #31920 - jseyfried:fix_spurious_privacy_error, r=nikomatsakis
    
    This PR allows using methods from traits that are visible but are defined in an inaccessible module (fixes #18241). For example,
    ```rust
    mod foo {
        pub use foo::bar::Tr;
        mod bar { // This module is inaccessible from `g`
            pub trait Tr { fn f(&self) {} }
        }
    }
    fn g<T: foo::Tr>(t: T) {
        t.f(); // Currently, this is a privacy error even though `foo::Tr` is visible
    }
    ```
    
    After this PR, it will continue to be a privacy error to use a method from a trait that is not visible. This can happen when a public trait inherits from a private trait (in violation of the `public_in_private` lint) -- see @petrochenkov's example in #28504.
    r? @nikomatsakis
rustc: ./inflate-0.1.0
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling inflate v0.1.0 (file:///root/benchmarks/inflate-0.1.0)
time: 0.004; rss: 38MB	parsing
Lines of code:             956
Pre-expansion node count:  4761
time: 0.001; rss: 38MB	configuration 1
time: 0.000; rss: 38MB	recursion limit
time: 0.000; rss: 38MB	gated macro checking
time: 0.000; rss: 38MB	crate injection
time: 0.003; rss: 41MB	macro loading
time: 0.000; rss: 41MB	plugin loading
time: 0.000; rss: 41MB	plugin registration
time: 0.079; rss: 49MB	expansion
time: 0.001; rss: 49MB	complete gated feature checking 1
time: 0.009; rss: 49MB	configuration 2
time: 0.000; rss: 49MB	gated configuration checking
time: 0.004; rss: 49MB	maybe building test harness
time: 0.004; rss: 49MB	prelude injection
time: 0.000; rss: 49MB	checking that all macro invocations are gone
time: 0.000; rss: 49MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 49MB	complete gated feature checking 2
time: 0.000; rss: 49MB	const fn bodies and arguments
Post-expansion node count: 54798
time: 0.004; rss: 49MB	assigning node ids
time: 0.008; rss: 53MB	lowering ast -> hir
time: 0.002; rss: 55MB	indexing hir
time: 0.001; rss: 55MB	attribute checking
time: 0.004; rss: 55MB	early lint checks
time: 0.001; rss: 53MB	external crate/lib resolution
time: 0.001; rss: 53MB	language item collection
time: 0.008; rss: 58MB	resolution
time: 0.000; rss: 58MB	lifetime resolution
time: 0.000; rss: 58MB	looking for entry point
time: 0.000; rss: 58MB	looking for plugin registrar
time: 0.003; rss: 61MB	region resolution
time: 0.000; rss: 61MB	loop checking
time: 0.000; rss: 61MB	static item recursion checking
time: 0.001; rss: 62MB	type collecting
time: 0.000; rss: 62MB	variance inference
time: 0.009; rss: 75MB	coherence checking
time: 0.002; rss: 75MB	wf checking
time: 0.002; rss: 75MB	item-types checking
time: 2.493; rss: 98MB	item-bodies checking
time: 0.000; rss: 98MB	drop-impl checking
time: 0.012; rss: 99MB	const checking
time: 0.002; rss: 99MB	privacy checking
time: 0.000; rss: 99MB	stability index
time: 0.000; rss: 99MB	intrinsic checking
time: 0.000; rss: 99MB	effect checking
time: 0.003; rss: 99MB	match checking
time: 0.065; rss: 98MB	liveness checking
time: 0.009; rss: 98MB	rvalue checking
time: 0.036; rss: 109MB	MIR dump
time: 0.000; rss: 109MB	MIR passes
time: 0.201; rss: 110MB	borrow checking
time: 0.000; rss: 110MB	reachability checking
time: 0.003; rss: 110MB	death checking
time: 0.002; rss: 110MB	stability checking
time: 0.000; rss: 110MB	unused lib feature checking
time: 0.016; rss: 110MB	lint checking
time: 0.000; rss: 110MB	resolving dependency formats
time: 0.002; rss: 110MB	erasing regions from MIR
  time: 0.012; rss: 121MB	translation item collection
  time: 0.003; rss: 136MB	write metadata
time: 0.365; rss: 131MB	translation
  time: 0.025; rss: 99MB	llvm function passes [0]
  time: 0.005; rss: 100MB	llvm module passes [0]
  time: 0.485; rss: 104MB	codegen passes [0]
  time: 0.000; rss: 92MB	codegen passes [0]
time: 0.558; rss: 92MB	LLVM passes
time: 0.034; rss: 93MB	linking
done
