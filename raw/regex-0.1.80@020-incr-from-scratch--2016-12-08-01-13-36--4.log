commit d9aae6362d566497d55a94da060ec163cd874a41
Merge: 7b06438 8e9f7f5
Author: bors <bors@rust-lang.org>
Date:   Thu Dec 8 03:03:51 2016 +0000

    Auto merge of #38076 - alexcrichton:another-rustbuild-bug, r=japaric
    
    rustbuild: Use src/rustc for assembled compilers
    
    The `src/rustc` path is intended for assembling a compiler (e.g. the bare bones)
    not actually compiling the whole compiler itself. This path was accidentally
    getting hijacked to represent the whole compiler being compiled, so let's
    redirect that elsewhere for that particular cargo project.
    
    Closes #38039
rustc: ./regex-0.1.80@020-incr-from-scratch@020-incr-from-scratch
find . -name "*.rs" | xargs touch
RUSTFLAGS="""" cargo rustc  -- \
  -Ztime-passes -Zinput-stats -Z incremental-info
time: 0.024; rss: 50MB	parsing
Lines of code:             10689
Pre-expansion node count:  55396
time: 0.000; rss: 50MB	recursion limit
time: 0.000; rss: 50MB	crate injection
time: 0.000; rss: 50MB	plugin loading
time: 0.000; rss: 50MB	plugin registration
time: 0.043; rss: 82MB	expansion
time: 0.000; rss: 82MB	maybe building test harness
time: 0.001; rss: 82MB	maybe creating a macro crate
Post-expansion node count: 86869
time: 0.000; rss: 82MB	checking for inline asm in case the target doesn't support it
time: 0.001; rss: 82MB	complete gated feature checking
time: 0.003; rss: 82MB	early lint checks
time: 0.001; rss: 82MB	AST validation
time: 0.010; rss: 84MB	name resolution
time: 0.008; rss: 88MB	lowering ast -> hir
time: 0.001; rss: 90MB	indexing hir
time: 0.001; rss: 90MB	attribute checking
time: 0.000; rss: 85MB	language item collection
time: 0.001; rss: 85MB	lifetime resolution
time: 0.000; rss: 85MB	looking for entry point
time: 0.000; rss: 85MB	looking for plugin registrar
time: 0.005; rss: 89MB	region resolution
time: 0.001; rss: 89MB	loop checking
time: 0.000; rss: 89MB	static item recursion checking
time: 0.034; rss: 89MB	compute_incremental_hashes_map
time: 0.000; rss: 89MB	load_dep_graph
time: 0.001; rss: 89MB	stability index
time: 0.002; rss: 89MB	stability checking
time: 0.010; rss: 91MB	type collecting
time: 0.000; rss: 91MB	variance inference
time: 0.000; rss: 91MB	impl wf inference
time: 0.012; rss: 93MB	coherence checking
time: 0.020; rss: 94MB	wf checking
time: 0.114; rss: 98MB	item-types checking
time: 0.285; rss: 105MB	item-bodies checking
time: 0.000; rss: 105MB	drop-impl checking
time: 0.038; rss: 134MB	const checking
time: 0.006; rss: 134MB	privacy checking
time: 0.002; rss: 134MB	intrinsic checking
time: 0.001; rss: 134MB	effect checking
time: 0.005; rss: 134MB	match checking
time: 0.004; rss: 134MB	liveness checking
time: 0.015; rss: 134MB	rvalue checking
time: 0.042; rss: 156MB	MIR dump
  time: 0.006; rss: 156MB	SimplifyCfg
  time: 0.009; rss: 156MB	QualifyAndPromoteConstants
  time: 0.012; rss: 156MB	TypeckMir
  time: 0.000; rss: 156MB	SimplifyBranches
  time: 0.003; rss: 156MB	SimplifyCfg
time: 0.030; rss: 156MB	MIR cleanup and validation
time: 0.044; rss: 157MB	borrow checking
time: 0.001; rss: 157MB	reachability checking
time: 0.004; rss: 157MB	death checking
time: 0.000; rss: 157MB	unused lib feature checking
time: 0.028; rss: 157MB	lint checking
time: 0.000; rss: 157MB	resolving dependency formats
  time: 0.000; rss: 157MB	NoLandingPads
  time: 0.003; rss: 157MB	SimplifyCfg
  time: 0.007; rss: 157MB	EraseRegions
  time: 0.001; rss: 157MB	AddCallGuards
  time: 0.017; rss: 160MB	ElaborateDrops
  time: 0.000; rss: 160MB	NoLandingPads
  time: 0.004; rss: 160MB	SimplifyCfg
  time: 0.003; rss: 160MB	InstCombine
  time: 0.002; rss: 160MB	Deaggregator
  time: 0.000; rss: 160MB	CopyPropagation
  time: 0.004; rss: 160MB	SimplifyLocals
  time: 0.001; rss: 160MB	AddCallGuards
  time: 0.000; rss: 160MB	PreTrans
time: 0.042; rss: 160MB	MIR optimisations
  time: 0.008; rss: 162MB	write metadata
  time: 0.085; rss: 167MB	translation item collection
  time: 0.013; rss: 171MB	codegen unit partitioning
  time: 0.012; rss: 226MB	internalize symbols
time: 0.894; rss: 226MB	translation
time: 0.000; rss: 226MB	assert dep graph
time: 0.000; rss: 226MB	serialize dep graph
incremental: re-using 0 out of 1 modules
  time: 0.087; rss: 144MB	llvm function passes [0]
  time: 0.436; rss: 179MB	llvm module passes [0]
  time: 2.537; rss: 179MB	codegen passes [0]
  time: 0.000; rss: 179MB	codegen passes [0]
time: 3.352; rss: 179MB	LLVM passes
time: 0.000; rss: 179MB	serialize work products
time: 0.119; rss: 95MB	linking
done
