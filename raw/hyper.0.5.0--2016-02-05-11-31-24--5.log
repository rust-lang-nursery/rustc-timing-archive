commit 98422e8c156d9cf343c93da30f71d9a4cabda25f
Merge: 38dfb96 45e716e
Author: bors <bors@rust-lang.org>
Date:   Fri Feb 5 15:11:45 2016 +0000

    Auto merge of #31400 - durka:civilized-deriving, r=alexcrichton
    
    You can `#[derive(FromPrimitive)]`, but it [fails later in the compile](https://play.rust-lang.org/?gist=82cb8ad2fac49e3fe472&version=stable) due to hardcoding `std::num::FromPrimitive` which [was removed](https://github.com/rust-lang/rust/commit/eeb94886adccb3f13003f92f117115d17846ce1f) (for some reason Github doesn't show `FromPrimitive` in the diff, but `git show` does).
    
    Anyway, this PR removes the code. I didn't mark it as a breaking change, even though [this extremely contrived code using highly unstable features](https://play.rust-lang.org/?gist=1e1b1bbff962837b228a&version=nightly) is broken by it -- should I?
rustc: ./hyper.0.5.0
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling hyper v0.5.0 (file:///root/benchmarks/hyper.0.5.0)
time: 0.032; rss: 43MB	parsing
Lines of code:             9154
Pre-expansion node count:  45594
time: 0.010; rss: 43MB	configuration 1
time: 0.000; rss: 43MB	recursion limit
time: 0.000; rss: 43MB	gated macro checking
time: 0.000; rss: 43MB	crate injection
time: 0.004; rss: 48MB	macro loading
time: 0.000; rss: 48MB	plugin loading
time: 0.000; rss: 48MB	plugin registration
time: 0.201; rss: 57MB	expansion
time: 0.005; rss: 57MB	complete gated feature checking 1
time: 0.036; rss: 57MB	configuration 2
time: 0.000; rss: 57MB	gated configuration checking
time: 0.014; rss: 57MB	maybe building test harness
time: 0.011; rss: 57MB	prelude injection
time: 0.001; rss: 57MB	checking that all macro invocations are gone
time: 0.000; rss: 57MB	checking for inline asm in case the target doesn't support it
time: 0.002; rss: 57MB	complete gated feature checking 2
Post-expansion node count: 109258
time: 0.010; rss: 57MB	assigning node ids
time: 0.011; rss: 62MB	lowering ast -> hir
time: 0.005; rss: 66MB	indexing hir
time: 0.000; rss: 66MB	attribute checking
time: 0.005; rss: 66MB	early lint checks
time: 0.003; rss: 62MB	external crate/lib resolution
time: 0.001; rss: 62MB	language item collection
time: 0.028; rss: 80MB	resolution
time: 0.002; rss: 80MB	lifetime resolution
time: 0.000; rss: 80MB	looking for entry point
time: 0.000; rss: 80MB	looking for plugin registrar
time: 0.006; rss: 83MB	region resolution
time: 0.001; rss: 83MB	loop checking
time: 0.001; rss: 83MB	static item recursion checking
time: 0.014; rss: 88MB	type collecting
time: 0.000; rss: 88MB	variance inference
time: 0.038; rss: 106MB	coherence checking
time: 0.069; rss: 108MB	wf checking
time: 0.026; rss: 108MB	item-types checking
time: 0.519; rss: 132MB	item-bodies checking
time: 0.000; rss: 132MB	drop-impl checking
time: 0.042; rss: 133MB	const checking
time: 0.008; rss: 133MB	privacy checking
time: 0.001; rss: 133MB	stability index
time: 0.004; rss: 133MB	intrinsic checking
time: 0.002; rss: 133MB	effect checking
time: 0.013; rss: 133MB	match checking
time: 0.050; rss: 137MB	MIR dump
time: 0.006; rss: 137MB	liveness checking
time: 0.069; rss: 137MB	borrow checking
time: 0.035; rss: 137MB	rvalue checking
time: 0.003; rss: 137MB	reachability checking
time: 0.005; rss: 137MB	death checking
time: 0.006; rss: 137MB	stability checking
time: 0.000; rss: 137MB	unused lib feature checking
time: 0.047; rss: 137MB	lint checking
time: 0.000; rss: 137MB	resolving dependency formats
time: 0.007; rss: 137MB	erasing regions from MIR
  time: 0.135; rss: 272MB	write metadata
time: 1.440; rss: 272MB	translation
  time: 0.100; rss: 169MB	llvm function passes [0]
  time: 0.049; rss: 169MB	llvm module passes [0]
  time: 1.670; rss: 214MB	codegen passes [0]
  time: 0.001; rss: 177MB	codegen passes [0]
time: 2.038; rss: 177MB	LLVM passes
time: 0.171; rss: 175MB	linking
done
