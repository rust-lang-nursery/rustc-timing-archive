commit 8b00355119ba0473eae420049f96f5be91be1bab
Merge: bba3fca afa72b5
Author: bors <bors@rust-lang.org>
Date:   Fri Sep 30 19:00:36 2016 -0700

    Auto merge of #36339 - brson:emscripten-new, r=alexcrichton
    
    Working asmjs and wasm targets
    
    This patch set results in a working standard library for the asmjs-unknown-emscripten and wasm32-unknown-emscripten targets. It is based on the work of @badboy and @rschulman.
    
    It does a few things:
    
    - Updates LLVM with the emscripten [fastcomp](https://github.com/rust-lang/llvm/pull/50) patches, which include the pnacl IR legalizer and the asm.js backend. This patch is thought not to have any significant effect on existing targets.
    - Teaches rustbuild to correctly link C code with emscripten
    - Updates gcc-rs to work correctly with emscripten
    - Teaches rustbuild to run crate tests for emscripten with node
    - Modifies Thread::new to return an error on emscripten, to facilitate debugging a common failure mode
    - Modifies libtest to run in single-threaded mode for emscripten
    - Ignores a host of tests that don't work yet, mostly dealing with threads and I/O
    - Updates libc with wasm32 definitions (presently the same as asmjs)
    - Adds a wasm32-unknown-emscripten target that feeds the output of LLVM's asmjs backend through emcc to generate wasm
    
    Notes and caveats:
    
    - This is only known to work with `--enable-rustbuild`.
    - The wasm32 target can't be tested correctly yet because of issues in compiletest and limitations in node https://github.com/kripken/emscripten/issues/4542, but hello.rs does seem to work when run on node via the binaryen interpreter
    - This requires an up to date installation of the emscripten sdk from its incoming branch
    - Unwinding is very broken
    - When enabling the emscripten targets jemalloc is disabled for all targets, which results in test failures for the host
    
    Next steps are to fix the jemalloc issue, start building the two emscripten targets on the auto builders, then start producing nightlies.
    
    https://github.com/rust-lang/rust/issues/36317 tracks work on this.
    
    Fixes https://github.com/rust-lang/rust/issues/36515
    Fixes https://github.com/rust-lang/rust/issues/36515
    Fixes https://github.com/rust-lang/rust/issues/36356
rustc: ./syntex-0.42.2-incr-clean
RUSTFLAGS="-Z incremental=incr" \
    cargo rustc -p syntex_syntax -- -Ztime-passes -Zinput-stats -Z incremental-info
   Compiling syntex_syntax v0.42.0
time: 0.107; rss: 76MB	parsing
Lines of code:             33687
Pre-expansion node count:  224033
time: 0.000; rss: 76MB	recursion limit
time: 0.000; rss: 76MB	crate injection
time: 0.000; rss: 76MB	plugin loading
time: 0.000; rss: 76MB	plugin registration
time: 0.271; rss: 146MB	expansion
time: 0.000; rss: 146MB	maybe building test harness
time: 0.006; rss: 146MB	maybe creating a macro crate
Post-expansion node count: 641571
time: 0.000; rss: 146MB	checking for inline asm in case the target doesn't support it
time: 0.013; rss: 146MB	complete gated feature checking
time: 0.023; rss: 146MB	early lint checks
time: 0.007; rss: 146MB	AST validation
time: 0.084; rss: 161MB	name resolution
time: 0.050; rss: 203MB	lowering ast -> hir
time: 0.009; rss: 211MB	indexing hir
time: 0.006; rss: 211MB	attribute checking
time: 0.006; rss: 162MB	language item collection
time: 0.012; rss: 162MB	lifetime resolution
time: 0.000; rss: 162MB	looking for entry point
time: 0.000; rss: 162MB	looking for plugin registrar
time: 0.045; rss: 173MB	region resolution
time: 0.006; rss: 173MB	loop checking
time: 0.006; rss: 173MB	static item recursion checking
time: 0.296; rss: 174MB	compute_incremental_hashes_map
time: 0.000; rss: 174MB	load_dep_graph
time: 0.081; rss: 175MB	type collecting
time: 0.001; rss: 175MB	variance inference
time: 0.039; rss: 178MB	coherence checking
time: 0.104; rss: 180MB	wf checking
time: 0.201; rss: 185MB	item-types checking
time: 3.968; rss: 243MB	item-bodies checking
time: 0.000; rss: 243MB	drop-impl checking
time: 0.321; rss: 244MB	const checking
time: 0.056; rss: 244MB	privacy checking
time: 0.007; rss: 244MB	stability index
time: 0.022; rss: 244MB	intrinsic checking
time: 0.019; rss: 245MB	effect checking
time: 0.058; rss: 245MB	match checking
time: 0.056; rss: 239MB	liveness checking
time: 0.291; rss: 239MB	rvalue checking
time: 0.417; rss: 427MB	MIR dump
  time: 0.058; rss: 430MB	SimplifyCfg
  time: 0.084; rss: 430MB	QualifyAndPromoteConstants
  time: 0.111; rss: 430MB	TypeckMir
  time: 0.005; rss: 430MB	SimplifyBranches
  time: 0.038; rss: 430MB	SimplifyCfg
time: 0.296; rss: 430MB	MIR passes
time: 0.701; rss: 430MB	borrow checking
time: 0.018; rss: 430MB	reachability checking
time: 0.045; rss: 430MB	death checking
time: 0.042; rss: 430MB	stability checking
time: 0.000; rss: 430MB	unused lib feature checking
time: 0.220; rss: 430MB	lint checking
time: 0.000; rss: 430MB	resolving dependency formats
  time: 0.004; rss: 430MB	NoLandingPads
  time: 0.028; rss: 430MB	SimplifyCfg
  time: 0.073; rss: 443MB	EraseRegions
  time: 0.011; rss: 443MB	AddCallGuards
  time: 1.100; rss: 460MB	ElaborateDrops
  time: 0.003; rss: 460MB	NoLandingPads
  time: 0.053; rss: 460MB	SimplifyCfg
  time: 0.030; rss: 460MB	InstCombine
  time: 0.013; rss: 460MB	Deaggregator
  time: 0.003; rss: 460MB	CopyPropagation
  time: 0.009; rss: 460MB	AddCallGuards
  time: 0.003; rss: 460MB	PreTrans
time: 1.331; rss: 460MB	Prepare MIR codegen passes
  time: 0.264; rss: 465MB	write metadata
  time: 0.482; rss: 476MB	translation item collection
  time: 0.067; rss: 480MB	codegen unit partitioning
  time: 0.058; rss: 729MB	internalize symbols
time: 5.262; rss: 607MB	translation
time: 0.000; rss: 607MB	assert dep graph
time: 0.000; rss: 607MB	serialize dep graph
incremental: re-using 0 out of 1 modules
  time: 0.513; rss: 417MB	llvm function passes [0]
  time: 0.246; rss: 423MB	llvm module passes [0]
  time: 10.136; rss: 416MB	codegen passes [0]
  time: 0.001; rss: 418MB	codegen passes [0]
time: 11.652; rss: 418MB	LLVM passes
time: 0.000; rss: 418MB	serialize work products
time: 0.657; rss: 108MB	linking
done
