commit 29abe6f9e86829d55ba180a5957f203a64a96b65
Merge: 696fab8 4be7786
Author: bors <bors@rust-lang.org>
Date:   Thu Nov 24 00:26:44 2016 -0600

    Auto merge of #37890 - eddyb:rustdoc-1, r=nrc
    
    rustdoc: separate test collection from the main "clean"-ing pipeline.
    
    While reusing the documentation "clean"-ing infrastructure for collecting code examples to test may have seemed appealing at some point, doing the same through a HIR visitor is barely any harder.
    At the same time, supporting both "regular documentation" and "test collection" modes in `rustdoc::clean` has its cost, requiring any use of a `TyCtxt` to be speculative, and provide some sort of fallback.
    
    This simplification is the first step towards bringing rustdoc closer to the compiler, and perhaps even unifying the "local crate" (based on the HIR AST) and "inlinined across crates" (based on crate metadata and typesystem information) implementations of rustdoc.
    
    Sadly, not all possible changes to rustdoc will be uncontroversial, so I'm starting small with this patch.
rustc: ./syntex-0.42.2-incr-clean
RUSTFLAGS="-Z incremental=incr" \
    cargo rustc -p syntex_syntax  -- \
    -Ztime-passes -Zinput-stats -Z incremental-info
   Compiling syntex_syntax v0.42.0
time: 0.091; rss: 71MB	parsing
Lines of code:             33687
Pre-expansion node count:  223115
time: 0.000; rss: 71MB	recursion limit
time: 0.000; rss: 71MB	crate injection
time: 0.000; rss: 71MB	plugin loading
time: 0.000; rss: 71MB	plugin registration
time: 0.240; rss: 144MB	expansion
time: 0.000; rss: 144MB	maybe building test harness
time: 0.006; rss: 144MB	maybe creating a macro crate
Post-expansion node count: 638863
time: 0.000; rss: 144MB	checking for inline asm in case the target doesn't support it
time: 0.012; rss: 144MB	complete gated feature checking
time: 0.022; rss: 144MB	early lint checks
time: 0.007; rss: 144MB	AST validation
time: 0.076; rss: 159MB	name resolution
time: 0.044; rss: 184MB	lowering ast -> hir
time: 0.008; rss: 194MB	indexing hir
time: 0.006; rss: 194MB	attribute checking
time: 0.004; rss: 150MB	language item collection
time: 0.010; rss: 150MB	lifetime resolution
time: 0.000; rss: 150MB	looking for entry point
time: 0.000; rss: 150MB	looking for plugin registrar
time: 0.041; rss: 170MB	region resolution
time: 0.005; rss: 170MB	loop checking
time: 0.004; rss: 170MB	static item recursion checking
time: 0.328; rss: 171MB	compute_incremental_hashes_map
time: 0.000; rss: 171MB	load_dep_graph
time: 0.045; rss: 175MB	type collecting
time: 0.001; rss: 175MB	variance inference
time: 0.002; rss: 175MB	impl wf inference
time: 0.018; rss: 177MB	coherence checking
time: 0.088; rss: 179MB	wf checking
time: 0.179; rss: 182MB	item-types checking
time: 6.184; rss: 232MB	item-bodies checking
time: 0.000; rss: 232MB	drop-impl checking
time: 0.214; rss: 253MB	const checking
time: 0.047; rss: 254MB	privacy checking
time: 0.006; rss: 254MB	stability index
time: 0.017; rss: 254MB	intrinsic checking
time: 0.014; rss: 254MB	effect checking
time: 0.046; rss: 254MB	match checking
time: 0.048; rss: 254MB	liveness checking
time: 0.177; rss: 254MB	rvalue checking
time: 0.359; rss: 436MB	MIR dump
  time: 0.057; rss: 438MB	SimplifyCfg
  time: 0.071; rss: 438MB	QualifyAndPromoteConstants
  time: 0.103; rss: 438MB	TypeckMir
  time: 0.004; rss: 438MB	SimplifyBranches
  time: 0.030; rss: 438MB	SimplifyCfg
time: 0.265; rss: 438MB	MIR cleanup and validation
time: 0.544; rss: 438MB	borrow checking
time: 0.025; rss: 438MB	reachability checking
time: 0.038; rss: 438MB	death checking
time: 0.030; rss: 440MB	stability checking
time: 0.000; rss: 440MB	unused lib feature checking
time: 0.195; rss: 440MB	lint checking
time: 0.000; rss: 440MB	resolving dependency formats
  time: 0.003; rss: 440MB	NoLandingPads
  time: 0.026; rss: 440MB	SimplifyCfg
  time: 0.062; rss: 449MB	EraseRegions
  time: 0.011; rss: 449MB	AddCallGuards
  time: 0.270; rss: 463MB	ElaborateDrops
  time: 0.003; rss: 463MB	NoLandingPads
  time: 0.051; rss: 463MB	SimplifyCfg
  time: 0.028; rss: 463MB	InstCombine
  time: 0.012; rss: 463MB	Deaggregator
  time: 0.002; rss: 463MB	CopyPropagation
  time: 0.034; rss: 463MB	SimplifyLocals
  time: 0.009; rss: 463MB	AddCallGuards
  time: 0.002; rss: 463MB	PreTrans
time: 0.513; rss: 463MB	MIR optimisations
  time: 0.061; rss: 474MB	write metadata
  time: 0.377; rss: 488MB	translation item collection
  time: 0.058; rss: 496MB	codegen unit partitioning
  time: 0.040; rss: 739MB	internalize symbols
time: 4.377; rss: 739MB	translation
time: 0.000; rss: 739MB	assert dep graph
time: 0.000; rss: 739MB	serialize dep graph
incremental: re-using 0 out of 1 modules
  time: 0.522; rss: 427MB	llvm function passes [0]
  time: 0.248; rss: 434MB	llvm module passes [0]
  time: 10.387; rss: 425MB	codegen passes [0]
  time: 0.000; rss: 425MB	codegen passes [0]
time: 11.910; rss: 425MB	LLVM passes
time: 0.000; rss: 425MB	serialize work products
time: 0.335; rss: 116MB	linking
done
