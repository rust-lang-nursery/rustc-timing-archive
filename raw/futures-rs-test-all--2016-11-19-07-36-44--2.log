commit aa97dafe018de235b544b13e5beceba1b5d0593b
Merge: 2f4368b 4fc02f6
Author: bors <bors@rust-lang.org>
Date:   Sat Nov 19 01:49:07 2016 -0800

    Auto merge of #37797 - arielb1:inline-closure, r=michaelwoerister
    
    instantiate closures on demand
    
    this should fix compilation with `-C codegen-units=4` - tested locally
    with `RUSTFLAGS='-C codegen-units=4' ../x.py test`
    
    r? @michaelwoerister
rustc: ./futures-rs-test-all
cargo rustc --test all  -- -Ztime-passes -Zinput-stats
   Compiling futures v0.1.0 (file:///root/benchmarks/futures-rs-test-all)
time: 0.002; rss: 43MB	parsing
Lines of code:             412
Pre-expansion node count:  5286
time: 0.000; rss: 43MB	recursion limit
time: 0.000; rss: 43MB	crate injection
time: 0.000; rss: 43MB	plugin loading
time: 0.000; rss: 43MB	plugin registration
time: 0.019; rss: 69MB	expansion
time: 0.001; rss: 69MB	maybe building test harness
time: 0.000; rss: 69MB	maybe creating a macro crate
Post-expansion node count: 10387
time: 0.000; rss: 69MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 69MB	complete gated feature checking
time: 0.000; rss: 69MB	early lint checks
time: 0.000; rss: 69MB	AST validation
time: 0.003; rss: 69MB	name resolution
time: 0.000; rss: 69MB	lowering ast -> hir
time: 0.000; rss: 69MB	indexing hir
time: 0.000; rss: 69MB	attribute checking
time: 0.000; rss: 69MB	language item collection
time: 0.000; rss: 69MB	lifetime resolution
time: 0.000; rss: 69MB	looking for entry point
time: 0.000; rss: 69MB	looking for plugin registrar
time: 0.000; rss: 69MB	region resolution
time: 0.000; rss: 69MB	loop checking
time: 0.000; rss: 69MB	static item recursion checking
time: 0.003; rss: 69MB	compute_incremental_hashes_map
time: 0.000; rss: 69MB	load_dep_graph
time: 0.004; rss: 73MB	type collecting
time: 0.000; rss: 73MB	variance inference
time: 0.000; rss: 73MB	impl wf inference
time: 0.003; rss: 73MB	coherence checking
time: 0.007; rss: 76MB	wf checking
time: 0.002; rss: 76MB	item-types checking
time: 0.105; rss: 80MB	item-bodies checking
time: 0.000; rss: 80MB	drop-impl checking
time: 0.003; rss: 79MB	const checking
time: 0.000; rss: 79MB	privacy checking
time: 0.000; rss: 79MB	stability index
time: 0.000; rss: 79MB	intrinsic checking
time: 0.000; rss: 79MB	effect checking
time: 0.001; rss: 79MB	match checking
time: 0.001; rss: 79MB	liveness checking
time: 0.002; rss: 79MB	rvalue checking
time: 0.006; rss: 81MB	MIR dump
  time: 0.001; rss: 81MB	SimplifyCfg
  time: 0.001; rss: 81MB	QualifyAndPromoteConstants
  time: 0.002; rss: 81MB	TypeckMir
  time: 0.000; rss: 81MB	SimplifyBranches
  time: 0.000; rss: 81MB	SimplifyCfg
time: 0.005; rss: 81MB	MIR cleanup and validation
time: 0.006; rss: 84MB	borrow checking
time: 0.000; rss: 84MB	reachability checking
time: 0.000; rss: 84MB	death checking
time: 0.000; rss: 84MB	stability checking
time: 0.000; rss: 84MB	unused lib feature checking
time: 0.003; rss: 84MB	lint checking
time: 0.001; rss: 84MB	resolving dependency formats
  time: 0.000; rss: 84MB	NoLandingPads
  time: 0.001; rss: 84MB	SimplifyCfg
  time: 0.001; rss: 84MB	EraseRegions
  time: 0.000; rss: 84MB	AddCallGuards
  time: 0.005; rss: 84MB	ElaborateDrops
  time: 0.000; rss: 84MB	NoLandingPads
  time: 0.001; rss: 84MB	SimplifyCfg
  time: 0.000; rss: 84MB	InstCombine
  time: 0.000; rss: 84MB	Deaggregator
  time: 0.000; rss: 84MB	CopyPropagation
  time: 0.000; rss: 84MB	SimplifyLocals
  time: 0.000; rss: 84MB	AddCallGuards
  time: 0.000; rss: 84MB	PreTrans
time: 0.008; rss: 84MB	MIR optimisations
  time: 0.000; rss: 84MB	write metadata
  time: 0.141; rss: 92MB	translation item collection
  time: 0.019; rss: 94MB	codegen unit partitioning
  time: 0.018; rss: 148MB	internalize symbols
time: 1.070; rss: 148MB	translation
time: 0.000; rss: 148MB	assert dep graph
time: 0.000; rss: 148MB	serialize dep graph
  time: 0.084; rss: 137MB	llvm function passes [0]
  time: 0.027; rss: 138MB	llvm module passes [0]
  time: 1.841; rss: 140MB	codegen passes [0]
  time: 0.000; rss: 140MB	codegen passes [0]
time: 1.954; rss: 140MB	LLVM passes
time: 0.000; rss: 140MB	serialize work products
  time: 0.163; rss: 84MB	running linker
time: 0.475; rss: 84MB	linking
done
