commit 08839965f96ea9947afe936f13a66a0f4f93db73
Merge: e96b9d2 d73c68c
Author: bors <bors@rust-lang.org>
Date:   Sat Nov 5 01:10:57 2016 -0700

    Auto merge of #37427 - nnethercote:opt-IchHasher, r=michaelwoerister
    
    Reduce the number of bytes hashed by IchHasher.
    
    IchHasher uses blake2b hashing, which is expensive, so the fewer bytes hashed
    the better. There are two big ways to reduce the number of bytes hashed.
    - Filenames in spans account for ~66% of all bytes (for builds with debuginfo).
      The vast majority of spans have the same filename for the start of the span
      and the end of the span, so hashing the filename just once in those cases is
      a big win.
    - u32 and u64 and usize values account for ~25%--33% of all bytes (for builds
      with debuginfo). The vast majority of these are small, i.e. fit in a u8, so
      shrinking them down before hashing is also a big win.
    
    This PR implements these two optimizations. I'm certain the first one is safe.
    I'm about 90% sure that the second one is safe.
    
    Here are measurements of the number of bytes hashed when doing
    debuginfo-enabled builds of stdlib and
    rustc-benchmarks/syntex-0.42.2-incr-clean.
    
    ```
                        stdlib   syntex-incr
                        ------   -----------
    original       156,781,386   255,095,596
    half-SawSpan   106,744,403   176,345,419
    short-ints      45,890,534   118,014,227
    no-SawSpan[*]    6,831,874    45,875,714
    
    [*] don't hash the SawSpan at all. Not part of this PR, just implemented for
        comparison's sake.
    ```
    
    For debug builds of syntex-0.42.2-incr-clean, the two changes give a 1--2%
    speed-up.
rustc: ./syntex-0.42.2
cargo rustc -p syntex_syntax -- -Ztime-passes -Zinput-stats
   Compiling log v0.3.6
   Compiling winapi v0.2.8
   Compiling rustc-serialize v0.3.19
   Compiling winapi-build v0.1.1
   Compiling libc v0.2.15
   Compiling bitflags v0.5.0
   Compiling unicode-xid v0.0.3
   Compiling kernel32-sys v0.2.2
   Compiling term v0.4.4
   Compiling syntex_pos v0.42.0
   Compiling syntex_errors v0.42.0
   Compiling syntex_syntax v0.42.0
time: 0.110; rss: 75MB	parsing
Lines of code:             33687
Pre-expansion node count:  224033
time: 0.000; rss: 75MB	recursion limit
time: 0.000; rss: 75MB	crate injection
time: 0.000; rss: 75MB	plugin loading
time: 0.000; rss: 75MB	plugin registration
time: 0.272; rss: 148MB	expansion
time: 0.000; rss: 148MB	maybe building test harness
time: 0.007; rss: 148MB	maybe creating a macro crate
Post-expansion node count: 641571
time: 0.000; rss: 148MB	checking for inline asm in case the target doesn't support it
time: 0.015; rss: 148MB	complete gated feature checking
time: 0.026; rss: 148MB	early lint checks
time: 0.009; rss: 148MB	AST validation
time: 0.091; rss: 162MB	name resolution
time: 0.053; rss: 192MB	lowering ast -> hir
time: 0.010; rss: 200MB	indexing hir
time: 0.007; rss: 200MB	attribute checking
time: 0.005; rss: 155MB	language item collection
time: 0.012; rss: 155MB	lifetime resolution
time: 0.000; rss: 155MB	looking for entry point
time: 0.000; rss: 155MB	looking for plugin registrar
time: 0.048; rss: 165MB	region resolution
time: 0.006; rss: 165MB	loop checking
time: 0.006; rss: 165MB	static item recursion checking
time: 0.334; rss: 166MB	compute_incremental_hashes_map
time: 0.000; rss: 166MB	load_dep_graph
time: 0.042; rss: 172MB	type collecting
time: 0.001; rss: 172MB	variance inference
time: 0.036; rss: 179MB	coherence checking
time: 0.098; rss: 182MB	wf checking
time: 0.195; rss: 188MB	item-types checking
time: 3.644; rss: 234MB	item-bodies checking
time: 0.000; rss: 234MB	drop-impl checking
time: 0.244; rss: 237MB	const checking
time: 0.048; rss: 237MB	privacy checking
time: 0.006; rss: 237MB	stability index
time: 0.020; rss: 237MB	intrinsic checking
time: 0.016; rss: 237MB	effect checking
time: 0.050; rss: 237MB	match checking
time: 0.053; rss: 229MB	liveness checking
time: 0.212; rss: 229MB	rvalue checking
time: 0.403; rss: 421MB	MIR dump
  time: 0.056; rss: 422MB	SimplifyCfg
  time: 0.078; rss: 422MB	QualifyAndPromoteConstants
  time: 0.108; rss: 422MB	TypeckMir
  time: 0.004; rss: 422MB	SimplifyBranches
  time: 0.030; rss: 422MB	SimplifyCfg
time: 0.277; rss: 422MB	MIR cleanup and validation
time: 0.543; rss: 423MB	borrow checking
time: 0.021; rss: 423MB	reachability checking
time: 0.041; rss: 423MB	death checking
time: 0.040; rss: 425MB	stability checking
time: 0.000; rss: 425MB	unused lib feature checking
time: 0.217; rss: 425MB	lint checking
time: 0.000; rss: 425MB	resolving dependency formats
  time: 0.003; rss: 425MB	NoLandingPads
  time: 0.026; rss: 425MB	SimplifyCfg
  time: 0.068; rss: 431MB	EraseRegions
  time: 0.011; rss: 431MB	AddCallGuards
  time: 0.284; rss: 450MB	ElaborateDrops
  time: 0.003; rss: 450MB	NoLandingPads
  time: 0.052; rss: 450MB	SimplifyCfg
  time: 0.030; rss: 450MB	InstCombine
  time: 0.013; rss: 450MB	Deaggregator
  time: 0.002; rss: 450MB	CopyPropagation
  time: 0.034; rss: 450MB	SimplifyLocals
  time: 0.010; rss: 450MB	AddCallGuards
  time: 0.003; rss: 450MB	PreTrans
time: 0.539; rss: 450MB	MIR optimisations
  time: 0.062; rss: 458MB	write metadata
  time: 0.423; rss: 470MB	translation item collection
  time: 0.056; rss: 481MB	codegen unit partitioning
  time: 0.046; rss: 728MB	internalize symbols
time: 4.780; rss: 728MB	translation
time: 0.000; rss: 728MB	assert dep graph
time: 0.000; rss: 728MB	serialize dep graph
  time: 0.538; rss: 419MB	llvm function passes [0]
  time: 0.262; rss: 428MB	llvm module passes [0]
  time: 10.564; rss: 430MB	codegen passes [0]
  time: 0.000; rss: 430MB	codegen passes [0]
time: 12.137; rss: 430MB	LLVM passes
time: 0.000; rss: 430MB	serialize work products
time: 0.342; rss: 105MB	linking
done
