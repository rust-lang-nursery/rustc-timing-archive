commit 908dba0c9477b7dd022a236cb1514ddfca9369f2
Merge: 149e76f 85dc08e
Author: bors <bors@rust-lang.org>
Date:   Thu Dec 1 15:21:11 2016 +0000

    Auto merge of #38048 - rkruppe:llvm-stringref-fixes, r=alexcrichton
    
    [LLVM 4.0] Don't assume llvm::StringRef is null terminated
    
    StringRefs have a length and their contents are not usually null-terminated. The solution is to either copy the string data (in `rustc_llvm::diagnostic`) or take the size into account (in LLVMRustPrintPasses).
    
    I couldn't trigger a bug caused by this (apparently all the strings returned in practice are actually null-terminated) but this is more correct and more future-proof.
    
    cc #37609
rustc: ./issue-32062-equality-relations-complexity
cargo rustc  -- -Ztime-passes -Zinput-stats
time: 0.000; rss: 41MB	parsing
Lines of code:             60
Pre-expansion node count:  580
time: 0.000; rss: 41MB	recursion limit
time: 0.000; rss: 41MB	crate injection
time: 0.000; rss: 41MB	plugin loading
time: 0.000; rss: 41MB	plugin registration
time: 0.013; rss: 62MB	expansion
time: 0.000; rss: 62MB	maybe building test harness
time: 0.000; rss: 62MB	maybe creating a macro crate
Post-expansion node count: 593
time: 0.000; rss: 62MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 62MB	complete gated feature checking
time: 0.000; rss: 62MB	early lint checks
time: 0.000; rss: 62MB	AST validation
time: 0.002; rss: 62MB	name resolution
time: 0.000; rss: 62MB	lowering ast -> hir
time: 0.000; rss: 62MB	indexing hir
time: 0.000; rss: 62MB	attribute checking
time: 0.000; rss: 62MB	language item collection
time: 0.000; rss: 62MB	lifetime resolution
time: 0.000; rss: 66MB	looking for entry point
time: 0.000; rss: 66MB	looking for plugin registrar
time: 0.000; rss: 66MB	region resolution
time: 0.000; rss: 66MB	loop checking
time: 0.000; rss: 66MB	static item recursion checking
time: 0.000; rss: 66MB	compute_incremental_hashes_map
time: 0.000; rss: 66MB	load_dep_graph
time: 0.000; rss: 66MB	stability index
time: 0.000; rss: 66MB	stability checking
time: 0.000; rss: 66MB	type collecting
time: 0.000; rss: 66MB	variance inference
time: 0.000; rss: 66MB	impl wf inference
time: 0.004; rss: 66MB	coherence checking
time: 0.003; rss: 71MB	wf checking
time: 0.000; rss: 71MB	item-types checking
time: 0.011; rss: 71MB	item-bodies checking
time: 0.000; rss: 71MB	drop-impl checking
time: 0.000; rss: 71MB	const checking
time: 0.000; rss: 71MB	privacy checking
time: 0.000; rss: 71MB	intrinsic checking
time: 0.000; rss: 71MB	effect checking
time: 0.000; rss: 71MB	match checking
time: 0.000; rss: 71MB	liveness checking
time: 0.000; rss: 71MB	rvalue checking
time: 0.000; rss: 71MB	MIR dump
  time: 0.000; rss: 71MB	SimplifyCfg
  time: 0.000; rss: 71MB	QualifyAndPromoteConstants
  time: 0.000; rss: 71MB	TypeckMir
  time: 0.000; rss: 71MB	SimplifyBranches
  time: 0.000; rss: 71MB	SimplifyCfg
time: 0.000; rss: 71MB	MIR cleanup and validation
time: 0.001; rss: 71MB	borrow checking
time: 0.000; rss: 71MB	reachability checking
time: 0.000; rss: 71MB	death checking
time: 0.000; rss: 71MB	unused lib feature checking
time: 0.000; rss: 71MB	lint checking
time: 0.001; rss: 71MB	resolving dependency formats
  time: 0.000; rss: 71MB	NoLandingPads
  time: 0.000; rss: 71MB	SimplifyCfg
  time: 0.000; rss: 71MB	EraseRegions
  time: 0.000; rss: 71MB	AddCallGuards
  time: 0.001; rss: 71MB	ElaborateDrops
  time: 0.000; rss: 71MB	NoLandingPads
  time: 0.000; rss: 71MB	SimplifyCfg
  time: 0.000; rss: 71MB	InstCombine
  time: 0.000; rss: 71MB	Deaggregator
  time: 0.000; rss: 71MB	CopyPropagation
  time: 0.000; rss: 71MB	SimplifyLocals
  time: 0.000; rss: 71MB	AddCallGuards
  time: 0.000; rss: 71MB	PreTrans
time: 0.001; rss: 71MB	MIR optimisations
  time: 0.000; rss: 71MB	write metadata
  time: 0.012; rss: 71MB	translation item collection
  time: 0.000; rss: 71MB	codegen unit partitioning
  time: 0.000; rss: 71MB	internalize symbols
time: 0.029; rss: 71MB	translation
time: 0.000; rss: 71MB	assert dep graph
time: 0.000; rss: 71MB	serialize dep graph
  time: 0.000; rss: 71MB	llvm function passes [0]
  time: 0.000; rss: 71MB	llvm module passes [0]
  time: 0.010; rss: 78MB	codegen passes [0]
  time: 0.000; rss: 78MB	codegen passes [0]
time: 0.012; rss: 78MB	LLVM passes
time: 0.000; rss: 78MB	serialize work products
  time: 0.071; rss: 78MB	running linker
time: 0.071; rss: 78MB	linking
done
