commit 62690b3c3fa6e157daa7f7c5a3af005f37eb4199
Merge: 7588653 ede39ae
Author: bors <bors@rust-lang.org>
Date:   Thu Jul 21 16:19:54 2016 -0700

    Auto merge of #34544 - 3Hren:issue/xx/reinterpret-format-precision-for-strings, r=alexcrichton
    
    feat: reinterpret `precision` field for strings
    
    This commit changes the behavior of formatting string arguments with both width and precision fields set.
    
    Documentation says that the `width` field is the "minimum width" that the format should take up. If the value's string does not fill up this many characters, then the padding specified by fill/alignment will be used to take up the required space.
    
    This is true for all formatted types except string, which is truncated down to `precision` number of chars and then all of `fill`, `align` and `width` fields are completely ignored.
    
    For example: `format!("{:/^10.8}", "1234567890);` emits "12345678". In the contrast Python version works as the expected:
    ```python
    >>> '{:/^10.8}'.format('1234567890')
    '/12345678/'
    ```
    
    This commit gives back the `Python` behavior by changing the `precision` field meaning to the truncation and nothing more. The result string *will* be prepended/appended up to the `width` field with the proper `fill` char.
    
    __However, this is the breaking change, I admit.__ Feel free to close it, but otherwise it should be mentioned in the `std::fmt` documentation somewhere near of `fill/align/width` fields description.
rustc: ./regex-macros.0.1.30
cd regex_macros && cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling regex_macros v0.1.17 (file:///root/benchmarks/regex-macros.0.1.30/regex_macros)
time: 0.002; rss: 82MB	parsing
Lines of code:             639
Pre-expansion node count:  2088
time: 0.000; rss: 86MB	configuration
time: 0.000; rss: 86MB	recursion limit
time: 0.000; rss: 86MB	crate injection
time: 0.000; rss: 86MB	plugin loading
time: 0.000; rss: 86MB	plugin registration
time: 0.042; rss: 126MB	expansion
time: 0.000; rss: 126MB	maybe building test harness
time: 0.005; rss: 126MB	assigning node ids
Post-expansion node count: 69587
time: 0.000; rss: 126MB	checking for inline asm in case the target doesn't support it
time: 0.001; rss: 126MB	complete gated feature checking
time: 0.000; rss: 126MB	collecting defs
time: 0.107; rss: 225MB	external crate/lib resolution
time: 0.003; rss: 225MB	early lint checks
time: 0.000; rss: 225MB	AST validation
time: 0.022; rss: 231MB	name resolution
time: 0.004; rss: 235MB	lowering ast -> hir
time: 0.001; rss: 235MB	indexing hir
time: 0.000; rss: 235MB	attribute checking
time: 0.001; rss: 229MB	language item collection
time: 0.001; rss: 229MB	lifetime resolution
time: 0.000; rss: 229MB	looking for entry point
time: 0.000; rss: 229MB	looking for plugin registrar
time: 0.003; rss: 231MB	region resolution
time: 0.000; rss: 231MB	loop checking
time: 0.000; rss: 231MB	static item recursion checking
time: 0.000; rss: 231MB	load_dep_graph
time: 0.013; rss: 233MB	type collecting
time: 0.000; rss: 233MB	variance inference
time: 0.011; rss: 234MB	coherence checking
time: 0.008; rss: 236MB	wf checking
time: 0.001; rss: 236MB	item-types checking
time: 0.897; rss: 253MB	item-bodies checking
makefile:2: recipe for target 'all' failed
done
