commit 088d4178522d4e9464c6beac70b14724670ee735
Merge: dd0ef17 0eeb14e
Author: bors <bors@rust-lang.org>
Date:   Sat May 14 22:04:58 2016 -0700

    Auto merge of #33593 - dotdash:smart_derive, r=brson
    
    Improve derived implementations for enums with lots of fieldless variants
    
    A number of trait methods like PartialEq::eq or Hash::hash don't
    actually need a distinct arm for each variant, because the code within
    the arm only depends on the number and types of the fields in the
    variants. We can easily exploit this fact to create less and better
    code for enums with multiple variants that have no fields at all, the
    extreme case being C-like enums.
    
    For nickel.rs and its by now infamous 800 variant enum, this reduces
    optimized compile times by 25% and non-optimized compile times by 40%.
    Also peak memory usage is down by almost 40% (310MB down to 190MB).
    
    To be fair, most other crates don't benefit nearly as much, because
    they don't have as huge enums. The crates in the Rust distribution that
    I measured saw basically no change in compile times (I only tried
    optimized builds) and only 1-2% reduction in peak memory usage.
rustc: ./jld-day15-parser
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling day15 v0.1.0 (file:///root/benchmarks/jld-day15-parser)
time: 0.001; rss: 45MB	parsing
Lines of code:             72
Pre-expansion node count:  673
time: 0.000; rss: 45MB	configuration 1
time: 0.000; rss: 45MB	recursion limit
time: 0.000; rss: 45MB	crate injection
time: 0.003; rss: 51MB	macro loading
time: 0.000; rss: 51MB	plugin loading
time: 0.000; rss: 51MB	plugin registration
time: 0.002; rss: 51MB	expansion
time: 0.000; rss: 51MB	configuration 2
time: 0.000; rss: 51MB	gated configuration checking
time: 0.000; rss: 51MB	maybe building test harness
time: 0.000; rss: 51MB	prelude injection
time: 0.000; rss: 51MB	checking that all macro invocations are gone
time: 0.000; rss: 51MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 51MB	complete gated feature checking
Post-expansion node count: 1176
time: 0.000; rss: 51MB	assigning node ids
time: 0.000; rss: 51MB	collecting defs
time: 0.004; rss: 55MB	external crate/lib resolution
time: 0.000; rss: 55MB	early lint checks
time: 0.001; rss: 59MB	name resolution
time: 0.000; rss: 59MB	lowering ast -> hir
time: 0.000; rss: 59MB	indexing hir
time: 0.000; rss: 59MB	attribute checking
time: 0.000; rss: 59MB	language item collection
time: 0.000; rss: 59MB	lifetime resolution
time: 0.000; rss: 59MB	looking for entry point
time: 0.000; rss: 59MB	looking for plugin registrar
time: 0.000; rss: 59MB	region resolution
time: 0.000; rss: 59MB	loop checking
time: 0.000; rss: 59MB	static item recursion checking
time: 0.000; rss: 64MB	load_dep_graph
time: 0.001; rss: 64MB	type collecting
time: 0.000; rss: 64MB	variance inference
time: 0.005; rss: 73MB	coherence checking
time: 0.007; rss: 77MB	wf checking
time: 0.000; rss: 77MB	item-types checking
time: 1.581; rss: 114MB	item-bodies checking
time: 0.000; rss: 114MB	drop-impl checking
time: 0.001; rss: 114MB	const checking
time: 0.000; rss: 114MB	privacy checking
time: 0.000; rss: 114MB	stability index
time: 0.000; rss: 114MB	intrinsic checking
time: 0.000; rss: 114MB	effect checking
time: 0.000; rss: 114MB	match checking
time: 0.000; rss: 114MB	liveness checking
time: 0.000; rss: 114MB	rvalue checking
time: 0.001; rss: 115MB	MIR dump
time: 0.001; rss: 115MB	MIR passes
time: 0.001; rss: 115MB	borrow checking
time: 0.000; rss: 115MB	reachability checking
time: 0.000; rss: 115MB	death checking
time: 0.000; rss: 115MB	stability checking
time: 0.000; rss: 115MB	unused lib feature checking
time: 0.004; rss: 116MB	lint checking
time: 0.002; rss: 116MB	resolving dependency formats
time: 0.000; rss: 116MB	Prepare MIR codegen passes
  time: 14.600; rss: 127MB	translation item collection
  time: 0.000; rss: 127MB	codegen unit partitioning
  time: 0.000; rss: 152MB	write metadata
time: 47.676; rss: 152MB	translation
time: 0.000; rss: 152MB	assert dep graph
time: 0.000; rss: 152MB	serialize dep graph
  time: 0.014; rss: 107MB	llvm function passes [0]
  time: 0.001; rss: 107MB	llvm module passes [0]
  time: 0.274; rss: 112MB	codegen passes [0]
  time: 0.000; rss: 106MB	codegen passes [0]
time: 0.298; rss: 106MB	LLVM passes
  time: 0.123; rss: 106MB	running linker
time: 0.124; rss: 106MB	linking
done
