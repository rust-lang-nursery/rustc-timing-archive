commit 3029e0918de00162932132a7972e566f3a3372f5
Merge: 07a1803 b3572ae
Author: bors <bors@rust-lang.org>
Date:   Sat Mar 5 20:11:37 2016 +0000

    Auto merge of #31726 - jseyfried:improve_import_resolution, r=nikomatsakis
    
    This PR improves the import resolution algorithm.
    
    First, it records that an import succeeded or failed for one namespace (by calling `decrement_outstanding_references_for` and `try_define_child` if successful) even if it is still indeterminate in the other namespace, fixing #31444.
    
    Second, it starts importing bindings from globs as soon as the glob path is determined.
    It maintains links from imported modules to their importers so that when a resolution becomes successful in an imported module, a corresponding binding will be added to the importer module.
    It also maintains links from importer modules to imported modules so that we can determine if an undefined name is indeterminate or failing by recursively checking this in the imported modules.
    This allows, for example:
    ```rust
    mod foo {
        pub mod baz {}
        pub use bar::baz::*;
    }
    
    mod bar {
        pub use foo::*;
    }
    ```
    It also allows cycles of pub glob imports, although by to the current shadowing rules, the only way for such a cycle to compile is if each participating module defines no names. Incidentally, this PR lays the groundwork for more permissive feature-gated shadowing rules.
    
    Finally, this PR encapsulates almost all implementation details of import resolution in `resolve_imports` (some of which used to be in `lib.rs`) and refactors reexport recording, shadowed trait collecting, some duplicate checking, and the `private_in_public` lint out of the core import resolution algorithm and into a post-processing pass in `resolve_imports`.
    
    r? @nrc
rustc: ./regex.0.1.30
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling regex v0.1.30 (file:///root/benchmarks/regex.0.1.30)
time: 0.060; rss: 49MB	parsing
Lines of code:             8558
Pre-expansion node count:  58217
time: 0.011; rss: 49MB	configuration 1
time: 0.000; rss: 49MB	recursion limit
time: 0.001; rss: 49MB	gated macro checking
time: 0.000; rss: 49MB	crate injection
time: 0.003; rss: 53MB	macro loading
time: 0.000; rss: 53MB	plugin loading
time: 0.000; rss: 53MB	plugin registration
time: 0.061; rss: 55MB	expansion
time: 0.001; rss: 55MB	complete gated feature checking 1
time: 0.013; rss: 55MB	configuration 2
time: 0.000; rss: 55MB	gated configuration checking
time: 0.006; rss: 55MB	maybe building test harness
time: 0.006; rss: 55MB	prelude injection
time: 0.001; rss: 55MB	checking that all macro invocations are gone
time: 0.000; rss: 55MB	checking for inline asm in case the target doesn't support it
time: 0.001; rss: 55MB	complete gated feature checking 2
time: 0.001; rss: 55MB	const fn bodies and arguments
Post-expansion node count: 68657
time: 0.006; rss: 55MB	assigning node ids
time: 0.008; rss: 63MB	lowering ast -> hir
time: 0.002; rss: 66MB	indexing hir
time: 0.001; rss: 66MB	attribute checking
time: 0.007; rss: 66MB	early lint checks
time: 0.001; rss: 57MB	external crate/lib resolution
time: 0.001; rss: 57MB	language item collection
time: 0.008; rss: 65MB	resolution
time: 0.001; rss: 65MB	lifetime resolution
time: 0.000; rss: 65MB	looking for entry point
time: 0.000; rss: 65MB	looking for plugin registrar
time: 0.005; rss: 67MB	region resolution
time: 0.001; rss: 67MB	loop checking
time: 0.001; rss: 67MB	static item recursion checking
time: 0.003; rss: 70MB	type collecting
time: 0.000; rss: 70MB	variance inference
time: 0.022; rss: 88MB	coherence checking
time: 0.010; rss: 88MB	wf checking
time: 0.078; rss: 93MB	item-types checking
time: 0.180; rss: 106MB	item-bodies checking
time: 0.000; rss: 106MB	drop-impl checking
time: 0.023; rss: 106MB	const checking
time: 0.004; rss: 106MB	privacy checking
time: 0.000; rss: 106MB	stability index
time: 0.001; rss: 106MB	intrinsic checking
time: 0.001; rss: 106MB	effect checking
time: 0.003; rss: 106MB	match checking
time: 0.002; rss: 106MB	liveness checking
time: 0.006; rss: 106MB	rvalue checking
time: 0.019; rss: 107MB	MIR dump
time: 0.000; rss: 107MB	MIR passes
time: 0.019; rss: 107MB	borrow checking
time: 0.000; rss: 107MB	reachability checking
time: 0.002; rss: 107MB	death checking
time: 0.002; rss: 107MB	stability checking
time: 0.000; rss: 107MB	unused lib feature checking
time: 0.028; rss: 107MB	lint checking
time: 0.000; rss: 107MB	resolving dependency formats
time: 0.002; rss: 109MB	erasing regions from MIR
  time: 0.055; rss: 123MB	translation item collection
  time: 0.131; rss: 167MB	write metadata
time: 0.566; rss: 167MB	translation
  time: 0.035; rss: 117MB	llvm function passes [0]
  time: 0.017; rss: 118MB	llvm module passes [0]
  time: 0.603; rss: 122MB	codegen passes [0]
  time: 0.001; rss: 103MB	codegen passes [0]
time: 0.729; rss: 101MB	LLVM passes
time: 0.064; rss: 100MB	linking
done
