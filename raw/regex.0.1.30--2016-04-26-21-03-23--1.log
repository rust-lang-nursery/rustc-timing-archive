commit 8f552181895921a377ab8c235340ea3d80ec7fc0
Merge: 897199a 9249e6a
Author: bors <bors@rust-lang.org>
Date:   Tue Apr 26 14:54:37 2016 -0700

    Auto merge of #31414 - durka:clone-copy, r=alexcrichton
    
    special-case #[derive(Copy, Clone)] with a shallow clone
    
    If a type is Copy then its Clone implementation can be a no-op. Currently `#[derive(Clone)]` generates a deep clone anyway. This can lead to lots of code bloat.
    
    This PR detects the case where Copy and Clone are both being derived (the general case of "is this type Copy" can't be determined by a syntax extension) and generates the shallow Clone impl. Right now this can only be done if there are no type parameters (see https://github.com/rust-lang/rust/issues/31085#issuecomment-178988663), but this restriction can be removed after specialization.
    
    Fixes #31085.
rustc: ./regex.0.1.30
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling regex v0.1.30 (file:///root/benchmarks/regex.0.1.30)
time: 0.082; rss: 61MB	parsing
Lines of code:             8558
Pre-expansion node count:  58217
time: 0.011; rss: 61MB	configuration 1
time: 0.000; rss: 61MB	recursion limit
time: 0.001; rss: 61MB	gated macro checking
time: 0.000; rss: 61MB	crate injection
time: 0.003; rss: 66MB	macro loading
time: 0.000; rss: 66MB	plugin loading
time: 0.000; rss: 66MB	plugin registration
time: 0.057; rss: 68MB	expansion
time: 0.001; rss: 68MB	complete gated feature checking 1
time: 0.012; rss: 68MB	configuration 2
time: 0.000; rss: 68MB	gated configuration checking
time: 0.006; rss: 68MB	maybe building test harness
time: 0.006; rss: 68MB	prelude injection
time: 0.000; rss: 68MB	checking that all macro invocations are gone
time: 0.000; rss: 68MB	checking for inline asm in case the target doesn't support it
time: 0.001; rss: 68MB	complete gated feature checking 2
time: 0.001; rss: 68MB	const fn bodies and arguments
Post-expansion node count: 68491
time: 0.006; rss: 68MB	assigning node ids
time: 0.001; rss: 68MB	collecting defs
time: 0.001; rss: 68MB	external crate/lib resolution
time: 0.009; rss: 77MB	lowering ast -> hir
time: 0.004; rss: 78MB	indexing hir
time: 0.001; rss: 78MB	attribute checking
time: 0.006; rss: 78MB	early lint checks
time: 0.001; rss: 72MB	language item collection
time: 0.009; rss: 82MB	name resolution
time: 0.001; rss: 82MB	lifetime resolution
time: 0.000; rss: 82MB	looking for entry point
time: 0.000; rss: 82MB	looking for plugin registrar
time: 0.012; rss: 85MB	region resolution
time: 0.001; rss: 85MB	loop checking
time: 0.001; rss: 85MB	static item recursion checking
time: 0.000; rss: 85MB	load_dep_graph
time: 0.007; rss: 95MB	type collecting
time: 0.000; rss: 95MB	variance inference
time: 0.024; rss: 105MB	coherence checking
time: 0.010; rss: 106MB	wf checking
time: 0.268; rss: 111MB	item-types checking
time: 0.209; rss: 122MB	item-bodies checking
time: 0.000; rss: 122MB	drop-impl checking
time: 0.026; rss: 123MB	const checking
time: 0.004; rss: 123MB	privacy checking
time: 0.001; rss: 123MB	stability index
time: 0.001; rss: 123MB	intrinsic checking
time: 0.001; rss: 123MB	effect checking
time: 0.003; rss: 123MB	match checking
time: 0.002; rss: 123MB	liveness checking
time: 0.007; rss: 123MB	rvalue checking
time: 0.016; rss: 126MB	MIR dump
time: 0.007; rss: 126MB	MIR passes
time: 0.019; rss: 126MB	borrow checking
time: 0.000; rss: 126MB	reachability checking
time: 0.003; rss: 126MB	death checking
time: 0.002; rss: 126MB	stability checking
time: 0.000; rss: 126MB	unused lib feature checking
time: 0.027; rss: 126MB	lint checking
time: 0.000; rss: 126MB	resolving dependency formats
time: 0.003; rss: 127MB	Prepare MIR codegen passes
  time: 0.071; rss: 136MB	translation item collection
  time: 0.001; rss: 136MB	codegen unit partitioning
  time: 0.139; rss: 184MB	write metadata
time: 0.725; rss: 184MB	translation
time: 0.000; rss: 184MB	assert dep graph
time: 0.000; rss: 184MB	serialize dep graph
  time: 0.037; rss: 123MB	llvm function passes [0]
  time: 0.017; rss: 124MB	llvm module passes [0]
  time: 0.609; rss: 129MB	codegen passes [0]
  time: 0.001; rss: 111MB	codegen passes [0]
time: 0.735; rss: 110MB	LLVM passes
time: 0.066; rss: 108MB	linking
done
