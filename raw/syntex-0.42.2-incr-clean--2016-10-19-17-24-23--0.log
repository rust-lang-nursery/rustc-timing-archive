commit d337f345ca8b3bb4aac988ace1c0676abc5310a0
Merge: cfc9b51 83b1982
Author: bors <bors@rust-lang.org>
Date:   Wed Oct 19 09:52:48 2016 -0700

    Auto merge of #37220 - Mark-Simulacrum:arena-alloc-slice, r=eddyb
    
    alloc_slice in TypedArena
    
    Added `TypedArena::alloc_slice`, and moved from using `TypedArena<Vec<T>>` to `TypedArena<T>`.
    
    `TypedArena::alloc_slice` is implemented by copying the slices elements into the typed arena, requiring that `T: Copy` when using it. We allocate a new chunk when there's insufficient space remaining in the previous chunk, and we cannot resize the old chunk in place. This is non-optimal, since we may waste allocated space when allocating (especially longer) slices, but is considered good enough for the time being.
    
    This change also reduces heap fragmentation, since the arena now directly stores objects instead of storing the Vec's length and pointer to its contents.
    
    Performance:
    ```
    futures-rs-test  5.048s vs  5.061s --> 0.997x faster (variance: 1.028x, 1.020x)
    helloworld       0.284s vs  0.295s --> 0.963x faster (variance: 1.207x, 1.189x)
    html5ever-2016-  8.396s vs  8.208s --> 1.023x faster (variance: 1.019x, 1.036x)
    hyper.0.5.0      5.768s vs  5.797s --> 0.995x faster (variance: 1.027x, 1.028x)
    inflate-0.1.0    5.213s vs  5.069s --> 1.028x faster (variance: 1.008x, 1.022x)
    issue-32062-equ  0.428s vs  0.467s --> 0.916x faster (variance: 1.188x, 1.015x)
    issue-32278-big  1.949s vs  2.010s --> 0.970x faster (variance: 1.112x, 1.049x)
    jld-day15-parse  1.795s vs  1.877s --> 0.956x faster (variance: 1.037x, 1.015x)
    piston-image-0. 13.554s vs 13.522s --> 1.002x faster (variance: 1.019x, 1.020x)
    rust-encoding-0  2.489s vs  2.465s --> 1.010x faster (variance: 1.047x, 1.086x)
    syntex-0.42.2   34.646s vs 34.593s --> 1.002x faster (variance: 1.007x, 1.005x)
    syntex-0.42.2-i 17.181s vs 17.163s --> 1.001x faster (variance: 1.004x, 1.004x)
    ```
    
    r? @eddyb
rustc: ./syntex-0.42.2-incr-clean
RUSTFLAGS="-Z incremental=incr" \
    cargo rustc -p syntex_syntax -- -Ztime-passes -Zinput-stats -Z incremental-info
   Compiling winapi v0.2.8
   Compiling log v0.3.6
   Compiling libc v0.2.15
   Compiling winapi-build v0.1.1
   Compiling unicode-xid v0.0.3
   Compiling rustc-serialize v0.3.19
   Compiling bitflags v0.5.0
   Compiling kernel32-sys v0.2.2
   Compiling term v0.4.4
   Compiling syntex_pos v0.42.0
   Compiling syntex_errors v0.42.0
   Compiling syntex_syntax v0.42.0
time: 0.108; rss: 75MB	parsing
Lines of code:             33687
Pre-expansion node count:  224033
time: 0.000; rss: 75MB	recursion limit
time: 0.000; rss: 75MB	crate injection
time: 0.000; rss: 75MB	plugin loading
time: 0.000; rss: 75MB	plugin registration
time: 0.267; rss: 148MB	expansion
time: 0.000; rss: 148MB	maybe building test harness
time: 0.006; rss: 148MB	maybe creating a macro crate
Post-expansion node count: 641571
time: 0.000; rss: 148MB	checking for inline asm in case the target doesn't support it
time: 0.013; rss: 148MB	complete gated feature checking
time: 0.022; rss: 148MB	early lint checks
time: 0.007; rss: 148MB	AST validation
time: 0.087; rss: 163MB	name resolution
time: 0.049; rss: 202MB	lowering ast -> hir
time: 0.009; rss: 213MB	indexing hir
time: 0.006; rss: 213MB	attribute checking
time: 0.006; rss: 165MB	language item collection
time: 0.011; rss: 165MB	lifetime resolution
time: 0.000; rss: 165MB	looking for entry point
time: 0.000; rss: 165MB	looking for plugin registrar
time: 0.043; rss: 175MB	region resolution
time: 0.006; rss: 175MB	loop checking
time: 0.006; rss: 175MB	static item recursion checking
time: 0.525; rss: 175MB	compute_incremental_hashes_map
time: 0.000; rss: 175MB	load_dep_graph
time: 0.042; rss: 181MB	type collecting
time: 0.001; rss: 181MB	variance inference
time: 0.035; rss: 184MB	coherence checking
time: 0.097; rss: 187MB	wf checking
time: 0.188; rss: 193MB	item-types checking
time: 3.868; rss: 245MB	item-bodies checking
time: 0.000; rss: 245MB	drop-impl checking
time: 0.249; rss: 249MB	const checking
time: 0.052; rss: 249MB	privacy checking
time: 0.007; rss: 249MB	stability index
time: 0.021; rss: 249MB	intrinsic checking
time: 0.018; rss: 249MB	effect checking
time: 0.055; rss: 249MB	match checking
time: 0.052; rss: 240MB	liveness checking
time: 0.211; rss: 240MB	rvalue checking
time: 0.402; rss: 428MB	MIR dump
  time: 0.057; rss: 431MB	SimplifyCfg
  time: 0.079; rss: 431MB	QualifyAndPromoteConstants
  time: 0.108; rss: 431MB	TypeckMir
  time: 0.004; rss: 431MB	SimplifyBranches
  time: 0.031; rss: 431MB	SimplifyCfg
time: 0.279; rss: 431MB	MIR passes
time: 0.556; rss: 431MB	borrow checking
time: 0.018; rss: 431MB	reachability checking
time: 0.043; rss: 431MB	death checking
time: 0.040; rss: 431MB	stability checking
time: 0.000; rss: 431MB	unused lib feature checking
time: 0.214; rss: 432MB	lint checking
time: 0.000; rss: 432MB	resolving dependency formats
  time: 0.003; rss: 432MB	NoLandingPads
  time: 0.026; rss: 432MB	SimplifyCfg
  time: 0.069; rss: 440MB	EraseRegions
  time: 0.011; rss: 440MB	AddCallGuards
  time: 0.286; rss: 461MB	ElaborateDrops
  time: 0.003; rss: 461MB	NoLandingPads
  time: 0.054; rss: 460MB	SimplifyCfg
  time: 0.031; rss: 459MB	InstCombine
  time: 0.011; rss: 459MB	Deaggregator
  time: 0.003; rss: 459MB	CopyPropagation
  time: 0.009; rss: 459MB	AddCallGuards
  time: 0.002; rss: 459MB	PreTrans
time: 0.508; rss: 459MB	Prepare MIR codegen passes
  time: 0.060; rss: 466MB	write metadata
  time: 0.409; rss: 474MB	translation item collection
  time: 0.056; rss: 486MB	codegen unit partitioning
  time: 0.047; rss: 728MB	internalize symbols
time: 4.875; rss: 607MB	translation
time: 0.000; rss: 607MB	assert dep graph
time: 0.000; rss: 607MB	serialize dep graph
incremental: re-using 0 out of 1 modules
  time: 0.513; rss: 406MB	llvm function passes [0]
  time: 0.244; rss: 413MB	llvm module passes [0]
  time: 9.953; rss: 410MB	codegen passes [0]
  time: 0.000; rss: 410MB	codegen passes [0]
time: 11.487; rss: 410MB	LLVM passes
time: 0.000; rss: 410MB	serialize work products
time: 0.693; rss: 105MB	linking
done
