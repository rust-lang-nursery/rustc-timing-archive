commit 8694b4ffe9b223c351e50c10bd8ea4e23af58baa
Merge: dde35e7 8128817
Author: bors <bors@rust-lang.org>
Date:   Fri Apr 8 03:20:11 2016 -0700

    Auto merge of #32695 - sfackler:default-buf-size, r=alexcrichton
    
    Drop the default buffer size to 8K
    
    The 64k capacity was picked by me a couple of years ago in the initial
    implementation of buffered IO adaptors:
    https://github.com/rust-lang/rust/pull/9091/files#diff-b131eeef531ad098b32f49695a031008R62.
    64K was picked for symmetry with libuv, which we no longer use.
    
    64K is *way* larger than the default size of any other language that I
    can find. C, C++, and Java default to 8K, and Go defaults to 4K. There
    have been a variety of issues filed relating to this such as #31885.
    
    Closes #31885
rustc: ./issue-32062-equality-relations-complexity
/root/rust/x86_64-unknown-linux-gnu/stage2/bin/rustc issue-32062.rs -Ztime-passes -Zinput-stats
time: 0.001; rss: 35MB	parsing
Lines of code:             60
Pre-expansion node count:  586
time: 0.000; rss: 39MB	configuration 1
time: 0.000; rss: 39MB	recursion limit
time: 0.000; rss: 39MB	gated macro checking
time: 0.000; rss: 39MB	crate injection
time: 0.003; rss: 42MB	macro loading
time: 0.000; rss: 42MB	plugin loading
time: 0.000; rss: 42MB	plugin registration
time: 0.001; rss: 42MB	expansion
time: 0.000; rss: 42MB	complete gated feature checking 1
time: 0.000; rss: 42MB	configuration 2
time: 0.000; rss: 42MB	gated configuration checking
time: 0.000; rss: 42MB	maybe building test harness
time: 0.000; rss: 42MB	prelude injection
time: 0.000; rss: 42MB	checking that all macro invocations are gone
time: 0.000; rss: 42MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 42MB	complete gated feature checking 2
time: 0.000; rss: 42MB	const fn bodies and arguments
Post-expansion node count: 599
time: 0.000; rss: 42MB	assigning node ids
time: 0.000; rss: 42MB	lowering ast -> hir
time: 0.000; rss: 42MB	indexing hir
time: 0.000; rss: 42MB	attribute checking
time: 0.000; rss: 42MB	early lint checks
time: 0.001; rss: 42MB	external crate/lib resolution
time: 0.000; rss: 42MB	language item collection
time: 0.000; rss: 46MB	resolution
time: 0.000; rss: 46MB	lifetime resolution
time: 0.000; rss: 46MB	looking for entry point
time: 0.000; rss: 46MB	looking for plugin registrar
time: 0.000; rss: 46MB	region resolution
time: 0.000; rss: 46MB	loop checking
time: 0.000; rss: 46MB	static item recursion checking
time: 0.000; rss: 46MB	load_dep_graph
time: 0.001; rss: 50MB	type collecting
time: 0.000; rss: 50MB	variance inference
time: 0.005; rss: 59MB	coherence checking
time: 0.007; rss: 62MB	wf checking
time: 0.000; rss: 62MB	item-types checking
time: 1.777; rss: 106MB	item-bodies checking
time: 0.000; rss: 106MB	drop-impl checking
time: 0.001; rss: 106MB	const checking
time: 0.000; rss: 106MB	privacy checking
time: 0.000; rss: 106MB	stability index
time: 0.000; rss: 106MB	intrinsic checking
time: 0.000; rss: 106MB	effect checking
time: 0.000; rss: 106MB	match checking
time: 0.000; rss: 106MB	liveness checking
time: 0.002; rss: 106MB	rvalue checking
time: 0.001; rss: 106MB	MIR dump
time: 0.000; rss: 106MB	MIR passes
time: 0.001; rss: 106MB	borrow checking
time: 0.000; rss: 106MB	reachability checking
time: 0.000; rss: 106MB	death checking
time: 0.000; rss: 106MB	stability checking
time: 0.000; rss: 106MB	unused lib feature checking
time: 0.000; rss: 106MB	lint checking
time: 0.001; rss: 106MB	resolving dependency formats
time: 0.000; rss: 108MB	Prepare MIR codegen passes
  time: 0.095; rss: 122MB	translation item collection
  time: 0.000; rss: 129MB	write metadata
time: 0.469; rss: 129MB	translation
time: 0.000; rss: 129MB	assert dep graph
time: 0.000; rss: 129MB	serialize dep graph
  time: 0.000; rss: 82MB	llvm function passes [0]
  time: 0.000; rss: 82MB	llvm module passes [0]
  time: 0.005; rss: 87MB	codegen passes [0]
  time: 0.000; rss: 87MB	codegen passes [0]
time: 0.006; rss: 87MB	LLVM passes
  time: 0.101; rss: 87MB	running linker
time: 0.101; rss: 87MB	linking
done
