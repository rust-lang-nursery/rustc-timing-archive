commit 6d620843f62b6cf3182528ffcaa877eba461bfbb
Merge: a7bfb1a 032bffa
Author: bors <bors@rust-lang.org>
Date:   Mon Oct 10 04:04:51 2016 -0700

    Auto merge of #36341 - sagebind:thread_id, r=alexcrichton
    
    Add ThreadId for comparing threads
    
    This adds the capability to store and compare threads with the current calling thread via a new struct, `std::thread::ThreadId`. Addresses the need outlined in issue #21507.
    
    This avoids the need to add any special checks to the existing thread structs and does not rely on the system to provide an identifier for a thread, since it seems that this approach is unreliable and undesirable. Instead, this simply uses a lazily-created, thread-local `usize` whose value is copied from a global atomic counter. The code should be simple enough that it should be as much reliable as the `#[thread_local]` attribute it uses (however much that is).
    
    `ThreadId`s can be compared directly for equality and have copy semantics.
    
    Also see these other attempts:
    - rust-lang/rust#29457
    - rust-lang/rust#29448
    - rust-lang/rust#29447
    
    And this in the RFC repo: rust-lang/rfcs#1435
rustc: ./html5ever-2016-08-25
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling encoding_index_tests v0.1.4
   Compiling phf_shared v0.7.16
   Compiling serde v0.8.9
   Compiling log v0.3.6
   Compiling rustc-serialize v0.3.19
   Compiling void v1.0.2
   Compiling lazy_static v0.2.1
   Compiling matches v0.1.2
   Compiling encoding-index-korean v1.20141219.5
   Compiling encoding-index-simpchinese v1.20141219.5
   Compiling encoding-index-tradchinese v1.20141219.5
   Compiling utf-8 v0.6.0
   Compiling encoding-index-japanese v1.20141219.5
   Compiling encoding-index-singlebyte v1.20141219.5
   Compiling phf v0.7.16
   Compiling libc v0.2.16
   Compiling unreachable v0.1.1
   Compiling debug_unreachable v0.1.1
   Compiling mac v0.0.2
   Compiling futf v0.1.2
   Compiling encoding v0.2.33
   Compiling rand v0.3.14
   Compiling tendril v0.2.3
   Compiling phf_generator v0.7.16
   Compiling string_cache v0.2.29
   Compiling phf_codegen v0.7.16
   Compiling html5ever v0.5.4 (file:///root/benchmarks/html5ever-2016-08-25)
time: 0.027; rss: 51MB	parsing
Lines of code:             8210
Pre-expansion node count:  52238
time: 0.000; rss: 51MB	recursion limit
time: 0.000; rss: 51MB	crate injection
time: 0.000; rss: 51MB	plugin loading
time: 0.000; rss: 51MB	plugin registration
time: 1.263; rss: 104MB	expansion
time: 0.000; rss: 104MB	maybe building test harness
time: 0.002; rss: 104MB	maybe creating a macro crate
Post-expansion node count: 163524
time: 0.000; rss: 104MB	checking for inline asm in case the target doesn't support it
time: 0.003; rss: 104MB	complete gated feature checking
time: 0.009; rss: 104MB	early lint checks
time: 0.002; rss: 104MB	AST validation
time: 0.018; rss: 106MB	name resolution
time: 0.016; rss: 122MB	lowering ast -> hir
time: 0.004; rss: 127MB	indexing hir
time: 0.002; rss: 127MB	attribute checking
time: 0.002; rss: 104MB	language item collection
time: 0.002; rss: 104MB	lifetime resolution
time: 0.000; rss: 104MB	looking for entry point
time: 0.000; rss: 104MB	looking for plugin registrar
time: 0.017; rss: 110MB	region resolution
time: 0.002; rss: 110MB	loop checking
time: 0.003; rss: 110MB	static item recursion checking
time: 0.023; rss: 110MB	compute_incremental_hashes_map
time: 0.000; rss: 110MB	load_dep_graph
time: 0.010; rss: 110MB	type collecting
time: 0.000; rss: 110MB	variance inference
time: 0.026; rss: 113MB	coherence checking
time: 0.024; rss: 113MB	wf checking
time: 0.347; rss: 128MB	item-types checking
time: 0.510; rss: 136MB	item-bodies checking
time: 0.000; rss: 136MB	drop-impl checking
time: 0.073; rss: 137MB	const checking
time: 0.008; rss: 137MB	privacy checking
time: 0.002; rss: 137MB	stability index
time: 0.004; rss: 137MB	intrinsic checking
time: 0.003; rss: 137MB	effect checking
time: 0.024; rss: 137MB	match checking
time: 0.013; rss: 132MB	liveness checking
time: 0.029; rss: 132MB	rvalue checking
time: 0.119; rss: 182MB	MIR dump
  time: 0.009; rss: 180MB	SimplifyCfg
  time: 0.015; rss: 180MB	QualifyAndPromoteConstants
  time: 0.024; rss: 180MB	TypeckMir
  time: 0.000; rss: 180MB	SimplifyBranches
  time: 0.004; rss: 180MB	SimplifyCfg
time: 0.052; rss: 180MB	MIR passes
time: 0.095; rss: 182MB	borrow checking
time: 0.003; rss: 182MB	reachability checking
time: 0.007; rss: 182MB	death checking
time: 0.009; rss: 182MB	stability checking
time: 0.000; rss: 182MB	unused lib feature checking
time: 0.065; rss: 182MB	lint checking
time: 0.000; rss: 182MB	resolving dependency formats
  time: 0.000; rss: 182MB	NoLandingPads
  time: 0.004; rss: 182MB	SimplifyCfg
  time: 0.010; rss: 182MB	EraseRegions
  time: 0.001; rss: 182MB	AddCallGuards
  time: 0.076; rss: 188MB	ElaborateDrops
  time: 0.000; rss: 188MB	NoLandingPads
  time: 0.007; rss: 184MB	SimplifyCfg
  time: 0.008; rss: 182MB	InstCombine
  time: 0.001; rss: 182MB	Deaggregator
  time: 0.000; rss: 182MB	CopyPropagation
  time: 0.001; rss: 182MB	AddCallGuards
  time: 0.000; rss: 182MB	PreTrans
time: 0.110; rss: 182MB	Prepare MIR codegen passes
  time: 0.052; rss: 182MB	write metadata
  time: 0.052; rss: 184MB	translation item collection
  time: 0.006; rss: 184MB	codegen unit partitioning
  time: 0.006; rss: 200MB	internalize symbols
time: 0.364; rss: 170MB	translation
time: 0.000; rss: 170MB	assert dep graph
time: 0.000; rss: 170MB	serialize dep graph
  time: 0.019; rss: 105MB	llvm function passes [0]
  time: 0.012; rss: 106MB	llvm module passes [0]
  time: 0.471; rss: 109MB	codegen passes [0]
  time: 0.001; rss: 109MB	codegen passes [0]
time: 0.543; rss: 109MB	LLVM passes
time: 0.000; rss: 109MB	serialize work products
time: 0.058; rss: 91MB	linking
done
