commit 528c6f3ed6a23a374dc5a40582d1bea2f2cfda65
Merge: 17a2be8 0a70944
Author: bors <bors@rust-lang.org>
Date:   Thu Aug 25 08:32:19 2016 -0700

    Auto merge of #35884 - habnabit:freebsd-arc4rand, r=alexcrichton
    
    Use arc4rand(9) on FreeBSD
    
    From rust-lang-nursery/rand#112:
    
    >After reading through #30691 it seems that there's general agreement that using OS-provided facilities for seeding rust userland processes is fine as long as it doesn't use too much from libc. FreeBSD's `arc4random_buf(3)` is not only a whole lot of libc code, but also not even currently exposed in the libc crate. Fortunately, the mechanism `arc4random_buf(3)` et al. use for getting entropy from the kernel ([`arc4rand(9)`](https://www.freebsd.org/cgi/man.cgi?query=arc4random&apropos=0&sektion=9&manpath=FreeBSD+10.3-RELEASE&arch=default&format=html)) is exposed via `sysctl(3)` with constants that are already in the libc crate.
    
    >I haven't found too much documentation on `KERN_ARND`â€”it's missing or only briefly described in most of the places that cover sysctl mibs. But, from digging through the kernel source, it appears that the sysctl used in this PR is very close to just calling `arc4rand(9)` directly (with `reseed` set to 0 and no way to change it).
    
    I expected [rand](/rust-lang-nursery/rand) to reply quicker, so I tried submitting it there first. It's been a few weeks with no comment, so I don't know the state of it, but maybe someone will see it here and have an opinion. This is basically the same patch. It pains me to duplicate the code but I guess it hasn't been factored out into just one place yet.
rustc: ./issue-32278-big-array-of-strings
/root/rust/x86_64-unknown-linux-gnu/stage2/bin/rustc big-array-of-strings.rs -Ztime-passes -Zinput-stats
time: 0.143; rss: 63MB	parsing
Lines of code:             65577
Pre-expansion node count:  65552
time: 0.005; rss: 63MB	configuration
time: 0.000; rss: 63MB	recursion limit
time: 0.000; rss: 63MB	crate injection
time: 0.000; rss: 63MB	plugin loading
time: 0.000; rss: 63MB	plugin registration
time: 0.024; rss: 84MB	expansion
time: 0.000; rss: 84MB	maybe building test harness
time: 0.003; rss: 84MB	assigning node ids
Post-expansion node count: 65565
time: 0.000; rss: 84MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 84MB	complete gated feature checking
time: 0.000; rss: 84MB	collecting defs
time: 0.003; rss: 84MB	external crate/lib resolution
time: 0.004; rss: 84MB	early lint checks
time: 0.000; rss: 84MB	AST validation
time: 0.002; rss: 84MB	name resolution
time: 0.007; rss: 102MB	lowering ast -> hir
time: 0.002; rss: 106MB	indexing hir
time: 0.001; rss: 106MB	attribute checking
time: 0.001; rss: 97MB	language item collection
time: 0.001; rss: 97MB	lifetime resolution
time: 0.000; rss: 97MB	looking for entry point
time: 0.000; rss: 97MB	looking for plugin registrar
time: 0.009; rss: 102MB	region resolution
time: 0.001; rss: 102MB	loop checking
time: 0.002; rss: 102MB	static item recursion checking
time: 0.006; rss: 103MB	compute_incremental_hashes_map
time: 0.000; rss: 103MB	load_dep_graph
time: 0.000; rss: 103MB	type collecting
time: 0.000; rss: 103MB	variance inference
time: 0.005; rss: 105MB	coherence checking
time: 0.001; rss: 105MB	wf checking
time: 0.781; rss: 124MB	item-types checking
time: 0.000; rss: 124MB	item-bodies checking
time: 0.000; rss: 124MB	drop-impl checking
time: 0.022; rss: 119MB	const checking
time: 0.002; rss: 119MB	privacy checking
time: 0.000; rss: 119MB	stability index
time: 0.000; rss: 119MB	intrinsic checking
time: 0.000; rss: 119MB	effect checking
time: 0.000; rss: 119MB	match checking
time: 0.001; rss: 119MB	liveness checking
time: 0.000; rss: 119MB	rvalue checking
time: 0.046; rss: 132MB	MIR dump
time: 0.002; rss: 132MB	MIR passes
time: 0.001; rss: 132MB	borrow checking
time: 0.000; rss: 132MB	reachability checking
time: 0.001; rss: 132MB	death checking
time: 0.001; rss: 132MB	stability checking
time: 0.000; rss: 132MB	unused lib feature checking
time: 0.033; rss: 133MB	lint checking
time: 0.001; rss: 133MB	resolving dependency formats
time: 0.001; rss: 133MB	Prepare MIR codegen passes
  time: 0.000; rss: 133MB	write metadata
  time: 0.001; rss: 133MB	translation item collection
  time: 0.000; rss: 133MB	codegen unit partitioning
  time: 0.001; rss: 144MB	internalize symbols
time: 0.063; rss: 131MB	translation
time: 0.000; rss: 131MB	assert dep graph
time: 0.000; rss: 131MB	serialize dep graph
  time: 0.008; rss: 88MB	llvm function passes [0]
  time: 0.000; rss: 88MB	llvm module passes [0]
  time: 0.174; rss: 88MB	codegen passes [0]
  time: 0.000; rss: 88MB	codegen passes [0]
time: 0.183; rss: 88MB	LLVM passes
time: 0.000; rss: 88MB	serialize work products
  time: 0.196; rss: 77MB	running linker
time: 0.198; rss: 77MB	linking
done
