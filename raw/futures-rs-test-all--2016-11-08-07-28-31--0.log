commit 38a959a543dfc70a67e64f7d369ed6c9e12fc806
Merge: 57f971b 74bb594
Author: bors <bors@rust-lang.org>
Date:   Tue Nov 8 02:06:45 2016 -0800

    Auto merge of #36843 - petrochenkov:dotstab, r=nikomatsakis
    
    Stabilize `..` in tuple (struct) patterns
    
    I'd like to nominate `..` in tuple and tuple struct patterns for stabilization.
    This feature is a relatively small extension to existing stable functionality and doesn't have known blockers.
    The feature first appeared in Rust 1.10 6 months ago.
    An example of use: https://github.com/rust-lang/rust/pull/36203
    
    Closes https://github.com/rust-lang/rust/issues/33627
    r? @nikomatsakis
rustc: ./futures-rs-test-all
cargo rustc --test all -- -Ztime-passes -Zinput-stats
   Compiling log v0.3.6
   Compiling futures v0.1.0 (file:///root/benchmarks/futures-rs-test-all)
time: 0.002; rss: 43MB	parsing
Lines of code:             412
Pre-expansion node count:  5522
time: 0.000; rss: 43MB	recursion limit
time: 0.000; rss: 43MB	crate injection
time: 0.000; rss: 43MB	plugin loading
time: 0.000; rss: 43MB	plugin registration
time: 0.020; rss: 68MB	expansion
time: 0.001; rss: 68MB	maybe building test harness
time: 0.000; rss: 68MB	maybe creating a macro crate
Post-expansion node count: 10623
time: 0.000; rss: 68MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 68MB	complete gated feature checking
time: 0.000; rss: 68MB	early lint checks
time: 0.000; rss: 68MB	AST validation
time: 0.003; rss: 68MB	name resolution
time: 0.000; rss: 68MB	lowering ast -> hir
time: 0.000; rss: 68MB	indexing hir
time: 0.000; rss: 68MB	attribute checking
time: 0.000; rss: 68MB	language item collection
time: 0.000; rss: 68MB	lifetime resolution
time: 0.000; rss: 68MB	looking for entry point
time: 0.000; rss: 68MB	looking for plugin registrar
time: 0.001; rss: 68MB	region resolution
time: 0.000; rss: 68MB	loop checking
time: 0.000; rss: 68MB	static item recursion checking
time: 0.003; rss: 68MB	compute_incremental_hashes_map
time: 0.000; rss: 68MB	load_dep_graph
time: 0.005; rss: 74MB	type collecting
time: 0.000; rss: 74MB	variance inference
time: 0.003; rss: 74MB	coherence checking
time: 0.011; rss: 74MB	wf checking
time: 0.002; rss: 74MB	item-types checking
time: 0.127; rss: 81MB	item-bodies checking
time: 0.000; rss: 81MB	drop-impl checking
time: 0.004; rss: 80MB	const checking
time: 0.000; rss: 80MB	privacy checking
time: 0.000; rss: 80MB	stability index
time: 0.000; rss: 80MB	intrinsic checking
time: 0.000; rss: 80MB	effect checking
time: 0.001; rss: 80MB	match checking
time: 0.001; rss: 80MB	liveness checking
time: 0.003; rss: 80MB	rvalue checking
time: 0.007; rss: 81MB	MIR dump
  time: 0.001; rss: 81MB	SimplifyCfg
  time: 0.001; rss: 81MB	QualifyAndPromoteConstants
  time: 0.002; rss: 81MB	TypeckMir
  time: 0.000; rss: 81MB	SimplifyBranches
  time: 0.000; rss: 81MB	SimplifyCfg
time: 0.005; rss: 81MB	MIR cleanup and validation
time: 0.007; rss: 84MB	borrow checking
time: 0.000; rss: 84MB	reachability checking
time: 0.000; rss: 84MB	death checking
time: 0.001; rss: 84MB	stability checking
time: 0.000; rss: 84MB	unused lib feature checking
time: 0.003; rss: 84MB	lint checking
time: 0.001; rss: 84MB	resolving dependency formats
  time: 0.000; rss: 84MB	NoLandingPads
  time: 0.001; rss: 84MB	SimplifyCfg
  time: 0.001; rss: 84MB	EraseRegions
  time: 0.000; rss: 84MB	AddCallGuards
  time: 0.005; rss: 84MB	ElaborateDrops
  time: 0.000; rss: 84MB	NoLandingPads
  time: 0.001; rss: 84MB	SimplifyCfg
  time: 0.000; rss: 84MB	InstCombine
  time: 0.000; rss: 84MB	Deaggregator
  time: 0.000; rss: 84MB	CopyPropagation
  time: 0.000; rss: 84MB	SimplifyLocals
  time: 0.000; rss: 84MB	AddCallGuards
  time: 0.000; rss: 84MB	PreTrans
time: 0.009; rss: 84MB	MIR optimisations
  time: 0.000; rss: 84MB	write metadata
  time: 0.164; rss: 93MB	translation item collection
  time: 0.018; rss: 95MB	codegen unit partitioning
  time: 0.018; rss: 149MB	internalize symbols
time: 1.206; rss: 149MB	translation
time: 0.000; rss: 149MB	assert dep graph
time: 0.000; rss: 149MB	serialize dep graph
  time: 0.083; rss: 135MB	llvm function passes [0]
  time: 0.028; rss: 135MB	llvm module passes [0]
  time: 1.963; rss: 139MB	codegen passes [0]
  time: 0.000; rss: 139MB	codegen passes [0]
time: 2.189; rss: 139MB	LLVM passes
time: 0.000; rss: 139MB	serialize work products
  time: 0.155; rss: 83MB	running linker
time: 0.156; rss: 83MB	linking
done
