commit d2bc30b03fa4bf5425d080710f681f36f58f1706
Merge: 49c36bf 99234bb
Author: bors <bors@rust-lang.org>
Date:   Fri Nov 4 03:38:18 2016 -0700

    Auto merge of #37037 - Mark-Simulacrum:stack-error, r=alexcrichton
    
    Add conversions from `io:ErrorKind` to `io::Error`
    
    Filing to help with discussion around the possibility of doing this.
    
    Current changes are clearly backwards incompatible, but I think adding a new function (with a bikeshed on naming) like `Error::new_str` should be possible (or some other way of specializing the string error message case) to fix #36658.
rustc: ./piston-image-0.10.3
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling image v0.10.3 (file:///root/benchmarks/piston-image-0.10.3)
time: 0.045; rss: 57MB	parsing
Lines of code:             12000
Pre-expansion node count:  90272
time: 0.000; rss: 57MB	recursion limit
time: 0.000; rss: 57MB	crate injection
time: 0.000; rss: 57MB	plugin loading
time: 0.000; rss: 57MB	plugin registration
time: 0.071; rss: 95MB	expansion
time: 0.000; rss: 95MB	maybe building test harness
time: 0.001; rss: 95MB	maybe creating a macro crate
Post-expansion node count: 148999
time: 0.000; rss: 95MB	checking for inline asm in case the target doesn't support it
time: 0.003; rss: 95MB	complete gated feature checking
time: 0.005; rss: 95MB	early lint checks
time: 0.001; rss: 95MB	AST validation
time: 0.020; rss: 99MB	name resolution
time: 0.012; rss: 105MB	lowering ast -> hir
time: 0.002; rss: 109MB	indexing hir
time: 0.002; rss: 109MB	attribute checking
time: 0.001; rss: 98MB	language item collection
time: 0.002; rss: 98MB	lifetime resolution
time: 0.000; rss: 98MB	looking for entry point
time: 0.000; rss: 98MB	looking for plugin registrar
time: 0.010; rss: 103MB	region resolution
time: 0.001; rss: 103MB	loop checking
time: 0.001; rss: 103MB	static item recursion checking
time: 0.076; rss: 103MB	compute_incremental_hashes_map
time: 0.000; rss: 103MB	load_dep_graph
time: 0.016; rss: 105MB	type collecting
time: 0.000; rss: 105MB	variance inference
time: 0.026; rss: 109MB	coherence checking
time: 0.074; rss: 110MB	wf checking
time: 0.138; rss: 117MB	item-types checking
time: 0.796; rss: 130MB	item-bodies checking
time: 0.000; rss: 130MB	drop-impl checking
time: 0.054; rss: 130MB	const checking
time: 0.009; rss: 130MB	privacy checking
time: 0.001; rss: 130MB	stability index
time: 0.007; rss: 130MB	intrinsic checking
time: 0.004; rss: 130MB	effect checking
time: 0.015; rss: 130MB	match checking
time: 0.010; rss: 130MB	liveness checking
time: 0.044; rss: 130MB	rvalue checking
time: 0.097; rss: 173MB	MIR dump
  time: 0.011; rss: 173MB	SimplifyCfg
  time: 0.020; rss: 173MB	QualifyAndPromoteConstants
  time: 0.023; rss: 173MB	TypeckMir
  time: 0.001; rss: 173MB	SimplifyBranches
  time: 0.004; rss: 173MB	SimplifyCfg
time: 0.060; rss: 173MB	MIR cleanup and validation
time: 0.117; rss: 173MB	borrow checking
time: 0.003; rss: 173MB	reachability checking
time: 0.008; rss: 173MB	death checking
time: 0.009; rss: 175MB	stability checking
time: 0.000; rss: 175MB	unused lib feature checking
time: 0.066; rss: 175MB	lint checking
time: 0.000; rss: 175MB	resolving dependency formats
  time: 0.001; rss: 175MB	NoLandingPads
  time: 0.005; rss: 175MB	SimplifyCfg
  time: 0.012; rss: 175MB	EraseRegions
  time: 0.002; rss: 175MB	AddCallGuards
  time: 0.043; rss: 180MB	ElaborateDrops
  time: 0.001; rss: 180MB	NoLandingPads
  time: 0.009; rss: 180MB	SimplifyCfg
  time: 0.006; rss: 180MB	InstCombine
  time: 0.002; rss: 180MB	Deaggregator
  time: 0.000; rss: 180MB	CopyPropagation
  time: 0.007; rss: 180MB	SimplifyLocals
  time: 0.002; rss: 180MB	AddCallGuards
  time: 0.000; rss: 180MB	PreTrans
time: 0.090; rss: 180MB	MIR optimisations
  time: 0.016; rss: 180MB	write metadata
  time: 0.381; rss: 194MB	translation item collection
  time: 0.024; rss: 196MB	codegen unit partitioning
  time: 0.022; rss: 317MB	internalize symbols
time: 2.552; rss: 317MB	translation
time: 0.000; rss: 317MB	assert dep graph
time: 0.000; rss: 317MB	serialize dep graph
  time: 0.205; rss: 224MB	llvm function passes [0]
  time: 0.080; rss: 227MB	llvm module passes [0]
  time: 4.127; rss: 227MB	codegen passes [0]
  time: 0.000; rss: 227MB	codegen passes [0]
time: 4.708; rss: 227MB	LLVM passes
time: 0.000; rss: 227MB	serialize work products
time: 0.126; rss: 99MB	linking
done
