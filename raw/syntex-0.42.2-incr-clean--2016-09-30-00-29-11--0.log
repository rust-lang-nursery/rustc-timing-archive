commit 7660bdf70ae0c6a434dd12cfdeb8250ce77c69c7
Merge: c717cfa aaf32aa
Author: bors <bors@rust-lang.org>
Date:   Thu Sep 29 20:25:45 2016 -0700

    Auto merge of #36557 - sfackler:fix-hashdos-docs, r=alexcrichton
    
    Clean up hasher discussion on HashMap
    
    * We never want to make guarantees about protecting against attacks.
    * "True randomness" is not the right terminology to be using in this
        context.
    * There is significantly more nuance to the performance of SipHash than
        "somewhat slow".
    
    r? @steveklabnik
    
    Follow up to discussion on #35371
rustc: ./syntex-0.42.2-incr-clean
RUSTFLAGS="-Z incremental=incr" \
    cargo rustc -p syntex_syntax -- -Ztime-passes -Zinput-stats -Z incremental-info
   Compiling bitflags v0.5.0
   Compiling winapi v0.2.8
   Compiling rustc-serialize v0.3.19
   Compiling log v0.3.6
   Compiling winapi-build v0.1.1
   Compiling libc v0.2.15
   Compiling unicode-xid v0.0.3
   Compiling kernel32-sys v0.2.2
   Compiling term v0.4.4
   Compiling syntex_pos v0.42.0
   Compiling syntex_errors v0.42.0
   Compiling syntex_syntax v0.42.0
time: 0.107; rss: 75MB	parsing
Lines of code:             33687
Pre-expansion node count:  224033
time: 0.000; rss: 75MB	recursion limit
time: 0.000; rss: 75MB	crate injection
time: 0.000; rss: 75MB	plugin loading
time: 0.000; rss: 75MB	plugin registration
time: 0.271; rss: 146MB	expansion
time: 0.000; rss: 146MB	maybe building test harness
time: 0.006; rss: 146MB	maybe creating a macro crate
Post-expansion node count: 641571
time: 0.000; rss: 146MB	checking for inline asm in case the target doesn't support it
time: 0.013; rss: 146MB	complete gated feature checking
time: 0.023; rss: 146MB	early lint checks
time: 0.007; rss: 146MB	AST validation
time: 0.084; rss: 160MB	name resolution
time: 0.050; rss: 202MB	lowering ast -> hir
time: 0.009; rss: 211MB	indexing hir
time: 0.006; rss: 211MB	attribute checking
time: 0.006; rss: 161MB	language item collection
time: 0.012; rss: 161MB	lifetime resolution
time: 0.000; rss: 161MB	looking for entry point
time: 0.000; rss: 161MB	looking for plugin registrar
time: 0.045; rss: 173MB	region resolution
time: 0.006; rss: 173MB	loop checking
time: 0.006; rss: 173MB	static item recursion checking
time: 0.295; rss: 173MB	compute_incremental_hashes_map
time: 0.000; rss: 173MB	load_dep_graph
time: 0.080; rss: 174MB	type collecting
time: 0.001; rss: 174MB	variance inference
time: 0.039; rss: 178MB	coherence checking
time: 0.101; rss: 181MB	wf checking
time: 0.211; rss: 186MB	item-types checking
time: 3.930; rss: 242MB	item-bodies checking
time: 0.000; rss: 242MB	drop-impl checking
time: 0.321; rss: 244MB	const checking
time: 0.056; rss: 244MB	privacy checking
time: 0.007; rss: 244MB	stability index
time: 0.022; rss: 244MB	intrinsic checking
time: 0.019; rss: 244MB	effect checking
time: 0.057; rss: 244MB	match checking
time: 0.055; rss: 238MB	liveness checking
time: 0.289; rss: 238MB	rvalue checking
time: 0.416; rss: 426MB	MIR dump
  time: 0.058; rss: 429MB	SimplifyCfg
  time: 0.088; rss: 429MB	QualifyAndPromoteConstants
  time: 0.112; rss: 429MB	TypeckMir
  time: 0.005; rss: 429MB	SimplifyBranches
  time: 0.037; rss: 429MB	SimplifyCfg
time: 0.299; rss: 429MB	MIR passes
time: 0.699; rss: 430MB	borrow checking
time: 0.018; rss: 430MB	reachability checking
time: 0.045; rss: 430MB	death checking
time: 0.041; rss: 430MB	stability checking
time: 0.000; rss: 430MB	unused lib feature checking
time: 0.222; rss: 430MB	lint checking
time: 0.000; rss: 430MB	resolving dependency formats
  time: 0.003; rss: 430MB	NoLandingPads
  time: 0.027; rss: 430MB	SimplifyCfg
  time: 0.072; rss: 442MB	EraseRegions
  time: 0.011; rss: 442MB	AddCallGuards
  time: 1.112; rss: 457MB	ElaborateDrops
  time: 0.003; rss: 457MB	NoLandingPads
  time: 0.052; rss: 457MB	SimplifyCfg
  time: 0.030; rss: 457MB	InstCombine
  time: 0.013; rss: 457MB	Deaggregator
  time: 0.003; rss: 457MB	CopyPropagation
  time: 0.009; rss: 457MB	AddCallGuards
  time: 0.003; rss: 457MB	PreTrans
time: 1.339; rss: 457MB	Prepare MIR codegen passes
  time: 0.264; rss: 465MB	write metadata
  time: 0.483; rss: 475MB	translation item collection
  time: 0.067; rss: 477MB	codegen unit partitioning
  time: 0.058; rss: 728MB	internalize symbols
time: 5.172; rss: 606MB	translation
time: 0.000; rss: 606MB	assert dep graph
time: 0.000; rss: 606MB	serialize dep graph
incremental: re-using 0 out of 1 modules
  time: 0.515; rss: 415MB	llvm function passes [0]
  time: 0.242; rss: 421MB	llvm module passes [0]
  time: 10.096; rss: 416MB	codegen passes [0]
  time: 0.106; rss: 418MB	codegen passes [0]
time: 11.692; rss: 418MB	LLVM passes
time: 0.000; rss: 418MB	serialize work products
time: 0.657; rss: 107MB	linking
done
