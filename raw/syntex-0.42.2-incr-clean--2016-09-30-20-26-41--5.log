commit bba3fca20e3ddfdf1173c8ae2851b492ca2c98a6
Merge: 50932b5 faae99d
Author: bors <bors@rust-lang.org>
Date:   Fri Sep 30 15:43:52 2016 -0700

    Auto merge of #36866 - alexcrichton:fix-hash-again, r=eddyb
    
    rustc: More fixes for arch-independent hashing
    
    In another attempt to fix #36793 this commit attempts to head off any future
    problems by adding a custom `WidentUsizeHasher` which will widen any hashing of
    `isize` and `usize` to a `u64` as necessary. This obviates the need for a
    previous number of `as u64` annotations and will hopefully protect us against
    future problems here.
    
    Closes #36793 (hopefully)
rustc: ./syntex-0.42.2-incr-clean
RUSTFLAGS="-Z incremental=incr" \
    cargo rustc -p syntex_syntax -- -Ztime-passes -Zinput-stats -Z incremental-info
   Compiling syntex_syntax v0.42.0
time: 0.108; rss: 76MB	parsing
Lines of code:             33687
Pre-expansion node count:  224033
time: 0.000; rss: 76MB	recursion limit
time: 0.000; rss: 76MB	crate injection
time: 0.000; rss: 76MB	plugin loading
time: 0.000; rss: 76MB	plugin registration
time: 0.272; rss: 146MB	expansion
time: 0.000; rss: 146MB	maybe building test harness
time: 0.006; rss: 146MB	maybe creating a macro crate
Post-expansion node count: 641571
time: 0.000; rss: 146MB	checking for inline asm in case the target doesn't support it
time: 0.013; rss: 146MB	complete gated feature checking
time: 0.023; rss: 146MB	early lint checks
time: 0.007; rss: 146MB	AST validation
time: 0.084; rss: 161MB	name resolution
time: 0.050; rss: 203MB	lowering ast -> hir
time: 0.009; rss: 211MB	indexing hir
time: 0.006; rss: 211MB	attribute checking
time: 0.006; rss: 162MB	language item collection
time: 0.012; rss: 162MB	lifetime resolution
time: 0.000; rss: 162MB	looking for entry point
time: 0.000; rss: 162MB	looking for plugin registrar
time: 0.045; rss: 173MB	region resolution
time: 0.006; rss: 173MB	loop checking
time: 0.006; rss: 173MB	static item recursion checking
time: 0.294; rss: 175MB	compute_incremental_hashes_map
time: 0.000; rss: 175MB	load_dep_graph
time: 0.081; rss: 174MB	type collecting
time: 0.001; rss: 174MB	variance inference
time: 0.038; rss: 178MB	coherence checking
time: 0.100; rss: 180MB	wf checking
time: 0.199; rss: 185MB	item-types checking
time: 3.965; rss: 242MB	item-bodies checking
time: 0.000; rss: 242MB	drop-impl checking
time: 0.321; rss: 243MB	const checking
time: 0.055; rss: 243MB	privacy checking
time: 0.007; rss: 243MB	stability index
time: 0.022; rss: 243MB	intrinsic checking
time: 0.019; rss: 243MB	effect checking
time: 0.057; rss: 243MB	match checking
time: 0.055; rss: 238MB	liveness checking
time: 0.289; rss: 238MB	rvalue checking
time: 0.417; rss: 426MB	MIR dump
  time: 0.058; rss: 430MB	SimplifyCfg
  time: 0.082; rss: 430MB	QualifyAndPromoteConstants
  time: 0.110; rss: 430MB	TypeckMir
  time: 0.005; rss: 430MB	SimplifyBranches
  time: 0.037; rss: 430MB	SimplifyCfg
time: 0.292; rss: 430MB	MIR passes
time: 0.702; rss: 431MB	borrow checking
time: 0.018; rss: 431MB	reachability checking
time: 0.045; rss: 431MB	death checking
time: 0.042; rss: 431MB	stability checking
time: 0.000; rss: 431MB	unused lib feature checking
time: 0.218; rss: 431MB	lint checking
time: 0.000; rss: 431MB	resolving dependency formats
  time: 0.003; rss: 431MB	NoLandingPads
  time: 0.028; rss: 431MB	SimplifyCfg
  time: 0.073; rss: 443MB	EraseRegions
  time: 0.011; rss: 443MB	AddCallGuards
  time: 1.095; rss: 458MB	ElaborateDrops
  time: 0.003; rss: 458MB	NoLandingPads
  time: 0.052; rss: 458MB	SimplifyCfg
  time: 0.030; rss: 458MB	InstCombine
  time: 0.012; rss: 458MB	Deaggregator
  time: 0.003; rss: 458MB	CopyPropagation
  time: 0.009; rss: 458MB	AddCallGuards
  time: 0.003; rss: 458MB	PreTrans
time: 1.323; rss: 458MB	Prepare MIR codegen passes
  time: 0.264; rss: 466MB	write metadata
  time: 0.480; rss: 476MB	translation item collection
  time: 0.067; rss: 480MB	codegen unit partitioning
  time: 0.057; rss: 729MB	internalize symbols
time: 5.216; rss: 607MB	translation
time: 0.000; rss: 607MB	assert dep graph
time: 0.000; rss: 607MB	serialize dep graph
incremental: re-using 0 out of 1 modules
  time: 0.509; rss: 417MB	llvm function passes [0]
  time: 0.244; rss: 423MB	llvm module passes [0]
  time: 10.111; rss: 416MB	codegen passes [0]
  time: 0.001; rss: 416MB	codegen passes [0]
time: 11.606; rss: 416MB	LLVM passes
time: 0.000; rss: 416MB	serialize work products
time: 0.671; rss: 108MB	linking
done
