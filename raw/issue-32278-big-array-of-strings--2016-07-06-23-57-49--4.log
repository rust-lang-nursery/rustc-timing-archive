commit de78655bca47cac8e783dbb563e7e5c25c1fae40
Merge: 5c674a1 547a930
Author: bors <bors@rust-lang.org>
Date:   Wed Jul 6 20:04:11 2016 -0700

    Auto merge of #34652 - jseyfried:fix_expansion_perf, r=nrc
    
    Fix expansion performance regression
    
    **syntax-[breaking-change] cc #31645**
    
    This fixes #34630 by reverting commit 5bf7970 of PR #33943, which landed in #34424.
    
    By removing the `Rc<_>` wrapping around `Delimited` and `SequenceRepetition` in `TokenTree`, 5bf7970 made cloning `TokenTree`s more expensive. While this had no measurable performance impact on the compiler's crates, it caused an order of magnitude performance regression on some macro-heavy code in the wild. I believe this is due to clones of `TokenTree`s in `macro_parser.rs` and/or `macro_rules.rs`.
    
    r? @nrc
rustc: ./issue-32278-big-array-of-strings
/root/rust/x86_64-unknown-linux-gnu/stage2/bin/rustc big-array-of-strings.rs -Ztime-passes -Zinput-stats
time: 0.167; rss: 101MB	parsing
Lines of code:             65577
Pre-expansion node count:  65552
time: 0.012; rss: 101MB	configuration
time: 0.000; rss: 101MB	recursion limit
time: 0.000; rss: 101MB	crate injection
time: 0.000; rss: 101MB	plugin loading
time: 0.000; rss: 101MB	plugin registration
time: 0.028; rss: 135MB	expansion
time: 0.000; rss: 135MB	maybe building test harness
time: 0.000; rss: 135MB	checking for inline asm in case the target doesn't support it
time: 0.001; rss: 135MB	complete gated feature checking
Post-expansion node count: 65565
time: 0.006; rss: 135MB	assigning node ids
time: 0.001; rss: 135MB	collecting defs
time: 0.003; rss: 135MB	external crate/lib resolution
time: 0.008; rss: 135MB	early lint checks
time: 0.001; rss: 135MB	AST validation
time: 0.002; rss: 135MB	name resolution
time: 0.008; rss: 154MB	lowering ast -> hir
time: 0.002; rss: 158MB	indexing hir
time: 0.001; rss: 158MB	attribute checking
time: 0.001; rss: 149MB	language item collection
time: 0.001; rss: 149MB	lifetime resolution
time: 0.000; rss: 149MB	looking for entry point
time: 0.000; rss: 149MB	looking for plugin registrar
time: 0.008; rss: 155MB	region resolution
time: 0.001; rss: 155MB	loop checking
time: 0.002; rss: 155MB	static item recursion checking
time: 0.000; rss: 155MB	load_dep_graph
time: 0.000; rss: 155MB	type collecting
time: 0.000; rss: 155MB	variance inference
time: 0.005; rss: 157MB	coherence checking
time: 0.001; rss: 157MB	wf checking
time: 0.977; rss: 173MB	item-types checking
time: 0.000; rss: 173MB	item-bodies checking
time: 0.000; rss: 173MB	drop-impl checking
time: 0.021; rss: 176MB	const checking
time: 0.002; rss: 176MB	privacy checking
time: 0.001; rss: 176MB	stability index
time: 0.001; rss: 176MB	intrinsic checking
time: 0.001; rss: 176MB	effect checking
time: 0.001; rss: 176MB	match checking
time: 0.001; rss: 176MB	liveness checking
time: 0.000; rss: 176MB	rvalue checking
time: 0.053; rss: 182MB	MIR dump
time: 0.002; rss: 182MB	MIR passes
time: 0.001; rss: 182MB	borrow checking
time: 0.000; rss: 182MB	reachability checking
time: 0.001; rss: 182MB	death checking
time: 0.001; rss: 182MB	stability checking
time: 0.000; rss: 182MB	unused lib feature checking
time: 0.026; rss: 183MB	lint checking
time: 0.001; rss: 183MB	resolving dependency formats
time: 0.001; rss: 183MB	Prepare MIR codegen passes
  time: 0.000; rss: 183MB	write metadata
  time: 0.001; rss: 184MB	translation item collection
  time: 0.000; rss: 184MB	codegen unit partitioning
time: 0.805; rss: 193MB	translation
time: 0.000; rss: 193MB	assert dep graph
time: 0.000; rss: 193MB	serialize dep graph
  time: 0.042; rss: 140MB	llvm function passes [0]
  time: 0.001; rss: 140MB	llvm module passes [0]
  time: 1.454; rss: 142MB	codegen passes [0]
  time: 0.001; rss: 142MB	codegen passes [0]
time: 1.503; rss: 142MB	LLVM passes
  time: 0.191; rss: 129MB	running linker
time: 0.192; rss: 129MB	linking
done
