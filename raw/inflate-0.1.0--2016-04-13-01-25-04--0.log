commit 4b71f8d1417423d933dfd4f74d5d4d167b85f77e
Merge: 7c27cce bc6daea
Author: bors <bors@rust-lang.org>
Date:   Tue Apr 12 22:21:23 2016 -0700

    Auto merge of #32814 - jseyfried:improve_duplicate_glob_detection, r=nikomatsakis
    
    resolve: Improve duplicate glob detection
    
    This fixes a bug introduced in #31726 in which we erroneously allow multiple imports of the same item under some circumstances.
    
    More specifically, we erroneously allow a module that is in a cycle of glob re-exports to have other re-exports (besides the glob from the cycle).
    For example,
    ```rust
    pub fn f() {}
    mod foo {
        pub use f; // (1) This defines `foo::f`.
        pub use bar::*; // (3) This also defines `foo::f`, which should be a duplicate error but is currently allowed.
    }
    mod bar {
        pub use foo::*; // (2) This defines `bar::f`.
    }
    ```
    
    A module in a glob re-export cycle can still have `pub` items after this PR. For example,
    ```rust
    mod foo {
        pub fn f() {}; // (1) This defines `foo::f`.
        pub use bar::*; // (3) This is not a duplicate error since items shadow glob-imported re-exports (cf #31337).
    }
    mod bar {
        pub use foo::*; // (2) This defines `bar::f`.
    }
    ```
    r? @nikomatsakis
rustc: ./inflate-0.1.0
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling inflate v0.1.0 (file:///root/benchmarks/inflate-0.1.0)
time: 0.008; rss: 38MB	parsing
Lines of code:             956
Pre-expansion node count:  4761
time: 0.001; rss: 39MB	configuration 1
time: 0.000; rss: 39MB	recursion limit
time: 0.000; rss: 39MB	gated macro checking
time: 0.000; rss: 39MB	crate injection
time: 0.003; rss: 42MB	macro loading
time: 0.000; rss: 42MB	plugin loading
time: 0.000; rss: 42MB	plugin registration
time: 0.085; rss: 49MB	expansion
time: 0.001; rss: 49MB	complete gated feature checking 1
time: 0.009; rss: 49MB	configuration 2
time: 0.000; rss: 49MB	gated configuration checking
time: 0.005; rss: 49MB	maybe building test harness
time: 0.004; rss: 49MB	prelude injection
time: 0.000; rss: 49MB	checking that all macro invocations are gone
time: 0.000; rss: 49MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 49MB	complete gated feature checking 2
time: 0.000; rss: 49MB	const fn bodies and arguments
Post-expansion node count: 54798
time: 0.004; rss: 49MB	assigning node ids
time: 0.016; rss: 55MB	lowering ast -> hir
time: 0.002; rss: 56MB	indexing hir
time: 0.000; rss: 56MB	attribute checking
time: 0.004; rss: 56MB	early lint checks
time: 0.001; rss: 53MB	external crate/lib resolution
time: 0.001; rss: 53MB	language item collection
time: 0.015; rss: 62MB	resolution
time: 0.001; rss: 62MB	lifetime resolution
time: 0.000; rss: 62MB	looking for entry point
time: 0.000; rss: 62MB	looking for plugin registrar
time: 0.003; rss: 63MB	region resolution
time: 0.000; rss: 63MB	loop checking
time: 0.000; rss: 63MB	static item recursion checking
time: 0.000; rss: 63MB	load_dep_graph
time: 0.001; rss: 63MB	type collecting
time: 0.000; rss: 63MB	variance inference
time: 0.010; rss: 79MB	coherence checking
time: 0.002; rss: 79MB	wf checking
time: 0.002; rss: 79MB	item-types checking
time: 2.834; rss: 100MB	item-bodies checking
time: 0.000; rss: 100MB	drop-impl checking
time: 0.014; rss: 100MB	const checking
time: 0.003; rss: 100MB	privacy checking
time: 0.000; rss: 100MB	stability index
time: 0.001; rss: 100MB	intrinsic checking
time: 0.001; rss: 100MB	effect checking
time: 0.003; rss: 100MB	match checking
time: 0.308; rss: 100MB	liveness checking
time: 0.009; rss: 100MB	rvalue checking
time: 0.039; rss: 114MB	MIR dump
time: 0.014; rss: 113MB	MIR passes
time: 0.215; rss: 112MB	borrow checking
time: 0.000; rss: 112MB	reachability checking
time: 0.004; rss: 112MB	death checking
time: 0.003; rss: 112MB	stability checking
time: 0.000; rss: 112MB	unused lib feature checking
time: 0.021; rss: 115MB	lint checking
time: 0.000; rss: 115MB	resolving dependency formats
time: 0.007; rss: 112MB	Prepare MIR codegen passes
  time: 0.011; rss: 124MB	translation item collection
  time: 0.004; rss: 144MB	write metadata
time: 0.366; rss: 131MB	translation
time: 0.000; rss: 131MB	assert dep graph
time: 0.000; rss: 131MB	serialize dep graph
  time: 0.026; rss: 102MB	llvm function passes [0]
  time: 0.005; rss: 102MB	llvm module passes [0]
  time: 0.500; rss: 108MB	codegen passes [0]
  time: 0.000; rss: 97MB	codegen passes [0]
time: 0.575; rss: 97MB	LLVM passes
time: 0.034; rss: 97MB	linking
done
