commit e804a3cf256106c097d44f6e0212cd183122da07
Merge: 271d048 06acf16
Author: bors <bors@rust-lang.org>
Date:   Thu Aug 4 03:01:37 2016 -0700

    Auto merge of #35168 - scottcarr:deaggregation, r=nikomatsakis
    
    [MIR] Deaggregate structs to enable further optimizations
    
    Currently, we generate MIR like:
    
    ```
    tmp0 = ...;
    tmp1 = ...;
    tmp3 = Foo { a: ..., b: ... };
    ```
    
    This PR implements "deaggregation," i.e.:
    
    ```
    tmp3.0 = ...
    tmp3.1 = ...
    ```
    
    Currently, the code only deaggregates structs, not enums.  My understanding is that we do not have MIR to set the discriminant of an enum.
rustc: ./issue-32278-big-array-of-strings
/root/rust/x86_64-unknown-linux-gnu/stage2/bin/rustc big-array-of-strings.rs -Ztime-passes -Zinput-stats
time: 0.168; rss: 68MB	parsing
Lines of code:             65577
Pre-expansion node count:  65552
time: 0.012; rss: 68MB	configuration
time: 0.000; rss: 68MB	recursion limit
time: 0.000; rss: 68MB	crate injection
time: 0.000; rss: 68MB	plugin loading
time: 0.000; rss: 68MB	plugin registration
time: 0.027; rss: 104MB	expansion
time: 0.000; rss: 104MB	maybe building test harness
time: 0.006; rss: 104MB	assigning node ids
Post-expansion node count: 65565
time: 0.000; rss: 104MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 104MB	complete gated feature checking
time: 0.000; rss: 104MB	collecting defs
time: 0.003; rss: 104MB	external crate/lib resolution
time: 0.008; rss: 104MB	early lint checks
time: 0.000; rss: 104MB	AST validation
time: 0.002; rss: 104MB	name resolution
time: 0.007; rss: 122MB	lowering ast -> hir
time: 0.002; rss: 127MB	indexing hir
time: 0.001; rss: 127MB	attribute checking
time: 0.001; rss: 117MB	language item collection
time: 0.001; rss: 117MB	lifetime resolution
time: 0.000; rss: 117MB	looking for entry point
time: 0.000; rss: 117MB	looking for plugin registrar
time: 0.007; rss: 123MB	region resolution
time: 0.001; rss: 123MB	loop checking
time: 0.001; rss: 123MB	static item recursion checking
time: 0.000; rss: 123MB	load_dep_graph
time: 0.000; rss: 123MB	type collecting
time: 0.000; rss: 123MB	variance inference
time: 0.005; rss: 125MB	coherence checking
time: 0.001; rss: 125MB	wf checking
time: 0.993; rss: 141MB	item-types checking
time: 0.000; rss: 141MB	item-bodies checking
time: 0.000; rss: 141MB	drop-impl checking
time: 0.022; rss: 144MB	const checking
time: 0.002; rss: 144MB	privacy checking
time: 0.001; rss: 144MB	stability index
time: 0.001; rss: 144MB	intrinsic checking
time: 0.000; rss: 144MB	effect checking
time: 0.000; rss: 144MB	match checking
time: 0.001; rss: 144MB	liveness checking
time: 0.000; rss: 144MB	rvalue checking
time: 0.051; rss: 149MB	MIR dump
time: 0.002; rss: 149MB	MIR passes
time: 0.001; rss: 149MB	borrow checking
time: 0.000; rss: 149MB	reachability checking
time: 0.001; rss: 149MB	death checking
time: 0.001; rss: 149MB	stability checking
time: 0.000; rss: 149MB	unused lib feature checking
time: 0.031; rss: 150MB	lint checking
time: 0.001; rss: 150MB	resolving dependency formats
time: 0.001; rss: 150MB	Prepare MIR codegen passes
  time: 0.000; rss: 150MB	write metadata
  time: 0.001; rss: 150MB	translation item collection
  time: 0.000; rss: 150MB	codegen unit partitioning
  time: 0.000; rss: 166MB	internalize symbols
time: 0.090; rss: 159MB	translation
time: 0.000; rss: 159MB	assert dep graph
time: 0.000; rss: 159MB	serialize dep graph
  time: 0.003; rss: 108MB	llvm function passes [0]
  time: 0.000; rss: 108MB	llvm module passes [0]
  time: 0.154; rss: 110MB	codegen passes [0]
  time: 0.000; rss: 110MB	codegen passes [0]
time: 0.159; rss: 110MB	LLVM passes
  time: 0.185; rss: 95MB	running linker
time: 0.186; rss: 95MB	linking
done
