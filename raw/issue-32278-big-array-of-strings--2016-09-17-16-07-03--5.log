commit fb62f4d544c954d355716dca8beb55726036721e
Merge: cde61ba af1a3ff
Author: bors <bors@rust-lang.org>
Date:   Sat Sep 17 08:23:44 2016 -0700

    Auto merge of #36490 - bluss:zip-slightly-despecialized-edition, r=alexcrichton
    
    Remove data structure specialization for .zip() iterator
    
    Go back on half the specialization, the part that changed the Zip
    struct's fields themselves depending on the types of the iterators.
    
    Previous PR: #33090
    
    This means that the Zip iterator will always carry two usize fields,
    which are sometimes unused. If a whole for loop using a .zip() iterator is
    inlined, these are simply removed and have no effect.
    
    The same improvement for Zip of for example slice iterators remain, and
    they still optimize well. However, like when the specialization of zip
    was merged, the compiler is still very sensistive to the exact context.
    
    For example this code only autovectorizes if the function is used, not
    if the code in zip_sum_i32 is inserted inline where it was called:
    
    ```rust
    fn zip_sum_i32(xs: &[i32], ys: &[i32]) -> i32 {
        let mut s = 0;
        for (&x, &y) in xs.iter().zip(ys) {
            s += x * y;
        }
        s
    }
    
    fn zipdot_i32_default_zip(b: &mut test::Bencher)
    {
        let xs = vec![1; 1024];
        let ys = vec![1; 1024];
    
        b.iter(|| {
            zip_sum_i32(&xs, &ys)
        })
    }
    ```
    
    Include a test that checks that `Zip<T, U>` is covariant w.r.t. T and U.
    
    Fixes #35727
rustc: ./issue-32278-big-array-of-strings
/root/rust/x86_64-unknown-linux-gnu/stage2/bin/rustc big-array-of-strings.rs -Ztime-passes -Zinput-stats
time: 0.115; rss: 63MB	parsing
Lines of code:             65577
Pre-expansion node count:  65552
time: 0.000; rss: 63MB	recursion limit
time: 0.000; rss: 63MB	crate injection
time: 0.000; rss: 63MB	plugin loading
time: 0.000; rss: 63MB	plugin registration
time: 0.027; rss: 88MB	expansion
time: 0.000; rss: 88MB	maybe building test harness
time: 0.001; rss: 88MB	maybe creating a macro crate
time: 0.003; rss: 88MB	assigning node ids
Post-expansion node count: 65565
time: 0.000; rss: 88MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 88MB	complete gated feature checking
time: 0.001; rss: 88MB	collecting defs
time: 0.003; rss: 88MB	external crate/lib resolution
time: 0.004; rss: 88MB	early lint checks
time: 0.001; rss: 88MB	AST validation
time: 0.002; rss: 88MB	name resolution
time: 0.007; rss: 104MB	lowering ast -> hir
time: 0.002; rss: 108MB	indexing hir
time: 0.001; rss: 108MB	attribute checking
time: 0.001; rss: 99MB	language item collection
time: 0.001; rss: 99MB	lifetime resolution
time: 0.000; rss: 99MB	looking for entry point
time: 0.000; rss: 99MB	looking for plugin registrar
time: 0.007; rss: 105MB	region resolution
time: 0.001; rss: 105MB	loop checking
time: 0.001; rss: 105MB	static item recursion checking
time: 0.007; rss: 105MB	compute_incremental_hashes_map
time: 0.000; rss: 105MB	load_dep_graph
time: 0.000; rss: 105MB	type collecting
time: 0.000; rss: 105MB	variance inference
time: 0.005; rss: 107MB	coherence checking
time: 0.001; rss: 107MB	wf checking
time: 0.679; rss: 113MB	item-types checking
time: 0.000; rss: 113MB	item-bodies checking
time: 0.000; rss: 113MB	drop-impl checking
time: 0.023; rss: 117MB	const checking
time: 0.002; rss: 117MB	privacy checking
time: 0.001; rss: 117MB	stability index
time: 0.001; rss: 117MB	intrinsic checking
time: 0.000; rss: 117MB	effect checking
time: 0.000; rss: 117MB	match checking
time: 0.001; rss: 117MB	liveness checking
time: 0.000; rss: 117MB	rvalue checking
time: 0.043; rss: 122MB	MIR dump
  time: 0.000; rss: 122MB	SimplifyCfg
  time: 0.001; rss: 122MB	QualifyAndPromoteConstants
  time: 0.001; rss: 122MB	TypeckMir
  time: 0.000; rss: 122MB	SimplifyBranches
  time: 0.000; rss: 122MB	SimplifyCfg
time: 0.002; rss: 122MB	MIR passes
time: 0.001; rss: 122MB	borrow checking
time: 0.000; rss: 122MB	reachability checking
time: 0.001; rss: 122MB	death checking
time: 0.001; rss: 122MB	stability checking
time: 0.000; rss: 122MB	unused lib feature checking
time: 0.027; rss: 122MB	lint checking
time: 0.001; rss: 122MB	resolving dependency formats
  time: 0.000; rss: 122MB	NoLandingPads
  time: 0.000; rss: 122MB	SimplifyCfg
  time: 0.001; rss: 122MB	EraseRegions
  time: 0.000; rss: 122MB	AddCallGuards
  time: 0.000; rss: 122MB	ElaborateDrops
  time: 0.000; rss: 122MB	NoLandingPads
  time: 0.000; rss: 122MB	SimplifyCfg
  time: 0.000; rss: 122MB	Deaggregator
  time: 0.000; rss: 122MB	AddCallGuards
  time: 0.000; rss: 122MB	PreTrans
time: 0.001; rss: 122MB	Prepare MIR codegen passes
  time: 0.000; rss: 122MB	write metadata
  time: 0.001; rss: 123MB	translation item collection
  time: 0.000; rss: 123MB	codegen unit partitioning
  time: 0.001; rss: 136MB	internalize symbols
time: 0.065; rss: 134MB	translation
time: 0.000; rss: 134MB	assert dep graph
time: 0.000; rss: 134MB	serialize dep graph
  time: 0.008; rss: 90MB	llvm function passes [0]
  time: 0.000; rss: 90MB	llvm module passes [0]
  time: 0.172; rss: 89MB	codegen passes [0]
  time: 0.000; rss: 89MB	codegen passes [0]
time: 0.182; rss: 89MB	LLVM passes
time: 0.000; rss: 89MB	serialize work products
  time: 0.196; rss: 79MB	running linker
time: 0.197; rss: 79MB	linking
done
