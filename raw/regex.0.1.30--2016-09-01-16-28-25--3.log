commit 933f4717104aba3af71ced7e5a513f8c0bd6077a
Merge: 147371f 3d766a0
Author: bors <bors@rust-lang.org>
Date:   Thu Sep 1 11:56:51 2016 -0700

    Auto merge of #34494 - CensoredUsername:allow_sysV64_abi, r=nagisa
    
    Allow specification of the system V AMD64 ABI constraint.
    
    This can be specified using `extern "sysV64" fn` on all platforms.
    
    This ABI is used as the C ABI on unix platforms, but can only be specified there using extern "C". It was impossible to specify on other platforms. Meanwhile the win64 ABI, which was the extern "C" ABI on the windows platform could be specified on other platforms using extern "win64".
    
    This pull request adds the the "sysV64" ABI constraint which exposes this calling convention on platforms where it is not the C ABI.
rustc: ./regex.0.1.30
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling regex v0.1.30 (file:///root/benchmarks/regex.0.1.30)
time: 0.053; rss: 57MB	parsing
Lines of code:             8558
Pre-expansion node count:  58080
time: 0.005; rss: 57MB	configuration
time: 0.000; rss: 57MB	recursion limit
time: 0.000; rss: 57MB	crate injection
time: 0.000; rss: 57MB	plugin loading
time: 0.000; rss: 57MB	plugin registration
time: 0.029; rss: 79MB	expansion
time: 0.000; rss: 79MB	maybe building test harness
time: 0.003; rss: 79MB	assigning node ids
Post-expansion node count: 68152
time: 0.000; rss: 79MB	checking for inline asm in case the target doesn't support it
time: 0.001; rss: 79MB	complete gated feature checking
time: 0.001; rss: 80MB	collecting defs
time: 0.001; rss: 80MB	external crate/lib resolution
time: 0.003; rss: 80MB	early lint checks
time: 0.000; rss: 80MB	AST validation
time: 0.006; rss: 81MB	name resolution
time: 0.008; rss: 92MB	lowering ast -> hir
time: 0.002; rss: 94MB	indexing hir
time: 0.001; rss: 94MB	attribute checking
time: 0.001; rss: 85MB	language item collection
time: 0.001; rss: 85MB	lifetime resolution
time: 0.000; rss: 85MB	looking for entry point
time: 0.000; rss: 85MB	looking for plugin registrar
time: 0.006; rss: 89MB	region resolution
time: 0.001; rss: 89MB	loop checking
time: 0.001; rss: 89MB	static item recursion checking
time: 0.008; rss: 89MB	compute_incremental_hashes_map
time: 0.000; rss: 89MB	load_dep_graph
time: 0.008; rss: 91MB	type collecting
time: 0.000; rss: 91MB	variance inference
time: 0.019; rss: 93MB	coherence checking
time: 0.009; rss: 93MB	wf checking
time: 0.258; rss: 104MB	item-types checking
time: 0.147; rss: 109MB	item-bodies checking
time: 0.000; rss: 109MB	drop-impl checking
time: 0.027; rss: 109MB	const checking
time: 0.004; rss: 109MB	privacy checking
time: 0.001; rss: 109MB	stability index
time: 0.002; rss: 109MB	intrinsic checking
time: 0.001; rss: 109MB	effect checking
time: 0.004; rss: 109MB	match checking
time: 0.002; rss: 109MB	liveness checking
time: 0.008; rss: 109MB	rvalue checking
time: 0.042; rss: 125MB	MIR dump
time: 0.021; rss: 125MB	MIR passes
time: 0.021; rss: 125MB	borrow checking
time: 0.000; rss: 125MB	reachability checking
time: 0.002; rss: 125MB	death checking
time: 0.002; rss: 125MB	stability checking
time: 0.000; rss: 125MB	unused lib feature checking
time: 0.025; rss: 125MB	lint checking
time: 0.000; rss: 125MB	resolving dependency formats
time: 0.018; rss: 127MB	Prepare MIR codegen passes
  time: 0.162; rss: 136MB	write metadata
  time: 0.045; rss: 137MB	translation item collection
  time: 0.007; rss: 139MB	codegen unit partitioning
  time: 0.013; rss: 163MB	internalize symbols
time: 0.646; rss: 156MB	translation
time: 0.000; rss: 156MB	assert dep graph
time: 0.000; rss: 156MB	serialize dep graph
  time: 0.036; rss: 112MB	llvm function passes [0]
  time: 0.020; rss: 114MB	llvm module passes [0]
  time: 0.677; rss: 117MB	codegen passes [0]
  time: 0.001; rss: 117MB	codegen passes [0]
time: 0.792; rss: 117MB	LLVM passes
time: 0.000; rss: 117MB	serialize work products
time: 0.065; rss: 89MB	linking
done
