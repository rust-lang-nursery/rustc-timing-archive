commit a29c49f5cca849cd5ac79b3cd70b934bb33cf4e6
Merge: 0b2c356 f5827d0
Author: bors <bors@rust-lang.org>
Date:   Tue Oct 11 23:36:29 2016 -0700

    Auto merge of #37095 - petrochenkov:metactor, r=alexcrichton
    
    Temporary fix for metadata decoding for struct constructors
    
    Same as https://github.com/rust-lang/rust/pull/37078, but for nightly.
    Ideally, metadata lookup functions should "just work" for constructor ids, but this fixes the issue as well.
    
    Fixes https://github.com/rust-lang/rust/issues/37026
    r? @alexcrichton
rustc: ./syntex-0.42.2-incr-clean
RUSTFLAGS="-Z incremental=incr" \
    cargo rustc -p syntex_syntax -- -Ztime-passes -Zinput-stats -Z incremental-info
   Compiling syntex_syntax v0.42.0
time: 0.156; rss: 70MB	parsing
Lines of code:             33687
Pre-expansion node count:  224033
time: 0.000; rss: 70MB	recursion limit
time: 0.000; rss: 70MB	crate injection
time: 0.000; rss: 70MB	plugin loading
time: 0.000; rss: 70MB	plugin registration
time: 0.363; rss: 138MB	expansion
time: 0.000; rss: 138MB	maybe building test harness
time: 0.007; rss: 138MB	maybe creating a macro crate
Post-expansion node count: 641571
time: 0.000; rss: 138MB	checking for inline asm in case the target doesn't support it
time: 0.016; rss: 138MB	complete gated feature checking
time: 0.026; rss: 138MB	early lint checks
time: 0.009; rss: 138MB	AST validation
time: 0.123; rss: 153MB	name resolution
time: 0.122; rss: 194MB	lowering ast -> hir
time: 0.021; rss: 201MB	indexing hir
time: 0.007; rss: 201MB	attribute checking
time: 0.006; rss: 153MB	language item collection
time: 0.012; rss: 153MB	lifetime resolution
time: 0.000; rss: 153MB	looking for entry point
time: 0.000; rss: 153MB	looking for plugin registrar
time: 0.067; rss: 163MB	region resolution
time: 0.006; rss: 163MB	loop checking
time: 0.006; rss: 163MB	static item recursion checking
time: 0.265; rss: 164MB	compute_incremental_hashes_map
time: 0.000; rss: 164MB	load_dep_graph
time: 0.044; rss: 169MB	type collecting
time: 0.001; rss: 169MB	variance inference
time: 0.040; rss: 173MB	coherence checking
time: 0.099; rss: 175MB	wf checking
time: 0.202; rss: 180MB	item-types checking
time: 4.136; rss: 221MB	item-bodies checking
time: 0.000; rss: 221MB	drop-impl checking
time: 0.337; rss: 224MB	const checking
time: 0.057; rss: 224MB	privacy checking
time: 0.007; rss: 224MB	stability index
time: 0.023; rss: 224MB	intrinsic checking
time: 0.020; rss: 224MB	effect checking
time: 0.059; rss: 224MB	match checking
time: 0.091; rss: 218MB	liveness checking
time: 0.297; rss: 218MB	rvalue checking
time: 0.672; rss: 395MB	MIR dump
  time: 0.064; rss: 401MB	SimplifyCfg
  time: 0.087; rss: 401MB	QualifyAndPromoteConstants
  time: 0.113; rss: 401MB	TypeckMir
  time: 0.005; rss: 401MB	SimplifyBranches
  time: 0.032; rss: 401MB	SimplifyCfg
time: 0.302; rss: 401MB	MIR passes
time: 0.722; rss: 405MB	borrow checking
time: 0.022; rss: 405MB	reachability checking
time: 0.048; rss: 405MB	death checking
time: 0.045; rss: 406MB	stability checking
time: 0.000; rss: 406MB	unused lib feature checking
time: 0.235; rss: 406MB	lint checking
time: 0.000; rss: 406MB	resolving dependency formats
  time: 0.004; rss: 406MB	NoLandingPads
  time: 0.028; rss: 406MB	SimplifyCfg
  time: 0.096; rss: 413MB	EraseRegions
  time: 0.012; rss: 413MB	AddCallGuards
  time: 1.080; rss: 433MB	ElaborateDrops
  time: 0.003; rss: 433MB	NoLandingPads
  time: 0.054; rss: 433MB	SimplifyCfg
  time: 0.031; rss: 433MB	InstCombine
  time: 0.012; rss: 433MB	Deaggregator
  time: 0.003; rss: 433MB	CopyPropagation
  time: 0.010; rss: 433MB	AddCallGuards
  time: 0.003; rss: 433MB	PreTrans
time: 1.335; rss: 433MB	Prepare MIR codegen passes
  time: 0.282; rss: 440MB	write metadata
  time: 0.491; rss: 449MB	translation item collection
  time: 0.074; rss: 455MB	codegen unit partitioning
  time: 0.061; rss: 704MB	internalize symbols
time: 5.815; rss: 584MB	translation
time: 0.000; rss: 584MB	assert dep graph
time: 0.000; rss: 584MB	serialize dep graph
incremental: re-using 0 out of 1 modules
  time: 0.518; rss: 406MB	llvm function passes [0]
  time: 0.249; rss: 414MB	llvm module passes [0]
  time: 10.078; rss: 405MB	codegen passes [0]
  time: 0.001; rss: 407MB	codegen passes [0]
time: 11.768; rss: 407MB	LLVM passes
time: 0.000; rss: 407MB	serialize work products
time: 0.660; rss: 102MB	linking
done
