commit 49c36bf16f80a9d9d4e96172b1bc8cb7279de468
Merge: ac919fc 4752367
Author: bors <bors@rust-lang.org>
Date:   Thu Nov 3 22:58:55 2016 -0700

    Auto merge of #36306 - nagisa:mir-local-cleanup, r=eddyb
    
    A way to remove otherwise unused locals from MIR
    
    There is a certain amount of desire for a pass which cleans up the provably unused variables (no assignments or reads). There has been an implementation of such pass by @scottcarr, and another (two!) implementations by me in my own dataflow efforts.
    
    PR like https://github.com/rust-lang/rust/pull/35916 proves that this pass is useful even on its own, which is why I cherry-picked it out from my dataflow effort.
    
    @nikomatsakis previously expressed concerns over this pass not seeming to be very cheap to run and therefore unsuitable for regular cleanup duties. Turns out, regular cleanup of local declarations is not at all necessary, at least now, because majority of passes simply do not (or should not) care about them. Thatâ€™s why it is viable to only run this pass once (perhaps a few more times in the future?) per function, right before translation.
    
    r? @eddyb or @nikomatsakis
rustc: ./syntex-0.42.2
cargo rustc -p syntex_syntax -- -Ztime-passes -Zinput-stats
   Compiling syntex_syntax v0.42.0
time: 0.110; rss: 75MB	parsing
Lines of code:             33687
Pre-expansion node count:  224033
time: 0.000; rss: 75MB	recursion limit
time: 0.000; rss: 75MB	crate injection
time: 0.000; rss: 75MB	plugin loading
time: 0.000; rss: 75MB	plugin registration
time: 0.265; rss: 147MB	expansion
time: 0.000; rss: 147MB	maybe building test harness
time: 0.007; rss: 147MB	maybe creating a macro crate
Post-expansion node count: 641571
time: 0.000; rss: 147MB	checking for inline asm in case the target doesn't support it
time: 0.013; rss: 147MB	complete gated feature checking
time: 0.024; rss: 147MB	early lint checks
time: 0.007; rss: 147MB	AST validation
time: 0.084; rss: 162MB	name resolution
time: 0.044; rss: 189MB	lowering ast -> hir
time: 0.008; rss: 200MB	indexing hir
time: 0.006; rss: 200MB	attribute checking
time: 0.004; rss: 149MB	language item collection
time: 0.010; rss: 149MB	lifetime resolution
time: 0.000; rss: 149MB	looking for entry point
time: 0.000; rss: 149MB	looking for plugin registrar
time: 0.043; rss: 161MB	region resolution
time: 0.005; rss: 161MB	loop checking
time: 0.004; rss: 161MB	static item recursion checking
time: 0.530; rss: 163MB	compute_incremental_hashes_map
time: 0.000; rss: 163MB	load_dep_graph
time: 0.043; rss: 168MB	type collecting
time: 0.001; rss: 168MB	variance inference
time: 0.033; rss: 172MB	coherence checking
time: 0.095; rss: 173MB	wf checking
time: 0.184; rss: 179MB	item-types checking
time: 3.680; rss: 229MB	item-bodies checking
time: 0.000; rss: 229MB	drop-impl checking
time: 0.242; rss: 232MB	const checking
time: 0.046; rss: 232MB	privacy checking
time: 0.005; rss: 232MB	stability index
time: 0.019; rss: 232MB	intrinsic checking
time: 0.016; rss: 232MB	effect checking
time: 0.048; rss: 232MB	match checking
time: 0.050; rss: 226MB	liveness checking
time: 0.204; rss: 226MB	rvalue checking
time: 0.401; rss: 414MB	MIR dump
  time: 0.056; rss: 417MB	SimplifyCfg
  time: 0.074; rss: 418MB	QualifyAndPromoteConstants
  time: 0.103; rss: 418MB	TypeckMir
  time: 0.004; rss: 418MB	SimplifyBranches
  time: 0.030; rss: 418MB	SimplifyCfg
time: 0.269; rss: 418MB	MIR cleanup and validation
time: 0.541; rss: 418MB	borrow checking
time: 0.017; rss: 418MB	reachability checking
time: 0.039; rss: 418MB	death checking
time: 0.038; rss: 418MB	stability checking
time: 0.000; rss: 418MB	unused lib feature checking
time: 0.208; rss: 418MB	lint checking
time: 0.000; rss: 418MB	resolving dependency formats
  time: 0.003; rss: 418MB	NoLandingPads
  time: 0.026; rss: 418MB	SimplifyCfg
  time: 0.067; rss: 427MB	EraseRegions
  time: 0.011; rss: 427MB	AddCallGuards
  time: 0.280; rss: 449MB	ElaborateDrops
  time: 0.003; rss: 449MB	NoLandingPads
  time: 0.054; rss: 446MB	SimplifyCfg
  time: 0.030; rss: 446MB	InstCombine
  time: 0.012; rss: 446MB	Deaggregator
  time: 0.002; rss: 446MB	CopyPropagation
  time: 0.035; rss: 446MB	SimplifyLocals
  time: 0.010; rss: 446MB	AddCallGuards
  time: 0.002; rss: 446MB	PreTrans
time: 0.536; rss: 446MB	MIR optimisations
  time: 0.058; rss: 453MB	write metadata
  time: 0.392; rss: 464MB	translation item collection
  time: 0.056; rss: 473MB	codegen unit partitioning
  time: 0.048; rss: 717MB	internalize symbols
time: 4.632; rss: 717MB	translation
time: 0.000; rss: 717MB	assert dep graph
time: 0.000; rss: 717MB	serialize dep graph
  time: 0.508; rss: 409MB	llvm function passes [0]
  time: 0.243; rss: 418MB	llvm module passes [0]
  time: 9.946; rss: 416MB	codegen passes [0]
  time: 0.000; rss: 414MB	codegen passes [0]
time: 11.439; rss: 414MB	LLVM passes
time: 0.000; rss: 414MB	serialize work products
time: 0.328; rss: 104MB	linking
done
