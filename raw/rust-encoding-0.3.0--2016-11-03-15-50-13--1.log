commit ac919fcd9d4a958baf99b2f2ed5c3d38a2ebf9d0
Merge: f9f45c6 b4f910d
Author: bors <bors@rust-lang.org>
Date:   Wed Nov 2 22:58:01 2016 -0700

    Auto merge of #37541 - nikomatsakis:issue-37291, r=brson
    
    Use impl obligations as initial environment for specialization
    
    This corrects a small regression in specialization that crept in, I think as part of the refactoring to introduce arenas. I also made an experiment (in the last commit) to cleanup the code to be more aggressive about normalization. As the commit log notes, I am not 100% sure that this is correct, but it feels safer, and I think that at worst it yields *more* ICEs (as opposed to admitting faulty code). I'll schedule a crater run to check beyond the testbase.
    
    Fixes #37291.
    
    r? @aturon
rustc: ./rust-encoding-0.3.0
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling encoding v0.3.0-dev (file:///root/benchmarks/rust-encoding-0.3.0)
time: 0.019; rss: 50MB	parsing
Lines of code:             5757
Pre-expansion node count:  26615
time: 0.000; rss: 50MB	recursion limit
time: 0.000; rss: 50MB	crate injection
time: 0.000; rss: 50MB	plugin loading
time: 0.000; rss: 50MB	plugin registration
time: 0.035; rss: 74MB	expansion
time: 0.000; rss: 74MB	maybe building test harness
time: 0.000; rss: 74MB	maybe creating a macro crate
Post-expansion node count: 37904
time: 0.000; rss: 74MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 74MB	complete gated feature checking
time: 0.001; rss: 74MB	early lint checks
time: 0.000; rss: 74MB	AST validation
time: 0.005; rss: 76MB	name resolution
time: 0.003; rss: 77MB	lowering ast -> hir
time: 0.000; rss: 77MB	indexing hir
time: 0.000; rss: 77MB	attribute checking
time: 0.000; rss: 76MB	language item collection
time: 0.000; rss: 76MB	lifetime resolution
time: 0.000; rss: 76MB	looking for entry point
time: 0.000; rss: 76MB	looking for plugin registrar
time: 0.002; rss: 78MB	region resolution
time: 0.000; rss: 78MB	loop checking
time: 0.000; rss: 78MB	static item recursion checking
time: 0.019; rss: 78MB	compute_incremental_hashes_map
time: 0.000; rss: 78MB	load_dep_graph
time: 0.008; rss: 80MB	type collecting
time: 0.000; rss: 80MB	variance inference
time: 0.014; rss: 81MB	coherence checking
time: 0.011; rss: 81MB	wf checking
time: 0.009; rss: 83MB	item-types checking
time: 0.125; rss: 88MB	item-bodies checking
time: 0.000; rss: 88MB	drop-impl checking
time: 0.009; rss: 88MB	const checking
time: 0.001; rss: 88MB	privacy checking
time: 0.000; rss: 88MB	stability index
time: 0.001; rss: 88MB	intrinsic checking
time: 0.000; rss: 88MB	effect checking
time: 0.004; rss: 88MB	match checking
time: 0.001; rss: 88MB	liveness checking
time: 0.005; rss: 88MB	rvalue checking
time: 0.018; rss: 97MB	MIR dump
  time: 0.002; rss: 97MB	SimplifyCfg
  time: 0.003; rss: 97MB	QualifyAndPromoteConstants
  time: 0.004; rss: 97MB	TypeckMir
  time: 0.000; rss: 97MB	SimplifyBranches
  time: 0.001; rss: 97MB	SimplifyCfg
time: 0.011; rss: 97MB	MIR passes
time: 0.019; rss: 98MB	borrow checking
time: 0.000; rss: 98MB	reachability checking
time: 0.001; rss: 98MB	death checking
time: 0.001; rss: 98MB	stability checking
time: 0.000; rss: 98MB	unused lib feature checking
time: 0.015; rss: 98MB	lint checking
time: 0.000; rss: 98MB	resolving dependency formats
  time: 0.000; rss: 98MB	NoLandingPads
  time: 0.001; rss: 98MB	SimplifyCfg
  time: 0.002; rss: 98MB	EraseRegions
  time: 0.000; rss: 98MB	AddCallGuards
  time: 0.022; rss: 98MB	ElaborateDrops
  time: 0.000; rss: 98MB	NoLandingPads
  time: 0.001; rss: 98MB	SimplifyCfg
  time: 0.001; rss: 98MB	InstCombine
  time: 0.001; rss: 98MB	Deaggregator
  time: 0.000; rss: 98MB	CopyPropagation
  time: 0.000; rss: 98MB	AddCallGuards
  time: 0.000; rss: 98MB	PreTrans
time: 0.030; rss: 98MB	Prepare MIR codegen passes
  time: 0.004; rss: 98MB	write metadata
  time: 0.151; rss: 182MB	translation item collection
  time: 0.003; rss: 184MB	codegen unit partitioning
  time: 0.002; rss: 209MB	internalize symbols
time: 0.414; rss: 209MB	translation
time: 0.000; rss: 209MB	assert dep graph
time: 0.000; rss: 209MB	serialize dep graph
  time: 0.026; rss: 110MB	llvm function passes [0]
  time: 0.059; rss: 117MB	llvm module passes [0]
  time: 0.621; rss: 123MB	codegen passes [0]
  time: 0.000; rss: 123MB	codegen passes [0]
time: 0.760; rss: 123MB	LLVM passes
time: 0.000; rss: 123MB	serialize work products
time: 0.038; rss: 93MB	linking
done
