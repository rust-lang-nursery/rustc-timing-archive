commit f59fd4642534e80a61982ce3e10c147d97054212
Merge: ee8b257 b980f22
Author: bors <bors@rust-lang.org>
Date:   Fri Feb 26 13:38:46 2016 +0000

    Auto merge of #31846 - alexcrichton:better-disable-jemallc, r=brson
    
    The `--disable-jemalloc` configure option has a failure mode where it will
    create a distribution that is not compatible with other compilers. For example
    the nightly for Linux will assume that it will link to jemalloc by default as
    an allocator for executable crates. If, however, a standard library is used
    which was built via `./configure --disable-jemalloc` then this will fail
    because the jemalloc crate wasn't built.
    
    While this seems somewhat reasonable as a niche situation, the same mechanism is
    used for disabling jemalloc for platforms that just don't support it. For
    example if the rumprun target is compiled then the sibiling Linux target *also*
    doesn't have jemalloc. This is currently a problem for our cross-build nightlies
    which build many targets. If rumprun is also built, it will disable jemalloc for
    all targets, which isn't desired.
    
    This commit moves the platform-specific disabling of jemalloc as hardcoded logic
    into the makefiles that is scoped per-platform. This way when configuring
    multiple targets **without the `--disable-jemalloc` option specified** all
    targets will get jemalloc as they should.
rustc: ./jld-day15-parser
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling day15 v0.1.0 (file:///root/benchmarks/jld-day15-parser)
time: 0.001; rss: 36MB	parsing
Lines of code:             72
Pre-expansion node count:  673
time: 0.000; rss: 36MB	configuration 1
time: 0.000; rss: 36MB	recursion limit
time: 0.000; rss: 36MB	gated macro checking
time: 0.000; rss: 36MB	crate injection
time: 0.003; rss: 39MB	macro loading
time: 0.000; rss: 39MB	plugin loading
time: 0.000; rss: 39MB	plugin registration
time: 0.002; rss: 39MB	expansion
time: 0.000; rss: 39MB	complete gated feature checking 1
time: 0.000; rss: 39MB	configuration 2
time: 0.000; rss: 39MB	gated configuration checking
time: 0.000; rss: 39MB	maybe building test harness
time: 0.000; rss: 39MB	prelude injection
time: 0.000; rss: 39MB	checking that all macro invocations are gone
time: 0.000; rss: 39MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 39MB	complete gated feature checking 2
time: 0.000; rss: 39MB	const fn bodies and arguments
Post-expansion node count: 1176
time: 0.000; rss: 39MB	assigning node ids
time: 0.000; rss: 39MB	lowering ast -> hir
time: 0.000; rss: 39MB	indexing hir
time: 0.000; rss: 39MB	attribute checking
time: 0.000; rss: 39MB	early lint checks
time: 0.001; rss: 39MB	external crate/lib resolution
time: 0.000; rss: 39MB	language item collection
time: 0.001; rss: 47MB	resolution
time: 0.000; rss: 47MB	lifetime resolution
time: 0.000; rss: 47MB	looking for entry point
time: 0.000; rss: 47MB	looking for plugin registrar
time: 0.000; rss: 47MB	region resolution
time: 0.000; rss: 47MB	loop checking
time: 0.000; rss: 47MB	static item recursion checking
time: 0.001; rss: 52MB	type collecting
time: 0.000; rss: 52MB	variance inference
time: 0.005; rss: 56MB	coherence checking
time: 0.006; rss: 62MB	wf checking
time: 0.000; rss: 62MB	item-types checking
time: 1.603; rss: 141MB	item-bodies checking
time: 0.000; rss: 141MB	drop-impl checking
time: 0.005; rss: 143MB	const checking
time: 0.000; rss: 143MB	privacy checking
time: 0.000; rss: 143MB	stability index
time: 0.000; rss: 143MB	intrinsic checking
time: 0.000; rss: 143MB	effect checking
time: 0.000; rss: 143MB	match checking
time: 0.000; rss: 143MB	liveness checking
time: 0.002; rss: 143MB	rvalue checking
time: 0.001; rss: 143MB	MIR dump
time: 0.000; rss: 143MB	MIR passes
time: 0.001; rss: 143MB	borrow checking
time: 0.000; rss: 143MB	reachability checking
time: 0.000; rss: 143MB	death checking
time: 0.000; rss: 143MB	stability checking
time: 0.000; rss: 143MB	unused lib feature checking
time: 0.003; rss: 144MB	lint checking
time: 0.001; rss: 144MB	resolving dependency formats
time: 0.000; rss: 144MB	erasing regions from MIR
  time: 12.176; rss: 179MB	translation item collection
  time: 0.000; rss: 197MB	write metadata
time: 33.951; rss: 197MB	translation
  time: 0.015; rss: 99MB	llvm function passes [0]
  time: 0.002; rss: 99MB	llvm module passes [0]
  time: 0.271; rss: 104MB	codegen passes [0]
  time: 0.000; rss: 97MB	codegen passes [0]
time: 0.297; rss: 97MB	LLVM passes
  time: 0.105; rss: 101MB	running linker
time: 0.106; rss: 101MB	linking
done
