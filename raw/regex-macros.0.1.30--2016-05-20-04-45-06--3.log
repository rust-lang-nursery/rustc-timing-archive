commit d27bdafc3eaab2729d664f82b7d650782640f31a
Merge: cde0fa5 0d2c26c
Author: bors <bors@rust-lang.org>
Date:   Fri May 20 00:34:50 2016 -0700

    Auto merge of #33553 - alexcrichton:cdylibs, r=brson
    
    rustc: Add a new crate type, cdylib
    
    This commit is an implementation of [RFC 1510] which adds a new crate type,
    `cdylib`, to the compiler. This new crate type differs from the existing `dylib`
    crate type in a few key ways:
    
    * No metadata is present in the final artifact
    * Symbol visibility rules are the same as executables, that is only reachable
      `extern` functions are visible symbols
    * LTO is allowed
    * All libraries are always linked statically
    
    This commit is relatively simple by just plubming the compiler with another
    crate type which takes different branches here and there. The only major change
    is an implementation of the `Linker::export_symbols` function on Unix which now
    actually does something. This helps restrict the public symbols from a cdylib on
    Unix.
    
    With this PR a "hello world" `cdylib` is 7.2K while the same `dylib` is 2.4MB,
    which is some nice size savings!
    
    [RFC 1510]: https://github.com/rust-lang/rfcs/pull/1510
    
    Closes #33132
rustc: ./regex-macros.0.1.30
cd regex_macros && cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling regex_macros v0.1.17 (file:///root/benchmarks/regex-macros.0.1.30/regex_macros)
time: 0.002; rss: 46MB	parsing
Lines of code:             639
Pre-expansion node count:  2180
time: 0.001; rss: 46MB	configuration 1
time: 0.000; rss: 46MB	recursion limit
time: 0.000; rss: 46MB	crate injection
time: 0.018; rss: 84MB	macro loading
time: 0.000; rss: 84MB	plugin loading
time: 0.000; rss: 84MB	plugin registration
time: 0.032; rss: 89MB	expansion
time: 0.010; rss: 89MB	configuration 2
time: 0.000; rss: 89MB	gated configuration checking
time: 0.005; rss: 89MB	maybe building test harness
time: 0.005; rss: 89MB	prelude injection
time: 0.000; rss: 89MB	checking that all macro invocations are gone
time: 0.000; rss: 89MB	checking for inline asm in case the target doesn't support it
time: 0.001; rss: 89MB	complete gated feature checking
Post-expansion node count: 69751
time: 0.004; rss: 89MB	assigning node ids
time: 0.000; rss: 89MB	collecting defs
time: 0.105; rss: 174MB	external crate/lib resolution
time: 0.003; rss: 174MB	early lint checks
time: 0.010; rss: 179MB	name resolution
time: 0.006; rss: 181MB	lowering ast -> hir
time: 0.001; rss: 181MB	indexing hir
time: 0.000; rss: 181MB	attribute checking
time: 0.001; rss: 175MB	language item collection
time: 0.000; rss: 175MB	lifetime resolution
time: 0.000; rss: 175MB	looking for entry point
time: 0.000; rss: 175MB	looking for plugin registrar
time: 0.002; rss: 177MB	region resolution
time: 0.000; rss: 177MB	loop checking
time: 0.000; rss: 177MB	static item recursion checking
time: 0.000; rss: 177MB	load_dep_graph
time: 0.014; rss: 181MB	type collecting
time: 0.000; rss: 181MB	variance inference
time: 0.010; rss: 182MB	coherence checking
time: 0.007; rss: 183MB	wf checking
time: 0.001; rss: 183MB	item-types checking
time: 1.194; rss: 201MB	item-bodies checking
makefile:2: recipe for target 'all' failed
done
