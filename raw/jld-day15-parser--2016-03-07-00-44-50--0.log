commit 6d262db4482e13ec05eb113e57e26d249698b4cf
Merge: 6eb81a1 a409076
Author: bors <bors@rust-lang.org>
Date:   Mon Mar 7 04:25:27 2016 +0000

    Auto merge of #32066 - ruud-v-a:fma, r=alexcrichton
    
    This adds support for fused multiply-add and multiply-subtract vector intrinsics for 128 and 256-bit vectors of `f32` and `f64`. These correspond to the intrinsics [listed here](https://software.intel.com/en-us/node/523929) except for the `_ss` and `_sd` variants. The intrinsics added are:
    
     * `fmadd`
     * `fmaddsub`
     * `fmsub`
     * `fmsubadd`
     * `fnmadd`
     * `fnmsub`
    
    The “fma” target feature must be enabled by passing `-C target-feature=+fma` to rustc when using these, otherwise LLVM will complain.
    
    I verified locally that the `x86_mm256_fmadd_ps` and `x86_mm256_fmsub_ps` work.
rustc: ./jld-day15-parser
cargo rustc -- -Ztime-passes -Zinput-stats
    Updating registry `https://github.com/rust-lang/crates.io-index`
   Compiling combine v1.2.1
   Compiling day15 v0.1.0 (file:///root/benchmarks/jld-day15-parser)
time: 0.001; rss: 36MB	parsing
Lines of code:             72
Pre-expansion node count:  673
time: 0.000; rss: 36MB	configuration 1
time: 0.000; rss: 36MB	recursion limit
time: 0.000; rss: 36MB	gated macro checking
time: 0.000; rss: 36MB	crate injection
time: 0.003; rss: 39MB	macro loading
time: 0.000; rss: 39MB	plugin loading
time: 0.000; rss: 39MB	plugin registration
time: 0.002; rss: 39MB	expansion
time: 0.000; rss: 39MB	complete gated feature checking 1
time: 0.000; rss: 39MB	configuration 2
time: 0.000; rss: 39MB	gated configuration checking
time: 0.000; rss: 39MB	maybe building test harness
time: 0.000; rss: 39MB	prelude injection
time: 0.000; rss: 39MB	checking that all macro invocations are gone
time: 0.000; rss: 39MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 39MB	complete gated feature checking 2
time: 0.000; rss: 39MB	const fn bodies and arguments
Post-expansion node count: 1176
time: 0.000; rss: 39MB	assigning node ids
time: 0.000; rss: 39MB	lowering ast -> hir
time: 0.000; rss: 39MB	indexing hir
time: 0.000; rss: 39MB	attribute checking
time: 0.000; rss: 39MB	early lint checks
time: 0.001; rss: 43MB	external crate/lib resolution
time: 0.000; rss: 43MB	language item collection
time: 0.001; rss: 47MB	resolution
time: 0.000; rss: 47MB	lifetime resolution
time: 0.000; rss: 47MB	looking for entry point
time: 0.000; rss: 47MB	looking for plugin registrar
time: 0.000; rss: 47MB	region resolution
time: 0.000; rss: 47MB	loop checking
time: 0.000; rss: 47MB	static item recursion checking
time: 0.001; rss: 52MB	type collecting
time: 0.000; rss: 52MB	variance inference
time: 0.005; rss: 56MB	coherence checking
time: 0.006; rss: 64MB	wf checking
time: 0.000; rss: 64MB	item-types checking
time: 1.579; rss: 129MB	item-bodies checking
time: 0.000; rss: 129MB	drop-impl checking
time: 0.005; rss: 142MB	const checking
time: 0.000; rss: 142MB	privacy checking
time: 0.000; rss: 142MB	stability index
time: 0.000; rss: 142MB	intrinsic checking
time: 0.000; rss: 142MB	effect checking
time: 0.000; rss: 142MB	match checking
time: 0.000; rss: 142MB	liveness checking
time: 0.002; rss: 142MB	rvalue checking
time: 0.001; rss: 142MB	MIR dump
time: 0.000; rss: 142MB	MIR passes
time: 0.001; rss: 143MB	borrow checking
time: 0.000; rss: 143MB	reachability checking
time: 0.000; rss: 143MB	death checking
time: 0.000; rss: 143MB	stability checking
time: 0.000; rss: 143MB	unused lib feature checking
time: 0.003; rss: 143MB	lint checking
time: 0.001; rss: 143MB	resolving dependency formats
time: 0.000; rss: 143MB	erasing regions from MIR
  time: 11.968; rss: 182MB	translation item collection
  time: 0.000; rss: 207MB	write metadata
time: 32.579; rss: 207MB	translation
  time: 0.013; rss: 96MB	llvm function passes [0]
  time: 0.001; rss: 96MB	llvm module passes [0]
  time: 0.267; rss: 102MB	codegen passes [0]
  time: 0.000; rss: 95MB	codegen passes [0]
time: 0.290; rss: 95MB	LLVM passes
  time: 0.109; rss: 99MB	running linker
time: 0.110; rss: 99MB	linking
done
