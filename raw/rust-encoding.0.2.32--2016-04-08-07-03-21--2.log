commit 8694b4ffe9b223c351e50c10bd8ea4e23af58baa
Merge: dde35e7 8128817
Author: bors <bors@rust-lang.org>
Date:   Fri Apr 8 03:20:11 2016 -0700

    Auto merge of #32695 - sfackler:default-buf-size, r=alexcrichton
    
    Drop the default buffer size to 8K
    
    The 64k capacity was picked by me a couple of years ago in the initial
    implementation of buffered IO adaptors:
    https://github.com/rust-lang/rust/pull/9091/files#diff-b131eeef531ad098b32f49695a031008R62.
    64K was picked for symmetry with libuv, which we no longer use.
    
    64K is *way* larger than the default size of any other language that I
    can find. C, C++, and Java default to 8K, and Go defaults to 4K. There
    have been a variety of issues filed relating to this such as #31885.
    
    Closes #31885
rustc: ./rust-encoding.0.2.32
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling encoding v0.2.32 (file:///root/benchmarks/rust-encoding.0.2.32)
time: 0.030; rss: 40MB	parsing
Lines of code:             6441
Pre-expansion node count:  30335
time: 0.006; rss: 41MB	configuration 1
time: 0.000; rss: 41MB	recursion limit
time: 0.000; rss: 41MB	gated macro checking
time: 0.000; rss: 41MB	crate injection
time: 0.003; rss: 43MB	macro loading
time: 0.000; rss: 43MB	plugin loading
time: 0.000; rss: 43MB	plugin registration
time: 0.045; rss: 46MB	expansion
time: 0.001; rss: 46MB	complete gated feature checking 1
time: 0.006; rss: 46MB	configuration 2
time: 0.000; rss: 46MB	gated configuration checking
time: 0.003; rss: 46MB	maybe building test harness
time: 0.003; rss: 46MB	prelude injection
time: 0.000; rss: 46MB	checking that all macro invocations are gone
time: 0.000; rss: 46MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 46MB	complete gated feature checking 2
time: 0.000; rss: 46MB	const fn bodies and arguments
Post-expansion node count: 41611
time: 0.003; rss: 46MB	assigning node ids
time: 0.008; rss: 48MB	lowering ast -> hir
time: 0.005; rss: 49MB	indexing hir
time: 0.000; rss: 49MB	attribute checking
time: 0.002; rss: 49MB	early lint checks
time: 0.001; rss: 49MB	external crate/lib resolution
time: 0.000; rss: 49MB	language item collection
time: 0.009; rss: 58MB	resolution
time: 0.001; rss: 58MB	lifetime resolution
time: 0.000; rss: 58MB	looking for entry point
time: 0.000; rss: 58MB	looking for plugin registrar
time: 0.005; rss: 59MB	region resolution
time: 0.000; rss: 59MB	loop checking
time: 0.000; rss: 59MB	static item recursion checking
time: 0.000; rss: 59MB	load_dep_graph
time: 0.005; rss: 61MB	type collecting
time: 0.000; rss: 61MB	variance inference
time: 0.022; rss: 78MB	coherence checking
time: 0.017; rss: 79MB	wf checking
time: 0.013; rss: 79MB	item-types checking
time: 0.217; rss: 89MB	item-bodies checking
time: 0.000; rss: 89MB	drop-impl checking
time: 0.011; rss: 89MB	const checking
time: 0.003; rss: 89MB	privacy checking
time: 0.000; rss: 89MB	stability index
time: 0.001; rss: 89MB	intrinsic checking
time: 0.000; rss: 89MB	effect checking
time: 0.006; rss: 89MB	match checking
time: 0.002; rss: 89MB	liveness checking
time: 0.006; rss: 90MB	rvalue checking
time: 0.029; rss: 96MB	MIR dump
time: 0.008; rss: 96MB	MIR passes
time: 0.022; rss: 96MB	borrow checking
time: 0.000; rss: 96MB	reachability checking
time: 0.002; rss: 96MB	death checking
time: 0.002; rss: 96MB	stability checking
time: 0.000; rss: 96MB	unused lib feature checking
time: 0.023; rss: 97MB	lint checking
time: 0.000; rss: 97MB	resolving dependency formats
time: 0.004; rss: 98MB	Prepare MIR codegen passes
  time: 0.028; rss: 110MB	translation item collection
  time: 0.058; rss: 141MB	write metadata
time: 0.402; rss: 141MB	translation
time: 0.000; rss: 141MB	assert dep graph
time: 0.000; rss: 141MB	serialize dep graph
  time: 0.027; rss: 106MB	llvm function passes [0]
  time: 0.051; rss: 110MB	llvm module passes [0]
  time: 0.586; rss: 116MB	codegen passes [0]
  time: 0.001; rss: 99MB	codegen passes [0]
time: 0.730; rss: 98MB	LLVM passes
time: 0.054; rss: 97MB	linking
done
