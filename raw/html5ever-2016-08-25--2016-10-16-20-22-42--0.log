commit 6572a463116a31efba8bfddb2e64ed659311b8a1
Merge: 6dc035e ee338c3
Author: bors <bors@rust-lang.org>
Date:   Sun Oct 16 04:22:21 2016 -0700

    Auto merge of #37129 - arielb1:erased-normal, r=eddyb
    
    normalize types every time HR regions are erased
    
    Associated type normalization is inhibited by higher-ranked regions.
    Therefore, every time we erase them, we must re-normalize.
    
    I was meaning to introduce this change some time ago, but we used
    to erase regions in generic context, which broke this terribly (because
    you can't always normalize in a generic context). That seems to be gone
    now.
    
    Ensure this by having a `erase_late_bound_regions_and_normalize`
    function.
    
    Fixes #37109 (the missing call was in mir::block).
    
    r? @eddyb
rustc: ./html5ever-2016-08-25
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling serde v0.8.9
   Compiling matches v0.1.2
   Compiling mac v0.0.2
   Compiling libc v0.2.16
   Compiling lazy_static v0.2.1
   Compiling void v1.0.2
   Compiling log v0.3.6
   Compiling rustc-serialize v0.3.19
   Compiling encoding_index_tests v0.1.4
   Compiling phf_shared v0.7.16
   Compiling unreachable v0.1.1
   Compiling utf-8 v0.6.0
   Compiling debug_unreachable v0.1.1
   Compiling encoding-index-simpchinese v1.20141219.5
   Compiling futf v0.1.2
   Compiling encoding-index-singlebyte v1.20141219.5
   Compiling encoding-index-tradchinese v1.20141219.5
   Compiling encoding-index-japanese v1.20141219.5
   Compiling phf v0.7.16
   Compiling encoding-index-korean v1.20141219.5
   Compiling rand v0.3.14
   Compiling encoding v0.2.33
   Compiling phf_generator v0.7.16
   Compiling phf_codegen v0.7.16
   Compiling string_cache v0.2.29
   Compiling tendril v0.2.3
   Compiling html5ever v0.5.4 (file:///root/benchmarks/html5ever-2016-08-25)
time: 0.046; rss: 49MB	parsing
Lines of code:             8210
Pre-expansion node count:  52238
time: 0.000; rss: 49MB	recursion limit
time: 0.000; rss: 49MB	crate injection
time: 0.000; rss: 49MB	plugin loading
time: 0.000; rss: 49MB	plugin registration
time: 1.357; rss: 102MB	expansion
time: 0.000; rss: 102MB	maybe building test harness
time: 0.002; rss: 102MB	maybe creating a macro crate
Post-expansion node count: 163524
time: 0.000; rss: 102MB	checking for inline asm in case the target doesn't support it
time: 0.003; rss: 102MB	complete gated feature checking
time: 0.008; rss: 102MB	early lint checks
time: 0.002; rss: 102MB	AST validation
time: 0.022; rss: 105MB	name resolution
time: 0.032; rss: 122MB	lowering ast -> hir
time: 0.009; rss: 125MB	indexing hir
time: 0.002; rss: 125MB	attribute checking
time: 0.002; rss: 103MB	language item collection
time: 0.003; rss: 103MB	lifetime resolution
time: 0.000; rss: 103MB	looking for entry point
time: 0.000; rss: 103MB	looking for plugin registrar
time: 0.024; rss: 108MB	region resolution
time: 0.002; rss: 108MB	loop checking
time: 0.003; rss: 108MB	static item recursion checking
time: 0.023; rss: 109MB	compute_incremental_hashes_map
time: 0.000; rss: 109MB	load_dep_graph
time: 0.009; rss: 111MB	type collecting
time: 0.000; rss: 111MB	variance inference
time: 0.025; rss: 114MB	coherence checking
time: 0.025; rss: 115MB	wf checking
time: 0.434; rss: 124MB	item-types checking
time: 0.520; rss: 135MB	item-bodies checking
time: 0.000; rss: 135MB	drop-impl checking
time: 0.073; rss: 138MB	const checking
time: 0.009; rss: 138MB	privacy checking
time: 0.002; rss: 138MB	stability index
time: 0.004; rss: 138MB	intrinsic checking
time: 0.004; rss: 138MB	effect checking
time: 0.026; rss: 138MB	match checking
time: 0.038; rss: 132MB	liveness checking
time: 0.029; rss: 132MB	rvalue checking
time: 0.141; rss: 181MB	MIR dump
  time: 0.010; rss: 171MB	SimplifyCfg
  time: 0.015; rss: 172MB	QualifyAndPromoteConstants
  time: 0.025; rss: 172MB	TypeckMir
  time: 0.000; rss: 172MB	SimplifyBranches
  time: 0.004; rss: 172MB	SimplifyCfg
time: 0.053; rss: 172MB	MIR passes
time: 0.092; rss: 180MB	borrow checking
time: 0.003; rss: 180MB	reachability checking
time: 0.008; rss: 180MB	death checking
time: 0.009; rss: 180MB	stability checking
time: 0.000; rss: 180MB	unused lib feature checking
time: 0.063; rss: 180MB	lint checking
time: 0.000; rss: 180MB	resolving dependency formats
  time: 0.000; rss: 180MB	NoLandingPads
  time: 0.004; rss: 180MB	SimplifyCfg
  time: 0.010; rss: 180MB	EraseRegions
  time: 0.001; rss: 180MB	AddCallGuards
  time: 0.075; rss: 184MB	ElaborateDrops
  time: 0.000; rss: 184MB	NoLandingPads
  time: 0.006; rss: 181MB	SimplifyCfg
  time: 0.008; rss: 181MB	InstCombine
  time: 0.001; rss: 181MB	Deaggregator
  time: 0.000; rss: 181MB	CopyPropagation
  time: 0.001; rss: 179MB	AddCallGuards
  time: 0.000; rss: 179MB	PreTrans
time: 0.108; rss: 179MB	Prepare MIR codegen passes
  time: 0.053; rss: 180MB	write metadata
  time: 0.050; rss: 182MB	translation item collection
  time: 0.005; rss: 182MB	codegen unit partitioning
  time: 0.006; rss: 197MB	internalize symbols
time: 0.370; rss: 168MB	translation
time: 0.000; rss: 168MB	assert dep graph
time: 0.000; rss: 168MB	serialize dep graph
  time: 0.020; rss: 103MB	llvm function passes [0]
  time: 0.012; rss: 104MB	llvm module passes [0]
  time: 0.455; rss: 107MB	codegen passes [0]
  time: 0.001; rss: 107MB	codegen passes [0]
time: 0.528; rss: 107MB	LLVM passes
time: 0.000; rss: 107MB	serialize work products
time: 0.058; rss: 90MB	linking
done
