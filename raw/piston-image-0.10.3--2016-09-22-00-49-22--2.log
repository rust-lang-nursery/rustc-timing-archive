commit 1cf592fa40ca4104b59b867817881ca056f408ad
Merge: 4f9812a 4ac3001
Author: bors <bors@rust-lang.org>
Date:   Wed Sep 21 19:17:24 2016 -0700

    Auto merge of #36551 - eddyb:meta-games, r=nikomatsakis
    
    Refactor away RBML from rustc_metadata.
    
    RBML and `ty{en,de}code` have had their long-overdue purge. Summary of changes:
    * Metadata is now a tree encoded in post-order and with relative backward references pointing to children nodes. With auto-deriving and type safety, this makes maintenance and adding new information to metadata painless and bug-free by default. It's also more compact and cache-friendly (cache misses should be proportional to the depth of the node being accessed, not the number of siblings as in EBML/RBML).
    * Metadata sizes have been reduced, for `libcore` it went down 16% (`8.38MB` -> `7.05MB`) and for `libstd` 14% (`3.53MB` -> `3.03MB`), while encoding more or less the same information
    * Specialization is used in the bundled `libserialize` (crates.io `rustc_serialize` remains unaffected) to customize the encoding (and more importantly, decoding) of various types, most notably those interned in the `TyCtxt`. Some of this abuses a soundness hole pending a fix (cc @aturon), but when that fix arrives, we'll move to macros 1.1 `#[derive]` and custom `TyCtxt`-aware serialization traits.
    * Enumerating children of modules from other crates is now orthogonal to describing those items via `Def` - this is a step towards bridging crate-local HIR and cross-crate metadata
    * `CrateNum` has been moved to `rustc` and both it and `NodeId` are now newtypes instead of `u32` aliases, for specializing their decoding. This is `[syntax-breaking]` (cc @Manishearth ).
    
    cc @rust-lang/compiler
rustc: ./piston-image-0.10.3
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling bitflags v0.7.0
   Compiling inflate v0.1.1
   Compiling color_quant v1.0.0
   Compiling lzw v0.10.0
   Compiling glob v0.2.11
   Compiling libc v0.2.16
   Compiling gcc v0.3.35
   Compiling byteorder v0.5.3
   Compiling scoped_threadpool v0.1.7
   Compiling rustc-serialize v0.3.19
   Compiling num-traits v0.1.35
   Compiling gif v0.9.0
   Compiling rand v0.3.14
   Compiling num_cpus v0.2.13
   Compiling miniz-sys v0.1.7
   Compiling flate2 v0.2.14
   Compiling num-integer v0.1.32
   Compiling deque v0.3.1
   Compiling rayon v0.4.2
   Compiling num-iter v0.1.32
   Compiling num v0.1.35
   Compiling enum_primitive v0.1.0
   Compiling jpeg-decoder v0.1.6
   Compiling png v0.5.2
   Compiling num-bigint v0.1.35
   Compiling num-rational v0.1.35
   Compiling image v0.10.3 (file:///root/benchmarks/piston-image-0.10.3)
time: 0.046; rss: 58MB	parsing
Lines of code:             12000
Pre-expansion node count:  90272
time: 0.000; rss: 58MB	recursion limit
time: 0.000; rss: 58MB	crate injection
time: 0.000; rss: 58MB	plugin loading
time: 0.000; rss: 58MB	plugin registration
time: 0.067; rss: 88MB	expansion
time: 0.000; rss: 88MB	maybe building test harness
time: 0.002; rss: 88MB	maybe creating a macro crate
time: 0.007; rss: 88MB	assigning node ids
Post-expansion node count: 149551
time: 0.000; rss: 88MB	checking for inline asm in case the target doesn't support it
time: 0.002; rss: 88MB	complete gated feature checking
time: 0.004; rss: 88MB	collecting defs
time: 0.011; rss: 92MB	external crate/lib resolution
time: 0.006; rss: 92MB	early lint checks
time: 0.002; rss: 97MB	AST validation
time: 0.021; rss: 101MB	name resolution
time: 0.013; rss: 111MB	lowering ast -> hir
time: 0.003; rss: 116MB	indexing hir
time: 0.002; rss: 116MB	attribute checking
time: 0.002; rss: 106MB	language item collection
time: 0.003; rss: 106MB	lifetime resolution
time: 0.000; rss: 106MB	looking for entry point
time: 0.000; rss: 106MB	looking for plugin registrar
time: 0.011; rss: 112MB	region resolution
time: 0.002; rss: 112MB	loop checking
time: 0.001; rss: 112MB	static item recursion checking
time: 0.058; rss: 111MB	compute_incremental_hashes_map
time: 0.000; rss: 111MB	load_dep_graph
time: 0.025; rss: 113MB	type collecting
time: 0.000; rss: 113MB	variance inference
time: 0.031; rss: 116MB	coherence checking
time: 0.098; rss: 117MB	wf checking
time: 0.218; rss: 125MB	item-types checking
time: 0.937; rss: 137MB	item-bodies checking
time: 0.000; rss: 137MB	drop-impl checking
time: 0.072; rss: 137MB	const checking
time: 0.011; rss: 137MB	privacy checking
time: 0.001; rss: 137MB	stability index
time: 0.009; rss: 137MB	intrinsic checking
time: 0.003; rss: 137MB	effect checking
time: 0.025; rss: 137MB	match checking
time: 0.011; rss: 138MB	liveness checking
time: 0.067; rss: 138MB	rvalue checking
time: 0.112; rss: 180MB	MIR dump
  time: 0.012; rss: 180MB	SimplifyCfg
  time: 0.025; rss: 180MB	QualifyAndPromoteConstants
  time: 0.028; rss: 180MB	TypeckMir
  time: 0.001; rss: 180MB	SimplifyBranches
  time: 0.007; rss: 180MB	SimplifyCfg
time: 0.072; rss: 180MB	MIR passes
time: 0.143; rss: 180MB	borrow checking
time: 0.004; rss: 180MB	reachability checking
time: 0.008; rss: 180MB	death checking
time: 0.010; rss: 180MB	stability checking
time: 0.000; rss: 180MB	unused lib feature checking
time: 0.074; rss: 180MB	lint checking
time: 0.000; rss: 180MB	resolving dependency formats
  time: 0.001; rss: 180MB	NoLandingPads
  time: 0.005; rss: 180MB	SimplifyCfg
  time: 0.012; rss: 182MB	EraseRegions
  time: 0.002; rss: 182MB	AddCallGuards
  time: 0.133; rss: 187MB	ElaborateDrops
  time: 0.001; rss: 187MB	NoLandingPads
  time: 0.009; rss: 187MB	SimplifyCfg
  time: 0.002; rss: 187MB	Deaggregator
  time: 0.002; rss: 187MB	AddCallGuards
  time: 0.000; rss: 187MB	PreTrans
time: 0.167; rss: 187MB	Prepare MIR codegen passes
  time: 0.081; rss: 189MB	write metadata
  time: 0.533; rss: 199MB	translation item collection
  time: 0.029; rss: 203MB	codegen unit partitioning
  time: 0.052; rss: 327MB	internalize symbols
time: 3.433; rss: 301MB	translation
time: 0.000; rss: 301MB	assert dep graph
time: 0.000; rss: 301MB	serialize dep graph
  time: 0.201; rss: 225MB	llvm function passes [0]
  time: 0.081; rss: 230MB	llvm module passes [0]
  time: 3.992; rss: 233MB	codegen passes [0]
  time: 0.001; rss: 234MB	codegen passes [0]
time: 4.574; rss: 234MB	LLVM passes
time: 0.000; rss: 234MB	serialize work products
time: 0.253; rss: 105MB	linking
done
