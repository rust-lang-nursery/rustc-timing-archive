commit b2799a56a1631ee351e4687ee649808e28cccda1
Merge: 3135b78 f040208
Author: bors <bors@rust-lang.org>
Date:   Thu Sep 1 02:53:28 2016 -0700

    Auto merge of #35755 - SimonSapin:char_convert, r=alexcrichton
    
    Implement std::convert traits for char
    
    This is motivated by avoiding the `as` operator, which sometimes silently truncates, and instead use conversions that are explicitly lossless and infallible.
    
    I’m less certain that `From<u8> for char` should be implemented: while it matches an existing behavior of `as`, it’s not necessarily the right thing to use for non-ASCII bytes. It effectively decodes bytes as ISO/IEC 8859-1 (since Unicode designed its first 256 code points to be compatible with that encoding), but that is not apparent in the API name.
rustc: ./futures-rs-test-all
cargo rustc --test all --verbose -- -Ztime-passes -Zinput-stats
       Fresh log v0.3.6
   Compiling futures v0.1.0 (file:///root/benchmarks/futures-rs-test-all)
     Running `/root/rust/x86_64-unknown-linux-gnu/stage2/bin/rustc tests/all.rs --crate-name all --crate-type bin -g -Ztime-passes -Zinput-stats --test -C metadata=449e6fc7d003a0bc -C extra-filename=-449e6fc7d003a0bc --out-dir /root/benchmarks/futures-rs-test-all/target/debug --emit=dep-info,link -L dependency=/root/benchmarks/futures-rs-test-all/target/debug -L dependency=/root/benchmarks/futures-rs-test-all/target/debug/deps --extern log=/root/benchmarks/futures-rs-test-all/target/debug/deps/liblog-30a8a27ec161f1be.rlib --extern futures=/root/benchmarks/futures-rs-test-all/target/debug/libfutures.rlib`
time: 0.003; rss: 44MB	parsing
Lines of code:             412
Pre-expansion node count:  5522
time: 0.000; rss: 44MB	configuration
time: 0.000; rss: 44MB	recursion limit
time: 0.000; rss: 44MB	crate injection
time: 0.000; rss: 44MB	plugin loading
time: 0.000; rss: 44MB	plugin registration
time: 0.023; rss: 63MB	expansion
time: 0.000; rss: 63MB	maybe building test harness
time: 0.000; rss: 68MB	assigning node ids
Post-expansion node count: 10613
time: 0.000; rss: 68MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 68MB	complete gated feature checking
time: 0.000; rss: 68MB	collecting defs
time: 0.005; rss: 69MB	external crate/lib resolution
time: 0.000; rss: 69MB	early lint checks
time: 0.000; rss: 69MB	AST validation
time: 0.002; rss: 69MB	name resolution
time: 0.001; rss: 69MB	lowering ast -> hir
time: 0.000; rss: 73MB	indexing hir
time: 0.000; rss: 73MB	attribute checking
time: 0.000; rss: 73MB	language item collection
time: 0.000; rss: 73MB	lifetime resolution
time: 0.000; rss: 73MB	looking for entry point
time: 0.000; rss: 73MB	looking for plugin registrar
time: 0.001; rss: 73MB	region resolution
time: 0.000; rss: 73MB	loop checking
time: 0.000; rss: 73MB	static item recursion checking
time: 0.001; rss: 73MB	compute_incremental_hashes_map
time: 0.000; rss: 73MB	load_dep_graph
time: 0.005; rss: 73MB	type collecting
time: 0.000; rss: 73MB	variance inference
time: 0.004; rss: 73MB	coherence checking
time: 0.014; rss: 75MB	wf checking
time: 0.003; rss: 75MB	item-types checking
time: 0.150; rss: 81MB	item-bodies checking
time: 0.000; rss: 81MB	drop-impl checking
time: 0.005; rss: 83MB	const checking
time: 0.000; rss: 83MB	privacy checking
time: 0.000; rss: 83MB	stability index
time: 0.000; rss: 83MB	intrinsic checking
time: 0.000; rss: 83MB	effect checking
time: 0.001; rss: 83MB	match checking
time: 0.001; rss: 83MB	liveness checking
time: 0.004; rss: 83MB	rvalue checking
time: 0.008; rss: 84MB	MIR dump
time: 0.006; rss: 84MB	MIR passes
time: 0.008; rss: 84MB	borrow checking
time: 0.000; rss: 84MB	reachability checking
time: 0.000; rss: 84MB	death checking
time: 0.000; rss: 84MB	stability checking
time: 0.000; rss: 84MB	unused lib feature checking
time: 0.003; rss: 84MB	lint checking
time: 0.002; rss: 84MB	resolving dependency formats
time: 0.017; rss: 87MB	Prepare MIR codegen passes
  time: 0.000; rss: 87MB	write metadata
  time: 0.356; rss: 96MB	translation item collection
  time: 0.020; rss: 96MB	codegen unit partitioning
  time: 0.043; rss: 149MB	internalize symbols
time: 3.202; rss: 149MB	translation
time: 0.000; rss: 149MB	assert dep graph
time: 0.000; rss: 149MB	serialize dep graph
  time: 0.083; rss: 134MB	llvm function passes [0]
  time: 0.026; rss: 135MB	llvm module passes [0]
  time: 1.752; rss: 139MB	codegen passes [0]
  time: 0.000; rss: 139MB	codegen passes [0]
time: 1.863; rss: 139MB	LLVM passes
time: 0.000; rss: 139MB	serialize work products
  time: 0.194; rss: 86MB	running linker
time: 0.196; rss: 86MB	linking
done
