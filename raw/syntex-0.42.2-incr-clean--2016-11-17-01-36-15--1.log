commit 6cd5be81cc3a6f972eb00541224037a95a08cc7b
Merge: f22fdb0 0e1828a
Author: bors <bors@rust-lang.org>
Date:   Wed Nov 16 21:02:55 2016 -0800

    Auto merge of #37607 - dns2utf8:doc_grammar, r=alexcrichton
    
    Fix grammar verification
    
     * Use make check-lexer to verify the grammar.
     * Extend grammar/README
     * Add make clean-grammar rule
     * Add target check-build-lexer-verifier to make tidy, so it will build the verifier with every build and catch future errors
    
    This is the continuation of #34994
    
    r? @steveklabnik @jonathandturner @alexcrichton
rustc: ./syntex-0.42.2-incr-clean
RUSTFLAGS="-Z incremental=incr" \
    cargo rustc -p syntex_syntax  -- \
    -Ztime-passes -Zinput-stats -Z incremental-info
   Compiling syntex_syntax v0.42.0
time: 0.092; rss: 71MB	parsing
Lines of code:             33687
Pre-expansion node count:  223115
time: 0.000; rss: 71MB	recursion limit
time: 0.000; rss: 71MB	crate injection
time: 0.000; rss: 71MB	plugin loading
time: 0.000; rss: 71MB	plugin registration
time: 0.231; rss: 144MB	expansion
time: 0.000; rss: 144MB	maybe building test harness
time: 0.006; rss: 144MB	maybe creating a macro crate
Post-expansion node count: 638863
time: 0.000; rss: 144MB	checking for inline asm in case the target doesn't support it
time: 0.013; rss: 144MB	complete gated feature checking
time: 0.023; rss: 144MB	early lint checks
time: 0.007; rss: 144MB	AST validation
time: 0.076; rss: 158MB	name resolution
time: 0.044; rss: 183MB	lowering ast -> hir
time: 0.008; rss: 194MB	indexing hir
time: 0.006; rss: 194MB	attribute checking
time: 0.004; rss: 151MB	language item collection
time: 0.010; rss: 151MB	lifetime resolution
time: 0.000; rss: 151MB	looking for entry point
time: 0.000; rss: 151MB	looking for plugin registrar
time: 0.039; rss: 172MB	region resolution
time: 0.004; rss: 172MB	loop checking
time: 0.004; rss: 172MB	static item recursion checking
time: 0.324; rss: 172MB	compute_incremental_hashes_map
time: 0.000; rss: 172MB	load_dep_graph
time: 0.048; rss: 170MB	type collecting
time: 0.001; rss: 170MB	variance inference
time: 0.018; rss: 174MB	coherence checking
time: 0.100; rss: 177MB	wf checking
time: 0.181; rss: 182MB	item-types checking
time: 3.342; rss: 233MB	item-bodies checking
time: 0.000; rss: 233MB	drop-impl checking
time: 0.216; rss: 254MB	const checking
time: 0.044; rss: 254MB	privacy checking
time: 0.005; rss: 254MB	stability index
time: 0.017; rss: 254MB	intrinsic checking
time: 0.014; rss: 254MB	effect checking
time: 0.044; rss: 254MB	match checking
time: 0.048; rss: 241MB	liveness checking
time: 0.176; rss: 241MB	rvalue checking
time: 0.539; rss: 424MB	MIR dump
  time: 0.058; rss: 430MB	SimplifyCfg
  time: 0.074; rss: 430MB	QualifyAndPromoteConstants
  time: 0.098; rss: 430MB	TypeckMir
  time: 0.004; rss: 430MB	SimplifyBranches
  time: 0.031; rss: 430MB	SimplifyCfg
time: 0.266; rss: 430MB	MIR cleanup and validation
time: 0.476; rss: 433MB	borrow checking
time: 0.025; rss: 433MB	reachability checking
time: 0.038; rss: 433MB	death checking
time: 0.034; rss: 436MB	stability checking
time: 0.000; rss: 436MB	unused lib feature checking
time: 0.196; rss: 436MB	lint checking
time: 0.000; rss: 436MB	resolving dependency formats
  time: 0.003; rss: 436MB	NoLandingPads
  time: 0.026; rss: 436MB	SimplifyCfg
  time: 0.072; rss: 441MB	EraseRegions
  time: 0.011; rss: 441MB	AddCallGuards
  time: 0.298; rss: 458MB	ElaborateDrops
  time: 0.003; rss: 458MB	NoLandingPads
  time: 0.053; rss: 459MB	SimplifyCfg
  time: 0.029; rss: 459MB	InstCombine
  time: 0.012; rss: 459MB	Deaggregator
  time: 0.002; rss: 459MB	CopyPropagation
  time: 0.036; rss: 459MB	SimplifyLocals
  time: 0.010; rss: 459MB	AddCallGuards
  time: 0.003; rss: 459MB	PreTrans
time: 0.559; rss: 459MB	MIR optimisations
  time: 0.081; rss: 467MB	write metadata
  time: 0.427; rss: 480MB	translation item collection
  time: 0.072; rss: 486MB	codegen unit partitioning
  time: 0.047; rss: 730MB	internalize symbols
time: 4.968; rss: 730MB	translation
time: 0.000; rss: 730MB	assert dep graph
time: 0.000; rss: 730MB	serialize dep graph
incremental: re-using 0 out of 1 modules
  time: 0.535; rss: 416MB	llvm function passes [0]
  time: 0.253; rss: 426MB	llvm module passes [0]
  time: 10.442; rss: 424MB	codegen passes [0]
  time: 0.000; rss: 424MB	codegen passes [0]
time: 12.037; rss: 424MB	LLVM passes
time: 0.000; rss: 424MB	serialize work products
time: 0.339; rss: 104MB	linking
done
