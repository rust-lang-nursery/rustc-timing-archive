commit 6cd5be81cc3a6f972eb00541224037a95a08cc7b
Merge: f22fdb0 0e1828a
Author: bors <bors@rust-lang.org>
Date:   Wed Nov 16 21:02:55 2016 -0800

    Auto merge of #37607 - dns2utf8:doc_grammar, r=alexcrichton
    
    Fix grammar verification
    
     * Use make check-lexer to verify the grammar.
     * Extend grammar/README
     * Add make clean-grammar rule
     * Add target check-build-lexer-verifier to make tidy, so it will build the verifier with every build and catch future errors
    
    This is the continuation of #34994
    
    r? @steveklabnik @jonathandturner @alexcrichton
rustc: ./html5ever-2016-08-25
cargo rustc  -- -Ztime-passes -Zinput-stats
   Compiling html5ever v0.5.4 (file:///root/benchmarks/html5ever-2016-08-25)
time: 0.023; rss: 47MB	parsing
Lines of code:             8210
Pre-expansion node count:  52140
time: 0.000; rss: 47MB	recursion limit
time: 0.000; rss: 47MB	crate injection
time: 0.000; rss: 47MB	plugin loading
time: 0.000; rss: 47MB	plugin registration
time: 0.648; rss: 102MB	expansion
time: 0.000; rss: 102MB	maybe building test harness
time: 0.002; rss: 102MB	maybe creating a macro crate
Post-expansion node count: 163412
time: 0.000; rss: 102MB	checking for inline asm in case the target doesn't support it
time: 0.003; rss: 102MB	complete gated feature checking
time: 0.008; rss: 102MB	early lint checks
time: 0.002; rss: 102MB	AST validation
time: 0.016; rss: 105MB	name resolution
time: 0.012; rss: 114MB	lowering ast -> hir
time: 0.003; rss: 118MB	indexing hir
time: 0.002; rss: 118MB	attribute checking
time: 0.001; rss: 98MB	language item collection
time: 0.002; rss: 98MB	lifetime resolution
time: 0.000; rss: 98MB	looking for entry point
time: 0.000; rss: 98MB	looking for plugin registrar
time: 0.011; rss: 106MB	region resolution
time: 0.001; rss: 106MB	loop checking
time: 0.001; rss: 106MB	static item recursion checking
time: 0.020; rss: 107MB	compute_incremental_hashes_map
time: 0.000; rss: 107MB	load_dep_graph
time: 0.010; rss: 108MB	type collecting
time: 0.000; rss: 108MB	variance inference
time: 0.011; rss: 109MB	coherence checking
time: 0.020; rss: 110MB	wf checking
time: 0.292; rss: 114MB	item-types checking
time: 0.410; rss: 127MB	item-bodies checking
time: 0.000; rss: 127MB	drop-impl checking
time: 0.061; rss: 134MB	const checking
time: 0.006; rss: 134MB	privacy checking
time: 0.001; rss: 134MB	stability index
time: 0.002; rss: 134MB	intrinsic checking
time: 0.002; rss: 134MB	effect checking
time: 0.014; rss: 134MB	match checking
time: 0.018; rss: 129MB	liveness checking
time: 0.022; rss: 129MB	rvalue checking
time: 0.105; rss: 168MB	MIR dump
  time: 0.009; rss: 169MB	SimplifyCfg
  time: 0.014; rss: 171MB	QualifyAndPromoteConstants
  time: 0.019; rss: 171MB	TypeckMir
  time: 0.000; rss: 171MB	SimplifyBranches
  time: 0.004; rss: 171MB	SimplifyCfg
time: 0.046; rss: 171MB	MIR cleanup and validation
time: 0.086; rss: 176MB	borrow checking
time: 0.002; rss: 176MB	reachability checking
time: 0.005; rss: 176MB	death checking
time: 0.005; rss: 176MB	stability checking
time: 0.000; rss: 176MB	unused lib feature checking
time: 0.057; rss: 176MB	lint checking
time: 0.000; rss: 176MB	resolving dependency formats
  time: 0.000; rss: 176MB	NoLandingPads
  time: 0.004; rss: 176MB	SimplifyCfg
  time: 0.009; rss: 176MB	EraseRegions
  time: 0.001; rss: 176MB	AddCallGuards
  time: 0.078; rss: 180MB	ElaborateDrops
  time: 0.000; rss: 180MB	NoLandingPads
  time: 0.007; rss: 178MB	SimplifyCfg
  time: 0.007; rss: 178MB	InstCombine
  time: 0.001; rss: 178MB	Deaggregator
  time: 0.000; rss: 178MB	CopyPropagation
  time: 0.007; rss: 175MB	SimplifyLocals
  time: 0.001; rss: 175MB	AddCallGuards
  time: 0.000; rss: 175MB	PreTrans
time: 0.116; rss: 175MB	MIR optimisations
  time: 0.011; rss: 177MB	write metadata
  time: 0.041; rss: 178MB	translation item collection
  time: 0.005; rss: 179MB	codegen unit partitioning
  time: 0.005; rss: 191MB	internalize symbols
time: 0.276; rss: 191MB	translation
time: 0.000; rss: 191MB	assert dep graph
time: 0.000; rss: 191MB	serialize dep graph
  time: 0.022; rss: 105MB	llvm function passes [0]
  time: 0.012; rss: 106MB	llvm module passes [0]
  time: 0.490; rss: 109MB	codegen passes [0]
  time: 0.000; rss: 109MB	codegen passes [0]
time: 0.565; rss: 109MB	LLVM passes
time: 0.000; rss: 109MB	serialize work products
time: 0.025; rss: 91MB	linking
done
