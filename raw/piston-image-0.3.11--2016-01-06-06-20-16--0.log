commit 7312e0a16328e6227d7fc593176a1fd12fea4342
Merge: dc1f442 e281509
Author: bors <bors@rust-lang.org>
Date:   Wed Jan 6 09:00:57 2016 +0000

    Auto merge of #30692 - michaelwoerister:mir-overloaded-fn-calls, r=nikomatsakis
    
    So far, calls going through `Fn::call`, `FnMut::call_mut`, or `FnOnce::call_once` have not been translated properly into MIR:
    The call `f(a, b, c)` where `f: Fn(T1, T2, T3)` would end up in MIR as:
    ```
    call `f` with arguments  `a`, `b`, `c`
    ```
    What we really want is:
    ```
    call `Fn::call` with arguments  `f`, `a`, `b`, `c`
    ```
    This PR transforms these kinds of overloaded calls during `HIR -> HAIR` translation.
    
    What's still a bit funky is that the `Fn` traits expect arguments to be tupled but due to special handling type-checking and trans, we do not actually tuple arguments and everything still checks out fine. So, after this PR we end up with MIR containing calls where function signature and arguments seemingly don't match:
    ```
    call Fn::call(&self, args: (T1, T2, T3)) with arguments `f`, `a`, `b`, `c`
    ```
    instead of
    ```
    call Fn::call(&self, args: (T1, T2, T3)) with arguments `f`, (`a`, `b`, `c`)  //  <- args tupled!
    ```
    It would be nice if the call traits could go without special handling in MIR and later on.
rustc: ./piston-image-0.3.11
cargo rustc -- -Ztime-passes -Zinput-stats
    Updating registry `https://github.com/rust-lang/crates.io-index`
   Compiling lzw v0.8.0
   Compiling glob v0.2.10
   Compiling rustc-serialize v0.3.16
   Compiling winapi v0.2.5
   Compiling winapi-build v0.1.1
   Compiling byteorder v0.3.13
   Compiling gcc v0.3.21
   Compiling libc v0.2.4
   Compiling advapi32-sys v0.1.2
   Compiling color_quant v1.0.0
   Compiling bitflags v0.3.3
   Compiling rand v0.3.12
   Compiling gif v0.5.1
   Compiling miniz-sys v0.1.7
   Compiling flate2 v0.2.11
Build failed, waiting for other jobs to finish...
makefile:2: recipe for target 'all' failed
done
