commit 75df685d28947ea7d2422a24f14aa1254da1aeb4
Merge: f374565 607d297
Author: bors <bors@rust-lang.org>
Date:   Mon Oct 3 04:25:58 2016 -0700

    Auto merge of #36766 - nnethercote:hash-span-capacity, r=bluss
    
    Clarify HashMap's capacity handling.
    
    HashMap has two notions of "capacity":
    
    - "Usable capacity": the number of elements a hash map can hold without
      resizing. This is the meaning of "capacity" used in HashMap's API,
      e.g. the `with_capacity()` function.
    
    - "Internal capacity": the number of allocated slots. Except for the
      zero case, it is always larger than the usable capacity (because some
      slots must be left empty) and is always a power of two.
    
    HashMap's code is confusing because it does a poor job of
    distinguishing these two meanings. I propose using two different terms
    for these two concepts. Because "capacity" is already used in HashMap's
    API to mean "usable capacity", I will use a different word for "internal
    capacity". I propose "span", though I'm happy to consider other names.
rustc: ./syntex-0.42.2
cargo rustc -p syntex_syntax -- -Ztime-passes -Zinput-stats
   Compiling syntex_syntax v0.42.0
time: 0.161; rss: 68MB	parsing
Lines of code:             33687
Pre-expansion node count:  224033
time: 0.000; rss: 68MB	recursion limit
time: 0.000; rss: 68MB	crate injection
time: 0.000; rss: 68MB	plugin loading
time: 0.000; rss: 68MB	plugin registration
time: 0.363; rss: 136MB	expansion
time: 0.000; rss: 136MB	maybe building test harness
time: 0.007; rss: 136MB	maybe creating a macro crate
Post-expansion node count: 641571
time: 0.000; rss: 136MB	checking for inline asm in case the target doesn't support it
time: 0.014; rss: 136MB	complete gated feature checking
time: 0.023; rss: 136MB	early lint checks
time: 0.008; rss: 136MB	AST validation
time: 0.115; rss: 151MB	name resolution
time: 0.122; rss: 191MB	lowering ast -> hir
time: 0.024; rss: 199MB	indexing hir
time: 0.007; rss: 199MB	attribute checking
time: 0.006; rss: 151MB	language item collection
time: 0.013; rss: 151MB	lifetime resolution
time: 0.000; rss: 151MB	looking for entry point
time: 0.000; rss: 151MB	looking for plugin registrar
time: 0.067; rss: 160MB	region resolution
time: 0.006; rss: 160MB	loop checking
time: 0.006; rss: 160MB	static item recursion checking
time: 0.300; rss: 162MB	compute_incremental_hashes_map
time: 0.000; rss: 162MB	load_dep_graph
time: 0.081; rss: 167MB	type collecting
time: 0.001; rss: 167MB	variance inference
time: 0.038; rss: 170MB	coherence checking
time: 0.100; rss: 172MB	wf checking
time: 0.205; rss: 176MB	item-types checking
time: 4.144; rss: 219MB	item-bodies checking
time: 0.000; rss: 219MB	drop-impl checking
time: 0.340; rss: 221MB	const checking
time: 0.059; rss: 221MB	privacy checking
time: 0.008; rss: 221MB	stability index
time: 0.023; rss: 221MB	intrinsic checking
time: 0.020; rss: 221MB	effect checking
time: 0.060; rss: 221MB	match checking
time: 0.091; rss: 217MB	liveness checking
time: 0.306; rss: 217MB	rvalue checking
time: 0.686; rss: 393MB	MIR dump
  time: 0.065; rss: 399MB	SimplifyCfg
  time: 0.086; rss: 400MB	QualifyAndPromoteConstants
  time: 0.116; rss: 400MB	TypeckMir
  time: 0.005; rss: 400MB	SimplifyBranches
  time: 0.037; rss: 400MB	SimplifyCfg
time: 0.310; rss: 400MB	MIR passes
time: 0.738; rss: 403MB	borrow checking
time: 0.023; rss: 403MB	reachability checking
time: 0.048; rss: 403MB	death checking
time: 0.045; rss: 404MB	stability checking
time: 0.000; rss: 404MB	unused lib feature checking
time: 0.233; rss: 404MB	lint checking
time: 0.000; rss: 404MB	resolving dependency formats
  time: 0.004; rss: 404MB	NoLandingPads
  time: 0.027; rss: 404MB	SimplifyCfg
  time: 0.097; rss: 411MB	EraseRegions
  time: 0.012; rss: 411MB	AddCallGuards
  time: 1.144; rss: 432MB	ElaborateDrops
  time: 0.004; rss: 432MB	NoLandingPads
  time: 0.054; rss: 432MB	SimplifyCfg
  time: 0.032; rss: 432MB	InstCombine
  time: 0.012; rss: 432MB	Deaggregator
  time: 0.003; rss: 432MB	CopyPropagation
  time: 0.010; rss: 432MB	AddCallGuards
  time: 0.003; rss: 432MB	PreTrans
time: 1.401; rss: 432MB	Prepare MIR codegen passes
  time: 0.281; rss: 439MB	write metadata
  time: 0.506; rss: 449MB	translation item collection
  time: 0.069; rss: 453MB	codegen unit partitioning
  time: 0.058; rss: 704MB	internalize symbols
time: 5.842; rss: 583MB	translation
time: 0.000; rss: 583MB	assert dep graph
time: 0.000; rss: 583MB	serialize dep graph
  time: 0.522; rss: 405MB	llvm function passes [0]
  time: 0.255; rss: 414MB	llvm module passes [0]
  time: 10.227; rss: 405MB	codegen passes [0]
  time: 0.001; rss: 407MB	codegen passes [0]
time: 11.900; rss: 407MB	LLVM passes
time: 0.000; rss: 407MB	serialize work products
time: 0.900; rss: 102MB	linking
done
