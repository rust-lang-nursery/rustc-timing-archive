commit c7ab8840c8cfcd62e9f7212371ed3e31ad2ae73a
Merge: 80ec1b9 42eb703
Author: bors <bors@rust-lang.org>
Date:   Tue May 10 23:40:09 2016 -0700

    Auto merge of #33425 - eddyb:rift, r=nikomatsakis
    
    Split the type context into a global and a local (inference-only) one.
    
    After this change, each `InferCtxt` creates its own local type interner for types with inference by-products.
    Most of the code which handles both a global and a local interner uses `'gcx` and `'tcx` for them.
    A reference to the type context in that situation (e.g. `infcx.tcx`) is `TyCtxt<'a, 'gcx, 'tcx>`.
    The global type context which used to be `&'a TyCtxt<'tcx>` is now `TyCtxt<'a, 'tcx, 'tcx>`.
    
    In order to minimize the number of extra lifetime parameters, many functions became methods.
    Where possible (some inherent impls), lifetime parameters were added on the impl, not each method.
    
    As inference by-products no longer escape their inference contexts, memory usage is lower.
    Example of `-Z time-passes` excerpt for `librustc`, stage1 (~100MB gains):
    Before "rustc: Split local type contexts interners from the global one.":
    ```
    time: 0.395; rss: 335MB item-types checking
    time: 15.392; rss: 472MB        item-bodies checking
    time: 0.000; rss: 472MB drop-impl checking
    time: 1.140; rss: 478MB const checking
    time: 0.139; rss: 478MB privacy checking
    time: 0.024; rss: 478MB stability index
    time: 0.072; rss: 478MB intrinsic checking
    time: 0.038; rss: 478MB effect checking
    time: 0.255; rss: 478MB match checking
    time: 0.128; rss: 484MB liveness checking
    time: 1.372; rss: 484MB rvalue checking
    time: 1.404; rss: 597MB MIR dump
    time: 0.809; rss: 599MB MIR passes
    ```
    After:
    ```
    time: 0.467; rss: 337MB item-types checking
    time: 17.443; rss: 395MB        item-bodies checking
    time: 0.000; rss: 395MB drop-impl checking
    time: 1.423; rss: 401MB const checking
    time: 0.141; rss: 401MB privacy checking
    time: 0.024; rss: 401MB stability index
    time: 0.116; rss: 401MB intrinsic checking
    time: 0.038; rss: 401MB effect checking
    time: 0.382; rss: 401MB match checking
    time: 0.132; rss: 407MB liveness checking
    time: 1.678; rss: 407MB rvalue checking
    time: 1.614; rss: 503MB MIR dump
    time: 0.957; rss: 512MB MIR passes
    ```
    
    **NOTE**: Functions changed to methods weren't re-indented to keep this PR easier to review.
    Once approved, the changes will be mechanically performed.
    However, indentation changes of function arguments are there - and I believe there's a way to hide whitespace-only changes in diffs on GitHub.
rustc: ./issue-32278-big-array-of-strings
/root/rust/x86_64-unknown-linux-gnu/stage2/bin/rustc big-array-of-strings.rs -Ztime-passes -Zinput-stats
time: 0.161; rss: 69MB	parsing
Lines of code:             65577
Pre-expansion node count:  65552
time: 0.011; rss: 69MB	configuration 1
time: 0.000; rss: 69MB	recursion limit
time: 0.000; rss: 69MB	crate injection
time: 0.004; rss: 74MB	macro loading
time: 0.000; rss: 74MB	plugin loading
time: 0.000; rss: 74MB	plugin registration
time: 0.043; rss: 78MB	expansion
time: 0.011; rss: 78MB	configuration 2
time: 0.000; rss: 78MB	gated configuration checking
time: 0.006; rss: 78MB	maybe building test harness
time: 0.005; rss: 78MB	prelude injection
time: 0.001; rss: 78MB	checking that all macro invocations are gone
time: 0.000; rss: 78MB	checking for inline asm in case the target doesn't support it
time: 0.001; rss: 78MB	complete gated feature checking
Post-expansion node count: 65565
time: 0.006; rss: 78MB	assigning node ids
time: 0.001; rss: 78MB	collecting defs
time: 0.004; rss: 79MB	external crate/lib resolution
time: 0.008; rss: 79MB	early lint checks
time: 0.002; rss: 82MB	name resolution
time: 0.009; rss: 95MB	lowering ast -> hir
time: 0.001; rss: 97MB	indexing hir
time: 0.001; rss: 97MB	attribute checking
time: 0.001; rss: 85MB	language item collection
time: 0.001; rss: 85MB	lifetime resolution
time: 0.000; rss: 85MB	looking for entry point
time: 0.000; rss: 85MB	looking for plugin registrar
time: 0.006; rss: 91MB	region resolution
time: 0.001; rss: 91MB	loop checking
time: 0.001; rss: 91MB	static item recursion checking
time: 0.000; rss: 91MB	load_dep_graph
time: 0.000; rss: 91MB	type collecting
time: 0.000; rss: 91MB	variance inference
time: 0.006; rss: 100MB	coherence checking
time: 0.001; rss: 100MB	wf checking
time: 0.863; rss: 118MB	item-types checking
time: 0.000; rss: 118MB	item-bodies checking
time: 0.000; rss: 118MB	drop-impl checking
time: 0.019; rss: 116MB	const checking
time: 0.002; rss: 116MB	privacy checking
time: 0.001; rss: 116MB	stability index
time: 0.001; rss: 116MB	intrinsic checking
time: 0.001; rss: 116MB	effect checking
time: 0.000; rss: 116MB	match checking
time: 0.001; rss: 116MB	liveness checking
time: 0.000; rss: 116MB	rvalue checking
time: 0.058; rss: 128MB	MIR dump
time: 0.002; rss: 128MB	MIR passes
time: 0.001; rss: 128MB	borrow checking
time: 0.000; rss: 128MB	reachability checking
time: 0.001; rss: 128MB	death checking
time: 0.001; rss: 128MB	stability checking
time: 0.000; rss: 128MB	unused lib feature checking
time: 0.027; rss: 128MB	lint checking
time: 0.001; rss: 128MB	resolving dependency formats
time: 0.001; rss: 128MB	Prepare MIR codegen passes
  time: 0.001; rss: 129MB	translation item collection
  time: 0.000; rss: 129MB	codegen unit partitioning
  time: 0.000; rss: 143MB	write metadata
time: 0.085; rss: 130MB	translation
time: 0.000; rss: 130MB	assert dep graph
time: 0.000; rss: 130MB	serialize dep graph
  time: 0.004; rss: 90MB	llvm function passes [0]
  time: 0.000; rss: 90MB	llvm module passes [0]
  time: 0.160; rss: 91MB	codegen passes [0]
  time: 0.000; rss: 78MB	codegen passes [0]
time: 0.176; rss: 78MB	LLVM passes
  time: 0.185; rss: 78MB	running linker
time: 0.186; rss: 78MB	linking
done
