commit 18f28719efd4268bcd8747b65810646e86901155
Merge: 12b6345 24e7491
Author: bors <bors@rust-lang.org>
Date:   Thu Jun 16 12:13:25 2016 -0700

    Auto merge of #34187 - luser:extern-crate-abspaths, r=michaelwoerister
    
    Add an abs_path member to FileMap, use it when writing debug info.
    
    Fixes #34179.
    
    When items are inlined from extern crates, the filename in the debug info
    is taken from the FileMap that's serialized in the rlib metadata.
    Currently this is just FileMap.name, which is whatever path is passed to rustc.
    Since libcore and libstd are built by invoking rustc with relative paths,
    they wind up with relative paths in the rlib, and when linked into a binary
    the debug info uses relative paths for the names, but since the compilation
    directory for the final binary, tools trying to read source filenames
    will wind up with bad paths. We noticed this in Firefox with source
    filenames from libcore/libstd having bad paths.
    
    This change stores an absolute path in FileMap.abs_path, and uses that
    if available for writing debug info. This is not going to magically make
    debuggers able to find the source, but it will at least provide sensible
    paths.
rustc: ./rust-encoding.0.2.32
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling encoding v0.2.32 (file:///root/benchmarks/rust-encoding.0.2.32)
time: 0.024; rss: 50MB	parsing
Lines of code:             6441
Pre-expansion node count:  30015
time: 0.003; rss: 50MB	configuration 1
time: 0.000; rss: 54MB	recursion limit
time: 0.000; rss: 54MB	crate injection
time: 0.000; rss: 54MB	plugin loading
time: 0.000; rss: 54MB	plugin registration
time: 0.072; rss: 90MB	expansion
time: 0.000; rss: 90MB	gated configuration checking
time: 0.000; rss: 90MB	maybe building test harness
time: 0.000; rss: 90MB	checking for inline asm in case the target doesn't support it
time: 0.001; rss: 90MB	complete gated feature checking
Post-expansion node count: 40313
time: 0.003; rss: 90MB	assigning node ids
time: 0.001; rss: 93MB	collecting defs
time: 0.001; rss: 93MB	external crate/lib resolution
time: 0.002; rss: 93MB	early lint checks
time: 0.000; rss: 93MB	AST validation
time: 0.008; rss: 94MB	name resolution
time: 0.004; rss: 95MB	lowering ast -> hir
time: 0.000; rss: 95MB	indexing hir
time: 0.000; rss: 95MB	attribute checking
time: 0.000; rss: 93MB	language item collection
time: 0.001; rss: 93MB	lifetime resolution
time: 0.000; rss: 93MB	looking for entry point
time: 0.000; rss: 93MB	looking for plugin registrar
time: 0.002; rss: 95MB	region resolution
time: 0.000; rss: 95MB	loop checking
time: 0.000; rss: 95MB	static item recursion checking
time: 0.000; rss: 95MB	load_dep_graph
time: 0.012; rss: 98MB	type collecting
time: 0.000; rss: 98MB	variance inference
time: 0.021; rss: 102MB	coherence checking
time: 0.023; rss: 103MB	wf checking
time: 0.015; rss: 103MB	item-types checking
time: 0.217; rss: 111MB	item-bodies checking
time: 0.000; rss: 111MB	drop-impl checking
time: 0.013; rss: 111MB	const checking
time: 0.002; rss: 111MB	privacy checking
time: 0.000; rss: 111MB	stability index
time: 0.002; rss: 111MB	intrinsic checking
time: 0.000; rss: 111MB	effect checking
time: 0.008; rss: 112MB	match checking
time: 0.001; rss: 112MB	liveness checking
time: 0.008; rss: 112MB	rvalue checking
time: 0.023; rss: 118MB	MIR dump
time: 0.015; rss: 118MB	MIR passes
time: 0.024; rss: 118MB	borrow checking
time: 0.000; rss: 118MB	reachability checking
time: 0.002; rss: 118MB	death checking
time: 0.002; rss: 118MB	stability checking
time: 0.000; rss: 118MB	unused lib feature checking
time: 0.024; rss: 118MB	lint checking
time: 0.000; rss: 118MB	resolving dependency formats
time: 0.027; rss: 119MB	Prepare MIR codegen passes
  time: 0.056; rss: 121MB	write metadata
  time: 0.027; rss: 125MB	translation item collection
  time: 0.001; rss: 125MB	codegen unit partitioning
time: 0.360; rss: 150MB	translation
time: 0.000; rss: 150MB	assert dep graph
time: 0.000; rss: 150MB	serialize dep graph
  time: 0.026; rss: 119MB	llvm function passes [0]
  time: 0.051; rss: 123MB	llvm module passes [0]
  time: 0.582; rss: 128MB	codegen passes [0]
  time: 0.001; rss: 113MB	codegen passes [0]
time: 0.726; rss: 112MB	LLVM passes
time: 0.053; rss: 110MB	linking
done
