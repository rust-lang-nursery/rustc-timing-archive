commit 98a3502da1456b209ff031604cabbbcb9d0eddf1
Merge: 5bfe107 a61d85b
Author: bors <bors@rust-lang.org>
Date:   Sat Oct 15 15:38:52 2016 -0700

    Auto merge of #37152 - arielb1:drop-cache, r=pnkfelix
    
    add a per-param-env cache to `impls_bound`
    
    There used to be only a global cache, which led to uncached calls to
    trait selection when there were type parameters.
    
    This causes a 20% decrease in borrow-checking time and an overall 0.5% performance increase during bootstrapping (as borrow-checking tends to be a tiny part of compilation time).
    
    Fixes #37106 (drop elaboration times are now ~half of borrow checking,
    so might still be worthy of optimization, but not critical).
    
    r? @pnkfelix
rustc: ./hyper.0.5.0
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling hyper v0.5.0 (file:///root/benchmarks/hyper.0.5.0)
time: 0.041; rss: 47MB	parsing
Lines of code:             9003
Pre-expansion node count:  44129
time: 0.000; rss: 47MB	recursion limit
time: 0.000; rss: 47MB	crate injection
time: 0.000; rss: 47MB	plugin loading
time: 0.000; rss: 47MB	plugin registration
time: 0.117; rss: 83MB	expansion
time: 0.000; rss: 83MB	maybe building test harness
time: 0.001; rss: 83MB	maybe creating a macro crate
Post-expansion node count: 101371
time: 0.000; rss: 83MB	checking for inline asm in case the target doesn't support it
time: 0.002; rss: 83MB	complete gated feature checking
time: 0.003; rss: 83MB	early lint checks
time: 0.001; rss: 83MB	AST validation
time: 0.023; rss: 88MB	name resolution
time: 0.017; rss: 94MB	lowering ast -> hir
time: 0.001; rss: 94MB	indexing hir
time: 0.001; rss: 94MB	attribute checking
time: 0.001; rss: 88MB	language item collection
time: 0.002; rss: 88MB	lifetime resolution
time: 0.000; rss: 88MB	looking for entry point
time: 0.000; rss: 88MB	looking for plugin registrar
time: 0.011; rss: 91MB	region resolution
time: 0.001; rss: 91MB	loop checking
time: 0.001; rss: 91MB	static item recursion checking
time: 0.039; rss: 91MB	compute_incremental_hashes_map
time: 0.000; rss: 91MB	load_dep_graph
time: 0.016; rss: 93MB	type collecting
time: 0.000; rss: 93MB	variance inference
time: 0.035; rss: 97MB	coherence checking
time: 0.052; rss: 98MB	wf checking
time: 0.021; rss: 98MB	item-types checking
time: 0.372; rss: 109MB	item-bodies checking
time: 0.000; rss: 109MB	drop-impl checking
time: 0.032; rss: 109MB	const checking
time: 0.008; rss: 109MB	privacy checking
time: 0.001; rss: 109MB	stability index
time: 0.004; rss: 109MB	intrinsic checking
time: 0.002; rss: 109MB	effect checking
time: 0.009; rss: 109MB	match checking
time: 0.004; rss: 109MB	liveness checking
time: 0.023; rss: 109MB	rvalue checking
time: 0.076; rss: 127MB	MIR dump
  time: 0.007; rss: 128MB	SimplifyCfg
  time: 0.012; rss: 128MB	QualifyAndPromoteConstants
  time: 0.014; rss: 128MB	TypeckMir
  time: 0.001; rss: 128MB	SimplifyBranches
  time: 0.003; rss: 128MB	SimplifyCfg
time: 0.037; rss: 128MB	MIR passes
time: 0.058; rss: 128MB	borrow checking
time: 0.003; rss: 128MB	reachability checking
time: 0.006; rss: 129MB	death checking
time: 0.009; rss: 129MB	stability checking
time: 0.000; rss: 129MB	unused lib feature checking
time: 0.045; rss: 130MB	lint checking
time: 0.000; rss: 130MB	resolving dependency formats
  time: 0.001; rss: 130MB	NoLandingPads
  time: 0.003; rss: 130MB	SimplifyCfg
  time: 0.009; rss: 131MB	EraseRegions
  time: 0.001; rss: 131MB	AddCallGuards
  time: 0.026; rss: 133MB	ElaborateDrops
  time: 0.001; rss: 133MB	NoLandingPads
  time: 0.005; rss: 133MB	SimplifyCfg
  time: 0.003; rss: 133MB	InstCombine
  time: 0.003; rss: 133MB	Deaggregator
  time: 0.001; rss: 133MB	CopyPropagation
  time: 0.001; rss: 133MB	AddCallGuards
  time: 0.000; rss: 133MB	PreTrans
time: 0.054; rss: 133MB	Prepare MIR codegen passes
  time: 0.047; rss: 136MB	write metadata
  time: 0.149; rss: 142MB	translation item collection
  time: 0.017; rss: 145MB	codegen unit partitioning
  time: 0.015; rss: 199MB	internalize symbols
time: 1.234; rss: 188MB	translation
time: 0.000; rss: 188MB	assert dep graph
time: 0.000; rss: 188MB	serialize dep graph
  time: 0.088; rss: 143MB	llvm function passes [0]
  time: 0.041; rss: 146MB	llvm module passes [0]
  time: 1.606; rss: 150MB	codegen passes [0]
  time: 0.001; rss: 149MB	codegen passes [0]
time: 1.904; rss: 149MB	LLVM passes
time: 0.000; rss: 149MB	serialize work products
time: 0.139; rss: 92MB	linking
done
