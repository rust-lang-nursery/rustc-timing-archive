commit 08839965f96ea9947afe936f13a66a0f4f93db73
Merge: e96b9d2 d73c68c
Author: bors <bors@rust-lang.org>
Date:   Sat Nov 5 01:10:57 2016 -0700

    Auto merge of #37427 - nnethercote:opt-IchHasher, r=michaelwoerister
    
    Reduce the number of bytes hashed by IchHasher.
    
    IchHasher uses blake2b hashing, which is expensive, so the fewer bytes hashed
    the better. There are two big ways to reduce the number of bytes hashed.
    - Filenames in spans account for ~66% of all bytes (for builds with debuginfo).
      The vast majority of spans have the same filename for the start of the span
      and the end of the span, so hashing the filename just once in those cases is
      a big win.
    - u32 and u64 and usize values account for ~25%--33% of all bytes (for builds
      with debuginfo). The vast majority of these are small, i.e. fit in a u8, so
      shrinking them down before hashing is also a big win.
    
    This PR implements these two optimizations. I'm certain the first one is safe.
    I'm about 90% sure that the second one is safe.
    
    Here are measurements of the number of bytes hashed when doing
    debuginfo-enabled builds of stdlib and
    rustc-benchmarks/syntex-0.42.2-incr-clean.
    
    ```
                        stdlib   syntex-incr
                        ------   -----------
    original       156,781,386   255,095,596
    half-SawSpan   106,744,403   176,345,419
    short-ints      45,890,534   118,014,227
    no-SawSpan[*]    6,831,874    45,875,714
    
    [*] don't hash the SawSpan at all. Not part of this PR, just implemented for
        comparison's sake.
    ```
    
    For debug builds of syntex-0.42.2-incr-clean, the two changes give a 1--2%
    speed-up.
rustc: ./syntex-0.42.2-incr-clean
RUSTFLAGS="-Z incremental=incr" \
    cargo rustc -p syntex_syntax -- -Ztime-passes -Zinput-stats -Z incremental-info
   Compiling syntex_syntax v0.42.0
time: 0.110; rss: 76MB	parsing
Lines of code:             33687
Pre-expansion node count:  224033
time: 0.000; rss: 76MB	recursion limit
time: 0.000; rss: 76MB	crate injection
time: 0.000; rss: 76MB	plugin loading
time: 0.000; rss: 76MB	plugin registration
time: 0.263; rss: 148MB	expansion
time: 0.000; rss: 148MB	maybe building test harness
time: 0.006; rss: 148MB	maybe creating a macro crate
Post-expansion node count: 641571
time: 0.000; rss: 148MB	checking for inline asm in case the target doesn't support it
time: 0.013; rss: 148MB	complete gated feature checking
time: 0.024; rss: 148MB	early lint checks
time: 0.007; rss: 148MB	AST validation
time: 0.086; rss: 163MB	name resolution
time: 0.046; rss: 192MB	lowering ast -> hir
time: 0.008; rss: 201MB	indexing hir
time: 0.006; rss: 201MB	attribute checking
time: 0.005; rss: 155MB	language item collection
time: 0.010; rss: 155MB	lifetime resolution
time: 0.000; rss: 155MB	looking for entry point
time: 0.000; rss: 155MB	looking for plugin registrar
time: 0.043; rss: 166MB	region resolution
time: 0.005; rss: 166MB	loop checking
time: 0.005; rss: 166MB	static item recursion checking
time: 0.326; rss: 168MB	compute_incremental_hashes_map
time: 0.000; rss: 168MB	load_dep_graph
time: 0.041; rss: 174MB	type collecting
time: 0.001; rss: 174MB	variance inference
time: 0.034; rss: 178MB	coherence checking
time: 0.095; rss: 182MB	wf checking
time: 0.193; rss: 187MB	item-types checking
time: 3.653; rss: 234MB	item-bodies checking
time: 0.000; rss: 234MB	drop-impl checking
time: 0.244; rss: 239MB	const checking
time: 0.048; rss: 239MB	privacy checking
time: 0.006; rss: 239MB	stability index
time: 0.020; rss: 239MB	intrinsic checking
time: 0.016; rss: 239MB	effect checking
time: 0.050; rss: 239MB	match checking
time: 0.052; rss: 235MB	liveness checking
time: 0.207; rss: 235MB	rvalue checking
time: 0.402; rss: 422MB	MIR dump
  time: 0.056; rss: 424MB	SimplifyCfg
  time: 0.079; rss: 424MB	QualifyAndPromoteConstants
  time: 0.105; rss: 424MB	TypeckMir
  time: 0.004; rss: 424MB	SimplifyBranches
  time: 0.030; rss: 424MB	SimplifyCfg
time: 0.275; rss: 424MB	MIR cleanup and validation
time: 0.543; rss: 424MB	borrow checking
time: 0.021; rss: 424MB	reachability checking
time: 0.041; rss: 424MB	death checking
time: 0.040; rss: 426MB	stability checking
time: 0.000; rss: 426MB	unused lib feature checking
time: 0.214; rss: 426MB	lint checking
time: 0.000; rss: 426MB	resolving dependency formats
  time: 0.003; rss: 426MB	NoLandingPads
  time: 0.026; rss: 426MB	SimplifyCfg
  time: 0.068; rss: 432MB	EraseRegions
  time: 0.011; rss: 432MB	AddCallGuards
  time: 0.285; rss: 453MB	ElaborateDrops
  time: 0.003; rss: 453MB	NoLandingPads
  time: 0.052; rss: 453MB	SimplifyCfg
  time: 0.030; rss: 453MB	InstCombine
  time: 0.013; rss: 453MB	Deaggregator
  time: 0.002; rss: 453MB	CopyPropagation
  time: 0.035; rss: 453MB	SimplifyLocals
  time: 0.010; rss: 453MB	AddCallGuards
  time: 0.003; rss: 453MB	PreTrans
time: 0.540; rss: 453MB	MIR optimisations
  time: 0.062; rss: 460MB	write metadata
  time: 0.429; rss: 470MB	translation item collection
  time: 0.057; rss: 479MB	codegen unit partitioning
  time: 0.047; rss: 729MB	internalize symbols
time: 4.737; rss: 729MB	translation
time: 0.000; rss: 729MB	assert dep graph
time: 0.000; rss: 729MB	serialize dep graph
incremental: re-using 0 out of 1 modules
  time: 0.531; rss: 420MB	llvm function passes [0]
  time: 0.263; rss: 429MB	llvm module passes [0]
  time: 10.557; rss: 424MB	codegen passes [0]
  time: 0.000; rss: 424MB	codegen passes [0]
time: 12.123; rss: 424MB	LLVM passes
time: 0.000; rss: 424MB	serialize work products
time: 0.346; rss: 105MB	linking
done
