commit 75df685d28947ea7d2422a24f14aa1254da1aeb4
Merge: f374565 607d297
Author: bors <bors@rust-lang.org>
Date:   Mon Oct 3 04:25:58 2016 -0700

    Auto merge of #36766 - nnethercote:hash-span-capacity, r=bluss
    
    Clarify HashMap's capacity handling.
    
    HashMap has two notions of "capacity":
    
    - "Usable capacity": the number of elements a hash map can hold without
      resizing. This is the meaning of "capacity" used in HashMap's API,
      e.g. the `with_capacity()` function.
    
    - "Internal capacity": the number of allocated slots. Except for the
      zero case, it is always larger than the usable capacity (because some
      slots must be left empty) and is always a power of two.
    
    HashMap's code is confusing because it does a poor job of
    distinguishing these two meanings. I propose using two different terms
    for these two concepts. Because "capacity" is already used in HashMap's
    API to mean "usable capacity", I will use a different word for "internal
    capacity". I propose "span", though I'm happy to consider other names.
rustc: ./piston-image-0.10.3
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling image v0.10.3 (file:///root/benchmarks/piston-image-0.10.3)
time: 0.070; rss: 51MB	parsing
Lines of code:             12000
Pre-expansion node count:  90272
time: 0.000; rss: 51MB	recursion limit
time: 0.000; rss: 51MB	crate injection
time: 0.000; rss: 51MB	plugin loading
time: 0.000; rss: 51MB	plugin registration
time: 0.096; rss: 88MB	expansion
time: 0.000; rss: 88MB	maybe building test harness
time: 0.001; rss: 88MB	maybe creating a macro crate
Post-expansion node count: 148999
time: 0.000; rss: 88MB	checking for inline asm in case the target doesn't support it
time: 0.003; rss: 88MB	complete gated feature checking
time: 0.006; rss: 88MB	early lint checks
time: 0.002; rss: 88MB	AST validation
time: 0.025; rss: 91MB	name resolution
time: 0.037; rss: 103MB	lowering ast -> hir
time: 0.006; rss: 106MB	indexing hir
time: 0.002; rss: 106MB	attribute checking
time: 0.002; rss: 94MB	language item collection
time: 0.003; rss: 94MB	lifetime resolution
time: 0.000; rss: 94MB	looking for entry point
time: 0.000; rss: 94MB	looking for plugin registrar
time: 0.023; rss: 99MB	region resolution
time: 0.002; rss: 99MB	loop checking
time: 0.002; rss: 99MB	static item recursion checking
time: 0.058; rss: 99MB	compute_incremental_hashes_map
time: 0.000; rss: 99MB	load_dep_graph
time: 0.025; rss: 99MB	type collecting
time: 0.000; rss: 99MB	variance inference
time: 0.031; rss: 103MB	coherence checking
time: 0.093; rss: 105MB	wf checking
time: 0.152; rss: 109MB	item-types checking
time: 0.950; rss: 119MB	item-bodies checking
time: 0.000; rss: 119MB	drop-impl checking
time: 0.074; rss: 121MB	const checking
time: 0.012; rss: 121MB	privacy checking
time: 0.002; rss: 121MB	stability index
time: 0.008; rss: 121MB	intrinsic checking
time: 0.004; rss: 121MB	effect checking
time: 0.018; rss: 121MB	match checking
time: 0.011; rss: 121MB	liveness checking
time: 0.062; rss: 121MB	rvalue checking
time: 0.173; rss: 162MB	MIR dump
  time: 0.012; rss: 163MB	SimplifyCfg
  time: 0.026; rss: 163MB	QualifyAndPromoteConstants
  time: 0.025; rss: 163MB	TypeckMir
  time: 0.001; rss: 163MB	SimplifyBranches
  time: 0.007; rss: 163MB	SimplifyCfg
time: 0.071; rss: 163MB	MIR passes
time: 0.149; rss: 163MB	borrow checking
time: 0.004; rss: 163MB	reachability checking
time: 0.009; rss: 164MB	death checking
time: 0.014; rss: 164MB	stability checking
time: 0.000; rss: 164MB	unused lib feature checking
time: 0.078; rss: 164MB	lint checking
time: 0.000; rss: 164MB	resolving dependency formats
  time: 0.001; rss: 164MB	NoLandingPads
  time: 0.005; rss: 164MB	SimplifyCfg
  time: 0.013; rss: 165MB	EraseRegions
  time: 0.002; rss: 165MB	AddCallGuards
  time: 0.101; rss: 169MB	ElaborateDrops
  time: 0.001; rss: 169MB	NoLandingPads
  time: 0.009; rss: 169MB	SimplifyCfg
  time: 0.006; rss: 169MB	InstCombine
  time: 0.002; rss: 169MB	Deaggregator
  time: 0.001; rss: 169MB	CopyPropagation
  time: 0.002; rss: 169MB	AddCallGuards
  time: 0.000; rss: 169MB	PreTrans
time: 0.143; rss: 169MB	Prepare MIR codegen passes
  time: 0.077; rss: 173MB	write metadata
  time: 0.622; rss: 184MB	translation item collection
  time: 0.032; rss: 187MB	codegen unit partitioning
  time: 0.027; rss: 306MB	internalize symbols
time: 3.586; rss: 279MB	translation
time: 0.000; rss: 279MB	assert dep graph
time: 0.000; rss: 279MB	serialize dep graph
  time: 0.206; rss: 213MB	llvm function passes [0]
  time: 0.087; rss: 218MB	llvm module passes [0]
  time: 4.137; rss: 222MB	codegen passes [0]
  time: 0.001; rss: 222MB	codegen passes [0]
time: 4.961; rss: 222MB	LLVM passes
time: 0.000; rss: 222MB	serialize work products
time: 0.271; rss: 95MB	linking
done
