commit 267cde2598db3b858730cc1f700f740964343828
Merge: 34fd686 be7b576
Author: bors <bors@rust-lang.org>
Date:   Wed May 25 16:53:05 2016 -0700

    Auto merge of #33732 - nikomatsakis:incr-comp-empty-cgu, r=mw
    
    always make at least one codegen-unit
    
    this allows us to remove the dummy `foo` fn
    
    r? @michaelwoerister
rustc: ./hyper.0.5.0
cargo rustc -- -Ztime-passes -Zinput-stats
    Updating registry `https://github.com/rust-lang/crates.io-index`
   Compiling httparse v0.1.6
   Compiling pkg-config v0.3.8
   Compiling libc v0.2.11
   Compiling typeable v0.1.2
   Compiling libc v0.1.12
   Compiling lazy_static v0.1.16
   Compiling matches v0.1.2
   Compiling winapi-build v0.1.1
   Compiling traitobject v0.0.1
   Compiling winapi v0.2.7
   Compiling rustc-serialize v0.3.19
   Compiling unicase v0.1.0
   Compiling gcc v0.3.28
   Compiling bitflags v0.3.3
   Compiling log v0.3.6
   Compiling kernel32-sys v0.2.2
   Compiling mime v0.0.11
   Compiling rand v0.3.14
   Compiling time v0.1.35
   Compiling num_cpus v0.2.12
   Compiling openssl-sys v0.6.7
   Compiling openssl v0.6.7
   Compiling uuid v0.1.18
   Compiling url v0.2.38
   Compiling cookie v0.1.21
   Compiling hyper v0.5.0 (file:///root/benchmarks/hyper.0.5.0)
time: 0.031; rss: 53MB	parsing
Lines of code:             9154
Pre-expansion node count:  45851
time: 0.008; rss: 57MB	configuration 1
time: 0.000; rss: 57MB	recursion limit
time: 0.000; rss: 57MB	crate injection
time: 0.020; rss: 93MB	macro loading
time: 0.000; rss: 93MB	plugin loading
time: 0.000; rss: 93MB	plugin registration
time: 0.187; rss: 100MB	expansion
time: 0.029; rss: 100MB	configuration 2
time: 0.000; rss: 100MB	gated configuration checking
time: 0.011; rss: 100MB	maybe building test harness
time: 0.008; rss: 100MB	prelude injection
time: 0.001; rss: 100MB	checking that all macro invocations are gone
time: 0.000; rss: 100MB	checking for inline asm in case the target doesn't support it
time: 0.002; rss: 100MB	complete gated feature checking
Post-expansion node count: 103616
time: 0.007; rss: 100MB	assigning node ids
time: 0.003; rss: 102MB	collecting defs
time: 0.010; rss: 113MB	external crate/lib resolution
time: 0.006; rss: 113MB	early lint checks
time: 0.022; rss: 119MB	name resolution
time: 0.011; rss: 125MB	lowering ast -> hir
time: 0.002; rss: 127MB	indexing hir
time: 0.001; rss: 127MB	attribute checking
time: 0.001; rss: 118MB	language item collection
time: 0.002; rss: 118MB	lifetime resolution
time: 0.000; rss: 118MB	looking for entry point
time: 0.000; rss: 118MB	looking for plugin registrar
time: 0.005; rss: 121MB	region resolution
time: 0.001; rss: 121MB	loop checking
time: 0.001; rss: 121MB	static item recursion checking
time: 0.000; rss: 121MB	load_dep_graph
time: 0.018; rss: 124MB	type collecting
time: 0.000; rss: 124MB	variance inference
time: 0.045; rss: 131MB	coherence checking
time: 0.090; rss: 133MB	wf checking
time: 0.035; rss: 134MB	item-types checking
time: 0.499; rss: 142MB	item-bodies checking
time: 0.000; rss: 142MB	drop-impl checking
time: 0.042; rss: 144MB	const checking
time: 0.007; rss: 144MB	privacy checking
time: 0.001; rss: 144MB	stability index
time: 0.006; rss: 144MB	intrinsic checking
time: 0.002; rss: 144MB	effect checking
time: 0.014; rss: 144MB	match checking
time: 0.005; rss: 144MB	liveness checking
time: 0.030; rss: 144MB	rvalue checking
time: 0.060; rss: 153MB	MIR dump
time: 0.039; rss: 153MB	MIR passes
time: 0.070; rss: 153MB	borrow checking
time: 0.003; rss: 153MB	reachability checking
time: 0.006; rss: 153MB	death checking
time: 0.005; rss: 153MB	stability checking
time: 0.000; rss: 153MB	unused lib feature checking
time: 0.050; rss: 153MB	lint checking
time: 0.000; rss: 153MB	resolving dependency formats
time: 0.011; rss: 155MB	Prepare MIR codegen passes
  time: 0.128; rss: 160MB	write metadata
  time: 0.280; rss: 167MB	translation item collection
  time: 0.008; rss: 167MB	codegen unit partitioning
time: 1.734; rss: 286MB	translation
time: 0.001; rss: 286MB	assert dep graph
time: 0.000; rss: 286MB	serialize dep graph
  time: 0.097; rss: 178MB	llvm function passes [0]
  time: 0.049; rss: 181MB	llvm module passes [0]
  time: 1.612; rss: 182MB	codegen passes [0]
  time: 0.001; rss: 134MB	codegen passes [0]
time: 1.959; rss: 133MB	LLVM passes
time: 0.175; rss: 131MB	linking
done
