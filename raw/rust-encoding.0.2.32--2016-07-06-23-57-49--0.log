commit de78655bca47cac8e783dbb563e7e5c25c1fae40
Merge: 5c674a1 547a930
Author: bors <bors@rust-lang.org>
Date:   Wed Jul 6 20:04:11 2016 -0700

    Auto merge of #34652 - jseyfried:fix_expansion_perf, r=nrc
    
    Fix expansion performance regression
    
    **syntax-[breaking-change] cc #31645**
    
    This fixes #34630 by reverting commit 5bf7970 of PR #33943, which landed in #34424.
    
    By removing the `Rc<_>` wrapping around `Delimited` and `SequenceRepetition` in `TokenTree`, 5bf7970 made cloning `TokenTree`s more expensive. While this had no measurable performance impact on the compiler's crates, it caused an order of magnitude performance regression on some macro-heavy code in the wild. I believe this is due to clones of `TokenTree`s in `macro_parser.rs` and/or `macro_rules.rs`.
    
    r? @nrc
rustc: ./rust-encoding.0.2.32
cargo rustc -- -Ztime-passes -Zinput-stats
    Updating registry `https://github.com/rust-lang/crates.io-index`
   Compiling encoding_index_tests v0.1.4 (file:///root/benchmarks/rust-encoding.0.2.32)
   Compiling encoding-index-japanese v1.20141219.5 (file:///root/benchmarks/rust-encoding.0.2.32)
   Compiling encoding-index-korean v1.20141219.5 (file:///root/benchmarks/rust-encoding.0.2.32)
   Compiling encoding-index-simpchinese v1.20141219.5 (file:///root/benchmarks/rust-encoding.0.2.32)
   Compiling encoding-index-tradchinese v1.20141219.5 (file:///root/benchmarks/rust-encoding.0.2.32)
   Compiling encoding-index-singlebyte v1.20141219.5 (file:///root/benchmarks/rust-encoding.0.2.32)
   Compiling encoding v0.2.32 (file:///root/benchmarks/rust-encoding.0.2.32)
time: 0.026; rss: 84MB	parsing
Lines of code:             6441
Pre-expansion node count:  30069
time: 0.003; rss: 84MB	configuration
time: 0.000; rss: 84MB	recursion limit
time: 0.000; rss: 84MB	crate injection
time: 0.000; rss: 84MB	plugin loading
time: 0.000; rss: 84MB	plugin registration
time: 0.055; rss: 123MB	expansion
time: 0.000; rss: 123MB	maybe building test harness
time: 0.000; rss: 123MB	checking for inline asm in case the target doesn't support it
time: 0.001; rss: 123MB	complete gated feature checking
Post-expansion node count: 40757
time: 0.003; rss: 123MB	assigning node ids
time: 0.001; rss: 124MB	collecting defs
time: 0.001; rss: 124MB	external crate/lib resolution
time: 0.002; rss: 124MB	early lint checks
time: 0.000; rss: 124MB	AST validation
time: 0.005; rss: 124MB	name resolution
time: 0.004; rss: 128MB	lowering ast -> hir
time: 0.000; rss: 128MB	indexing hir
time: 0.000; rss: 128MB	attribute checking
time: 0.000; rss: 127MB	language item collection
time: 0.001; rss: 127MB	lifetime resolution
time: 0.000; rss: 127MB	looking for entry point
time: 0.000; rss: 127MB	looking for plugin registrar
time: 0.002; rss: 129MB	region resolution
time: 0.000; rss: 129MB	loop checking
time: 0.000; rss: 129MB	static item recursion checking
time: 0.000; rss: 129MB	load_dep_graph
time: 0.012; rss: 132MB	type collecting
time: 0.000; rss: 132MB	variance inference
time: 0.021; rss: 135MB	coherence checking
time: 0.025; rss: 135MB	wf checking
time: 0.015; rss: 135MB	item-types checking
time: 0.220; rss: 144MB	item-bodies checking
time: 0.000; rss: 144MB	drop-impl checking
time: 0.013; rss: 144MB	const checking
time: 0.002; rss: 144MB	privacy checking
time: 0.000; rss: 144MB	stability index
time: 0.002; rss: 144MB	intrinsic checking
time: 0.000; rss: 144MB	effect checking
time: 0.008; rss: 144MB	match checking
time: 0.001; rss: 144MB	liveness checking
time: 0.008; rss: 144MB	rvalue checking
time: 0.024; rss: 150MB	MIR dump
time: 0.016; rss: 151MB	MIR passes
time: 0.023; rss: 151MB	borrow checking
time: 0.000; rss: 151MB	reachability checking
time: 0.002; rss: 151MB	death checking
time: 0.002; rss: 151MB	stability checking
time: 0.000; rss: 151MB	unused lib feature checking
time: 0.024; rss: 153MB	lint checking
time: 0.000; rss: 153MB	resolving dependency formats
time: 0.027; rss: 153MB	Prepare MIR codegen passes
  time: 0.057; rss: 158MB	write metadata
  time: 0.029; rss: 159MB	translation item collection
  time: 0.001; rss: 159MB	codegen unit partitioning
time: 0.943; rss: 185MB	translation
time: 0.000; rss: 185MB	assert dep graph
time: 0.000; rss: 185MB	serialize dep graph
  time: 0.336; rss: 151MB	llvm function passes [0]
  time: 0.626; rss: 154MB	llvm module passes [0]
  time: 5.843; rss: 160MB	codegen passes [0]
  time: 0.001; rss: 160MB	codegen passes [0]
time: 7.188; rss: 159MB	LLVM passes
time: 0.055; rss: 142MB	linking
done
