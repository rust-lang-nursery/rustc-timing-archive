commit cfc9b5185bbf5ab04a2736347bfa7fd9ab70c1e7
Merge: a41505f 8b0c292
Author: bors <bors@rust-lang.org>
Date:   Wed Oct 19 06:33:10 2016 -0700

    Auto merge of #37213 - jseyfried:refactor_crate_var, r=nrc
    
    macros: improve `$crate`
    
    This PR refactors the implementation of `$crate` so that
     - `$crate` is only allowed at the start of a path (like `super`),
     - we can make `$crate` work with inter-crate re-exports (groundwork for macro modularization), and
     - we can support importing macros from an extern crate that is not declared at the crate root (also groundwork for macro modularization).
    
    This is a [breaking-change]. For example, the following would break:
    ```rust
    fn foo() {}
    macro_rules! m { () => {
        $crate foo $crate () $crate $crate;
        //^ Today, `$crate` is allowed just about anywhere in unexported macros.
    } }
    fn main() {
        m!();
    }
    ```
    r? @nrc
rustc: ./html5ever-2016-08-25
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling void v1.0.2
   Compiling log v0.3.6
   Compiling lazy_static v0.2.1
   Compiling phf_shared v0.7.16
   Compiling serde v0.8.9
   Compiling libc v0.2.16
   Compiling rustc-serialize v0.3.19
   Compiling mac v0.0.2
   Compiling unreachable v0.1.1
   Compiling encoding_index_tests v0.1.4
   Compiling matches v0.1.2
   Compiling debug_unreachable v0.1.1
   Compiling encoding-index-korean v1.20141219.5
   Compiling encoding-index-singlebyte v1.20141219.5
   Compiling encoding-index-japanese v1.20141219.5
   Compiling utf-8 v0.6.0
   Compiling phf v0.7.16
   Compiling encoding-index-tradchinese v1.20141219.5
   Compiling encoding-index-simpchinese v1.20141219.5
   Compiling futf v0.1.2
   Compiling rand v0.3.14
   Compiling encoding v0.2.33
   Compiling phf_generator v0.7.16
   Compiling string_cache v0.2.29
   Compiling phf_codegen v0.7.16
   Compiling tendril v0.2.3
   Compiling html5ever v0.5.4 (file:///root/benchmarks/html5ever-2016-08-25)
time: 0.027; rss: 52MB	parsing
Lines of code:             8210
Pre-expansion node count:  52238
time: 0.000; rss: 52MB	recursion limit
time: 0.000; rss: 52MB	crate injection
time: 0.000; rss: 52MB	plugin loading
time: 0.000; rss: 52MB	plugin registration
time: 0.762; rss: 106MB	expansion
time: 0.000; rss: 106MB	maybe building test harness
time: 0.002; rss: 106MB	maybe creating a macro crate
Post-expansion node count: 163524
time: 0.000; rss: 106MB	checking for inline asm in case the target doesn't support it
time: 0.003; rss: 106MB	complete gated feature checking
time: 0.008; rss: 106MB	early lint checks
time: 0.002; rss: 106MB	AST validation
time: 0.018; rss: 110MB	name resolution
time: 0.015; rss: 125MB	lowering ast -> hir
time: 0.004; rss: 130MB	indexing hir
time: 0.002; rss: 130MB	attribute checking
time: 0.002; rss: 107MB	language item collection
time: 0.003; rss: 107MB	lifetime resolution
time: 0.000; rss: 107MB	looking for entry point
time: 0.000; rss: 107MB	looking for plugin registrar
time: 0.015; rss: 113MB	region resolution
time: 0.002; rss: 113MB	loop checking
time: 0.002; rss: 113MB	static item recursion checking
time: 0.026; rss: 114MB	compute_incremental_hashes_map
time: 0.000; rss: 114MB	load_dep_graph
time: 0.009; rss: 116MB	type collecting
time: 0.000; rss: 116MB	variance inference
time: 0.022; rss: 118MB	coherence checking
time: 0.023; rss: 118MB	wf checking
time: 0.344; rss: 125MB	item-types checking
time: 0.487; rss: 140MB	item-bodies checking
time: 0.000; rss: 140MB	drop-impl checking
time: 0.070; rss: 143MB	const checking
time: 0.009; rss: 143MB	privacy checking
time: 0.001; rss: 143MB	stability index
time: 0.003; rss: 143MB	intrinsic checking
time: 0.003; rss: 143MB	effect checking
time: 0.023; rss: 143MB	match checking
time: 0.013; rss: 138MB	liveness checking
time: 0.026; rss: 138MB	rvalue checking
time: 0.116; rss: 187MB	MIR dump
  time: 0.009; rss: 184MB	SimplifyCfg
  time: 0.014; rss: 184MB	QualifyAndPromoteConstants
  time: 0.024; rss: 184MB	TypeckMir
  time: 0.000; rss: 184MB	SimplifyBranches
  time: 0.004; rss: 184MB	SimplifyCfg
time: 0.051; rss: 184MB	MIR passes
time: 0.088; rss: 188MB	borrow checking
time: 0.003; rss: 188MB	reachability checking
time: 0.007; rss: 188MB	death checking
time: 0.008; rss: 188MB	stability checking
time: 0.000; rss: 188MB	unused lib feature checking
time: 0.064; rss: 188MB	lint checking
time: 0.000; rss: 188MB	resolving dependency formats
  time: 0.000; rss: 188MB	NoLandingPads
  time: 0.004; rss: 188MB	SimplifyCfg
  time: 0.010; rss: 188MB	EraseRegions
  time: 0.001; rss: 188MB	AddCallGuards
  time: 0.074; rss: 191MB	ElaborateDrops
  time: 0.000; rss: 191MB	NoLandingPads
  time: 0.006; rss: 189MB	SimplifyCfg
  time: 0.008; rss: 187MB	InstCombine
  time: 0.001; rss: 187MB	Deaggregator
  time: 0.000; rss: 187MB	CopyPropagation
  time: 0.001; rss: 187MB	AddCallGuards
  time: 0.000; rss: 187MB	PreTrans
time: 0.106; rss: 187MB	Prepare MIR codegen passes
  time: 0.012; rss: 188MB	write metadata
  time: 0.045; rss: 189MB	translation item collection
  time: 0.005; rss: 190MB	codegen unit partitioning
  time: 0.005; rss: 204MB	internalize symbols
time: 0.309; rss: 174MB	translation
time: 0.000; rss: 174MB	assert dep graph
time: 0.000; rss: 174MB	serialize dep graph
  time: 0.020; rss: 105MB	llvm function passes [0]
  time: 0.012; rss: 105MB	llvm module passes [0]
  time: 0.472; rss: 108MB	codegen passes [0]
  time: 0.000; rss: 108MB	codegen passes [0]
time: 0.550; rss: 108MB	LLVM passes
time: 0.000; rss: 108MB	serialize work products
time: 0.058; rss: 90MB	linking
done
