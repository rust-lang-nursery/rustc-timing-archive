commit 144af3e97aa30feba3d36a98ac04c0f1b2bc0bea
Merge: 1cdc0fb 4d76ac8
Author: bors <bors@rust-lang.org>
Date:   Sun Oct 2 17:33:34 2016 -0700

    Auto merge of #36807 - brson:pal, r=brson
    
    Restrict where in the tree platform-specific cfgs may be mentioned
    
    With the ports of Rust never ending, it's important that we keep things tidy. The main thing this PR does is introduce  a new "pal" (platform abstraction layer) tidy check that limits where platform-specific CFGs may appear.
    
    This is intended to maintain existing standards of code organization
    in hopes that the standard library will continue to be refactored to
    isolate platform-specific bits, making porting easier; where "standard
    library" roughly means "all the dependencies of the std and test
    crates".
    
    This generally means placing restrictions on where `cfg(unix)`,
    `cfg(windows)`, `cfg(target_os)` and `cfg(target_env)` may appear,
    the basic objective being to isolate platform-specific code to the
    platform-specific `std::sys` modules, and to the allocation,
    unwinding, and libc crates.
    
    Following are the basic rules, though there are currently
    exceptions:
    
    - core may not have platform-specific code
    - liballoc_system may have platform-specific code
    - liballoc_jemalloc may have platform-specific code
    - libpanic_abort may have platform-specific code
    - libpanic_unwind may have platform-specific code
    - other crates in the std facade may not
    - std may have platform-specific code in the following places
      - sys/unix/
      - sys/windows/
      - os/
    
    There are plenty of exceptions today though, noted in the whitelist.
    
    The end-state, IMO, is for the standard library to be portable by porting only `std::sys` (possibly extracted to its own crate), an allocator crate, an unwinder crate, and possibly a libc crate (if std depends on it); but that outcome is far off and independent of the utility of enforcing where such code lives today.
    
    cc @rust-lang/libs
rustc: ./syntex-0.42.2
cargo rustc -p syntex_syntax -- -Ztime-passes -Zinput-stats
   Compiling syntex_syntax v0.42.0
time: 0.163; rss: 68MB	parsing
Lines of code:             33687
Pre-expansion node count:  224033
time: 0.000; rss: 68MB	recursion limit
time: 0.000; rss: 68MB	crate injection
time: 0.000; rss: 68MB	plugin loading
time: 0.000; rss: 68MB	plugin registration
time: 0.359; rss: 137MB	expansion
time: 0.000; rss: 137MB	maybe building test harness
time: 0.007; rss: 137MB	maybe creating a macro crate
Post-expansion node count: 641571
time: 0.000; rss: 137MB	checking for inline asm in case the target doesn't support it
time: 0.014; rss: 137MB	complete gated feature checking
time: 0.024; rss: 137MB	early lint checks
time: 0.008; rss: 137MB	AST validation
time: 0.115; rss: 152MB	name resolution
time: 0.120; rss: 191MB	lowering ast -> hir
time: 0.019; rss: 199MB	indexing hir
time: 0.007; rss: 199MB	attribute checking
time: 0.006; rss: 152MB	language item collection
time: 0.013; rss: 152MB	lifetime resolution
time: 0.000; rss: 152MB	looking for entry point
time: 0.000; rss: 152MB	looking for plugin registrar
time: 0.068; rss: 161MB	region resolution
time: 0.006; rss: 161MB	loop checking
time: 0.006; rss: 161MB	static item recursion checking
time: 0.301; rss: 164MB	compute_incremental_hashes_map
time: 0.000; rss: 164MB	load_dep_graph
time: 0.080; rss: 166MB	type collecting
time: 0.001; rss: 166MB	variance inference
time: 0.038; rss: 169MB	coherence checking
time: 0.100; rss: 171MB	wf checking
time: 0.205; rss: 176MB	item-types checking
time: 4.194; rss: 217MB	item-bodies checking
time: 0.000; rss: 217MB	drop-impl checking
time: 0.342; rss: 220MB	const checking
time: 0.058; rss: 220MB	privacy checking
time: 0.008; rss: 220MB	stability index
time: 0.023; rss: 220MB	intrinsic checking
time: 0.020; rss: 220MB	effect checking
time: 0.059; rss: 220MB	match checking
time: 0.091; rss: 217MB	liveness checking
time: 0.310; rss: 217MB	rvalue checking
time: 0.676; rss: 393MB	MIR dump
  time: 0.065; rss: 400MB	SimplifyCfg
  time: 0.086; rss: 400MB	QualifyAndPromoteConstants
  time: 0.116; rss: 400MB	TypeckMir
  time: 0.005; rss: 400MB	SimplifyBranches
  time: 0.037; rss: 400MB	SimplifyCfg
time: 0.310; rss: 400MB	MIR passes
time: 0.727; rss: 403MB	borrow checking
time: 0.018; rss: 403MB	reachability checking
time: 0.048; rss: 403MB	death checking
time: 0.044; rss: 404MB	stability checking
time: 0.000; rss: 404MB	unused lib feature checking
time: 0.228; rss: 404MB	lint checking
time: 0.000; rss: 404MB	resolving dependency formats
  time: 0.003; rss: 404MB	NoLandingPads
  time: 0.027; rss: 404MB	SimplifyCfg
  time: 0.096; rss: 412MB	EraseRegions
  time: 0.012; rss: 412MB	AddCallGuards
  time: 1.143; rss: 432MB	ElaborateDrops
  time: 0.003; rss: 432MB	NoLandingPads
  time: 0.054; rss: 432MB	SimplifyCfg
  time: 0.031; rss: 432MB	InstCombine
  time: 0.012; rss: 432MB	Deaggregator
  time: 0.003; rss: 432MB	CopyPropagation
  time: 0.010; rss: 432MB	AddCallGuards
  time: 0.003; rss: 432MB	PreTrans
time: 1.398; rss: 432MB	Prepare MIR codegen passes
  time: 0.282; rss: 438MB	write metadata
  time: 0.505; rss: 447MB	translation item collection
  time: 0.073; rss: 453MB	codegen unit partitioning
  time: 0.059; rss: 705MB	internalize symbols
time: 5.773; rss: 585MB	translation
time: 0.000; rss: 585MB	assert dep graph
time: 0.000; rss: 585MB	serialize dep graph
  time: 0.522; rss: 408MB	llvm function passes [0]
  time: 0.254; rss: 413MB	llvm module passes [0]
  time: 10.277; rss: 408MB	codegen passes [0]
  time: 0.001; rss: 410MB	codegen passes [0]
time: 11.925; rss: 410MB	LLVM passes
time: 0.000; rss: 410MB	serialize work products
time: 0.671; rss: 102MB	linking
done
