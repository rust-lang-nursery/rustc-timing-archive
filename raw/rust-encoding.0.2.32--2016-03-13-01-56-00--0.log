commit 06074ac004701bff42c625247c4764b2ae6fca6c
Merge: 3e05371 e926f28
Author: bors <bors@rust-lang.org>
Date:   Sat Mar 12 21:55:14 2016 -0800

    Auto merge of #32141 - jseyfried:fix_resolution_in_lexical_scopes, r=nikomatsakis
    
    Fix name resolution in lexical scopes
    
    Currently, `resolve_item_in_lexical_scope` does not check the "ribs" (type parameters and local variables). This can allow items that should be shadowed by type parameters to be named.
    
    For example,
    ```rust
    struct T { i: i32 }
    fn f<T>() {
        let t = T { i: 0 }; // This use of `T` resolves to the struct, not the type parameter
    }
    
    mod Foo {
        pub fn f() {}
    }
    fn g<Foo>() {
        Foo::f(); // This use of `Foo` resolves to the module, not the type parameter
    }
    ```
    
    This PR changes `resolve_item_in_lexical_scope` so that it fails when the item is shadowed by a rib (fixes #32120).
    This is a [breaking-change], but it looks unlikely to cause breakage in practice.
    
    r? @nikomatsakis
rustc: ./rust-encoding.0.2.32
cargo rustc -- -Ztime-passes -Zinput-stats
    Updating registry `https://github.com/rust-lang/crates.io-index`
   Compiling encoding_index_tests v0.1.4 (file:///root/benchmarks/rust-encoding.0.2.32)
   Compiling encoding-index-singlebyte v1.20141219.5 (file:///root/benchmarks/rust-encoding.0.2.32)
   Compiling encoding-index-tradchinese v1.20141219.5 (file:///root/benchmarks/rust-encoding.0.2.32)
   Compiling encoding-index-japanese v1.20141219.5 (file:///root/benchmarks/rust-encoding.0.2.32)
   Compiling encoding-index-simpchinese v1.20141219.5 (file:///root/benchmarks/rust-encoding.0.2.32)
   Compiling encoding-index-korean v1.20141219.5 (file:///root/benchmarks/rust-encoding.0.2.32)
   Compiling encoding v0.2.32 (file:///root/benchmarks/rust-encoding.0.2.32)
time: 0.023; rss: 42MB	parsing
Lines of code:             6441
Pre-expansion node count:  30335
time: 0.006; rss: 42MB	configuration 1
time: 0.000; rss: 42MB	recursion limit
time: 0.000; rss: 42MB	gated macro checking
time: 0.000; rss: 42MB	crate injection
time: 0.003; rss: 46MB	macro loading
time: 0.000; rss: 46MB	plugin loading
time: 0.000; rss: 46MB	plugin registration
time: 0.044; rss: 48MB	expansion
time: 0.001; rss: 48MB	complete gated feature checking 1
time: 0.008; rss: 48MB	configuration 2
time: 0.000; rss: 48MB	gated configuration checking
time: 0.004; rss: 48MB	maybe building test harness
time: 0.003; rss: 48MB	prelude injection
time: 0.000; rss: 48MB	checking that all macro invocations are gone
time: 0.000; rss: 48MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 48MB	complete gated feature checking 2
time: 0.000; rss: 48MB	const fn bodies and arguments
Post-expansion node count: 41783
time: 0.003; rss: 48MB	assigning node ids
time: 0.004; rss: 52MB	lowering ast -> hir
time: 0.001; rss: 54MB	indexing hir
time: 0.001; rss: 54MB	attribute checking
time: 0.002; rss: 54MB	early lint checks
time: 0.001; rss: 53MB	external crate/lib resolution
time: 0.000; rss: 53MB	language item collection
time: 0.008; rss: 62MB	resolution
time: 0.000; rss: 62MB	lifetime resolution
time: 0.000; rss: 62MB	looking for entry point
time: 0.000; rss: 62MB	looking for plugin registrar
time: 0.002; rss: 64MB	region resolution
time: 0.000; rss: 64MB	loop checking
time: 0.000; rss: 63MB	static item recursion checking
time: 0.005; rss: 66MB	type collecting
time: 0.000; rss: 66MB	variance inference
time: 0.020; rss: 81MB	coherence checking
time: 0.018; rss: 81MB	wf checking
time: 0.012; rss: 81MB	item-types checking
time: 0.181; rss: 93MB	item-bodies checking
time: 0.000; rss: 93MB	drop-impl checking
time: 0.010; rss: 93MB	const checking
time: 0.002; rss: 93MB	privacy checking
time: 0.000; rss: 93MB	stability index
time: 0.001; rss: 93MB	intrinsic checking
time: 0.000; rss: 93MB	effect checking
time: 0.006; rss: 93MB	match checking
time: 0.002; rss: 93MB	liveness checking
time: 0.006; rss: 93MB	rvalue checking
time: 0.021; rss: 97MB	MIR dump
time: 0.000; rss: 97MB	MIR passes
time: 0.022; rss: 97MB	borrow checking
time: 0.000; rss: 97MB	reachability checking
time: 0.002; rss: 97MB	death checking
time: 0.002; rss: 97MB	stability checking
time: 0.000; rss: 97MB	unused lib feature checking
time: 0.018; rss: 97MB	lint checking
time: 0.000; rss: 97MB	resolving dependency formats
time: 0.002; rss: 97MB	erasing regions from MIR
  time: 0.024; rss: 110MB	translation item collection
  time: 0.057; rss: 145MB	write metadata
time: 0.317; rss: 145MB	translation
  time: 0.026; rss: 108MB	llvm function passes [0]
  time: 0.049; rss: 112MB	llvm module passes [0]
  time: 0.565; rss: 117MB	codegen passes [0]
  time: 0.001; rss: 101MB	codegen passes [0]
time: 0.703; rss: 101MB	LLVM passes
time: 0.051; rss: 99MB	linking
done
