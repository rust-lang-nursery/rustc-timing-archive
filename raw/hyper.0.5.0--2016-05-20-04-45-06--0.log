commit d27bdafc3eaab2729d664f82b7d650782640f31a
Merge: cde0fa5 0d2c26c
Author: bors <bors@rust-lang.org>
Date:   Fri May 20 00:34:50 2016 -0700

    Auto merge of #33553 - alexcrichton:cdylibs, r=brson
    
    rustc: Add a new crate type, cdylib
    
    This commit is an implementation of [RFC 1510] which adds a new crate type,
    `cdylib`, to the compiler. This new crate type differs from the existing `dylib`
    crate type in a few key ways:
    
    * No metadata is present in the final artifact
    * Symbol visibility rules are the same as executables, that is only reachable
      `extern` functions are visible symbols
    * LTO is allowed
    * All libraries are always linked statically
    
    This commit is relatively simple by just plubming the compiler with another
    crate type which takes different branches here and there. The only major change
    is an implementation of the `Linker::export_symbols` function on Unix which now
    actually does something. This helps restrict the public symbols from a cdylib on
    Unix.
    
    With this PR a "hello world" `cdylib` is 7.2K while the same `dylib` is 2.4MB,
    which is some nice size savings!
    
    [RFC 1510]: https://github.com/rust-lang/rfcs/pull/1510
    
    Closes #33132
rustc: ./hyper.0.5.0
cargo rustc -- -Ztime-passes -Zinput-stats
    Updating registry `https://github.com/rust-lang/crates.io-index`
 Downloading regex-syntax v0.3.2
 Downloading regex v0.1.71
   Compiling traitobject v0.0.1
   Compiling log v0.3.6
   Compiling rustc-serialize v0.3.19
   Compiling pkg-config v0.3.8
   Compiling gcc v0.3.28
   Compiling libc v0.1.12
   Compiling bitflags v0.3.3
   Compiling unicase v0.1.0
   Compiling matches v0.1.2
   Compiling winapi v0.2.7
   Compiling typeable v0.1.2
   Compiling httparse v0.1.6
   Compiling winapi-build v0.1.1
   Compiling mime v0.0.11
   Compiling kernel32-sys v0.2.2
   Compiling libc v0.2.11
   Compiling lazy_static v0.1.16
   Compiling openssl-sys v0.6.7
   Compiling rand v0.3.14
   Compiling time v0.1.35
   Compiling num_cpus v0.2.12
   Compiling openssl v0.6.7
   Compiling uuid v0.1.18
   Compiling url v0.2.38
   Compiling cookie v0.1.21
   Compiling hyper v0.5.0 (file:///root/benchmarks/hyper.0.5.0)
time: 0.032; rss: 53MB	parsing
Lines of code:             9154
Pre-expansion node count:  45851
time: 0.008; rss: 53MB	configuration 1
time: 0.000; rss: 53MB	recursion limit
time: 0.000; rss: 53MB	crate injection
time: 0.020; rss: 93MB	macro loading
time: 0.000; rss: 93MB	plugin loading
time: 0.000; rss: 93MB	plugin registration
time: 0.189; rss: 101MB	expansion
time: 0.029; rss: 101MB	configuration 2
time: 0.000; rss: 101MB	gated configuration checking
time: 0.011; rss: 101MB	maybe building test harness
time: 0.008; rss: 101MB	prelude injection
time: 0.001; rss: 101MB	checking that all macro invocations are gone
time: 0.000; rss: 101MB	checking for inline asm in case the target doesn't support it
time: 0.002; rss: 101MB	complete gated feature checking
Post-expansion node count: 103616
time: 0.008; rss: 101MB	assigning node ids
time: 0.003; rss: 103MB	collecting defs
time: 0.011; rss: 112MB	external crate/lib resolution
time: 0.006; rss: 112MB	early lint checks
time: 0.024; rss: 119MB	name resolution
time: 0.010; rss: 126MB	lowering ast -> hir
time: 0.002; rss: 128MB	indexing hir
time: 0.001; rss: 128MB	attribute checking
time: 0.001; rss: 118MB	language item collection
time: 0.002; rss: 118MB	lifetime resolution
time: 0.000; rss: 118MB	looking for entry point
time: 0.000; rss: 118MB	looking for plugin registrar
time: 0.006; rss: 121MB	region resolution
time: 0.001; rss: 121MB	loop checking
time: 0.001; rss: 121MB	static item recursion checking
time: 0.000; rss: 121MB	load_dep_graph
time: 0.018; rss: 125MB	type collecting
time: 0.000; rss: 125MB	variance inference
time: 0.043; rss: 130MB	coherence checking
time: 0.092; rss: 131MB	wf checking
time: 0.035; rss: 131MB	item-types checking
time: 0.517; rss: 142MB	item-bodies checking
time: 0.000; rss: 142MB	drop-impl checking
time: 0.043; rss: 144MB	const checking
time: 0.009; rss: 145MB	privacy checking
time: 0.001; rss: 145MB	stability index
time: 0.006; rss: 145MB	intrinsic checking
time: 0.002; rss: 145MB	effect checking
time: 0.014; rss: 145MB	match checking
time: 0.004; rss: 145MB	liveness checking
time: 0.030; rss: 145MB	rvalue checking
time: 0.063; rss: 153MB	MIR dump
time: 0.040; rss: 155MB	MIR passes
time: 0.072; rss: 155MB	borrow checking
time: 0.003; rss: 155MB	reachability checking
time: 0.006; rss: 155MB	death checking
time: 0.005; rss: 155MB	stability checking
time: 0.000; rss: 155MB	unused lib feature checking
time: 0.050; rss: 155MB	lint checking
time: 0.000; rss: 155MB	resolving dependency formats
time: 0.011; rss: 155MB	Prepare MIR codegen passes
  time: 0.282; rss: 163MB	translation item collection
  time: 0.009; rss: 165MB	codegen unit partitioning
  time: 0.131; rss: 290MB	write metadata
time: 1.730; rss: 290MB	translation
time: 0.001; rss: 290MB	assert dep graph
time: 0.000; rss: 290MB	serialize dep graph
  time: 0.096; rss: 179MB	llvm function passes [0]
  time: 0.048; rss: 181MB	llvm module passes [0]
  time: 1.617; rss: 185MB	codegen passes [0]
  time: 0.001; rss: 136MB	codegen passes [0]
time: 1.976; rss: 134MB	LLVM passes
time: 0.176; rss: 131MB	linking
done
