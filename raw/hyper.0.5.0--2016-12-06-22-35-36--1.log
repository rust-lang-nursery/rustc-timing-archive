commit 3fef221514ab31088f75d14516c851e68a70cf9e
Merge: 5f128ed bc3618e
Author: bors <bors@rust-lang.org>
Date:   Wed Dec 7 00:30:25 2016 +0000

    Auto merge of #38134 - bluss:iter-nth, r=aturon
    
    Remove Self: Sized from Iterator::nth
    
    It is an unnecessary restriction; nth neither needs self to be sized
    nor needs to be exempted from the trait object.
    
    It increases the utility of the nth method, because type specific
    implementations are available through `&mut I` or through an iterator
    trait object.
    
    It is a backwards compatible change due to the special cases of the
    `where Self: Sized` bound; it was already optional to include this bound
    in `Iterator` implementations.
rustc: ./hyper.0.5.0
cargo rustc  -- -Ztime-passes -Zinput-stats
time: 0.023; rss: 48MB	parsing
Lines of code:             9003
Pre-expansion node count:  44055
time: 0.000; rss: 48MB	recursion limit
time: 0.000; rss: 48MB	crate injection
time: 0.000; rss: 48MB	plugin loading
time: 0.000; rss: 48MB	plugin registration
time: 0.077; rss: 89MB	expansion
time: 0.000; rss: 89MB	maybe building test harness
time: 0.001; rss: 89MB	maybe creating a macro crate
Post-expansion node count: 101769
time: 0.000; rss: 89MB	checking for inline asm in case the target doesn't support it
time: 0.001; rss: 89MB	complete gated feature checking
time: 0.003; rss: 89MB	early lint checks
time: 0.001; rss: 89MB	AST validation
time: 0.013; rss: 94MB	name resolution
time: 0.009; rss: 98MB	lowering ast -> hir
time: 0.002; rss: 96MB	indexing hir
time: 0.001; rss: 96MB	attribute checking
time: 0.001; rss: 90MB	language item collection
time: 0.002; rss: 90MB	lifetime resolution
time: 0.000; rss: 90MB	looking for entry point
time: 0.000; rss: 90MB	looking for plugin registrar
time: 0.006; rss: 95MB	region resolution
time: 0.001; rss: 95MB	loop checking
time: 0.000; rss: 95MB	static item recursion checking
time: 0.052; rss: 95MB	compute_incremental_hashes_map
time: 0.000; rss: 95MB	load_dep_graph
time: 0.001; rss: 95MB	stability index
time: 0.003; rss: 96MB	stability checking
time: 0.013; rss: 98MB	type collecting
time: 0.000; rss: 98MB	variance inference
time: 0.001; rss: 98MB	impl wf inference
time: 0.014; rss: 99MB	coherence checking
time: 0.037; rss: 100MB	wf checking
time: 0.024; rss: 100MB	item-types checking
time: 0.294; rss: 112MB	item-bodies checking
time: 0.000; rss: 112MB	drop-impl checking
time: 0.030; rss: 114MB	const checking
time: 0.008; rss: 114MB	privacy checking
time: 0.003; rss: 114MB	intrinsic checking
time: 0.001; rss: 114MB	effect checking
time: 0.007; rss: 114MB	match checking
time: 0.004; rss: 114MB	liveness checking
time: 0.019; rss: 114MB	rvalue checking
time: 0.046; rss: 134MB	MIR dump
  time: 0.006; rss: 135MB	SimplifyCfg
  time: 0.011; rss: 137MB	QualifyAndPromoteConstants
  time: 0.013; rss: 137MB	TypeckMir
  time: 0.000; rss: 137MB	SimplifyBranches
  time: 0.003; rss: 137MB	SimplifyCfg
time: 0.034; rss: 137MB	MIR cleanup and validation
time: 0.049; rss: 137MB	borrow checking
time: 0.003; rss: 137MB	reachability checking
time: 0.004; rss: 137MB	death checking
time: 0.000; rss: 137MB	unused lib feature checking
time: 0.034; rss: 137MB	lint checking
time: 0.000; rss: 137MB	resolving dependency formats
  time: 0.000; rss: 137MB	NoLandingPads
  time: 0.003; rss: 137MB	SimplifyCfg
  time: 0.007; rss: 137MB	EraseRegions
  time: 0.001; rss: 137MB	AddCallGuards
  time: 0.021; rss: 140MB	ElaborateDrops
  time: 0.000; rss: 140MB	NoLandingPads
  time: 0.005; rss: 140MB	SimplifyCfg
  time: 0.003; rss: 140MB	InstCombine
  time: 0.003; rss: 140MB	Deaggregator
  time: 0.000; rss: 140MB	CopyPropagation
  time: 0.004; rss: 140MB	SimplifyLocals
  time: 0.001; rss: 140MB	AddCallGuards
  time: 0.000; rss: 140MB	PreTrans
time: 0.049; rss: 140MB	MIR optimisations
  time: 0.011; rss: 142MB	write metadata
  time: 0.121; rss: 155MB	translation item collection
  time: 0.014; rss: 158MB	codegen unit partitioning
  time: 0.013; rss: 214MB	internalize symbols
time: 1.004; rss: 214MB	translation
time: 0.000; rss: 214MB	assert dep graph
time: 0.000; rss: 214MB	serialize dep graph
  time: 0.085; rss: 154MB	llvm function passes [0]
  time: 0.047; rss: 156MB	llvm module passes [0]
  time: 1.645; rss: 158MB	codegen passes [0]
  time: 0.000; rss: 158MB	codegen passes [0]
time: 1.913; rss: 158MB	LLVM passes
time: 0.000; rss: 158MB	serialize work products
time: 0.070; rss: 101MB	linking
done
