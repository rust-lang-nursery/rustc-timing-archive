commit 1a019dc86de1459809f776b869e36f8e71a7665a
Merge: f1d6f12 6265b6b
Author: bors <bors@rust-lang.org>
Date:   Fri Mar 11 20:57:39 2016 -0800

    Auto merge of #31925 - aturon:inherent-overlap, r=nikomatsakis
    
    Forbid items with the same name from appearing in overlapping inherent impl blocks
    
    For example, the following is now correctly illegal:
    
    ```rust
    struct Foo;
    
    impl Foo {
        fn id() {}
    }
    
    impl Foo {
        fn id() {}
    }
    ```
    
    "Overlapping" here is determined the same way it is for traits (and in fact shares the same code path): roughly, there must be some way of substituting any generic types to unify the impls, such that none of the `where` clauses are provably unsatisfiable under such a unification.
    
    Along the way, this PR also introduces an `ImplHeader` abstraction (the first commit) that makes it easier to work with impls abstractly (without caring whether they are trait or inherent impl blocks); see the first commit.
    
    Closes #22889
    r? @nikomatsakis
rustc: ./hyper.0.5.0
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling hyper v0.5.0 (file:///root/benchmarks/hyper.0.5.0)
time: 0.029; rss: 45MB	parsing
Lines of code:             9154
Pre-expansion node count:  45594
time: 0.009; rss: 45MB	configuration 1
time: 0.000; rss: 45MB	recursion limit
time: 0.000; rss: 45MB	gated macro checking
time: 0.000; rss: 45MB	crate injection
time: 0.004; rss: 50MB	macro loading
time: 0.000; rss: 50MB	plugin loading
time: 0.000; rss: 50MB	plugin registration
time: 0.190; rss: 60MB	expansion
time: 0.005; rss: 60MB	complete gated feature checking 1
time: 0.034; rss: 60MB	configuration 2
time: 0.000; rss: 60MB	gated configuration checking
time: 0.013; rss: 60MB	maybe building test harness
time: 0.010; rss: 60MB	prelude injection
time: 0.001; rss: 60MB	checking that all macro invocations are gone
time: 0.000; rss: 60MB	checking for inline asm in case the target doesn't support it
time: 0.002; rss: 60MB	complete gated feature checking 2
time: 0.001; rss: 60MB	const fn bodies and arguments
Post-expansion node count: 109138
time: 0.010; rss: 60MB	assigning node ids
time: 0.010; rss: 64MB	lowering ast -> hir
time: 0.004; rss: 68MB	indexing hir
time: 0.002; rss: 68MB	attribute checking
time: 0.006; rss: 68MB	early lint checks
time: 0.003; rss: 63MB	external crate/lib resolution
time: 0.001; rss: 63MB	language item collection
time: 0.024; rss: 83MB	resolution
time: 0.002; rss: 83MB	lifetime resolution
time: 0.000; rss: 83MB	looking for entry point
time: 0.000; rss: 83MB	looking for plugin registrar
time: 0.005; rss: 85MB	region resolution
time: 0.001; rss: 85MB	loop checking
time: 0.001; rss: 85MB	static item recursion checking
time: 0.013; rss: 88MB	type collecting
time: 0.000; rss: 88MB	variance inference
time: 0.040; rss: 107MB	coherence checking
time: 0.078; rss: 108MB	wf checking
time: 0.026; rss: 110MB	item-types checking
time: 0.504; rss: 132MB	item-bodies checking
time: 0.000; rss: 132MB	drop-impl checking
time: 0.037; rss: 134MB	const checking
time: 0.010; rss: 134MB	privacy checking
time: 0.001; rss: 134MB	stability index
time: 0.004; rss: 134MB	intrinsic checking
time: 0.001; rss: 134MB	effect checking
time: 0.011; rss: 134MB	match checking
time: 0.004; rss: 134MB	liveness checking
time: 0.032; rss: 134MB	rvalue checking
time: 0.060; rss: 136MB	MIR dump
time: 0.000; rss: 136MB	MIR passes
time: 0.064; rss: 136MB	borrow checking
time: 0.003; rss: 136MB	reachability checking
time: 0.006; rss: 136MB	death checking
time: 0.006; rss: 136MB	stability checking
time: 0.000; rss: 136MB	unused lib feature checking
time: 0.047; rss: 136MB	lint checking
time: 0.000; rss: 136MB	resolving dependency formats
time: 0.008; rss: 136MB	erasing regions from MIR
  time: 0.188; rss: 155MB	translation item collection
  time: 0.139; rss: 277MB	write metadata
time: 1.392; rss: 277MB	translation
  time: 0.097; rss: 165MB	llvm function passes [0]
  time: 0.046; rss: 166MB	llvm module passes [0]
  time: 1.613; rss: 167MB	codegen passes [0]
  time: 0.001; rss: 119MB	codegen passes [0]
time: 1.951; rss: 119MB	LLVM passes
time: 0.168; rss: 117MB	linking
done
