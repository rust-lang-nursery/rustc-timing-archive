commit b1da18fe9be180ecfcfb1691c4eb669c496996f5
Merge: fb025b4 f324037
Author: bors <bors@rust-lang.org>
Date:   Sat Nov 19 08:08:26 2016 -0800

    Auto merge of #37822 - cuviper:llvm-link-shared, r=alexcrichton
    
    rustbuild: allow dynamically linking LLVM
    
    The makefiles and `mklldeps.py` called `llvm-config --shared-mode` to
    find out if LLVM defaulted to shared or static libraries, and just went
    with that.  But under rustbuild, `librustc_llvm/build.rs` was assuming
    that LLVM should be static, and even forcing `--link-static` for 3.9+.
    
    Now that build script also uses `--shared-mode` to learn the default,
    which should work better for pre-3.9 configured for dynamic linking, as
    it wasn't possible back then to choose differently via `llvm-config`.
    
    Further, the configure script now has a new `--enable-llvm-link-shared`
    option, which allows one to manually override `--link-shared` on 3.9+
    instead of forcing static.
    
    Update: There are now four static/shared scenarios that can happen
    for the supported LLVM versions:
    
    - 3.9+: By default use `llvm-config --link-static`
    - 3.9+ and `--enable-llvm-link-shared`: Use `--link-shared` instead.
    - 3.8: Use `llvm-config --shared-mode` and go with its answer.
    - 3.7: Just assume static, maintaining the status quo.
rustc: ./hyper.0.5.0
cargo rustc  -- -Ztime-passes -Zinput-stats
   Compiling rustc-serialize v0.3.19
   Compiling libc v0.1.12
   Compiling httparse v0.1.6
   Compiling pkg-config v0.3.8
   Compiling traitobject v0.0.1
   Compiling libc v0.2.16
   Compiling winapi-build v0.1.1
   Compiling lazy_static v0.1.16
   Compiling matches v0.1.2
   Compiling unicase v0.1.0
   Compiling gcc v0.3.35
   Compiling winapi v0.2.8
   Compiling kernel32-sys v0.2.2
   Compiling typeable v0.1.2
   Compiling log v0.3.6
   Compiling bitflags v0.3.3
   Compiling rand v0.3.14
   Compiling num_cpus v0.2.13
   Compiling mime v0.0.11
   Compiling time v0.1.35
   Compiling openssl-sys v0.6.7
   Compiling openssl v0.6.7
   Compiling uuid v0.1.18
   Compiling url v0.2.38
   Compiling cookie v0.1.21
   Compiling hyper v0.5.0 (file:///root/benchmarks/hyper.0.5.0)
time: 0.023; rss: 48MB	parsing
Lines of code:             9003
Pre-expansion node count:  44055
time: 0.000; rss: 48MB	recursion limit
time: 0.000; rss: 48MB	crate injection
time: 0.000; rss: 48MB	plugin loading
time: 0.000; rss: 48MB	plugin registration
time: 0.093; rss: 86MB	expansion
time: 0.000; rss: 86MB	maybe building test harness
time: 0.001; rss: 86MB	maybe creating a macro crate
Post-expansion node count: 101769
time: 0.000; rss: 86MB	checking for inline asm in case the target doesn't support it
time: 0.002; rss: 86MB	complete gated feature checking
time: 0.003; rss: 86MB	early lint checks
time: 0.001; rss: 86MB	AST validation
time: 0.018; rss: 90MB	name resolution
time: 0.014; rss: 93MB	lowering ast -> hir
time: 0.005; rss: 95MB	indexing hir
time: 0.001; rss: 95MB	attribute checking
time: 0.001; rss: 90MB	language item collection
time: 0.002; rss: 90MB	lifetime resolution
time: 0.000; rss: 90MB	looking for entry point
time: 0.000; rss: 90MB	looking for plugin registrar
time: 0.012; rss: 92MB	region resolution
time: 0.001; rss: 92MB	loop checking
time: 0.001; rss: 92MB	static item recursion checking
time: 0.040; rss: 93MB	compute_incremental_hashes_map
time: 0.000; rss: 93MB	load_dep_graph
time: 0.014; rss: 95MB	type collecting
time: 0.000; rss: 95MB	variance inference
time: 0.001; rss: 95MB	impl wf inference
time: 0.015; rss: 97MB	coherence checking
time: 0.039; rss: 98MB	wf checking
time: 0.024; rss: 99MB	item-types checking
time: 0.475; rss: 106MB	item-bodies checking
time: 0.000; rss: 106MB	drop-impl checking
time: 0.050; rss: 108MB	const checking
time: 0.008; rss: 108MB	privacy checking
time: 0.001; rss: 108MB	stability index
time: 0.003; rss: 108MB	intrinsic checking
time: 0.001; rss: 108MB	effect checking
time: 0.007; rss: 108MB	match checking
time: 0.004; rss: 109MB	liveness checking
time: 0.020; rss: 109MB	rvalue checking
time: 0.062; rss: 128MB	MIR dump
  time: 0.007; rss: 129MB	SimplifyCfg
  time: 0.013; rss: 131MB	QualifyAndPromoteConstants
  time: 0.013; rss: 131MB	TypeckMir
  time: 0.001; rss: 131MB	SimplifyBranches
  time: 0.003; rss: 131MB	SimplifyCfg
time: 0.037; rss: 131MB	MIR cleanup and validation
time: 0.055; rss: 132MB	borrow checking
time: 0.003; rss: 132MB	reachability checking
time: 0.005; rss: 132MB	death checking
time: 0.004; rss: 132MB	stability checking
time: 0.000; rss: 132MB	unused lib feature checking
time: 0.037; rss: 132MB	lint checking
time: 0.000; rss: 132MB	resolving dependency formats
  time: 0.000; rss: 132MB	NoLandingPads
  time: 0.003; rss: 132MB	SimplifyCfg
  time: 0.008; rss: 133MB	EraseRegions
  time: 0.001; rss: 133MB	AddCallGuards
  time: 0.025; rss: 134MB	ElaborateDrops
  time: 0.000; rss: 134MB	NoLandingPads
  time: 0.005; rss: 134MB	SimplifyCfg
  time: 0.003; rss: 134MB	InstCombine
  time: 0.003; rss: 134MB	Deaggregator
  time: 0.000; rss: 134MB	CopyPropagation
  time: 0.004; rss: 134MB	SimplifyLocals
  time: 0.001; rss: 134MB	AddCallGuards
  time: 0.000; rss: 134MB	PreTrans
time: 0.092; rss: 134MB	MIR optimisations
  time: 0.013; rss: 136MB	write metadata
  time: 0.133; rss: 142MB	translation item collection
  time: 0.016; rss: 145MB	codegen unit partitioning
  time: 0.014; rss: 199MB	internalize symbols
time: 1.069; rss: 199MB	translation
time: 0.000; rss: 199MB	assert dep graph
time: 0.000; rss: 199MB	serialize dep graph
  time: 0.087; rss: 147MB	llvm function passes [0]
  time: 0.042; rss: 149MB	llvm module passes [0]
  time: 1.638; rss: 151MB	codegen passes [0]
  time: 0.000; rss: 151MB	codegen passes [0]
time: 1.926; rss: 151MB	LLVM passes
time: 0.000; rss: 151MB	serialize work products
time: 0.071; rss: 94MB	linking
done
