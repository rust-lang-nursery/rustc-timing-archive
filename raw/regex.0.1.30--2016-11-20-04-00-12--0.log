commit e5ed0a5d78be74238af31631e7ecf311eb661586
Merge: 7c535c6 36f2af1
Author: bors <bors@rust-lang.org>
Date:   Sat Nov 19 23:39:25 2016 -0600

    Auto merge of #37842 - nikomatsakis:incremental-test, r=mw
    
    Add tests for incremental reuse scenarios
    
    These are microbenchmarks checking that we achieve the expected reuse in the scenarios covered by incremental beta.
    
    r? @michaelwoerister
rustc: ./regex.0.1.30
cargo rustc  -- -Ztime-passes -Zinput-stats
   Compiling regex v0.1.30 (file:///root/benchmarks/regex.0.1.30)
time: 0.042; rss: 53MB	parsing
Lines of code:             8558
Pre-expansion node count:  58049
time: 0.000; rss: 54MB	recursion limit
time: 0.000; rss: 54MB	crate injection
time: 0.000; rss: 54MB	plugin loading
time: 0.000; rss: 54MB	plugin registration
time: 0.028; rss: 78MB	expansion
time: 0.000; rss: 78MB	maybe building test harness
time: 0.001; rss: 78MB	maybe creating a macro crate
Post-expansion node count: 68093
time: 0.000; rss: 78MB	checking for inline asm in case the target doesn't support it
time: 0.001; rss: 78MB	complete gated feature checking
time: 0.003; rss: 78MB	early lint checks
time: 0.000; rss: 78MB	AST validation
time: 0.005; rss: 78MB	name resolution
time: 0.005; rss: 85MB	lowering ast -> hir
time: 0.001; rss: 87MB	indexing hir
time: 0.001; rss: 87MB	attribute checking
time: 0.001; rss: 79MB	language item collection
time: 0.001; rss: 79MB	lifetime resolution
time: 0.000; rss: 79MB	looking for entry point
time: 0.000; rss: 79MB	looking for plugin registrar
time: 0.005; rss: 82MB	region resolution
time: 0.000; rss: 82MB	loop checking
time: 0.001; rss: 82MB	static item recursion checking
time: 0.018; rss: 83MB	compute_incremental_hashes_map
time: 0.000; rss: 83MB	load_dep_graph
time: 0.006; rss: 84MB	type collecting
time: 0.000; rss: 84MB	variance inference
time: 0.000; rss: 84MB	impl wf inference
time: 0.010; rss: 86MB	coherence checking
time: 0.006; rss: 86MB	wf checking
time: 0.164; rss: 93MB	item-types checking
time: 0.115; rss: 96MB	item-bodies checking
time: 0.000; rss: 96MB	drop-impl checking
time: 0.025; rss: 97MB	const checking
time: 0.003; rss: 97MB	privacy checking
time: 0.000; rss: 97MB	stability index
time: 0.001; rss: 97MB	intrinsic checking
time: 0.001; rss: 97MB	effect checking
time: 0.002; rss: 97MB	match checking
time: 0.002; rss: 97MB	liveness checking
time: 0.006; rss: 97MB	rvalue checking
time: 0.050; rss: 110MB	MIR dump
  time: 0.003; rss: 110MB	SimplifyCfg
  time: 0.005; rss: 110MB	QualifyAndPromoteConstants
  time: 0.008; rss: 110MB	TypeckMir
  time: 0.000; rss: 110MB	SimplifyBranches
  time: 0.001; rss: 110MB	SimplifyCfg
time: 0.017; rss: 110MB	MIR cleanup and validation
time: 0.019; rss: 111MB	borrow checking
time: 0.000; rss: 111MB	reachability checking
time: 0.002; rss: 111MB	death checking
time: 0.002; rss: 111MB	stability checking
time: 0.000; rss: 111MB	unused lib feature checking
time: 0.025; rss: 111MB	lint checking
time: 0.000; rss: 111MB	resolving dependency formats
  time: 0.000; rss: 111MB	NoLandingPads
  time: 0.001; rss: 111MB	SimplifyCfg
  time: 0.004; rss: 111MB	EraseRegions
  time: 0.000; rss: 111MB	AddCallGuards
  time: 0.009; rss: 112MB	ElaborateDrops
  time: 0.000; rss: 112MB	NoLandingPads
  time: 0.002; rss: 112MB	SimplifyCfg
  time: 0.002; rss: 112MB	InstCombine
  time: 0.000; rss: 112MB	Deaggregator
  time: 0.000; rss: 112MB	CopyPropagation
  time: 0.002; rss: 112MB	SimplifyLocals
  time: 0.000; rss: 112MB	AddCallGuards
  time: 0.000; rss: 112MB	PreTrans
time: 0.022; rss: 112MB	MIR optimisations
  time: 0.028; rss: 117MB	write metadata
  time: 0.049; rss: 119MB	translation item collection
  time: 0.006; rss: 120MB	codegen unit partitioning
  time: 0.006; rss: 146MB	internalize symbols
time: 0.470; rss: 146MB	translation
time: 0.000; rss: 146MB	assert dep graph
time: 0.000; rss: 146MB	serialize dep graph
  time: 0.038; rss: 107MB	llvm function passes [0]
  time: 0.019; rss: 108MB	llvm module passes [0]
  time: 0.702; rss: 112MB	codegen passes [0]
  time: 0.000; rss: 112MB	codegen passes [0]
time: 0.826; rss: 112MB	LLVM passes
time: 0.000; rss: 112MB	serialize work products
time: 0.035; rss: 83MB	linking
done
