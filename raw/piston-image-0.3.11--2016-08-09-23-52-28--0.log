commit 576f7665942414cb95239f8cbec4b654f231f4aa
Merge: e1d2bc2 9b510ba
Author: bors <bors@rust-lang.org>
Date:   Tue Aug 9 14:04:54 2016 -0700

    Auto merge of #35401 - jonathandturner:enable_json_and_new_errors, r=jonathandturner
    
    Turn on new errors and json mode
    
    This PR is a big-switch, but on a well-worn path:
    
    * Turns on new errors by default (and removes old skool)
    * Moves json output from behind a flag
    
    The RFC for new errors [landed](https://github.com/rust-lang/rfcs/pull/1644) and as part of that we wanted some bake time.  It's now had a few weeks + all the time leading up to the RFC of people banging on it.  We've also had [editors updating to the new format](https://github.com/saviorisdead/RustyCode/pull/159) and expect more to follow.
    
    We also have an [issue on old skool](https://github.com/rust-lang/rust/issues/35330) that needs to be fixed as more errors are switched to the new style, but it seems silly to fix old skool errors when we fully intend to throw the switch in the near future.
    
    This makes it lean towards "why not just throw the switch now, rather than waiting a couple more weeks?"  I only know of vim that wanted to try to parse the new format but were not sure how, and I think we can reach out to them and work out something in the 8 weeks before this would appear in a stable release.
    
    We've [hashed out](https://github.com/rust-lang/rust/issues/35330) stabilizing JSON output, and it seems like people are relatively happy making what we have v1 and then likely adding to it in the future.  The idea is that we'd maintain backward compatibility and just add new fields as needed.  We'll also work on a separate output format that'd be better suited for interactive tools like IDES (since JSON message can get a little long depending on the error).
    
    This PR stabilizes JSON mode, allowing its use without `-Z unstable-options`
    
    Combined, this gives editors two ways to support errors going forward: parsing the new error format or using the JSON mode.  By moving JSON to stable, we can also add support to Cargo, which plugin authors tell us does help simplify their support story.
    
    r? @nikomatsakis
    cc @rust-lang/tools
    
    Closes https://github.com/rust-lang/rust/issues/34826
rustc: ./piston-image-0.3.11
cargo rustc -- -Ztime-passes -Zinput-stats
    Updating registry `https://github.com/rust-lang/crates.io-index`
   Compiling libc v0.2.15
   Compiling glob v0.2.11
   Compiling rustc-serialize v0.3.19
   Compiling byteorder v0.3.13
   Compiling bitflags v0.7.0
   Compiling gcc v0.3.32
   Compiling color_quant v1.0.0
   Compiling num-traits v0.1.34
   Compiling lzw v0.8.0
   Compiling gif v0.5.1
   Compiling rand v0.3.14
   Compiling miniz-sys v0.1.7
   Compiling num-integer v0.1.32
   Compiling flate2 v0.2.14
   Compiling num-iter v0.1.32
   Compiling num-bigint v0.1.33
   Compiling num-complex v0.1.33
   Compiling num-rational v0.1.32
   Compiling num v0.1.34
   Compiling png v0.3.1
   Compiling enum_primitive v0.0.1
makefile:2: recipe for target 'all' failed
done
