commit 933f4717104aba3af71ced7e5a513f8c0bd6077a
Merge: 147371f 3d766a0
Author: bors <bors@rust-lang.org>
Date:   Thu Sep 1 11:56:51 2016 -0700

    Auto merge of #34494 - CensoredUsername:allow_sysV64_abi, r=nagisa
    
    Allow specification of the system V AMD64 ABI constraint.
    
    This can be specified using `extern "sysV64" fn` on all platforms.
    
    This ABI is used as the C ABI on unix platforms, but can only be specified there using extern "C". It was impossible to specify on other platforms. Meanwhile the win64 ABI, which was the extern "C" ABI on the windows platform could be specified on other platforms using extern "win64".
    
    This pull request adds the the "sysV64" ABI constraint which exposes this calling convention on platforms where it is not the C ABI.
rustc: ./syntex-0.42.2-incr-clean
RUSTFLAGS="-Z incremental=incr -Z incremental-info" cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling libc v0.2.15
   Compiling winapi v0.2.8
   Compiling unicode-xid v0.0.3
   Compiling bitflags v0.5.0
   Compiling log v0.3.6
   Compiling rustc-serialize v0.3.19
   Compiling winapi-build v0.1.1
   Compiling kernel32-sys v0.2.2
   Compiling term v0.4.4
   Compiling syntex_pos v0.42.0
   Compiling syntex_errors v0.42.0
   Compiling syntex_syntax v0.42.0
   Compiling syntex v0.42.2
   Compiling incremental-syntex v0.1.0 (file:///root/benchmarks/syntex-0.42.2-incr-clean)
time: 0.000; rss: 42MB	parsing
Lines of code:             3
Pre-expansion node count:  8
time: 0.000; rss: 42MB	configuration
time: 0.000; rss: 42MB	recursion limit
time: 0.000; rss: 42MB	crate injection
time: 0.000; rss: 42MB	plugin loading
time: 0.000; rss: 42MB	plugin registration
time: 0.018; rss: 64MB	expansion
time: 0.000; rss: 64MB	maybe building test harness
time: 0.000; rss: 64MB	assigning node ids
Post-expansion node count: 68
time: 0.000; rss: 64MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 64MB	complete gated feature checking
time: 0.000; rss: 64MB	collecting defs
time: 0.002; rss: 64MB	external crate/lib resolution
time: 0.000; rss: 64MB	early lint checks
time: 0.000; rss: 64MB	AST validation
time: 0.000; rss: 64MB	name resolution
time: 0.000; rss: 64MB	lowering ast -> hir
time: 0.000; rss: 64MB	indexing hir
time: 0.000; rss: 64MB	attribute checking
time: 0.000; rss: 64MB	language item collection
time: 0.000; rss: 64MB	lifetime resolution
time: 0.000; rss: 64MB	looking for entry point
time: 0.000; rss: 64MB	looking for plugin registrar
time: 0.000; rss: 64MB	region resolution
time: 0.000; rss: 64MB	loop checking
time: 0.000; rss: 64MB	static item recursion checking
time: 0.000; rss: 64MB	compute_incremental_hashes_map
time: 0.000; rss: 64MB	load_dep_graph
time: 0.000; rss: 68MB	type collecting
time: 0.000; rss: 68MB	variance inference
time: 0.004; rss: 68MB	coherence checking
time: 0.000; rss: 68MB	wf checking
time: 0.000; rss: 68MB	item-types checking
time: 0.000; rss: 68MB	item-bodies checking
time: 0.000; rss: 68MB	drop-impl checking
time: 0.000; rss: 68MB	const checking
time: 0.000; rss: 68MB	privacy checking
time: 0.000; rss: 68MB	stability index
time: 0.000; rss: 68MB	intrinsic checking
time: 0.000; rss: 68MB	effect checking
time: 0.000; rss: 68MB	match checking
time: 0.000; rss: 68MB	liveness checking
time: 0.000; rss: 68MB	rvalue checking
time: 0.000; rss: 68MB	MIR dump
time: 0.000; rss: 68MB	MIR passes
time: 0.000; rss: 68MB	borrow checking
time: 0.000; rss: 68MB	reachability checking
time: 0.000; rss: 68MB	death checking
time: 0.000; rss: 68MB	stability checking
time: 0.000; rss: 68MB	unused lib feature checking
time: 0.000; rss: 68MB	lint checking
time: 0.001; rss: 68MB	resolving dependency formats
time: 0.000; rss: 68MB	Prepare MIR codegen passes
  time: 0.000; rss: 73MB	write metadata
  time: 0.001; rss: 73MB	translation item collection
  time: 0.000; rss: 73MB	codegen unit partitioning
  time: 0.000; rss: 73MB	internalize symbols
time: 0.008; rss: 73MB	translation
time: 0.000; rss: 73MB	assert dep graph
time: 0.000; rss: 73MB	serialize dep graph
  time: 0.000; rss: 73MB	llvm function passes [0]
  time: 0.000; rss: 73MB	llvm module passes [0]
  time: 0.002; rss: 73MB	codegen passes [0]
  time: 0.000; rss: 73MB	codegen passes [0]
time: 0.003; rss: 73MB	LLVM passes
time: 0.000; rss: 73MB	serialize work products
  time: 0.114; rss: 78MB	running linker
time: 0.115; rss: 78MB	linking
done
