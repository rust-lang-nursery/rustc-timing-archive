commit 9c888980763e8ba16caa67f5f08e13109bbc6fa5
Merge: 06ca016 22f77a9
Author: bors <bors@rust-lang.org>
Date:   Mon Jul 18 11:29:25 2016 -0700

    Auto merge of #34899 - michaelwoerister:always_internalize_symbols, r=eddyb
    
    Run base::internalize_symbols() even for single-codegen-unit crates.
    
    The initial linkage-assignment (especially for closures) is a conservative one that makes some symbols more visible than they need to be. While this is not a correctness problem, it does force the LLVM inliner to be more conservative too, which results in poor performance. Once translation is based solely on MIR, it will be easier to also make the initial linkage assignment a better fitting one. Until then `internalize_symbols()` does a good job of preventing most performance regressions.
    
    This should solve the regressions reported in https://github.com/rust-lang/rust/issues/34891 and maybe also those in https://github.com/rust-lang/rust/issues/34831.
    
    As a side-effect, this will also solve most of the problematic cases described in https://github.com/rust-lang/rust/issues/34793. Not reliably so, however. For that, we still need a solution like the one implement in https://github.com/rust-lang/rust/pull/34830.
    
    cc @rust-lang/compiler
rustc: ./rust-encoding.0.2.32
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling encoding v0.2.32 (file:///root/benchmarks/rust-encoding.0.2.32)
time: 0.025; rss: 86MB	parsing
Lines of code:             6441
Pre-expansion node count:  30069
time: 0.003; rss: 90MB	configuration
time: 0.000; rss: 90MB	recursion limit
time: 0.000; rss: 90MB	crate injection
time: 0.000; rss: 90MB	plugin loading
time: 0.000; rss: 90MB	plugin registration
time: 0.047; rss: 127MB	expansion
time: 0.000; rss: 127MB	maybe building test harness
time: 0.003; rss: 127MB	assigning node ids
Post-expansion node count: 40757
time: 0.000; rss: 127MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 127MB	complete gated feature checking
time: 0.001; rss: 127MB	collecting defs
time: 0.001; rss: 127MB	external crate/lib resolution
time: 0.002; rss: 127MB	early lint checks
time: 0.000; rss: 127MB	AST validation
time: 0.006; rss: 129MB	name resolution
time: 0.004; rss: 131MB	lowering ast -> hir
time: 0.000; rss: 131MB	indexing hir
time: 0.000; rss: 131MB	attribute checking
time: 0.000; rss: 130MB	language item collection
time: 0.001; rss: 130MB	lifetime resolution
time: 0.000; rss: 130MB	looking for entry point
time: 0.000; rss: 130MB	looking for plugin registrar
time: 0.002; rss: 132MB	region resolution
time: 0.000; rss: 132MB	loop checking
time: 0.000; rss: 132MB	static item recursion checking
time: 0.000; rss: 132MB	load_dep_graph
time: 0.012; rss: 134MB	type collecting
time: 0.000; rss: 134MB	variance inference
time: 0.022; rss: 138MB	coherence checking
time: 0.025; rss: 138MB	wf checking
time: 0.016; rss: 138MB	item-types checking
time: 0.227; rss: 147MB	item-bodies checking
time: 0.000; rss: 147MB	drop-impl checking
time: 0.013; rss: 147MB	const checking
time: 0.002; rss: 147MB	privacy checking
time: 0.000; rss: 147MB	stability index
time: 0.002; rss: 147MB	intrinsic checking
time: 0.000; rss: 147MB	effect checking
time: 0.008; rss: 147MB	match checking
time: 0.002; rss: 147MB	liveness checking
time: 0.008; rss: 147MB	rvalue checking
time: 0.024; rss: 154MB	MIR dump
time: 0.016; rss: 154MB	MIR passes
time: 0.025; rss: 154MB	borrow checking
time: 0.000; rss: 154MB	reachability checking
time: 0.002; rss: 154MB	death checking
time: 0.002; rss: 154MB	stability checking
time: 0.000; rss: 154MB	unused lib feature checking
time: 0.025; rss: 156MB	lint checking
time: 0.000; rss: 156MB	resolving dependency formats
time: 0.027; rss: 156MB	Prepare MIR codegen passes
  time: 0.059; rss: 161MB	write metadata
  time: 0.033; rss: 162MB	translation item collection
  time: 0.003; rss: 163MB	codegen unit partitioning
time: 0.935; rss: 191MB	translation
time: 0.000; rss: 191MB	assert dep graph
time: 0.000; rss: 191MB	serialize dep graph
  time: 0.336; rss: 154MB	llvm function passes [0]
  time: 0.631; rss: 158MB	llvm module passes [0]
  time: 5.866; rss: 162MB	codegen passes [0]
  time: 0.001; rss: 161MB	codegen passes [0]
time: 7.222; rss: 161MB	LLVM passes
time: 0.054; rss: 144MB	linking
done
