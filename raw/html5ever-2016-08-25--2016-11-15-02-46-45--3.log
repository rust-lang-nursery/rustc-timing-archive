commit 0ed951993fb5721a303ca5fa743543dd9f3f6b10
Merge: bd6a54d 7cd8a49
Author: bors <bors@rust-lang.org>
Date:   Mon Nov 14 18:12:26 2016 -0800

    Auto merge of #37775 - alexcrichton:try-fix-dox, r=brson
    
    rustbuild: Tweak default rule inclusion
    
    If a rule is flagged with `default(true)` then the pseudo-rule `default:foo`
    will include that. If a rule is also flagged with `.host(true)`, however, then
    the rule shouldn't be included for targets that aren't in the host array. This
    adds a filter to ensure we don't pull in host rules for targets by accident.
rustc: ./html5ever-2016-08-25
cargo rustc  -- -Ztime-passes -Zinput-stats
   Compiling html5ever v0.5.4 (file:///root/benchmarks/html5ever-2016-08-25)
time: 0.034; rss: 42MB	parsing
Lines of code:             8210
Pre-expansion node count:  52140
time: 0.000; rss: 42MB	recursion limit
time: 0.000; rss: 42MB	crate injection
time: 0.000; rss: 42MB	plugin loading
time: 0.000; rss: 42MB	plugin registration
time: 0.683; rss: 94MB	expansion
time: 0.000; rss: 94MB	maybe building test harness
time: 0.002; rss: 94MB	maybe creating a macro crate
Post-expansion node count: 163412
time: 0.000; rss: 94MB	checking for inline asm in case the target doesn't support it
time: 0.003; rss: 94MB	complete gated feature checking
time: 0.008; rss: 94MB	early lint checks
time: 0.002; rss: 94MB	AST validation
time: 0.020; rss: 97MB	name resolution
time: 0.026; rss: 106MB	lowering ast -> hir
time: 0.007; rss: 109MB	indexing hir
time: 0.002; rss: 109MB	attribute checking
time: 0.001; rss: 90MB	language item collection
time: 0.002; rss: 90MB	lifetime resolution
time: 0.000; rss: 90MB	looking for entry point
time: 0.000; rss: 90MB	looking for plugin registrar
time: 0.019; rss: 98MB	region resolution
time: 0.001; rss: 98MB	loop checking
time: 0.001; rss: 98MB	static item recursion checking
time: 0.020; rss: 98MB	compute_incremental_hashes_map
time: 0.000; rss: 98MB	load_dep_graph
time: 0.010; rss: 100MB	type collecting
time: 0.000; rss: 100MB	variance inference
time: 0.011; rss: 102MB	coherence checking
time: 0.020; rss: 102MB	wf checking
time: 0.336; rss: 110MB	item-types checking
time: 0.419; rss: 118MB	item-bodies checking
time: 0.000; rss: 118MB	drop-impl checking
time: 0.067; rss: 125MB	const checking
time: 0.006; rss: 125MB	privacy checking
time: 0.001; rss: 125MB	stability index
time: 0.003; rss: 125MB	intrinsic checking
time: 0.002; rss: 125MB	effect checking
time: 0.014; rss: 125MB	match checking
time: 0.035; rss: 121MB	liveness checking
time: 0.023; rss: 121MB	rvalue checking
time: 0.128; rss: 168MB	MIR dump
  time: 0.009; rss: 158MB	SimplifyCfg
  time: 0.015; rss: 159MB	QualifyAndPromoteConstants
  time: 0.021; rss: 159MB	TypeckMir
  time: 0.000; rss: 159MB	SimplifyBranches
  time: 0.004; rss: 159MB	SimplifyCfg
time: 0.050; rss: 159MB	MIR cleanup and validation
time: 0.081; rss: 167MB	borrow checking
time: 0.002; rss: 167MB	reachability checking
time: 0.005; rss: 167MB	death checking
time: 0.006; rss: 167MB	stability checking
time: 0.000; rss: 167MB	unused lib feature checking
time: 0.056; rss: 167MB	lint checking
time: 0.000; rss: 167MB	resolving dependency formats
  time: 0.000; rss: 167MB	NoLandingPads
  time: 0.004; rss: 167MB	SimplifyCfg
  time: 0.009; rss: 167MB	EraseRegions
  time: 0.001; rss: 167MB	AddCallGuards
  time: 0.075; rss: 173MB	ElaborateDrops
  time: 0.000; rss: 173MB	NoLandingPads
  time: 0.007; rss: 169MB	SimplifyCfg
  time: 0.007; rss: 168MB	InstCombine
  time: 0.001; rss: 168MB	Deaggregator
  time: 0.000; rss: 168MB	CopyPropagation
  time: 0.007; rss: 166MB	SimplifyLocals
  time: 0.001; rss: 166MB	AddCallGuards
  time: 0.000; rss: 166MB	PreTrans
time: 0.113; rss: 166MB	MIR optimisations
  time: 0.011; rss: 167MB	write metadata
  time: 0.042; rss: 171MB	translation item collection
  time: 0.005; rss: 171MB	codegen unit partitioning
  time: 0.005; rss: 182MB	internalize symbols
time: 0.279; rss: 182MB	translation
time: 0.000; rss: 182MB	assert dep graph
time: 0.000; rss: 182MB	serialize dep graph
  time: 0.021; rss: 97MB	llvm function passes [0]
  time: 0.013; rss: 98MB	llvm module passes [0]
  time: 0.475; rss: 103MB	codegen passes [0]
  time: 0.000; rss: 103MB	codegen passes [0]
time: 0.550; rss: 103MB	LLVM passes
time: 0.000; rss: 103MB	serialize work products
time: 0.025; rss: 85MB	linking
done
