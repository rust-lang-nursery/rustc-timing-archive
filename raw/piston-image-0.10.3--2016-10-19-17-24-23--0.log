commit d337f345ca8b3bb4aac988ace1c0676abc5310a0
Merge: cfc9b51 83b1982
Author: bors <bors@rust-lang.org>
Date:   Wed Oct 19 09:52:48 2016 -0700

    Auto merge of #37220 - Mark-Simulacrum:arena-alloc-slice, r=eddyb
    
    alloc_slice in TypedArena
    
    Added `TypedArena::alloc_slice`, and moved from using `TypedArena<Vec<T>>` to `TypedArena<T>`.
    
    `TypedArena::alloc_slice` is implemented by copying the slices elements into the typed arena, requiring that `T: Copy` when using it. We allocate a new chunk when there's insufficient space remaining in the previous chunk, and we cannot resize the old chunk in place. This is non-optimal, since we may waste allocated space when allocating (especially longer) slices, but is considered good enough for the time being.
    
    This change also reduces heap fragmentation, since the arena now directly stores objects instead of storing the Vec's length and pointer to its contents.
    
    Performance:
    ```
    futures-rs-test  5.048s vs  5.061s --> 0.997x faster (variance: 1.028x, 1.020x)
    helloworld       0.284s vs  0.295s --> 0.963x faster (variance: 1.207x, 1.189x)
    html5ever-2016-  8.396s vs  8.208s --> 1.023x faster (variance: 1.019x, 1.036x)
    hyper.0.5.0      5.768s vs  5.797s --> 0.995x faster (variance: 1.027x, 1.028x)
    inflate-0.1.0    5.213s vs  5.069s --> 1.028x faster (variance: 1.008x, 1.022x)
    issue-32062-equ  0.428s vs  0.467s --> 0.916x faster (variance: 1.188x, 1.015x)
    issue-32278-big  1.949s vs  2.010s --> 0.970x faster (variance: 1.112x, 1.049x)
    jld-day15-parse  1.795s vs  1.877s --> 0.956x faster (variance: 1.037x, 1.015x)
    piston-image-0. 13.554s vs 13.522s --> 1.002x faster (variance: 1.019x, 1.020x)
    rust-encoding-0  2.489s vs  2.465s --> 1.010x faster (variance: 1.047x, 1.086x)
    syntex-0.42.2   34.646s vs 34.593s --> 1.002x faster (variance: 1.007x, 1.005x)
    syntex-0.42.2-i 17.181s vs 17.163s --> 1.001x faster (variance: 1.004x, 1.004x)
    ```
    
    r? @eddyb
rustc: ./piston-image-0.10.3
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling scoped_threadpool v0.1.7
   Compiling color_quant v1.0.0
   Compiling glob v0.2.11
   Compiling libc v0.2.16
   Compiling lzw v0.10.0
   Compiling byteorder v0.5.3
   Compiling rustc-serialize v0.3.19
   Compiling inflate v0.1.1
   Compiling num-traits v0.1.35
   Compiling gcc v0.3.35
   Compiling gif v0.9.0
   Compiling rand v0.3.14
   Compiling bitflags v0.7.0
   Compiling num_cpus v0.2.13
   Compiling num-integer v0.1.32
   Compiling num-iter v0.1.32
   Compiling miniz-sys v0.1.7
   Compiling num v0.1.35
   Compiling enum_primitive v0.1.0
   Compiling flate2 v0.2.14
   Compiling deque v0.3.1
   Compiling rayon v0.4.2
   Compiling jpeg-decoder v0.1.6
   Compiling png v0.5.2
   Compiling num-bigint v0.1.35
   Compiling num-rational v0.1.35
   Compiling image v0.10.3 (file:///root/benchmarks/piston-image-0.10.3)
time: 0.044; rss: 57MB	parsing
Lines of code:             12000
Pre-expansion node count:  90272
time: 0.000; rss: 57MB	recursion limit
time: 0.000; rss: 57MB	crate injection
time: 0.000; rss: 57MB	plugin loading
time: 0.000; rss: 57MB	plugin registration
time: 0.074; rss: 95MB	expansion
time: 0.000; rss: 95MB	maybe building test harness
time: 0.001; rss: 95MB	maybe creating a macro crate
Post-expansion node count: 148999
time: 0.000; rss: 95MB	checking for inline asm in case the target doesn't support it
time: 0.002; rss: 95MB	complete gated feature checking
time: 0.005; rss: 95MB	early lint checks
time: 0.001; rss: 95MB	AST validation
time: 0.021; rss: 99MB	name resolution
time: 0.013; rss: 110MB	lowering ast -> hir
time: 0.003; rss: 114MB	indexing hir
time: 0.002; rss: 114MB	attribute checking
time: 0.002; rss: 103MB	language item collection
time: 0.003; rss: 103MB	lifetime resolution
time: 0.000; rss: 103MB	looking for entry point
time: 0.000; rss: 103MB	looking for plugin registrar
time: 0.011; rss: 109MB	region resolution
time: 0.002; rss: 109MB	loop checking
time: 0.001; rss: 109MB	static item recursion checking
time: 0.077; rss: 109MB	compute_incremental_hashes_map
time: 0.000; rss: 109MB	load_dep_graph
time: 0.016; rss: 110MB	type collecting
time: 0.000; rss: 111MB	variance inference
time: 0.026; rss: 114MB	coherence checking
time: 0.079; rss: 115MB	wf checking
time: 0.136; rss: 122MB	item-types checking
time: 0.828; rss: 135MB	item-bodies checking
time: 0.000; rss: 135MB	drop-impl checking
time: 0.053; rss: 134MB	const checking
time: 0.011; rss: 134MB	privacy checking
time: 0.002; rss: 134MB	stability index
time: 0.007; rss: 134MB	intrinsic checking
time: 0.003; rss: 134MB	effect checking
time: 0.016; rss: 134MB	match checking
time: 0.011; rss: 135MB	liveness checking
time: 0.045; rss: 135MB	rvalue checking
time: 0.095; rss: 180MB	MIR dump
  time: 0.011; rss: 180MB	SimplifyCfg
  time: 0.021; rss: 180MB	QualifyAndPromoteConstants
  time: 0.023; rss: 180MB	TypeckMir
  time: 0.001; rss: 180MB	SimplifyBranches
  time: 0.005; rss: 180MB	SimplifyCfg
time: 0.061; rss: 180MB	MIR passes
time: 0.116; rss: 180MB	borrow checking
time: 0.004; rss: 180MB	reachability checking
time: 0.008; rss: 180MB	death checking
time: 0.010; rss: 180MB	stability checking
time: 0.000; rss: 180MB	unused lib feature checking
time: 0.099; rss: 180MB	lint checking
time: 0.000; rss: 180MB	resolving dependency formats
  time: 0.001; rss: 180MB	NoLandingPads
  time: 0.005; rss: 180MB	SimplifyCfg
  time: 0.012; rss: 182MB	EraseRegions
  time: 0.002; rss: 182MB	AddCallGuards
  time: 0.044; rss: 184MB	ElaborateDrops
  time: 0.001; rss: 184MB	NoLandingPads
  time: 0.009; rss: 184MB	SimplifyCfg
  time: 0.006; rss: 184MB	InstCombine
  time: 0.002; rss: 184MB	Deaggregator
  time: 0.000; rss: 184MB	CopyPropagation
  time: 0.001; rss: 184MB	AddCallGuards
  time: 0.000; rss: 184MB	PreTrans
time: 0.083; rss: 184MB	Prepare MIR codegen passes
  time: 0.016; rss: 186MB	write metadata
  time: 0.399; rss: 201MB	translation item collection
  time: 0.025; rss: 203MB	codegen unit partitioning
  time: 0.021; rss: 323MB	internalize symbols
time: 2.622; rss: 296MB	translation
time: 0.000; rss: 296MB	assert dep graph
time: 0.000; rss: 296MB	serialize dep graph
  time: 0.202; rss: 224MB	llvm function passes [0]
  time: 0.080; rss: 227MB	llvm module passes [0]
  time: 4.060; rss: 226MB	codegen passes [0]
  time: 0.000; rss: 226MB	codegen passes [0]
time: 4.638; rss: 226MB	LLVM passes
time: 0.000; rss: 226MB	serialize work products
time: 0.263; rss: 99MB	linking
done
