commit 34f35ed29c8acdbe1e3c172786fc41d6f4fb6090
Merge: 6aba7be f66da5e
Author: bors <bors@rust-lang.org>
Date:   Sun Jul 17 09:07:50 2016 -0700

    Auto merge of #34871 - petrochenkov:inherent, r=jseyfried
    
    Do not resolve inherent static methods from other crates prematurely
    
    Under some specific circumstances paths like `Type::method` can be resolved early in rustc_resolve instead of type checker. `Type` must be defined in another crate, it should be an enum or a trait object (i.e. a type that acts as a "module" in resolve), and `method` should be an inherent static method.
    As a result, such paths don't go through `resolve_ufcs`, may be resolved incorrectly and break some invariants in type checker. This patch removes special treatment of such methods.
    
    The removed code was introduced in https://github.com/rust-lang/rust/commit/2bd46e767c0fe5b6188df61cb9daf8f2e65a3ed0 to fix a problem that no longer exists.
    
    r? @jseyfried
rustc: ./rust-encoding.0.2.32
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling encoding v0.2.32 (file:///root/benchmarks/rust-encoding.0.2.32)
time: 0.025; rss: 90MB	parsing
Lines of code:             6441
Pre-expansion node count:  30069
time: 0.003; rss: 90MB	configuration
time: 0.000; rss: 90MB	recursion limit
time: 0.000; rss: 90MB	crate injection
time: 0.000; rss: 90MB	plugin loading
time: 0.000; rss: 90MB	plugin registration
time: 0.049; rss: 127MB	expansion
time: 0.000; rss: 127MB	maybe building test harness
time: 0.003; rss: 127MB	assigning node ids
Post-expansion node count: 40757
time: 0.000; rss: 127MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 127MB	complete gated feature checking
time: 0.001; rss: 127MB	collecting defs
time: 0.001; rss: 127MB	external crate/lib resolution
time: 0.002; rss: 127MB	early lint checks
time: 0.000; rss: 127MB	AST validation
time: 0.006; rss: 129MB	name resolution
time: 0.004; rss: 131MB	lowering ast -> hir
time: 0.001; rss: 131MB	indexing hir
time: 0.000; rss: 131MB	attribute checking
time: 0.000; rss: 131MB	language item collection
time: 0.001; rss: 131MB	lifetime resolution
time: 0.000; rss: 131MB	looking for entry point
time: 0.000; rss: 131MB	looking for plugin registrar
time: 0.002; rss: 133MB	region resolution
time: 0.000; rss: 133MB	loop checking
time: 0.000; rss: 133MB	static item recursion checking
time: 0.000; rss: 133MB	load_dep_graph
time: 0.012; rss: 134MB	type collecting
time: 0.000; rss: 134MB	variance inference
time: 0.022; rss: 136MB	coherence checking
time: 0.025; rss: 138MB	wf checking
time: 0.016; rss: 138MB	item-types checking
time: 0.228; rss: 147MB	item-bodies checking
time: 0.000; rss: 147MB	drop-impl checking
time: 0.013; rss: 148MB	const checking
time: 0.002; rss: 148MB	privacy checking
time: 0.000; rss: 148MB	stability index
time: 0.002; rss: 148MB	intrinsic checking
time: 0.000; rss: 148MB	effect checking
time: 0.008; rss: 148MB	match checking
time: 0.002; rss: 148MB	liveness checking
time: 0.008; rss: 148MB	rvalue checking
time: 0.025; rss: 154MB	MIR dump
time: 0.016; rss: 154MB	MIR passes
time: 0.025; rss: 154MB	borrow checking
time: 0.000; rss: 154MB	reachability checking
time: 0.002; rss: 154MB	death checking
time: 0.002; rss: 154MB	stability checking
time: 0.000; rss: 154MB	unused lib feature checking
time: 0.024; rss: 156MB	lint checking
time: 0.000; rss: 156MB	resolving dependency formats
time: 0.027; rss: 156MB	Prepare MIR codegen passes
  time: 0.059; rss: 160MB	write metadata
  time: 0.034; rss: 163MB	translation item collection
  time: 0.003; rss: 163MB	codegen unit partitioning
time: 0.930; rss: 191MB	translation
time: 0.000; rss: 191MB	assert dep graph
time: 0.000; rss: 191MB	serialize dep graph
  time: 0.333; rss: 155MB	llvm function passes [0]
  time: 0.633; rss: 159MB	llvm module passes [0]
  time: 5.862; rss: 162MB	codegen passes [0]
  time: 0.001; rss: 162MB	codegen passes [0]
time: 7.234; rss: 162MB	LLVM passes
time: 0.054; rss: 146MB	linking
done
