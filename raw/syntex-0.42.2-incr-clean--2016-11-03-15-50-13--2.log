commit ac919fcd9d4a958baf99b2f2ed5c3d38a2ebf9d0
Merge: f9f45c6 b4f910d
Author: bors <bors@rust-lang.org>
Date:   Wed Nov 2 22:58:01 2016 -0700

    Auto merge of #37541 - nikomatsakis:issue-37291, r=brson
    
    Use impl obligations as initial environment for specialization
    
    This corrects a small regression in specialization that crept in, I think as part of the refactoring to introduce arenas. I also made an experiment (in the last commit) to cleanup the code to be more aggressive about normalization. As the commit log notes, I am not 100% sure that this is correct, but it feels safer, and I think that at worst it yields *more* ICEs (as opposed to admitting faulty code). I'll schedule a crater run to check beyond the testbase.
    
    Fixes #37291.
    
    r? @aturon
rustc: ./syntex-0.42.2-incr-clean
RUSTFLAGS="-Z incremental=incr" \
    cargo rustc -p syntex_syntax -- -Ztime-passes -Zinput-stats -Z incremental-info
   Compiling syntex_syntax v0.42.0
time: 0.110; rss: 75MB	parsing
Lines of code:             33687
Pre-expansion node count:  224033
time: 0.000; rss: 75MB	recursion limit
time: 0.000; rss: 75MB	crate injection
time: 0.000; rss: 75MB	plugin loading
time: 0.000; rss: 75MB	plugin registration
time: 0.259; rss: 147MB	expansion
time: 0.000; rss: 147MB	maybe building test harness
time: 0.006; rss: 147MB	maybe creating a macro crate
Post-expansion node count: 641571
time: 0.000; rss: 147MB	checking for inline asm in case the target doesn't support it
time: 0.013; rss: 147MB	complete gated feature checking
time: 0.024; rss: 147MB	early lint checks
time: 0.007; rss: 147MB	AST validation
time: 0.084; rss: 162MB	name resolution
time: 0.045; rss: 189MB	lowering ast -> hir
time: 0.008; rss: 200MB	indexing hir
time: 0.006; rss: 200MB	attribute checking
time: 0.004; rss: 150MB	language item collection
time: 0.010; rss: 150MB	lifetime resolution
time: 0.000; rss: 150MB	looking for entry point
time: 0.000; rss: 150MB	looking for plugin registrar
time: 0.043; rss: 161MB	region resolution
time: 0.005; rss: 161MB	loop checking
time: 0.005; rss: 161MB	static item recursion checking
time: 0.531; rss: 162MB	compute_incremental_hashes_map
time: 0.000; rss: 162MB	load_dep_graph
time: 0.042; rss: 167MB	type collecting
time: 0.001; rss: 167MB	variance inference
time: 0.033; rss: 170MB	coherence checking
time: 0.095; rss: 173MB	wf checking
time: 0.182; rss: 179MB	item-types checking
time: 3.640; rss: 229MB	item-bodies checking
time: 0.000; rss: 229MB	drop-impl checking
time: 0.242; rss: 232MB	const checking
time: 0.046; rss: 232MB	privacy checking
time: 0.005; rss: 232MB	stability index
time: 0.019; rss: 232MB	intrinsic checking
time: 0.016; rss: 232MB	effect checking
time: 0.048; rss: 232MB	match checking
time: 0.050; rss: 225MB	liveness checking
time: 0.204; rss: 225MB	rvalue checking
time: 0.405; rss: 413MB	MIR dump
  time: 0.058; rss: 417MB	SimplifyCfg
  time: 0.076; rss: 417MB	QualifyAndPromoteConstants
  time: 0.106; rss: 417MB	TypeckMir
  time: 0.004; rss: 417MB	SimplifyBranches
  time: 0.031; rss: 417MB	SimplifyCfg
time: 0.274; rss: 417MB	MIR passes
time: 0.543; rss: 417MB	borrow checking
time: 0.017; rss: 417MB	reachability checking
time: 0.040; rss: 417MB	death checking
time: 0.039; rss: 417MB	stability checking
time: 0.000; rss: 417MB	unused lib feature checking
time: 0.206; rss: 417MB	lint checking
time: 0.000; rss: 417MB	resolving dependency formats
  time: 0.003; rss: 417MB	NoLandingPads
  time: 0.027; rss: 417MB	SimplifyCfg
  time: 0.068; rss: 426MB	EraseRegions
  time: 0.011; rss: 426MB	AddCallGuards
  time: 0.281; rss: 444MB	ElaborateDrops
  time: 0.003; rss: 444MB	NoLandingPads
  time: 0.053; rss: 444MB	SimplifyCfg
  time: 0.030; rss: 443MB	InstCombine
  time: 0.012; rss: 443MB	Deaggregator
  time: 0.002; rss: 443MB	CopyPropagation
  time: 0.009; rss: 443MB	AddCallGuards
  time: 0.002; rss: 443MB	PreTrans
time: 0.502; rss: 443MB	Prepare MIR codegen passes
  time: 0.059; rss: 451MB	write metadata
  time: 0.393; rss: 462MB	translation item collection
  time: 0.055; rss: 470MB	codegen unit partitioning
  time: 0.047; rss: 717MB	internalize symbols
time: 4.674; rss: 717MB	translation
time: 0.000; rss: 717MB	assert dep graph
time: 0.000; rss: 717MB	serialize dep graph
incremental: re-using 0 out of 1 modules
  time: 0.526; rss: 409MB	llvm function passes [0]
  time: 0.243; rss: 418MB	llvm module passes [0]
  time: 10.098; rss: 411MB	codegen passes [0]
  time: 0.000; rss: 411MB	codegen passes [0]
time: 11.618; rss: 411MB	LLVM passes
time: 0.000; rss: 411MB	serialize work products
time: 0.329; rss: 103MB	linking
done
