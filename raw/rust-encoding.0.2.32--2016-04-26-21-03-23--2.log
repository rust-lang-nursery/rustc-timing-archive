commit 8f552181895921a377ab8c235340ea3d80ec7fc0
Merge: 897199a 9249e6a
Author: bors <bors@rust-lang.org>
Date:   Tue Apr 26 14:54:37 2016 -0700

    Auto merge of #31414 - durka:clone-copy, r=alexcrichton
    
    special-case #[derive(Copy, Clone)] with a shallow clone
    
    If a type is Copy then its Clone implementation can be a no-op. Currently `#[derive(Clone)]` generates a deep clone anyway. This can lead to lots of code bloat.
    
    This PR detects the case where Copy and Clone are both being derived (the general case of "is this type Copy" can't be determined by a syntax extension) and generates the shallow Clone impl. Right now this can only be done if there are no type parameters (see https://github.com/rust-lang/rust/issues/31085#issuecomment-178988663), but this restriction can be removed after specialization.
    
    Fixes #31085.
rustc: ./rust-encoding.0.2.32
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling encoding v0.2.32 (file:///root/benchmarks/rust-encoding.0.2.32)
time: 0.033; rss: 50MB	parsing
Lines of code:             6441
Pre-expansion node count:  30335
time: 0.006; rss: 50MB	configuration 1
time: 0.000; rss: 50MB	recursion limit
time: 0.000; rss: 50MB	gated macro checking
time: 0.000; rss: 50MB	crate injection
time: 0.003; rss: 53MB	macro loading
time: 0.000; rss: 53MB	plugin loading
time: 0.000; rss: 53MB	plugin registration
time: 0.044; rss: 55MB	expansion
time: 0.001; rss: 55MB	complete gated feature checking 1
time: 0.007; rss: 55MB	configuration 2
time: 0.000; rss: 55MB	gated configuration checking
time: 0.003; rss: 55MB	maybe building test harness
time: 0.003; rss: 55MB	prelude injection
time: 0.000; rss: 55MB	checking that all macro invocations are gone
time: 0.000; rss: 55MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 55MB	complete gated feature checking 2
time: 0.000; rss: 55MB	const fn bodies and arguments
Post-expansion node count: 41656
time: 0.003; rss: 55MB	assigning node ids
time: 0.001; rss: 57MB	collecting defs
time: 0.001; rss: 57MB	external crate/lib resolution
time: 0.005; rss: 60MB	lowering ast -> hir
time: 0.002; rss: 60MB	indexing hir
time: 0.000; rss: 60MB	attribute checking
time: 0.002; rss: 60MB	early lint checks
time: 0.000; rss: 59MB	language item collection
time: 0.008; rss: 69MB	name resolution
time: 0.000; rss: 69MB	lifetime resolution
time: 0.000; rss: 69MB	looking for entry point
time: 0.000; rss: 69MB	looking for plugin registrar
time: 0.003; rss: 70MB	region resolution
time: 0.000; rss: 70MB	loop checking
time: 0.000; rss: 70MB	static item recursion checking
time: 0.000; rss: 70MB	load_dep_graph
time: 0.004; rss: 72MB	type collecting
time: 0.000; rss: 72MB	variance inference
time: 0.022; rss: 89MB	coherence checking
time: 0.017; rss: 90MB	wf checking
time: 0.014; rss: 90MB	item-types checking
time: 0.211; rss: 100MB	item-bodies checking
time: 0.000; rss: 100MB	drop-impl checking
time: 0.011; rss: 100MB	const checking
time: 0.003; rss: 100MB	privacy checking
time: 0.000; rss: 100MB	stability index
time: 0.001; rss: 100MB	intrinsic checking
time: 0.000; rss: 100MB	effect checking
time: 0.006; rss: 100MB	match checking
time: 0.002; rss: 100MB	liveness checking
time: 0.006; rss: 100MB	rvalue checking
time: 0.031; rss: 107MB	MIR dump
time: 0.008; rss: 107MB	MIR passes
time: 0.022; rss: 108MB	borrow checking
time: 0.000; rss: 108MB	reachability checking
time: 0.002; rss: 108MB	death checking
time: 0.002; rss: 108MB	stability checking
time: 0.000; rss: 108MB	unused lib feature checking
time: 0.023; rss: 108MB	lint checking
time: 0.000; rss: 108MB	resolving dependency formats
time: 0.003; rss: 109MB	Prepare MIR codegen passes
  time: 0.029; rss: 114MB	translation item collection
  time: 0.002; rss: 114MB	codegen unit partitioning
  time: 0.060; rss: 146MB	write metadata
time: 0.399; rss: 146MB	translation
time: 0.000; rss: 146MB	assert dep graph
time: 0.000; rss: 146MB	serialize dep graph
  time: 0.027; rss: 110MB	llvm function passes [0]
  time: 0.051; rss: 115MB	llvm module passes [0]
  time: 0.580; rss: 119MB	codegen passes [0]
  time: 0.001; rss: 103MB	codegen passes [0]
time: 0.723; rss: 102MB	LLVM passes
time: 0.054; rss: 101MB	linking
done
