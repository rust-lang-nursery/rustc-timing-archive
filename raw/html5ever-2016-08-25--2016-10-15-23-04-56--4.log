commit 98a3502da1456b209ff031604cabbbcb9d0eddf1
Merge: 5bfe107 a61d85b
Author: bors <bors@rust-lang.org>
Date:   Sat Oct 15 15:38:52 2016 -0700

    Auto merge of #37152 - arielb1:drop-cache, r=pnkfelix
    
    add a per-param-env cache to `impls_bound`
    
    There used to be only a global cache, which led to uncached calls to
    trait selection when there were type parameters.
    
    This causes a 20% decrease in borrow-checking time and an overall 0.5% performance increase during bootstrapping (as borrow-checking tends to be a tiny part of compilation time).
    
    Fixes #37106 (drop elaboration times are now ~half of borrow checking,
    so might still be worthy of optimization, but not critical).
    
    r? @pnkfelix
rustc: ./html5ever-2016-08-25
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling html5ever v0.5.4 (file:///root/benchmarks/html5ever-2016-08-25)
time: 0.046; rss: 45MB	parsing
Lines of code:             8210
Pre-expansion node count:  52238
time: 0.000; rss: 45MB	recursion limit
time: 0.000; rss: 45MB	crate injection
time: 0.000; rss: 45MB	plugin loading
time: 0.000; rss: 45MB	plugin registration
time: 1.416; rss: 98MB	expansion
time: 0.000; rss: 98MB	maybe building test harness
time: 0.002; rss: 98MB	maybe creating a macro crate
Post-expansion node count: 163524
time: 0.000; rss: 98MB	checking for inline asm in case the target doesn't support it
time: 0.003; rss: 98MB	complete gated feature checking
time: 0.008; rss: 98MB	early lint checks
time: 0.002; rss: 98MB	AST validation
time: 0.022; rss: 102MB	name resolution
time: 0.028; rss: 118MB	lowering ast -> hir
time: 0.009; rss: 122MB	indexing hir
time: 0.002; rss: 122MB	attribute checking
time: 0.002; rss: 100MB	language item collection
time: 0.003; rss: 100MB	lifetime resolution
time: 0.000; rss: 100MB	looking for entry point
time: 0.000; rss: 100MB	looking for plugin registrar
time: 0.023; rss: 105MB	region resolution
time: 0.002; rss: 105MB	loop checking
time: 0.003; rss: 105MB	static item recursion checking
time: 0.023; rss: 106MB	compute_incremental_hashes_map
time: 0.000; rss: 106MB	load_dep_graph
time: 0.010; rss: 107MB	type collecting
time: 0.000; rss: 107MB	variance inference
time: 0.026; rss: 111MB	coherence checking
time: 0.025; rss: 111MB	wf checking
time: 0.435; rss: 120MB	item-types checking
time: 0.518; rss: 131MB	item-bodies checking
time: 0.000; rss: 131MB	drop-impl checking
time: 0.072; rss: 134MB	const checking
time: 0.008; rss: 134MB	privacy checking
time: 0.002; rss: 134MB	stability index
time: 0.004; rss: 134MB	intrinsic checking
time: 0.004; rss: 134MB	effect checking
time: 0.024; rss: 134MB	match checking
time: 0.042; rss: 128MB	liveness checking
time: 0.028; rss: 128MB	rvalue checking
time: 0.143; rss: 178MB	MIR dump
  time: 0.010; rss: 167MB	SimplifyCfg
  time: 0.015; rss: 168MB	QualifyAndPromoteConstants
  time: 0.025; rss: 168MB	TypeckMir
  time: 0.000; rss: 168MB	SimplifyBranches
  time: 0.004; rss: 168MB	SimplifyCfg
time: 0.054; rss: 168MB	MIR passes
time: 0.092; rss: 176MB	borrow checking
time: 0.003; rss: 176MB	reachability checking
time: 0.007; rss: 176MB	death checking
time: 0.008; rss: 176MB	stability checking
time: 0.000; rss: 176MB	unused lib feature checking
time: 0.066; rss: 176MB	lint checking
time: 0.000; rss: 176MB	resolving dependency formats
  time: 0.000; rss: 176MB	NoLandingPads
  time: 0.004; rss: 176MB	SimplifyCfg
  time: 0.010; rss: 176MB	EraseRegions
  time: 0.001; rss: 176MB	AddCallGuards
  time: 0.076; rss: 180MB	ElaborateDrops
  time: 0.000; rss: 180MB	NoLandingPads
  time: 0.007; rss: 178MB	SimplifyCfg
  time: 0.008; rss: 178MB	InstCombine
  time: 0.001; rss: 178MB	Deaggregator
  time: 0.000; rss: 178MB	CopyPropagation
  time: 0.001; rss: 176MB	AddCallGuards
  time: 0.000; rss: 176MB	PreTrans
time: 0.109; rss: 176MB	Prepare MIR codegen passes
  time: 0.053; rss: 176MB	write metadata
  time: 0.050; rss: 179MB	translation item collection
  time: 0.006; rss: 179MB	codegen unit partitioning
  time: 0.006; rss: 194MB	internalize symbols
time: 0.368; rss: 164MB	translation
time: 0.000; rss: 164MB	assert dep graph
time: 0.000; rss: 164MB	serialize dep graph
  time: 0.021; rss: 99MB	llvm function passes [0]
  time: 0.012; rss: 101MB	llvm module passes [0]
  time: 0.461; rss: 103MB	codegen passes [0]
  time: 0.001; rss: 103MB	codegen passes [0]
time: 0.535; rss: 103MB	LLVM passes
time: 0.000; rss: 103MB	serialize work products
time: 0.058; rss: 86MB	linking
done
