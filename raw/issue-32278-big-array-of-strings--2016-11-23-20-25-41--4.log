commit 1e45b63052ae19c206a347d7fdfcdd97929f57d3
Merge: d5814b0 f4c68d2
Author: bors <bors@rust-lang.org>
Date:   Wed Nov 23 17:48:44 2016 -0600

    Auto merge of #37931 - eddyb:meta-version, r=jseyfried
    
    rustc_metadata: don't break the version check when CrateRoot changes.
    
    In #36551 I made `rustc_version` a field of `CrateRoot`, but despite it being the first field, one could still break the version check by changing `CrateRoot` so older compilers couldn't fully decode it (e.g. #37463).
    
    This PR fixes #37803 by moving the version string back at the beginning of metadata, right after the 32-bit big-endian absolute position of `CrateRoot`, and by incrementing `METADATA_VERSION`.
rustc: ./issue-32278-big-array-of-strings
cargo rustc  -- -Ztime-passes -Zinput-stats
   Compiling issue-32278-big-array-of-strings v0.1.0 (file:///root/benchmarks/issue-32278-big-array-of-strings)
time: 0.097; rss: 61MB	parsing
Lines of code:             65577
Pre-expansion node count:  65552
time: 0.000; rss: 61MB	recursion limit
time: 0.000; rss: 61MB	crate injection
time: 0.000; rss: 61MB	plugin loading
time: 0.000; rss: 61MB	plugin registration
time: 0.023; rss: 84MB	expansion
time: 0.000; rss: 84MB	maybe building test harness
time: 0.001; rss: 84MB	maybe creating a macro crate
Post-expansion node count: 65565
time: 0.000; rss: 84MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 84MB	complete gated feature checking
time: 0.004; rss: 84MB	early lint checks
time: 0.000; rss: 84MB	AST validation
time: 0.002; rss: 84MB	name resolution
time: 0.004; rss: 93MB	lowering ast -> hir
time: 0.001; rss: 97MB	indexing hir
time: 0.001; rss: 97MB	attribute checking
time: 0.000; rss: 86MB	language item collection
time: 0.000; rss: 86MB	lifetime resolution
time: 0.000; rss: 86MB	looking for entry point
time: 0.000; rss: 86MB	looking for plugin registrar
time: 0.006; rss: 92MB	region resolution
time: 0.000; rss: 92MB	loop checking
time: 0.000; rss: 92MB	static item recursion checking
time: 0.019; rss: 92MB	compute_incremental_hashes_map
time: 0.000; rss: 92MB	load_dep_graph
time: 0.000; rss: 92MB	type collecting
time: 0.000; rss: 92MB	variance inference
time: 0.000; rss: 92MB	impl wf inference
time: 0.004; rss: 94MB	coherence checking
time: 0.000; rss: 94MB	wf checking
time: 0.519; rss: 107MB	item-types checking
time: 0.000; rss: 107MB	item-bodies checking
time: 0.000; rss: 107MB	drop-impl checking
time: 0.021; rss: 107MB	const checking
time: 0.001; rss: 107MB	privacy checking
time: 0.000; rss: 107MB	stability index
time: 0.000; rss: 107MB	intrinsic checking
time: 0.000; rss: 107MB	effect checking
time: 0.000; rss: 107MB	match checking
time: 0.000; rss: 107MB	liveness checking
time: 0.000; rss: 107MB	rvalue checking
time: 0.037; rss: 115MB	MIR dump
  time: 0.000; rss: 115MB	SimplifyCfg
  time: 0.001; rss: 115MB	QualifyAndPromoteConstants
  time: 0.000; rss: 115MB	TypeckMir
  time: 0.000; rss: 115MB	SimplifyBranches
  time: 0.000; rss: 115MB	SimplifyCfg
time: 0.001; rss: 115MB	MIR cleanup and validation
time: 0.001; rss: 115MB	borrow checking
time: 0.000; rss: 115MB	reachability checking
time: 0.000; rss: 115MB	death checking
time: 0.000; rss: 115MB	stability checking
time: 0.000; rss: 115MB	unused lib feature checking
time: 0.022; rss: 115MB	lint checking
time: 0.001; rss: 115MB	resolving dependency formats
  time: 0.000; rss: 115MB	NoLandingPads
  time: 0.000; rss: 115MB	SimplifyCfg
  time: 0.001; rss: 115MB	EraseRegions
  time: 0.000; rss: 115MB	AddCallGuards
  time: 0.000; rss: 115MB	ElaborateDrops
  time: 0.000; rss: 115MB	NoLandingPads
  time: 0.000; rss: 115MB	SimplifyCfg
  time: 0.000; rss: 115MB	InstCombine
  time: 0.000; rss: 115MB	Deaggregator
  time: 0.000; rss: 115MB	CopyPropagation
  time: 0.000; rss: 115MB	SimplifyLocals
  time: 0.000; rss: 115MB	AddCallGuards
  time: 0.000; rss: 115MB	PreTrans
time: 0.001; rss: 115MB	MIR optimisations
  time: 0.000; rss: 116MB	write metadata
  time: 0.000; rss: 116MB	translation item collection
  time: 0.000; rss: 116MB	codegen unit partitioning
  time: 0.001; rss: 127MB	internalize symbols
time: 0.055; rss: 127MB	translation
time: 0.000; rss: 127MB	assert dep graph
time: 0.000; rss: 127MB	serialize dep graph
  time: 0.008; rss: 91MB	llvm function passes [0]
  time: 0.000; rss: 91MB	llvm module passes [0]
  time: 0.187; rss: 91MB	codegen passes [0]
  time: 0.000; rss: 91MB	codegen passes [0]
time: 0.196; rss: 91MB	LLVM passes
time: 0.000; rss: 91MB	serialize work products
  time: 0.165; rss: 82MB	running linker
time: 0.167; rss: 82MB	linking
done
