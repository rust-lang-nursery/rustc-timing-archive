commit d515586465522c615f8ae6c5d61deedea61126e1
Merge: 127a83d 2121118
Author: bors <bors@rust-lang.org>
Date:   Wed Nov 23 11:16:22 2016 -0600

    Auto merge of #36449 - canndrew:expand_is_uninhabited, r=eddyb
    
    Expand is_uninhabited
    
    This allows code such as this to compile:
    
    ``` rust
    let x: ! = ...;
    match x {};
    
    let y: (u32, !) = ...;
    match y {};
    ```
    
    @eddyb You were worried about making this change. Do you have any idea about what could break? Are there any special tests that need to be written for it?
rustc: ./syntex-0.42.2-incr-clean
RUSTFLAGS="-Z incremental=incr" \
    cargo rustc -p syntex_syntax  -- \
    -Ztime-passes -Zinput-stats -Z incremental-info
   Compiling syntex_syntax v0.42.0
time: 0.091; rss: 71MB	parsing
Lines of code:             33687
Pre-expansion node count:  223115
time: 0.000; rss: 71MB	recursion limit
time: 0.000; rss: 71MB	crate injection
time: 0.000; rss: 71MB	plugin loading
time: 0.000; rss: 71MB	plugin registration
time: 0.238; rss: 143MB	expansion
time: 0.000; rss: 143MB	maybe building test harness
time: 0.006; rss: 143MB	maybe creating a macro crate
Post-expansion node count: 638863
time: 0.000; rss: 143MB	checking for inline asm in case the target doesn't support it
time: 0.012; rss: 143MB	complete gated feature checking
time: 0.022; rss: 143MB	early lint checks
time: 0.007; rss: 143MB	AST validation
time: 0.077; rss: 158MB	name resolution
time: 0.045; rss: 183MB	lowering ast -> hir
time: 0.008; rss: 194MB	indexing hir
time: 0.006; rss: 194MB	attribute checking
time: 0.004; rss: 149MB	language item collection
time: 0.011; rss: 149MB	lifetime resolution
time: 0.000; rss: 149MB	looking for entry point
time: 0.000; rss: 149MB	looking for plugin registrar
time: 0.042; rss: 169MB	region resolution
time: 0.005; rss: 169MB	loop checking
time: 0.005; rss: 169MB	static item recursion checking
time: 0.327; rss: 170MB	compute_incremental_hashes_map
time: 0.000; rss: 170MB	load_dep_graph
time: 0.046; rss: 175MB	type collecting
time: 0.001; rss: 175MB	variance inference
time: 0.002; rss: 175MB	impl wf inference
time: 0.018; rss: 177MB	coherence checking
time: 0.088; rss: 179MB	wf checking
time: 0.182; rss: 182MB	item-types checking
time: 6.182; rss: 232MB	item-bodies checking
time: 0.000; rss: 232MB	drop-impl checking
time: 0.216; rss: 253MB	const checking
time: 0.048; rss: 253MB	privacy checking
time: 0.006; rss: 253MB	stability index
time: 0.018; rss: 253MB	intrinsic checking
time: 0.014; rss: 253MB	effect checking
time: 0.046; rss: 253MB	match checking
time: 0.050; rss: 248MB	liveness checking
time: 0.177; rss: 248MB	rvalue checking
time: 0.362; rss: 436MB	MIR dump
  time: 0.056; rss: 438MB	SimplifyCfg
  time: 0.072; rss: 438MB	QualifyAndPromoteConstants
  time: 0.105; rss: 438MB	TypeckMir
  time: 0.004; rss: 438MB	SimplifyBranches
  time: 0.030; rss: 438MB	SimplifyCfg
time: 0.268; rss: 438MB	MIR cleanup and validation
time: 0.540; rss: 438MB	borrow checking
time: 0.025; rss: 438MB	reachability checking
time: 0.039; rss: 438MB	death checking
time: 0.031; rss: 440MB	stability checking
time: 0.000; rss: 440MB	unused lib feature checking
time: 0.202; rss: 440MB	lint checking
time: 0.000; rss: 440MB	resolving dependency formats
  time: 0.003; rss: 440MB	NoLandingPads
  time: 0.026; rss: 440MB	SimplifyCfg
  time: 0.061; rss: 447MB	EraseRegions
  time: 0.010; rss: 447MB	AddCallGuards
  time: 0.267; rss: 462MB	ElaborateDrops
  time: 0.003; rss: 462MB	NoLandingPads
  time: 0.051; rss: 462MB	SimplifyCfg
  time: 0.028; rss: 462MB	InstCombine
  time: 0.012; rss: 462MB	Deaggregator
  time: 0.002; rss: 462MB	CopyPropagation
  time: 0.034; rss: 462MB	SimplifyLocals
  time: 0.009; rss: 462MB	AddCallGuards
  time: 0.002; rss: 462MB	PreTrans
time: 0.509; rss: 462MB	MIR optimisations
  time: 0.061; rss: 473MB	write metadata
  time: 0.375; rss: 489MB	translation item collection
  time: 0.057; rss: 497MB	codegen unit partitioning
  time: 0.040; rss: 738MB	internalize symbols
time: 4.302; rss: 738MB	translation
time: 0.000; rss: 738MB	assert dep graph
time: 0.000; rss: 738MB	serialize dep graph
incremental: re-using 0 out of 1 modules
  time: 0.522; rss: 427MB	llvm function passes [0]
  time: 0.260; rss: 434MB	llvm module passes [0]
  time: 10.349; rss: 431MB	codegen passes [0]
  time: 0.000; rss: 431MB	codegen passes [0]
time: 11.890; rss: 431MB	LLVM passes
time: 0.000; rss: 431MB	serialize work products
time: 0.335; rss: 115MB	linking
done
