commit 8694b4ffe9b223c351e50c10bd8ea4e23af58baa
Merge: dde35e7 8128817
Author: bors <bors@rust-lang.org>
Date:   Fri Apr 8 03:20:11 2016 -0700

    Auto merge of #32695 - sfackler:default-buf-size, r=alexcrichton
    
    Drop the default buffer size to 8K
    
    The 64k capacity was picked by me a couple of years ago in the initial
    implementation of buffered IO adaptors:
    https://github.com/rust-lang/rust/pull/9091/files#diff-b131eeef531ad098b32f49695a031008R62.
    64K was picked for symmetry with libuv, which we no longer use.
    
    64K is *way* larger than the default size of any other language that I
    can find. C, C++, and Java default to 8K, and Go defaults to 4K. There
    have been a variety of issues filed relating to this such as #31885.
    
    Closes #31885
rustc: ./hyper.0.5.0
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling hyper v0.5.0 (file:///root/benchmarks/hyper.0.5.0)
time: 0.039; rss: 41MB	parsing
Lines of code:             9154
Pre-expansion node count:  45594
time: 0.009; rss: 42MB	configuration 1
time: 0.000; rss: 42MB	recursion limit
time: 0.000; rss: 42MB	gated macro checking
time: 0.000; rss: 42MB	crate injection
time: 0.005; rss: 47MB	macro loading
time: 0.000; rss: 47MB	plugin loading
time: 0.000; rss: 47MB	plugin registration
time: 0.200; rss: 56MB	expansion
time: 0.004; rss: 56MB	complete gated feature checking 1
time: 0.029; rss: 56MB	configuration 2
time: 0.000; rss: 56MB	gated configuration checking
time: 0.011; rss: 56MB	maybe building test harness
time: 0.008; rss: 56MB	prelude injection
time: 0.001; rss: 56MB	checking that all macro invocations are gone
time: 0.000; rss: 56MB	checking for inline asm in case the target doesn't support it
time: 0.002; rss: 56MB	complete gated feature checking 2
time: 0.001; rss: 56MB	const fn bodies and arguments
Post-expansion node count: 107125
time: 0.008; rss: 56MB	assigning node ids
time: 0.018; rss: 62MB	lowering ast -> hir
time: 0.009; rss: 63MB	indexing hir
time: 0.001; rss: 63MB	attribute checking
time: 0.007; rss: 63MB	early lint checks
time: 0.004; rss: 59MB	external crate/lib resolution
time: 0.001; rss: 59MB	language item collection
time: 0.029; rss: 75MB	resolution
time: 0.002; rss: 75MB	lifetime resolution
time: 0.000; rss: 75MB	looking for entry point
time: 0.000; rss: 75MB	looking for plugin registrar
time: 0.009; rss: 79MB	region resolution
time: 0.001; rss: 79MB	loop checking
time: 0.001; rss: 79MB	static item recursion checking
time: 0.000; rss: 79MB	load_dep_graph
time: 0.018; rss: 88MB	type collecting
time: 0.000; rss: 88MB	variance inference
time: 0.046; rss: 103MB	coherence checking
time: 0.074; rss: 103MB	wf checking
time: 0.028; rss: 104MB	item-types checking
time: 0.502; rss: 122MB	item-bodies checking
time: 0.000; rss: 122MB	drop-impl checking
time: 0.040; rss: 123MB	const checking
time: 0.010; rss: 123MB	privacy checking
time: 0.001; rss: 123MB	stability index
time: 0.004; rss: 123MB	intrinsic checking
time: 0.002; rss: 123MB	effect checking
time: 0.012; rss: 123MB	match checking
time: 0.005; rss: 124MB	liveness checking
time: 0.033; rss: 124MB	rvalue checking
time: 0.060; rss: 131MB	MIR dump
time: 0.022; rss: 132MB	MIR passes
time: 0.067; rss: 132MB	borrow checking
time: 0.003; rss: 132MB	reachability checking
time: 0.007; rss: 132MB	death checking
time: 0.006; rss: 132MB	stability checking
time: 0.000; rss: 132MB	unused lib feature checking
time: 0.049; rss: 132MB	lint checking
time: 0.000; rss: 132MB	resolving dependency formats
time: 0.014; rss: 134MB	Prepare MIR codegen passes
  time: 0.195; rss: 152MB	translation item collection
  time: 0.138; rss: 273MB	write metadata
time: 1.770; rss: 273MB	translation
time: 0.001; rss: 273MB	assert dep graph
time: 0.000; rss: 273MB	serialize dep graph
  time: 0.097; rss: 162MB	llvm function passes [0]
  time: 0.050; rss: 163MB	llvm module passes [0]
  time: 1.645; rss: 166MB	codegen passes [0]
  time: 0.001; rss: 117MB	codegen passes [0]
time: 2.004; rss: 116MB	LLVM passes
time: 0.173; rss: 114MB	linking
done
