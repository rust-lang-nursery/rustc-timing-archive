commit 49c36bf16f80a9d9d4e96172b1bc8cb7279de468
Merge: ac919fc 4752367
Author: bors <bors@rust-lang.org>
Date:   Thu Nov 3 22:58:55 2016 -0700

    Auto merge of #36306 - nagisa:mir-local-cleanup, r=eddyb
    
    A way to remove otherwise unused locals from MIR
    
    There is a certain amount of desire for a pass which cleans up the provably unused variables (no assignments or reads). There has been an implementation of such pass by @scottcarr, and another (two!) implementations by me in my own dataflow efforts.
    
    PR like https://github.com/rust-lang/rust/pull/35916 proves that this pass is useful even on its own, which is why I cherry-picked it out from my dataflow effort.
    
    @nikomatsakis previously expressed concerns over this pass not seeming to be very cheap to run and therefore unsuitable for regular cleanup duties. Turns out, regular cleanup of local declarations is not at all necessary, at least now, because majority of passes simply do not (or should not) care about them. Thatâ€™s why it is viable to only run this pass once (perhaps a few more times in the future?) per function, right before translation.
    
    r? @eddyb or @nikomatsakis
rustc: ./inflate-0.1.0
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling inflate v0.1.0 (file:///root/benchmarks/inflate-0.1.0)
time: 0.004; rss: 43MB	parsing
Lines of code:             956
Pre-expansion node count:  4740
time: 0.000; rss: 43MB	recursion limit
time: 0.000; rss: 43MB	crate injection
time: 0.000; rss: 43MB	plugin loading
time: 0.000; rss: 43MB	plugin registration
time: 0.070; rss: 70MB	expansion
time: 0.000; rss: 70MB	maybe building test harness
time: 0.000; rss: 70MB	maybe creating a macro crate
Post-expansion node count: 55750
time: 0.000; rss: 70MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 70MB	complete gated feature checking
time: 0.002; rss: 70MB	early lint checks
time: 0.000; rss: 70MB	AST validation
time: 0.009; rss: 72MB	name resolution
time: 0.005; rss: 75MB	lowering ast -> hir
time: 0.001; rss: 77MB	indexing hir
time: 0.001; rss: 77MB	attribute checking
time: 0.000; rss: 73MB	language item collection
time: 0.001; rss: 73MB	lifetime resolution
time: 0.000; rss: 73MB	looking for entry point
time: 0.000; rss: 73MB	looking for plugin registrar
time: 0.003; rss: 73MB	region resolution
time: 0.000; rss: 73MB	loop checking
time: 0.000; rss: 73MB	static item recursion checking
time: 0.031; rss: 74MB	compute_incremental_hashes_map
time: 0.000; rss: 74MB	load_dep_graph
time: 0.001; rss: 74MB	type collecting
time: 0.000; rss: 74MB	variance inference
time: 0.008; rss: 77MB	coherence checking
time: 0.001; rss: 77MB	wf checking
time: 0.001; rss: 77MB	item-types checking
time: 1.733; rss: 90MB	item-bodies checking
time: 0.000; rss: 90MB	drop-impl checking
time: 0.017; rss: 88MB	const checking
time: 0.001; rss: 88MB	privacy checking
time: 0.000; rss: 88MB	stability index
time: 0.000; rss: 88MB	intrinsic checking
time: 0.001; rss: 88MB	effect checking
time: 0.002; rss: 88MB	match checking
time: 0.065; rss: 88MB	liveness checking
time: 0.012; rss: 88MB	rvalue checking
time: 0.039; rss: 110MB	MIR dump
  time: 0.007; rss: 111MB	SimplifyCfg
  time: 0.005; rss: 111MB	QualifyAndPromoteConstants
  time: 0.007; rss: 111MB	TypeckMir
  time: 0.000; rss: 111MB	SimplifyBranches
  time: 0.002; rss: 111MB	SimplifyCfg
time: 0.021; rss: 111MB	MIR cleanup and validation
time: 0.196; rss: 111MB	borrow checking
time: 0.000; rss: 111MB	reachability checking
time: 0.003; rss: 111MB	death checking
time: 0.002; rss: 111MB	stability checking
time: 0.000; rss: 111MB	unused lib feature checking
time: 0.016; rss: 112MB	lint checking
time: 0.000; rss: 112MB	resolving dependency formats
  time: 0.000; rss: 112MB	NoLandingPads
  time: 0.002; rss: 112MB	SimplifyCfg
  time: 0.003; rss: 112MB	EraseRegions
  time: 0.001; rss: 112MB	AddCallGuards
  time: 0.199; rss: 114MB	ElaborateDrops
  time: 0.000; rss: 114MB	NoLandingPads
  time: 0.006; rss: 112MB	SimplifyCfg
  time: 0.003; rss: 112MB	InstCombine
  time: 0.000; rss: 112MB	Deaggregator
  time: 0.000; rss: 112MB	CopyPropagation
  time: 0.003; rss: 112MB	SimplifyLocals
  time: 0.001; rss: 112MB	AddCallGuards
  time: 0.000; rss: 112MB	PreTrans
time: 0.218; rss: 112MB	MIR optimisations
  time: 0.001; rss: 113MB	write metadata
  time: 0.009; rss: 113MB	translation item collection
  time: 0.001; rss: 113MB	codegen unit partitioning
  time: 0.001; rss: 126MB	internalize symbols
time: 0.156; rss: 126MB	translation
time: 0.000; rss: 126MB	assert dep graph
time: 0.000; rss: 126MB	serialize dep graph
  time: 0.029; rss: 88MB	llvm function passes [0]
  time: 0.006; rss: 89MB	llvm module passes [0]
  time: 0.675; rss: 93MB	codegen passes [0]
  time: 0.000; rss: 93MB	codegen passes [0]
time: 0.744; rss: 93MB	LLVM passes
time: 0.000; rss: 93MB	serialize work products
time: 0.019; rss: 81MB	linking
done
