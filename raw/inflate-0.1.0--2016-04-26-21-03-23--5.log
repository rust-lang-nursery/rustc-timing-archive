commit 8f552181895921a377ab8c235340ea3d80ec7fc0
Merge: 897199a 9249e6a
Author: bors <bors@rust-lang.org>
Date:   Tue Apr 26 14:54:37 2016 -0700

    Auto merge of #31414 - durka:clone-copy, r=alexcrichton
    
    special-case #[derive(Copy, Clone)] with a shallow clone
    
    If a type is Copy then its Clone implementation can be a no-op. Currently `#[derive(Clone)]` generates a deep clone anyway. This can lead to lots of code bloat.
    
    This PR detects the case where Copy and Clone are both being derived (the general case of "is this type Copy" can't be determined by a syntax extension) and generates the shallow Clone impl. Right now this can only be done if there are no type parameters (see https://github.com/rust-lang/rust/issues/31085#issuecomment-178988663), but this restriction can be removed after specialization.
    
    Fixes #31085.
rustc: ./inflate-0.1.0
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling inflate v0.1.0 (file:///root/benchmarks/inflate-0.1.0)
time: 0.004; rss: 47MB	parsing
Lines of code:             956
Pre-expansion node count:  4761
time: 0.001; rss: 47MB	configuration 1
time: 0.000; rss: 47MB	recursion limit
time: 0.000; rss: 47MB	gated macro checking
time: 0.000; rss: 47MB	crate injection
time: 0.003; rss: 52MB	macro loading
time: 0.000; rss: 52MB	plugin loading
time: 0.000; rss: 52MB	plugin registration
time: 0.085; rss: 59MB	expansion
time: 0.001; rss: 59MB	complete gated feature checking 1
time: 0.009; rss: 59MB	configuration 2
time: 0.000; rss: 59MB	gated configuration checking
time: 0.004; rss: 59MB	maybe building test harness
time: 0.004; rss: 59MB	prelude injection
time: 0.000; rss: 59MB	checking that all macro invocations are gone
time: 0.000; rss: 59MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 59MB	complete gated feature checking 2
time: 0.000; rss: 59MB	const fn bodies and arguments
Post-expansion node count: 54797
time: 0.004; rss: 59MB	assigning node ids
time: 0.006; rss: 60MB	collecting defs
time: 0.001; rss: 60MB	external crate/lib resolution
time: 0.015; rss: 65MB	lowering ast -> hir
time: 0.001; rss: 66MB	indexing hir
time: 0.000; rss: 66MB	attribute checking
time: 0.004; rss: 66MB	early lint checks
time: 0.001; rss: 62MB	language item collection
time: 0.012; rss: 72MB	name resolution
time: 0.001; rss: 72MB	lifetime resolution
time: 0.000; rss: 72MB	looking for entry point
time: 0.000; rss: 72MB	looking for plugin registrar
time: 0.004; rss: 73MB	region resolution
time: 0.000; rss: 73MB	loop checking
time: 0.000; rss: 73MB	static item recursion checking
time: 0.000; rss: 73MB	load_dep_graph
time: 0.001; rss: 74MB	type collecting
time: 0.000; rss: 74MB	variance inference
time: 0.010; rss: 88MB	coherence checking
time: 0.002; rss: 88MB	wf checking
time: 0.002; rss: 88MB	item-types checking
time: 2.825; rss: 109MB	item-bodies checking
time: 0.000; rss: 109MB	drop-impl checking
time: 0.014; rss: 110MB	const checking
time: 0.002; rss: 110MB	privacy checking
time: 0.000; rss: 110MB	stability index
time: 0.001; rss: 110MB	intrinsic checking
time: 0.001; rss: 110MB	effect checking
time: 0.003; rss: 110MB	match checking
time: 0.296; rss: 110MB	liveness checking
time: 0.009; rss: 110MB	rvalue checking
time: 0.034; rss: 123MB	MIR dump
time: 0.013; rss: 120MB	MIR passes
time: 0.211; rss: 121MB	borrow checking
time: 0.000; rss: 121MB	reachability checking
time: 0.004; rss: 121MB	death checking
time: 0.002; rss: 121MB	stability checking
time: 0.000; rss: 121MB	unused lib feature checking
time: 0.022; rss: 123MB	lint checking
time: 0.000; rss: 123MB	resolving dependency formats
time: 0.006; rss: 125MB	Prepare MIR codegen passes
  time: 0.011; rss: 129MB	translation item collection
  time: 0.000; rss: 129MB	codegen unit partitioning
  time: 0.003; rss: 146MB	write metadata
time: 0.368; rss: 138MB	translation
time: 0.000; rss: 138MB	assert dep graph
time: 0.000; rss: 138MB	serialize dep graph
  time: 0.026; rss: 104MB	llvm function passes [0]
  time: 0.004; rss: 105MB	llvm module passes [0]
  time: 0.493; rss: 110MB	codegen passes [0]
  time: 0.000; rss: 99MB	codegen passes [0]
time: 0.565; rss: 99MB	LLVM passes
time: 0.034; rss: 99MB	linking
done
