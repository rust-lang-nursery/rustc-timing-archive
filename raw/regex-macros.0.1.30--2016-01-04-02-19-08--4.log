commit 191ff2d8fd57a8238d85302a8f06e2bd11b2f6d2
Merge: 99e59de add7410
Author: bors <bors@rust-lang.org>
Date:   Mon Jan 4 03:07:59 2016 +0000

    Auto merge of #30651 - nagisa:mir-fix-equality-checks, r=eddyb
    
    This is not a fix to checks themselves per se (though we still use `Eq` MIR test instead of calling `PartialEq::eq`), but rather how we handle items we encounter in pattern position.
    
    Previously we would just call `PartialEq` with the constant and the matchee, but now we essentially inline the constant instead. E.g. these two snippets are functionally equivalent at MIR level:
    
    ```
    match val { Some(42) => true, _ => false }
    ```
    and
    ```
    const SECRET: Option<u8> = Some(42);
    match val { SECRET => true, _ => false }
    ```
    
    This approach also allows for more optimizations of matches. I.e. It can now exploit `SwitchInt` to switch on number inside a `Some` regardless of whether the value being an item or not.
    
    This is based on @tsionâ€™s already approved PR so I could reuse the file for more tests.
    
    r? @eddyb
    cc @nikomatsakis @tsion
rustc: ./regex-macros.0.1.30
cd regex_macros && cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling regex_macros v0.1.17 (file:///root/benchmarks/regex-macros.0.1.30/regex_macros)
time: 0.002; rss: 32MB	parsing
Lines of code:             639
Pre-expansion node count:  2170
time: 0.001; rss: 32MB	configuration 1
time: 0.000; rss: 32MB	recursion limit
time: 0.000; rss: 32MB	gated macro checking
time: 0.000; rss: 32MB	crate injection
time: 0.003; rss: 35MB	macro loading
time: 0.000; rss: 35MB	plugin loading
time: 0.000; rss: 35MB	plugin registration
time: 0.036; rss: 42MB	expansion
time: 0.001; rss: 42MB	complete gated feature checking 1
time: 0.011; rss: 42MB	configuration 2
time: 0.000; rss: 42MB	gated configuration checking
time: 0.005; rss: 42MB	maybe building test harness
time: 0.005; rss: 42MB	prelude injection
time: 0.000; rss: 42MB	checking that all macro invocations are gone
time: 0.000; rss: 42MB	checking for inline asm in case the target doesn't support it
time: 0.001; rss: 42MB	complete gated feature checking 2
Post-expansion node count: 76201
time: 0.005; rss: 42MB	assigning node ids
time: 0.004; rss: 46MB	lowering ast -> hir
time: 0.001; rss: 46MB	indexing hir
time: 0.000; rss: 46MB	attribute checking
time: 0.002; rss: 46MB	early lint checks
time: 0.051; rss: 80MB	external crate/lib resolution
time: 0.001; rss: 80MB	language item collection
makefile:2: recipe for target 'all' failed
done
