commit d508de6cf7c7bb9b5057ee63432dbbc899209101
Merge: d98da85 d37edef
Author: bors <bors@rust-lang.org>
Date:   Mon Jul 4 02:18:46 2016 -0700

    Auto merge of #34638 - zackmdavis:if_let_over_none_empty_block_arm, r=jseyfried
    
    prefer `if let` to match with `None => {}` arm in some places
    
    This is a spiritual succesor to #34268 / 8531d581, in which we replaced a
    number of matches of None to the unit value with `if let` conditionals
    where it was judged that this made for clearer/simpler code (as would be
    recommended by Manishearth/rust-clippy's `single_match` lint). The same
    rationale applies to matches of None to the empty block.
    
    ----
    
    r? @jseyfried
rustc: ./rust-encoding.0.2.32
cargo rustc -- -Ztime-passes -Zinput-stats
    Updating registry `https://github.com/rust-lang/crates.io-index`
   Compiling encoding_index_tests v0.1.4 (file:///root/benchmarks/rust-encoding.0.2.32)
   Compiling encoding-index-simpchinese v1.20141219.5 (file:///root/benchmarks/rust-encoding.0.2.32)
   Compiling encoding-index-tradchinese v1.20141219.5 (file:///root/benchmarks/rust-encoding.0.2.32)
   Compiling encoding-index-korean v1.20141219.5 (file:///root/benchmarks/rust-encoding.0.2.32)
   Compiling encoding-index-japanese v1.20141219.5 (file:///root/benchmarks/rust-encoding.0.2.32)
   Compiling encoding-index-singlebyte v1.20141219.5 (file:///root/benchmarks/rust-encoding.0.2.32)
   Compiling encoding v0.2.32 (file:///root/benchmarks/rust-encoding.0.2.32)
time: 0.032; rss: 86MB	parsing
Lines of code:             6441
Pre-expansion node count:  30069
time: 0.004; rss: 89MB	configuration
time: 0.000; rss: 89MB	recursion limit
time: 0.000; rss: 89MB	crate injection
time: 0.000; rss: 89MB	plugin loading
time: 0.000; rss: 89MB	plugin registration
time: 0.070; rss: 123MB	expansion
time: 0.000; rss: 123MB	maybe building test harness
time: 0.000; rss: 123MB	checking for inline asm in case the target doesn't support it
time: 0.001; rss: 123MB	complete gated feature checking
Post-expansion node count: 40757
time: 0.003; rss: 123MB	assigning node ids
time: 0.001; rss: 124MB	collecting defs
time: 0.001; rss: 124MB	external crate/lib resolution
time: 0.002; rss: 124MB	early lint checks
time: 0.000; rss: 124MB	AST validation
time: 0.005; rss: 128MB	name resolution
time: 0.004; rss: 129MB	lowering ast -> hir
time: 0.000; rss: 129MB	indexing hir
time: 0.000; rss: 129MB	attribute checking
time: 0.000; rss: 127MB	language item collection
time: 0.001; rss: 127MB	lifetime resolution
time: 0.000; rss: 127MB	looking for entry point
time: 0.000; rss: 127MB	looking for plugin registrar
time: 0.002; rss: 129MB	region resolution
time: 0.000; rss: 129MB	loop checking
time: 0.000; rss: 129MB	static item recursion checking
time: 0.000; rss: 129MB	load_dep_graph
time: 0.012; rss: 131MB	type collecting
time: 0.000; rss: 131MB	variance inference
time: 0.021; rss: 136MB	coherence checking
time: 0.024; rss: 136MB	wf checking
time: 0.015; rss: 136MB	item-types checking
time: 0.219; rss: 145MB	item-bodies checking
time: 0.000; rss: 145MB	drop-impl checking
time: 0.013; rss: 145MB	const checking
time: 0.002; rss: 145MB	privacy checking
time: 0.000; rss: 145MB	stability index
time: 0.002; rss: 145MB	intrinsic checking
time: 0.000; rss: 145MB	effect checking
time: 0.008; rss: 145MB	match checking
time: 0.001; rss: 145MB	liveness checking
time: 0.008; rss: 145MB	rvalue checking
time: 0.023; rss: 151MB	MIR dump
time: 0.015; rss: 151MB	MIR passes
time: 0.024; rss: 151MB	borrow checking
time: 0.000; rss: 151MB	reachability checking
time: 0.002; rss: 151MB	death checking
time: 0.002; rss: 151MB	stability checking
time: 0.000; rss: 151MB	unused lib feature checking
time: 0.024; rss: 153MB	lint checking
time: 0.000; rss: 153MB	resolving dependency formats
time: 0.027; rss: 153MB	Prepare MIR codegen passes
  time: 0.057; rss: 157MB	write metadata
  time: 0.029; rss: 159MB	translation item collection
  time: 0.001; rss: 159MB	codegen unit partitioning
time: 0.936; rss: 185MB	translation
time: 0.000; rss: 185MB	assert dep graph
time: 0.000; rss: 185MB	serialize dep graph
  time: 0.339; rss: 151MB	llvm function passes [0]
  time: 0.622; rss: 155MB	llvm module passes [0]
  time: 5.860; rss: 160MB	codegen passes [0]
  time: 0.002; rss: 146MB	codegen passes [0]
time: 7.320; rss: 145MB	LLVM passes
time: 0.055; rss: 143MB	linking
done
