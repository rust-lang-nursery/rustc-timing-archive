commit d27bdafc3eaab2729d664f82b7d650782640f31a
Merge: cde0fa5 0d2c26c
Author: bors <bors@rust-lang.org>
Date:   Fri May 20 00:34:50 2016 -0700

    Auto merge of #33553 - alexcrichton:cdylibs, r=brson
    
    rustc: Add a new crate type, cdylib
    
    This commit is an implementation of [RFC 1510] which adds a new crate type,
    `cdylib`, to the compiler. This new crate type differs from the existing `dylib`
    crate type in a few key ways:
    
    * No metadata is present in the final artifact
    * Symbol visibility rules are the same as executables, that is only reachable
      `extern` functions are visible symbols
    * LTO is allowed
    * All libraries are always linked statically
    
    This commit is relatively simple by just plubming the compiler with another
    crate type which takes different branches here and there. The only major change
    is an implementation of the `Linker::export_symbols` function on Unix which now
    actually does something. This helps restrict the public symbols from a cdylib on
    Unix.
    
    With this PR a "hello world" `cdylib` is 7.2K while the same `dylib` is 2.4MB,
    which is some nice size savings!
    
    [RFC 1510]: https://github.com/rust-lang/rfcs/pull/1510
    
    Closes #33132
rustc: ./issue-32062-equality-relations-complexity
/root/rust/x86_64-unknown-linux-gnu/stage2/bin/rustc issue-32062.rs -Ztime-passes -Zinput-stats
time: 0.000; rss: 44MB	parsing
Lines of code:             60
Pre-expansion node count:  586
time: 0.000; rss: 48MB	configuration 1
time: 0.000; rss: 48MB	recursion limit
time: 0.000; rss: 48MB	crate injection
time: 0.018; rss: 82MB	macro loading
time: 0.000; rss: 82MB	plugin loading
time: 0.000; rss: 82MB	plugin registration
time: 0.001; rss: 82MB	expansion
time: 0.000; rss: 82MB	configuration 2
time: 0.000; rss: 82MB	gated configuration checking
time: 0.000; rss: 82MB	maybe building test harness
time: 0.000; rss: 82MB	prelude injection
time: 0.000; rss: 82MB	checking that all macro invocations are gone
time: 0.000; rss: 82MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 82MB	complete gated feature checking
Post-expansion node count: 599
time: 0.000; rss: 82MB	assigning node ids
time: 0.000; rss: 82MB	collecting defs
time: 0.003; rss: 82MB	external crate/lib resolution
time: 0.000; rss: 82MB	early lint checks
time: 0.000; rss: 87MB	name resolution
time: 0.000; rss: 87MB	lowering ast -> hir
time: 0.000; rss: 87MB	indexing hir
time: 0.000; rss: 87MB	attribute checking
time: 0.000; rss: 87MB	language item collection
time: 0.000; rss: 87MB	lifetime resolution
time: 0.000; rss: 87MB	looking for entry point
time: 0.000; rss: 87MB	looking for plugin registrar
time: 0.000; rss: 87MB	region resolution
time: 0.000; rss: 87MB	loop checking
time: 0.000; rss: 87MB	static item recursion checking
time: 0.000; rss: 87MB	load_dep_graph
time: 0.001; rss: 87MB	type collecting
time: 0.000; rss: 87MB	variance inference
time: 0.005; rss: 87MB	coherence checking
time: 0.008; rss: 87MB	wf checking
time: 0.001; rss: 87MB	item-types checking
time: 7.365; rss: 95MB	item-bodies checking
time: 0.000; rss: 95MB	drop-impl checking
time: 0.001; rss: 95MB	const checking
time: 0.000; rss: 95MB	privacy checking
time: 0.000; rss: 95MB	stability index
time: 0.000; rss: 93MB	intrinsic checking
time: 0.000; rss: 93MB	effect checking
time: 0.000; rss: 93MB	match checking
time: 0.000; rss: 93MB	liveness checking
time: 0.001; rss: 93MB	rvalue checking
time: 0.001; rss: 93MB	MIR dump
time: 0.000; rss: 93MB	MIR passes
time: 0.002; rss: 93MB	borrow checking
time: 0.000; rss: 93MB	reachability checking
time: 0.000; rss: 93MB	death checking
time: 0.000; rss: 93MB	stability checking
time: 0.000; rss: 93MB	unused lib feature checking
time: 0.000; rss: 93MB	lint checking
time: 0.001; rss: 93MB	resolving dependency formats
time: 0.000; rss: 93MB	Prepare MIR codegen passes
  time: 1.778; rss: 98MB	translation item collection
  time: 0.000; rss: 98MB	codegen unit partitioning
  time: 0.000; rss: 99MB	write metadata
time: 12.123; rss: 99MB	translation
time: 0.000; rss: 99MB	assert dep graph
time: 0.000; rss: 99MB	serialize dep graph
  time: 0.000; rss: 93MB	llvm function passes [0]
  time: 0.000; rss: 93MB	llvm module passes [0]
  time: 0.005; rss: 98MB	codegen passes [0]
  time: 0.000; rss: 98MB	codegen passes [0]
time: 0.006; rss: 98MB	LLVM passes
  time: 0.104; rss: 98MB	running linker
time: 0.104; rss: 98MB	linking
done
