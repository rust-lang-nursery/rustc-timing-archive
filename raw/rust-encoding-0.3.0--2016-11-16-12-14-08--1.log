commit 9d4b6fa51d86ad6141679a5a157fcd9bca48064c
Merge: 478c0d1 06242ff
Author: bors <bors@rust-lang.org>
Date:   Wed Nov 16 08:25:38 2016 -0800

    Auto merge of #37545 - alexcrichton:crt-static, r=brson
    
    rustc: Implement #[link(cfg(..))] and crt-static
    
    This commit is an implementation of [RFC 1721] which adds a new target feature
    to the compiler, `crt-static`, which can be used to select how the C runtime for
    a target is linked. Most targets dynamically linke the C runtime by default with
    the notable exception of some of the musl targets.
    
    [RFC 1721]: https://github.com/rust-lang/rfcs/blob/master/text/1721-crt-static.md
    
    This commit first adds the new target-feature, `crt-static`. If enabled, then
    the `cfg(target_feature = "crt-static")` will be available. Targets like musl
    will have this enabled by default. This feature can be controlled through the
    standard target-feature interface, `-C target-feature=+crt-static` or
    `-C target-feature=-crt-static`.
    
    Next this adds an gated and unstable `#[link(cfg(..))]` feature to enable the
    `crt-static` semantics we want with libc. The exact behavior of this attribute
    is a little squishy, but it's intended to be a forever-unstable
    implementation detail of the liblibc crate.
    
    Specifically the `#[link(cfg(..))]` annotation means that the `#[link]`
    directive is only active in a compilation unit if that `cfg` value is satisfied.
    For example when compiling an rlib, these directives are just encoded and
    ignored for dylibs, and all staticlibs are continued to be put into the rlib as
    usual. When placing that rlib into a staticlib, executable, or dylib, however,
    the `cfg` is evaluated *as if it were defined in the final artifact* and the
    library is decided to be linked or not.
    
    Essentially, what'll happen is:
    
    * On MSVC with `-C target-feature=-crt-static`, the `msvcrt.lib` library will be
      linked to.
    * On MSVC with `-C target-feature=+crt-static`, the `libcmt.lib` library will be
      linked to.
    * On musl with `-C target-feature=-crt-static`, the object files in liblibc.rlib
      are removed and `-lc` is passed instead.
    * On musl with `-C target-feature=+crt-static`, the object files in liblibc.rlib
      are used and `-lc` is not passed.
    
    This commit does **not** include an update to the liblibc module to implement
    these changes. I plan to do that just after the 1.14.0 beta release is cut to
    ensure we get ample time to test this feature.
    
    cc #37406
rustc: ./rust-encoding-0.3.0
cargo rustc  -- -Ztime-passes -Zinput-stats
   Compiling encoding v0.3.0-dev (file:///root/benchmarks/rust-encoding-0.3.0)
time: 0.016; rss: 45MB	parsing
Lines of code:             5757
Pre-expansion node count:  26523
time: 0.000; rss: 45MB	recursion limit
time: 0.000; rss: 45MB	crate injection
time: 0.000; rss: 45MB	plugin loading
time: 0.000; rss: 45MB	plugin registration
time: 0.030; rss: 74MB	expansion
time: 0.000; rss: 74MB	maybe building test harness
time: 0.000; rss: 74MB	maybe creating a macro crate
Post-expansion node count: 37888
time: 0.000; rss: 74MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 74MB	complete gated feature checking
time: 0.001; rss: 74MB	early lint checks
time: 0.000; rss: 74MB	AST validation
time: 0.004; rss: 74MB	name resolution
time: 0.003; rss: 76MB	lowering ast -> hir
time: 0.000; rss: 76MB	indexing hir
time: 0.000; rss: 76MB	attribute checking
time: 0.000; rss: 76MB	language item collection
time: 0.000; rss: 76MB	lifetime resolution
time: 0.000; rss: 76MB	looking for entry point
time: 0.000; rss: 76MB	looking for plugin registrar
time: 0.002; rss: 78MB	region resolution
time: 0.000; rss: 78MB	loop checking
time: 0.000; rss: 78MB	static item recursion checking
time: 0.013; rss: 78MB	compute_incremental_hashes_map
time: 0.000; rss: 78MB	load_dep_graph
time: 0.008; rss: 80MB	type collecting
time: 0.000; rss: 80MB	variance inference
time: 0.008; rss: 80MB	coherence checking
time: 0.010; rss: 80MB	wf checking
time: 0.010; rss: 81MB	item-types checking
time: 0.109; rss: 86MB	item-bodies checking
time: 0.000; rss: 86MB	drop-impl checking
time: 0.008; rss: 86MB	const checking
time: 0.001; rss: 86MB	privacy checking
time: 0.000; rss: 86MB	stability index
time: 0.001; rss: 86MB	intrinsic checking
time: 0.000; rss: 86MB	effect checking
time: 0.004; rss: 86MB	match checking
time: 0.001; rss: 86MB	liveness checking
time: 0.005; rss: 86MB	rvalue checking
time: 0.017; rss: 93MB	MIR dump
  time: 0.002; rss: 93MB	SimplifyCfg
  time: 0.003; rss: 93MB	QualifyAndPromoteConstants
  time: 0.004; rss: 93MB	TypeckMir
  time: 0.000; rss: 93MB	SimplifyBranches
  time: 0.001; rss: 93MB	SimplifyCfg
time: 0.011; rss: 93MB	MIR cleanup and validation
time: 0.017; rss: 93MB	borrow checking
time: 0.000; rss: 93MB	reachability checking
time: 0.001; rss: 93MB	death checking
time: 0.001; rss: 93MB	stability checking
time: 0.000; rss: 93MB	unused lib feature checking
time: 0.013; rss: 93MB	lint checking
time: 0.000; rss: 93MB	resolving dependency formats
  time: 0.000; rss: 93MB	NoLandingPads
  time: 0.001; rss: 93MB	SimplifyCfg
  time: 0.002; rss: 93MB	EraseRegions
  time: 0.000; rss: 93MB	AddCallGuards
  time: 0.022; rss: 95MB	ElaborateDrops
  time: 0.000; rss: 95MB	NoLandingPads
  time: 0.002; rss: 95MB	SimplifyCfg
  time: 0.001; rss: 95MB	InstCombine
  time: 0.001; rss: 95MB	Deaggregator
  time: 0.000; rss: 95MB	CopyPropagation
  time: 0.001; rss: 95MB	SimplifyLocals
  time: 0.000; rss: 95MB	AddCallGuards
  time: 0.000; rss: 95MB	PreTrans
time: 0.031; rss: 95MB	MIR optimisations
  time: 0.004; rss: 95MB	write metadata
  time: 0.143; rss: 177MB	translation item collection
  time: 0.002; rss: 177MB	codegen unit partitioning
  time: 0.002; rss: 200MB	internalize symbols
time: 0.390; rss: 200MB	translation
time: 0.000; rss: 200MB	assert dep graph
time: 0.000; rss: 200MB	serialize dep graph
  time: 0.025; rss: 114MB	llvm function passes [0]
  time: 0.056; rss: 118MB	llvm module passes [0]
  time: 0.629; rss: 125MB	codegen passes [0]
  time: 0.000; rss: 124MB	codegen passes [0]
time: 0.766; rss: 124MB	LLVM passes
time: 0.000; rss: 124MB	serialize work products
time: 0.039; rss: 94MB	linking
done
