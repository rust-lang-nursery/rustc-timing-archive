commit 1ec22171e6053c640293067418ea1901cb1c7df1
Merge: d91f8ab 3b0e27c
Author: bors <bors@rust-lang.org>
Date:   Sun May 8 00:31:40 2016 -0700

    Auto merge of #33130 - eddyb:mir-const, r=nikomatsakis
    
    Implement constant support in MIR.
    
    All of the intended features in `trans::consts` are now supported by `mir::constant`.
    The implementation is considered a temporary measure until `miri` replaces it.
    
    A `-Z orbit` bootstrap build will only translate LLVM IR from AST for `#[rustc_no_mir]` functions.
    
    Furthermore, almost all checks of constant expressions have been moved to MIR.
    In non-`const` functions, trees of temporaries are promoted, as per RFC 1414 (rvalue promotion).
    Promotion before MIR borrowck would allow reasoning about promoted values' lifetimes.
    
    The improved checking comes at the cost of four `[breaking-change]`s:
    * repeat counts must contain a constant expression, e.g.:
    `let arr = [0; { println!("foo"); 5 }];` used to be allowed (it behaved like `let arr = [0; 5];`)
    * dereference of a reference to a `static` cannot be used in another `static`, e.g.:
    `static X: [u8; 1] = [1]; static Y: u8 = (&X)[0];` was unintentionally allowed before
    * the type of a `static` *must* be `Sync`, irrespective of the initializer, e.g.
    `static FOO: *const T = &BAR;` worked as `&T` is `Sync`, but it shouldn't because `*const T` isn't
    * a `static` cannot wrap `UnsafeCell` around a type that *may* need drop, e.g.
    `static X: MakeSync<UnsafeCell<Option<String>>> = MakeSync(UnsafeCell::new(None));`
    was previously allowed based on the fact `None` alone doesn't need drop, but in `UnsafeCell`
    it can be later changed to `Some(String)` which *does* need dropping
    
    The drop restrictions are relaxed by RFC 1440 (#33156), which is implemented, but feature-gated.
    However, creating `UnsafeCell` from constants is unstable, so users can just enable the feature gate.
rustc: ./issue-32278-big-array-of-strings
/root/rust/x86_64-unknown-linux-gnu/stage2/bin/rustc big-array-of-strings.rs -Ztime-passes -Zinput-stats
time: 0.184; rss: 66MB	parsing
Lines of code:             65577
Pre-expansion node count:  65552
time: 0.011; rss: 66MB	configuration 1
time: 0.000; rss: 66MB	recursion limit
time: 0.000; rss: 66MB	crate injection
time: 0.004; rss: 71MB	macro loading
time: 0.000; rss: 71MB	plugin loading
time: 0.000; rss: 71MB	plugin registration
time: 0.043; rss: 77MB	expansion
time: 0.011; rss: 77MB	configuration 2
time: 0.000; rss: 77MB	gated configuration checking
time: 0.005; rss: 77MB	maybe building test harness
time: 0.005; rss: 77MB	prelude injection
time: 0.000; rss: 77MB	checking that all macro invocations are gone
time: 0.000; rss: 77MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 77MB	complete gated feature checking
Post-expansion node count: 65565
time: 0.006; rss: 77MB	assigning node ids
time: 0.001; rss: 77MB	collecting defs
time: 0.002; rss: 78MB	external crate/lib resolution
time: 0.009; rss: 90MB	lowering ast -> hir
time: 0.002; rss: 92MB	indexing hir
time: 0.001; rss: 92MB	attribute checking
time: 0.008; rss: 92MB	early lint checks
time: 0.001; rss: 81MB	language item collection
time: 0.002; rss: 84MB	name resolution
time: 0.001; rss: 84MB	lifetime resolution
time: 0.000; rss: 84MB	looking for entry point
time: 0.000; rss: 84MB	looking for plugin registrar
time: 0.014; rss: 89MB	region resolution
time: 0.001; rss: 89MB	loop checking
time: 0.002; rss: 89MB	static item recursion checking
time: 0.000; rss: 89MB	load_dep_graph
time: 0.000; rss: 90MB	type collecting
time: 0.000; rss: 90MB	variance inference
time: 0.006; rss: 100MB	coherence checking
time: 0.001; rss: 100MB	wf checking
time: 1.132; rss: 199MB	item-types checking
time: 0.000; rss: 199MB	item-bodies checking
time: 0.000; rss: 199MB	drop-impl checking
time: 0.019; rss: 201MB	const checking
time: 0.003; rss: 201MB	privacy checking
time: 0.000; rss: 201MB	stability index
time: 0.000; rss: 201MB	intrinsic checking
time: 0.000; rss: 201MB	effect checking
time: 0.000; rss: 201MB	match checking
time: 0.001; rss: 201MB	liveness checking
time: 0.000; rss: 201MB	rvalue checking
time: 0.056; rss: 207MB	MIR dump
time: 0.002; rss: 207MB	MIR passes
time: 0.001; rss: 207MB	borrow checking
time: 0.000; rss: 207MB	reachability checking
time: 0.001; rss: 207MB	death checking
time: 0.001; rss: 207MB	stability checking
time: 0.000; rss: 207MB	unused lib feature checking
time: 0.031; rss: 207MB	lint checking
time: 0.001; rss: 207MB	resolving dependency formats
time: 0.001; rss: 207MB	Prepare MIR codegen passes
  time: 0.001; rss: 207MB	translation item collection
  time: 0.000; rss: 207MB	codegen unit partitioning
  time: 0.000; rss: 213MB	write metadata
time: 0.089; rss: 213MB	translation
time: 0.000; rss: 213MB	assert dep graph
time: 0.000; rss: 213MB	serialize dep graph
  time: 0.004; rss: 86MB	llvm function passes [0]
  time: 0.000; rss: 86MB	llvm module passes [0]
  time: 0.196; rss: 90MB	codegen passes [0]
  time: 0.000; rss: 78MB	codegen passes [0]
time: 0.212; rss: 78MB	LLVM passes
  time: 0.194; rss: 78MB	running linker
time: 0.195; rss: 78MB	linking
done
