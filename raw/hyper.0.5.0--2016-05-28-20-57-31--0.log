commit 7746a334da364e5e4c25360cd52e97691cbddc08
Merge: 90d9a51 a2434eb
Author: bors <bors@rust-lang.org>
Date:   Sat May 28 16:21:53 2016 -0700

    Auto merge of #33825 - alexcrichton:fix-beta, r=aturon
    
    mk: Fix bootstrapping cross-hosts on beta
    
    The beta builds are currently failing, unfortunately, due to what is presumably
    some odd behavior with our makefiles. The wrong bootstrap key is being used to
    generate the stage1 cross-compiled libraries, which fails the build.
    Interestingly enough if the targets are directly specified as part of the build
    then it works just fine! Just a bare `make` fails...
    
    Instead of trying to understand what's happening in the makefiles instead just
    tweak how we configure the bootstrap key in a way that's more likely to work.
rustc: ./hyper.0.5.0
cargo rustc -- -Ztime-passes -Zinput-stats
    Updating registry `https://github.com/rust-lang/crates.io-index`
   Compiling winapi-build v0.1.1
   Compiling matches v0.1.2
   Compiling httparse v0.1.6
   Compiling libc v0.1.12
   Compiling traitobject v0.0.1
   Compiling pkg-config v0.3.8
   Compiling libc v0.2.11
   Compiling typeable v0.1.2
   Compiling gcc v0.3.28
   Compiling winapi v0.2.7
   Compiling unicase v0.1.0
   Compiling bitflags v0.3.3
   Compiling kernel32-sys v0.2.2
   Compiling log v0.3.6
   Compiling rustc-serialize v0.3.19
   Compiling lazy_static v0.1.16
   Compiling mime v0.0.11
   Compiling time v0.1.35
   Compiling num_cpus v0.2.12
   Compiling rand v0.3.14
   Compiling openssl-sys v0.6.7
   Compiling openssl v0.6.7
   Compiling uuid v0.1.18
   Compiling url v0.2.38
   Compiling cookie v0.1.21
   Compiling hyper v0.5.0 (file:///root/benchmarks/hyper.0.5.0)
time: 0.036; rss: 53MB	parsing
Lines of code:             9154
Pre-expansion node count:  44646
time: 0.007; rss: 53MB	configuration 1
time: 0.000; rss: 57MB	recursion limit
time: 0.000; rss: 57MB	crate injection
time: 0.021; rss: 91MB	macro loading
time: 0.000; rss: 91MB	plugin loading
time: 0.000; rss: 91MB	plugin registration
time: 0.243; rss: 101MB	expansion
time: 0.000; rss: 101MB	gated configuration checking
time: 0.014; rss: 101MB	maybe building test harness
time: 0.011; rss: 101MB	prelude injection
time: 0.001; rss: 101MB	checking that all macro invocations are gone
time: 0.000; rss: 101MB	checking for inline asm in case the target doesn't support it
time: 0.002; rss: 101MB	complete gated feature checking
Post-expansion node count: 101566
time: 0.010; rss: 101MB	assigning node ids
time: 0.003; rss: 101MB	collecting defs
time: 0.011; rss: 114MB	external crate/lib resolution
time: 0.007; rss: 114MB	early lint checks
time: 0.022; rss: 118MB	name resolution
time: 0.012; rss: 124MB	lowering ast -> hir
time: 0.001; rss: 126MB	indexing hir
time: 0.001; rss: 126MB	attribute checking
time: 0.001; rss: 118MB	language item collection
time: 0.002; rss: 118MB	lifetime resolution
time: 0.000; rss: 118MB	looking for entry point
time: 0.000; rss: 118MB	looking for plugin registrar
time: 0.006; rss: 122MB	region resolution
time: 0.001; rss: 122MB	loop checking
time: 0.001; rss: 122MB	static item recursion checking
time: 0.000; rss: 122MB	load_dep_graph
time: 0.019; rss: 125MB	type collecting
time: 0.000; rss: 125MB	variance inference
time: 0.046; rss: 131MB	coherence checking
time: 0.105; rss: 132MB	wf checking
time: 0.037; rss: 132MB	item-types checking
time: 0.550; rss: 143MB	item-bodies checking
time: 0.000; rss: 143MB	drop-impl checking
time: 0.045; rss: 143MB	const checking
time: 0.009; rss: 143MB	privacy checking
time: 0.001; rss: 143MB	stability index
time: 0.006; rss: 143MB	intrinsic checking
time: 0.002; rss: 143MB	effect checking
time: 0.016; rss: 143MB	match checking
time: 0.004; rss: 143MB	liveness checking
time: 0.033; rss: 145MB	rvalue checking
time: 0.070; rss: 154MB	MIR dump
time: 0.043; rss: 154MB	MIR passes
time: 0.077; rss: 154MB	borrow checking
time: 0.003; rss: 154MB	reachability checking
time: 0.006; rss: 154MB	death checking
time: 0.006; rss: 154MB	stability checking
time: 0.000; rss: 154MB	unused lib feature checking
time: 0.052; rss: 154MB	lint checking
time: 0.000; rss: 154MB	resolving dependency formats
time: 0.012; rss: 156MB	Prepare MIR codegen passes
  time: 0.132; rss: 161MB	write metadata
  time: 0.298; rss: 167MB	translation item collection
  time: 0.007; rss: 169MB	codegen unit partitioning
time: 1.804; rss: 289MB	translation
time: 0.001; rss: 289MB	assert dep graph
time: 0.000; rss: 289MB	serialize dep graph
  time: 0.095; rss: 182MB	llvm function passes [0]
  time: 0.049; rss: 182MB	llvm module passes [0]
  time: 1.625; rss: 183MB	codegen passes [0]
  time: 0.001; rss: 136MB	codegen passes [0]
time: 1.969; rss: 136MB	LLVM passes
time: 0.178; rss: 133MB	linking
done
