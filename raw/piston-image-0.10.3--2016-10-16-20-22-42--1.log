commit 6572a463116a31efba8bfddb2e64ed659311b8a1
Merge: 6dc035e ee338c3
Author: bors <bors@rust-lang.org>
Date:   Sun Oct 16 04:22:21 2016 -0700

    Auto merge of #37129 - arielb1:erased-normal, r=eddyb
    
    normalize types every time HR regions are erased
    
    Associated type normalization is inhibited by higher-ranked regions.
    Therefore, every time we erase them, we must re-normalize.
    
    I was meaning to introduce this change some time ago, but we used
    to erase regions in generic context, which broke this terribly (because
    you can't always normalize in a generic context). That seems to be gone
    now.
    
    Ensure this by having a `erase_late_bound_regions_and_normalize`
    function.
    
    Fixes #37109 (the missing call was in mir::block).
    
    r? @eddyb
rustc: ./piston-image-0.10.3
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling image v0.10.3 (file:///root/benchmarks/piston-image-0.10.3)
time: 0.068; rss: 53MB	parsing
Lines of code:             12000
Pre-expansion node count:  90272
time: 0.000; rss: 53MB	recursion limit
time: 0.000; rss: 53MB	crate injection
time: 0.000; rss: 53MB	plugin loading
time: 0.000; rss: 53MB	plugin registration
time: 0.094; rss: 91MB	expansion
time: 0.000; rss: 91MB	maybe building test harness
time: 0.001; rss: 91MB	maybe creating a macro crate
Post-expansion node count: 148999
time: 0.000; rss: 91MB	checking for inline asm in case the target doesn't support it
time: 0.003; rss: 91MB	complete gated feature checking
time: 0.005; rss: 91MB	early lint checks
time: 0.001; rss: 91MB	AST validation
time: 0.029; rss: 96MB	name resolution
time: 0.033; rss: 107MB	lowering ast -> hir
time: 0.008; rss: 109MB	indexing hir
time: 0.002; rss: 109MB	attribute checking
time: 0.002; rss: 98MB	language item collection
time: 0.003; rss: 98MB	lifetime resolution
time: 0.000; rss: 98MB	looking for entry point
time: 0.000; rss: 98MB	looking for plugin registrar
time: 0.020; rss: 103MB	region resolution
time: 0.001; rss: 103MB	loop checking
time: 0.001; rss: 103MB	static item recursion checking
time: 0.055; rss: 103MB	compute_incremental_hashes_map
time: 0.000; rss: 103MB	load_dep_graph
time: 0.017; rss: 106MB	type collecting
time: 0.000; rss: 106MB	variance inference
time: 0.030; rss: 109MB	coherence checking
time: 0.095; rss: 111MB	wf checking
time: 0.162; rss: 115MB	item-types checking
time: 0.946; rss: 125MB	item-bodies checking
time: 0.000; rss: 125MB	drop-impl checking
time: 0.060; rss: 126MB	const checking
time: 0.011; rss: 126MB	privacy checking
time: 0.002; rss: 126MB	stability index
time: 0.008; rss: 126MB	intrinsic checking
time: 0.003; rss: 126MB	effect checking
time: 0.018; rss: 126MB	match checking
time: 0.011; rss: 127MB	liveness checking
time: 0.050; rss: 127MB	rvalue checking
time: 0.172; rss: 167MB	MIR dump
  time: 0.012; rss: 168MB	SimplifyCfg
  time: 0.023; rss: 168MB	QualifyAndPromoteConstants
  time: 0.025; rss: 168MB	TypeckMir
  time: 0.001; rss: 168MB	SimplifyBranches
  time: 0.005; rss: 168MB	SimplifyCfg
time: 0.066; rss: 168MB	MIR passes
time: 0.127; rss: 169MB	borrow checking
time: 0.004; rss: 169MB	reachability checking
time: 0.009; rss: 169MB	death checking
time: 0.010; rss: 170MB	stability checking
time: 0.000; rss: 170MB	unused lib feature checking
time: 0.073; rss: 170MB	lint checking
time: 0.000; rss: 170MB	resolving dependency formats
  time: 0.001; rss: 170MB	NoLandingPads
  time: 0.005; rss: 170MB	SimplifyCfg
  time: 0.016; rss: 170MB	EraseRegions
  time: 0.002; rss: 170MB	AddCallGuards
  time: 0.052; rss: 174MB	ElaborateDrops
  time: 0.001; rss: 174MB	NoLandingPads
  time: 0.009; rss: 174MB	SimplifyCfg
  time: 0.006; rss: 174MB	InstCombine
  time: 0.002; rss: 174MB	Deaggregator
  time: 0.000; rss: 174MB	CopyPropagation
  time: 0.002; rss: 174MB	AddCallGuards
  time: 0.000; rss: 174MB	PreTrans
time: 0.096; rss: 174MB	Prepare MIR codegen passes
  time: 0.081; rss: 178MB	write metadata
  time: 0.489; rss: 191MB	translation item collection
  time: 0.032; rss: 194MB	codegen unit partitioning
  time: 0.025; rss: 312MB	internalize symbols
time: 3.169; rss: 285MB	translation
time: 0.000; rss: 285MB	assert dep graph
time: 0.000; rss: 285MB	serialize dep graph
  time: 0.201; rss: 220MB	llvm function passes [0]
  time: 0.082; rss: 223MB	llvm module passes [0]
  time: 4.131; rss: 226MB	codegen passes [0]
  time: 0.001; rss: 227MB	codegen passes [0]
time: 4.808; rss: 226MB	LLVM passes
time: 0.000; rss: 226MB	serialize work products
time: 0.264; rss: 97MB	linking
done
