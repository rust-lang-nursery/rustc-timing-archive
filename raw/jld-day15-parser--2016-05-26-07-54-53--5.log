commit 3c795e08d6f4a532f12f3f8e1837db5e0647f8b0
Merge: d5759a3 5b40452
Author: bors <bors@rust-lang.org>
Date:   Thu May 26 02:52:49 2016 -0700

    Auto merge of #33872 - nagisa:undef-is-llvm-for-sigsegv, r=eddyb
    
    Fix handling of FFI arguments
    
    r? @eddyb @nikomatsakis or whoever else.
    
    cc @alexcrichton @rust-lang/core
    
    The strategy employed here was to essentially change code we generate from
    
    ```llvm
      %s = alloca %S ; potentially smaller than argument, but never larger
      %1 = bitcast %S* %s to { i64, i64 }*
      store { i64, i64 } %0, { i64, i64 }* %1, align 4
    ```
    
    to
    
    ```llvm
      %1 = alloca { i64, i64 } ; the copy of argument itself
      store { i64, i64 } %0, { i64, i64 }* %1, align 4
      %s = bitcast { i64, i64 }* %1 to %S* ; potentially truncate by casting to a pointer of smaller type.
    ```
rustc: ./jld-day15-parser
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling day15 v0.1.0 (file:///root/benchmarks/jld-day15-parser)
time: 0.001; rss: 40MB	parsing
Lines of code:             72
Pre-expansion node count:  673
time: 0.000; rss: 40MB	configuration 1
time: 0.000; rss: 40MB	recursion limit
time: 0.000; rss: 40MB	crate injection
time: 0.025; rss: 75MB	macro loading
time: 0.000; rss: 75MB	plugin loading
time: 0.000; rss: 75MB	plugin registration
time: 0.002; rss: 77MB	expansion
time: 0.000; rss: 77MB	configuration 2
time: 0.000; rss: 77MB	gated configuration checking
time: 0.000; rss: 77MB	maybe building test harness
time: 0.000; rss: 77MB	prelude injection
time: 0.000; rss: 77MB	checking that all macro invocations are gone
time: 0.000; rss: 77MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 77MB	complete gated feature checking
Post-expansion node count: 1176
time: 0.000; rss: 77MB	assigning node ids
time: 0.000; rss: 77MB	collecting defs
time: 0.005; rss: 80MB	external crate/lib resolution
time: 0.000; rss: 80MB	early lint checks
time: 0.001; rss: 80MB	name resolution
time: 0.000; rss: 80MB	lowering ast -> hir
time: 0.000; rss: 80MB	indexing hir
time: 0.000; rss: 80MB	attribute checking
time: 0.000; rss: 80MB	language item collection
time: 0.000; rss: 80MB	lifetime resolution
time: 0.000; rss: 80MB	looking for entry point
time: 0.000; rss: 80MB	looking for plugin registrar
time: 0.000; rss: 80MB	region resolution
time: 0.000; rss: 80MB	loop checking
time: 0.000; rss: 80MB	static item recursion checking
time: 0.000; rss: 81MB	load_dep_graph
time: 0.001; rss: 81MB	type collecting
time: 0.000; rss: 81MB	variance inference
time: 0.005; rss: 84MB	coherence checking
time: 0.007; rss: 85MB	wf checking
time: 0.000; rss: 85MB	item-types checking
time: 1.448; rss: 102MB	item-bodies checking
time: 0.000; rss: 102MB	drop-impl checking
time: 0.001; rss: 102MB	const checking
time: 0.000; rss: 102MB	privacy checking
time: 0.000; rss: 102MB	stability index
time: 0.000; rss: 102MB	intrinsic checking
time: 0.000; rss: 102MB	effect checking
time: 0.000; rss: 102MB	match checking
time: 0.000; rss: 102MB	liveness checking
time: 0.001; rss: 102MB	rvalue checking
time: 0.001; rss: 103MB	MIR dump
time: 0.001; rss: 103MB	MIR passes
time: 0.001; rss: 103MB	borrow checking
time: 0.000; rss: 103MB	reachability checking
time: 0.000; rss: 103MB	death checking
time: 0.000; rss: 103MB	stability checking
time: 0.000; rss: 103MB	unused lib feature checking
time: 0.004; rss: 104MB	lint checking
time: 0.002; rss: 104MB	resolving dependency formats
time: 0.000; rss: 104MB	Prepare MIR codegen passes
  time: 0.000; rss: 105MB	write metadata
  time: 26.549; rss: 110MB	translation item collection
  time: 0.000; rss: 110MB	codegen unit partitioning
time: 81.493; rss: 135MB	translation
time: 0.000; rss: 135MB	assert dep graph
time: 0.000; rss: 135MB	serialize dep graph
  time: 0.015; rss: 104MB	llvm function passes [0]
  time: 0.002; rss: 104MB	llvm module passes [0]
  time: 0.274; rss: 110MB	codegen passes [0]
  time: 0.000; rss: 104MB	codegen passes [0]
time: 0.298; rss: 104MB	LLVM passes
  time: 0.118; rss: 104MB	running linker
time: 0.119; rss: 104MB	linking
done
