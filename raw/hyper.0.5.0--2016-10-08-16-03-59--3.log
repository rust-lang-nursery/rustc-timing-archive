commit bff06afbc5eb980cbfa2fa4f35e0c431828d3471
Merge: 4344f14 d17f0b0
Author: bors <bors@rust-lang.org>
Date:   Sat Oct 8 12:36:11 2016 -0700

    Auto merge of #37027 - alexcrichton:less-deps-in-bootstrap, r=japaric
    
    rustbuild: Optimize build times slightly
    
    As the entry point for building the Rust compiler, a good user experience hinges
    on this compiling quickly to get to the meat of the problem. To that end use
    `#[cfg]`-specific dependencies to avoid building Windows crates on Unix and drop
    the `regex` crate for now which was easily replacable with some string
    searching.
rustc: ./hyper.0.5.0
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling hyper v0.5.0 (file:///root/benchmarks/hyper.0.5.0)
time: 0.026; rss: 50MB	parsing
Lines of code:             9003
Pre-expansion node count:  44129
time: 0.000; rss: 50MB	recursion limit
time: 0.000; rss: 50MB	crate injection
time: 0.000; rss: 50MB	plugin loading
time: 0.000; rss: 50MB	plugin registration
time: 0.104; rss: 86MB	expansion
time: 0.000; rss: 86MB	maybe building test harness
time: 0.001; rss: 86MB	maybe creating a macro crate
Post-expansion node count: 101371
time: 0.000; rss: 86MB	checking for inline asm in case the target doesn't support it
time: 0.002; rss: 86MB	complete gated feature checking
time: 0.003; rss: 86MB	early lint checks
time: 0.001; rss: 86MB	AST validation
time: 0.017; rss: 90MB	name resolution
time: 0.009; rss: 95MB	lowering ast -> hir
time: 0.002; rss: 97MB	indexing hir
time: 0.001; rss: 97MB	attribute checking
time: 0.001; rss: 90MB	language item collection
time: 0.002; rss: 90MB	lifetime resolution
time: 0.000; rss: 90MB	looking for entry point
time: 0.000; rss: 90MB	looking for plugin registrar
time: 0.006; rss: 94MB	region resolution
time: 0.001; rss: 94MB	loop checking
time: 0.001; rss: 94MB	static item recursion checking
time: 0.039; rss: 94MB	compute_incremental_hashes_map
time: 0.000; rss: 94MB	load_dep_graph
time: 0.017; rss: 96MB	type collecting
time: 0.000; rss: 96MB	variance inference
time: 0.034; rss: 100MB	coherence checking
time: 0.049; rss: 101MB	wf checking
time: 0.021; rss: 101MB	item-types checking
time: 0.355; rss: 111MB	item-bodies checking
time: 0.000; rss: 111MB	drop-impl checking
time: 0.032; rss: 113MB	const checking
time: 0.006; rss: 113MB	privacy checking
time: 0.001; rss: 113MB	stability index
time: 0.004; rss: 113MB	intrinsic checking
time: 0.002; rss: 113MB	effect checking
time: 0.009; rss: 113MB	match checking
time: 0.005; rss: 113MB	liveness checking
time: 0.024; rss: 113MB	rvalue checking
time: 0.049; rss: 131MB	MIR dump
  time: 0.006; rss: 132MB	SimplifyCfg
  time: 0.011; rss: 132MB	QualifyAndPromoteConstants
  time: 0.013; rss: 132MB	TypeckMir
  time: 0.001; rss: 132MB	SimplifyBranches
  time: 0.003; rss: 132MB	SimplifyCfg
time: 0.035; rss: 132MB	MIR passes
time: 0.059; rss: 132MB	borrow checking
time: 0.003; rss: 132MB	reachability checking
time: 0.005; rss: 132MB	death checking
time: 0.006; rss: 132MB	stability checking
time: 0.000; rss: 132MB	unused lib feature checking
time: 0.039; rss: 132MB	lint checking
time: 0.000; rss: 132MB	resolving dependency formats
  time: 0.001; rss: 132MB	NoLandingPads
  time: 0.003; rss: 132MB	SimplifyCfg
  time: 0.009; rss: 134MB	EraseRegions
  time: 0.001; rss: 134MB	AddCallGuards
  time: 0.048; rss: 136MB	ElaborateDrops
  time: 0.001; rss: 136MB	NoLandingPads
  time: 0.005; rss: 136MB	SimplifyCfg
  time: 0.003; rss: 136MB	InstCombine
  time: 0.003; rss: 136MB	Deaggregator
  time: 0.000; rss: 136MB	CopyPropagation
  time: 0.001; rss: 136MB	AddCallGuards
  time: 0.000; rss: 136MB	PreTrans
time: 0.075; rss: 136MB	Prepare MIR codegen passes
  time: 0.043; rss: 139MB	write metadata
  time: 0.138; rss: 146MB	translation item collection
  time: 0.018; rss: 148MB	codegen unit partitioning
  time: 0.017; rss: 200MB	internalize symbols
time: 1.087; rss: 189MB	translation
time: 0.000; rss: 189MB	assert dep graph
time: 0.000; rss: 189MB	serialize dep graph
  time: 0.086; rss: 145MB	llvm function passes [0]
  time: 0.042; rss: 146MB	llvm module passes [0]
  time: 1.619; rss: 153MB	codegen passes [0]
  time: 0.001; rss: 153MB	codegen passes [0]
time: 1.887; rss: 153MB	LLVM passes
time: 0.000; rss: 153MB	serialize work products
time: 0.139; rss: 94MB	linking
done
