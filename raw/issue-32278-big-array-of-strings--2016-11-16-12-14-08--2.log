commit 9d4b6fa51d86ad6141679a5a157fcd9bca48064c
Merge: 478c0d1 06242ff
Author: bors <bors@rust-lang.org>
Date:   Wed Nov 16 08:25:38 2016 -0800

    Auto merge of #37545 - alexcrichton:crt-static, r=brson
    
    rustc: Implement #[link(cfg(..))] and crt-static
    
    This commit is an implementation of [RFC 1721] which adds a new target feature
    to the compiler, `crt-static`, which can be used to select how the C runtime for
    a target is linked. Most targets dynamically linke the C runtime by default with
    the notable exception of some of the musl targets.
    
    [RFC 1721]: https://github.com/rust-lang/rfcs/blob/master/text/1721-crt-static.md
    
    This commit first adds the new target-feature, `crt-static`. If enabled, then
    the `cfg(target_feature = "crt-static")` will be available. Targets like musl
    will have this enabled by default. This feature can be controlled through the
    standard target-feature interface, `-C target-feature=+crt-static` or
    `-C target-feature=-crt-static`.
    
    Next this adds an gated and unstable `#[link(cfg(..))]` feature to enable the
    `crt-static` semantics we want with libc. The exact behavior of this attribute
    is a little squishy, but it's intended to be a forever-unstable
    implementation detail of the liblibc crate.
    
    Specifically the `#[link(cfg(..))]` annotation means that the `#[link]`
    directive is only active in a compilation unit if that `cfg` value is satisfied.
    For example when compiling an rlib, these directives are just encoded and
    ignored for dylibs, and all staticlibs are continued to be put into the rlib as
    usual. When placing that rlib into a staticlib, executable, or dylib, however,
    the `cfg` is evaluated *as if it were defined in the final artifact* and the
    library is decided to be linked or not.
    
    Essentially, what'll happen is:
    
    * On MSVC with `-C target-feature=-crt-static`, the `msvcrt.lib` library will be
      linked to.
    * On MSVC with `-C target-feature=+crt-static`, the `libcmt.lib` library will be
      linked to.
    * On musl with `-C target-feature=-crt-static`, the object files in liblibc.rlib
      are removed and `-lc` is passed instead.
    * On musl with `-C target-feature=+crt-static`, the object files in liblibc.rlib
      are used and `-lc` is not passed.
    
    This commit does **not** include an update to the liblibc module to implement
    these changes. I plan to do that just after the 1.14.0 beta release is cut to
    ensure we get ample time to test this feature.
    
    cc #37406
rustc: ./issue-32278-big-array-of-strings
cargo rustc  -- -Ztime-passes -Zinput-stats
   Compiling issue-32278-big-array-of-strings v0.1.0 (file:///root/benchmarks/issue-32278-big-array-of-strings)
time: 0.099; rss: 60MB	parsing
Lines of code:             65577
Pre-expansion node count:  65552
time: 0.000; rss: 60MB	recursion limit
time: 0.000; rss: 60MB	crate injection
time: 0.000; rss: 60MB	plugin loading
time: 0.000; rss: 60MB	plugin registration
time: 0.022; rss: 82MB	expansion
time: 0.000; rss: 82MB	maybe building test harness
time: 0.000; rss: 82MB	maybe creating a macro crate
Post-expansion node count: 65565
time: 0.000; rss: 82MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 82MB	complete gated feature checking
time: 0.005; rss: 82MB	early lint checks
time: 0.000; rss: 86MB	AST validation
time: 0.003; rss: 86MB	name resolution
time: 0.005; rss: 95MB	lowering ast -> hir
time: 0.001; rss: 99MB	indexing hir
time: 0.000; rss: 99MB	attribute checking
time: 0.000; rss: 88MB	language item collection
time: 0.000; rss: 88MB	lifetime resolution
time: 0.000; rss: 88MB	looking for entry point
time: 0.000; rss: 88MB	looking for plugin registrar
time: 0.007; rss: 94MB	region resolution
time: 0.000; rss: 94MB	loop checking
time: 0.001; rss: 94MB	static item recursion checking
time: 0.020; rss: 94MB	compute_incremental_hashes_map
time: 0.000; rss: 94MB	load_dep_graph
time: 0.000; rss: 94MB	type collecting
time: 0.000; rss: 94MB	variance inference
time: 0.004; rss: 96MB	coherence checking
time: 0.000; rss: 96MB	wf checking
time: 0.512; rss: 104MB	item-types checking
time: 0.000; rss: 104MB	item-bodies checking
time: 0.000; rss: 104MB	drop-impl checking
time: 0.021; rss: 108MB	const checking
time: 0.001; rss: 108MB	privacy checking
time: 0.000; rss: 108MB	stability index
time: 0.000; rss: 108MB	intrinsic checking
time: 0.000; rss: 108MB	effect checking
time: 0.000; rss: 108MB	match checking
time: 0.000; rss: 108MB	liveness checking
time: 0.000; rss: 108MB	rvalue checking
time: 0.031; rss: 116MB	MIR dump
  time: 0.000; rss: 116MB	SimplifyCfg
  time: 0.001; rss: 116MB	QualifyAndPromoteConstants
  time: 0.001; rss: 116MB	TypeckMir
  time: 0.000; rss: 116MB	SimplifyBranches
  time: 0.000; rss: 116MB	SimplifyCfg
time: 0.001; rss: 116MB	MIR cleanup and validation
time: 0.001; rss: 116MB	borrow checking
time: 0.000; rss: 116MB	reachability checking
time: 0.000; rss: 116MB	death checking
time: 0.000; rss: 116MB	stability checking
time: 0.000; rss: 116MB	unused lib feature checking
time: 0.023; rss: 116MB	lint checking
time: 0.001; rss: 116MB	resolving dependency formats
  time: 0.000; rss: 116MB	NoLandingPads
  time: 0.000; rss: 116MB	SimplifyCfg
  time: 0.001; rss: 116MB	EraseRegions
  time: 0.000; rss: 116MB	AddCallGuards
  time: 0.000; rss: 116MB	ElaborateDrops
  time: 0.000; rss: 116MB	NoLandingPads
  time: 0.000; rss: 116MB	SimplifyCfg
  time: 0.000; rss: 116MB	InstCombine
  time: 0.000; rss: 116MB	Deaggregator
  time: 0.000; rss: 116MB	CopyPropagation
  time: 0.000; rss: 116MB	SimplifyLocals
  time: 0.000; rss: 116MB	AddCallGuards
  time: 0.000; rss: 116MB	PreTrans
time: 0.001; rss: 116MB	MIR optimisations
  time: 0.000; rss: 117MB	write metadata
  time: 0.001; rss: 117MB	translation item collection
  time: 0.000; rss: 117MB	codegen unit partitioning
  time: 0.001; rss: 128MB	internalize symbols
time: 0.057; rss: 128MB	translation
time: 0.000; rss: 128MB	assert dep graph
time: 0.000; rss: 128MB	serialize dep graph
  time: 0.009; rss: 86MB	llvm function passes [0]
  time: 0.000; rss: 86MB	llvm module passes [0]
  time: 0.192; rss: 85MB	codegen passes [0]
  time: 0.000; rss: 85MB	codegen passes [0]
time: 0.202; rss: 85MB	LLVM passes
time: 0.000; rss: 85MB	serialize work products
  time: 0.162; rss: 75MB	running linker
time: 0.163; rss: 75MB	linking
done
