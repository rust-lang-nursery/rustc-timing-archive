commit 6c9bb42ecc48ffb5a3c8b61e220b11adc3a46384
Merge: 7f2d2af a8535ce
Author: bors <bors@rust-lang.org>
Date:   Fri Dec 30 18:24:27 2016 +0000

    Auto merge of #38658 - alexcrichton:less-docs, r=nikomatsakis
    
    std: Don't build docs for misc facade crates
    
    Retain the same behavior as stable.
    
    Closes #38319
rustc 1.15.0-nightly (daf8c1dfc 2016-12-05)
-rwxr-xr-x 1 root root 9432 Dec  6 15:39 /usr/local/bin/rustc
rustc: ./regex-0.1.80@080-SparseSet
git apply 080-SparseSet.diff
find . -name "*.rs" | xargs touch
git diff
diff --git a/process.sh b/process.sh
index 4d62e73..a8f0ca6 100755
--- a/process.sh
+++ b/process.sh
@@ -9,7 +9,6 @@ source "$MYDIR/scripts/dirs.sh"
 
 export CARGO_RUSTC_OPTS="-Ztime-passes -Zinput-stats"
 export PATH=$RUSTC_DIR/bin:$PATH
-export BENCH_DIR=$MYDIR
 
 echo TIMES_DIR=$TIMES_DIR
 echo SCRIPTS_DIR=$SCRIPTS_DIR
diff --git a/regex-0.1.80/src/compile.rs b/regex-0.1.80/src/compile.rs
index 9db743f..629328a 100644
--- a/regex-0.1.80/src/compile.rs
+++ b/regex-0.1.80/src/compile.rs
@@ -54,6 +54,7 @@ impl Compiler {
     ///
     /// Various options can be set before calling `compile` on an expression.
     pub fn new() -> Self {
+        {}
         Compiler {
             insts: vec![],
             compiled: Program::new(),
@@ -137,6 +138,8 @@ impl Compiler {
     }
 
     fn compile_one(mut self, expr: &Expr) -> result::Result<Program, Error> {
+        {} // @030
+
         // If we're compiling a forward DFA and we aren't anchored, then
         // add a `.*?` before the first capture group.
         // Other matching engines handle this by baking the logic into the
diff --git a/regex-0.1.80/src/expand.rs b/regex-0.1.80/src/expand.rs
index 9bea703..b4ae1ab 100644
--- a/regex-0.1.80/src/expand.rs
+++ b/regex-0.1.80/src/expand.rs
@@ -5,6 +5,7 @@ use memchr::memchr;
 use bytes::Captures;
 
 pub fn expand(caps: &Captures, mut replacement: &[u8], dst: &mut Vec<u8>) {
+    { }
     while !replacement.is_empty() {
         match memchr(b'$', replacement) {
             None => break,
@@ -84,6 +85,7 @@ fn find_cap_ref(mut replacement: &[u8]) -> Option<CaptureRef> {
 }
 
 fn is_valid_cap_letter(b: &u8) -> bool {
+    { }
     match *b {
         b'0' ... b'9' | b'a' ... b'z' | b'A' ... b'Z' | b'_' => true,
         _ => false,
diff --git a/regex-0.1.80/src/freqs.rs b/regex-0.1.80/src/freqs.rs
index 92bafc1..6eb5799 100644
--- a/regex-0.1.80/src/freqs.rs
+++ b/regex-0.1.80/src/freqs.rs
@@ -12,7 +12,7 @@
 // edit directly
 
 pub const BYTE_FREQUENCIES: [u8; 256] = [
-     55, // '\x00'
+     54+1, // '\x00'
      52, // '\x01'
      51, // '\x02'
      50, // '\x03'
diff --git a/regex-0.1.80/src/sparse.rs b/regex-0.1.80/src/sparse.rs
index 34c05e7..ef5188e 100644
--- a/regex-0.1.80/src/sparse.rs
+++ b/regex-0.1.80/src/sparse.rs
@@ -16,13 +16,13 @@ pub struct SparseSet {
     /// Dense contains the instruction pointers in the order in which they
     /// were inserted. Accessing elements >= self.size is illegal.
     dense: Vec<usize>,
+    /// The number of elements in the set.
+    size: usize,
     /// Sparse maps instruction pointers to their location in dense.
     ///
     /// An instruction pointer is in the set if and only if
     /// sparse[ip] < size && ip == dense[sparse[ip]].
     sparse: Vec<usize>,
-    /// The number of elements in the set.
-    size: usize,
 }
 
 impl SparseSet {
RUSTFLAGS="-Z incremental=incr" cargo rustc  -- \
  -Ztime-passes -Zinput-stats -Z incremental-info
time: 0.025; rss: 64MB	parsing
Lines of code:             10694
Pre-expansion node count:  55410
time: 0.000; rss: 68MB	recursion limit
time: 0.000; rss: 68MB	crate injection
time: 0.000; rss: 68MB	plugin loading
time: 0.000; rss: 68MB	plugin registration
time: 0.045; rss: 99MB	expansion
time: 0.000; rss: 99MB	maybe building test harness
time: 0.001; rss: 99MB	maybe creating a macro crate
Post-expansion node count: 86883
time: 0.000; rss: 99MB	checking for inline asm in case the target doesn't support it
time: 0.001; rss: 99MB	complete gated feature checking
time: 0.003; rss: 99MB	early lint checks
time: 0.001; rss: 99MB	AST validation
time: 0.011; rss: 101MB	name resolution
time: 0.009; rss: 105MB	lowering ast -> hir
time: 0.002; rss: 107MB	indexing hir
time: 0.001; rss: 107MB	attribute checking
time: 0.001; rss: 102MB	language item collection
time: 0.002; rss: 102MB	lifetime resolution
time: 0.000; rss: 102MB	looking for entry point
time: 0.000; rss: 102MB	looking for plugin registrar
time: 0.006; rss: 106MB	region resolution
time: 0.001; rss: 106MB	loop checking
time: 0.000; rss: 106MB	static item recursion checking
time: 0.035; rss: 105MB	compute_incremental_hashes_map
incremental: session directory: 45 files hard-linked
incremental: session directory: 0 files copied
incremental: module WorkProduct(WorkProductId("regex-literals")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::sparse[0]::SparseSet[0]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-re_unicode")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::sparse[0]::SparseSet[0]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-error")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::sparse[0]::SparseSet[0]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-re_bytes")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::sparse[0]::SparseSet[0]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-re_plugin")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::sparse[0]::SparseSet[0]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-re_builder-bytes")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::sparse[0]::SparseSet[0]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-expand")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::sparse[0]::SparseSet[0]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-pikevm")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::sparse[0]::SparseSet[0]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-prog")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::sparse[0]::SparseSet[0]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-compile")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::sparse[0]::SparseSet[0]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-sparse")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::sparse[0]::SparseSet[0]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-utf8")) is dirty because Krate changed or was removed
incremental: module WorkProduct(WorkProductId("regex-re_set-unicode")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::sparse[0]::SparseSet[0]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-re_builder")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::sparse[0]::SparseSet[0]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-dfa")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::sparse[0]::SparseSet[0]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-re_builder-unicode")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::sparse[0]::SparseSet[0]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-simd_accel-teddy128")) is dirty because Krate changed or was removed
incremental: module WorkProduct(WorkProductId("regex-input")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::sparse[0]::SparseSet[0]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-re_set-bytes")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::sparse[0]::SparseSet[0]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-exec")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::sparse[0]::SparseSet[0]") changed or was removed
incremental: module WorkProduct(WorkProductId("regex-backtrack")) is dirty because Hir("regex/487ea9dfbd1eb8b5ec8d0b2a966660e2::sparse[0]::SparseSet[0]") changed or was removed
time: 0.023; rss: 106MB	load_dep_graph
time: 0.002; rss: 106MB	stability index
time: 0.002; rss: 106MB	stability checking
time: 0.013; rss: 109MB	type collecting
time: 0.001; rss: 109MB	variance inference
time: 0.001; rss: 109MB	impl wf inference
time: 0.015; rss: 115MB	coherence checking
time: 0.020; rss: 116MB	wf checking
time: 0.130; rss: 124MB	item-types checking
time: 0.302; rss: 134MB	item-bodies checking
time: 0.000; rss: 134MB	drop-impl checking
time: 0.044; rss: 162MB	const checking
time: 0.008; rss: 162MB	privacy checking
time: 0.002; rss: 162MB	intrinsic checking
time: 0.001; rss: 162MB	effect checking
time: 0.006; rss: 162MB	match checking
time: 0.004; rss: 163MB	liveness checking
time: 0.018; rss: 163MB	rvalue checking
time: 0.045; rss: 185MB	MIR dump
  time: 0.006; rss: 185MB	SimplifyCfg
  time: 0.010; rss: 185MB	QualifyAndPromoteConstants
  time: 0.014; rss: 185MB	TypeckMir
  time: 0.000; rss: 185MB	SimplifyBranches
  time: 0.003; rss: 185MB	SimplifyCfg
time: 0.034; rss: 185MB	MIR cleanup and validation
time: 0.048; rss: 185MB	borrow checking
time: 0.001; rss: 185MB	reachability checking
time: 0.005; rss: 185MB	death checking
time: 0.000; rss: 185MB	unused lib feature checking
time: 0.030; rss: 185MB	lint checking
time: 0.000; rss: 185MB	resolving dependency formats
  time: 0.000; rss: 185MB	NoLandingPads
  time: 0.003; rss: 185MB	SimplifyCfg
  time: 0.008; rss: 185MB	EraseRegions
  time: 0.001; rss: 185MB	AddCallGuards
  time: 0.018; rss: 188MB	ElaborateDrops
  time: 0.000; rss: 188MB	NoLandingPads
  time: 0.004; rss: 188MB	SimplifyCfg
  time: 0.003; rss: 188MB	InstCombine
  time: 0.002; rss: 188MB	Deaggregator
  time: 0.000; rss: 188MB	CopyPropagation
  time: 0.004; rss: 188MB	SimplifyLocals
  time: 0.001; rss: 188MB	AddCallGuards
  time: 0.000; rss: 188MB	PreTrans
time: 0.046; rss: 188MB	MIR optimisations
  time: 0.009; rss: 190MB	write metadata
  time: 0.087; rss: 194MB	translation item collection
  time: 0.015; rss: 196MB	codegen unit partitioning
  time: 0.013; rss: 323MB	internalize symbols
time: 1.859; rss: 323MB	translation
time: 0.000; rss: 323MB	assert dep graph
time: 0.111; rss: 333MB	serialize dep graph
incremental: re-using 0 out of 21 modules
time: 0.003; rss: 270MB	llvm function passes [1]
time: 0.000; rss: 270MB	llvm module passes [1]
time: 0.005; rss: 274MB	llvm function passes [0]
time: 0.005; rss: 274MB	llvm function passes [2]
time: 0.000; rss: 274MB	llvm module passes [2]
time: 0.005; rss: 274MB	llvm function passes [6]
time: 0.002; rss: 274MB	llvm module passes [0]
time: 0.001; rss: 274MB	llvm module passes [6]
time: 0.016; rss: 281MB	codegen passes [2]
time: 0.003; rss: 281MB	llvm function passes [2]
time: 0.012; rss: 281MB	llvm function passes [10]
time: 0.001; rss: 281MB	llvm module passes [2]
time: 0.028; rss: 281MB	llvm function passes [5]
time: 0.004; rss: 281MB	llvm module passes [10]
time: 0.021; rss: 281MB	codegen passes [6]
time: 0.034; rss: 283MB	llvm function passes [4]
time: 0.036; rss: 285MB	llvm function passes [8]
time: 0.004; rss: 287MB	llvm module passes [8]
time: 0.007; rss: 287MB	llvm function passes [9]
time: 0.002; rss: 289MB	llvm module passes [9]
time: 0.052; rss: 293MB	llvm function passes [7]
time: 0.003; rss: 298MB	llvm function passes [15]
time: 0.054; rss: 309MB	codegen passes [0]
time: 0.000; rss: 309MB	codegen passes [0]
time: 0.005; rss: 309MB	llvm function passes [18]
time: 0.055; rss: 311MB	codegen passes [1]
time: 0.015; rss: 311MB	llvm module passes [15]
time: 0.054; rss: 314MB	codegen passes [2]
time: 0.030; rss: 315MB	llvm module passes [18]
time: 0.060; rss: 317MB	llvm function passes [13]
time: 0.003; rss: 317MB	llvm module passes [13]
time: 0.086; rss: 321MB	llvm function passes [12]
time: 0.115; rss: 325MB	llvm function passes [6]
time: 0.155; rss: 327MB	llvm function passes [3]
time: 0.018; rss: 327MB	llvm module passes [6]
time: 0.135; rss: 327MB	llvm module passes [5]
time: 0.049; rss: 326MB	llvm module passes [12]
time: 0.150; rss: 326MB	llvm module passes [4]
time: 0.154; rss: 331MB	llvm function passes [11]
time: 0.164; rss: 336MB	llvm function passes [16]
time: 0.186; rss: 338MB	llvm function passes [14]
time: 0.050; rss: 340MB	llvm module passes [11]
time: 0.141; rss: 340MB	codegen passes [18]
time: 0.167; rss: 342MB	codegen passes [15]
time: 0.194; rss: 342MB	llvm function passes [17]
time: 0.215; rss: 347MB	codegen passes [9]
time: 0.033; rss: 346MB	llvm module passes [17]
time: 0.156; rss: 350MB	codegen passes [13]
time: 0.077; rss: 352MB	llvm module passes [16]
time: 0.247; rss: 356MB	codegen passes [8]
time: 0.230; rss: 356MB	codegen passes [10]
time: 0.200; rss: 358MB	codegen passes [12]
time: 0.528; rss: 370MB	llvm module passes [7]
time: 0.404; rss: 385MB	codegen passes [6]
time: 0.500; rss: 383MB	llvm module passes [14]
time: 0.530; rss: 393MB	codegen passes [4]
time: 0.706; rss: 392MB	llvm module passes [3]
time: 0.645; rss: 408MB	codegen passes [11]
time: 0.752; rss: 397MB	codegen passes [5]
time: 0.656; rss: 378MB	codegen passes [16]
time: 0.761; rss: 371MB	codegen passes [17]
time: 0.901; rss: 409MB	codegen passes [3]
time: 1.225; rss: 392MB	codegen passes [7]
time: 1.346; rss: 364MB	codegen passes [14]
time: 2.246; rss: 361MB	LLVM passes
time: 0.000; rss: 361MB	serialize work products
time: 0.211; rss: 177MB	linking
done
