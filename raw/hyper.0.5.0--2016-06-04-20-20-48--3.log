commit 12238b984abfacb2cccea176f862c94aa1231fb5
Merge: 382ab92 480d18c
Author: bors <bors@rust-lang.org>
Date:   Sat Jun 4 10:47:55 2016 -0700

    Auto merge of #33816 - nikomatsakis:projection-cache-2, r=arielb1
    
    Projection cache and better warnings for #32330
    
    This PR does three things:
    
    - it lays the groundwork for the more precise subtyping rules discussed in #32330, but does not enable them;
    - it issues warnings when the result of a leak-check or subtyping check relies on a late-bound region which will late become early-bound when #32330 is fixed;
    - it introduces a cache for projection in the inference context.
    
    I'm not 100% happy with the approach taken by the cache here, but it seems like a step in the right direction. It results in big wins on some test cases, but not as big as previous versions -- I think because it is caching the `Vec<Obligation>` (whereas before I just returned the normalized type with an empty vector). However, that change was needed to fix an ICE in @alexcrichton's future-rs module (I haven't fully tracked the cause of that ICE yet). Also, because trans/the collector use a fresh inference context for every call to `fulfill_obligation`, they don't profit nearly as much from this cache as they ought to.
    
    Still, here are the results from the future-rs `retry.rs`:
    
    ```
    06:26 <nmatsakis> time: 6.246; rss: 44MB  item-bodies checking
    06:26 <nmatsakis> time: 54.783; rss: 63MB   translation item collection
    06:26 <nmatsakis> time: 140.086; rss: 86MB    translation
    
    06:26 <nmatsakis> time: 0.361; rss: 46MB  item-bodies checking
    06:26 <nmatsakis> time: 5.299; rss: 63MB    translation item collection
    06:26 <nmatsakis> time: 12.140; rss: 86MB translation
    ```
    
    ~~Another example is the example from #31849. For that, I get 34s to run item-bodies without any cache. The version of the cache included here takes 2s to run item-bodies type-checking. An alternative version which doesn't track nested obligations takes 0.2s, but that version ICEs on @alexcrichton's future-rs (and may well be incorrect, I've not fully convinced myself of that). So, a definite win, but I think there's definitely room for further progress.~~
    
    Pushed a modified version which improves performance of the case from #31849:
    
    ```
    lunch-box. time rustc --stage0 ~/tmp/issue-31849.rs  -Z no-trans
    real    0m33.539s
    user    0m32.932s
    sys     0m0.570s
    lunch-box. time rustc --stage2 ~/tmp/issue-31849.rs  -Z no-trans
    real    0m0.195s
    user    0m0.154s
    sys     0m0.042s
    ```
    
    Some sort of cache is also needed for unblocking further work on lazy normalization, since that will lean even more heavily on the cache, and will also require cycle detection.
    
    r? @arielb1
rustc: ./hyper.0.5.0
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling hyper v0.5.0 (file:///root/benchmarks/hyper.0.5.0)
time: 0.037; rss: 53MB	parsing
Lines of code:             9154
Pre-expansion node count:  44646
time: 0.007; rss: 57MB	configuration 1
time: 0.000; rss: 57MB	recursion limit
time: 0.000; rss: 57MB	crate injection
time: 0.019; rss: 91MB	macro loading
time: 0.000; rss: 91MB	plugin loading
time: 0.000; rss: 91MB	plugin registration
time: 0.237; rss: 101MB	expansion
time: 0.000; rss: 101MB	gated configuration checking
time: 0.014; rss: 101MB	maybe building test harness
time: 0.011; rss: 101MB	prelude injection
time: 0.000; rss: 101MB	checking for inline asm in case the target doesn't support it
time: 0.002; rss: 101MB	complete gated feature checking
Post-expansion node count: 101566
time: 0.010; rss: 101MB	assigning node ids
time: 0.003; rss: 101MB	collecting defs
time: 0.011; rss: 114MB	external crate/lib resolution
time: 0.007; rss: 114MB	early lint checks
time: 0.001; rss: 114MB	AST validation
time: 0.022; rss: 118MB	name resolution
time: 0.012; rss: 124MB	lowering ast -> hir
time: 0.001; rss: 126MB	indexing hir
time: 0.001; rss: 126MB	attribute checking
time: 0.001; rss: 118MB	language item collection
time: 0.002; rss: 118MB	lifetime resolution
time: 0.000; rss: 118MB	looking for entry point
time: 0.000; rss: 118MB	looking for plugin registrar
time: 0.006; rss: 122MB	region resolution
time: 0.001; rss: 122MB	loop checking
time: 0.001; rss: 122MB	static item recursion checking
time: 0.000; rss: 122MB	load_dep_graph
time: 0.044; rss: 125MB	type collecting
time: 0.001; rss: 125MB	variance inference
time: 0.047; rss: 133MB	coherence checking
time: 0.113; rss: 134MB	wf checking
time: 0.039; rss: 134MB	item-types checking
time: 0.572; rss: 144MB	item-bodies checking
time: 0.000; rss: 144MB	drop-impl checking
time: 0.046; rss: 144MB	const checking
time: 0.006; rss: 144MB	privacy checking
time: 0.001; rss: 144MB	stability index
time: 0.006; rss: 144MB	intrinsic checking
time: 0.002; rss: 144MB	effect checking
time: 0.016; rss: 144MB	match checking
time: 0.005; rss: 144MB	liveness checking
time: 0.034; rss: 146MB	rvalue checking
time: 0.069; rss: 156MB	MIR dump
time: 0.045; rss: 156MB	MIR passes
time: 0.075; rss: 156MB	borrow checking
time: 0.003; rss: 156MB	reachability checking
time: 0.005; rss: 156MB	death checking
time: 0.006; rss: 156MB	stability checking
time: 0.000; rss: 156MB	unused lib feature checking
time: 0.052; rss: 156MB	lint checking
time: 0.000; rss: 156MB	resolving dependency formats
time: 0.012; rss: 158MB	Prepare MIR codegen passes
  time: 0.132; rss: 164MB	write metadata
  time: 0.251; rss: 168MB	translation item collection
  time: 0.007; rss: 168MB	codegen unit partitioning
time: 1.731; rss: 291MB	translation
time: 0.001; rss: 291MB	assert dep graph
time: 0.000; rss: 291MB	serialize dep graph
  time: 0.098; rss: 181MB	llvm function passes [0]
  time: 0.048; rss: 182MB	llvm module passes [0]
  time: 1.624; rss: 184MB	codegen passes [0]
  time: 0.001; rss: 133MB	codegen passes [0]
time: 1.972; rss: 131MB	LLVM passes
time: 0.175; rss: 128MB	linking
done
