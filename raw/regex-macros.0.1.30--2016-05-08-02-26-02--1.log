commit 1ec22171e6053c640293067418ea1901cb1c7df1
Merge: d91f8ab 3b0e27c
Author: bors <bors@rust-lang.org>
Date:   Sun May 8 00:31:40 2016 -0700

    Auto merge of #33130 - eddyb:mir-const, r=nikomatsakis
    
    Implement constant support in MIR.
    
    All of the intended features in `trans::consts` are now supported by `mir::constant`.
    The implementation is considered a temporary measure until `miri` replaces it.
    
    A `-Z orbit` bootstrap build will only translate LLVM IR from AST for `#[rustc_no_mir]` functions.
    
    Furthermore, almost all checks of constant expressions have been moved to MIR.
    In non-`const` functions, trees of temporaries are promoted, as per RFC 1414 (rvalue promotion).
    Promotion before MIR borrowck would allow reasoning about promoted values' lifetimes.
    
    The improved checking comes at the cost of four `[breaking-change]`s:
    * repeat counts must contain a constant expression, e.g.:
    `let arr = [0; { println!("foo"); 5 }];` used to be allowed (it behaved like `let arr = [0; 5];`)
    * dereference of a reference to a `static` cannot be used in another `static`, e.g.:
    `static X: [u8; 1] = [1]; static Y: u8 = (&X)[0];` was unintentionally allowed before
    * the type of a `static` *must* be `Sync`, irrespective of the initializer, e.g.
    `static FOO: *const T = &BAR;` worked as `&T` is `Sync`, but it shouldn't because `*const T` isn't
    * a `static` cannot wrap `UnsafeCell` around a type that *may* need drop, e.g.
    `static X: MakeSync<UnsafeCell<Option<String>>> = MakeSync(UnsafeCell::new(None));`
    was previously allowed based on the fact `None` alone doesn't need drop, but in `UnsafeCell`
    it can be later changed to `Some(String)` which *does* need dropping
    
    The drop restrictions are relaxed by RFC 1440 (#33156), which is implemented, but feature-gated.
    However, creating `UnsafeCell` from constants is unstable, so users can just enable the feature gate.
rustc: ./regex-macros.0.1.30
cd regex_macros && cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling regex_macros v0.1.17 (file:///root/benchmarks/regex-macros.0.1.30/regex_macros)
time: 0.006; rss: 44MB	parsing
Lines of code:             639
Pre-expansion node count:  2170
time: 0.001; rss: 44MB	configuration 1
time: 0.000; rss: 44MB	recursion limit
time: 0.000; rss: 44MB	crate injection
time: 0.003; rss: 48MB	macro loading
time: 0.000; rss: 48MB	plugin loading
time: 0.000; rss: 48MB	plugin registration
time: 0.038; rss: 55MB	expansion
time: 0.010; rss: 55MB	configuration 2
time: 0.000; rss: 55MB	gated configuration checking
time: 0.005; rss: 55MB	maybe building test harness
time: 0.005; rss: 55MB	prelude injection
time: 0.000; rss: 55MB	checking that all macro invocations are gone
time: 0.000; rss: 55MB	checking for inline asm in case the target doesn't support it
time: 0.001; rss: 55MB	complete gated feature checking
Post-expansion node count: 69741
time: 0.004; rss: 55MB	assigning node ids
time: 0.000; rss: 55MB	collecting defs
time: 0.106; rss: 92MB	external crate/lib resolution
time: 0.005; rss: 98MB	lowering ast -> hir
time: 0.001; rss: 99MB	indexing hir
time: 0.000; rss: 99MB	attribute checking
time: 0.003; rss: 99MB	early lint checks
time: 0.001; rss: 95MB	language item collection
time: 0.011; rss: 115MB	name resolution
time: 0.001; rss: 115MB	lifetime resolution
time: 0.000; rss: 115MB	looking for entry point
time: 0.000; rss: 115MB	looking for plugin registrar
time: 0.002; rss: 116MB	region resolution
time: 0.000; rss: 116MB	loop checking
time: 0.000; rss: 116MB	static item recursion checking
time: 0.000; rss: 116MB	load_dep_graph
time: 0.016; rss: 152MB	type collecting
time: 0.000; rss: 152MB	variance inference
time: 0.011; rss: 158MB	coherence checking
time: 0.007; rss: 160MB	wf checking
time: 0.001; rss: 160MB	item-types checking
time: 1.079; rss: 198MB	item-bodies checking
makefile:2: recipe for target 'all' failed
done
