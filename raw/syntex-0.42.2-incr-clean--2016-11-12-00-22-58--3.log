commit b33873f5411d4ad6a3bd5a4a18dffce8a960a316
Merge: 391939b f9cc166
Author: bors <bors@rust-lang.org>
Date:   Fri Nov 11 20:46:59 2016 -0800

    Auto merge of #37469 - meh:fix-term, r=alexcrichton
    
    Fix terminfo database search path
    
    This is more consistent with what every other program does, I happened to have `TERMINFO` set as `/usr/share/terminfo` but had the actual database in `~/.terminfo`, regardless of that every other terminfo/ncurses based software picked up the one in the home correctly.
    
    This just puts the path in `TERMINFO` at the top of the search paths, and moves the home checking to the default search paths section.
rustc: ./syntex-0.42.2-incr-clean
RUSTFLAGS="-Z incremental=incr" \
    cargo rustc -p syntex_syntax  -- \
    -Ztime-passes -Zinput-stats -Z incremental-info
   Compiling syntex_syntax v0.42.0
time: 0.092; rss: 71MB	parsing
Lines of code:             33687
Pre-expansion node count:  223115
time: 0.000; rss: 71MB	recursion limit
time: 0.000; rss: 71MB	crate injection
time: 0.000; rss: 71MB	plugin loading
time: 0.000; rss: 71MB	plugin registration
time: 0.233; rss: 144MB	expansion
time: 0.000; rss: 144MB	maybe building test harness
time: 0.006; rss: 144MB	maybe creating a macro crate
Post-expansion node count: 638863
time: 0.000; rss: 144MB	checking for inline asm in case the target doesn't support it
time: 0.013; rss: 144MB	complete gated feature checking
time: 0.023; rss: 144MB	early lint checks
time: 0.007; rss: 144MB	AST validation
time: 0.076; rss: 158MB	name resolution
time: 0.044; rss: 184MB	lowering ast -> hir
time: 0.008; rss: 194MB	indexing hir
time: 0.006; rss: 194MB	attribute checking
time: 0.005; rss: 150MB	language item collection
time: 0.010; rss: 150MB	lifetime resolution
time: 0.000; rss: 150MB	looking for entry point
time: 0.000; rss: 150MB	looking for plugin registrar
time: 0.041; rss: 171MB	region resolution
time: 0.005; rss: 171MB	loop checking
time: 0.005; rss: 171MB	static item recursion checking
time: 0.328; rss: 171MB	compute_incremental_hashes_map
time: 0.000; rss: 171MB	load_dep_graph
time: 0.040; rss: 170MB	type collecting
time: 0.001; rss: 170MB	variance inference
time: 0.018; rss: 174MB	coherence checking
time: 0.094; rss: 176MB	wf checking
time: 0.184; rss: 185MB	item-types checking
time: 3.322; rss: 236MB	item-bodies checking
time: 0.000; rss: 236MB	drop-impl checking
time: 0.215; rss: 256MB	const checking
time: 0.046; rss: 256MB	privacy checking
time: 0.006; rss: 256MB	stability index
time: 0.018; rss: 256MB	intrinsic checking
time: 0.014; rss: 256MB	effect checking
time: 0.046; rss: 256MB	match checking
time: 0.049; rss: 258MB	liveness checking
time: 0.182; rss: 258MB	rvalue checking
time: 0.381; rss: 437MB	MIR dump
  time: 0.056; rss: 439MB	SimplifyCfg
  time: 0.073; rss: 439MB	QualifyAndPromoteConstants
  time: 0.097; rss: 439MB	TypeckMir
  time: 0.004; rss: 439MB	SimplifyBranches
  time: 0.030; rss: 439MB	SimplifyCfg
time: 0.261; rss: 439MB	MIR cleanup and validation
time: 0.487; rss: 440MB	borrow checking
time: 0.025; rss: 440MB	reachability checking
time: 0.040; rss: 440MB	death checking
time: 0.031; rss: 444MB	stability checking
time: 0.000; rss: 444MB	unused lib feature checking
time: 0.197; rss: 444MB	lint checking
time: 0.000; rss: 444MB	resolving dependency formats
  time: 0.003; rss: 444MB	NoLandingPads
  time: 0.026; rss: 444MB	SimplifyCfg
  time: 0.060; rss: 452MB	EraseRegions
  time: 0.011; rss: 452MB	AddCallGuards
  time: 0.269; rss: 466MB	ElaborateDrops
  time: 0.003; rss: 466MB	NoLandingPads
  time: 0.051; rss: 466MB	SimplifyCfg
  time: 0.028; rss: 466MB	InstCombine
  time: 0.012; rss: 466MB	Deaggregator
  time: 0.002; rss: 466MB	CopyPropagation
  time: 0.034; rss: 467MB	SimplifyLocals
  time: 0.010; rss: 467MB	AddCallGuards
  time: 0.003; rss: 467MB	PreTrans
time: 0.514; rss: 467MB	MIR optimisations
  time: 0.060; rss: 477MB	write metadata
  time: 0.399; rss: 487MB	translation item collection
  time: 0.055; rss: 495MB	codegen unit partitioning
  time: 0.049; rss: 743MB	internalize symbols
time: 4.448; rss: 743MB	translation
time: 0.000; rss: 743MB	assert dep graph
time: 0.000; rss: 743MB	serialize dep graph
incremental: re-using 0 out of 1 modules
  time: 0.532; rss: 420MB	llvm function passes [0]
  time: 0.260; rss: 429MB	llvm module passes [0]
  time: 10.421; rss: 429MB	codegen passes [0]
  time: 0.000; rss: 429MB	codegen passes [0]
time: 11.996; rss: 429MB	LLVM passes
time: 0.000; rss: 429MB	serialize work products
time: 0.430; rss: 105MB	linking
done
