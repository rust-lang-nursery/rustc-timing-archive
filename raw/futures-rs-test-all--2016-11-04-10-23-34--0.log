commit d2bc30b03fa4bf5425d080710f681f36f58f1706
Merge: 49c36bf 99234bb
Author: bors <bors@rust-lang.org>
Date:   Fri Nov 4 03:38:18 2016 -0700

    Auto merge of #37037 - Mark-Simulacrum:stack-error, r=alexcrichton
    
    Add conversions from `io:ErrorKind` to `io::Error`
    
    Filing to help with discussion around the possibility of doing this.
    
    Current changes are clearly backwards incompatible, but I think adding a new function (with a bikeshed on naming) like `Error::new_str` should be possible (or some other way of specializing the string error message case) to fix #36658.
rustc: ./futures-rs-test-all
cargo rustc --test all -- -Ztime-passes -Zinput-stats
   Compiling log v0.3.6
   Compiling futures v0.1.0 (file:///root/benchmarks/futures-rs-test-all)
time: 0.003; rss: 43MB	parsing
Lines of code:             412
Pre-expansion node count:  5522
time: 0.000; rss: 43MB	recursion limit
time: 0.000; rss: 43MB	crate injection
time: 0.000; rss: 43MB	plugin loading
time: 0.000; rss: 43MB	plugin registration
time: 0.020; rss: 69MB	expansion
time: 0.001; rss: 69MB	maybe building test harness
time: 0.000; rss: 69MB	maybe creating a macro crate
Post-expansion node count: 10623
time: 0.000; rss: 69MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 69MB	complete gated feature checking
time: 0.000; rss: 69MB	early lint checks
time: 0.000; rss: 69MB	AST validation
time: 0.003; rss: 69MB	name resolution
time: 0.000; rss: 69MB	lowering ast -> hir
time: 0.000; rss: 69MB	indexing hir
time: 0.000; rss: 69MB	attribute checking
time: 0.000; rss: 69MB	language item collection
time: 0.000; rss: 69MB	lifetime resolution
time: 0.000; rss: 69MB	looking for entry point
time: 0.000; rss: 69MB	looking for plugin registrar
time: 0.001; rss: 69MB	region resolution
time: 0.000; rss: 69MB	loop checking
time: 0.000; rss: 69MB	static item recursion checking
time: 0.005; rss: 69MB	compute_incremental_hashes_map
time: 0.000; rss: 69MB	load_dep_graph
time: 0.004; rss: 69MB	type collecting
time: 0.000; rss: 69MB	variance inference
time: 0.003; rss: 69MB	coherence checking
time: 0.011; rss: 75MB	wf checking
time: 0.002; rss: 75MB	item-types checking
time: 0.127; rss: 81MB	item-bodies checking
time: 0.000; rss: 81MB	drop-impl checking
time: 0.004; rss: 79MB	const checking
time: 0.000; rss: 79MB	privacy checking
time: 0.000; rss: 79MB	stability index
time: 0.000; rss: 79MB	intrinsic checking
time: 0.000; rss: 79MB	effect checking
time: 0.001; rss: 79MB	match checking
time: 0.001; rss: 79MB	liveness checking
time: 0.003; rss: 79MB	rvalue checking
time: 0.007; rss: 81MB	MIR dump
  time: 0.001; rss: 81MB	SimplifyCfg
  time: 0.001; rss: 81MB	QualifyAndPromoteConstants
  time: 0.002; rss: 81MB	TypeckMir
  time: 0.000; rss: 81MB	SimplifyBranches
  time: 0.000; rss: 81MB	SimplifyCfg
time: 0.005; rss: 81MB	MIR cleanup and validation
time: 0.007; rss: 81MB	borrow checking
time: 0.000; rss: 81MB	reachability checking
time: 0.000; rss: 81MB	death checking
time: 0.001; rss: 81MB	stability checking
time: 0.000; rss: 81MB	unused lib feature checking
time: 0.003; rss: 81MB	lint checking
time: 0.001; rss: 81MB	resolving dependency formats
  time: 0.000; rss: 81MB	NoLandingPads
  time: 0.000; rss: 81MB	SimplifyCfg
  time: 0.001; rss: 81MB	EraseRegions
  time: 0.000; rss: 81MB	AddCallGuards
  time: 0.005; rss: 84MB	ElaborateDrops
  time: 0.000; rss: 84MB	NoLandingPads
  time: 0.001; rss: 84MB	SimplifyCfg
  time: 0.000; rss: 84MB	InstCombine
  time: 0.000; rss: 84MB	Deaggregator
  time: 0.000; rss: 84MB	CopyPropagation
  time: 0.000; rss: 84MB	SimplifyLocals
  time: 0.000; rss: 84MB	AddCallGuards
  time: 0.000; rss: 84MB	PreTrans
time: 0.009; rss: 84MB	MIR optimisations
  time: 0.000; rss: 84MB	write metadata
  time: 0.164; rss: 93MB	translation item collection
  time: 0.018; rss: 93MB	codegen unit partitioning
  time: 0.019; rss: 149MB	internalize symbols
time: 1.219; rss: 149MB	translation
time: 0.000; rss: 149MB	assert dep graph
time: 0.000; rss: 149MB	serialize dep graph
  time: 0.085; rss: 134MB	llvm function passes [0]
  time: 0.026; rss: 135MB	llvm module passes [0]
  time: 1.799; rss: 133MB	codegen passes [0]
  time: 0.000; rss: 133MB	codegen passes [0]
time: 1.912; rss: 133MB	LLVM passes
time: 0.000; rss: 133MB	serialize work products
  time: 0.155; rss: 82MB	running linker
time: 0.157; rss: 82MB	linking
done
