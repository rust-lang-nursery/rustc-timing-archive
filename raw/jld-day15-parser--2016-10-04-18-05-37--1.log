commit 1a4192804518199623fb88bf43bde69d6b0203cb
Merge: a5dac7a 4625642
Author: bors <bors@rust-lang.org>
Date:   Tue Oct 4 13:23:09 2016 -0700

    Auto merge of #36933 - alexcrichton:less-neon-again, r=eddyb
    
    rustc: Try again to disable NEON on armv7 linux
    
    This is a follow-up to #35814 which apparently didn't disable it hard enough. It
    looks like LLVM's default armv7 target enables NEON so we'd otherwise have to
    pass `-neon`, but we're already enabling armv7 with `+v7` supposedly, so let's
    try just telling LLVM that the armv7 target is arm and then enable features
    selectively.
    
    Closes #36913
rustc: ./jld-day15-parser
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling day15 v0.1.0 (file:///root/benchmarks/jld-day15-parser)
time: 0.000; rss: 42MB	parsing
Lines of code:             72
Pre-expansion node count:  654
time: 0.000; rss: 42MB	recursion limit
time: 0.000; rss: 42MB	crate injection
time: 0.000; rss: 42MB	plugin loading
time: 0.000; rss: 42MB	plugin registration
time: 0.016; rss: 65MB	expansion
time: 0.000; rss: 65MB	maybe building test harness
time: 0.000; rss: 65MB	maybe creating a macro crate
Post-expansion node count: 1155
time: 0.000; rss: 65MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 65MB	complete gated feature checking
time: 0.000; rss: 65MB	early lint checks
time: 0.000; rss: 65MB	AST validation
time: 0.003; rss: 65MB	name resolution
time: 0.000; rss: 65MB	lowering ast -> hir
time: 0.000; rss: 65MB	indexing hir
time: 0.000; rss: 65MB	attribute checking
time: 0.000; rss: 65MB	language item collection
time: 0.000; rss: 65MB	lifetime resolution
time: 0.000; rss: 65MB	looking for entry point
time: 0.000; rss: 65MB	looking for plugin registrar
time: 0.000; rss: 65MB	region resolution
time: 0.000; rss: 65MB	loop checking
time: 0.000; rss: 65MB	static item recursion checking
time: 0.000; rss: 65MB	compute_incremental_hashes_map
time: 0.000; rss: 65MB	load_dep_graph
time: 0.001; rss: 69MB	type collecting
time: 0.000; rss: 69MB	variance inference
time: 0.005; rss: 69MB	coherence checking
time: 0.005; rss: 69MB	wf checking
time: 0.000; rss: 69MB	item-types checking
time: 0.030; rss: 73MB	item-bodies checking
time: 0.000; rss: 73MB	drop-impl checking
time: 0.001; rss: 73MB	const checking
time: 0.000; rss: 73MB	privacy checking
time: 0.000; rss: 73MB	stability index
time: 0.000; rss: 73MB	intrinsic checking
time: 0.000; rss: 73MB	effect checking
time: 0.000; rss: 73MB	match checking
time: 0.000; rss: 73MB	liveness checking
time: 0.000; rss: 73MB	rvalue checking
time: 0.001; rss: 73MB	MIR dump
  time: 0.000; rss: 73MB	SimplifyCfg
  time: 0.000; rss: 73MB	QualifyAndPromoteConstants
  time: 0.000; rss: 73MB	TypeckMir
  time: 0.000; rss: 73MB	SimplifyBranches
  time: 0.000; rss: 73MB	SimplifyCfg
time: 0.001; rss: 73MB	MIR passes
time: 0.001; rss: 73MB	borrow checking
time: 0.000; rss: 73MB	reachability checking
time: 0.000; rss: 73MB	death checking
time: 0.000; rss: 73MB	stability checking
time: 0.000; rss: 73MB	unused lib feature checking
time: 0.003; rss: 73MB	lint checking
time: 0.001; rss: 73MB	resolving dependency formats
  time: 0.000; rss: 73MB	NoLandingPads
  time: 0.000; rss: 73MB	SimplifyCfg
  time: 0.000; rss: 73MB	EraseRegions
  time: 0.000; rss: 73MB	AddCallGuards
  time: 0.001; rss: 73MB	ElaborateDrops
  time: 0.000; rss: 73MB	NoLandingPads
  time: 0.000; rss: 73MB	SimplifyCfg
  time: 0.000; rss: 73MB	InstCombine
  time: 0.002; rss: 73MB	Deaggregator
  time: 0.000; rss: 73MB	CopyPropagation
  time: 0.000; rss: 73MB	AddCallGuards
  time: 0.000; rss: 73MB	PreTrans
time: 0.004; rss: 73MB	Prepare MIR codegen passes
  time: 0.000; rss: 73MB	write metadata
  time: 0.145; rss: 79MB	translation item collection
  time: 0.003; rss: 81MB	codegen unit partitioning
  time: 0.003; rss: 96MB	internalize symbols
time: 0.668; rss: 96MB	translation
time: 0.000; rss: 96MB	assert dep graph
time: 0.000; rss: 96MB	serialize dep graph
  time: 0.018; rss: 87MB	llvm function passes [0]
  time: 0.001; rss: 87MB	llvm module passes [0]
  time: 0.357; rss: 93MB	codegen passes [0]
  time: 0.000; rss: 93MB	codegen passes [0]
time: 0.377; rss: 92MB	LLVM passes
time: 0.000; rss: 92MB	serialize work products
  time: 0.081; rss: 83MB	running linker
time: 0.082; rss: 83MB	linking
done
