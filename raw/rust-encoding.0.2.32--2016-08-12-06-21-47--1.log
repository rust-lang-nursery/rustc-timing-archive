commit f55ac6944a88d4da62b30a16cc95893ca050c328
Merge: 68d9284 23f0494
Author: bors <bors@rust-lang.org>
Date:   Fri Aug 12 01:26:12 2016 -0700

    Auto merge of #35091 - eddyb:impl-trait, r=nikomatsakis
    
    Implement `impl Trait` in return type position by anonymization.
    
    This is the first step towards implementing `impl Trait` (cc #34511).
    `impl Trait` types are only allowed in function and inherent method return types, and capture all named lifetime and type parameters, being invariant over them.
    No lifetimes that are not explicitly named lifetime parameters are allowed to escape from the function body.
    The exposed traits are only those listed explicitly, i.e. `Foo` and `Clone` in `impl Foo + Clone`, with the exception of "auto traits" (like `Send` or `Sync`) which "leak" the actual contents.
    
    The implementation strategy is anonymization, i.e.:
    ```rust
    fn foo<T>(xs: Vec<T>) -> impl Iterator<Item=impl FnOnce() -> T> {
        xs.into_iter().map(|x| || x)
    }
    
    // is represented as:
    type A</*invariant over*/ T> where A<T>: Iterator<Item=B<T>>;
    type B</*invariant over*/ T> where B<T>: FnOnce() -> T;
    fn foo<T>(xs: Vec<T>) -> A<T> {
        xs.into_iter().map(|x| || x): $0 where $0: Iterator<Item=$1>, $1: FnOnce() -> T
    }
    ```
    `$0` and `$1` are resolved (to `iter::Map<vec::Iter<T>, closure>` and the closure, respectively) and assigned to `A` and `B`, after checking the body of `foo`. `A` and `B` are *never* resolved for user-facing type equality (typeck), but always for the low-level representation and specialization (trans).
    
    The "auto traits" exception is implemented by collecting bounds like `impl Trait: Send` that have failed for the obscure `impl Trait` type (i.e. `A` or `B` above), pretending they succeeded within the function and trying them again after type-checking the whole crate, by replacing `impl Trait` with the real type.
    
    While passing around values which have explicit lifetime parameters (of the function with `-> impl Trait`) in their type *should* work, regionck appears to assign inference variables in *way* too many cases, and never properly resolving them to either explicit lifetime parameters, or `'static`.
    We might not be able to handle lifetime parameters in `impl Trait` without changes to lifetime inference, but type parameters can have arbitrary lifetimes in them from the caller, so most type-generic usecases (or not generic at all) should not run into this problem.
    
    cc @rust-lang/lang
rustc: ./rust-encoding.0.2.32
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling encoding v0.2.32 (file:///root/benchmarks/rust-encoding.0.2.32)
time: 0.021; rss: 56MB	parsing
Lines of code:             6441
Pre-expansion node count:  30069
time: 0.002; rss: 56MB	configuration
time: 0.000; rss: 56MB	recursion limit
time: 0.000; rss: 56MB	crate injection
time: 0.000; rss: 56MB	plugin loading
time: 0.000; rss: 56MB	plugin registration
time: 0.043; rss: 92MB	expansion
time: 0.000; rss: 92MB	maybe building test harness
time: 0.002; rss: 92MB	assigning node ids
Post-expansion node count: 40757
time: 0.000; rss: 92MB	checking for inline asm in case the target doesn't support it
time: 0.001; rss: 92MB	complete gated feature checking
time: 0.001; rss: 92MB	collecting defs
time: 0.001; rss: 94MB	external crate/lib resolution
time: 0.001; rss: 94MB	early lint checks
time: 0.000; rss: 94MB	AST validation
time: 0.006; rss: 95MB	name resolution
time: 0.007; rss: 96MB	lowering ast -> hir
time: 0.001; rss: 97MB	indexing hir
time: 0.000; rss: 97MB	attribute checking
time: 0.000; rss: 96MB	language item collection
time: 0.001; rss: 96MB	lifetime resolution
time: 0.000; rss: 96MB	looking for entry point
time: 0.000; rss: 96MB	looking for plugin registrar
time: 0.005; rss: 97MB	region resolution
time: 0.000; rss: 97MB	loop checking
time: 0.000; rss: 97MB	static item recursion checking
time: 0.000; rss: 97MB	load_dep_graph
time: 0.008; rss: 99MB	type collecting
time: 0.000; rss: 99MB	variance inference
time: 0.022; rss: 102MB	coherence checking
time: 0.021; rss: 103MB	wf checking
time: 0.015; rss: 104MB	item-types checking
time: 0.220; rss: 111MB	item-bodies checking
time: 0.000; rss: 111MB	drop-impl checking
time: 0.013; rss: 111MB	const checking
time: 0.002; rss: 111MB	privacy checking
time: 0.000; rss: 111MB	stability index
time: 0.002; rss: 111MB	intrinsic checking
time: 0.000; rss: 111MB	effect checking
time: 0.008; rss: 111MB	match checking
time: 0.002; rss: 111MB	liveness checking
time: 0.008; rss: 111MB	rvalue checking
time: 0.031; rss: 119MB	MIR dump
time: 0.014; rss: 119MB	MIR passes
time: 0.023; rss: 119MB	borrow checking
time: 0.000; rss: 119MB	reachability checking
time: 0.003; rss: 119MB	death checking
time: 0.002; rss: 119MB	stability checking
time: 0.000; rss: 119MB	unused lib feature checking
time: 0.027; rss: 121MB	lint checking
time: 0.000; rss: 121MB	resolving dependency formats
time: 0.027; rss: 122MB	Prepare MIR codegen passes
  time: 0.061; rss: 124MB	write metadata
  time: 0.031; rss: 127MB	translation item collection
  time: 0.003; rss: 127MB	codegen unit partitioning
  time: 0.006; rss: 155MB	internalize symbols
time: 0.441; rss: 155MB	translation
time: 0.000; rss: 155MB	assert dep graph
time: 0.000; rss: 155MB	serialize dep graph
  time: 0.028; rss: 120MB	llvm function passes [0]
  time: 0.057; rss: 126MB	llvm module passes [0]
  time: 0.637; rss: 131MB	codegen passes [0]
  time: 0.001; rss: 131MB	codegen passes [0]
time: 0.775; rss: 131MB	LLVM passes
time: 0.000; rss: 131MB	serialize work products
time: 0.059; rss: 108MB	linking
done
