commit a888333ea6acad7e289fa3f0f9e6c1058aa2a011
Merge: 9b367d9 e3b414d
Author: bors <bors@rust-lang.org>
Date:   Sun Feb 14 21:24:45 2016 +0000

    Auto merge of #31460 - alexcrichton:supafast-rustc, r=brson
    
    Looking at some profiles of rustc recently, these seemed like two pretty easy wins we could get in terms of performance on the table.
rustc: ./piston-image-0.3.11
cargo rustc -- -Ztime-passes -Zinput-stats
    Updating registry `https://github.com/rust-lang/crates.io-index`
   Compiling byteorder v0.3.13
   Compiling libc v0.2.7
   Compiling glob v0.2.10
   Compiling color_quant v1.0.0
   Compiling rustc-serialize v0.3.18
   Compiling bitflags v0.4.0
   Compiling gcc v0.3.23
   Compiling lzw v0.8.0
   Compiling gif v0.5.1
   Compiling rand v0.3.14
   Compiling miniz-sys v0.1.7
   Compiling flate2 v0.2.13
   Compiling num v0.1.30
   Compiling enum_primitive v0.0.1
   Compiling png v0.3.1
   Compiling image v0.3.11 (file:///root/benchmarks/piston-image-0.3.11)
time: 0.062; rss: 42MB	parsing
Lines of code:             10676
Pre-expansion node count:  84646
time: 0.016; rss: 42MB	configuration 1
time: 0.000; rss: 42MB	recursion limit
time: 0.001; rss: 42MB	gated macro checking
time: 0.000; rss: 42MB	crate injection
time: 0.005; rss: 47MB	macro loading
time: 0.000; rss: 47MB	plugin loading
time: 0.000; rss: 47MB	plugin registration
time: 0.125; rss: 51MB	expansion
time: 0.003; rss: 51MB	complete gated feature checking 1
time: 0.027; rss: 51MB	configuration 2
time: 0.000; rss: 51MB	gated configuration checking
time: 0.013; rss: 51MB	maybe building test harness
time: 0.012; rss: 51MB	prelude injection
time: 0.002; rss: 51MB	checking that all macro invocations are gone
time: 0.000; rss: 51MB	checking for inline asm in case the target doesn't support it
time: 0.003; rss: 51MB	complete gated feature checking 2
time: 0.001; rss: 51MB	const fn bodies and arguments
Post-expansion node count: 144338
time: 0.012; rss: 51MB	assigning node ids
time: 0.030; rss: 63MB	lowering ast -> hir
time: 0.007; rss: 65MB	indexing hir
time: 0.000; rss: 65MB	attribute checking
time: 0.012; rss: 65MB	early lint checks
time: 0.003; rss: 57MB	external crate/lib resolution
time: 0.001; rss: 57MB	language item collection
time: 0.035; rss: 73MB	resolution
time: 0.002; rss: 73MB	lifetime resolution
time: 0.000; rss: 73MB	looking for entry point
time: 0.000; rss: 73MB	looking for plugin registrar
time: 0.017; rss: 78MB	region resolution
time: 0.001; rss: 78MB	loop checking
time: 0.001; rss: 78MB	static item recursion checking
time: 0.010; rss: 82MB	type collecting
time: 0.000; rss: 82MB	variance inference
time: 0.030; rss: 99MB	coherence checking
time: 0.151; rss: 103MB	wf checking
time: 0.050; rss: 105MB	item-types checking
time: 1.621; rss: 136MB	item-bodies checking
time: 0.000; rss: 136MB	drop-impl checking
time: 0.070; rss: 136MB	const checking
time: 0.012; rss: 136MB	privacy checking
time: 0.001; rss: 136MB	stability index
time: 0.010; rss: 136MB	intrinsic checking
time: 0.003; rss: 136MB	effect checking
time: 0.024; rss: 136MB	match checking
time: 0.111; rss: 144MB	MIR dump
time: 0.000; rss: 144MB	MIR passes
time: 0.011; rss: 145MB	liveness checking
time: 0.149; rss: 145MB	borrow checking
time: 0.074; rss: 145MB	rvalue checking
time: 0.003; rss: 145MB	reachability checking
time: 0.009; rss: 145MB	death checking
time: 0.010; rss: 146MB	stability checking
time: 0.000; rss: 146MB	unused lib feature checking
time: 0.084; rss: 146MB	lint checking
time: 0.000; rss: 146MB	resolving dependency formats
time: 0.011; rss: 147MB	erasing regions from MIR
  time: 1.278; rss: 162MB	translation item collection
  time: 0.232; rss: 247MB	write metadata
time: 3.837; rss: 247MB	translation
  time: 0.092; rss: 155MB	llvm function passes [0]
  time: 0.041; rss: 156MB	llvm module passes [0]
  time: 1.688; rss: 161MB	codegen passes [0]
  time: 0.001; rss: 113MB	codegen passes [0]
time: 2.019; rss: 110MB	LLVM passes
time: 0.150; rss: 110MB	linking
done
