commit f59fd4642534e80a61982ce3e10c147d97054212
Merge: ee8b257 b980f22
Author: bors <bors@rust-lang.org>
Date:   Fri Feb 26 13:38:46 2016 +0000

    Auto merge of #31846 - alexcrichton:better-disable-jemallc, r=brson
    
    The `--disable-jemalloc` configure option has a failure mode where it will
    create a distribution that is not compatible with other compilers. For example
    the nightly for Linux will assume that it will link to jemalloc by default as
    an allocator for executable crates. If, however, a standard library is used
    which was built via `./configure --disable-jemalloc` then this will fail
    because the jemalloc crate wasn't built.
    
    While this seems somewhat reasonable as a niche situation, the same mechanism is
    used for disabling jemalloc for platforms that just don't support it. For
    example if the rumprun target is compiled then the sibiling Linux target *also*
    doesn't have jemalloc. This is currently a problem for our cross-build nightlies
    which build many targets. If rumprun is also built, it will disable jemalloc for
    all targets, which isn't desired.
    
    This commit moves the platform-specific disabling of jemalloc as hardcoded logic
    into the makefiles that is scoped per-platform. This way when configuring
    multiple targets **without the `--disable-jemalloc` option specified** all
    targets will get jemalloc as they should.
rustc: ./regex.0.1.30
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling regex v0.1.30 (file:///root/benchmarks/regex.0.1.30)
time: 0.060; rss: 49MB	parsing
Lines of code:             8558
Pre-expansion node count:  58217
time: 0.011; rss: 49MB	configuration 1
time: 0.000; rss: 50MB	recursion limit
time: 0.001; rss: 50MB	gated macro checking
time: 0.000; rss: 50MB	crate injection
time: 0.003; rss: 53MB	macro loading
time: 0.000; rss: 53MB	plugin loading
time: 0.000; rss: 53MB	plugin registration
time: 0.062; rss: 55MB	expansion
time: 0.001; rss: 55MB	complete gated feature checking 1
time: 0.014; rss: 55MB	configuration 2
time: 0.000; rss: 55MB	gated configuration checking
time: 0.006; rss: 55MB	maybe building test harness
time: 0.006; rss: 56MB	prelude injection
time: 0.001; rss: 56MB	checking that all macro invocations are gone
time: 0.000; rss: 56MB	checking for inline asm in case the target doesn't support it
time: 0.001; rss: 56MB	complete gated feature checking 2
time: 0.001; rss: 56MB	const fn bodies and arguments
Post-expansion node count: 68727
time: 0.006; rss: 56MB	assigning node ids
time: 0.008; rss: 63MB	lowering ast -> hir
time: 0.002; rss: 66MB	indexing hir
time: 0.001; rss: 66MB	attribute checking
time: 0.007; rss: 66MB	early lint checks
time: 0.001; rss: 58MB	external crate/lib resolution
time: 0.001; rss: 58MB	language item collection
time: 0.008; rss: 66MB	resolution
time: 0.001; rss: 66MB	lifetime resolution
time: 0.000; rss: 66MB	looking for entry point
time: 0.000; rss: 66MB	looking for plugin registrar
time: 0.005; rss: 68MB	region resolution
time: 0.001; rss: 68MB	loop checking
time: 0.001; rss: 68MB	static item recursion checking
time: 0.003; rss: 71MB	type collecting
time: 0.000; rss: 71MB	variance inference
time: 0.022; rss: 87MB	coherence checking
time: 0.010; rss: 87MB	wf checking
time: 0.082; rss: 94MB	item-types checking
time: 0.185; rss: 107MB	item-bodies checking
time: 0.000; rss: 107MB	drop-impl checking
time: 0.022; rss: 107MB	const checking
time: 0.004; rss: 107MB	privacy checking
time: 0.000; rss: 107MB	stability index
time: 0.001; rss: 107MB	intrinsic checking
time: 0.001; rss: 107MB	effect checking
time: 0.003; rss: 107MB	match checking
time: 0.002; rss: 107MB	liveness checking
time: 0.007; rss: 107MB	rvalue checking
time: 0.019; rss: 108MB	MIR dump
time: 0.000; rss: 108MB	MIR passes
time: 0.019; rss: 110MB	borrow checking
time: 0.000; rss: 110MB	reachability checking
time: 0.003; rss: 110MB	death checking
time: 0.002; rss: 110MB	stability checking
time: 0.000; rss: 110MB	unused lib feature checking
time: 0.028; rss: 110MB	lint checking
time: 0.000; rss: 110MB	resolving dependency formats
time: 0.002; rss: 110MB	erasing regions from MIR
  time: 0.058; rss: 122MB	translation item collection
  time: 0.130; rss: 167MB	write metadata
time: 0.594; rss: 167MB	translation
  time: 0.037; rss: 117MB	llvm function passes [0]
  time: 0.019; rss: 118MB	llvm module passes [0]
  time: 0.623; rss: 122MB	codegen passes [0]
  time: 0.001; rss: 102MB	codegen passes [0]
time: 0.755; rss: 101MB	LLVM passes
time: 0.066; rss: 100MB	linking
done
