commit 8c604dc940c35e4ac36012aa85375250f2e6e07e
Merge: 915fa2a 7afb56f
Author: bors <bors@rust-lang.org>
Date:   Sat Feb 6 21:18:50 2016 +0000

    Auto merge of #30629 - brson:emscripten-upstream, r=alexcrichton
    
    Here's another go at adding emscripten support. This needs to wait again on new [libc definitions](https://github.com/rust-lang-nursery/libc/pull/122) landing. To get the libc definitions right I had to add support for i686-unknown-linux-musl, which are very similar to emscripten's, which are derived from arm/musl.
    
    This branch additionally removes the makefile dependency on the `EMSCRIPTEN` environment variable by not building the unused compiler-rt.
    
    Again, this is not sufficient for actually compiling to asmjs since it needs additional LLVM patches.
    
    r? @alexcrichton
rustc: ./jld-day15-parser
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling day15 v0.1.0 (file:///root/benchmarks/jld-day15-parser)
time: 0.001; rss: 34MB	parsing
Lines of code:             72
Pre-expansion node count:  673
time: 0.000; rss: 34MB	configuration 1
time: 0.000; rss: 34MB	recursion limit
time: 0.000; rss: 34MB	gated macro checking
time: 0.000; rss: 34MB	crate injection
time: 0.003; rss: 38MB	macro loading
time: 0.000; rss: 38MB	plugin loading
time: 0.000; rss: 38MB	plugin registration
time: 0.002; rss: 38MB	expansion
time: 0.000; rss: 38MB	complete gated feature checking 1
time: 0.000; rss: 38MB	configuration 2
time: 0.000; rss: 38MB	gated configuration checking
time: 0.000; rss: 38MB	maybe building test harness
time: 0.000; rss: 38MB	prelude injection
time: 0.000; rss: 38MB	checking that all macro invocations are gone
time: 0.000; rss: 38MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 38MB	complete gated feature checking 2
Post-expansion node count: 1176
time: 0.000; rss: 38MB	assigning node ids
time: 0.000; rss: 38MB	lowering ast -> hir
time: 0.000; rss: 38MB	indexing hir
time: 0.000; rss: 38MB	attribute checking
time: 0.000; rss: 38MB	early lint checks
time: 0.001; rss: 42MB	external crate/lib resolution
time: 0.000; rss: 42MB	language item collection
time: 0.001; rss: 46MB	resolution
time: 0.000; rss: 46MB	lifetime resolution
time: 0.000; rss: 46MB	looking for entry point
time: 0.000; rss: 46MB	looking for plugin registrar
time: 0.000; rss: 46MB	region resolution
time: 0.000; rss: 46MB	loop checking
time: 0.000; rss: 46MB	static item recursion checking
time: 0.001; rss: 50MB	type collecting
time: 0.000; rss: 50MB	variance inference
time: 0.005; rss: 54MB	coherence checking
time: 0.007; rss: 62MB	wf checking
time: 0.000; rss: 62MB	item-types checking
time: 1.135; rss: 103MB	item-bodies checking
time: 0.000; rss: 103MB	drop-impl checking
time: 0.001; rss: 103MB	const checking
time: 0.000; rss: 103MB	privacy checking
time: 0.000; rss: 103MB	stability index
time: 0.000; rss: 103MB	intrinsic checking
time: 0.000; rss: 103MB	effect checking
time: 0.000; rss: 103MB	match checking
time: 0.001; rss: 103MB	MIR dump
time: 0.000; rss: 103MB	liveness checking
time: 0.001; rss: 104MB	borrow checking
time: 0.002; rss: 104MB	rvalue checking
time: 0.000; rss: 104MB	reachability checking
time: 0.000; rss: 104MB	death checking
time: 0.000; rss: 104MB	stability checking
time: 0.000; rss: 104MB	unused lib feature checking
time: 0.003; rss: 105MB	lint checking
time: 0.001; rss: 105MB	resolving dependency formats
time: 0.000; rss: 105MB	erasing regions from MIR
  time: 0.000; rss: 156MB	write metadata
time: 16.593; rss: 156MB	translation
  time: 0.015; rss: 91MB	llvm function passes [0]
  time: 0.002; rss: 91MB	llvm module passes [0]
  time: 0.274; rss: 101MB	codegen passes [0]
  time: 0.000; rss: 99MB	codegen passes [0]
time: 0.302; rss: 99MB	LLVM passes
  time: 0.106; rss: 103MB	running linker
time: 0.106; rss: 103MB	linking
done
