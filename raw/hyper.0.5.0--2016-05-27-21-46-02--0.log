commit 8b012ed142f03c9082773f5091c58c82d47cae79
Merge: 7bddce6 53ab137
Author: bors <bors@rust-lang.org>
Date:   Fri May 27 17:46:14 2016 -0700

    Auto merge of #33706 - jseyfried:refactor_cfg, r=nrc
    
    Perform `cfg` attribute processing during macro expansion and fix bugs
    
    This PR refactors `cfg` attribute processing and fixes bugs. More specifically:
     - It merges gated feature checking for stmt/expr attributes, `cfg_attr` processing, and `cfg` processing into a single fold.
      - This allows feature gated `cfg` variables to be used in `cfg_attr` on unconfigured items. All other feature gated attributes can already be used on unconfigured items.
     - It performs `cfg` attribute processing during macro expansion instead of after expansion so that macro-expanded items are configured the same as ordinary items. In particular, to match their non-expanded counterparts,
      - macro-expanded unconfigured macro invocations are no longer expanded,
      - macro-expanded unconfigured macro definitions are no longer usable, and
      - feature gated `cfg` variables on macro-expanded macro definitions/invocations are now errors.
    
    This is a [breaking-change]. For example, the following would break:
    ```rust
    macro_rules! m {
        () => {
            #[cfg(attr)]
            macro_rules! foo { () => {} }
            foo!(); // This will be an error
    
            macro_rules! bar { () => { fn f() {} } }
            #[cfg(attr)] bar!(); // This will no longer be expanded ...
            fn g() { f(); } // ... so that `f` will be unresolved.
    
            #[cfg(target_thread_local)] // This will be a gated feature error
            macro_rules! baz { () => {} }
        }
    }
    
    m!();
    ```
    
    r? @nrc
rustc: ./hyper.0.5.0
cargo rustc -- -Ztime-passes -Zinput-stats
    Updating registry `https://github.com/rust-lang/crates.io-index`
   Compiling libc v0.2.11
   Compiling bitflags v0.3.3
   Compiling unicase v0.1.0
   Compiling winapi v0.2.7
   Compiling pkg-config v0.3.8
   Compiling matches v0.1.2
   Compiling rustc-serialize v0.3.19
   Compiling winapi-build v0.1.1
   Compiling traitobject v0.0.1
   Compiling gcc v0.3.28
   Compiling lazy_static v0.1.16
   Compiling httparse v0.1.6
   Compiling typeable v0.1.2
   Compiling kernel32-sys v0.2.2
   Compiling log v0.3.6
   Compiling libc v0.1.12
   Compiling mime v0.0.11
   Compiling num_cpus v0.2.12
   Compiling rand v0.3.14
   Compiling time v0.1.35
   Compiling openssl-sys v0.6.7
   Compiling openssl v0.6.7
   Compiling uuid v0.1.18
   Compiling url v0.2.38
   Compiling cookie v0.1.21
   Compiling hyper v0.5.0 (file:///root/benchmarks/hyper.0.5.0)
time: 0.035; rss: 53MB	parsing
Lines of code:             9154
Pre-expansion node count:  45217
time: 0.007; rss: 57MB	configuration 1
time: 0.000; rss: 57MB	recursion limit
time: 0.000; rss: 57MB	crate injection
time: 0.019; rss: 91MB	macro loading
time: 0.000; rss: 91MB	plugin loading
time: 0.000; rss: 91MB	plugin registration
time: 0.240; rss: 101MB	expansion
time: 0.000; rss: 101MB	gated configuration checking
time: 0.014; rss: 101MB	maybe building test harness
time: 0.011; rss: 101MB	prelude injection
time: 0.001; rss: 101MB	checking that all macro invocations are gone
time: 0.000; rss: 101MB	checking for inline asm in case the target doesn't support it
time: 0.002; rss: 101MB	complete gated feature checking
Post-expansion node count: 102048
time: 0.010; rss: 101MB	assigning node ids
time: 0.003; rss: 101MB	collecting defs
time: 0.011; rss: 114MB	external crate/lib resolution
time: 0.007; rss: 114MB	early lint checks
time: 0.022; rss: 117MB	name resolution
time: 0.012; rss: 124MB	lowering ast -> hir
time: 0.001; rss: 126MB	indexing hir
time: 0.001; rss: 126MB	attribute checking
time: 0.001; rss: 117MB	language item collection
time: 0.002; rss: 117MB	lifetime resolution
time: 0.000; rss: 117MB	looking for entry point
time: 0.000; rss: 117MB	looking for plugin registrar
time: 0.006; rss: 121MB	region resolution
time: 0.001; rss: 121MB	loop checking
time: 0.001; rss: 121MB	static item recursion checking
time: 0.000; rss: 121MB	load_dep_graph
time: 0.019; rss: 125MB	type collecting
time: 0.000; rss: 125MB	variance inference
time: 0.046; rss: 131MB	coherence checking
time: 0.105; rss: 132MB	wf checking
time: 0.038; rss: 132MB	item-types checking
time: 0.553; rss: 142MB	item-bodies checking
time: 0.000; rss: 142MB	drop-impl checking
time: 0.045; rss: 145MB	const checking
time: 0.007; rss: 145MB	privacy checking
time: 0.001; rss: 145MB	stability index
time: 0.006; rss: 145MB	intrinsic checking
time: 0.002; rss: 145MB	effect checking
time: 0.016; rss: 145MB	match checking
time: 0.005; rss: 145MB	liveness checking
time: 0.032; rss: 145MB	rvalue checking
time: 0.070; rss: 154MB	MIR dump
time: 0.043; rss: 154MB	MIR passes
time: 0.076; rss: 154MB	borrow checking
time: 0.003; rss: 154MB	reachability checking
time: 0.006; rss: 154MB	death checking
time: 0.006; rss: 154MB	stability checking
time: 0.000; rss: 154MB	unused lib feature checking
time: 0.052; rss: 154MB	lint checking
time: 0.000; rss: 154MB	resolving dependency formats
time: 0.012; rss: 156MB	Prepare MIR codegen passes
  time: 0.131; rss: 160MB	write metadata
  time: 0.300; rss: 168MB	translation item collection
  time: 0.007; rss: 168MB	codegen unit partitioning
time: 1.802; rss: 289MB	translation
time: 0.001; rss: 289MB	assert dep graph
time: 0.000; rss: 289MB	serialize dep graph
  time: 0.098; rss: 181MB	llvm function passes [0]
  time: 0.049; rss: 182MB	llvm module passes [0]
  time: 1.610; rss: 183MB	codegen passes [0]
  time: 0.001; rss: 133MB	codegen passes [0]
time: 1.956; rss: 132MB	LLVM passes
time: 0.174; rss: 128MB	linking
done
