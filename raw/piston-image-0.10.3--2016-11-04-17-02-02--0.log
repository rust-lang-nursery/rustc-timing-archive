commit 81601cd3a393d1cb8ca82eb1b2270d24c5d7724f
Merge: ccfc38f f0e6b90
Author: bors <bors@rust-lang.org>
Date:   Fri Nov 4 10:40:30 2016 -0700

    Auto merge of #37306 - bluss:trusted-len, r=alexcrichton
    
    Add Iterator trait TrustedLen to enable better FromIterator / Extend
    
    This trait attempts to improve FromIterator / Extend code by enabling it to trust the iterator to produce an exact number of elements, which means that reallocation needs to happen only once and is moved out of the loop.
    
    `TrustedLen` differs from `ExactSizeIterator` in that it attempts to include _more_ iterators by allowing for the case that the iterator's len does not fit in `usize`. Consumers must check for this case (for example they could panic, since they can't allocate a collection of that size).
    
    For example, chain can be TrustedLen and all numerical ranges can be TrustedLen. All they need to do is to report an exact size if it fits in `usize`, and `None` as the upper bound otherwise.
    
    The trait describes its contract like this:
    
    ```
    An iterator that reports an accurate length using size_hint.
    
    The iterator reports a size hint where it is either exact
    (lower bound is equal to upper bound), or the upper bound is `None`.
    The upper bound must only be `None` if the actual iterator length is
    larger than `usize::MAX`.
    
    The iterator must produce exactly the number of elements it reported.
    
    This trait must only be implemented when the contract is upheld.
    Consumers of this trait must inspect `.size_hint()`â€™s upper bound.
    ```
    
    Fixes #37232
rustc: ./piston-image-0.10.3
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling libc v0.2.16
   Compiling color_quant v1.0.0
   Compiling inflate v0.1.1
   Compiling lzw v0.10.0
   Compiling bitflags v0.7.0
   Compiling scoped_threadpool v0.1.7
   Compiling num-traits v0.1.35
   Compiling glob v0.2.11
   Compiling gcc v0.3.35
   Compiling rustc-serialize v0.3.19
   Compiling byteorder v0.5.3
   Compiling num_cpus v0.2.13
   Compiling rand v0.3.14
   Compiling num-integer v0.1.32
   Compiling gif v0.9.0
   Compiling num-iter v0.1.32
   Compiling num v0.1.35
   Compiling miniz-sys v0.1.7
   Compiling enum_primitive v0.1.0
   Compiling flate2 v0.2.14
   Compiling deque v0.3.1
   Compiling rayon v0.4.2
   Compiling jpeg-decoder v0.1.6
   Compiling png v0.5.2
   Compiling num-bigint v0.1.35
   Compiling num-rational v0.1.35
   Compiling image v0.10.3 (file:///root/benchmarks/piston-image-0.10.3)
time: 0.045; rss: 57MB	parsing
Lines of code:             12000
Pre-expansion node count:  90272
time: 0.000; rss: 57MB	recursion limit
time: 0.000; rss: 57MB	crate injection
time: 0.000; rss: 57MB	plugin loading
time: 0.000; rss: 57MB	plugin registration
time: 0.075; rss: 95MB	expansion
time: 0.000; rss: 95MB	maybe building test harness
time: 0.002; rss: 95MB	maybe creating a macro crate
Post-expansion node count: 148999
time: 0.000; rss: 95MB	checking for inline asm in case the target doesn't support it
time: 0.003; rss: 95MB	complete gated feature checking
time: 0.006; rss: 95MB	early lint checks
time: 0.002; rss: 95MB	AST validation
time: 0.021; rss: 99MB	name resolution
time: 0.012; rss: 105MB	lowering ast -> hir
time: 0.002; rss: 110MB	indexing hir
time: 0.002; rss: 110MB	attribute checking
time: 0.001; rss: 98MB	language item collection
time: 0.002; rss: 98MB	lifetime resolution
time: 0.000; rss: 98MB	looking for entry point
time: 0.000; rss: 98MB	looking for plugin registrar
time: 0.010; rss: 104MB	region resolution
time: 0.001; rss: 104MB	loop checking
time: 0.001; rss: 104MB	static item recursion checking
time: 0.076; rss: 103MB	compute_incremental_hashes_map
time: 0.000; rss: 103MB	load_dep_graph
time: 0.016; rss: 105MB	type collecting
time: 0.000; rss: 105MB	variance inference
time: 0.026; rss: 109MB	coherence checking
time: 0.075; rss: 110MB	wf checking
time: 0.145; rss: 117MB	item-types checking
time: 0.805; rss: 130MB	item-bodies checking
time: 0.000; rss: 130MB	drop-impl checking
time: 0.052; rss: 130MB	const checking
time: 0.009; rss: 130MB	privacy checking
time: 0.001; rss: 130MB	stability index
time: 0.007; rss: 130MB	intrinsic checking
time: 0.003; rss: 130MB	effect checking
time: 0.014; rss: 130MB	match checking
time: 0.010; rss: 130MB	liveness checking
time: 0.044; rss: 130MB	rvalue checking
time: 0.098; rss: 173MB	MIR dump
  time: 0.011; rss: 173MB	SimplifyCfg
  time: 0.021; rss: 173MB	QualifyAndPromoteConstants
  time: 0.023; rss: 173MB	TypeckMir
  time: 0.001; rss: 173MB	SimplifyBranches
  time: 0.004; rss: 173MB	SimplifyCfg
time: 0.060; rss: 173MB	MIR cleanup and validation
time: 0.115; rss: 173MB	borrow checking
time: 0.004; rss: 173MB	reachability checking
time: 0.008; rss: 173MB	death checking
time: 0.009; rss: 176MB	stability checking
time: 0.000; rss: 176MB	unused lib feature checking
time: 0.069; rss: 176MB	lint checking
time: 0.000; rss: 176MB	resolving dependency formats
  time: 0.001; rss: 176MB	NoLandingPads
  time: 0.005; rss: 176MB	SimplifyCfg
  time: 0.012; rss: 176MB	EraseRegions
  time: 0.002; rss: 176MB	AddCallGuards
  time: 0.044; rss: 180MB	ElaborateDrops
  time: 0.001; rss: 180MB	NoLandingPads
  time: 0.009; rss: 180MB	SimplifyCfg
  time: 0.006; rss: 180MB	InstCombine
  time: 0.002; rss: 180MB	Deaggregator
  time: 0.000; rss: 180MB	CopyPropagation
  time: 0.007; rss: 180MB	SimplifyLocals
  time: 0.002; rss: 180MB	AddCallGuards
  time: 0.000; rss: 180MB	PreTrans
time: 0.090; rss: 180MB	MIR optimisations
  time: 0.016; rss: 182MB	write metadata
  time: 0.449; rss: 194MB	translation item collection
  time: 0.025; rss: 196MB	codegen unit partitioning
  time: 0.021; rss: 319MB	internalize symbols
time: 2.620; rss: 319MB	translation
time: 0.000; rss: 319MB	assert dep graph
time: 0.000; rss: 319MB	serialize dep graph
  time: 0.213; rss: 227MB	llvm function passes [0]
  time: 0.082; rss: 229MB	llvm module passes [0]
  time: 4.231; rss: 230MB	codegen passes [0]
  time: 0.000; rss: 230MB	codegen passes [0]
time: 4.829; rss: 230MB	LLVM passes
time: 0.000; rss: 230MB	serialize work products
time: 0.143; rss: 99MB	linking
done
