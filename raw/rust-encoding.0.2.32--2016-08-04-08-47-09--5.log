commit e804a3cf256106c097d44f6e0212cd183122da07
Merge: 271d048 06acf16
Author: bors <bors@rust-lang.org>
Date:   Thu Aug 4 03:01:37 2016 -0700

    Auto merge of #35168 - scottcarr:deaggregation, r=nikomatsakis
    
    [MIR] Deaggregate structs to enable further optimizations
    
    Currently, we generate MIR like:
    
    ```
    tmp0 = ...;
    tmp1 = ...;
    tmp3 = Foo { a: ..., b: ... };
    ```
    
    This PR implements "deaggregation," i.e.:
    
    ```
    tmp3.0 = ...
    tmp3.1 = ...
    ```
    
    Currently, the code only deaggregates structs, not enums.  My understanding is that we do not have MIR to set the discriminant of an enum.
rustc: ./rust-encoding.0.2.32
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling encoding v0.2.32 (file:///root/benchmarks/rust-encoding.0.2.32)
time: 0.025; rss: 51MB	parsing
Lines of code:             6441
Pre-expansion node count:  30069
time: 0.003; rss: 55MB	configuration
time: 0.000; rss: 55MB	recursion limit
time: 0.000; rss: 55MB	crate injection
time: 0.000; rss: 55MB	plugin loading
time: 0.000; rss: 55MB	plugin registration
time: 0.048; rss: 91MB	expansion
time: 0.000; rss: 91MB	maybe building test harness
time: 0.003; rss: 91MB	assigning node ids
Post-expansion node count: 40757
time: 0.000; rss: 91MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 91MB	complete gated feature checking
time: 0.001; rss: 91MB	collecting defs
time: 0.001; rss: 91MB	external crate/lib resolution
time: 0.002; rss: 91MB	early lint checks
time: 0.000; rss: 91MB	AST validation
time: 0.005; rss: 94MB	name resolution
time: 0.004; rss: 96MB	lowering ast -> hir
time: 0.001; rss: 96MB	indexing hir
time: 0.000; rss: 96MB	attribute checking
time: 0.000; rss: 95MB	language item collection
time: 0.001; rss: 95MB	lifetime resolution
time: 0.000; rss: 95MB	looking for entry point
time: 0.000; rss: 95MB	looking for plugin registrar
time: 0.002; rss: 97MB	region resolution
time: 0.000; rss: 97MB	loop checking
time: 0.000; rss: 97MB	static item recursion checking
time: 0.000; rss: 97MB	load_dep_graph
time: 0.012; rss: 99MB	type collecting
time: 0.000; rss: 99MB	variance inference
time: 0.022; rss: 100MB	coherence checking
time: 0.024; rss: 103MB	wf checking
time: 0.015; rss: 103MB	item-types checking
time: 0.224; rss: 112MB	item-bodies checking
time: 0.000; rss: 112MB	drop-impl checking
time: 0.013; rss: 112MB	const checking
time: 0.002; rss: 112MB	privacy checking
time: 0.000; rss: 112MB	stability index
time: 0.002; rss: 112MB	intrinsic checking
time: 0.000; rss: 112MB	effect checking
time: 0.008; rss: 112MB	match checking
time: 0.002; rss: 112MB	liveness checking
time: 0.008; rss: 112MB	rvalue checking
time: 0.024; rss: 118MB	MIR dump
time: 0.016; rss: 118MB	MIR passes
time: 0.025; rss: 118MB	borrow checking
time: 0.000; rss: 118MB	reachability checking
time: 0.002; rss: 118MB	death checking
time: 0.002; rss: 118MB	stability checking
time: 0.000; rss: 118MB	unused lib feature checking
time: 0.026; rss: 120MB	lint checking
time: 0.000; rss: 120MB	resolving dependency formats
time: 0.028; rss: 121MB	Prepare MIR codegen passes
  time: 0.058; rss: 125MB	write metadata
  time: 0.033; rss: 127MB	translation item collection
  time: 0.003; rss: 127MB	codegen unit partitioning
  time: 0.006; rss: 154MB	internalize symbols
time: 0.370; rss: 154MB	translation
time: 0.000; rss: 154MB	assert dep graph
time: 0.000; rss: 154MB	serialize dep graph
  time: 0.025; rss: 118MB	llvm function passes [0]
  time: 0.050; rss: 121MB	llvm module passes [0]
  time: 0.579; rss: 127MB	codegen passes [0]
  time: 0.001; rss: 126MB	codegen passes [0]
time: 0.698; rss: 126MB	LLVM passes
time: 0.053; rss: 109MB	linking
done
