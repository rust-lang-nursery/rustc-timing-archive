commit d88d06448e1ad928d22cf0a511f1edae91b646d5
Merge: c19cb9c 6fe7786
Author: bors <bors@rust-lang.org>
Date:   Wed Nov 16 01:17:53 2016 -0800

    Auto merge of #37773 - ollie27:rustdoc_inline_glob, r=brson
    
    rustdoc: Fix some local inlining issues
    
    * Only inline public items when inlining glob imports.
    * Never inline while in a private module or a child of a private module.
    * Never inline impls. This allowed the removal of a workaround in the
    rendering code.
rustc: ./hyper.0.5.0
cargo rustc  -- -Ztime-passes -Zinput-stats
   Compiling hyper v0.5.0 (file:///root/benchmarks/hyper.0.5.0)
time: 0.023; rss: 48MB	parsing
Lines of code:             9003
Pre-expansion node count:  44055
time: 0.000; rss: 48MB	recursion limit
time: 0.000; rss: 48MB	crate injection
time: 0.000; rss: 48MB	plugin loading
time: 0.000; rss: 48MB	plugin registration
time: 0.073; rss: 87MB	expansion
time: 0.000; rss: 87MB	maybe building test harness
time: 0.001; rss: 87MB	maybe creating a macro crate
Post-expansion node count: 101769
time: 0.000; rss: 87MB	checking for inline asm in case the target doesn't support it
time: 0.002; rss: 87MB	complete gated feature checking
time: 0.003; rss: 87MB	early lint checks
time: 0.001; rss: 87MB	AST validation
time: 0.015; rss: 91MB	name resolution
time: 0.007; rss: 95MB	lowering ast -> hir
time: 0.001; rss: 95MB	indexing hir
time: 0.001; rss: 95MB	attribute checking
time: 0.001; rss: 91MB	language item collection
time: 0.001; rss: 91MB	lifetime resolution
time: 0.000; rss: 91MB	looking for entry point
time: 0.000; rss: 91MB	looking for plugin registrar
time: 0.005; rss: 94MB	region resolution
time: 0.001; rss: 94MB	loop checking
time: 0.000; rss: 94MB	static item recursion checking
time: 0.036; rss: 95MB	compute_incremental_hashes_map
time: 0.000; rss: 95MB	load_dep_graph
time: 0.015; rss: 97MB	type collecting
time: 0.000; rss: 97MB	variance inference
time: 0.014; rss: 98MB	coherence checking
time: 0.040; rss: 100MB	wf checking
time: 0.024; rss: 101MB	item-types checking
time: 0.289; rss: 110MB	item-bodies checking
time: 0.000; rss: 110MB	drop-impl checking
time: 0.030; rss: 112MB	const checking
time: 0.005; rss: 112MB	privacy checking
time: 0.001; rss: 112MB	stability index
time: 0.003; rss: 112MB	intrinsic checking
time: 0.001; rss: 112MB	effect checking
time: 0.007; rss: 112MB	match checking
time: 0.004; rss: 113MB	liveness checking
time: 0.020; rss: 113MB	rvalue checking
time: 0.046; rss: 132MB	MIR dump
  time: 0.007; rss: 132MB	SimplifyCfg
  time: 0.011; rss: 134MB	QualifyAndPromoteConstants
  time: 0.012; rss: 134MB	TypeckMir
  time: 0.001; rss: 134MB	SimplifyBranches
  time: 0.003; rss: 134MB	SimplifyCfg
time: 0.033; rss: 134MB	MIR cleanup and validation
time: 0.051; rss: 134MB	borrow checking
time: 0.003; rss: 134MB	reachability checking
time: 0.004; rss: 134MB	death checking
time: 0.004; rss: 134MB	stability checking
time: 0.000; rss: 134MB	unused lib feature checking
time: 0.038; rss: 134MB	lint checking
time: 0.000; rss: 134MB	resolving dependency formats
  time: 0.001; rss: 134MB	NoLandingPads
  time: 0.003; rss: 134MB	SimplifyCfg
  time: 0.007; rss: 134MB	EraseRegions
  time: 0.001; rss: 134MB	AddCallGuards
  time: 0.021; rss: 137MB	ElaborateDrops
  time: 0.000; rss: 137MB	NoLandingPads
  time: 0.005; rss: 137MB	SimplifyCfg
  time: 0.003; rss: 137MB	InstCombine
  time: 0.003; rss: 137MB	Deaggregator
  time: 0.000; rss: 137MB	CopyPropagation
  time: 0.004; rss: 137MB	SimplifyLocals
  time: 0.001; rss: 137MB	AddCallGuards
  time: 0.000; rss: 137MB	PreTrans
time: 0.049; rss: 137MB	MIR optimisations
  time: 0.011; rss: 141MB	write metadata
  time: 0.119; rss: 149MB	translation item collection
  time: 0.015; rss: 151MB	codegen unit partitioning
  time: 0.013; rss: 204MB	internalize symbols
time: 0.917; rss: 204MB	translation
time: 0.000; rss: 204MB	assert dep graph
time: 0.000; rss: 204MB	serialize dep graph
  time: 0.087; rss: 149MB	llvm function passes [0]
  time: 0.041; rss: 151MB	llvm module passes [0]
  time: 1.638; rss: 152MB	codegen passes [0]
  time: 0.000; rss: 152MB	codegen passes [0]
time: 1.900; rss: 152MB	LLVM passes
time: 0.000; rss: 152MB	serialize work products
time: 0.070; rss: 95MB	linking
done
