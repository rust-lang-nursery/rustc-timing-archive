commit dc8212ff200dc54113a87b3a7033879133fdfff0
Merge: c4788c2 bbff336
Author: bors <bors@rust-lang.org>
Date:   Sat Jul 16 01:19:16 2016 -0700

    Auto merge of #34779 - infinity0:master, r=alexcrichton
    
    If local-rust is the same as the current version, then force a local-rebuild
    
    In Debian, we would like the option to build/rebuild the current release from
    *either* the current or previous stable release. So we use enable-local-rust
    instead of enable-local-rebuild, and read the bootstrap key dynamically from
    whatever is installed locally.
    
    In general, it does not make much sense to allow enable-local-rust without also
    setting the bootstrap key, since the build would fail otherwise.
    
    (The way I detect "the bootstrap key of [the local] rustc installation" is a bit hacky, suggestions welcome.)
rustc: ./helloworld
/root/rust/x86_64-unknown-linux-gnu/stage2/bin/rustc hello.rs -Ztime-passes -Zinput-stats
time: 0.000; rss: 80MB	parsing
Lines of code:             3
Pre-expansion node count:  8
time: 0.000; rss: 80MB	configuration
time: 0.000; rss: 84MB	recursion limit
time: 0.000; rss: 84MB	crate injection
time: 0.000; rss: 84MB	plugin loading
time: 0.000; rss: 84MB	plugin registration
time: 0.019; rss: 119MB	expansion
time: 0.000; rss: 119MB	maybe building test harness
time: 0.000; rss: 119MB	assigning node ids
Post-expansion node count: 68
time: 0.000; rss: 119MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 119MB	complete gated feature checking
time: 0.000; rss: 119MB	collecting defs
time: 0.003; rss: 119MB	external crate/lib resolution
time: 0.000; rss: 119MB	early lint checks
time: 0.000; rss: 119MB	AST validation
time: 0.000; rss: 119MB	name resolution
time: 0.000; rss: 119MB	lowering ast -> hir
time: 0.000; rss: 119MB	indexing hir
time: 0.000; rss: 119MB	attribute checking
time: 0.000; rss: 119MB	language item collection
time: 0.000; rss: 119MB	lifetime resolution
time: 0.000; rss: 119MB	looking for entry point
time: 0.000; rss: 119MB	looking for plugin registrar
time: 0.000; rss: 119MB	region resolution
time: 0.000; rss: 119MB	loop checking
time: 0.000; rss: 119MB	static item recursion checking
time: 0.000; rss: 123MB	load_dep_graph
time: 0.000; rss: 123MB	type collecting
time: 0.000; rss: 123MB	variance inference
time: 0.005; rss: 123MB	coherence checking
time: 0.000; rss: 123MB	wf checking
time: 0.000; rss: 123MB	item-types checking
time: 0.000; rss: 123MB	item-bodies checking
time: 0.000; rss: 123MB	drop-impl checking
time: 0.000; rss: 123MB	const checking
time: 0.000; rss: 123MB	privacy checking
time: 0.000; rss: 123MB	stability index
time: 0.000; rss: 123MB	intrinsic checking
time: 0.000; rss: 123MB	effect checking
time: 0.000; rss: 123MB	match checking
time: 0.000; rss: 123MB	liveness checking
time: 0.000; rss: 123MB	rvalue checking
time: 0.000; rss: 123MB	MIR dump
time: 0.001; rss: 123MB	MIR passes
time: 0.000; rss: 123MB	borrow checking
time: 0.000; rss: 123MB	reachability checking
time: 0.000; rss: 123MB	death checking
time: 0.000; rss: 123MB	stability checking
time: 0.000; rss: 123MB	unused lib feature checking
time: 0.000; rss: 123MB	lint checking
time: 0.001; rss: 123MB	resolving dependency formats
time: 0.000; rss: 123MB	Prepare MIR codegen passes
  time: 0.000; rss: 127MB	write metadata
  time: 0.001; rss: 127MB	translation item collection
  time: 0.000; rss: 127MB	codegen unit partitioning
time: 0.014; rss: 127MB	translation
time: 0.000; rss: 127MB	assert dep graph
time: 0.000; rss: 127MB	serialize dep graph
  time: 0.001; rss: 127MB	llvm function passes [0]
  time: 0.001; rss: 127MB	llvm module passes [0]
  time: 0.012; rss: 131MB	codegen passes [0]
  time: 0.001; rss: 131MB	codegen passes [0]
time: 0.020; rss: 131MB	LLVM passes
  time: 0.113; rss: 131MB	running linker
time: 0.113; rss: 131MB	linking
done
