commit de78655bca47cac8e783dbb563e7e5c25c1fae40
Merge: 5c674a1 547a930
Author: bors <bors@rust-lang.org>
Date:   Wed Jul 6 20:04:11 2016 -0700

    Auto merge of #34652 - jseyfried:fix_expansion_perf, r=nrc
    
    Fix expansion performance regression
    
    **syntax-[breaking-change] cc #31645**
    
    This fixes #34630 by reverting commit 5bf7970 of PR #33943, which landed in #34424.
    
    By removing the `Rc<_>` wrapping around `Delimited` and `SequenceRepetition` in `TokenTree`, 5bf7970 made cloning `TokenTree`s more expensive. While this had no measurable performance impact on the compiler's crates, it caused an order of magnitude performance regression on some macro-heavy code in the wild. I believe this is due to clones of `TokenTree`s in `macro_parser.rs` and/or `macro_rules.rs`.
    
    r? @nrc
rustc: ./inflate-0.1.0
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling inflate v0.1.0 (file:///root/benchmarks/inflate-0.1.0)
time: 0.005; rss: 79MB	parsing
Lines of code:             956
Pre-expansion node count:  4738
time: 0.001; rss: 79MB	configuration
time: 0.000; rss: 83MB	recursion limit
time: 0.000; rss: 83MB	crate injection
time: 0.000; rss: 83MB	plugin loading
time: 0.000; rss: 83MB	plugin registration
time: 0.110; rss: 122MB	expansion
time: 0.000; rss: 122MB	maybe building test harness
time: 0.000; rss: 122MB	checking for inline asm in case the target doesn't support it
time: 0.001; rss: 122MB	complete gated feature checking
Post-expansion node count: 55769
time: 0.004; rss: 122MB	assigning node ids
time: 0.005; rss: 124MB	collecting defs
time: 0.001; rss: 124MB	external crate/lib resolution
time: 0.003; rss: 124MB	early lint checks
time: 0.000; rss: 124MB	AST validation
time: 0.007; rss: 126MB	name resolution
time: 0.005; rss: 129MB	lowering ast -> hir
time: 0.001; rss: 131MB	indexing hir
time: 0.000; rss: 131MB	attribute checking
time: 0.001; rss: 129MB	language item collection
time: 0.001; rss: 129MB	lifetime resolution
time: 0.000; rss: 129MB	looking for entry point
time: 0.000; rss: 129MB	looking for plugin registrar
time: 0.004; rss: 130MB	region resolution
time: 0.001; rss: 130MB	loop checking
time: 0.000; rss: 130MB	static item recursion checking
time: 0.000; rss: 130MB	load_dep_graph
time: 0.002; rss: 132MB	type collecting
time: 0.000; rss: 132MB	variance inference
time: 0.010; rss: 134MB	coherence checking
time: 0.002; rss: 134MB	wf checking
time: 0.003; rss: 134MB	item-types checking
time: 3.396; rss: 147MB	item-bodies checking
time: 0.000; rss: 147MB	drop-impl checking
time: 0.015; rss: 147MB	const checking
time: 0.001; rss: 147MB	privacy checking
time: 0.000; rss: 147MB	stability index
time: 0.001; rss: 147MB	intrinsic checking
time: 0.001; rss: 147MB	effect checking
time: 0.005; rss: 147MB	match checking
time: 0.065; rss: 146MB	liveness checking
time: 0.011; rss: 146MB	rvalue checking
time: 0.039; rss: 159MB	MIR dump
time: 0.023; rss: 158MB	MIR passes
time: 0.207; rss: 158MB	borrow checking
time: 0.000; rss: 158MB	reachability checking
time: 0.003; rss: 158MB	death checking
time: 0.002; rss: 158MB	stability checking
time: 0.000; rss: 158MB	unused lib feature checking
time: 0.021; rss: 160MB	lint checking
time: 0.000; rss: 160MB	resolving dependency formats
time: 0.124; rss: 158MB	Prepare MIR codegen passes
  time: 0.003; rss: 159MB	write metadata
  time: 0.010; rss: 160MB	translation item collection
  time: 0.000; rss: 160MB	codegen unit partitioning
time: 0.821; rss: 177MB	translation
time: 0.000; rss: 177MB	assert dep graph
time: 0.000; rss: 177MB	serialize dep graph
  time: 0.301; rss: 143MB	llvm function passes [0]
  time: 0.075; rss: 144MB	llvm module passes [0]
  time: 4.646; rss: 148MB	codegen passes [0]
  time: 0.001; rss: 148MB	codegen passes [0]
time: 5.270; rss: 148MB	LLVM passes
time: 0.035; rss: 136MB	linking
done
