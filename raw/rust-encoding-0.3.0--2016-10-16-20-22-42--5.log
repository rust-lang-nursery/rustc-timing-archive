commit 6572a463116a31efba8bfddb2e64ed659311b8a1
Merge: 6dc035e ee338c3
Author: bors <bors@rust-lang.org>
Date:   Sun Oct 16 04:22:21 2016 -0700

    Auto merge of #37129 - arielb1:erased-normal, r=eddyb
    
    normalize types every time HR regions are erased
    
    Associated type normalization is inhibited by higher-ranked regions.
    Therefore, every time we erase them, we must re-normalize.
    
    I was meaning to introduce this change some time ago, but we used
    to erase regions in generic context, which broke this terribly (because
    you can't always normalize in a generic context). That seems to be gone
    now.
    
    Ensure this by having a `erase_late_bound_regions_and_normalize`
    function.
    
    Fixes #37109 (the missing call was in mir::block).
    
    r? @eddyb
rustc: ./rust-encoding-0.3.0
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling encoding v0.3.0-dev (file:///root/benchmarks/rust-encoding-0.3.0)
time: 0.029; rss: 42MB	parsing
Lines of code:             5757
Pre-expansion node count:  26615
time: 0.000; rss: 42MB	recursion limit
time: 0.000; rss: 42MB	crate injection
time: 0.000; rss: 42MB	plugin loading
time: 0.000; rss: 42MB	plugin registration
time: 0.041; rss: 67MB	expansion
time: 0.000; rss: 67MB	maybe building test harness
time: 0.000; rss: 67MB	maybe creating a macro crate
Post-expansion node count: 37904
time: 0.000; rss: 67MB	checking for inline asm in case the target doesn't support it
time: 0.001; rss: 67MB	complete gated feature checking
time: 0.001; rss: 67MB	early lint checks
time: 0.000; rss: 67MB	AST validation
time: 0.008; rss: 69MB	name resolution
time: 0.003; rss: 70MB	lowering ast -> hir
time: 0.001; rss: 71MB	indexing hir
time: 0.000; rss: 71MB	attribute checking
time: 0.000; rss: 70MB	language item collection
time: 0.001; rss: 70MB	lifetime resolution
time: 0.000; rss: 70MB	looking for entry point
time: 0.000; rss: 70MB	looking for plugin registrar
time: 0.004; rss: 71MB	region resolution
time: 0.000; rss: 71MB	loop checking
time: 0.000; rss: 71MB	static item recursion checking
time: 0.014; rss: 72MB	compute_incremental_hashes_map
time: 0.000; rss: 72MB	load_dep_graph
time: 0.008; rss: 73MB	type collecting
time: 0.000; rss: 73MB	variance inference
time: 0.019; rss: 74MB	coherence checking
time: 0.012; rss: 75MB	wf checking
time: 0.009; rss: 76MB	item-types checking
time: 0.144; rss: 81MB	item-bodies checking
time: 0.000; rss: 81MB	drop-impl checking
time: 0.013; rss: 81MB	const checking
time: 0.002; rss: 81MB	privacy checking
time: 0.000; rss: 81MB	stability index
time: 0.001; rss: 81MB	intrinsic checking
time: 0.000; rss: 81MB	effect checking
time: 0.006; rss: 81MB	match checking
time: 0.001; rss: 81MB	liveness checking
time: 0.006; rss: 81MB	rvalue checking
time: 0.031; rss: 89MB	MIR dump
  time: 0.003; rss: 89MB	SimplifyCfg
  time: 0.004; rss: 89MB	QualifyAndPromoteConstants
  time: 0.004; rss: 89MB	TypeckMir
  time: 0.000; rss: 89MB	SimplifyBranches
  time: 0.001; rss: 89MB	SimplifyCfg
time: 0.012; rss: 89MB	MIR passes
time: 0.020; rss: 90MB	borrow checking
time: 0.000; rss: 90MB	reachability checking
time: 0.001; rss: 90MB	death checking
time: 0.002; rss: 90MB	stability checking
time: 0.000; rss: 90MB	unused lib feature checking
time: 0.016; rss: 91MB	lint checking
time: 0.000; rss: 91MB	resolving dependency formats
  time: 0.000; rss: 91MB	NoLandingPads
  time: 0.001; rss: 91MB	SimplifyCfg
  time: 0.003; rss: 91MB	EraseRegions
  time: 0.000; rss: 91MB	AddCallGuards
  time: 0.025; rss: 91MB	ElaborateDrops
  time: 0.000; rss: 91MB	NoLandingPads
  time: 0.002; rss: 91MB	SimplifyCfg
  time: 0.001; rss: 91MB	InstCombine
  time: 0.001; rss: 91MB	Deaggregator
  time: 0.000; rss: 91MB	CopyPropagation
  time: 0.000; rss: 91MB	AddCallGuards
  time: 0.000; rss: 91MB	PreTrans
time: 0.035; rss: 91MB	Prepare MIR codegen passes
  time: 0.015; rss: 93MB	write metadata
  time: 0.368; rss: 197MB	translation item collection
  time: 0.003; rss: 198MB	codegen unit partitioning
  time: 0.003; rss: 220MB	internalize symbols
time: 0.706; rss: 211MB	translation
time: 0.000; rss: 211MB	assert dep graph
time: 0.000; rss: 211MB	serialize dep graph
  time: 0.026; rss: 105MB	llvm function passes [0]
  time: 0.055; rss: 110MB	llvm module passes [0]
  time: 0.623; rss: 116MB	codegen passes [0]
  time: 0.000; rss: 116MB	codegen passes [0]
time: 0.759; rss: 116MB	LLVM passes
time: 0.000; rss: 116MB	serialize work products
time: 0.077; rss: 88MB	linking
done
