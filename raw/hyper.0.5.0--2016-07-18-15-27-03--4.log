commit 9c888980763e8ba16caa67f5f08e13109bbc6fa5
Merge: 06ca016 22f77a9
Author: bors <bors@rust-lang.org>
Date:   Mon Jul 18 11:29:25 2016 -0700

    Auto merge of #34899 - michaelwoerister:always_internalize_symbols, r=eddyb
    
    Run base::internalize_symbols() even for single-codegen-unit crates.
    
    The initial linkage-assignment (especially for closures) is a conservative one that makes some symbols more visible than they need to be. While this is not a correctness problem, it does force the LLVM inliner to be more conservative too, which results in poor performance. Once translation is based solely on MIR, it will be easier to also make the initial linkage assignment a better fitting one. Until then `internalize_symbols()` does a good job of preventing most performance regressions.
    
    This should solve the regressions reported in https://github.com/rust-lang/rust/issues/34891 and maybe also those in https://github.com/rust-lang/rust/issues/34831.
    
    As a side-effect, this will also solve most of the problematic cases described in https://github.com/rust-lang/rust/issues/34793. Not reliably so, however. For that, we still need a solution like the one implement in https://github.com/rust-lang/rust/pull/34830.
    
    cc @rust-lang/compiler
rustc: ./hyper.0.5.0
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling hyper v0.5.0 (file:///root/benchmarks/hyper.0.5.0)
time: 0.032; rss: 88MB	parsing
Lines of code:             9154
Pre-expansion node count:  44838
time: 0.005; rss: 92MB	configuration
time: 0.000; rss: 92MB	recursion limit
time: 0.000; rss: 92MB	crate injection
time: 0.000; rss: 92MB	plugin loading
time: 0.000; rss: 92MB	plugin registration
time: 0.116; rss: 132MB	expansion
time: 0.000; rss: 132MB	maybe building test harness
time: 0.008; rss: 132MB	assigning node ids
Post-expansion node count: 101581
time: 0.000; rss: 132MB	checking for inline asm in case the target doesn't support it
time: 0.002; rss: 132MB	complete gated feature checking
time: 0.003; rss: 132MB	collecting defs
time: 0.011; rss: 143MB	external crate/lib resolution
time: 0.006; rss: 143MB	early lint checks
time: 0.001; rss: 143MB	AST validation
time: 0.019; rss: 148MB	name resolution
time: 0.009; rss: 156MB	lowering ast -> hir
time: 0.001; rss: 158MB	indexing hir
time: 0.001; rss: 158MB	attribute checking
time: 0.001; rss: 152MB	language item collection
time: 0.001; rss: 152MB	lifetime resolution
time: 0.000; rss: 152MB	looking for entry point
time: 0.000; rss: 152MB	looking for plugin registrar
time: 0.005; rss: 156MB	region resolution
time: 0.001; rss: 156MB	loop checking
time: 0.000; rss: 156MB	static item recursion checking
time: 0.000; rss: 156MB	load_dep_graph
time: 0.031; rss: 158MB	type collecting
time: 0.000; rss: 158MB	variance inference
time: 0.044; rss: 164MB	coherence checking
time: 0.099; rss: 167MB	wf checking
time: 0.037; rss: 167MB	item-types checking
time: 0.528; rss: 176MB	item-bodies checking
time: 0.000; rss: 176MB	drop-impl checking
time: 0.044; rss: 176MB	const checking
time: 0.008; rss: 176MB	privacy checking
time: 0.001; rss: 176MB	stability index
time: 0.006; rss: 176MB	intrinsic checking
time: 0.002; rss: 176MB	effect checking
time: 0.014; rss: 176MB	match checking
time: 0.004; rss: 176MB	liveness checking
time: 0.031; rss: 176MB	rvalue checking
time: 0.064; rss: 191MB	MIR dump
time: 0.044; rss: 191MB	MIR passes
time: 0.074; rss: 191MB	borrow checking
time: 0.003; rss: 191MB	reachability checking
time: 0.006; rss: 191MB	death checking
time: 0.006; rss: 191MB	stability checking
time: 0.000; rss: 191MB	unused lib feature checking
time: 0.051; rss: 191MB	lint checking
time: 0.000; rss: 191MB	resolving dependency formats
time: 0.092; rss: 193MB	Prepare MIR codegen passes
  time: 0.132; rss: 198MB	write metadata
  time: 0.191; rss: 203MB	translation item collection
  time: 0.021; rss: 207MB	codegen unit partitioning
time: 3.642; rss: 325MB	translation
time: 0.001; rss: 325MB	assert dep graph
time: 0.000; rss: 325MB	serialize dep graph
  time: 1.113; rss: 213MB	llvm function passes [0]
  time: 0.433; rss: 213MB	llvm module passes [0]
  time: 16.077; rss: 214MB	codegen passes [0]
  time: 0.002; rss: 214MB	codegen passes [0]
time: 18.710; rss: 214MB	LLVM passes
time: 0.151; rss: 165MB	linking
done
