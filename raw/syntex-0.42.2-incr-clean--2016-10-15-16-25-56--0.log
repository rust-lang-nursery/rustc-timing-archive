commit 5bfe10740168eb8213101c827302b4c45b1b5b74
Merge: 8e05e7e 348c3fb
Author: bors <bors@rust-lang.org>
Date:   Sat Oct 15 09:32:06 2016 -0700

    Auto merge of #37132 - petrochenkov:intern, r=alexcrichton
    
    Get rid of double indirection in string interner
rustc: ./syntex-0.42.2-incr-clean
RUSTFLAGS="-Z incremental=incr" \
    cargo rustc -p syntex_syntax -- -Ztime-passes -Zinput-stats -Z incremental-info
   Compiling unicode-xid v0.0.3
   Compiling libc v0.2.15
   Compiling winapi-build v0.1.1
   Compiling rustc-serialize v0.3.19
   Compiling log v0.3.6
   Compiling bitflags v0.5.0
   Compiling winapi v0.2.8
   Compiling kernel32-sys v0.2.2
   Compiling term v0.4.4
   Compiling syntex_pos v0.42.0
   Compiling syntex_errors v0.42.0
   Compiling syntex_syntax v0.42.0
time: 0.108; rss: 75MB	parsing
Lines of code:             33687
Pre-expansion node count:  224033
time: 0.000; rss: 75MB	recursion limit
time: 0.000; rss: 75MB	crate injection
time: 0.000; rss: 75MB	plugin loading
time: 0.000; rss: 75MB	plugin registration
time: 0.276; rss: 148MB	expansion
time: 0.000; rss: 148MB	maybe building test harness
time: 0.006; rss: 148MB	maybe creating a macro crate
Post-expansion node count: 641571
time: 0.000; rss: 148MB	checking for inline asm in case the target doesn't support it
time: 0.013; rss: 148MB	complete gated feature checking
time: 0.022; rss: 148MB	early lint checks
time: 0.007; rss: 148MB	AST validation
time: 0.085; rss: 162MB	name resolution
time: 0.049; rss: 202MB	lowering ast -> hir
time: 0.009; rss: 213MB	indexing hir
time: 0.006; rss: 213MB	attribute checking
time: 0.006; rss: 163MB	language item collection
time: 0.012; rss: 163MB	lifetime resolution
time: 0.000; rss: 163MB	looking for entry point
time: 0.000; rss: 163MB	looking for plugin registrar
time: 0.043; rss: 174MB	region resolution
time: 0.006; rss: 174MB	loop checking
time: 0.006; rss: 174MB	static item recursion checking
time: 0.263; rss: 175MB	compute_incremental_hashes_map
time: 0.000; rss: 175MB	load_dep_graph
time: 0.044; rss: 181MB	type collecting
time: 0.001; rss: 181MB	variance inference
time: 0.037; rss: 183MB	coherence checking
time: 0.103; rss: 186MB	wf checking
time: 0.199; rss: 193MB	item-types checking
time: 4.011; rss: 245MB	item-bodies checking
time: 0.000; rss: 245MB	drop-impl checking
time: 0.312; rss: 248MB	const checking
time: 0.052; rss: 248MB	privacy checking
time: 0.007; rss: 248MB	stability index
time: 0.021; rss: 248MB	intrinsic checking
time: 0.018; rss: 248MB	effect checking
time: 0.056; rss: 248MB	match checking
time: 0.053; rss: 239MB	liveness checking
time: 0.286; rss: 239MB	rvalue checking
time: 0.427; rss: 430MB	MIR dump
  time: 0.057; rss: 431MB	SimplifyCfg
  time: 0.082; rss: 431MB	QualifyAndPromoteConstants
  time: 0.112; rss: 431MB	TypeckMir
  time: 0.004; rss: 431MB	SimplifyBranches
  time: 0.031; rss: 431MB	SimplifyCfg
time: 0.287; rss: 431MB	MIR passes
time: 0.674; rss: 431MB	borrow checking
time: 0.022; rss: 431MB	reachability checking
time: 0.044; rss: 431MB	death checking
time: 0.041; rss: 433MB	stability checking
time: 0.000; rss: 433MB	unused lib feature checking
time: 0.214; rss: 433MB	lint checking
time: 0.000; rss: 433MB	resolving dependency formats
  time: 0.003; rss: 433MB	NoLandingPads
  time: 0.027; rss: 433MB	SimplifyCfg
  time: 0.070; rss: 444MB	EraseRegions
  time: 0.011; rss: 444MB	AddCallGuards
  time: 1.110; rss: 461MB	ElaborateDrops
  time: 0.003; rss: 461MB	NoLandingPads
  time: 0.052; rss: 461MB	SimplifyCfg
  time: 0.030; rss: 461MB	InstCombine
  time: 0.012; rss: 461MB	Deaggregator
  time: 0.003; rss: 461MB	CopyPropagation
  time: 0.009; rss: 461MB	AddCallGuards
  time: 0.003; rss: 461MB	PreTrans
time: 1.333; rss: 461MB	Prepare MIR codegen passes
  time: 0.263; rss: 468MB	write metadata
  time: 0.455; rss: 478MB	translation item collection
  time: 0.063; rss: 485MB	codegen unit partitioning
  time: 0.053; rss: 730MB	internalize symbols
time: 5.030; rss: 610MB	translation
time: 0.000; rss: 610MB	assert dep graph
time: 0.000; rss: 610MB	serialize dep graph
incremental: re-using 0 out of 1 modules
  time: 0.516; rss: 409MB	llvm function passes [0]
  time: 0.243; rss: 418MB	llvm module passes [0]
  time: 10.049; rss: 419MB	codegen passes [0]
  time: 0.001; rss: 421MB	codegen passes [0]
time: 11.542; rss: 421MB	LLVM passes
time: 0.000; rss: 421MB	serialize work products
time: 0.667; rss: 107MB	linking
done
