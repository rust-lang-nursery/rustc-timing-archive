commit 18f28719efd4268bcd8747b65810646e86901155
Merge: 12b6345 24e7491
Author: bors <bors@rust-lang.org>
Date:   Thu Jun 16 12:13:25 2016 -0700

    Auto merge of #34187 - luser:extern-crate-abspaths, r=michaelwoerister
    
    Add an abs_path member to FileMap, use it when writing debug info.
    
    Fixes #34179.
    
    When items are inlined from extern crates, the filename in the debug info
    is taken from the FileMap that's serialized in the rlib metadata.
    Currently this is just FileMap.name, which is whatever path is passed to rustc.
    Since libcore and libstd are built by invoking rustc with relative paths,
    they wind up with relative paths in the rlib, and when linked into a binary
    the debug info uses relative paths for the names, but since the compilation
    directory for the final binary, tools trying to read source filenames
    will wind up with bad paths. We noticed this in Firefox with source
    filenames from libcore/libstd having bad paths.
    
    This change stores an absolute path in FileMap.abs_path, and uses that
    if available for writing debug info. This is not going to magically make
    debuggers able to find the source, but it will at least provide sensible
    paths.
rustc: ./hyper.0.5.0
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling hyper v0.5.0 (file:///root/benchmarks/hyper.0.5.0)
time: 0.030; rss: 52MB	parsing
Lines of code:             9154
Pre-expansion node count:  44646
time: 0.005; rss: 52MB	configuration 1
time: 0.000; rss: 52MB	recursion limit
time: 0.000; rss: 57MB	crate injection
time: 0.000; rss: 57MB	plugin loading
time: 0.000; rss: 57MB	plugin registration
time: 0.181; rss: 97MB	expansion
time: 0.000; rss: 97MB	gated configuration checking
time: 0.000; rss: 97MB	maybe building test harness
time: 0.000; rss: 97MB	checking for inline asm in case the target doesn't support it
time: 0.003; rss: 97MB	complete gated feature checking
Post-expansion node count: 100536
time: 0.008; rss: 98MB	assigning node ids
time: 0.003; rss: 99MB	collecting defs
time: 0.011; rss: 110MB	external crate/lib resolution
time: 0.006; rss: 110MB	early lint checks
time: 0.001; rss: 110MB	AST validation
time: 0.025; rss: 114MB	name resolution
time: 0.010; rss: 122MB	lowering ast -> hir
time: 0.001; rss: 122MB	indexing hir
time: 0.001; rss: 122MB	attribute checking
time: 0.001; rss: 114MB	language item collection
time: 0.002; rss: 114MB	lifetime resolution
time: 0.000; rss: 114MB	looking for entry point
time: 0.000; rss: 114MB	looking for plugin registrar
time: 0.005; rss: 118MB	region resolution
time: 0.001; rss: 118MB	loop checking
time: 0.001; rss: 118MB	static item recursion checking
time: 0.000; rss: 118MB	load_dep_graph
time: 0.032; rss: 121MB	type collecting
time: 0.000; rss: 121MB	variance inference
time: 0.045; rss: 129MB	coherence checking
time: 0.094; rss: 132MB	wf checking
time: 0.035; rss: 132MB	item-types checking
time: 0.515; rss: 142MB	item-bodies checking
time: 0.000; rss: 142MB	drop-impl checking
time: 0.043; rss: 144MB	const checking
time: 0.007; rss: 144MB	privacy checking
time: 0.001; rss: 144MB	stability index
time: 0.006; rss: 144MB	intrinsic checking
time: 0.002; rss: 144MB	effect checking
time: 0.014; rss: 144MB	match checking
time: 0.005; rss: 144MB	liveness checking
time: 0.030; rss: 144MB	rvalue checking
time: 0.060; rss: 154MB	MIR dump
time: 0.042; rss: 154MB	MIR passes
time: 0.070; rss: 154MB	borrow checking
time: 0.003; rss: 154MB	reachability checking
time: 0.007; rss: 154MB	death checking
time: 0.005; rss: 154MB	stability checking
time: 0.000; rss: 154MB	unused lib feature checking
time: 0.050; rss: 154MB	lint checking
time: 0.000; rss: 154MB	resolving dependency formats
time: 0.092; rss: 158MB	Prepare MIR codegen passes
  time: 0.126; rss: 163MB	write metadata
  time: 0.179; rss: 165MB	translation item collection
  time: 0.006; rss: 167MB	codegen unit partitioning
time: 1.613; rss: 287MB	translation
time: 0.000; rss: 287MB	assert dep graph
time: 0.000; rss: 287MB	serialize dep graph
  time: 0.094; rss: 178MB	llvm function passes [0]
  time: 0.048; rss: 179MB	llvm module passes [0]
  time: 1.634; rss: 180MB	codegen passes [0]
  time: 0.001; rss: 134MB	codegen passes [0]
time: 1.973; rss: 134MB	LLVM passes
time: 0.173; rss: 131MB	linking
done
