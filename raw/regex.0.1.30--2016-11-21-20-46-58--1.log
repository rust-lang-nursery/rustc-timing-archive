commit 82d8833a456a408fe8b761a3b5e88475b65066c8
Merge: 7b3eeea 382d3b0
Author: bors <bors@rust-lang.org>
Date:   Mon Nov 21 17:59:10 2016 -0600

    Auto merge of #37642 - nnethercote:no-HirVec-of-P, r=michaelwoerister
    
    Change HirVec<P<T>> to HirVec<T> in hir:: Expr.
    
    This PR changes data structures like this:
    ```
    [ ExprArray | 8 | P ]
                      |
                      v
                      [ P | P | P | P | P | P | P | P ]
                        |
                        v
                        [ ExprTup | 2 | P ]
                                        |
                                        v
                                        [ P | P ]
                                          |
                                          v
                                          [ Expr ]
    ```
    to this:
    ```
    [ ExprArray | 8 | P ]
                      |
                      v
                      [ [ ExprTup | 2 | P ] | ... ]
                                        |
                                        v
                                        [ Expr | Expr ]
    ```
    I thought this would be a win for #36799, and on a cut-down version of that workload this reduces the peak heap size (as measured by Massif) from 885 MiB to 875 MiB. However, the peak RSS as measured by `-Ztime-passes` and by `/usr/bin/time` increases by about 30 MiB.
    
    I'm not sure why. Just look at the picture above -- the second data structure clearly takes up less space than the first. My best idea relates to unused elements in the slices. `HirVec<Expr>` is a typedef for `P<[Expr]>`. If there were any unused excess elements then I could see that memory usage would increase, because those excess elements are larger in `HirVec<Expr>` than in `HirVec<P<Expr>>`. But AIUI there are no such excess elements, and Massif's measurements corroborate that.
    
    However, the two main creation points for these data structures are these lines from `lower_expr`:
    ```rust
            ExprKind::Vec(ref exprs) => {
                hir::ExprArray(exprs.iter().map(|x| self.lower_expr(x)).collect())
            }
            ExprKind::Tup(ref elts) => {
                hir::ExprTup(elts.iter().map(|x| self.lower_expr(x)).collect())
            }
    ```
    I suspect what is happening is that temporary excess elements are created within the `collect` calls. The workload from #36799 has many 2-tuples and 3-tuples and when `Vec` gets doubled it goes from a capacity of 1 to 4, which would lead to excess elements. Though, having said that, `Vec::with_capacity` doesn't create excess AFAICT. So I'm not sure. What goes on inside `collect` is complex.
    
    Anyway, in its current form this PR is a memory consumption regression and so not worth landing but I figured I'd post it in case anyone has additional insight.
rustc: ./regex.0.1.30
cargo rustc  -- -Ztime-passes -Zinput-stats
   Compiling regex v0.1.30 (file:///root/benchmarks/regex.0.1.30)
time: 0.042; rss: 54MB	parsing
Lines of code:             8558
Pre-expansion node count:  58049
time: 0.000; rss: 55MB	recursion limit
time: 0.000; rss: 55MB	crate injection
time: 0.000; rss: 55MB	plugin loading
time: 0.000; rss: 55MB	plugin registration
time: 0.029; rss: 79MB	expansion
time: 0.000; rss: 79MB	maybe building test harness
time: 0.001; rss: 79MB	maybe creating a macro crate
Post-expansion node count: 68093
time: 0.000; rss: 79MB	checking for inline asm in case the target doesn't support it
time: 0.001; rss: 79MB	complete gated feature checking
time: 0.003; rss: 79MB	early lint checks
time: 0.000; rss: 79MB	AST validation
time: 0.005; rss: 80MB	name resolution
time: 0.005; rss: 84MB	lowering ast -> hir
time: 0.001; rss: 86MB	indexing hir
time: 0.001; rss: 86MB	attribute checking
time: 0.000; rss: 79MB	language item collection
time: 0.001; rss: 79MB	lifetime resolution
time: 0.000; rss: 79MB	looking for entry point
time: 0.000; rss: 79MB	looking for plugin registrar
time: 0.004; rss: 83MB	region resolution
time: 0.000; rss: 83MB	loop checking
time: 0.001; rss: 83MB	static item recursion checking
time: 0.018; rss: 83MB	compute_incremental_hashes_map
time: 0.000; rss: 83MB	load_dep_graph
time: 0.006; rss: 84MB	type collecting
time: 0.000; rss: 84MB	variance inference
time: 0.000; rss: 84MB	impl wf inference
time: 0.009; rss: 88MB	coherence checking
time: 0.007; rss: 88MB	wf checking
time: 0.147; rss: 98MB	item-types checking
time: 0.113; rss: 99MB	item-bodies checking
time: 0.000; rss: 99MB	drop-impl checking
time: 0.021; rss: 101MB	const checking
time: 0.002; rss: 101MB	privacy checking
time: 0.000; rss: 101MB	stability index
time: 0.001; rss: 101MB	intrinsic checking
time: 0.000; rss: 101MB	effect checking
time: 0.002; rss: 101MB	match checking
time: 0.001; rss: 101MB	liveness checking
time: 0.006; rss: 101MB	rvalue checking
time: 0.035; rss: 114MB	MIR dump
  time: 0.002; rss: 114MB	SimplifyCfg
  time: 0.005; rss: 114MB	QualifyAndPromoteConstants
  time: 0.008; rss: 114MB	TypeckMir
  time: 0.000; rss: 114MB	SimplifyBranches
  time: 0.001; rss: 114MB	SimplifyCfg
time: 0.016; rss: 114MB	MIR cleanup and validation
time: 0.018; rss: 114MB	borrow checking
time: 0.000; rss: 114MB	reachability checking
time: 0.002; rss: 114MB	death checking
time: 0.001; rss: 114MB	stability checking
time: 0.000; rss: 114MB	unused lib feature checking
time: 0.022; rss: 114MB	lint checking
time: 0.000; rss: 114MB	resolving dependency formats
  time: 0.000; rss: 114MB	NoLandingPads
  time: 0.001; rss: 114MB	SimplifyCfg
  time: 0.004; rss: 114MB	EraseRegions
  time: 0.000; rss: 114MB	AddCallGuards
  time: 0.007; rss: 114MB	ElaborateDrops
  time: 0.000; rss: 114MB	NoLandingPads
  time: 0.002; rss: 114MB	SimplifyCfg
  time: 0.002; rss: 114MB	InstCombine
  time: 0.000; rss: 114MB	Deaggregator
  time: 0.000; rss: 114MB	CopyPropagation
  time: 0.002; rss: 114MB	SimplifyLocals
  time: 0.000; rss: 114MB	AddCallGuards
  time: 0.000; rss: 114MB	PreTrans
time: 0.019; rss: 114MB	MIR optimisations
  time: 0.018; rss: 118MB	write metadata
  time: 0.042; rss: 124MB	translation item collection
  time: 0.005; rss: 124MB	codegen unit partitioning
  time: 0.005; rss: 152MB	internalize symbols
time: 0.398; rss: 152MB	translation
time: 0.000; rss: 152MB	assert dep graph
time: 0.000; rss: 152MB	serialize dep graph
  time: 0.037; rss: 114MB	llvm function passes [0]
  time: 0.019; rss: 115MB	llvm module passes [0]
  time: 0.700; rss: 117MB	codegen passes [0]
  time: 0.000; rss: 117MB	codegen passes [0]
time: 0.814; rss: 116MB	LLVM passes
time: 0.000; rss: 116MB	serialize work products
time: 0.049; rss: 88MB	linking
done
