commit 8c604dc940c35e4ac36012aa85375250f2e6e07e
Merge: 915fa2a 7afb56f
Author: bors <bors@rust-lang.org>
Date:   Sat Feb 6 21:18:50 2016 +0000

    Auto merge of #30629 - brson:emscripten-upstream, r=alexcrichton
    
    Here's another go at adding emscripten support. This needs to wait again on new [libc definitions](https://github.com/rust-lang-nursery/libc/pull/122) landing. To get the libc definitions right I had to add support for i686-unknown-linux-musl, which are very similar to emscripten's, which are derived from arm/musl.
    
    This branch additionally removes the makefile dependency on the `EMSCRIPTEN` environment variable by not building the unused compiler-rt.
    
    Again, this is not sufficient for actually compiling to asmjs since it needs additional LLVM patches.
    
    r? @alexcrichton
rustc: ./hyper.0.5.0
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling hyper v0.5.0 (file:///root/benchmarks/hyper.0.5.0)
time: 0.029; rss: 42MB	parsing
Lines of code:             9154
Pre-expansion node count:  45594
time: 0.009; rss: 42MB	configuration 1
time: 0.000; rss: 42MB	recursion limit
time: 0.000; rss: 42MB	gated macro checking
time: 0.000; rss: 42MB	crate injection
time: 0.004; rss: 48MB	macro loading
time: 0.000; rss: 48MB	plugin loading
time: 0.000; rss: 48MB	plugin registration
time: 0.194; rss: 57MB	expansion
time: 0.005; rss: 57MB	complete gated feature checking 1
time: 0.034; rss: 57MB	configuration 2
time: 0.000; rss: 57MB	gated configuration checking
time: 0.013; rss: 57MB	maybe building test harness
time: 0.011; rss: 57MB	prelude injection
time: 0.001; rss: 57MB	checking that all macro invocations are gone
time: 0.000; rss: 57MB	checking for inline asm in case the target doesn't support it
time: 0.002; rss: 57MB	complete gated feature checking 2
Post-expansion node count: 109258
time: 0.010; rss: 57MB	assigning node ids
time: 0.011; rss: 61MB	lowering ast -> hir
time: 0.005; rss: 65MB	indexing hir
time: 0.000; rss: 65MB	attribute checking
time: 0.005; rss: 65MB	early lint checks
time: 0.003; rss: 61MB	external crate/lib resolution
time: 0.001; rss: 61MB	language item collection
time: 0.028; rss: 80MB	resolution
time: 0.002; rss: 80MB	lifetime resolution
time: 0.000; rss: 80MB	looking for entry point
time: 0.000; rss: 80MB	looking for plugin registrar
time: 0.006; rss: 84MB	region resolution
time: 0.001; rss: 84MB	loop checking
time: 0.001; rss: 84MB	static item recursion checking
time: 0.013; rss: 88MB	type collecting
time: 0.000; rss: 88MB	variance inference
time: 0.038; rss: 106MB	coherence checking
time: 0.069; rss: 109MB	wf checking
time: 0.027; rss: 109MB	item-types checking
time: 0.522; rss: 132MB	item-bodies checking
time: 0.000; rss: 132MB	drop-impl checking
time: 0.042; rss: 133MB	const checking
time: 0.008; rss: 133MB	privacy checking
time: 0.001; rss: 133MB	stability index
time: 0.004; rss: 133MB	intrinsic checking
time: 0.002; rss: 133MB	effect checking
time: 0.013; rss: 133MB	match checking
time: 0.050; rss: 137MB	MIR dump
time: 0.006; rss: 137MB	liveness checking
time: 0.069; rss: 137MB	borrow checking
time: 0.035; rss: 137MB	rvalue checking
time: 0.003; rss: 137MB	reachability checking
time: 0.006; rss: 137MB	death checking
time: 0.007; rss: 137MB	stability checking
time: 0.000; rss: 137MB	unused lib feature checking
time: 0.047; rss: 137MB	lint checking
time: 0.000; rss: 137MB	resolving dependency formats
time: 0.007; rss: 137MB	erasing regions from MIR
  time: 0.138; rss: 273MB	write metadata
time: 1.460; rss: 273MB	translation
  time: 0.102; rss: 169MB	llvm function passes [0]
  time: 0.051; rss: 170MB	llvm module passes [0]
  time: 1.684; rss: 214MB	codegen passes [0]
  time: 0.001; rss: 175MB	codegen passes [0]
time: 2.064; rss: 175MB	LLVM passes
time: 0.175; rss: 172MB	linking
done
