commit 2dc132e4d25cf7424deddf6c33c6059d93ff5248
Merge: 59b7c90 8f803c2
Author: bors <bors@rust-lang.org>
Date:   Tue Feb 2 17:11:48 2016 +0000

    Auto merge of #31312 - alexcrichton:no-le-in-powerpc64le, r=alexcrichton
    
    Currently the `mipsel-unknown-linux-gnu` target doesn't actually set the
    `target_arch` value to `mipsel` but it rather uses `mips`. Alternatively the
    `powerpc64le` target does indeed set the `target_arch` as `powerpc64le`,
    causing a bit of inconsistency between theset two.
    
    As these are just the same instance of one instruction set, let's use
    `target_endian` to switch between them and only set the `target_arch` as one
    value. This should cut down on the number of `#[cfg]` annotations necessary and
    all around be a little more ergonomic.
rustc: ./rust-encoding.0.2.32
cargo rustc -- -Ztime-passes -Zinput-stats
    Updating registry `https://github.com/rust-lang/crates.io-index`
   Compiling encoding_index_tests v0.1.4 (file:///root/benchmarks/rust-encoding.0.2.32)
   Compiling encoding-index-korean v1.20141219.5 (file:///root/benchmarks/rust-encoding.0.2.32)
   Compiling encoding-index-tradchinese v1.20141219.5 (file:///root/benchmarks/rust-encoding.0.2.32)
   Compiling encoding-index-singlebyte v1.20141219.5 (file:///root/benchmarks/rust-encoding.0.2.32)
   Compiling encoding-index-japanese v1.20141219.5 (file:///root/benchmarks/rust-encoding.0.2.32)
   Compiling encoding-index-simpchinese v1.20141219.5 (file:///root/benchmarks/rust-encoding.0.2.32)
   Compiling encoding v0.2.32 (file:///root/benchmarks/rust-encoding.0.2.32)
time: 0.023; rss: 41MB	parsing
Lines of code:             6441
Pre-expansion node count:  30335
time: 0.006; rss: 41MB	configuration 1
time: 0.000; rss: 41MB	recursion limit
time: 0.000; rss: 41MB	gated macro checking
time: 0.000; rss: 41MB	crate injection
time: 0.003; rss: 44MB	macro loading
time: 0.000; rss: 44MB	plugin loading
time: 0.000; rss: 44MB	plugin registration
time: 0.047; rss: 47MB	expansion
time: 0.001; rss: 47MB	complete gated feature checking 1
time: 0.008; rss: 47MB	configuration 2
time: 0.000; rss: 47MB	gated configuration checking
time: 0.004; rss: 47MB	maybe building test harness
time: 0.004; rss: 47MB	prelude injection
time: 0.000; rss: 47MB	checking that all macro invocations are gone
time: 0.000; rss: 47MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 47MB	complete gated feature checking 2
Post-expansion node count: 41783
time: 0.004; rss: 47MB	assigning node ids
time: 0.004; rss: 50MB	lowering ast -> hir
time: 0.002; rss: 50MB	indexing hir
time: 0.000; rss: 50MB	attribute checking
time: 0.002; rss: 50MB	early lint checks
time: 0.001; rss: 50MB	external crate/lib resolution
time: 0.000; rss: 50MB	language item collection
time: 0.008; rss: 57MB	resolution
time: 0.000; rss: 57MB	lifetime resolution
time: 0.000; rss: 57MB	looking for entry point
time: 0.000; rss: 57MB	looking for plugin registrar
time: 0.002; rss: 59MB	region resolution
time: 0.000; rss: 59MB	loop checking
time: 0.000; rss: 59MB	static item recursion checking
time: 0.005; rss: 62MB	type collecting
time: 0.000; rss: 62MB	variance inference
time: 0.020; rss: 75MB	coherence checking
time: 0.015; rss: 75MB	wf checking
time: 0.013; rss: 77MB	item-types checking
time: 0.199; rss: 88MB	item-bodies checking
time: 0.000; rss: 88MB	drop-impl checking
time: 0.012; rss: 88MB	const checking
time: 0.002; rss: 88MB	privacy checking
time: 0.000; rss: 88MB	stability index
time: 0.001; rss: 88MB	intrinsic checking
time: 0.000; rss: 88MB	effect checking
time: 0.006; rss: 88MB	match checking
time: 0.017; rss: 92MB	MIR dump
time: 0.003; rss: 92MB	liveness checking
time: 0.023; rss: 92MB	borrow checking
time: 0.006; rss: 92MB	rvalue checking
time: 0.000; rss: 92MB	reachability checking
time: 0.002; rss: 92MB	death checking
time: 0.002; rss: 92MB	stability checking
time: 0.000; rss: 92MB	unused lib feature checking
time: 0.018; rss: 92MB	lint checking
time: 0.000; rss: 92MB	resolving dependency formats
time: 0.002; rss: 92MB	erasing regions from MIR
  time: 0.057; rss: 142MB	write metadata
time: 0.336; rss: 142MB	translation
  time: 0.028; rss: 106MB	llvm function passes [0]
  time: 0.061; rss: 108MB	llvm module passes [0]
  time: 0.565; rss: 129MB	codegen passes [0]
  time: 0.000; rss: 126MB	codegen passes [0]
time: 0.722; rss: 126MB	LLVM passes
time: 0.052; rss: 125MB	linking
done
