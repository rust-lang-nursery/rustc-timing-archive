commit 1586005a1d15e7d26b6c46a33e7a9643de9a77ac
Merge: 0672ed4 52883ab
Author: bors <bors@rust-lang.org>
Date:   Mon Jan 11 19:03:18 2016 +0000

    Auto merge of #30534 - bluss:binary-heap-fast-pop, r=Gankro
    
    BinaryHeap: Use full sift down in .pop()
    
    .sift_down can either choose to compare the element on the way down (and
    place it during descent), or to sift down an element fully, then sift
    back up to place it.
    
    A previous PR changed .sift_down() to the former behavior, which is much
    faster for relatively small heaps and for elements that are cheap to
    compare.
    
    A benchmarking run suggested that BinaryHeap::pop() suffers
    improportionally from this, and that it should use the second strategy
    instead. It's logical since .pop() brings last element from the
    heapified vector into index 0, it's very likely that this element will
    end up at the bottom again.
    
    Closes #29969
    Previous PR #29811
rustc: ./rust-encoding.0.2.32
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling encoding v0.2.32 (file:///root/benchmarks/rust-encoding.0.2.32)
time: 0.023; rss: 36MB	parsing
Lines of code:             6441
Pre-expansion node count:  30335
time: 0.006; rss: 36MB	configuration 1
time: 0.000; rss: 36MB	recursion limit
time: 0.000; rss: 36MB	gated macro checking
time: 0.000; rss: 36MB	crate injection
time: 0.003; rss: 39MB	macro loading
time: 0.000; rss: 39MB	plugin loading
time: 0.000; rss: 39MB	plugin registration
time: 0.049; rss: 41MB	expansion
time: 0.001; rss: 41MB	complete gated feature checking 1
time: 0.008; rss: 41MB	configuration 2
time: 0.000; rss: 41MB	gated configuration checking
time: 0.004; rss: 41MB	maybe building test harness
time: 0.004; rss: 41MB	prelude injection
time: 0.000; rss: 41MB	checking that all macro invocations are gone
time: 0.000; rss: 41MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 41MB	complete gated feature checking 2
Post-expansion node count: 41783
time: 0.004; rss: 41MB	assigning node ids
time: 0.005; rss: 44MB	lowering ast -> hir
time: 0.001; rss: 44MB	indexing hir
time: 0.000; rss: 44MB	attribute checking
time: 0.002; rss: 44MB	early lint checks
time: 0.001; rss: 44MB	external crate/lib resolution
time: 0.000; rss: 44MB	language item collection
time: 0.008; rss: 52MB	resolution
time: 0.000; rss: 52MB	lifetime resolution
time: 0.000; rss: 52MB	looking for entry point
time: 0.000; rss: 52MB	looking for plugin registrar
time: 0.002; rss: 54MB	region resolution
time: 0.000; rss: 54MB	loop checking
time: 0.000; rss: 54MB	static item recursion checking
time: 0.005; rss: 57MB	type collecting
time: 0.000; rss: 57MB	variance inference
time: 0.020; rss: 70MB	coherence checking
time: 0.015; rss: 72MB	wf checking
time: 0.013; rss: 72MB	item-types checking
time: 0.198; rss: 85MB	item-bodies checking
time: 0.000; rss: 85MB	drop-impl checking
time: 0.012; rss: 85MB	const checking
time: 0.002; rss: 85MB	privacy checking
time: 0.000; rss: 85MB	stability index
time: 0.001; rss: 85MB	intrinsic checking
time: 0.000; rss: 85MB	effect checking
time: 0.006; rss: 85MB	match checking
time: 0.018; rss: 90MB	MIR dump
time: 0.002; rss: 90MB	liveness checking
time: 0.024; rss: 90MB	borrow checking
time: 0.007; rss: 90MB	rvalue checking
time: 0.000; rss: 90MB	reachability checking
time: 0.002; rss: 90MB	death checking
time: 0.002; rss: 90MB	stability checking
time: 0.000; rss: 90MB	unused lib feature checking
time: 0.019; rss: 90MB	lint checking
time: 0.000; rss: 90MB	resolving dependency formats
time: 0.002; rss: 90MB	erasing regions from MIR
  time: 0.056; rss: 137MB	write metadata
time: 0.334; rss: 137MB	translation
  time: 0.027; rss: 103MB	llvm function passes [0]
  time: 0.062; rss: 105MB	llvm module passes [0]
  time: 0.558; rss: 127MB	codegen passes [0]
  time: 0.000; rss: 125MB	codegen passes [0]
time: 0.717; rss: 125MB	LLVM passes
time: 0.054; rss: 125MB	linking
done
