commit 46957f05771a427545c792f69b37f8e05dcbb15d
Merge: 3210fd5 fb90e4c
Author: bors <bors@rust-lang.org>
Date:   Wed Oct 5 18:10:34 2016 -0700

    Auto merge of #36893 - apasel422:issue-32114, r=alexcrichton
    
    Restore `DISCONNECTED` state in `oneshot::Packet::send`
    
    Closes #32114
    
    I'm not sure if this is the best approach, but the current action of swapping `DISCONNECTED` with `DATA` seems wrong. Additionally, it is strange that the `send` method (and others in the `oneshot` module) takes `&mut self` despite performing atomic operations, as this requires extra discipline to avoid data races and lets us use methods like `AtomicUsize::get_mut` instead of methods that require a memory ordering.
rustc: ./syntex-0.42.2-incr-clean
RUSTFLAGS="-Z incremental=incr" \
    cargo rustc -p syntex_syntax -- -Ztime-passes -Zinput-stats -Z incremental-info
   Compiling syntex_syntax v0.42.0
time: 0.108; rss: 75MB	parsing
Lines of code:             33687
Pre-expansion node count:  224033
time: 0.000; rss: 75MB	recursion limit
time: 0.000; rss: 75MB	crate injection
time: 0.000; rss: 75MB	plugin loading
time: 0.000; rss: 75MB	plugin registration
time: 0.274; rss: 145MB	expansion
time: 0.000; rss: 145MB	maybe building test harness
time: 0.007; rss: 145MB	maybe creating a macro crate
Post-expansion node count: 641571
time: 0.000; rss: 145MB	checking for inline asm in case the target doesn't support it
time: 0.013; rss: 145MB	complete gated feature checking
time: 0.023; rss: 145MB	early lint checks
time: 0.008; rss: 145MB	AST validation
time: 0.084; rss: 159MB	name resolution
time: 0.051; rss: 202MB	lowering ast -> hir
time: 0.009; rss: 211MB	indexing hir
time: 0.007; rss: 211MB	attribute checking
time: 0.006; rss: 161MB	language item collection
time: 0.013; rss: 161MB	lifetime resolution
time: 0.000; rss: 161MB	looking for entry point
time: 0.000; rss: 161MB	looking for plugin registrar
time: 0.045; rss: 172MB	region resolution
time: 0.006; rss: 172MB	loop checking
time: 0.006; rss: 172MB	static item recursion checking
time: 0.261; rss: 173MB	compute_incremental_hashes_map
time: 0.000; rss: 173MB	load_dep_graph
time: 0.080; rss: 175MB	type collecting
time: 0.001; rss: 175MB	variance inference
time: 0.039; rss: 178MB	coherence checking
time: 0.099; rss: 181MB	wf checking
time: 0.195; rss: 187MB	item-types checking
time: 3.932; rss: 239MB	item-bodies checking
time: 0.000; rss: 239MB	drop-impl checking
time: 0.313; rss: 240MB	const checking
time: 0.057; rss: 240MB	privacy checking
time: 0.008; rss: 240MB	stability index
time: 0.023; rss: 240MB	intrinsic checking
time: 0.019; rss: 240MB	effect checking
time: 0.060; rss: 240MB	match checking
time: 0.058; rss: 236MB	liveness checking
time: 0.283; rss: 236MB	rvalue checking
time: 0.420; rss: 426MB	MIR dump
  time: 0.058; rss: 429MB	SimplifyCfg
  time: 0.083; rss: 429MB	QualifyAndPromoteConstants
  time: 0.112; rss: 429MB	TypeckMir
  time: 0.005; rss: 429MB	SimplifyBranches
  time: 0.037; rss: 429MB	SimplifyCfg
time: 0.294; rss: 429MB	MIR passes
time: 0.694; rss: 430MB	borrow checking
time: 0.018; rss: 430MB	reachability checking
time: 0.046; rss: 430MB	death checking
time: 0.043; rss: 430MB	stability checking
time: 0.000; rss: 430MB	unused lib feature checking
time: 0.216; rss: 430MB	lint checking
time: 0.000; rss: 430MB	resolving dependency formats
  time: 0.003; rss: 430MB	NoLandingPads
  time: 0.027; rss: 430MB	SimplifyCfg
  time: 0.073; rss: 442MB	EraseRegions
  time: 0.011; rss: 442MB	AddCallGuards
  time: 1.043; rss: 455MB	ElaborateDrops
  time: 0.003; rss: 455MB	NoLandingPads
  time: 0.052; rss: 455MB	SimplifyCfg
  time: 0.031; rss: 455MB	InstCombine
  time: 0.012; rss: 455MB	Deaggregator
  time: 0.003; rss: 455MB	CopyPropagation
  time: 0.009; rss: 455MB	AddCallGuards
  time: 0.003; rss: 455MB	PreTrans
time: 1.271; rss: 455MB	Prepare MIR codegen passes
  time: 0.263; rss: 465MB	write metadata
  time: 0.467; rss: 473MB	translation item collection
  time: 0.067; rss: 478MB	codegen unit partitioning
  time: 0.058; rss: 726MB	internalize symbols
time: 5.054; rss: 604MB	translation
time: 0.000; rss: 604MB	assert dep graph
time: 0.000; rss: 604MB	serialize dep graph
incremental: re-using 0 out of 1 modules
  time: 0.509; rss: 411MB	llvm function passes [0]
  time: 0.256; rss: 416MB	llvm module passes [0]
  time: 10.016; rss: 414MB	codegen passes [0]
  time: 0.001; rss: 416MB	codegen passes [0]
time: 11.565; rss: 416MB	LLVM passes
time: 0.000; rss: 416MB	serialize work products
time: 0.653; rss: 107MB	linking
done
