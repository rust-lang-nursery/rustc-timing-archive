commit bff06afbc5eb980cbfa2fa4f35e0c431828d3471
Merge: 4344f14 d17f0b0
Author: bors <bors@rust-lang.org>
Date:   Sat Oct 8 12:36:11 2016 -0700

    Auto merge of #37027 - alexcrichton:less-deps-in-bootstrap, r=japaric
    
    rustbuild: Optimize build times slightly
    
    As the entry point for building the Rust compiler, a good user experience hinges
    on this compiling quickly to get to the meat of the problem. To that end use
    `#[cfg]`-specific dependencies to avoid building Windows crates on Unix and drop
    the `regex` crate for now which was easily replacable with some string
    searching.
rustc: ./jld-day15-parser
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling day15 v0.1.0 (file:///root/benchmarks/jld-day15-parser)
time: 0.001; rss: 41MB	parsing
Lines of code:             72
Pre-expansion node count:  654
time: 0.000; rss: 41MB	recursion limit
time: 0.000; rss: 41MB	crate injection
time: 0.000; rss: 41MB	plugin loading
time: 0.000; rss: 41MB	plugin registration
time: 0.016; rss: 64MB	expansion
time: 0.000; rss: 64MB	maybe building test harness
time: 0.000; rss: 64MB	maybe creating a macro crate
Post-expansion node count: 1155
time: 0.000; rss: 64MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 64MB	complete gated feature checking
time: 0.000; rss: 64MB	early lint checks
time: 0.000; rss: 64MB	AST validation
time: 0.003; rss: 64MB	name resolution
time: 0.000; rss: 64MB	lowering ast -> hir
time: 0.000; rss: 64MB	indexing hir
time: 0.000; rss: 64MB	attribute checking
time: 0.000; rss: 64MB	language item collection
time: 0.000; rss: 64MB	lifetime resolution
time: 0.000; rss: 64MB	looking for entry point
time: 0.000; rss: 64MB	looking for plugin registrar
time: 0.000; rss: 64MB	region resolution
time: 0.000; rss: 64MB	loop checking
time: 0.000; rss: 64MB	static item recursion checking
time: 0.000; rss: 64MB	compute_incremental_hashes_map
time: 0.000; rss: 64MB	load_dep_graph
time: 0.001; rss: 68MB	type collecting
time: 0.000; rss: 68MB	variance inference
time: 0.005; rss: 68MB	coherence checking
time: 0.005; rss: 68MB	wf checking
time: 0.000; rss: 68MB	item-types checking
time: 0.029; rss: 74MB	item-bodies checking
time: 0.000; rss: 74MB	drop-impl checking
time: 0.001; rss: 74MB	const checking
time: 0.000; rss: 74MB	privacy checking
time: 0.000; rss: 74MB	stability index
time: 0.000; rss: 74MB	intrinsic checking
time: 0.000; rss: 74MB	effect checking
time: 0.000; rss: 74MB	match checking
time: 0.000; rss: 74MB	liveness checking
time: 0.000; rss: 74MB	rvalue checking
time: 0.001; rss: 74MB	MIR dump
  time: 0.000; rss: 74MB	SimplifyCfg
  time: 0.000; rss: 74MB	QualifyAndPromoteConstants
  time: 0.000; rss: 74MB	TypeckMir
  time: 0.000; rss: 74MB	SimplifyBranches
  time: 0.000; rss: 74MB	SimplifyCfg
time: 0.001; rss: 74MB	MIR passes
time: 0.001; rss: 74MB	borrow checking
time: 0.000; rss: 74MB	reachability checking
time: 0.000; rss: 74MB	death checking
time: 0.000; rss: 74MB	stability checking
time: 0.000; rss: 74MB	unused lib feature checking
time: 0.003; rss: 74MB	lint checking
time: 0.001; rss: 74MB	resolving dependency formats
  time: 0.000; rss: 74MB	NoLandingPads
  time: 0.000; rss: 74MB	SimplifyCfg
  time: 0.000; rss: 74MB	EraseRegions
  time: 0.000; rss: 74MB	AddCallGuards
  time: 0.001; rss: 74MB	ElaborateDrops
  time: 0.000; rss: 74MB	NoLandingPads
  time: 0.000; rss: 74MB	SimplifyCfg
  time: 0.000; rss: 74MB	InstCombine
  time: 0.003; rss: 74MB	Deaggregator
  time: 0.000; rss: 74MB	CopyPropagation
  time: 0.000; rss: 74MB	AddCallGuards
  time: 0.000; rss: 74MB	PreTrans
time: 0.004; rss: 74MB	Prepare MIR codegen passes
  time: 0.000; rss: 74MB	write metadata
  time: 0.144; rss: 80MB	translation item collection
  time: 0.003; rss: 82MB	codegen unit partitioning
  time: 0.003; rss: 92MB	internalize symbols
time: 0.667; rss: 92MB	translation
time: 0.000; rss: 92MB	assert dep graph
time: 0.000; rss: 92MB	serialize dep graph
  time: 0.018; rss: 86MB	llvm function passes [0]
  time: 0.001; rss: 86MB	llvm module passes [0]
  time: 0.353; rss: 93MB	codegen passes [0]
  time: 0.000; rss: 92MB	codegen passes [0]
time: 0.373; rss: 92MB	LLVM passes
time: 0.000; rss: 92MB	serialize work products
  time: 0.084; rss: 82MB	running linker
time: 0.085; rss: 82MB	linking
done
