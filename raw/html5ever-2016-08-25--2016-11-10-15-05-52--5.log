commit 3dced6f71e6e8cf8f59e3614194a61427a3a408b
Merge: bc1cc1d 67eeb0a
Author: bors <bors@rust-lang.org>
Date:   Thu Nov 10 11:25:17 2016 -0800

    Auto merge of #37645 - jseyfried:fix_crate_var_in_custom_derives, r=nrc
    
    Fix regression involving custom derives on items with `$crate`
    
    The regression was introduced in #37213.
    
    I believe we cannot make the improvements from #37213 work with the current custom derive setup (c.f. https://github.com/rust-lang/rust/issues/37637#issuecomment-258959145) -- we'll have to wait for `TokenStream`'s API to improve.
    
    Fixes #37637.
    r? @nrc
rustc: ./html5ever-2016-08-25
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling html5ever v0.5.4 (file:///root/benchmarks/html5ever-2016-08-25)
time: 0.024; rss: 47MB	parsing
Lines of code:             8210
Pre-expansion node count:  52140
time: 0.000; rss: 47MB	recursion limit
time: 0.000; rss: 47MB	crate injection
time: 0.000; rss: 47MB	plugin loading
time: 0.000; rss: 47MB	plugin registration
time: 0.668; rss: 102MB	expansion
time: 0.000; rss: 102MB	maybe building test harness
time: 0.002; rss: 102MB	maybe creating a macro crate
Post-expansion node count: 163412
time: 0.000; rss: 102MB	checking for inline asm in case the target doesn't support it
time: 0.003; rss: 102MB	complete gated feature checking
time: 0.008; rss: 102MB	early lint checks
time: 0.002; rss: 102MB	AST validation
time: 0.016; rss: 104MB	name resolution
time: 0.012; rss: 114MB	lowering ast -> hir
time: 0.003; rss: 118MB	indexing hir
time: 0.002; rss: 118MB	attribute checking
time: 0.001; rss: 98MB	language item collection
time: 0.002; rss: 98MB	lifetime resolution
time: 0.000; rss: 98MB	looking for entry point
time: 0.000; rss: 98MB	looking for plugin registrar
time: 0.011; rss: 106MB	region resolution
time: 0.001; rss: 106MB	loop checking
time: 0.001; rss: 106MB	static item recursion checking
time: 0.020; rss: 107MB	compute_incremental_hashes_map
time: 0.000; rss: 107MB	load_dep_graph
time: 0.008; rss: 108MB	type collecting
time: 0.000; rss: 108MB	variance inference
time: 0.011; rss: 109MB	coherence checking
time: 0.020; rss: 110MB	wf checking
time: 0.280; rss: 118MB	item-types checking
time: 0.420; rss: 129MB	item-bodies checking
time: 0.000; rss: 129MB	drop-impl checking
time: 0.060; rss: 137MB	const checking
time: 0.006; rss: 137MB	privacy checking
time: 0.001; rss: 137MB	stability index
time: 0.002; rss: 137MB	intrinsic checking
time: 0.002; rss: 137MB	effect checking
time: 0.014; rss: 137MB	match checking
time: 0.011; rss: 132MB	liveness checking
time: 0.021; rss: 132MB	rvalue checking
time: 0.110; rss: 181MB	MIR dump
  time: 0.008; rss: 169MB	SimplifyCfg
  time: 0.013; rss: 172MB	QualifyAndPromoteConstants
  time: 0.019; rss: 172MB	TypeckMir
  time: 0.000; rss: 172MB	SimplifyBranches
  time: 0.004; rss: 172MB	SimplifyCfg
time: 0.045; rss: 172MB	MIR cleanup and validation
time: 0.078; rss: 178MB	borrow checking
time: 0.002; rss: 178MB	reachability checking
time: 0.005; rss: 178MB	death checking
time: 0.006; rss: 179MB	stability checking
time: 0.000; rss: 179MB	unused lib feature checking
time: 0.055; rss: 179MB	lint checking
time: 0.000; rss: 179MB	resolving dependency formats
  time: 0.000; rss: 179MB	NoLandingPads
  time: 0.003; rss: 179MB	SimplifyCfg
  time: 0.009; rss: 179MB	EraseRegions
  time: 0.001; rss: 179MB	AddCallGuards
  time: 0.073; rss: 186MB	ElaborateDrops
  time: 0.000; rss: 186MB	NoLandingPads
  time: 0.007; rss: 182MB	SimplifyCfg
  time: 0.007; rss: 180MB	InstCombine
  time: 0.001; rss: 180MB	Deaggregator
  time: 0.000; rss: 180MB	CopyPropagation
  time: 0.007; rss: 179MB	SimplifyLocals
  time: 0.001; rss: 179MB	AddCallGuards
  time: 0.000; rss: 179MB	PreTrans
time: 0.110; rss: 179MB	MIR optimisations
  time: 0.011; rss: 180MB	write metadata
  time: 0.041; rss: 182MB	translation item collection
  time: 0.005; rss: 182MB	codegen unit partitioning
  time: 0.005; rss: 195MB	internalize symbols
time: 0.272; rss: 195MB	translation
time: 0.000; rss: 195MB	assert dep graph
time: 0.000; rss: 195MB	serialize dep graph
  time: 0.020; rss: 104MB	llvm function passes [0]
  time: 0.012; rss: 106MB	llvm module passes [0]
  time: 0.480; rss: 109MB	codegen passes [0]
  time: 0.000; rss: 109MB	codegen passes [0]
time: 0.554; rss: 109MB	LLVM passes
time: 0.000; rss: 109MB	serialize work products
time: 0.025; rss: 92MB	linking
done
