commit e5ed0a5d78be74238af31631e7ecf311eb661586
Merge: 7c535c6 36f2af1
Author: bors <bors@rust-lang.org>
Date:   Sat Nov 19 23:39:25 2016 -0600

    Auto merge of #37842 - nikomatsakis:incremental-test, r=mw
    
    Add tests for incremental reuse scenarios
    
    These are microbenchmarks checking that we achieve the expected reuse in the scenarios covered by incremental beta.
    
    r? @michaelwoerister
rustc: ./rust-encoding-0.3.0
cargo rustc  -- -Ztime-passes -Zinput-stats
   Compiling encoding v0.3.0-dev (file:///root/benchmarks/rust-encoding-0.3.0)
time: 0.021; rss: 42MB	parsing
Lines of code:             5757
Pre-expansion node count:  26523
time: 0.000; rss: 42MB	recursion limit
time: 0.000; rss: 42MB	crate injection
time: 0.000; rss: 42MB	plugin loading
time: 0.000; rss: 42MB	plugin registration
time: 0.037; rss: 69MB	expansion
time: 0.000; rss: 69MB	maybe building test harness
time: 0.000; rss: 69MB	maybe creating a macro crate
Post-expansion node count: 37888
time: 0.000; rss: 69MB	checking for inline asm in case the target doesn't support it
time: 0.001; rss: 69MB	complete gated feature checking
time: 0.001; rss: 69MB	early lint checks
time: 0.000; rss: 69MB	AST validation
time: 0.004; rss: 70MB	name resolution
time: 0.006; rss: 72MB	lowering ast -> hir
time: 0.000; rss: 72MB	indexing hir
time: 0.000; rss: 72MB	attribute checking
time: 0.000; rss: 71MB	language item collection
time: 0.001; rss: 71MB	lifetime resolution
time: 0.000; rss: 71MB	looking for entry point
time: 0.000; rss: 71MB	looking for plugin registrar
time: 0.005; rss: 73MB	region resolution
time: 0.000; rss: 73MB	loop checking
time: 0.000; rss: 73MB	static item recursion checking
time: 0.013; rss: 73MB	compute_incremental_hashes_map
time: 0.000; rss: 73MB	load_dep_graph
time: 0.008; rss: 74MB	type collecting
time: 0.000; rss: 74MB	variance inference
time: 0.000; rss: 75MB	impl wf inference
time: 0.008; rss: 76MB	coherence checking
time: 0.010; rss: 76MB	wf checking
time: 0.010; rss: 77MB	item-types checking
time: 0.121; rss: 80MB	item-bodies checking
time: 0.000; rss: 80MB	drop-impl checking
time: 0.008; rss: 80MB	const checking
time: 0.002; rss: 80MB	privacy checking
time: 0.000; rss: 80MB	stability index
time: 0.001; rss: 80MB	intrinsic checking
time: 0.000; rss: 80MB	effect checking
time: 0.004; rss: 80MB	match checking
time: 0.001; rss: 80MB	liveness checking
time: 0.005; rss: 80MB	rvalue checking
time: 0.026; rss: 88MB	MIR dump
  time: 0.003; rss: 88MB	SimplifyCfg
  time: 0.003; rss: 88MB	QualifyAndPromoteConstants
  time: 0.004; rss: 88MB	TypeckMir
  time: 0.000; rss: 88MB	SimplifyBranches
  time: 0.001; rss: 89MB	SimplifyCfg
time: 0.012; rss: 89MB	MIR cleanup and validation
time: 0.018; rss: 89MB	borrow checking
time: 0.000; rss: 89MB	reachability checking
time: 0.001; rss: 89MB	death checking
time: 0.001; rss: 89MB	stability checking
time: 0.000; rss: 89MB	unused lib feature checking
time: 0.014; rss: 89MB	lint checking
time: 0.000; rss: 89MB	resolving dependency formats
  time: 0.000; rss: 89MB	NoLandingPads
  time: 0.001; rss: 89MB	SimplifyCfg
  time: 0.002; rss: 89MB	EraseRegions
  time: 0.000; rss: 89MB	AddCallGuards
  time: 0.025; rss: 90MB	ElaborateDrops
  time: 0.000; rss: 90MB	NoLandingPads
  time: 0.002; rss: 90MB	SimplifyCfg
  time: 0.001; rss: 90MB	InstCombine
  time: 0.001; rss: 90MB	Deaggregator
  time: 0.000; rss: 90MB	CopyPropagation
  time: 0.001; rss: 90MB	SimplifyLocals
  time: 0.000; rss: 90MB	AddCallGuards
  time: 0.000; rss: 90MB	PreTrans
time: 0.051; rss: 90MB	MIR optimisations
  time: 0.004; rss: 91MB	write metadata
  time: 0.274; rss: 170MB	translation item collection
  time: 0.003; rss: 171MB	codegen unit partitioning
  time: 0.003; rss: 193MB	internalize symbols
time: 0.580; rss: 193MB	translation
time: 0.000; rss: 193MB	assert dep graph
time: 0.000; rss: 193MB	serialize dep graph
  time: 0.026; rss: 105MB	llvm function passes [0]
  time: 0.058; rss: 113MB	llvm module passes [0]
  time: 0.625; rss: 119MB	codegen passes [0]
  time: 0.000; rss: 119MB	codegen passes [0]
time: 0.765; rss: 119MB	LLVM passes
time: 0.000; rss: 119MB	serialize work products
time: 0.039; rss: 90MB	linking
done
