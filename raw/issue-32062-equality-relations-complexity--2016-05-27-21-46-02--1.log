commit 8b012ed142f03c9082773f5091c58c82d47cae79
Merge: 7bddce6 53ab137
Author: bors <bors@rust-lang.org>
Date:   Fri May 27 17:46:14 2016 -0700

    Auto merge of #33706 - jseyfried:refactor_cfg, r=nrc
    
    Perform `cfg` attribute processing during macro expansion and fix bugs
    
    This PR refactors `cfg` attribute processing and fixes bugs. More specifically:
     - It merges gated feature checking for stmt/expr attributes, `cfg_attr` processing, and `cfg` processing into a single fold.
      - This allows feature gated `cfg` variables to be used in `cfg_attr` on unconfigured items. All other feature gated attributes can already be used on unconfigured items.
     - It performs `cfg` attribute processing during macro expansion instead of after expansion so that macro-expanded items are configured the same as ordinary items. In particular, to match their non-expanded counterparts,
      - macro-expanded unconfigured macro invocations are no longer expanded,
      - macro-expanded unconfigured macro definitions are no longer usable, and
      - feature gated `cfg` variables on macro-expanded macro definitions/invocations are now errors.
    
    This is a [breaking-change]. For example, the following would break:
    ```rust
    macro_rules! m {
        () => {
            #[cfg(attr)]
            macro_rules! foo { () => {} }
            foo!(); // This will be an error
    
            macro_rules! bar { () => { fn f() {} } }
            #[cfg(attr)] bar!(); // This will no longer be expanded ...
            fn g() { f(); } // ... so that `f` will be unresolved.
    
            #[cfg(target_thread_local)] // This will be a gated feature error
            macro_rules! baz { () => {} }
        }
    }
    
    m!();
    ```
    
    r? @nrc
rustc: ./issue-32062-equality-relations-complexity
/root/rust/x86_64-unknown-linux-gnu/stage2/bin/rustc issue-32062.rs -Ztime-passes -Zinput-stats
time: 0.001; rss: 44MB	parsing
Lines of code:             60
Pre-expansion node count:  578
time: 0.000; rss: 48MB	configuration 1
time: 0.000; rss: 48MB	recursion limit
time: 0.000; rss: 48MB	crate injection
time: 0.018; rss: 82MB	macro loading
time: 0.000; rss: 82MB	plugin loading
time: 0.000; rss: 82MB	plugin registration
time: 0.001; rss: 82MB	expansion
time: 0.000; rss: 82MB	gated configuration checking
time: 0.000; rss: 82MB	maybe building test harness
time: 0.000; rss: 82MB	prelude injection
time: 0.000; rss: 82MB	checking that all macro invocations are gone
time: 0.000; rss: 82MB	checking for inline asm in case the target doesn't support it
time: 0.000; rss: 82MB	complete gated feature checking
Post-expansion node count: 591
time: 0.000; rss: 82MB	assigning node ids
time: 0.000; rss: 82MB	collecting defs
time: 0.004; rss: 82MB	external crate/lib resolution
time: 0.000; rss: 82MB	early lint checks
time: 0.000; rss: 87MB	name resolution
time: 0.000; rss: 87MB	lowering ast -> hir
time: 0.000; rss: 87MB	indexing hir
time: 0.000; rss: 87MB	attribute checking
time: 0.000; rss: 87MB	language item collection
time: 0.000; rss: 87MB	lifetime resolution
time: 0.000; rss: 87MB	looking for entry point
time: 0.000; rss: 87MB	looking for plugin registrar
time: 0.000; rss: 87MB	region resolution
time: 0.000; rss: 87MB	loop checking
time: 0.000; rss: 87MB	static item recursion checking
time: 0.000; rss: 87MB	load_dep_graph
time: 0.001; rss: 87MB	type collecting
time: 0.000; rss: 87MB	variance inference
time: 0.005; rss: 87MB	coherence checking
time: 0.008; rss: 87MB	wf checking
time: 0.001; rss: 87MB	item-types checking
time: 8.093; rss: 95MB	item-bodies checking
time: 0.000; rss: 95MB	drop-impl checking
time: 0.001; rss: 95MB	const checking
time: 0.000; rss: 95MB	privacy checking
time: 0.000; rss: 95MB	stability index
time: 0.000; rss: 95MB	intrinsic checking
time: 0.000; rss: 95MB	effect checking
time: 0.000; rss: 94MB	match checking
time: 0.000; rss: 94MB	liveness checking
time: 0.001; rss: 94MB	rvalue checking
time: 0.001; rss: 94MB	MIR dump
time: 0.000; rss: 94MB	MIR passes
time: 0.002; rss: 94MB	borrow checking
time: 0.000; rss: 94MB	reachability checking
time: 0.000; rss: 94MB	death checking
time: 0.000; rss: 94MB	stability checking
time: 0.000; rss: 94MB	unused lib feature checking
time: 0.000; rss: 94MB	lint checking
time: 0.002; rss: 94MB	resolving dependency formats
time: 0.000; rss: 94MB	Prepare MIR codegen passes
  time: 0.000; rss: 95MB	write metadata
  time: 1.903; rss: 98MB	translation item collection
  time: 0.000; rss: 98MB	codegen unit partitioning
time: 13.306; rss: 103MB	translation
time: 0.000; rss: 103MB	assert dep graph
time: 0.000; rss: 103MB	serialize dep graph
  time: 0.000; rss: 96MB	llvm function passes [0]
  time: 0.000; rss: 96MB	llvm module passes [0]
  time: 0.006; rss: 101MB	codegen passes [0]
  time: 0.000; rss: 101MB	codegen passes [0]
time: 0.007; rss: 101MB	LLVM passes
  time: 0.110; rss: 101MB	running linker
time: 0.110; rss: 101MB	linking
done
