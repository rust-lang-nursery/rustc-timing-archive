commit a7b2232d20320dc3b4044a2aec1d51a129e7e17d
Merge: 9627e9e 8cfc69e
Author: bors <bors@rust-lang.org>
Date:   Wed Sep 7 15:45:14 2016 -0700

    Auto merge of #36292 - japaric:musl-root, r=alexcrichton
    
    rustbuild: per target musl-root
    
    config.toml now accepts a target.$TARGET.musl-root key that lets you
    override the "build" musl-root value, which is set via the --musl-root
    flag or via the build.musl-root key.
    
    With this change, it's now possible to compile std for several musl
    targets at once. Here's are the sample commands to do such thing:
    
    ```
    $ configure \
        --enable-rustbuild \
        --target=x86_64-unknown-linux-musl,arm-unknown-linux-musleabi \
        --musl-root=/musl/x86_64-unknown-linux-musl/
    
    $ edit config.toml && tail config.toml
    [target.arm-unknown-linux-musleabi]
    musl-root = "/x-tools/arm-unknown-linux-musleabi/arm-unknown-linux-musleabi/sysroot/usr"
    
    $ make
    ```
    
    r? @alexcrichton
    With this we should be able to start producing releases of std for arm musl targets
rustc: ./hyper.0.5.0
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling hyper v0.5.0 (file:///root/benchmarks/hyper.0.5.0)
time: 0.028; rss: 51MB	parsing
Lines of code:             9154
Pre-expansion node count:  44873
time: 0.003; rss: 51MB	configuration
time: 0.000; rss: 51MB	recursion limit
time: 0.000; rss: 51MB	crate injection
time: 0.000; rss: 51MB	plugin loading
time: 0.000; rss: 51MB	plugin registration
time: 0.092; rss: 79MB	expansion
time: 0.000; rss: 79MB	maybe building test harness
time: 0.001; rss: 79MB	maybe creating a macro crate
time: 0.005; rss: 79MB	assigning node ids
Post-expansion node count: 101537
time: 0.000; rss: 79MB	checking for inline asm in case the target doesn't support it
time: 0.002; rss: 79MB	complete gated feature checking
time: 0.003; rss: 81MB	collecting defs
time: 0.009; rss: 87MB	external crate/lib resolution
time: 0.003; rss: 87MB	early lint checks
time: 0.001; rss: 87MB	AST validation
time: 0.015; rss: 95MB	name resolution
time: 0.008; rss: 99MB	lowering ast -> hir
time: 0.002; rss: 101MB	indexing hir
time: 0.001; rss: 101MB	attribute checking
time: 0.001; rss: 94MB	language item collection
time: 0.002; rss: 94MB	lifetime resolution
time: 0.000; rss: 94MB	looking for entry point
time: 0.000; rss: 94MB	looking for plugin registrar
time: 0.006; rss: 99MB	region resolution
time: 0.001; rss: 99MB	loop checking
time: 0.001; rss: 99MB	static item recursion checking
time: 0.040; rss: 99MB	compute_incremental_hashes_map
time: 0.000; rss: 99MB	load_dep_graph
time: 0.023; rss: 100MB	type collecting
time: 0.000; rss: 100MB	variance inference
time: 0.035; rss: 103MB	coherence checking
time: 0.056; rss: 104MB	wf checking
time: 0.029; rss: 107MB	item-types checking
time: 0.364; rss: 118MB	item-bodies checking
time: 0.000; rss: 118MB	drop-impl checking
time: 0.038; rss: 120MB	const checking
time: 0.006; rss: 120MB	privacy checking
time: 0.001; rss: 120MB	stability index
time: 0.005; rss: 120MB	intrinsic checking
time: 0.002; rss: 120MB	effect checking
time: 0.013; rss: 120MB	match checking
time: 0.005; rss: 120MB	liveness checking
time: 0.027; rss: 120MB	rvalue checking
time: 0.056; rss: 136MB	MIR dump
  time: 0.007; rss: 136MB	SimplifyCfg
  time: 0.013; rss: 136MB	QualifyAndPromoteConstants
  time: 0.017; rss: 136MB	TypeckMir
  time: 0.001; rss: 136MB	SimplifyBranches
  time: 0.004; rss: 136MB	SimplifyCfg
time: 0.041; rss: 136MB	MIR passes
time: 0.061; rss: 136MB	borrow checking
time: 0.003; rss: 136MB	reachability checking
time: 0.005; rss: 136MB	death checking
time: 0.005; rss: 139MB	stability checking
time: 0.000; rss: 139MB	unused lib feature checking
time: 0.043; rss: 139MB	lint checking
time: 0.000; rss: 139MB	resolving dependency formats
  time: 0.001; rss: 139MB	NoLandingPads
  time: 0.003; rss: 139MB	SimplifyCfg
  time: 0.008; rss: 139MB	EraseRegions
  time: 0.001; rss: 139MB	AddCallGuards
  time: 0.054; rss: 141MB	ElaborateDrops
  time: 0.001; rss: 141MB	NoLandingPads
  time: 0.005; rss: 141MB	SimplifyCfg
  time: 0.003; rss: 141MB	Deaggregator
  time: 0.001; rss: 141MB	AddCallGuards
  time: 0.000; rss: 141MB	PreTrans
time: 0.077; rss: 141MB	Prepare MIR codegen passes
  time: 0.055; rss: 145MB	write metadata
  time: 0.113; rss: 149MB	translation item collection
  time: 0.019; rss: 151MB	codegen unit partitioning
  time: 0.032; rss: 218MB	internalize symbols
time: 1.323; rss: 208MB	translation
time: 0.000; rss: 208MB	assert dep graph
time: 0.000; rss: 208MB	serialize dep graph
  time: 0.100; rss: 158MB	llvm function passes [0]
  time: 0.049; rss: 161MB	llvm module passes [0]
  time: 1.846; rss: 164MB	codegen passes [0]
  time: 0.001; rss: 164MB	codegen passes [0]
time: 2.160; rss: 164MB	LLVM passes
time: 0.000; rss: 164MB	serialize work products
time: 0.156; rss: 99MB	linking
done
