commit 1f131fbe7799b9c3d4a775798b90760f7c11ef33
Merge: 53a03b5 6908e4e
Author: bors <bors@rust-lang.org>
Date:   Mon Mar 28 10:37:30 2016 -0700

    Auto merge of #32560 - alexcrichton:metadata-for-our-crates, r=nikomatsakis
    
    mk: Add `-C metadata` for compiling crates we ship
    
    This should re-enable all external builds of crates with the same name. Right
    now Cargo doesn't pass `-C metadata` for the top-level library being compiled,
    so if that library is called `libc`, for example, then it won't be able to link
    to the standard library which *also* has a `libc` library compiled without `-C
    metadata`. This can result in naming conflicts which need to be resolved.
    
    By passing `-C metadata` to the in-tree crates we ship it should add some extra
    salt to all symbol names to ensure that they don't collide.
    
    Closes #32532
rustc: ./regex.0.1.30
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling regex v0.1.30 (file:///root/benchmarks/regex.0.1.30)
time: 0.061; rss: 51MB	parsing
Lines of code:             8558
Pre-expansion node count:  58217
time: 0.011; rss: 51MB	configuration 1
time: 0.000; rss: 51MB	recursion limit
time: 0.001; rss: 51MB	gated macro checking
time: 0.000; rss: 51MB	crate injection
time: 0.003; rss: 55MB	macro loading
time: 0.000; rss: 55MB	plugin loading
time: 0.000; rss: 55MB	plugin registration
time: 0.057; rss: 57MB	expansion
time: 0.001; rss: 57MB	complete gated feature checking 1
time: 0.013; rss: 57MB	configuration 2
time: 0.000; rss: 57MB	gated configuration checking
time: 0.006; rss: 57MB	maybe building test harness
time: 0.006; rss: 57MB	prelude injection
time: 0.001; rss: 57MB	checking that all macro invocations are gone
time: 0.000; rss: 57MB	checking for inline asm in case the target doesn't support it
time: 0.001; rss: 57MB	complete gated feature checking 2
time: 0.001; rss: 57MB	const fn bodies and arguments
Post-expansion node count: 68485
time: 0.006; rss: 57MB	assigning node ids
time: 0.009; rss: 68MB	lowering ast -> hir
time: 0.002; rss: 70MB	indexing hir
time: 0.001; rss: 70MB	attribute checking
time: 0.007; rss: 70MB	early lint checks
time: 0.001; rss: 62MB	external crate/lib resolution
time: 0.001; rss: 62MB	language item collection
time: 0.009; rss: 73MB	resolution
time: 0.001; rss: 73MB	lifetime resolution
time: 0.000; rss: 73MB	looking for entry point
time: 0.000; rss: 73MB	looking for plugin registrar
time: 0.005; rss: 76MB	region resolution
time: 0.001; rss: 76MB	loop checking
time: 0.001; rss: 76MB	static item recursion checking
time: 0.003; rss: 79MB	type collecting
time: 0.000; rss: 79MB	variance inference
time: 0.069; rss: 97MB	coherence checking
time: 0.010; rss: 97MB	wf checking
time: 0.274; rss: 102MB	item-types checking
time: 0.196; rss: 115MB	item-bodies checking
time: 0.000; rss: 115MB	drop-impl checking
time: 0.024; rss: 115MB	const checking
time: 0.004; rss: 115MB	privacy checking
time: 0.001; rss: 115MB	stability index
time: 0.001; rss: 115MB	intrinsic checking
time: 0.001; rss: 115MB	effect checking
time: 0.003; rss: 115MB	match checking
time: 0.002; rss: 115MB	liveness checking
time: 0.007; rss: 115MB	rvalue checking
time: 0.015; rss: 118MB	MIR dump
time: 0.008; rss: 118MB	MIR passes
time: 0.019; rss: 118MB	borrow checking
time: 0.000; rss: 118MB	reachability checking
time: 0.003; rss: 118MB	death checking
time: 0.002; rss: 118MB	stability checking
time: 0.000; rss: 118MB	unused lib feature checking
time: 0.027; rss: 118MB	lint checking
time: 0.000; rss: 118MB	resolving dependency formats
  time: 0.056; rss: 129MB	translation item collection
  time: 0.130; rss: 185MB	write metadata
time: 0.610; rss: 185MB	translation
  time: 0.036; rss: 120MB	llvm function passes [0]
  time: 0.017; rss: 121MB	llvm module passes [0]
  time: 0.611; rss: 125MB	codegen passes [0]
  time: 0.001; rss: 106MB	codegen passes [0]
time: 0.740; rss: 104MB	LLVM passes
time: 0.065; rss: 102MB	linking
done
