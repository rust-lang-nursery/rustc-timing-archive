commit f59fd4642534e80a61982ce3e10c147d97054212
Merge: ee8b257 b980f22
Author: bors <bors@rust-lang.org>
Date:   Fri Feb 26 13:38:46 2016 +0000

    Auto merge of #31846 - alexcrichton:better-disable-jemallc, r=brson
    
    The `--disable-jemalloc` configure option has a failure mode where it will
    create a distribution that is not compatible with other compilers. For example
    the nightly for Linux will assume that it will link to jemalloc by default as
    an allocator for executable crates. If, however, a standard library is used
    which was built via `./configure --disable-jemalloc` then this will fail
    because the jemalloc crate wasn't built.
    
    While this seems somewhat reasonable as a niche situation, the same mechanism is
    used for disabling jemalloc for platforms that just don't support it. For
    example if the rumprun target is compiled then the sibiling Linux target *also*
    doesn't have jemalloc. This is currently a problem for our cross-build nightlies
    which build many targets. If rumprun is also built, it will disable jemalloc for
    all targets, which isn't desired.
    
    This commit moves the platform-specific disabling of jemalloc as hardcoded logic
    into the makefiles that is scoped per-platform. This way when configuring
    multiple targets **without the `--disable-jemalloc` option specified** all
    targets will get jemalloc as they should.
rustc: ./piston-image-0.3.11
cargo rustc -- -Ztime-passes -Zinput-stats
    Updating registry `https://github.com/rust-lang/crates.io-index`
   Compiling glob v0.2.10
   Compiling gcc v0.3.25
   Compiling bitflags v0.4.0
   Compiling color_quant v1.0.0
   Compiling libc v0.2.7
   Compiling lzw v0.8.0
   Compiling byteorder v0.3.13
   Compiling rustc-serialize v0.3.18
   Compiling gif v0.5.1
   Compiling rand v0.3.14
   Compiling miniz-sys v0.1.7
   Compiling flate2 v0.2.13
   Compiling num v0.1.31
   Compiling png v0.3.1
   Compiling enum_primitive v0.0.1
   Compiling image v0.3.11 (file:///root/benchmarks/piston-image-0.3.11)
time: 0.045; rss: 49MB	parsing
Lines of code:             10676
Pre-expansion node count:  84646
time: 0.016; rss: 49MB	configuration 1
time: 0.000; rss: 49MB	recursion limit
time: 0.001; rss: 49MB	gated macro checking
time: 0.000; rss: 49MB	crate injection
time: 0.005; rss: 54MB	macro loading
time: 0.000; rss: 54MB	plugin loading
time: 0.000; rss: 54MB	plugin registration
time: 0.117; rss: 57MB	expansion
time: 0.003; rss: 57MB	complete gated feature checking 1
time: 0.026; rss: 58MB	configuration 2
time: 0.000; rss: 58MB	gated configuration checking
time: 0.013; rss: 58MB	maybe building test harness
time: 0.012; rss: 58MB	prelude injection
time: 0.001; rss: 58MB	checking that all macro invocations are gone
time: 0.000; rss: 58MB	checking for inline asm in case the target doesn't support it
time: 0.003; rss: 58MB	complete gated feature checking 2
time: 0.001; rss: 58MB	const fn bodies and arguments
Post-expansion node count: 144338
time: 0.012; rss: 58MB	assigning node ids
time: 0.020; rss: 69MB	lowering ast -> hir
time: 0.005; rss: 71MB	indexing hir
time: 0.002; rss: 71MB	attribute checking
time: 0.011; rss: 71MB	early lint checks
time: 0.003; rss: 63MB	external crate/lib resolution
time: 0.001; rss: 63MB	language item collection
time: 0.028; rss: 81MB	resolution
time: 0.002; rss: 81MB	lifetime resolution
time: 0.000; rss: 81MB	looking for entry point
time: 0.000; rss: 81MB	looking for plugin registrar
time: 0.009; rss: 88MB	region resolution
time: 0.001; rss: 88MB	loop checking
time: 0.001; rss: 88MB	static item recursion checking
time: 0.010; rss: 92MB	type collecting
time: 0.000; rss: 92MB	variance inference
time: 0.030; rss: 109MB	coherence checking
time: 0.147; rss: 111MB	wf checking
time: 0.046; rss: 112MB	item-types checking
time: 1.357; rss: 145MB	item-bodies checking
time: 0.000; rss: 145MB	drop-impl checking
time: 0.066; rss: 145MB	const checking
time: 0.014; rss: 145MB	privacy checking
time: 0.001; rss: 145MB	stability index
time: 0.009; rss: 145MB	intrinsic checking
time: 0.003; rss: 145MB	effect checking
time: 0.024; rss: 145MB	match checking
time: 0.010; rss: 145MB	liveness checking
time: 0.073; rss: 145MB	rvalue checking
time: 0.106; rss: 151MB	MIR dump
time: 0.000; rss: 151MB	MIR passes
time: 0.142; rss: 154MB	borrow checking
time: 0.003; rss: 154MB	reachability checking
time: 0.009; rss: 154MB	death checking
time: 0.009; rss: 154MB	stability checking
time: 0.000; rss: 154MB	unused lib feature checking
time: 0.081; rss: 154MB	lint checking
makefile:2: recipe for target 'all' failed
done
