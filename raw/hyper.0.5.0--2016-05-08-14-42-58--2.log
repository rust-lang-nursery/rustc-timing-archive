commit ebe6da34ffc72a701f4189ef7be5ab2c1cb6e8c9
Merge: cae42a4 ca03b81
Author: bors <bors@rust-lang.org>
Date:   Sun May 8 09:13:19 2016 -0700

    Auto merge of #33414 - Nercury:master, r=alexcrichton
    
    Add armv7-linux-androideabi target
    
    This PR adds `armv7-linux-androideabi` target that matches `armeabi-v7a` Android ABI, ~~downscales `arm-linux-androideabi` target to match `armeabi` Android ABI~~ (TBD later if needed).
    
    This should allow us to get the best performance from every [Android ABI level](http://developer.android.com/ndk/guides/abis.html).
    
    Currently existing target `arm-linux-androideabi` started gaining features out of the supported range of [android `armeabi`](http://developer.android.com/ndk/guides/abis.html). While android compiler does not use a different target for later supported `armv7` architecture, it has distinct ABI name `armeabi-v7a`. We decided to add rust target `armv7-linux-androideabi` to match it.
    
    Note that `NEON`, `VFPv3-D32`, and `ThumbEE` instruction sets are not added, because not all android devices are guaranteed to support all or some of these, and [their availability should be checked at runtime](http://developer.android.com/ndk/guides/abis.html#v7a).
    
    ~~This reduces performance of existing `arm-linux-androideabi` and may make it _much_ slower (we are talking more than order of magnitude in some random ad-hoc fp benchmark that I did).~~
    
    Part of #33278.
rustc: ./hyper.0.5.0
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling hyper v0.5.0 (file:///root/benchmarks/hyper.0.5.0)
time: 0.045; rss: 49MB	parsing
Lines of code:             9154
Pre-expansion node count:  45594
time: 0.009; rss: 50MB	configuration 1
time: 0.000; rss: 50MB	recursion limit
time: 0.000; rss: 50MB	crate injection
time: 0.005; rss: 55MB	macro loading
time: 0.000; rss: 55MB	plugin loading
time: 0.000; rss: 55MB	plugin registration
time: 0.201; rss: 64MB	expansion
time: 0.030; rss: 64MB	configuration 2
time: 0.000; rss: 64MB	gated configuration checking
time: 0.011; rss: 64MB	maybe building test harness
time: 0.008; rss: 64MB	prelude injection
time: 0.001; rss: 64MB	checking that all macro invocations are gone
time: 0.000; rss: 64MB	checking for inline asm in case the target doesn't support it
time: 0.002; rss: 64MB	complete gated feature checking
Post-expansion node count: 107138
time: 0.008; rss: 64MB	assigning node ids
time: 0.007; rss: 66MB	collecting defs
time: 0.005; rss: 68MB	external crate/lib resolution
time: 0.020; rss: 74MB	lowering ast -> hir
time: 0.003; rss: 75MB	indexing hir
time: 0.001; rss: 75MB	attribute checking
time: 0.007; rss: 75MB	early lint checks
time: 0.001; rss: 68MB	language item collection
time: 0.025; rss: 85MB	name resolution
time: 0.002; rss: 85MB	lifetime resolution
time: 0.000; rss: 85MB	looking for entry point
time: 0.000; rss: 85MB	looking for plugin registrar
time: 0.007; rss: 87MB	region resolution
time: 0.001; rss: 87MB	loop checking
time: 0.001; rss: 87MB	static item recursion checking
time: 0.000; rss: 87MB	load_dep_graph
time: 0.018; rss: 98MB	type collecting
time: 0.000; rss: 98MB	variance inference
time: 0.046; rss: 113MB	coherence checking
time: 0.079; rss: 114MB	wf checking
time: 0.032; rss: 114MB	item-types checking
time: 0.506; rss: 131MB	item-bodies checking
time: 0.000; rss: 131MB	drop-impl checking
time: 0.038; rss: 134MB	const checking
time: 0.008; rss: 134MB	privacy checking
time: 0.001; rss: 134MB	stability index
time: 0.004; rss: 134MB	intrinsic checking
time: 0.002; rss: 134MB	effect checking
time: 0.012; rss: 134MB	match checking
time: 0.005; rss: 135MB	liveness checking
time: 0.025; rss: 135MB	rvalue checking
time: 0.065; rss: 143MB	MIR dump
time: 0.037; rss: 143MB	MIR passes
time: 0.065; rss: 144MB	borrow checking
time: 0.003; rss: 144MB	reachability checking
time: 0.006; rss: 144MB	death checking
time: 0.006; rss: 144MB	stability checking
time: 0.000; rss: 144MB	unused lib feature checking
time: 0.047; rss: 144MB	lint checking
time: 0.000; rss: 144MB	resolving dependency formats
time: 0.013; rss: 145MB	Prepare MIR codegen passes
  time: 0.201; rss: 157MB	translation item collection
  time: 0.012; rss: 158MB	codegen unit partitioning
  time: 0.140; rss: 280MB	write metadata
time: 1.783; rss: 280MB	translation
time: 0.001; rss: 280MB	assert dep graph
time: 0.000; rss: 280MB	serialize dep graph
  time: 0.097; rss: 165MB	llvm function passes [0]
  time: 0.048; rss: 166MB	llvm module passes [0]
  time: 1.632; rss: 171MB	codegen passes [0]
  time: 0.001; rss: 121MB	codegen passes [0]
time: 1.981; rss: 121MB	LLVM passes
time: 0.177; rss: 119MB	linking
done
