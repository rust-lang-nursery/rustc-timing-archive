commit 954873055a998a06841ac19b39b1fe18a6641731
Merge: 1d64acd a84b550
Author: bors <bors@rust-lang.org>
Date:   Fri Sep 30 07:35:04 2016 -0700

    Auto merge of #36823 - durka:discriminant_value, r=nagisa
    
    add wrapper for discriminant_value, take 2
    
    [This is #34785 reopened, since @bors apparently gave up on that thread.]
    
    add wrapper for discriminant_value intrinsic
    
    Implementation of [RFC 1696](https://github.com/rust-lang/rfcs/blob/master/text/1696-discriminant.md).
    
    Wraps the `discriminant_value` intrinsic under the name `std::mem::discriminant`. In order to avoid prematurely leaking information about the implementation of enums, the return value is an opaque type, generic over the enum type, which implements Copy, Clone, PartialEq, Eq, Hash, and Debug (notably not PartialOrd). There is currently no way to get the value out excepting printing the debug representation.
    
    The wrapper is safe and can be stabilized soon as per discussion in #24263.
    
    cc @aturon
    r? @nagisa
rustc: ./hyper.0.5.0
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling hyper v0.5.0 (file:///root/benchmarks/hyper.0.5.0)
time: 0.026; rss: 50MB	parsing
Lines of code:             9003
Pre-expansion node count:  44129
time: 0.000; rss: 50MB	recursion limit
time: 0.000; rss: 50MB	crate injection
time: 0.000; rss: 50MB	plugin loading
time: 0.000; rss: 50MB	plugin registration
time: 0.100; rss: 87MB	expansion
time: 0.000; rss: 87MB	maybe building test harness
time: 0.001; rss: 87MB	maybe creating a macro crate
Post-expansion node count: 101371
time: 0.000; rss: 87MB	checking for inline asm in case the target doesn't support it
time: 0.002; rss: 87MB	complete gated feature checking
time: 0.003; rss: 87MB	early lint checks
time: 0.001; rss: 87MB	AST validation
time: 0.016; rss: 91MB	name resolution
time: 0.008; rss: 95MB	lowering ast -> hir
time: 0.002; rss: 98MB	indexing hir
time: 0.001; rss: 98MB	attribute checking
time: 0.001; rss: 91MB	language item collection
time: 0.001; rss: 91MB	lifetime resolution
time: 0.000; rss: 91MB	looking for entry point
time: 0.000; rss: 91MB	looking for plugin registrar
time: 0.006; rss: 96MB	region resolution
time: 0.001; rss: 96MB	loop checking
time: 0.001; rss: 96MB	static item recursion checking
time: 0.040; rss: 95MB	compute_incremental_hashes_map
time: 0.000; rss: 95MB	load_dep_graph
time: 0.022; rss: 97MB	type collecting
time: 0.000; rss: 97MB	variance inference
time: 0.033; rss: 101MB	coherence checking
time: 0.051; rss: 102MB	wf checking
time: 0.021; rss: 102MB	item-types checking
time: 0.353; rss: 113MB	item-bodies checking
time: 0.000; rss: 113MB	drop-impl checking
time: 0.033; rss: 115MB	const checking
time: 0.006; rss: 115MB	privacy checking
time: 0.001; rss: 115MB	stability index
time: 0.004; rss: 115MB	intrinsic checking
time: 0.002; rss: 115MB	effect checking
time: 0.009; rss: 115MB	match checking
time: 0.005; rss: 115MB	liveness checking
time: 0.024; rss: 115MB	rvalue checking
time: 0.049; rss: 133MB	MIR dump
  time: 0.007; rss: 133MB	SimplifyCfg
  time: 0.012; rss: 133MB	QualifyAndPromoteConstants
  time: 0.014; rss: 133MB	TypeckMir
  time: 0.001; rss: 133MB	SimplifyBranches
  time: 0.004; rss: 133MB	SimplifyCfg
time: 0.036; rss: 133MB	MIR passes
time: 0.060; rss: 133MB	borrow checking
time: 0.003; rss: 133MB	reachability checking
time: 0.007; rss: 133MB	death checking
time: 0.005; rss: 133MB	stability checking
time: 0.000; rss: 133MB	unused lib feature checking
time: 0.040; rss: 133MB	lint checking
time: 0.000; rss: 133MB	resolving dependency formats
  time: 0.001; rss: 133MB	NoLandingPads
  time: 0.003; rss: 133MB	SimplifyCfg
  time: 0.009; rss: 135MB	EraseRegions
  time: 0.001; rss: 135MB	AddCallGuards
  time: 0.051; rss: 138MB	ElaborateDrops
  time: 0.001; rss: 138MB	NoLandingPads
  time: 0.005; rss: 138MB	SimplifyCfg
  time: 0.003; rss: 138MB	InstCombine
  time: 0.003; rss: 138MB	Deaggregator
  time: 0.000; rss: 138MB	CopyPropagation
  time: 0.001; rss: 138MB	AddCallGuards
  time: 0.000; rss: 138MB	PreTrans
time: 0.078; rss: 138MB	Prepare MIR codegen passes
  time: 0.043; rss: 140MB	write metadata
  time: 0.143; rss: 146MB	translation item collection
  time: 0.018; rss: 148MB	codegen unit partitioning
  time: 0.016; rss: 202MB	internalize symbols
time: 1.111; rss: 189MB	translation
time: 0.000; rss: 189MB	assert dep graph
time: 0.000; rss: 189MB	serialize dep graph
  time: 0.085; rss: 140MB	llvm function passes [0]
  time: 0.042; rss: 145MB	llvm module passes [0]
  time: 1.622; rss: 150MB	codegen passes [0]
  time: 0.001; rss: 150MB	codegen passes [0]
time: 1.885; rss: 150MB	LLVM passes
time: 0.000; rss: 150MB	serialize work products
time: 0.139; rss: 94MB	linking
done
