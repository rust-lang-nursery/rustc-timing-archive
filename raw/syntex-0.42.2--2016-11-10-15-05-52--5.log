commit 3dced6f71e6e8cf8f59e3614194a61427a3a408b
Merge: bc1cc1d 67eeb0a
Author: bors <bors@rust-lang.org>
Date:   Thu Nov 10 11:25:17 2016 -0800

    Auto merge of #37645 - jseyfried:fix_crate_var_in_custom_derives, r=nrc
    
    Fix regression involving custom derives on items with `$crate`
    
    The regression was introduced in #37213.
    
    I believe we cannot make the improvements from #37213 work with the current custom derive setup (c.f. https://github.com/rust-lang/rust/issues/37637#issuecomment-258959145) -- we'll have to wait for `TokenStream`'s API to improve.
    
    Fixes #37637.
    r? @nrc
rustc: ./syntex-0.42.2
cargo rustc -p syntex_syntax -- -Ztime-passes -Zinput-stats
   Compiling syntex_syntax v0.42.0
time: 0.093; rss: 71MB	parsing
Lines of code:             33687
Pre-expansion node count:  223115
time: 0.000; rss: 71MB	recursion limit
time: 0.000; rss: 71MB	crate injection
time: 0.000; rss: 71MB	plugin loading
time: 0.000; rss: 71MB	plugin registration
time: 0.234; rss: 144MB	expansion
time: 0.000; rss: 144MB	maybe building test harness
time: 0.006; rss: 144MB	maybe creating a macro crate
Post-expansion node count: 638863
time: 0.000; rss: 144MB	checking for inline asm in case the target doesn't support it
time: 0.013; rss: 144MB	complete gated feature checking
time: 0.023; rss: 144MB	early lint checks
time: 0.007; rss: 144MB	AST validation
time: 0.076; rss: 158MB	name resolution
time: 0.044; rss: 184MB	lowering ast -> hir
time: 0.008; rss: 194MB	indexing hir
time: 0.006; rss: 194MB	attribute checking
time: 0.004; rss: 150MB	language item collection
time: 0.010; rss: 150MB	lifetime resolution
time: 0.000; rss: 150MB	looking for entry point
time: 0.000; rss: 150MB	looking for plugin registrar
time: 0.040; rss: 171MB	region resolution
time: 0.005; rss: 171MB	loop checking
time: 0.005; rss: 171MB	static item recursion checking
time: 0.326; rss: 160MB	compute_incremental_hashes_map
time: 0.000; rss: 160MB	load_dep_graph
time: 0.040; rss: 170MB	type collecting
time: 0.001; rss: 170MB	variance inference
time: 0.018; rss: 173MB	coherence checking
time: 0.092; rss: 175MB	wf checking
time: 0.185; rss: 185MB	item-types checking
time: 3.303; rss: 233MB	item-bodies checking
time: 0.000; rss: 233MB	drop-impl checking
time: 0.216; rss: 253MB	const checking
time: 0.045; rss: 253MB	privacy checking
time: 0.005; rss: 253MB	stability index
time: 0.017; rss: 253MB	intrinsic checking
time: 0.014; rss: 253MB	effect checking
time: 0.045; rss: 253MB	match checking
time: 0.048; rss: 237MB	liveness checking
time: 0.177; rss: 237MB	rvalue checking
time: 0.377; rss: 436MB	MIR dump
  time: 0.056; rss: 438MB	SimplifyCfg
  time: 0.073; rss: 438MB	QualifyAndPromoteConstants
  time: 0.132; rss: 438MB	TypeckMir
  time: 0.005; rss: 438MB	SimplifyBranches
  time: 0.036; rss: 438MB	SimplifyCfg
time: 0.302; rss: 438MB	MIR cleanup and validation
time: 0.495; rss: 439MB	borrow checking
time: 0.026; rss: 439MB	reachability checking
time: 0.039; rss: 439MB	death checking
time: 0.030; rss: 441MB	stability checking
time: 0.000; rss: 441MB	unused lib feature checking
time: 0.198; rss: 441MB	lint checking
time: 0.000; rss: 441MB	resolving dependency formats
  time: 0.003; rss: 441MB	NoLandingPads
  time: 0.027; rss: 441MB	SimplifyCfg
  time: 0.060; rss: 449MB	EraseRegions
  time: 0.011; rss: 449MB	AddCallGuards
  time: 0.271; rss: 464MB	ElaborateDrops
  time: 0.003; rss: 464MB	NoLandingPads
  time: 0.052; rss: 464MB	SimplifyCfg
  time: 0.028; rss: 464MB	InstCombine
  time: 0.012; rss: 464MB	Deaggregator
  time: 0.002; rss: 464MB	CopyPropagation
  time: 0.035; rss: 464MB	SimplifyLocals
  time: 0.010; rss: 464MB	AddCallGuards
  time: 0.003; rss: 464MB	PreTrans
time: 0.518; rss: 464MB	MIR optimisations
  time: 0.060; rss: 475MB	write metadata
  time: 0.409; rss: 484MB	translation item collection
  time: 0.060; rss: 493MB	codegen unit partitioning
  time: 0.048; rss: 743MB	internalize symbols
time: 4.513; rss: 743MB	translation
time: 0.000; rss: 743MB	assert dep graph
time: 0.000; rss: 743MB	serialize dep graph
  time: 0.531; rss: 420MB	llvm function passes [0]
  time: 0.253; rss: 429MB	llvm module passes [0]
  time: 10.450; rss: 427MB	codegen passes [0]
  time: 0.000; rss: 427MB	codegen passes [0]
time: 11.993; rss: 421MB	LLVM passes
time: 0.000; rss: 421MB	serialize work products
time: 0.342; rss: 105MB	linking
done
