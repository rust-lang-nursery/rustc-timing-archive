commit bff06afbc5eb980cbfa2fa4f35e0c431828d3471
Merge: 4344f14 d17f0b0
Author: bors <bors@rust-lang.org>
Date:   Sat Oct 8 12:36:11 2016 -0700

    Auto merge of #37027 - alexcrichton:less-deps-in-bootstrap, r=japaric
    
    rustbuild: Optimize build times slightly
    
    As the entry point for building the Rust compiler, a good user experience hinges
    on this compiling quickly to get to the meat of the problem. To that end use
    `#[cfg]`-specific dependencies to avoid building Windows crates on Unix and drop
    the `regex` crate for now which was easily replacable with some string
    searching.
rustc: ./html5ever-2016-08-25
cargo rustc -- -Ztime-passes -Zinput-stats
   Compiling html5ever v0.5.4 (file:///root/benchmarks/html5ever-2016-08-25)
time: 0.028; rss: 51MB	parsing
Lines of code:             8210
Pre-expansion node count:  52238
time: 0.000; rss: 51MB	recursion limit
time: 0.000; rss: 51MB	crate injection
time: 0.000; rss: 51MB	plugin loading
time: 0.000; rss: 51MB	plugin registration
time: 1.236; rss: 102MB	expansion
time: 0.000; rss: 102MB	maybe building test harness
time: 0.002; rss: 102MB	maybe creating a macro crate
Post-expansion node count: 163524
time: 0.000; rss: 102MB	checking for inline asm in case the target doesn't support it
time: 0.003; rss: 102MB	complete gated feature checking
time: 0.009; rss: 102MB	early lint checks
time: 0.002; rss: 102MB	AST validation
time: 0.018; rss: 107MB	name resolution
time: 0.016; rss: 123MB	lowering ast -> hir
time: 0.004; rss: 127MB	indexing hir
time: 0.002; rss: 127MB	attribute checking
time: 0.002; rss: 104MB	language item collection
time: 0.002; rss: 104MB	lifetime resolution
time: 0.000; rss: 104MB	looking for entry point
time: 0.000; rss: 104MB	looking for plugin registrar
time: 0.016; rss: 110MB	region resolution
time: 0.002; rss: 110MB	loop checking
time: 0.002; rss: 110MB	static item recursion checking
time: 0.023; rss: 110MB	compute_incremental_hashes_map
time: 0.000; rss: 110MB	load_dep_graph
time: 0.010; rss: 111MB	type collecting
time: 0.000; rss: 111MB	variance inference
time: 0.026; rss: 114MB	coherence checking
time: 0.025; rss: 115MB	wf checking
time: 0.347; rss: 126MB	item-types checking
time: 0.507; rss: 136MB	item-bodies checking
time: 0.000; rss: 136MB	drop-impl checking
time: 0.073; rss: 139MB	const checking
time: 0.009; rss: 139MB	privacy checking
time: 0.001; rss: 139MB	stability index
time: 0.003; rss: 139MB	intrinsic checking
time: 0.003; rss: 139MB	effect checking
time: 0.024; rss: 139MB	match checking
time: 0.014; rss: 133MB	liveness checking
time: 0.029; rss: 133MB	rvalue checking
time: 0.117; rss: 181MB	MIR dump
  time: 0.008; rss: 181MB	SimplifyCfg
  time: 0.015; rss: 181MB	QualifyAndPromoteConstants
  time: 0.024; rss: 181MB	TypeckMir
  time: 0.000; rss: 181MB	SimplifyBranches
  time: 0.004; rss: 181MB	SimplifyCfg
time: 0.052; rss: 181MB	MIR passes
time: 0.095; rss: 186MB	borrow checking
time: 0.003; rss: 186MB	reachability checking
time: 0.007; rss: 186MB	death checking
time: 0.009; rss: 186MB	stability checking
time: 0.000; rss: 186MB	unused lib feature checking
time: 0.064; rss: 186MB	lint checking
time: 0.000; rss: 186MB	resolving dependency formats
  time: 0.000; rss: 186MB	NoLandingPads
  time: 0.004; rss: 186MB	SimplifyCfg
  time: 0.010; rss: 186MB	EraseRegions
  time: 0.001; rss: 186MB	AddCallGuards
  time: 0.076; rss: 189MB	ElaborateDrops
  time: 0.000; rss: 189MB	NoLandingPads
  time: 0.007; rss: 187MB	SimplifyCfg
  time: 0.008; rss: 185MB	InstCombine
  time: 0.001; rss: 185MB	Deaggregator
  time: 0.000; rss: 185MB	CopyPropagation
  time: 0.001; rss: 185MB	AddCallGuards
  time: 0.000; rss: 185MB	PreTrans
time: 0.121; rss: 185MB	Prepare MIR codegen passes
  time: 0.053; rss: 187MB	write metadata
  time: 0.051; rss: 188MB	translation item collection
  time: 0.006; rss: 188MB	codegen unit partitioning
  time: 0.006; rss: 202MB	internalize symbols
time: 0.362; rss: 171MB	translation
time: 0.000; rss: 171MB	assert dep graph
time: 0.000; rss: 171MB	serialize dep graph
  time: 0.020; rss: 101MB	llvm function passes [0]
  time: 0.012; rss: 103MB	llvm module passes [0]
  time: 0.468; rss: 109MB	codegen passes [0]
  time: 0.001; rss: 109MB	codegen passes [0]
time: 0.540; rss: 109MB	LLVM passes
time: 0.000; rss: 109MB	serialize work products
time: 0.058; rss: 91MB	linking
done
